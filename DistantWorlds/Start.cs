// Decompiled with JetBrains decompiler
// Type: DistantWorlds.Start
// Assembly: DistantWorlds, Version=1.9.5.12, Culture=neutral, PublicKeyToken=null
// MVID: DFB67E2D-B390-4FC8-9690-CA3C0824704F
// Assembly location: F:\SteamLibrary\steamapps\common\Distant Worlds Universe\DistantWorlds - Copy-Unpacked.exe

//using AxWMPLib;
using BaconDistantWorlds;
using DistantWorlds.Controls;
using DistantWorlds.Types;
using ExpansionMod;
using Ionic.Zlib;
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing.Text;
using System.Globalization;
using System.IO;
using System.Media;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.Windows.Forms;
using System.Windows.Forms.Layout;
using System.Xml;
//using WMPLib;
using static System.Windows.Forms.AxHost;
using EmpireList = DistantWorlds.Types.EmpireList;
using LinearGradientMode = DistantWorlds.Controls.LinearGradientMode;

namespace DistantWorlds
{
    public class Start : Form, IFontCache
    {
        private delegate void Delegate7(Bitmap image);

        private delegate void Delegate8(string customizationSetName, bool changeDefault, bool updateControls);

        private delegate void Delegate9(string customizationSetName, bool updateControls);

        private delegate void Delegate10(string message);

        public delegate void RecoverFromLoadErrorDelegate();

        public struct SIZE
        {
            public int cx;

            public int cy;
        }

        private delegate void Delegate11();

        private IContainer icontainer_0;

        private LinkLabel lnkNewGame;

        private LinkLabel lnkLoadGame;

        private LinkLabel lnkExit;

        private Label lblCopyright;

        private Label lblVersion;

        private PictureBox picTitle;

        private GradientPanel pnlButtons;

        private BorderPanel pnlSaveLoadProgress;

        private PictureBox picSaveLoadGalaxy;

        private ScreenPanel pnlNewGame;

        private ComboBox cmbYourEmpireStartLocation;

        private SmoothLabel lblHelpDescription;

        private ComboBox cmbFlagShape;

        private CheckBox chkVictoryTimeLimit;

        private CheckBox chkVictoryEconomy;

        private CheckBox chkVictoryPopulation;

        private CheckBox chkVictoryTerritory;

        private CheckBox chkVictoryTimeStart;

        private NumericUpDown numVictoryTimeStartYears;

        private NumericUpDown numVictoryTimeLimitYears;

        private SmoothLabel lblHelpTitle;

        private LinkLabel lnkCheckForUpdates;

        private LinkLabel lnkPlayScenario;

        private LinkLabel lnkCopyright;

        private ScreenPanel pnlQuickStart;

        private GradientPanel pnlQuickStartDescription;

        private Label lblQuickStartDescriptionTitle;

        private GlassButton btnQuickStart;

        private GlassButton btnQuickStartCancel;

        private RadioButton radioClassicEmpire;

        private Label lblQuickStartDescriptionDetail;

        private RadioButton radioConflict;

        private RadioButton radioRingRace;

        private RadioButton radioEpic;

        private RadioButton radioClassicRebels;

        private RadioButton radioSmall;

        private RadioButton radioRandom;

        private NumericUpDown numVictoryPopulationPercent;

        private NumericUpDown numVictoryEconomyPercent;

        private NumericUpDown numVictoryTerritoryPercent;

        private EnabledLabel lblSaveLoadMessage;

        private RadioButton radioExpandingSettlements;

        private RadioButton radioExpandingFromTheCore;

        private RadioButton radioFullyDevelopedStandard;

        private RadioButton radioFullyDevelopedLarge;

        private RadioButton radioFullyDevelopedSmall;

        private RadioButton radioSovereignTerritoriesMinorFaction;

        private RadioButton radioSovereignTerritoriesRegionalRuler;

        private RadioButton radioGalacticRepublicWildFrontiers;

        private RadioButton radioGalacticRepublicSupremeRuler;

        private LinkLabel lnkTutorial;

        private BorderPanel borderPanel1;

        private BorderPanel borderPanel2;

        private ScreenPanel FtIzCrmve5;

        private GlassButton btnTutorialStartCancel;

        private LinkLabel lnkTutorialExpansionDiplomacy;

        private LinkLabel lnkTutorialFindingYourWayAround;

        private ScreenPanel pnlEncyclopedia;

        private EncyclopediaTopicTree pnlEncyclopediaTopics;

        private GlassButton btnEncyclopediaHome;

        private WebBrowser webEncyclopediaContent;

        private RelatedEncyclopediaItemsBox pnlEncyclopediaRelatedItems;

        private GlassButton btnEncyclopediaBack;

        private GlassButton btnEncyclopediaForward;

        private CheckBox chkEncyclopediaShowAtStart;

        private LinkLabel lnkGalactopedia;

        private LinkLabel lnkAbout;

        private BorderPanel pnlAbout;

        private Label upEzpZsgAK;

        private GlassButton btnAboutClose;

        private Label lblAboutTitle;

        private PictureBox picAbout;

        //internal AxWindowsMediaPlayer mediaPlayer;

        private Label lblMenuHints;

        private RaceDropDown cmbQuickStartRace;

        private Label lblQuickStartRace;

        private LinkLabel lnkQuickStartRaceHelp;

        private ScrollingCreditsPanel pnlAboutCredits;

        private ScreenPanel pnlGameOptions;

        private GroupBox grpOptionsDisplaySettings;

        private CheckBox chkOptionsShowSystemNebulae;

        private Label lblOptionsMainViewZoomSpeed;

        private ColorSlider sldOptionsMainViewZoomSpeed;

        private Label lblOptionsMainViewStarFieldSize;

        private ColorSlider sldOptionsMainViewStarFieldSize;

        private Label lblOptionsMainViewScrollSpeed;

        private ColorSlider sldOptionsMainViewScrollSpeed;

        private GroupBox grpOptionsScrollingMessages;

        private CheckBox chkOptionsScrollingMessageExploration;

        private CheckBox chkOptionsScrollingMessageIntelligenceMissions;

        private CheckBox chkOptionsScrollingMessageRequestWarning;

        private CheckBox chkOptionsScrollingMessageColonyGainLoss;

        private CheckBox chkOptionsScrollingMessageDiplomacyTreaties;

        private CheckBox chkOptionsScrollingMessageWarTradeSanctions;

        private CheckBox chkOptionsScrollingMessageUnderAttackCivilianShips;

        private CheckBox chkOptionsScrollingMessageEmpireMetDestroyed;

        private CheckBox chkOptionsScrollingMessageResearchBreakthrough;

        private CheckBox chkOptionsScrollingMessageNewShipBuilt;

        private GroupBox grpOptionsPopupMessages;

        private CheckBox chkOptionsPopupMessageExploration;

        private CheckBox chkOptionsPopupMessageIntelligenceMissions;

        private CheckBox chkOptionsPopupMessageRequestWarning;

        private CheckBox chkOptionsPopupMessageColonyGainLoss;

        private CheckBox chkOptionsPopupMessageDiplomacyTreaties;

        private CheckBox chkOptionsPopupMessageDiplomacyWarTradeSanctions;

        private CheckBox chkOptionsPopupMessageEmpireMetDestroyed;

        private CheckBox chkOptionsPopupMessageResearchBreakthrough;

        private CheckBox chkOptionsPopupMessageShipBuilt;

        private CheckBox chkOptionsAutoPauseInPopup;

        private GroupBox grpOptionsVolume;

        private Label lblOptionsSoundEffectsVolume;

        private Label lblOptionsMusicVolume;

        private ColorSlider sldOptionsSoundEffectsVolume;

        private ColorSlider sldOptionsMusicVolume;

        private GroupBox grpOptionsControl;

        private ComboBox cmbOptionsAutomationMode;

        private Label lblOptionsControlColonization;

        private Label lblOptionsControlDiplomacyTreaties;

        private ComboBox cmbOptionsControlColonization;

        private Label lblOptionsControlAttacks;

        private Label lblOptionsControlConstruction;

        private ComboBox cmbOptionsControlDiplomacyTreaties;

        private ComboBox cmbOptionsControlConstruction;

        private ComboBox cmbOptionsControlAttacks;

        private Label lblOptionsControlAgentMissions;

        private Label lblOptionsControlDiplomacyGifts;

        private GlassButton btnGameOptionsResetAutomationMessages;

        private Label lblOptionsControlDiplomacyOffense;

        private ComboBox cmbOptionsControlAgentMissions;

        private ComboBox cmbOptionsControlDiplomacyOffense;

        private ComboBox cmbOptionsControlDiplomacyGifts;

        private CheckBox chkOptionsControlTroops;

        private CheckBox chkOptionsControlColonyTaxRates;

        private CheckBox chkOptionsControlFleets;

        private CheckBox chkOptionsControlDesigns;

        private Panel pnlOptionsAutomationMode;

        private Label lblOptionsAutomationMode;

        private LinkLabel lnkOptions;

        private CheckBox chkOptionsScrollingMessageShipNeedsRefuelling;

        private CheckBox chkOptionsScrollingMessageShipMissionComplete;

        private CheckBox chkOptionsPopupMessageShipNeedsRefuelling;

        private CheckBox chkOptionsPopupMessageShipMissionComplete;

        private Label lblOptionsMouseScrollMode;

        private ComboBox cmbOptionsMouseScrollWheelBehaviour;

        private ScreenPanel pnlGameOptionsAdvancedDisplaySettings;

        private GroupBox grpGameOptionsAdvancedDisplaySettingsMaximumFramerate;

        private NumericUpDown numGameOptionsAdvancedDisplaySettingsMaximumFramerate;

        private CheckBox chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited;

        private Label lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS;

        private GlassButton btnGameOptionsAdvancedDisplaySettings;

        private Panel pnlStartNewGameVictoryConditions;

        private Panel pnlStartNewGameYourEmpire;

        private Panel pnlStartNewGameOtherEmpires;

        private GlassButton btnStartNewGameYourEmpirePrevious;

        private GlassButton btnStartNewGameYourEmpireNext;

        private GlassButton btnStartNewGameStart;

        private GlassButton btnStartNewGameVictoryConditionsPrevious;

        private GradientPanel pnlStartNewGameYourEmpireDetails;

        private GradientPanel pnlStartNewGameYourEmpireGovernment;

        private SmoothLabel lblStartNewGameYourEmpireGovernmentName;

        private LinkLabel lnkStartNewGameYourEmpireGovernment;

        private SmoothLabel lblStartNewGameYourEmpireGovernmentAttributes;

        private SmoothLabel lblStartNewGameYourEmpireGovernmentTitle;

        private ColorDropDown cmbSecondaryColor;

        private ColorDropDown cmbPrimaryColor;

        private SmoothLabel lblStartNewGameYourEmpireName;

        private TextBox txtYourEmpireName;

        private SmoothLabel lblStartNewGameYourEmpireMainColor;

        private SmoothLabel lblStartNewGameYourEmpireSecondaryColor;

        private GradientPanel pnlStartNewGameYourEmpireGalaxyLocation;

        private PictureBox picStartNewGameYourEmpireGalaxyLocation;

        private SmoothLabel lblStartNewGameYourEmpireGalaxyLocation;

        private LabelledTrackBar tbarStartNewGameYourEmpireSize;

        private LabelledTrackBar tbarStartNewGameYourEmpireTechLevel;

        private LabelledTrackBar tbarStartNewGameYourEmpireHomeSystem;

        private GlassButton btnStartNewGameOtherEmpiresNext;

        private GlassButton btnStartNewGameOtherEmpiresPrevious;

        private CheckBox chkGalaxyNewEmpiresDuringGame;

        private Panel pnlStartNewGameTheGalaxy;

        private LabelledTrackBar tbarStartNewGameTheGalaxyPirates;

        private LabelledTrackBar tbarStartNewGameTheGalaxySpaceCreatures;

        private LabelledTrackBar tbarStartNewGameTheGalaxyResearchSpeed;

        private LabelledTrackBar tbarStartNewGameTheGalaxyAggression;

        private LabelledTrackBar tbarStartNewGameTheGalaxyExpansion;

        private GlassButton btnStartNewGameTheGalaxyNext;

        private GradientPanel pnlStartNewGameGalaxyShapeSize;

        public LabelledTrackBar tbarStartNewGameTheGalaxyStarDensity;

        private SmoothLabel lblStartNewGameGalaxyShapeTitle;

        private SmoothLabel lblStartNewGameGalaxyShapeDescription;

        private RadioButton radStartNewGameGalaxyShapeSpiral;

        private RadioButton radStartNewGameGalaxyShapeRing;

        private RadioButton radStartNewGameGalaxyShapeIrregular;

        private RadioButton radStartNewGameGalaxyShapeElliptical;

        private PictureBox picStartNewGameTheGalaxyPreview;

        private SmoothLabel lblStartNewGameOtherEmpiresOR;

        private GradientPanel pnlStartNewGameOtherEmpiresAutoGen;

        private GradientPanel pnlStartNewGameOtherEmpiresList;

        private StartingEmpiresListView ctlStartingEmpiresList;

        private GlassButton btnAddNewEmpire;

        private SmoothLabel lblStartNewGameOtherEmpiresAutoGenNumberDescrip2;

        private SmoothLabel lblStartNewGameOtherEmpiresAutoGenNumberDescrip1;

        private CheckBox chkOtherEmpiresAutogenerate;

        private NumericUpDown numAutogenerateEmpiresAmount;

        private PictureBox picStartNewGameOtherEmpiresImageBottom;

        private PictureBox picStartNewGameTheGalaxyImage;

        private PictureBox picStartNewGameYourEmpireImage;

        private LabelledTrackBar tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail;

        private PictureBox picStartNewGameVictoryConditionsImage;

        private SmoothLabel lblVictorySandbox;

        private LinkLabel lnkThemes;

        private ScreenPanel pnlThemes;

        private GradientPanel pnlThemeDetail;

        private SmoothLabel lblThemeDescription;

        private SmoothLabel lblThemeTitle;

        private GlassButton btnThemeSwitch;

        private GlassButton btnThemeCancel;

        private Label lblCurrentTheme;

        private PictureBox picThemeImage;

        private GroupBox grpOptionsAutoSave;

        private NumericUpDown numOptionsAutoSaveMinutes;

        private CheckBox chkOptionsAutoSave;

        private GroupBox grpGameOptionsAdvancedDisplaySettingsGalaxyIcons;

        private CheckBox chkGameOptionsGalaxyDisplayAlwaysPirates;

        private CheckBox chkGameOptionsGalaxyDisplayColonyShips;

        private CheckBox chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips;

        private CheckBox chkGameOptionsGalaxyDisplayAlwaysEnemyFleets;

        private CheckBox chkGameOptionsGalaxyDisplayConstructionShips;

        private CheckBox chkGameOptionsGalaxyDisplaySpacePorts;

        private CheckBox chkGameOptionsGalaxyDisplayExplorationShips;

        private CheckBox chkGameOptionsGalaxyDisplayResupplyShips;

        private CheckBox chkGameOptionsGalaxyDisplayOtherBases;

        private CheckBox chkGameOptionsGalaxyDisplayCivilianShips;

        private CheckBox chkGameOptionsGalaxyDisplayFleets;

        private CheckBox chkGameOptionsGalaxyDisplayMilitaryShips;

        private LabelledTrackBar tbarStartNewGameYourEmpireCorruption;

        private ScreenPanel pnlGameOptionsEmpireSettings;

        private LabelledTrackBar sldGameOptionsAttackOvermatch;

        private GroupBox grpGameOptionsDefaultEngagementStances;

        private ComboBox cmbGameOptionsEngagementStanceOther;

        private ComboBox cmbGameOptionsEngagementStancePatrol;

        private Label lblGameOptionsEngagementStanceOther;

        private Label lblGameOptionsEngagementStanceEscort;

        private ComboBox cmbGameOptionsEngagementStanceEscort;

        private Label lblGameOptionsEngagementStancePatrol;

        private CheckBox chkOptionsAllowSameSystemAsOtherEmpires;

        private GlassButton btnGameOptionsEmpireSettings;

        private ComboBox cmbGameOptionsEngagementStanceAttack;

        private Label lblGameOptionsEngagementStanceAttack;

        private GroupBox grpGameOptionsFleetAttackSettings;

        private NumericUpDown numGameOptionsFleetAttackGather;

        private NumericUpDown numGameOptionsFleetAttackRefuel;

        private Label lblGameOptionsFleetAttackGather;

        private Label lblGameOptionsFleetAttackRefuel;

        private CheckBox chkOptionsControlResearch;

        private Label lblOptionsControlColonyFacilities;

        private ComboBox cmbOptionsControlColonyFacilities;

        private RadioButton radStartNewGameGalaxyShapeClustersVaried;

        private RadioButton radStartNewGameGalaxyShapeClustersEven;

        private SmoothLabel lblStartNewGameTheGalaxyResearchBaseTechLabel;

        private NumericUpDown numStartNewGameTheGalaxyResearchBaseTech;

        private ComboBox cmbStartNewGameTheGalaxyPirateProximity;

        private SmoothLabel lblStartNewGameTheGalaxyPirateProximityLabel;

        private CheckBox chkOptionsLoadedGamesPaused;

        private GroupBox grpGameOptionsDiscoveries;

        private ComboBox cmbGameOptionsEncounterAbandonedShipOrBase;

        private ComboBox cmbGameOptionsEncounterRuins;

        private Label lblGameOptionsEncounterAbandonedShipOrBase;

        private Label lblGameOptionsEncounterRuins;

        private CheckBox chkOptionsNewShipsAutomated;

        private CheckBox chkStoryReturnOfTheShakturi;

        private CheckBox chkQuickStartReturnOfTheShakturiStoryEvents;

        private CheckBox chkStoryDistantWorlds;

        private CheckBox chkQuickStartDistantWorldsStoryEvents;

        private LabelledTrackBar tbarStartNewGameTheGalaxyDifficulty;

        private CheckBox chkVictoryEnableDisasterEvents;

        private CheckBox chkVictoryEnableRaceSpecificConditions;

        private CheckBox chkOptionsSuppressAllPopups;

        private LabelledTrackBar tbarStartNewGameTheGalaxyDimensions;

        private CheckBox chkVictoryEnableRaceSpecificEvents;

        private SmoothLabel lblVictoryThresholdPercentage;

        private ComboBox cmbVictoryThresholdPercentage;

        private Panel pnlStartNewGameYourRace;

        private GradientPanel pnlStartNewGameYourEmpireRace;

        private Panel pnlStartNewGameYourEmpireRaceAttributesContainer;

        private SmoothLabel lblStartNewGameYourEmpireRaceName;

        private LinkLabel lnkStartNewGameYourEmpireRace;

        private PictureBox picStartNewGameYourEmpireRace;

        private RaceDropDown cmbStartNewGameYourEmpireRace;

        private SmoothLabel lblStartNewGameYourEmpireRaceTitle;

        private GlassButton btnStartNewGameYourRacePrevious;

        private GlassButton btnStartNewGameYourRaceNext;

        private RaceSummaryPanel pnlStartNewGameYourEmpireRaceAttributes;

        private Panel pnlStartNewGameVictoryConditionsGroup;

        private PictureBox picStartNewGameYourRaceImage;

        private CheckBox chkOptionsControlPopulationPolicy;

        private CheckBox chkOptionsControlCharacterLocations;

        private Panel pnlStartNewGameColonizationTerritory;

        private LabelledTrackBar tbarStartNewGameTheGalaxyColonyPrevalence;

        private LabelledTrackBar tbarStartNewGameTheGalaxyAlienLife;

        private PictureBox picStartNewGameColonizationTerritoryImage;

        private GlassButton btnStartNewGameColonizationTerritoryPrevious;

        private GlassButton btnStartNewGameColonizationTerritoryNext;

        private GroupBox grpStartNewGameColonizationTerritoryColonizationRange;

        private Label lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle;

        private ColorSlider sldStartNewGameColonizationTerritoryColonyInfluenceRange;

        private Label lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue;

        private Label lblStartNewGameColonizationTerritoryColonizationRangeValue;

        private Label lblStartNewGameColonizationTerritoryColonizationRangeTitle;

        private ColorSlider sldStartNewGameColonizationTerritoryColonizationRange;

        private CheckBox chkStartNewGameColonizationTerritoryEnforceColonizationRange;

        private Label lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion;

        private Panel pnlStartNewGameYourEmpireType;

        private GlassButton btnStartNewGameYourEmpireTypeNormalShadows;

        private GlassButton btnStartNewGameYourEmpireTypePirateShadows;

        private CheckBox chkStartNewGameTheGalaxyDifficultyScaling;

        private GlassButton btnStartNewGameYourEmpireTypeNormalClassic;

        private GlassButton btnStartNewGameYourEmpireTypePirateClassic;

        private GlassButton btnStartNewGameTheGalaxyPrevious;

        private Label lblOptionsControlOfferPirateMissions;

        private ComboBox cmbOptionsControlOfferPirateMissions;

        private CheckBox chkStoryShadows;

        private SmoothLabel lblVictoryPiratePlaystyle;

        private ComboBox cmbVictoryPiratePlayStyle;

        private SmoothLabel lblPiratePlaystyleDescription;

        private LinkLabel lnkTutorialPreWarpEmpire;

        private LinkLabel lnkTutorialPlayAsPirate;

        private PictureBox picStartNewGameYourEmpirePiratePlaystyle;

        private CheckBox chkStartNewGameTheGalaxyPiratesRespawn;

        private GroupBox grpGameOptionsDefaultEngagementStancesManual;

        private ComboBox cmbGameOptionsEngagementStanceAttackManual;

        private Label lblGameOptionsEngagementStanceAttackManual;

        private ComboBox cmbGameOptionsEngagementStanceOtherManual;

        private ComboBox cmbGameOptionsEngagementStancePatrolManual;

        private Label lblGameOptionsEngagementStanceOtherManual;

        private Label lblGameOptionsEngagementStanceEscortManual;

        private ComboBox cmbGameOptionsEngagementStanceEscortManual;

        private Label lblGameOptionsEngagementStancePatrolManual;

        private LabelledTrackBar tbarStartNewGameTheGalaxyPirateStrength;

        private CheckBox chkStartNewGameEnableTechTrading;

        private GovernmentStyleDropDown cmbStartNewGameYourEmpireGovernment;

        private Panel pnlStartNewGameGalaxyMaps;

        private GlassButton btnStartNewGameGalaxyMapsStart;

        private GlassButton btnStartNewGameGalaxyMapsCustom;

        private SmoothLabel lblStartNewGameGalaxyMapsExplanation;

        private EmpireSummaryPanel pnlStartNewGameGalaxyMapsEmpire;

        private EmpireSummaryListView ctlStartNewGameGalaxyMapsEmpires;

        private GalaxySummaryPanel pnlStartNewGameGalaxyMapsGalaxy;

        private GalaxySummaryListView ctlStartNewGameGalaxyMapsGalaxies;

        private SmoothLabel lblStartNewGameGalaxyMapsAvailableFactions;

        private SmoothLabel lblStartNewGameGalaxyMapsAvailableGalaxies;

        private GradientPanel pnlStartNewGameTheGalaxyLoadExisting;

        private GlassButton btnStartNewGameTheGalaxyLoadExistingClear;

        private GlassButton btnStartNewGameTheGalaxyLoadExistingBrowse;

        private SmoothLabel lblStartNewGameTheGalaxyLoadExistingFilepath;

        private SmoothLabel lblStartNewGameTheGalaxyLoadExistingTitle;

        private CheckBox chkStartNewGameTheGalaxyLoadExistingSpecialLocations;

        private CheckBox chkStartNewGameTheGalaxyLoadExistingRuins;

        private CheckBox chkStartNewGameTheGalaxyLoadExistingCreatures;

        private CheckBox chkStartNewGameTheGalaxyLoadExistingSceneryResearch;

        private CheckBox chkStartNewGameTheGalaxyLoadExistingResources;

        private SmoothLabel lblThemeGalaxyMaps;

        private CheckBox chkOptionsScrollingMessageUnderAttackCivilianBases;

        private CheckBox chkOptionsScrollingMessageUnderAttackMilitaryShips;

        private CheckBox chkOptionsScrollingMessageUnderAttackExplorationShips;

        private CheckBox chkOptionsScrollingMessageUnderAttackOtherStateBases;

        private CheckBox chkOptionsScrollingMessageUnderAttackColonyConstructionShips;

        private CheckBox chkOptionsScrollingMessageUnderAttackColoniesSpaceports;

        private ScreenPanel pnlGameOptionsMessages;

        private CheckBox chkOptionsPopupMessageUnderAttackCivilianBases;

        private CheckBox chkOptionsPopupMessageUnderAttackMilitaryShips;

        private CheckBox chkOptionsPopupMessageUnderAttackExplorationShips;

        private CheckBox chkOptionsPopupMessageUnderAttackOtherStateBases;

        private CheckBox chkOptionsPopupMessageUnderAttackColonyConstructionShips;

        private CheckBox chkOptionsPopupMessageUnderAttackColoniesSpaceports;

        private CheckBox chkOptionsPopupMessageUnderAttackCivilianShips;

        private GlassButton btnGameOptionsShowMessages;

        private CheckBox chkStartNewGameEnableGiantKaltors;

        private CheckBox chkOptionsPopupMessageConstructionResourceShortage;

        private CheckBox chkOptionsScrollingMessageConstructionResourceShortage;

        private Panel pnlStartNewGameJumpStart;

        private GlassButton btnJumpStartTheGalaxyNext;

        private GlassButton btnJumpStartTheGalaxyPrevious;

        private LabelledTrackBar tbarJumpStartTheGalaxyDifficulty;

        private GradientPanel pnlJumpStartGalaxyShapeSize;

        private LabelledTrackBar tbarJumpStartTheGalaxyDimensions;

        private RadioButton radJumpStartGalaxyShapeVariedClusters;

        private RadioButton radJumpStartGalaxyShapeEvenClusters;

        private LabelledTrackBar tbarJumpStartTheGalaxyStarDensity;

        private SmoothLabel lblJumpStartGalaxyShapeTitle;

        private SmoothLabel lblJumpStartGalaxyShapeDescription;

        private RadioButton radJumpStartGalaxyShapeSpiral;

        private RadioButton radJumpStartGalaxyShapeRing;

        private RadioButton radJumpStartGalaxyShapeIrregular;

        private RadioButton radJumpStartGalaxyShapeElliptical;

        private PictureBox picJumpStartTheGalaxyPreview;

        private GradientPanel pnlJumpStartYourEmpireGovernment;

        private GovernmentStyleDropDown cmbJumpStartYourEmpireGovernment;

        private SmoothLabel lblJumpStartYourEmpireGovernmentName;

        private LinkLabel lnkJumpStartYourEmpireGovernment;

        private SmoothLabel lblJumpStartYourEmpireGovernmentAttributes;

        private SmoothLabel lblJumpStartYourEmpireGovernmentTitle;

        private GradientPanel pnlJumpStartYourEmpireRace;

        private Panel pnlJumpStartYourEmpireRaceAttributesContainer;

        private RaceSummaryPanel pnlJumpStartYourEmpireRaceAttributes;

        private SmoothLabel lblJumpStartYourEmpireRaceName;

        private LinkLabel lnkJumpStartYourEmpireRace;

        private PictureBox picJumpStartYourEmpireRace;

        private RaceDropDown cmbJumpStartYourEmpireRace;

        private SmoothLabel lblJumpStartYourEmpireRaceTitle;

        private CheckBox chkJumpStartTheGalaxyDifficultyScaling;

        private PictureBox picJumpStartYourEmpirePiratePlaystyle;

        private SmoothLabel lblJumpStartPiratePlaystyleDescription;

        private SmoothLabel lblJumpStartVictoryPiratePlaystyle;

        private ComboBox cmbJumpStartVictoryPiratePlayStyle;

        private GlassButton btnStartNewGameYourEmpireTypeLegends;

        private GlassButton btnStartNewGameYourEmpireTypeReturnOfTheShakturi;

        private GlassButton btnStartNewGameYourEmpireTypeQuickStarts;

        private GlassButton btnStartNewGameYourEmpireTypeClassicEra;

        private GlassButton btnStartNewGameYourEmpireTypeTheAncientGalaxy;

        private PictureBox picStartNewGameYourEmpireTypeTimeline;

        public ToolTip toolTip;

        private Panel pnlJumpStartPiratePlaystyleDescriptionContainer;

        private CheckBox chkGameOptionsGalaxyDisplayCleanGalaxyView;

        private SmoothLabel lblActiveTheme;

        private SmoothLabel lblStartNewGameActiveTheme;

        private HoverMenuGroup menuGroup;

        private HoverMenuItem menuExit;

        private HoverMenuItem menuChangeTheme;

        private HoverMenuItem menuOptions;

        private HoverMenuItem menuLoadGame;

        private HoverMenuItem menuStartNewGame;

        private HoverMenuItem menuTutorials;

        private HoverMenuItem menuGalactopedia;

        private HoverMenuItem menuCheckForUpdates;

        private HoverMenuItem menuCredits;

        private Panel pnlTopLeftCorner;

        private Panel pnlBottomLeftCorner;

        private LinkLabel lnkTutorialDealingWithPirates;

        private LinkLabel lnkTutorialFleetsTroops;

        private LinkLabel lnkTutorialResearchDesign;

        private LinkLabel lnkTutorialShipsMissions;

        private LinkLabel lnkTutorialEmpireAndColonies;

        private GlassButton btnStartNewGameIntroductory;

        private RoundRectanglePanel pnlStartNewGameIntroductoryBorder;

        public Main main_0;

        private Game game_0;

        private bool bool_0;

        private bool bool_1;

        private Bitmap bitmap_0;

        private Bitmap bitmap_1;

        private Bitmap bitmap_2;

        private Bitmap bitmap_3;

        private Bitmap bitmap_4;

        private Bitmap bitmap_5;

        private Bitmap bitmap_6;

        private Bitmap bitmap_7;

        private Bitmap bitmap_8;

        private Bitmap bitmap_9;

        internal RaceList raceList_0;

        internal RaceList raceList_1;

        private Bitmap bitmap_10;

        private Bitmap bitmap_11;

        private Bitmap bitmap_12;

        private Bitmap bitmap_13;

        private Color color_0;

        private SolidBrush solidBrush_0;

        internal EncyclopediaItemList encyclopediaItemList_0;

        internal EncyclopediaItemList encyclopediaItemList_1;

        internal int int_0;

        private string[] string_0;

        private double double_0;

        private Thread thread_0;

        private BackgroundWorker oyxRtRyAwjg;

        private System.Timers.Timer timer_0;

        private Panel panel_0;

        private Size size_0;

        private float float_0;

        private Bitmap bitmap_14;

        private Delegate7 delegate7_0;

        private Delegate8 delegate8_0;

        private Delegate9 delegate9_0;

        private Delegate10 delegate10_0;

        private float float_1;

        private PrivateFontCollection privateFontCollection_0;

        private IntPtr intptr_0;

        private IntPtr intptr_1;

        private Font font_0;

        private Font font_1;

        private Font font_2;

        private Font font_3;

        private Font font_4;

        private Font font_5;

        private Font font_6;

        private Font font_7;

        private Font font_8;

        private Font font_9;

        private Font font_10;

        private List<Control> list_0;

        private bool bool_2;

        private bool bool_3;

        internal static ResourceSystem resourceSystem_0;

        private GalaxySummaryList galaxySummaryList_0;

        private Exception exception_0;

        protected static IntPtr m_HBitmap;

        //private Delegate11 delegate11_0;

        private string string_1;

        //private bool bool_4;

        private string wjhRtsSwmsa;

        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams createParams = base.CreateParams;
                createParams.ClassStyle |= 512;
                return createParams;
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && icontainer_0 != null)
            {
                icontainer_0.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            //IL_0049: Unknown result type (might be due to invalid IL or missing references)
            //IL_0053: Expected O, but got Unknown
            //IL_1a52: Unknown result type (might be due to invalid IL or missing references)
            //IL_1a5c: Expected O, but got Unknown
            //IL_1a69: Unknown result type (might be due to invalid IL or missing references)
            //IL_1a73: Expected O, but got Unknown
            //IL_1a80: Unknown result type (might be due to invalid IL or missing references)
            //IL_1a8a: Expected O, but got Unknown
            //IL_1a97: Unknown result type (might be due to invalid IL or missing references)
            //IL_1aa1: Expected O, but got Unknown
            //IL_1aae: Unknown result type (might be due to invalid IL or missing references)
            //IL_1ab8: Expected O, but got Unknown
            this.icontainer_0 = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DistantWorlds.Start));
            this.lblCopyright = new System.Windows.Forms.Label();
            this.lblVersion = new System.Windows.Forms.Label();
            this.picTitle = new System.Windows.Forms.PictureBox();
            this.lnkCopyright = new System.Windows.Forms.LinkLabel();
            //this.mediaPlayer = new AxWindowsMediaPlayer();
            this.lblMenuHints = new System.Windows.Forms.Label();
            this.pnlGameOptions = new DistantWorlds.Controls.ScreenPanel();
            this.btnGameOptionsShowMessages = new DistantWorlds.Controls.GlassButton();
            this.chkOptionsLoadedGamesPaused = new System.Windows.Forms.CheckBox();
            this.grpOptionsAutoSave = new System.Windows.Forms.GroupBox();
            this.numOptionsAutoSaveMinutes = new System.Windows.Forms.NumericUpDown();
            this.chkOptionsAutoSave = new System.Windows.Forms.CheckBox();
            this.lblOptionsMouseScrollMode = new System.Windows.Forms.Label();
            this.cmbOptionsMouseScrollWheelBehaviour = new System.Windows.Forms.ComboBox();
            this.grpOptionsDisplaySettings = new System.Windows.Forms.GroupBox();
            this.btnGameOptionsAdvancedDisplaySettings = new DistantWorlds.Controls.GlassButton();
            this.lblOptionsMainViewZoomSpeed = new System.Windows.Forms.Label();
            this.sldOptionsMainViewZoomSpeed = new DistantWorlds.Controls.ColorSlider();
            this.lblOptionsMainViewStarFieldSize = new System.Windows.Forms.Label();
            this.sldOptionsMainViewStarFieldSize = new DistantWorlds.Controls.ColorSlider();
            this.lblOptionsMainViewScrollSpeed = new System.Windows.Forms.Label();
            this.sldOptionsMainViewScrollSpeed = new DistantWorlds.Controls.ColorSlider();
            this.chkOptionsAutoPauseInPopup = new System.Windows.Forms.CheckBox();
            this.grpOptionsVolume = new System.Windows.Forms.GroupBox();
            this.lblOptionsSoundEffectsVolume = new System.Windows.Forms.Label();
            this.lblOptionsMusicVolume = new System.Windows.Forms.Label();
            this.sldOptionsSoundEffectsVolume = new DistantWorlds.Controls.ColorSlider();
            this.sldOptionsMusicVolume = new DistantWorlds.Controls.ColorSlider();
            this.grpOptionsControl = new System.Windows.Forms.GroupBox();
            this.lblOptionsControlOfferPirateMissions = new System.Windows.Forms.Label();
            this.cmbOptionsControlOfferPirateMissions = new System.Windows.Forms.ComboBox();
            this.chkOptionsControlCharacterLocations = new System.Windows.Forms.CheckBox();
            this.chkOptionsControlPopulationPolicy = new System.Windows.Forms.CheckBox();
            this.lblOptionsControlColonyFacilities = new System.Windows.Forms.Label();
            this.cmbOptionsControlColonyFacilities = new System.Windows.Forms.ComboBox();
            this.chkOptionsControlResearch = new System.Windows.Forms.CheckBox();
            this.btnGameOptionsEmpireSettings = new DistantWorlds.Controls.GlassButton();
            this.cmbOptionsAutomationMode = new System.Windows.Forms.ComboBox();
            this.lblOptionsControlColonization = new System.Windows.Forms.Label();
            this.lblOptionsControlDiplomacyTreaties = new System.Windows.Forms.Label();
            this.cmbOptionsControlColonization = new System.Windows.Forms.ComboBox();
            this.lblOptionsControlAttacks = new System.Windows.Forms.Label();
            this.lblOptionsControlConstruction = new System.Windows.Forms.Label();
            this.cmbOptionsControlDiplomacyTreaties = new System.Windows.Forms.ComboBox();
            this.cmbOptionsControlConstruction = new System.Windows.Forms.ComboBox();
            this.cmbOptionsControlAttacks = new System.Windows.Forms.ComboBox();
            this.lblOptionsControlAgentMissions = new System.Windows.Forms.Label();
            this.lblOptionsControlDiplomacyGifts = new System.Windows.Forms.Label();
            this.btnGameOptionsResetAutomationMessages = new DistantWorlds.Controls.GlassButton();
            this.lblOptionsControlDiplomacyOffense = new System.Windows.Forms.Label();
            this.cmbOptionsControlAgentMissions = new System.Windows.Forms.ComboBox();
            this.cmbOptionsControlDiplomacyOffense = new System.Windows.Forms.ComboBox();
            this.cmbOptionsControlDiplomacyGifts = new System.Windows.Forms.ComboBox();
            this.chkOptionsControlTroops = new System.Windows.Forms.CheckBox();
            this.chkOptionsControlColonyTaxRates = new System.Windows.Forms.CheckBox();
            this.chkOptionsControlFleets = new System.Windows.Forms.CheckBox();
            this.chkOptionsControlDesigns = new System.Windows.Forms.CheckBox();
            this.pnlOptionsAutomationMode = new System.Windows.Forms.Panel();
            this.lblOptionsAutomationMode = new System.Windows.Forms.Label();
            this.pnlGameOptionsMessages = new DistantWorlds.Controls.ScreenPanel();
            this.grpOptionsPopupMessages = new System.Windows.Forms.GroupBox();
            this.chkOptionsPopupMessageConstructionResourceShortage = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageUnderAttackCivilianBases = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageUnderAttackMilitaryShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageUnderAttackExplorationShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageUnderAttackOtherStateBases = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageUnderAttackCivilianShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageShipNeedsRefuelling = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageShipMissionComplete = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageExploration = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageIntelligenceMissions = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageResearchBreakthrough = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageEmpireMetDestroyed = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageColonyGainLoss = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageDiplomacyTreaties = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageRequestWarning = new System.Windows.Forms.CheckBox();
            this.chkOptionsPopupMessageShipBuilt = new System.Windows.Forms.CheckBox();
            this.grpOptionsScrollingMessages = new System.Windows.Forms.GroupBox();
            this.chkOptionsScrollingMessageConstructionResourceShortage = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageUnderAttackCivilianBases = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageUnderAttackExplorationShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageShipNeedsRefuelling = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageShipMissionComplete = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageExploration = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageIntelligenceMissions = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageResearchBreakthrough = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageEmpireMetDestroyed = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageColonyGainLoss = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageUnderAttackCivilianShips = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageWarTradeSanctions = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageDiplomacyTreaties = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageRequestWarning = new System.Windows.Forms.CheckBox();
            this.chkOptionsScrollingMessageNewShipBuilt = new System.Windows.Forms.CheckBox();
            this.pnlThemes = new DistantWorlds.Controls.ScreenPanel();
            this.lblCurrentTheme = new System.Windows.Forms.Label();
            this.pnlThemeDetail = new DistantWorlds.Controls.GradientPanel();
            this.lblThemeGalaxyMaps = new DistantWorlds.Controls.SmoothLabel();
            this.picThemeImage = new System.Windows.Forms.PictureBox();
            this.lblThemeDescription = new DistantWorlds.Controls.SmoothLabel();
            this.lblThemeTitle = new DistantWorlds.Controls.SmoothLabel();
            this.btnThemeSwitch = new DistantWorlds.Controls.GlassButton();
            this.btnThemeCancel = new DistantWorlds.Controls.GlassButton();
            this.pnlNewGame = new DistantWorlds.Controls.ScreenPanel();
            this.pnlStartNewGameYourEmpireType = new System.Windows.Forms.Panel();
            this.pnlStartNewGameIntroductoryBorder = new DistantWorlds.Controls.RoundRectanglePanel();
            this.btnStartNewGameIntroductory = new DistantWorlds.Controls.GlassButton();
            this.lblStartNewGameActiveTheme = new DistantWorlds.Controls.SmoothLabel();
            this.picStartNewGameYourEmpireTypeTimeline = new System.Windows.Forms.PictureBox();
            this.btnStartNewGameYourEmpireTypeLegends = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypeQuickStarts = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypeClassicEra = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypeNormalClassic = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypePirateClassic = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypePirateShadows = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpireTypeNormalShadows = new DistantWorlds.Controls.GlassButton();
            this.pnlStartNewGameJumpStart = new System.Windows.Forms.Panel();
            this.pnlJumpStartPiratePlaystyleDescriptionContainer = new System.Windows.Forms.Panel();
            this.lblJumpStartPiratePlaystyleDescription = new DistantWorlds.Controls.SmoothLabel();
            this.picJumpStartYourEmpirePiratePlaystyle = new System.Windows.Forms.PictureBox();
            this.lblJumpStartVictoryPiratePlaystyle = new DistantWorlds.Controls.SmoothLabel();
            this.cmbJumpStartVictoryPiratePlayStyle = new System.Windows.Forms.ComboBox();
            this.chkJumpStartTheGalaxyDifficultyScaling = new System.Windows.Forms.CheckBox();
            this.pnlJumpStartYourEmpireGovernment = new DistantWorlds.Controls.GradientPanel();
            this.cmbJumpStartYourEmpireGovernment = new DistantWorlds.Controls.GovernmentStyleDropDown();
            this.lblJumpStartYourEmpireGovernmentName = new DistantWorlds.Controls.SmoothLabel();
            this.lnkJumpStartYourEmpireGovernment = new System.Windows.Forms.LinkLabel();
            this.lblJumpStartYourEmpireGovernmentAttributes = new DistantWorlds.Controls.SmoothLabel();
            this.lblJumpStartYourEmpireGovernmentTitle = new DistantWorlds.Controls.SmoothLabel();
            this.pnlJumpStartYourEmpireRace = new DistantWorlds.Controls.GradientPanel();
            this.pnlJumpStartYourEmpireRaceAttributesContainer = new System.Windows.Forms.Panel();
            this.pnlJumpStartYourEmpireRaceAttributes = new DistantWorlds.Controls.RaceSummaryPanel();
            this.lblJumpStartYourEmpireRaceName = new DistantWorlds.Controls.SmoothLabel();
            this.lnkJumpStartYourEmpireRace = new System.Windows.Forms.LinkLabel();
            this.picJumpStartYourEmpireRace = new System.Windows.Forms.PictureBox();
            this.cmbJumpStartYourEmpireRace = new DistantWorlds.Controls.RaceDropDown();
            this.lblJumpStartYourEmpireRaceTitle = new DistantWorlds.Controls.SmoothLabel();
            this.btnJumpStartTheGalaxyNext = new DistantWorlds.Controls.GlassButton();
            this.btnJumpStartTheGalaxyPrevious = new DistantWorlds.Controls.GlassButton();
            this.tbarJumpStartTheGalaxyDifficulty = new DistantWorlds.Controls.LabelledTrackBar();
            this.pnlJumpStartGalaxyShapeSize = new DistantWorlds.Controls.GradientPanel();
            this.tbarJumpStartTheGalaxyDimensions = new DistantWorlds.Controls.LabelledTrackBar();
            this.radJumpStartGalaxyShapeVariedClusters = new System.Windows.Forms.RadioButton();
            this.radJumpStartGalaxyShapeEvenClusters = new System.Windows.Forms.RadioButton();
            this.tbarJumpStartTheGalaxyStarDensity = new DistantWorlds.Controls.LabelledTrackBar();
            this.lblJumpStartGalaxyShapeTitle = new DistantWorlds.Controls.SmoothLabel();
            this.lblJumpStartGalaxyShapeDescription = new DistantWorlds.Controls.SmoothLabel();
            this.radJumpStartGalaxyShapeSpiral = new System.Windows.Forms.RadioButton();
            this.radJumpStartGalaxyShapeRing = new System.Windows.Forms.RadioButton();
            this.radJumpStartGalaxyShapeIrregular = new System.Windows.Forms.RadioButton();
            this.radJumpStartGalaxyShapeElliptical = new System.Windows.Forms.RadioButton();
            this.picJumpStartTheGalaxyPreview = new System.Windows.Forms.PictureBox();
            this.pnlStartNewGameYourRace = new System.Windows.Forms.Panel();
            this.pnlStartNewGameYourEmpireRace = new DistantWorlds.Controls.GradientPanel();
            this.pnlStartNewGameYourEmpireRaceAttributesContainer = new System.Windows.Forms.Panel();
            this.pnlStartNewGameYourEmpireRaceAttributes = new DistantWorlds.Controls.RaceSummaryPanel();
            this.lblStartNewGameYourEmpireRaceName = new DistantWorlds.Controls.SmoothLabel();
            this.lnkStartNewGameYourEmpireRace = new System.Windows.Forms.LinkLabel();
            this.picStartNewGameYourEmpireRace = new System.Windows.Forms.PictureBox();
            this.cmbStartNewGameYourEmpireRace = new DistantWorlds.Controls.RaceDropDown();
            this.lblStartNewGameYourEmpireRaceTitle = new DistantWorlds.Controls.SmoothLabel();
            this.picStartNewGameYourRaceImage = new System.Windows.Forms.PictureBox();
            this.btnStartNewGameYourRacePrevious = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourRaceNext = new DistantWorlds.Controls.GlassButton();
            this.pnlStartNewGameYourEmpire = new System.Windows.Forms.Panel();
            this.pnlStartNewGameYourEmpireGovernment = new DistantWorlds.Controls.GradientPanel();
            this.cmbStartNewGameYourEmpireGovernment = new DistantWorlds.Controls.GovernmentStyleDropDown();
            this.lblStartNewGameYourEmpireGovernmentName = new DistantWorlds.Controls.SmoothLabel();
            this.lnkStartNewGameYourEmpireGovernment = new System.Windows.Forms.LinkLabel();
            this.lblStartNewGameYourEmpireGovernmentAttributes = new DistantWorlds.Controls.SmoothLabel();
            this.lblStartNewGameYourEmpireGovernmentTitle = new DistantWorlds.Controls.SmoothLabel();
            this.picStartNewGameYourEmpirePiratePlaystyle = new System.Windows.Forms.PictureBox();
            this.lblPiratePlaystyleDescription = new DistantWorlds.Controls.SmoothLabel();
            this.lblVictoryPiratePlaystyle = new DistantWorlds.Controls.SmoothLabel();
            this.cmbVictoryPiratePlayStyle = new System.Windows.Forms.ComboBox();
            this.tbarStartNewGameYourEmpireCorruption = new DistantWorlds.Controls.LabelledTrackBar();
            this.picStartNewGameYourEmpireImage = new System.Windows.Forms.PictureBox();
            this.tbarStartNewGameYourEmpireSize = new DistantWorlds.Controls.LabelledTrackBar();
            this.tbarStartNewGameYourEmpireTechLevel = new DistantWorlds.Controls.LabelledTrackBar();
            this.tbarStartNewGameYourEmpireHomeSystem = new DistantWorlds.Controls.LabelledTrackBar();
            this.pnlStartNewGameYourEmpireGalaxyLocation = new DistantWorlds.Controls.GradientPanel();
            this.lblStartNewGameYourEmpireGalaxyLocation = new DistantWorlds.Controls.SmoothLabel();
            this.picStartNewGameYourEmpireGalaxyLocation = new System.Windows.Forms.PictureBox();
            this.cmbYourEmpireStartLocation = new System.Windows.Forms.ComboBox();
            this.pnlStartNewGameYourEmpireDetails = new DistantWorlds.Controls.GradientPanel();
            this.lblStartNewGameYourEmpireMainColor = new DistantWorlds.Controls.SmoothLabel();
            this.lblStartNewGameYourEmpireSecondaryColor = new DistantWorlds.Controls.SmoothLabel();
            this.cmbSecondaryColor = new DistantWorlds.Controls.ColorDropDown();
            this.cmbPrimaryColor = new DistantWorlds.Controls.ColorDropDown();
            this.lblStartNewGameYourEmpireName = new DistantWorlds.Controls.SmoothLabel();
            this.txtYourEmpireName = new System.Windows.Forms.TextBox();
            this.cmbFlagShape = new System.Windows.Forms.ComboBox();
            this.btnStartNewGameYourEmpireNext = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameYourEmpirePrevious = new DistantWorlds.Controls.GlassButton();
            this.pnlStartNewGameTheGalaxy = new System.Windows.Forms.Panel();
            this.pnlStartNewGameTheGalaxyLoadExisting = new DistantWorlds.Controls.GradientPanel();
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations = new System.Windows.Forms.CheckBox();
            this.chkStartNewGameTheGalaxyLoadExistingRuins = new System.Windows.Forms.CheckBox();
            this.chkStartNewGameTheGalaxyLoadExistingCreatures = new System.Windows.Forms.CheckBox();
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch = new System.Windows.Forms.CheckBox();
            this.chkStartNewGameTheGalaxyLoadExistingResources = new System.Windows.Forms.CheckBox();
            this.btnStartNewGameTheGalaxyLoadExistingClear = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameTheGalaxyLoadExistingBrowse = new DistantWorlds.Controls.GlassButton();
            this.lblStartNewGameTheGalaxyLoadExistingFilepath = new DistantWorlds.Controls.SmoothLabel();
            this.lblStartNewGameTheGalaxyLoadExistingTitle = new DistantWorlds.Controls.SmoothLabel();
            this.tbarStartNewGameTheGalaxyPirateStrength = new DistantWorlds.Controls.LabelledTrackBar();
            this.chkStartNewGameTheGalaxyPiratesRespawn = new System.Windows.Forms.CheckBox();
            this.btnStartNewGameTheGalaxyPrevious = new DistantWorlds.Controls.GlassButton();
            this.chkStartNewGameTheGalaxyDifficultyScaling = new System.Windows.Forms.CheckBox();
            this.tbarStartNewGameTheGalaxyDifficulty = new DistantWorlds.Controls.LabelledTrackBar();
            this.lblStartNewGameTheGalaxyPirateProximityLabel = new DistantWorlds.Controls.SmoothLabel();
            this.cmbStartNewGameTheGalaxyPirateProximity = new System.Windows.Forms.ComboBox();
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel = new DistantWorlds.Controls.SmoothLabel();
            this.numStartNewGameTheGalaxyResearchBaseTech = new System.Windows.Forms.NumericUpDown();
            this.picStartNewGameTheGalaxyImage = new System.Windows.Forms.PictureBox();
            this.pnlStartNewGameGalaxyShapeSize = new DistantWorlds.Controls.GradientPanel();
            this.tbarStartNewGameTheGalaxyDimensions = new DistantWorlds.Controls.LabelledTrackBar();
            this.radStartNewGameGalaxyShapeClustersVaried = new System.Windows.Forms.RadioButton();
            this.radStartNewGameGalaxyShapeClustersEven = new System.Windows.Forms.RadioButton();
            this.tbarStartNewGameTheGalaxyStarDensity = new DistantWorlds.Controls.LabelledTrackBar();
            this.lblStartNewGameGalaxyShapeTitle = new DistantWorlds.Controls.SmoothLabel();
            this.lblStartNewGameGalaxyShapeDescription = new DistantWorlds.Controls.SmoothLabel();
            this.radStartNewGameGalaxyShapeSpiral = new System.Windows.Forms.RadioButton();
            this.radStartNewGameGalaxyShapeRing = new System.Windows.Forms.RadioButton();
            this.radStartNewGameGalaxyShapeIrregular = new System.Windows.Forms.RadioButton();
            this.radStartNewGameGalaxyShapeElliptical = new System.Windows.Forms.RadioButton();
            this.picStartNewGameTheGalaxyPreview = new System.Windows.Forms.PictureBox();
            this.tbarStartNewGameTheGalaxyPirates = new DistantWorlds.Controls.LabelledTrackBar();
            this.tbarStartNewGameTheGalaxySpaceCreatures = new DistantWorlds.Controls.LabelledTrackBar();
            this.tbarStartNewGameTheGalaxyResearchSpeed = new DistantWorlds.Controls.LabelledTrackBar();
            this.tbarStartNewGameTheGalaxyAggression = new DistantWorlds.Controls.LabelledTrackBar();
            this.tbarStartNewGameTheGalaxyExpansion = new DistantWorlds.Controls.LabelledTrackBar();
            this.btnStartNewGameTheGalaxyNext = new DistantWorlds.Controls.GlassButton();
            this.pnlStartNewGameColonizationTerritory = new System.Windows.Forms.Panel();
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion = new System.Windows.Forms.Label();
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange = new System.Windows.Forms.CheckBox();
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue = new System.Windows.Forms.Label();
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle = new System.Windows.Forms.Label();
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange = new DistantWorlds.Controls.ColorSlider();
            this.tbarStartNewGameTheGalaxyColonyPrevalence = new DistantWorlds.Controls.LabelledTrackBar();
            this.tbarStartNewGameTheGalaxyAlienLife = new DistantWorlds.Controls.LabelledTrackBar();
            this.picStartNewGameColonizationTerritoryImage = new System.Windows.Forms.PictureBox();
            this.btnStartNewGameColonizationTerritoryPrevious = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameColonizationTerritoryNext = new DistantWorlds.Controls.GlassButton();
            this.grpStartNewGameColonizationTerritoryColonizationRange = new System.Windows.Forms.GroupBox();
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue = new System.Windows.Forms.Label();
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle = new System.Windows.Forms.Label();
            this.sldStartNewGameColonizationTerritoryColonizationRange = new DistantWorlds.Controls.ColorSlider();
            this.lblHelpTitle = new DistantWorlds.Controls.SmoothLabel();
            this.lblHelpDescription = new DistantWorlds.Controls.SmoothLabel();
            this.pnlStartNewGameOtherEmpires = new System.Windows.Forms.Panel();
            this.picStartNewGameOtherEmpiresImageBottom = new System.Windows.Forms.PictureBox();
            this.pnlStartNewGameOtherEmpiresList = new DistantWorlds.Controls.GradientPanel();
            this.btnAddNewEmpire = new DistantWorlds.Controls.GlassButton();
            this.ctlStartingEmpiresList = new DistantWorlds.Controls.StartingEmpiresListView();
            this.pnlStartNewGameOtherEmpiresAutoGen = new DistantWorlds.Controls.GradientPanel();
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2 = new DistantWorlds.Controls.SmoothLabel();
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1 = new DistantWorlds.Controls.SmoothLabel();
            this.chkOtherEmpiresAutogenerate = new System.Windows.Forms.CheckBox();
            this.numAutogenerateEmpiresAmount = new System.Windows.Forms.NumericUpDown();
            this.lblStartNewGameOtherEmpiresOR = new DistantWorlds.Controls.SmoothLabel();
            this.btnStartNewGameOtherEmpiresNext = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameOtherEmpiresPrevious = new DistantWorlds.Controls.GlassButton();
            this.chkGalaxyNewEmpiresDuringGame = new System.Windows.Forms.CheckBox();
            this.pnlStartNewGameVictoryConditions = new System.Windows.Forms.Panel();
            this.chkStartNewGameEnableGiantKaltors = new System.Windows.Forms.CheckBox();
            this.chkStartNewGameEnableTechTrading = new System.Windows.Forms.CheckBox();
            this.chkStoryShadows = new System.Windows.Forms.CheckBox();
            this.pnlStartNewGameVictoryConditionsGroup = new System.Windows.Forms.Panel();
            this.chkVictoryTerritory = new System.Windows.Forms.CheckBox();
            this.lblVictoryThresholdPercentage = new DistantWorlds.Controls.SmoothLabel();
            this.chkVictoryEconomy = new System.Windows.Forms.CheckBox();
            this.cmbVictoryThresholdPercentage = new System.Windows.Forms.ComboBox();
            this.chkVictoryPopulation = new System.Windows.Forms.CheckBox();
            this.lblVictorySandbox = new DistantWorlds.Controls.SmoothLabel();
            this.numVictoryTerritoryPercent = new System.Windows.Forms.NumericUpDown();
            this.numVictoryEconomyPercent = new System.Windows.Forms.NumericUpDown();
            this.chkVictoryEnableRaceSpecificConditions = new System.Windows.Forms.CheckBox();
            this.numVictoryPopulationPercent = new System.Windows.Forms.NumericUpDown();
            this.chkVictoryEnableRaceSpecificEvents = new System.Windows.Forms.CheckBox();
            this.chkVictoryEnableDisasterEvents = new System.Windows.Forms.CheckBox();
            this.chkStoryDistantWorlds = new System.Windows.Forms.CheckBox();
            this.chkStoryReturnOfTheShakturi = new System.Windows.Forms.CheckBox();
            this.picStartNewGameVictoryConditionsImage = new System.Windows.Forms.PictureBox();
            this.btnStartNewGameStart = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameVictoryConditionsPrevious = new DistantWorlds.Controls.GlassButton();
            this.numVictoryTimeLimitYears = new System.Windows.Forms.NumericUpDown();
            this.numVictoryTimeStartYears = new System.Windows.Forms.NumericUpDown();
            this.chkVictoryTimeStart = new System.Windows.Forms.CheckBox();
            this.chkVictoryTimeLimit = new System.Windows.Forms.CheckBox();
            this.pnlStartNewGameGalaxyMaps = new System.Windows.Forms.Panel();
            this.lblStartNewGameGalaxyMapsAvailableGalaxies = new DistantWorlds.Controls.SmoothLabel();
            this.lblStartNewGameGalaxyMapsAvailableFactions = new DistantWorlds.Controls.SmoothLabel();
            this.pnlStartNewGameGalaxyMapsEmpire = new DistantWorlds.Controls.EmpireSummaryPanel();
            this.ctlStartNewGameGalaxyMapsEmpires = new DistantWorlds.Controls.EmpireSummaryListView();
            this.pnlStartNewGameGalaxyMapsGalaxy = new DistantWorlds.Controls.GalaxySummaryPanel();
            this.ctlStartNewGameGalaxyMapsGalaxies = new DistantWorlds.Controls.GalaxySummaryListView();
            this.lblStartNewGameGalaxyMapsExplanation = new DistantWorlds.Controls.SmoothLabel();
            this.btnStartNewGameGalaxyMapsStart = new DistantWorlds.Controls.GlassButton();
            this.btnStartNewGameGalaxyMapsCustom = new DistantWorlds.Controls.GlassButton();
            this.pnlAbout = new DistantWorlds.Controls.BorderPanel();
            this.pnlAboutCredits = new DistantWorlds.Controls.ScrollingCreditsPanel();
            this.upEzpZsgAK = new System.Windows.Forms.Label();
            this.btnAboutClose = new DistantWorlds.Controls.GlassButton();
            this.lblAboutTitle = new System.Windows.Forms.Label();
            this.picAbout = new System.Windows.Forms.PictureBox();
            this.pnlSaveLoadProgress = new DistantWorlds.Controls.BorderPanel();
            this.lblSaveLoadMessage = new DistantWorlds.Controls.EnabledLabel();
            this.picSaveLoadGalaxy = new System.Windows.Forms.PictureBox();
            this.pnlButtons = new DistantWorlds.Controls.GradientPanel();
            this.menuGroup = new DistantWorlds.Controls.HoverMenuGroup();
            this.menuExit = new DistantWorlds.Controls.HoverMenuItem();
            this.menuChangeTheme = new DistantWorlds.Controls.HoverMenuItem();
            this.menuOptions = new DistantWorlds.Controls.HoverMenuItem();
            this.menuLoadGame = new DistantWorlds.Controls.HoverMenuItem();
            this.menuStartNewGame = new DistantWorlds.Controls.HoverMenuItem();
            this.menuTutorials = new DistantWorlds.Controls.HoverMenuItem();
            this.lnkThemes = new System.Windows.Forms.LinkLabel();
            this.lnkOptions = new System.Windows.Forms.LinkLabel();
            this.lnkAbout = new System.Windows.Forms.LinkLabel();
            this.lnkGalactopedia = new System.Windows.Forms.LinkLabel();
            this.lnkTutorial = new System.Windows.Forms.LinkLabel();
            this.lnkPlayScenario = new System.Windows.Forms.LinkLabel();
            this.lnkCheckForUpdates = new System.Windows.Forms.LinkLabel();
            this.lnkNewGame = new System.Windows.Forms.LinkLabel();
            this.lnkLoadGame = new System.Windows.Forms.LinkLabel();
            this.lnkExit = new System.Windows.Forms.LinkLabel();
            this.pnlEncyclopedia = new DistantWorlds.Controls.ScreenPanel();
            this.chkEncyclopediaShowAtStart = new System.Windows.Forms.CheckBox();
            this.pnlEncyclopediaTopics = new DistantWorlds.Controls.EncyclopediaTopicTree();
            this.btnEncyclopediaHome = new DistantWorlds.Controls.GlassButton();
            this.webEncyclopediaContent = new System.Windows.Forms.WebBrowser();
            this.pnlEncyclopediaRelatedItems = new DistantWorlds.RelatedEncyclopediaItemsBox();
            this.btnEncyclopediaBack = new DistantWorlds.Controls.GlassButton();
            this.btnEncyclopediaForward = new DistantWorlds.Controls.GlassButton();
            this.pnlGameOptionsAdvancedDisplaySettings = new DistantWorlds.Controls.ScreenPanel();
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView = new System.Windows.Forms.CheckBox();
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons = new System.Windows.Forms.GroupBox();
            this.chkGameOptionsGalaxyDisplayAlwaysPirates = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayColonyShips = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayConstructionShips = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplaySpacePorts = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayExplorationShips = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayResupplyShips = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayOtherBases = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayCivilianShips = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayFleets = new System.Windows.Forms.CheckBox();
            this.chkGameOptionsGalaxyDisplayMilitaryShips = new System.Windows.Forms.CheckBox();
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail = new DistantWorlds.Controls.LabelledTrackBar();
            this.chkOptionsShowSystemNebulae = new System.Windows.Forms.CheckBox();
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate = new System.Windows.Forms.GroupBox();
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate = new System.Windows.Forms.NumericUpDown();
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited = new System.Windows.Forms.CheckBox();
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS = new System.Windows.Forms.Label();
            this.pnlQuickStart = new DistantWorlds.Controls.ScreenPanel();
            this.radioSovereignTerritoriesMinorFaction = new System.Windows.Forms.RadioButton();
            this.radioSovereignTerritoriesRegionalRuler = new System.Windows.Forms.RadioButton();
            this.radioGalacticRepublicWildFrontiers = new System.Windows.Forms.RadioButton();
            this.radioGalacticRepublicSupremeRuler = new System.Windows.Forms.RadioButton();
            this.radioFullyDevelopedLarge = new System.Windows.Forms.RadioButton();
            this.radioFullyDevelopedSmall = new System.Windows.Forms.RadioButton();
            this.radioFullyDevelopedStandard = new System.Windows.Forms.RadioButton();
            this.radioExpandingFromTheCore = new System.Windows.Forms.RadioButton();
            this.radioExpandingSettlements = new System.Windows.Forms.RadioButton();
            this.radioSmall = new System.Windows.Forms.RadioButton();
            this.radioRandom = new System.Windows.Forms.RadioButton();
            this.radioConflict = new System.Windows.Forms.RadioButton();
            this.radioRingRace = new System.Windows.Forms.RadioButton();
            this.radioEpic = new System.Windows.Forms.RadioButton();
            this.radioClassicRebels = new System.Windows.Forms.RadioButton();
            this.pnlQuickStartDescription = new DistantWorlds.Controls.GradientPanel();
            this.chkQuickStartDistantWorldsStoryEvents = new System.Windows.Forms.CheckBox();
            this.chkQuickStartReturnOfTheShakturiStoryEvents = new System.Windows.Forms.CheckBox();
            this.lnkQuickStartRaceHelp = new System.Windows.Forms.LinkLabel();
            this.lblQuickStartRace = new System.Windows.Forms.Label();
            this.cmbQuickStartRace = new DistantWorlds.Controls.RaceDropDown();
            this.lblQuickStartDescriptionDetail = new System.Windows.Forms.Label();
            this.lblQuickStartDescriptionTitle = new System.Windows.Forms.Label();
            this.btnQuickStart = new DistantWorlds.Controls.GlassButton();
            this.btnQuickStartCancel = new DistantWorlds.Controls.GlassButton();
            this.radioClassicEmpire = new System.Windows.Forms.RadioButton();
            this.FtIzCrmve5 = new DistantWorlds.Controls.ScreenPanel();
            this.lnkTutorialDealingWithPirates = new System.Windows.Forms.LinkLabel();
            this.lnkTutorialFleetsTroops = new System.Windows.Forms.LinkLabel();
            this.lnkTutorialResearchDesign = new System.Windows.Forms.LinkLabel();
            this.lnkTutorialShipsMissions = new System.Windows.Forms.LinkLabel();
            this.lnkTutorialEmpireAndColonies = new System.Windows.Forms.LinkLabel();
            this.lnkTutorialPreWarpEmpire = new System.Windows.Forms.LinkLabel();
            this.lnkTutorialPlayAsPirate = new System.Windows.Forms.LinkLabel();
            this.btnTutorialStartCancel = new DistantWorlds.Controls.GlassButton();
            this.lnkTutorialExpansionDiplomacy = new System.Windows.Forms.LinkLabel();
            this.lnkTutorialFindingYourWayAround = new System.Windows.Forms.LinkLabel();
            this.pnlGameOptionsEmpireSettings = new DistantWorlds.Controls.ScreenPanel();
            this.grpGameOptionsDefaultEngagementStancesManual = new System.Windows.Forms.GroupBox();
            this.cmbGameOptionsEngagementStanceAttackManual = new System.Windows.Forms.ComboBox();
            this.lblGameOptionsEngagementStanceAttackManual = new System.Windows.Forms.Label();
            this.cmbGameOptionsEngagementStanceOtherManual = new System.Windows.Forms.ComboBox();
            this.cmbGameOptionsEngagementStancePatrolManual = new System.Windows.Forms.ComboBox();
            this.lblGameOptionsEngagementStanceOtherManual = new System.Windows.Forms.Label();
            this.lblGameOptionsEngagementStanceEscortManual = new System.Windows.Forms.Label();
            this.cmbGameOptionsEngagementStanceEscortManual = new System.Windows.Forms.ComboBox();
            this.lblGameOptionsEngagementStancePatrolManual = new System.Windows.Forms.Label();
            this.chkOptionsSuppressAllPopups = new System.Windows.Forms.CheckBox();
            this.chkOptionsNewShipsAutomated = new System.Windows.Forms.CheckBox();
            this.grpGameOptionsDiscoveries = new System.Windows.Forms.GroupBox();
            this.cmbGameOptionsEncounterAbandonedShipOrBase = new System.Windows.Forms.ComboBox();
            this.cmbGameOptionsEncounterRuins = new System.Windows.Forms.ComboBox();
            this.lblGameOptionsEncounterAbandonedShipOrBase = new System.Windows.Forms.Label();
            this.lblGameOptionsEncounterRuins = new System.Windows.Forms.Label();
            this.grpGameOptionsFleetAttackSettings = new System.Windows.Forms.GroupBox();
            this.numGameOptionsFleetAttackGather = new System.Windows.Forms.NumericUpDown();
            this.numGameOptionsFleetAttackRefuel = new System.Windows.Forms.NumericUpDown();
            this.lblGameOptionsFleetAttackGather = new System.Windows.Forms.Label();
            this.lblGameOptionsFleetAttackRefuel = new System.Windows.Forms.Label();
            this.chkOptionsAllowSameSystemAsOtherEmpires = new System.Windows.Forms.CheckBox();
            this.sldGameOptionsAttackOvermatch = new DistantWorlds.Controls.LabelledTrackBar();
            this.grpGameOptionsDefaultEngagementStances = new System.Windows.Forms.GroupBox();
            this.cmbGameOptionsEngagementStanceAttack = new System.Windows.Forms.ComboBox();
            this.lblGameOptionsEngagementStanceAttack = new System.Windows.Forms.Label();
            this.cmbGameOptionsEngagementStanceOther = new System.Windows.Forms.ComboBox();
            this.cmbGameOptionsEngagementStancePatrol = new System.Windows.Forms.ComboBox();
            this.lblGameOptionsEngagementStanceOther = new System.Windows.Forms.Label();
            this.lblGameOptionsEngagementStanceEscort = new System.Windows.Forms.Label();
            this.cmbGameOptionsEngagementStanceEscort = new System.Windows.Forms.ComboBox();
            this.lblGameOptionsEngagementStancePatrol = new System.Windows.Forms.Label();
            this.borderPanel1 = new DistantWorlds.Controls.BorderPanel();
            this.borderPanel2 = new DistantWorlds.Controls.BorderPanel();
            this.toolTip = new System.Windows.Forms.ToolTip(this.icontainer_0);
            this.lblActiveTheme = new DistantWorlds.Controls.SmoothLabel();
            this.menuGalactopedia = new DistantWorlds.Controls.HoverMenuItem();
            this.menuCheckForUpdates = new DistantWorlds.Controls.HoverMenuItem();
            this.menuCredits = new DistantWorlds.Controls.HoverMenuItem();
            this.pnlTopLeftCorner = new System.Windows.Forms.Panel();
            this.pnlBottomLeftCorner = new System.Windows.Forms.Panel();
            ((System.ComponentModel.ISupportInitialize)this.picTitle).BeginInit();
            //((System.ComponentModel.ISupportInitialize)this.mediaPlayer).BeginInit();
            this.pnlGameOptions.SuspendLayout();
            this.grpOptionsAutoSave.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.numOptionsAutoSaveMinutes).BeginInit();
            this.grpOptionsDisplaySettings.SuspendLayout();
            this.grpOptionsVolume.SuspendLayout();
            this.grpOptionsControl.SuspendLayout();
            this.pnlOptionsAutomationMode.SuspendLayout();
            this.pnlGameOptionsMessages.SuspendLayout();
            this.grpOptionsPopupMessages.SuspendLayout();
            this.grpOptionsScrollingMessages.SuspendLayout();
            this.pnlThemes.SuspendLayout();
            this.pnlThemeDetail.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picThemeImage).BeginInit();
            this.pnlNewGame.SuspendLayout();
            this.pnlStartNewGameYourEmpireType.SuspendLayout();
            this.pnlStartNewGameIntroductoryBorder.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireTypeTimeline).BeginInit();
            this.pnlStartNewGameJumpStart.SuspendLayout();
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picJumpStartYourEmpirePiratePlaystyle).BeginInit();
            this.pnlJumpStartYourEmpireGovernment.SuspendLayout();
            this.pnlJumpStartYourEmpireRace.SuspendLayout();
            this.pnlJumpStartYourEmpireRaceAttributesContainer.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picJumpStartYourEmpireRace).BeginInit();
            this.pnlJumpStartGalaxyShapeSize.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picJumpStartTheGalaxyPreview).BeginInit();
            this.pnlStartNewGameYourRace.SuspendLayout();
            this.pnlStartNewGameYourEmpireRace.SuspendLayout();
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireRace).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourRaceImage).BeginInit();
            this.pnlStartNewGameYourEmpire.SuspendLayout();
            this.pnlStartNewGameYourEmpireGovernment.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpirePiratePlaystyle).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireImage).BeginInit();
            this.pnlStartNewGameYourEmpireGalaxyLocation.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireGalaxyLocation).BeginInit();
            this.pnlStartNewGameYourEmpireDetails.SuspendLayout();
            this.pnlStartNewGameTheGalaxy.SuspendLayout();
            this.pnlStartNewGameTheGalaxyLoadExisting.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.numStartNewGameTheGalaxyResearchBaseTech).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameTheGalaxyImage).BeginInit();
            this.pnlStartNewGameGalaxyShapeSize.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameTheGalaxyPreview).BeginInit();
            this.pnlStartNewGameColonizationTerritory.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameColonizationTerritoryImage).BeginInit();
            this.grpStartNewGameColonizationTerritoryColonizationRange.SuspendLayout();
            this.pnlStartNewGameOtherEmpires.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameOtherEmpiresImageBottom).BeginInit();
            this.pnlStartNewGameOtherEmpiresList.SuspendLayout();
            this.pnlStartNewGameOtherEmpiresAutoGen.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.numAutogenerateEmpiresAmount).BeginInit();
            this.pnlStartNewGameVictoryConditions.SuspendLayout();
            this.pnlStartNewGameVictoryConditionsGroup.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryTerritoryPercent).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryEconomyPercent).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryPopulationPercent).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameVictoryConditionsImage).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryTimeLimitYears).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryTimeStartYears).BeginInit();
            this.pnlStartNewGameGalaxyMaps.SuspendLayout();
            this.pnlAbout.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picAbout).BeginInit();
            this.pnlSaveLoadProgress.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.picSaveLoadGalaxy).BeginInit();
            this.pnlButtons.SuspendLayout();
            this.menuGroup.SuspendLayout();
            this.pnlEncyclopedia.SuspendLayout();
            this.pnlGameOptionsAdvancedDisplaySettings.SuspendLayout();
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.SuspendLayout();
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate).BeginInit();
            this.pnlQuickStart.SuspendLayout();
            this.pnlQuickStartDescription.SuspendLayout();
            this.FtIzCrmve5.SuspendLayout();
            this.pnlGameOptionsEmpireSettings.SuspendLayout();
            this.grpGameOptionsDefaultEngagementStancesManual.SuspendLayout();
            this.grpGameOptionsDiscoveries.SuspendLayout();
            this.grpGameOptionsFleetAttackSettings.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)this.numGameOptionsFleetAttackGather).BeginInit();
            ((System.ComponentModel.ISupportInitialize)this.numGameOptionsFleetAttackRefuel).BeginInit();
            this.grpGameOptionsDefaultEngagementStances.SuspendLayout();
            this.pnlTopLeftCorner.SuspendLayout();
            this.pnlBottomLeftCorner.SuspendLayout();
            base.SuspendLayout();
            this.lblCopyright.AutoSize = true;
            this.lblCopyright.BackColor = System.Drawing.Color.Transparent;
            this.lblCopyright.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblCopyright.ForeColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lblCopyright.Location = new System.Drawing.Point(121, 50);
            this.lblCopyright.Name = "lblCopyright";
            this.lblCopyright.Size = new System.Drawing.Size(87, 18);
            this.lblCopyright.TabIndex = 3;
            this.lblCopyright.Text = "Copyright";
            this.lblVersion.AutoSize = true;
            this.lblVersion.BackColor = System.Drawing.Color.Transparent;
            this.lblVersion.Font = new System.Drawing.Font("Verdana", 9.75f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblVersion.ForeColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lblVersion.Location = new System.Drawing.Point(18, 54);
            this.lblVersion.Name = "lblVersion";
            this.lblVersion.Size = new System.Drawing.Size(56, 16);
            this.lblVersion.TabIndex = 4;
            this.lblVersion.Text = "Version";
            this.picTitle.BackColor = System.Drawing.Color.Transparent;
            this.picTitle.BackgroundImage = (System.Drawing.Image)resources.GetObject("picTitle.BackgroundImage");
            this.picTitle.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Zoom;
            this.picTitle.Location = new System.Drawing.Point(15, 18);
            this.picTitle.Name = "picTitle";
            this.picTitle.Size = new System.Drawing.Size(100, 50);
            this.picTitle.TabIndex = 5;
            this.picTitle.TabStop = false;
            this.lnkCopyright.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkCopyright.AutoSize = true;
            this.lnkCopyright.BackColor = System.Drawing.Color.Transparent;
            this.lnkCopyright.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkCopyright.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkCopyright.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkCopyright.Location = new System.Drawing.Point(157, 86);
            this.lnkCopyright.Name = "lnkCopyright";
            this.lnkCopyright.Size = new System.Drawing.Size(120, 18);
            this.lnkCopyright.TabIndex = 76;
            this.lnkCopyright.TabStop = true;
            this.lnkCopyright.Text = "Copyright link";
            this.lnkCopyright.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkCopyright_LinkClicked);
            /*((System.Windows.Forms.AxHost)(object)this.mediaPlayer).Enabled = true;
            ((System.Windows.Forms.Control)(object)this.mediaPlayer).Location = new System.Drawing.Point(1131, 632);
            ((System.Windows.Forms.Control)(object)this.mediaPlayer).Name = "mediaPlayer";
            ((System.Windows.Forms.AxHost)(object)this.mediaPlayer).OcxState = (System.Windows.Forms.AxHost.State)resources.GetObject("mediaPlayer.OcxState");
            ((System.Windows.Forms.Control)(object)this.mediaPlayer).Size = new System.Drawing.Size(75, 23);
            ((System.Windows.Forms.Control)(object)this.mediaPlayer).TabIndex = 92;
            ((System.Windows.Forms.Control)(object)this.mediaPlayer).TabStop = false;
            ((System.Windows.Forms.Control)(object)this.mediaPlayer).Visible = false;
            this.mediaPlayer.PlayStateChange += new AxWMPLib._WMPOCXEvents_PlayStateChangeEventHandler(this.mediaPlayer_PlayStateChange);
            this.mediaPlayer.ClickEvent += new AxWMPLib._WMPOCXEvents_ClickEventHandler(this.mediaPlayer_ClickEvent);
            this.mediaPlayer.KeyDownEvent += new AxWMPLib._WMPOCXEvents_KeyDownEventHandler(this.mediaPlayer_KeyDownEvent);
            this.mediaPlayer.KeyPressEvent += new AxWMPLib._WMPOCXEvents_KeyPressEventHandler(this.mediaPlayer_KeyPressEvent);
            this.mediaPlayer.MouseUpEvent += new AxWMPLib._WMPOCXEvents_MouseUpEventHandler(this.mediaPlayer_MouseUpEvent);*/
            this.lblMenuHints.AutoSize = true;
            this.lblMenuHints.BackColor = System.Drawing.Color.FromArgb(96, 192, 160, 255);
            this.lblMenuHints.Font = new System.Drawing.Font("Verdana", 9.75f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblMenuHints.ForeColor = System.Drawing.Color.FromArgb(255, 192, 128);
            this.lblMenuHints.Location = new System.Drawing.Point(164, 125);
            this.lblMenuHints.MaximumSize = new System.Drawing.Size(120, 300);
            this.lblMenuHints.Name = "lblMenuHints";
            this.lblMenuHints.Padding = new System.Windows.Forms.Padding(5);
            this.lblMenuHints.Size = new System.Drawing.Size(99, 26);
            this.lblMenuHints.TabIndex = 93;
            this.lblMenuHints.Text = "Menu Hints";
            this.lblMenuHints.Visible = false;
            this.pnlGameOptions.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlGameOptions.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlGameOptions.BackgroundImage");
            this.pnlGameOptions.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlGameOptions.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlGameOptions.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlGameOptions.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlGameOptions.BorderSize = 3;
            this.pnlGameOptions.Controls.Add(this.btnGameOptionsShowMessages);
            this.pnlGameOptions.Controls.Add(this.chkOptionsLoadedGamesPaused);
            this.pnlGameOptions.Controls.Add(this.grpOptionsAutoSave);
            this.pnlGameOptions.Controls.Add(this.lblOptionsMouseScrollMode);
            this.pnlGameOptions.Controls.Add(this.cmbOptionsMouseScrollWheelBehaviour);
            this.pnlGameOptions.Controls.Add(this.grpOptionsDisplaySettings);
            this.pnlGameOptions.Controls.Add(this.chkOptionsAutoPauseInPopup);
            this.pnlGameOptions.Controls.Add(this.grpOptionsVolume);
            this.pnlGameOptions.Controls.Add(this.grpOptionsControl);
            this.pnlGameOptions.HeaderIcon = (System.Drawing.Image)resources.GetObject("pnlGameOptions.HeaderIcon");
            this.pnlGameOptions.HeaderTitle = "Options";
            this.pnlGameOptions.Location = new System.Drawing.Point(227, 32);
            this.pnlGameOptions.Name = "pnlGameOptions";
            this.pnlGameOptions.Size = new System.Drawing.Size(525, 538);
            this.pnlGameOptions.TabIndex = 94;
            this.pnlGameOptions.Visible = false;
            this.pnlGameOptions.CloseButtonClicked += new System.EventHandler(pnlGameOptions_CloseButtonClicked);
            this.btnGameOptionsShowMessages.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnGameOptionsShowMessages.ClipBackground = false;
            this.btnGameOptionsShowMessages.DelayFrameRefresh = false;
            this.btnGameOptionsShowMessages.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnGameOptionsShowMessages.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnGameOptionsShowMessages.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnGameOptionsShowMessages.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnGameOptionsShowMessages.IntensifyColors = false;
            this.btnGameOptionsShowMessages.Location = new System.Drawing.Point(12, 493);
            this.btnGameOptionsShowMessages.Name = "btnGameOptionsShowMessages";
            this.btnGameOptionsShowMessages.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnGameOptionsShowMessages.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnGameOptionsShowMessages.Size = new System.Drawing.Size(499, 35);
            this.btnGameOptionsShowMessages.TabIndex = 76;
            this.btnGameOptionsShowMessages.Text = "Show Message Options";
            this.btnGameOptionsShowMessages.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnGameOptionsShowMessages.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnGameOptionsShowMessages.ToggledOn = false;
            this.btnGameOptionsShowMessages.Click += new System.EventHandler(btnGameOptionsShowMessages_Click);
            this.chkOptionsLoadedGamesPaused.AutoSize = true;
            this.chkOptionsLoadedGamesPaused.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsLoadedGamesPaused.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsLoadedGamesPaused.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsLoadedGamesPaused.Location = new System.Drawing.Point(181, 191);
            this.chkOptionsLoadedGamesPaused.Name = "chkOptionsLoadedGamesPaused";
            this.chkOptionsLoadedGamesPaused.Size = new System.Drawing.Size(177, 17);
            this.chkOptionsLoadedGamesPaused.TabIndex = 75;
            this.chkOptionsLoadedGamesPaused.Text = "Loaded games are paused";
            this.chkOptionsLoadedGamesPaused.UseVisualStyleBackColor = false;
            this.grpOptionsAutoSave.BackColor = System.Drawing.Color.Transparent;
            this.grpOptionsAutoSave.Controls.Add(this.numOptionsAutoSaveMinutes);
            this.grpOptionsAutoSave.Controls.Add(this.chkOptionsAutoSave);
            this.grpOptionsAutoSave.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpOptionsAutoSave.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpOptionsAutoSave.Location = new System.Drawing.Point(12, 192);
            this.grpOptionsAutoSave.Name = "grpOptionsAutoSave";
            this.grpOptionsAutoSave.Size = new System.Drawing.Size(160, 44);
            this.grpOptionsAutoSave.TabIndex = 74;
            this.grpOptionsAutoSave.TabStop = false;
            this.grpOptionsAutoSave.Text = "Auto Save";
            this.numOptionsAutoSaveMinutes.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numOptionsAutoSaveMinutes.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.numOptionsAutoSaveMinutes.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numOptionsAutoSaveMinutes.Location = new System.Drawing.Point(60, 16);
            this.numOptionsAutoSaveMinutes.Maximum = new decimal(new int[4] { 60, 0, 0, 0 });
            this.numOptionsAutoSaveMinutes.Minimum = new decimal(new int[4] { 10, 0, 0, 0 });
            this.numOptionsAutoSaveMinutes.Name = "numOptionsAutoSaveMinutes";
            this.numOptionsAutoSaveMinutes.Size = new System.Drawing.Size(35, 21);
            this.numOptionsAutoSaveMinutes.TabIndex = 31;
            this.numOptionsAutoSaveMinutes.Value = new decimal(new int[4] { 10, 0, 0, 0 });
            this.chkOptionsAutoSave.AutoSize = true;
            this.chkOptionsAutoSave.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsAutoSave.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsAutoSave.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsAutoSave.Location = new System.Drawing.Point(7, 17);
            this.chkOptionsAutoSave.Name = "chkOptionsAutoSave";
            this.chkOptionsAutoSave.Size = new System.Drawing.Size(144, 17);
            this.chkOptionsAutoSave.TabIndex = 13;
            this.chkOptionsAutoSave.Text = "Every          minutes";
            this.chkOptionsAutoSave.UseVisualStyleBackColor = false;
            this.chkOptionsAutoSave.CheckedChanged += new System.EventHandler(chkOptionsAutoSave_CheckedChanged);
            this.lblOptionsMouseScrollMode.AutoSize = true;
            this.lblOptionsMouseScrollMode.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsMouseScrollMode.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsMouseScrollMode.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsMouseScrollMode.Location = new System.Drawing.Point(177, 215);
            this.lblOptionsMouseScrollMode.Name = "lblOptionsMouseScrollMode";
            this.lblOptionsMouseScrollMode.Size = new System.Drawing.Size(169, 13);
            this.lblOptionsMouseScrollMode.TabIndex = 73;
            this.lblOptionsMouseScrollMode.Text = "Mouse scroll-wheel behavior";
            this.cmbOptionsMouseScrollWheelBehaviour.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsMouseScrollWheelBehaviour.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsMouseScrollWheelBehaviour.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsMouseScrollWheelBehaviour.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsMouseScrollWheelBehaviour.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsMouseScrollWheelBehaviour.FormattingEnabled = true;
            this.cmbOptionsMouseScrollWheelBehaviour.Items.AddRange(new object[3] { "No movement", "Move to selected item", "Move to mouse cursor location" });
            this.cmbOptionsMouseScrollWheelBehaviour.Location = new System.Drawing.Point(351, 211);
            this.cmbOptionsMouseScrollWheelBehaviour.Name = "cmbOptionsMouseScrollWheelBehaviour";
            this.cmbOptionsMouseScrollWheelBehaviour.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsMouseScrollWheelBehaviour.TabIndex = 72;
            this.grpOptionsDisplaySettings.BackColor = System.Drawing.Color.Transparent;
            this.grpOptionsDisplaySettings.Controls.Add(this.btnGameOptionsAdvancedDisplaySettings);
            this.grpOptionsDisplaySettings.Controls.Add(this.lblOptionsMainViewZoomSpeed);
            this.grpOptionsDisplaySettings.Controls.Add(this.sldOptionsMainViewZoomSpeed);
            this.grpOptionsDisplaySettings.Controls.Add(this.lblOptionsMainViewStarFieldSize);
            this.grpOptionsDisplaySettings.Controls.Add(this.sldOptionsMainViewStarFieldSize);
            this.grpOptionsDisplaySettings.Controls.Add(this.lblOptionsMainViewScrollSpeed);
            this.grpOptionsDisplaySettings.Controls.Add(this.sldOptionsMainViewScrollSpeed);
            this.grpOptionsDisplaySettings.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpOptionsDisplaySettings.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpOptionsDisplaySettings.Location = new System.Drawing.Point(12, 7);
            this.grpOptionsDisplaySettings.Name = "grpOptionsDisplaySettings";
            this.grpOptionsDisplaySettings.Size = new System.Drawing.Size(499, 108);
            this.grpOptionsDisplaySettings.TabIndex = 59;
            this.grpOptionsDisplaySettings.TabStop = false;
            this.grpOptionsDisplaySettings.Text = "Display Settings";
            this.btnGameOptionsAdvancedDisplaySettings.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnGameOptionsAdvancedDisplaySettings.ClipBackground = false;
            this.btnGameOptionsAdvancedDisplaySettings.DelayFrameRefresh = false;
            this.btnGameOptionsAdvancedDisplaySettings.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnGameOptionsAdvancedDisplaySettings.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnGameOptionsAdvancedDisplaySettings.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnGameOptionsAdvancedDisplaySettings.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnGameOptionsAdvancedDisplaySettings.IntensifyColors = false;
            this.btnGameOptionsAdvancedDisplaySettings.Location = new System.Drawing.Point(335, 80);
            this.btnGameOptionsAdvancedDisplaySettings.Name = "btnGameOptionsAdvancedDisplaySettings";
            this.btnGameOptionsAdvancedDisplaySettings.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnGameOptionsAdvancedDisplaySettings.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnGameOptionsAdvancedDisplaySettings.Size = new System.Drawing.Size(150, 22);
            this.btnGameOptionsAdvancedDisplaySettings.TabIndex = 66;
            this.btnGameOptionsAdvancedDisplaySettings.Text = "Advanced Settings...";
            this.btnGameOptionsAdvancedDisplaySettings.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnGameOptionsAdvancedDisplaySettings.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnGameOptionsAdvancedDisplaySettings.ToggledOn = false;
            this.btnGameOptionsAdvancedDisplaySettings.Click += new System.EventHandler(btnGameOptionsAdvancedDisplaySettings_Click);
            this.lblOptionsMainViewZoomSpeed.AutoSize = true;
            this.lblOptionsMainViewZoomSpeed.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsMainViewZoomSpeed.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsMainViewZoomSpeed.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsMainViewZoomSpeed.Location = new System.Drawing.Point(10, 43);
            this.lblOptionsMainViewZoomSpeed.Name = "lblOptionsMainViewZoomSpeed";
            this.lblOptionsMainViewZoomSpeed.Size = new System.Drawing.Size(80, 13);
            this.lblOptionsMainViewZoomSpeed.TabIndex = 63;
            this.lblOptionsMainViewZoomSpeed.Text = "Zoom Speed";
            this.sldOptionsMainViewZoomSpeed.BackColor = System.Drawing.Color.Transparent;
            this.sldOptionsMainViewZoomSpeed.BarInnerColor = System.Drawing.Color.FromArgb(64, 64, 72);
            this.sldOptionsMainViewZoomSpeed.BarOuterColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMainViewZoomSpeed.BarPenColor = System.Drawing.Color.FromArgb(16, 16, 24);
            this.sldOptionsMainViewZoomSpeed.BorderRoundRectSize = new System.Drawing.Size(2, 2);
            this.sldOptionsMainViewZoomSpeed.ElapsedInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMainViewZoomSpeed.ElapsedOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMainViewZoomSpeed.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.sldOptionsMainViewZoomSpeed.ForeColor = System.Drawing.Color.White;
            this.sldOptionsMainViewZoomSpeed.LargeChange = 5u;
            this.sldOptionsMainViewZoomSpeed.Location = new System.Drawing.Point(95, 41);
            this.sldOptionsMainViewZoomSpeed.Minimum = 10;
            this.sldOptionsMainViewZoomSpeed.Name = "sldOptionsMainViewZoomSpeed";
            this.sldOptionsMainViewZoomSpeed.Size = new System.Drawing.Size(390, 16);
            this.sldOptionsMainViewZoomSpeed.SmallChange = 1u;
            this.sldOptionsMainViewZoomSpeed.TabIndex = 62;
            this.sldOptionsMainViewZoomSpeed.Text = "colorSlider1";
            this.sldOptionsMainViewZoomSpeed.ThumbInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMainViewZoomSpeed.ThumbOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMainViewZoomSpeed.ThumbPenColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMainViewZoomSpeed.ThumbRoundRectSize = new System.Drawing.Size(3, 3);
            this.sldOptionsMainViewZoomSpeed.ThumbSize = 20;
            this.sldOptionsMainViewZoomSpeed.Value = 30;
            this.lblOptionsMainViewStarFieldSize.AutoSize = true;
            this.lblOptionsMainViewStarFieldSize.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsMainViewStarFieldSize.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsMainViewStarFieldSize.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsMainViewStarFieldSize.Location = new System.Drawing.Point(10, 63);
            this.lblOptionsMainViewStarFieldSize.Name = "lblOptionsMainViewStarFieldSize";
            this.lblOptionsMainViewStarFieldSize.Size = new System.Drawing.Size(78, 13);
            this.lblOptionsMainViewStarFieldSize.TabIndex = 61;
            this.lblOptionsMainViewStarFieldSize.Text = "Star Density";
            this.sldOptionsMainViewStarFieldSize.BackColor = System.Drawing.Color.Transparent;
            this.sldOptionsMainViewStarFieldSize.BarInnerColor = System.Drawing.Color.FromArgb(64, 64, 72);
            this.sldOptionsMainViewStarFieldSize.BarOuterColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMainViewStarFieldSize.BarPenColor = System.Drawing.Color.FromArgb(16, 16, 24);
            this.sldOptionsMainViewStarFieldSize.BorderRoundRectSize = new System.Drawing.Size(2, 2);
            this.sldOptionsMainViewStarFieldSize.ElapsedInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMainViewStarFieldSize.ElapsedOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMainViewStarFieldSize.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.sldOptionsMainViewStarFieldSize.ForeColor = System.Drawing.Color.White;
            this.sldOptionsMainViewStarFieldSize.LargeChange = 5u;
            this.sldOptionsMainViewStarFieldSize.Location = new System.Drawing.Point(95, 62);
            this.sldOptionsMainViewStarFieldSize.Maximum = 2000;
            this.sldOptionsMainViewStarFieldSize.Minimum = 50;
            this.sldOptionsMainViewStarFieldSize.Name = "sldOptionsMainViewStarFieldSize";
            this.sldOptionsMainViewStarFieldSize.Size = new System.Drawing.Size(390, 16);
            this.sldOptionsMainViewStarFieldSize.SmallChange = 1u;
            this.sldOptionsMainViewStarFieldSize.TabIndex = 60;
            this.sldOptionsMainViewStarFieldSize.Text = "colorSlider1";
            this.sldOptionsMainViewStarFieldSize.ThumbInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMainViewStarFieldSize.ThumbOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMainViewStarFieldSize.ThumbPenColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMainViewStarFieldSize.ThumbRoundRectSize = new System.Drawing.Size(3, 3);
            this.sldOptionsMainViewStarFieldSize.ThumbSize = 20;
            this.sldOptionsMainViewStarFieldSize.Value = 1000;
            this.lblOptionsMainViewScrollSpeed.AutoSize = true;
            this.lblOptionsMainViewScrollSpeed.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsMainViewScrollSpeed.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsMainViewScrollSpeed.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsMainViewScrollSpeed.Location = new System.Drawing.Point(10, 21);
            this.lblOptionsMainViewScrollSpeed.Name = "lblOptionsMainViewScrollSpeed";
            this.lblOptionsMainViewScrollSpeed.Size = new System.Drawing.Size(79, 13);
            this.lblOptionsMainViewScrollSpeed.TabIndex = 59;
            this.lblOptionsMainViewScrollSpeed.Text = "Scroll Speed";
            this.sldOptionsMainViewScrollSpeed.BackColor = System.Drawing.Color.Transparent;
            this.sldOptionsMainViewScrollSpeed.BarInnerColor = System.Drawing.Color.FromArgb(64, 64, 72);
            this.sldOptionsMainViewScrollSpeed.BarOuterColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMainViewScrollSpeed.BarPenColor = System.Drawing.Color.FromArgb(16, 16, 24);
            this.sldOptionsMainViewScrollSpeed.BorderRoundRectSize = new System.Drawing.Size(2, 2);
            this.sldOptionsMainViewScrollSpeed.ElapsedInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMainViewScrollSpeed.ElapsedOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMainViewScrollSpeed.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.sldOptionsMainViewScrollSpeed.ForeColor = System.Drawing.Color.White;
            this.sldOptionsMainViewScrollSpeed.LargeChange = 5u;
            this.sldOptionsMainViewScrollSpeed.Location = new System.Drawing.Point(95, 20);
            this.sldOptionsMainViewScrollSpeed.Minimum = 1;
            this.sldOptionsMainViewScrollSpeed.Name = "sldOptionsMainViewScrollSpeed";
            this.sldOptionsMainViewScrollSpeed.Size = new System.Drawing.Size(390, 16);
            this.sldOptionsMainViewScrollSpeed.SmallChange = 1u;
            this.sldOptionsMainViewScrollSpeed.TabIndex = 58;
            this.sldOptionsMainViewScrollSpeed.Text = "colorSlider1";
            this.sldOptionsMainViewScrollSpeed.ThumbInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMainViewScrollSpeed.ThumbOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMainViewScrollSpeed.ThumbPenColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMainViewScrollSpeed.ThumbRoundRectSize = new System.Drawing.Size(3, 3);
            this.sldOptionsMainViewScrollSpeed.ThumbSize = 20;
            this.chkOptionsAutoPauseInPopup.AutoSize = true;
            this.chkOptionsAutoPauseInPopup.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsAutoPauseInPopup.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsAutoPauseInPopup.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsAutoPauseInPopup.Location = new System.Drawing.Point(12, 10);
            this.chkOptionsAutoPauseInPopup.Name = "chkOptionsAutoPauseInPopup";
            this.chkOptionsAutoPauseInPopup.Size = new System.Drawing.Size(192, 17);
            this.chkOptionsAutoPauseInPopup.TabIndex = 15;
            this.chkOptionsAutoPauseInPopup.Text = "Auto Pause in Game Screens";
            this.chkOptionsAutoPauseInPopup.UseVisualStyleBackColor = false;
            this.chkOptionsAutoPauseInPopup.Visible = false;
            this.grpOptionsVolume.BackColor = System.Drawing.Color.Transparent;
            this.grpOptionsVolume.Controls.Add(this.lblOptionsSoundEffectsVolume);
            this.grpOptionsVolume.Controls.Add(this.lblOptionsMusicVolume);
            this.grpOptionsVolume.Controls.Add(this.sldOptionsSoundEffectsVolume);
            this.grpOptionsVolume.Controls.Add(this.sldOptionsMusicVolume);
            this.grpOptionsVolume.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpOptionsVolume.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpOptionsVolume.Location = new System.Drawing.Point(12, 121);
            this.grpOptionsVolume.Name = "grpOptionsVolume";
            this.grpOptionsVolume.Size = new System.Drawing.Size(499, 64);
            this.grpOptionsVolume.TabIndex = 10;
            this.grpOptionsVolume.TabStop = false;
            this.grpOptionsVolume.Text = "Sound Volume";
            this.lblOptionsSoundEffectsVolume.AutoSize = true;
            this.lblOptionsSoundEffectsVolume.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsSoundEffectsVolume.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsSoundEffectsVolume.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsSoundEffectsVolume.Location = new System.Drawing.Point(17, 40);
            this.lblOptionsSoundEffectsVolume.Name = "lblOptionsSoundEffectsVolume";
            this.lblOptionsSoundEffectsVolume.Size = new System.Drawing.Size(45, 13);
            this.lblOptionsSoundEffectsVolume.TabIndex = 13;
            this.lblOptionsSoundEffectsVolume.Text = "Effects";
            this.lblOptionsMusicVolume.AutoSize = true;
            this.lblOptionsMusicVolume.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsMusicVolume.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsMusicVolume.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsMusicVolume.Location = new System.Drawing.Point(17, 19);
            this.lblOptionsMusicVolume.Name = "lblOptionsMusicVolume";
            this.lblOptionsMusicVolume.Size = new System.Drawing.Size(38, 13);
            this.lblOptionsMusicVolume.TabIndex = 12;
            this.lblOptionsMusicVolume.Text = "Music";
            this.sldOptionsSoundEffectsVolume.BackColor = System.Drawing.Color.Transparent;
            this.sldOptionsSoundEffectsVolume.BarInnerColor = System.Drawing.Color.FromArgb(64, 64, 72);
            this.sldOptionsSoundEffectsVolume.BarOuterColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsSoundEffectsVolume.BarPenColor = System.Drawing.Color.FromArgb(16, 16, 24);
            this.sldOptionsSoundEffectsVolume.BorderRoundRectSize = new System.Drawing.Size(2, 2);
            this.sldOptionsSoundEffectsVolume.ElapsedInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsSoundEffectsVolume.ElapsedOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsSoundEffectsVolume.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.sldOptionsSoundEffectsVolume.ForeColor = System.Drawing.Color.White;
            this.sldOptionsSoundEffectsVolume.LargeChange = 5u;
            this.sldOptionsSoundEffectsVolume.Location = new System.Drawing.Point(81, 39);
            this.sldOptionsSoundEffectsVolume.Name = "sldOptionsSoundEffectsVolume";
            this.sldOptionsSoundEffectsVolume.Size = new System.Drawing.Size(408, 16);
            this.sldOptionsSoundEffectsVolume.SmallChange = 1u;
            this.sldOptionsSoundEffectsVolume.TabIndex = 11;
            this.sldOptionsSoundEffectsVolume.Text = "colorSlider1";
            this.sldOptionsSoundEffectsVolume.ThumbInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsSoundEffectsVolume.ThumbOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsSoundEffectsVolume.ThumbPenColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsSoundEffectsVolume.ThumbRoundRectSize = new System.Drawing.Size(3, 3);
            this.sldOptionsSoundEffectsVolume.ThumbSize = 20;
            this.sldOptionsSoundEffectsVolume.Scroll += new System.Windows.Forms.ScrollEventHandler(sldOptionsSoundEffectsVolume_Scroll);
            this.sldOptionsMusicVolume.BackColor = System.Drawing.Color.Transparent;
            this.sldOptionsMusicVolume.BarInnerColor = System.Drawing.Color.FromArgb(64, 64, 72);
            this.sldOptionsMusicVolume.BarOuterColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMusicVolume.BarPenColor = System.Drawing.Color.FromArgb(16, 16, 24);
            this.sldOptionsMusicVolume.BorderRoundRectSize = new System.Drawing.Size(2, 2);
            this.sldOptionsMusicVolume.ElapsedInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMusicVolume.ElapsedOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMusicVolume.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.sldOptionsMusicVolume.ForeColor = System.Drawing.Color.White;
            this.sldOptionsMusicVolume.LargeChange = 5u;
            this.sldOptionsMusicVolume.Location = new System.Drawing.Point(81, 18);
            this.sldOptionsMusicVolume.Name = "sldOptionsMusicVolume";
            this.sldOptionsMusicVolume.Size = new System.Drawing.Size(408, 16);
            this.sldOptionsMusicVolume.SmallChange = 1u;
            this.sldOptionsMusicVolume.TabIndex = 10;
            this.sldOptionsMusicVolume.Text = "colorSlider1";
            this.sldOptionsMusicVolume.ThumbInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldOptionsMusicVolume.ThumbOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldOptionsMusicVolume.ThumbPenColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldOptionsMusicVolume.ThumbRoundRectSize = new System.Drawing.Size(3, 3);
            this.sldOptionsMusicVolume.ThumbSize = 20;
            this.sldOptionsMusicVolume.Scroll += new System.Windows.Forms.ScrollEventHandler(sldOptionsMusicVolume_Scroll);
            this.grpOptionsControl.BackColor = System.Drawing.Color.Transparent;
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlOfferPirateMissions);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlOfferPirateMissions);
            this.grpOptionsControl.Controls.Add(this.chkOptionsControlCharacterLocations);
            this.grpOptionsControl.Controls.Add(this.chkOptionsControlPopulationPolicy);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlColonyFacilities);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlColonyFacilities);
            this.grpOptionsControl.Controls.Add(this.chkOptionsControlResearch);
            this.grpOptionsControl.Controls.Add(this.btnGameOptionsEmpireSettings);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsAutomationMode);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlColonization);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlDiplomacyTreaties);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlColonization);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlAttacks);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlConstruction);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlDiplomacyTreaties);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlConstruction);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlAttacks);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlAgentMissions);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlDiplomacyGifts);
            this.grpOptionsControl.Controls.Add(this.btnGameOptionsResetAutomationMessages);
            this.grpOptionsControl.Controls.Add(this.lblOptionsControlDiplomacyOffense);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlAgentMissions);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlDiplomacyOffense);
            this.grpOptionsControl.Controls.Add(this.cmbOptionsControlDiplomacyGifts);
            this.grpOptionsControl.Controls.Add(this.chkOptionsControlTroops);
            this.grpOptionsControl.Controls.Add(this.chkOptionsControlColonyTaxRates);
            this.grpOptionsControl.Controls.Add(this.chkOptionsControlFleets);
            this.grpOptionsControl.Controls.Add(this.chkOptionsControlDesigns);
            this.grpOptionsControl.Controls.Add(this.pnlOptionsAutomationMode);
            this.grpOptionsControl.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpOptionsControl.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpOptionsControl.Location = new System.Drawing.Point(12, 242);
            this.grpOptionsControl.Name = "grpOptionsControl";
            this.grpOptionsControl.Size = new System.Drawing.Size(499, 241);
            this.grpOptionsControl.TabIndex = 4;
            this.grpOptionsControl.TabStop = false;
            this.grpOptionsControl.Text = "Automation";
            this.lblOptionsControlOfferPirateMissions.AutoSize = true;
            this.lblOptionsControlOfferPirateMissions.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlOfferPirateMissions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlOfferPirateMissions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlOfferPirateMissions.Location = new System.Drawing.Point(188, 214);
            this.lblOptionsControlOfferPirateMissions.Name = "lblOptionsControlOfferPirateMissions";
            this.lblOptionsControlOfferPirateMissions.Size = new System.Drawing.Size(124, 13);
            this.lblOptionsControlOfferPirateMissions.TabIndex = 79;
            this.lblOptionsControlOfferPirateMissions.Text = "Offer Pirate Missions";
            this.cmbOptionsControlOfferPirateMissions.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlOfferPirateMissions.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlOfferPirateMissions.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlOfferPirateMissions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlOfferPirateMissions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlOfferPirateMissions.FormattingEnabled = true;
            this.cmbOptionsControlOfferPirateMissions.Items.AddRange(new object[3] { "Control manually", "Suggest new colony facilities", "Fully automate" });
            this.cmbOptionsControlOfferPirateMissions.Location = new System.Drawing.Point(329, 211);
            this.cmbOptionsControlOfferPirateMissions.Name = "cmbOptionsControlOfferPirateMissions";
            this.cmbOptionsControlOfferPirateMissions.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlOfferPirateMissions.TabIndex = 78;
            this.cmbOptionsControlOfferPirateMissions.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlOfferPirateMissions_SelectedIndexChanged);
            this.chkOptionsControlCharacterLocations.AutoSize = true;
            this.chkOptionsControlCharacterLocations.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsControlCharacterLocations.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsControlCharacterLocations.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsControlCharacterLocations.Location = new System.Drawing.Point(17, 94);
            this.chkOptionsControlCharacterLocations.Name = "chkOptionsControlCharacterLocations";
            this.chkOptionsControlCharacterLocations.Size = new System.Drawing.Size(140, 17);
            this.chkOptionsControlCharacterLocations.TabIndex = 77;
            this.chkOptionsControlCharacterLocations.Text = "Character Locations";
            this.chkOptionsControlCharacterLocations.UseVisualStyleBackColor = false;
            this.chkOptionsControlCharacterLocations.CheckedChanged += new System.EventHandler(chkOptionsControlCharacterLocations_CheckedChanged);
            this.chkOptionsControlPopulationPolicy.AutoSize = true;
            this.chkOptionsControlPopulationPolicy.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsControlPopulationPolicy.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsControlPopulationPolicy.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsControlPopulationPolicy.Location = new System.Drawing.Point(18, 150);
            this.chkOptionsControlPopulationPolicy.Name = "chkOptionsControlPopulationPolicy";
            this.chkOptionsControlPopulationPolicy.Size = new System.Drawing.Size(175, 17);
            this.chkOptionsControlPopulationPolicy.TabIndex = 76;
            this.chkOptionsControlPopulationPolicy.Text = "Colony Population Policies";
            this.chkOptionsControlPopulationPolicy.UseVisualStyleBackColor = false;
            this.chkOptionsControlPopulationPolicy.CheckedChanged += new System.EventHandler(chkOptionsControlPopulationPolicy_CheckedChanged);
            this.lblOptionsControlColonyFacilities.AutoSize = true;
            this.lblOptionsControlColonyFacilities.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlColonyFacilities.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlColonyFacilities.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlColonyFacilities.Location = new System.Drawing.Point(188, 190);
            this.lblOptionsControlColonyFacilities.Name = "lblOptionsControlColonyFacilities";
            this.lblOptionsControlColonyFacilities.Size = new System.Drawing.Size(139, 13);
            this.lblOptionsControlColonyFacilities.TabIndex = 75;
            this.lblOptionsControlColonyFacilities.Text = "Colony Facility Building";
            this.cmbOptionsControlColonyFacilities.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlColonyFacilities.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlColonyFacilities.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlColonyFacilities.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlColonyFacilities.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlColonyFacilities.FormattingEnabled = true;
            this.cmbOptionsControlColonyFacilities.Items.AddRange(new object[3] { "Control manually", "Suggest new colony facilities", "Fully automate" });
            this.cmbOptionsControlColonyFacilities.Location = new System.Drawing.Point(329, 187);
            this.cmbOptionsControlColonyFacilities.Name = "cmbOptionsControlColonyFacilities";
            this.cmbOptionsControlColonyFacilities.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlColonyFacilities.TabIndex = 74;
            this.cmbOptionsControlColonyFacilities.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlColonyFacilities_SelectedIndexChanged);
            this.chkOptionsControlResearch.AutoSize = true;
            this.chkOptionsControlResearch.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsControlResearch.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsControlResearch.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsControlResearch.Location = new System.Drawing.Point(182, 189);
            this.chkOptionsControlResearch.Name = "chkOptionsControlResearch";
            this.chkOptionsControlResearch.Size = new System.Drawing.Size(79, 17);
            this.chkOptionsControlResearch.TabIndex = 72;
            this.chkOptionsControlResearch.Text = "Research";
            this.chkOptionsControlResearch.UseVisualStyleBackColor = false;
            this.btnGameOptionsEmpireSettings.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnGameOptionsEmpireSettings.ClipBackground = false;
            this.btnGameOptionsEmpireSettings.DelayFrameRefresh = false;
            this.btnGameOptionsEmpireSettings.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnGameOptionsEmpireSettings.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnGameOptionsEmpireSettings.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnGameOptionsEmpireSettings.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnGameOptionsEmpireSettings.IntensifyColors = false;
            this.btnGameOptionsEmpireSettings.Location = new System.Drawing.Point(30, 166);
            this.btnGameOptionsEmpireSettings.Name = "btnGameOptionsEmpireSettings";
            this.btnGameOptionsEmpireSettings.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnGameOptionsEmpireSettings.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnGameOptionsEmpireSettings.Size = new System.Drawing.Size(144, 31);
            this.btnGameOptionsEmpireSettings.TabIndex = 71;
            this.btnGameOptionsEmpireSettings.Text = "Other Empire Settings";
            this.btnGameOptionsEmpireSettings.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnGameOptionsEmpireSettings.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnGameOptionsEmpireSettings.ToggledOn = false;
            this.btnGameOptionsEmpireSettings.Click += new System.EventHandler(btnGameOptionsEmpireSettings_Click);
            this.cmbOptionsAutomationMode.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsAutomationMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsAutomationMode.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsAutomationMode.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsAutomationMode.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsAutomationMode.FormattingEnabled = true;
            this.cmbOptionsAutomationMode.Items.AddRange(new object[8] { "(Custom)", "Default", "Expert (None)", "Rule in Absence (Full)", "Expansion", "War and Combat", "Diplomacy", "Spy Master" });
            this.cmbOptionsAutomationMode.Location = new System.Drawing.Point(53, 19);
            this.cmbOptionsAutomationMode.Name = "cmbOptionsAutomationMode";
            this.cmbOptionsAutomationMode.Size = new System.Drawing.Size(116, 21);
            this.cmbOptionsAutomationMode.TabIndex = 66;
            this.cmbOptionsAutomationMode.SelectedIndexChanged += new System.EventHandler(cmbOptionsAutomationMode_SelectedIndexChanged);
            this.lblOptionsControlColonization.AutoSize = true;
            this.lblOptionsControlColonization.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlColonization.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlColonization.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlColonization.Location = new System.Drawing.Point(249, 22);
            this.lblOptionsControlColonization.Name = "lblOptionsControlColonization";
            this.lblOptionsControlColonization.Size = new System.Drawing.Size(77, 13);
            this.lblOptionsControlColonization.TabIndex = 65;
            this.lblOptionsControlColonization.Text = "Colonization";
            this.lblOptionsControlDiplomacyTreaties.AutoSize = true;
            this.lblOptionsControlDiplomacyTreaties.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlDiplomacyTreaties.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlDiplomacyTreaties.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlDiplomacyTreaties.Location = new System.Drawing.Point(273, 143);
            this.lblOptionsControlDiplomacyTreaties.Name = "lblOptionsControlDiplomacyTreaties";
            this.lblOptionsControlDiplomacyTreaties.Size = new System.Drawing.Size(53, 13);
            this.lblOptionsControlDiplomacyTreaties.TabIndex = 59;
            this.lblOptionsControlDiplomacyTreaties.Text = "Treaties";
            this.cmbOptionsControlColonization.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlColonization.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlColonization.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlColonization.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlColonization.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlColonization.FormattingEnabled = true;
            this.cmbOptionsControlColonization.Items.AddRange(new object[3] { "Control manually", "Suggest new colonies", "Fully automate" });
            this.cmbOptionsControlColonization.Location = new System.Drawing.Point(329, 19);
            this.cmbOptionsControlColonization.Name = "cmbOptionsControlColonization";
            this.cmbOptionsControlColonization.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlColonization.TabIndex = 64;
            this.cmbOptionsControlColonization.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlColonization_SelectedIndexChanged);
            this.lblOptionsControlAttacks.AutoSize = true;
            this.lblOptionsControlAttacks.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlAttacks.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlAttacks.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlAttacks.Location = new System.Drawing.Point(179, 95);
            this.lblOptionsControlAttacks.Name = "lblOptionsControlAttacks";
            this.lblOptionsControlAttacks.Size = new System.Drawing.Size(147, 13);
            this.lblOptionsControlAttacks.TabIndex = 54;
            this.lblOptionsControlAttacks.Text = "Attacks Against Enemies";
            this.lblOptionsControlConstruction.AutoSize = true;
            this.lblOptionsControlConstruction.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlConstruction.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlConstruction.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlConstruction.Location = new System.Drawing.Point(246, 46);
            this.lblOptionsControlConstruction.Name = "lblOptionsControlConstruction";
            this.lblOptionsControlConstruction.Size = new System.Drawing.Size(81, 13);
            this.lblOptionsControlConstruction.TabIndex = 63;
            this.lblOptionsControlConstruction.Text = "Ship Building";
            this.cmbOptionsControlDiplomacyTreaties.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlDiplomacyTreaties.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlDiplomacyTreaties.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlDiplomacyTreaties.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlDiplomacyTreaties.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlDiplomacyTreaties.FormattingEnabled = true;
            this.cmbOptionsControlDiplomacyTreaties.Items.AddRange(new object[3] { "Control manually", "Suggest new treaties", "Fully automate" });
            this.cmbOptionsControlDiplomacyTreaties.Location = new System.Drawing.Point(329, 139);
            this.cmbOptionsControlDiplomacyTreaties.Name = "cmbOptionsControlDiplomacyTreaties";
            this.cmbOptionsControlDiplomacyTreaties.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlDiplomacyTreaties.TabIndex = 58;
            this.cmbOptionsControlDiplomacyTreaties.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlDiplomacyTreaties_SelectedIndexChanged);
            this.cmbOptionsControlConstruction.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlConstruction.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlConstruction.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlConstruction.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlConstruction.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlConstruction.FormattingEnabled = true;
            this.cmbOptionsControlConstruction.Items.AddRange(new object[3] { "Control manually", "Suggest new ships and bases", "Fully automate" });
            this.cmbOptionsControlConstruction.Location = new System.Drawing.Point(329, 43);
            this.cmbOptionsControlConstruction.Name = "cmbOptionsControlConstruction";
            this.cmbOptionsControlConstruction.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlConstruction.TabIndex = 62;
            this.cmbOptionsControlConstruction.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlConstruction_SelectedIndexChanged);
            this.cmbOptionsControlAttacks.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlAttacks.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlAttacks.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlAttacks.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlAttacks.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlAttacks.FormattingEnabled = true;
            this.cmbOptionsControlAttacks.Items.AddRange(new object[3] { "Control manually", "Suggest attack targets", "Fully automate" });
            this.cmbOptionsControlAttacks.Location = new System.Drawing.Point(329, 91);
            this.cmbOptionsControlAttacks.Name = "cmbOptionsControlAttacks";
            this.cmbOptionsControlAttacks.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlAttacks.TabIndex = 53;
            this.cmbOptionsControlAttacks.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlAttacks_SelectedIndexChanged);
            this.lblOptionsControlAgentMissions.AutoSize = true;
            this.lblOptionsControlAgentMissions.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlAgentMissions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlAgentMissions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlAgentMissions.Location = new System.Drawing.Point(236, 70);
            this.lblOptionsControlAgentMissions.Name = "lblOptionsControlAgentMissions";
            this.lblOptionsControlAgentMissions.Size = new System.Drawing.Size(91, 13);
            this.lblOptionsControlAgentMissions.TabIndex = 61;
            this.lblOptionsControlAgentMissions.Text = "Agent Missions";
            this.lblOptionsControlDiplomacyGifts.AutoSize = true;
            this.lblOptionsControlDiplomacyGifts.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlDiplomacyGifts.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlDiplomacyGifts.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlDiplomacyGifts.Location = new System.Drawing.Point(179, 118);
            this.lblOptionsControlDiplomacyGifts.Name = "lblOptionsControlDiplomacyGifts";
            this.lblOptionsControlDiplomacyGifts.Size = new System.Drawing.Size(147, 13);
            this.lblOptionsControlDiplomacyGifts.TabIndex = 56;
            this.lblOptionsControlDiplomacyGifts.Text = "Sending Diplomatic Gifts";
            this.btnGameOptionsResetAutomationMessages.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnGameOptionsResetAutomationMessages.ClipBackground = false;
            this.btnGameOptionsResetAutomationMessages.DelayFrameRefresh = false;
            this.btnGameOptionsResetAutomationMessages.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnGameOptionsResetAutomationMessages.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnGameOptionsResetAutomationMessages.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnGameOptionsResetAutomationMessages.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnGameOptionsResetAutomationMessages.IntensifyColors = false;
            this.btnGameOptionsResetAutomationMessages.Location = new System.Drawing.Point(146, 46);
            this.btnGameOptionsResetAutomationMessages.Name = "btnGameOptionsResetAutomationMessages";
            this.btnGameOptionsResetAutomationMessages.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnGameOptionsResetAutomationMessages.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnGameOptionsResetAutomationMessages.Size = new System.Drawing.Size(144, 31);
            this.btnGameOptionsResetAutomationMessages.TabIndex = 16;
            this.btnGameOptionsResetAutomationMessages.Text = "Reset Warnings";
            this.btnGameOptionsResetAutomationMessages.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnGameOptionsResetAutomationMessages.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnGameOptionsResetAutomationMessages.ToggledOn = false;
            this.btnGameOptionsResetAutomationMessages.Click += new System.EventHandler(btnGameOptionsResetAutomationMessages_Click);
            this.lblOptionsControlDiplomacyOffense.AutoSize = true;
            this.lblOptionsControlDiplomacyOffense.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsControlDiplomacyOffense.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsControlDiplomacyOffense.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsControlDiplomacyOffense.Location = new System.Drawing.Point(188, 166);
            this.lblOptionsControlDiplomacyOffense.Name = "lblOptionsControlDiplomacyOffense";
            this.lblOptionsControlDiplomacyOffense.Size = new System.Drawing.Size(138, 13);
            this.lblOptionsControlDiplomacyOffense.TabIndex = 59;
            this.lblOptionsControlDiplomacyOffense.Text = "War && Trade Sanctions";
            this.cmbOptionsControlAgentMissions.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlAgentMissions.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlAgentMissions.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlAgentMissions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlAgentMissions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlAgentMissions.FormattingEnabled = true;
            this.cmbOptionsControlAgentMissions.Items.AddRange(new object[3] { "Control manually", "Suggest offensive missions", "Fully automate" });
            this.cmbOptionsControlAgentMissions.Location = new System.Drawing.Point(329, 67);
            this.cmbOptionsControlAgentMissions.Name = "cmbOptionsControlAgentMissions";
            this.cmbOptionsControlAgentMissions.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlAgentMissions.TabIndex = 60;
            this.cmbOptionsControlAgentMissions.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlAgentMissions_SelectedIndexChanged);
            this.cmbOptionsControlDiplomacyOffense.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlDiplomacyOffense.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlDiplomacyOffense.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlDiplomacyOffense.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlDiplomacyOffense.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlDiplomacyOffense.FormattingEnabled = true;
            this.cmbOptionsControlDiplomacyOffense.Items.AddRange(new object[3] { "Control manually", "Suggest war and trade sanctions", "Fully automate" });
            this.cmbOptionsControlDiplomacyOffense.Location = new System.Drawing.Point(329, 163);
            this.cmbOptionsControlDiplomacyOffense.Name = "cmbOptionsControlDiplomacyOffense";
            this.cmbOptionsControlDiplomacyOffense.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlDiplomacyOffense.TabIndex = 58;
            this.cmbOptionsControlDiplomacyOffense.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlDiplomacyOffense_SelectedIndexChanged);
            this.cmbOptionsControlDiplomacyGifts.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbOptionsControlDiplomacyGifts.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbOptionsControlDiplomacyGifts.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbOptionsControlDiplomacyGifts.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbOptionsControlDiplomacyGifts.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbOptionsControlDiplomacyGifts.FormattingEnabled = true;
            this.cmbOptionsControlDiplomacyGifts.Items.AddRange(new object[3] { "Control manually", "Suggest gifts to empires", "Fully automate" });
            this.cmbOptionsControlDiplomacyGifts.Location = new System.Drawing.Point(329, 115);
            this.cmbOptionsControlDiplomacyGifts.Name = "cmbOptionsControlDiplomacyGifts";
            this.cmbOptionsControlDiplomacyGifts.Size = new System.Drawing.Size(160, 21);
            this.cmbOptionsControlDiplomacyGifts.TabIndex = 55;
            this.cmbOptionsControlDiplomacyGifts.SelectedIndexChanged += new System.EventHandler(cmbOptionsControlDiplomacyGifts_SelectedIndexChanged);
            this.chkOptionsControlTroops.AutoSize = true;
            this.chkOptionsControlTroops.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsControlTroops.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsControlTroops.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsControlTroops.Location = new System.Drawing.Point(20, 114);
            this.chkOptionsControlTroops.Name = "chkOptionsControlTroops";
            this.chkOptionsControlTroops.Size = new System.Drawing.Size(132, 17);
            this.chkOptionsControlTroops.TabIndex = 7;
            this.chkOptionsControlTroops.Text = "Troop Recruitment";
            this.chkOptionsControlTroops.UseVisualStyleBackColor = false;
            this.chkOptionsControlTroops.CheckedChanged += new System.EventHandler(chkOptionsControlTroops_CheckedChanged);
            this.chkOptionsControlColonyTaxRates.AutoSize = true;
            this.chkOptionsControlColonyTaxRates.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsControlColonyTaxRates.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsControlColonyTaxRates.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsControlColonyTaxRates.Location = new System.Drawing.Point(25, 57);
            this.chkOptionsControlColonyTaxRates.Name = "chkOptionsControlColonyTaxRates";
            this.chkOptionsControlColonyTaxRates.Size = new System.Drawing.Size(127, 17);
            this.chkOptionsControlColonyTaxRates.TabIndex = 10;
            this.chkOptionsControlColonyTaxRates.Text = "Colony Tax Rates";
            this.chkOptionsControlColonyTaxRates.UseVisualStyleBackColor = false;
            this.chkOptionsControlColonyTaxRates.CheckedChanged += new System.EventHandler(chkOptionsControlColonyTaxRates_CheckedChanged);
            this.chkOptionsControlFleets.AutoSize = true;
            this.chkOptionsControlFleets.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsControlFleets.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsControlFleets.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsControlFleets.Location = new System.Drawing.Point(38, 133);
            this.chkOptionsControlFleets.Name = "chkOptionsControlFleets";
            this.chkOptionsControlFleets.Size = new System.Drawing.Size(114, 17);
            this.chkOptionsControlFleets.TabIndex = 8;
            this.chkOptionsControlFleets.Text = "Fleet Formation";
            this.chkOptionsControlFleets.UseVisualStyleBackColor = false;
            this.chkOptionsControlFleets.CheckedChanged += new System.EventHandler(sOmbQcqjdd);
            this.chkOptionsControlDesigns.AutoSize = true;
            this.chkOptionsControlDesigns.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsControlDesigns.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsControlDesigns.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsControlDesigns.Location = new System.Drawing.Point(58, 76);
            this.chkOptionsControlDesigns.Name = "chkOptionsControlDesigns";
            this.chkOptionsControlDesigns.Size = new System.Drawing.Size(94, 17);
            this.chkOptionsControlDesigns.TabIndex = 5;
            this.chkOptionsControlDesigns.Text = "Ship Design";
            this.chkOptionsControlDesigns.UseVisualStyleBackColor = false;
            this.chkOptionsControlDesigns.CheckedChanged += new System.EventHandler(chkOptionsControlDesigns_CheckedChanged);
            this.pnlOptionsAutomationMode.BackColor = System.Drawing.Color.FromArgb(128, 128, 0, 64);
            this.pnlOptionsAutomationMode.Controls.Add(this.lblOptionsAutomationMode);
            this.pnlOptionsAutomationMode.Location = new System.Drawing.Point(10, 15);
            this.pnlOptionsAutomationMode.Name = "pnlOptionsAutomationMode";
            this.pnlOptionsAutomationMode.Size = new System.Drawing.Size(150, 30);
            this.pnlOptionsAutomationMode.TabIndex = 68;
            this.lblOptionsAutomationMode.AutoSize = true;
            this.lblOptionsAutomationMode.BackColor = System.Drawing.Color.Transparent;
            this.lblOptionsAutomationMode.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblOptionsAutomationMode.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblOptionsAutomationMode.Location = new System.Drawing.Point(4, 7);
            this.lblOptionsAutomationMode.Name = "lblOptionsAutomationMode";
            this.lblOptionsAutomationMode.Size = new System.Drawing.Size(37, 13);
            this.lblOptionsAutomationMode.TabIndex = 67;
            this.lblOptionsAutomationMode.Text = "Mode";
            this.pnlGameOptionsMessages.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlGameOptionsMessages.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlGameOptionsMessages.BackgroundImage");
            this.pnlGameOptionsMessages.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlGameOptionsMessages.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlGameOptionsMessages.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlGameOptionsMessages.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlGameOptionsMessages.BorderSize = 3;
            this.pnlGameOptionsMessages.Controls.Add(this.grpOptionsPopupMessages);
            this.pnlGameOptionsMessages.Controls.Add(this.grpOptionsScrollingMessages);
            this.pnlGameOptionsMessages.HeaderIcon = null;
            this.pnlGameOptionsMessages.HeaderTitle = "Message Settings";
            this.pnlGameOptionsMessages.Location = new System.Drawing.Point(100, 100);
            this.pnlGameOptionsMessages.Name = "pnlGameOptionsMessages";
            this.pnlGameOptionsMessages.Size = new System.Drawing.Size(625, 400);
            this.pnlGameOptionsMessages.TabIndex = 131;
            this.pnlGameOptionsMessages.Visible = false;
            this.pnlGameOptionsMessages.CloseButtonClicked += new System.EventHandler(pnlGameOptionsMessages_CloseButtonClicked);
            this.grpOptionsPopupMessages.BackColor = System.Drawing.Color.Transparent;
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageConstructionResourceShortage);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageUnderAttackCivilianBases);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageUnderAttackMilitaryShips);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageUnderAttackExplorationShips);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageUnderAttackOtherStateBases);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageUnderAttackColonyConstructionShips);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageUnderAttackColoniesSpaceports);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageUnderAttackCivilianShips);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageShipNeedsRefuelling);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageShipMissionComplete);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageExploration);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageIntelligenceMissions);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageResearchBreakthrough);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageEmpireMetDestroyed);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageColonyGainLoss);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageDiplomacyWarTradeSanctions);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageDiplomacyTreaties);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageRequestWarning);
            this.grpOptionsPopupMessages.Controls.Add(this.chkOptionsPopupMessageShipBuilt);
            this.grpOptionsPopupMessages.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpOptionsPopupMessages.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpOptionsPopupMessages.Location = new System.Drawing.Point(317, 14);
            this.grpOptionsPopupMessages.Name = "grpOptionsPopupMessages";
            this.grpOptionsPopupMessages.Size = new System.Drawing.Size(295, 349);
            this.grpOptionsPopupMessages.TabIndex = 18;
            this.grpOptionsPopupMessages.TabStop = false;
            this.grpOptionsPopupMessages.Text = "Popup Messages";
            this.chkOptionsPopupMessageConstructionResourceShortage.AutoSize = true;
            this.chkOptionsPopupMessageConstructionResourceShortage.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageConstructionResourceShortage.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageConstructionResourceShortage.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageConstructionResourceShortage.Location = new System.Drawing.Point(7, 325);
            this.chkOptionsPopupMessageConstructionResourceShortage.Name = "chkOptionsPopupMessageConstructionResourceShortage";
            this.chkOptionsPopupMessageConstructionResourceShortage.Size = new System.Drawing.Size(211, 17);
            this.chkOptionsPopupMessageConstructionResourceShortage.TabIndex = 32;
            this.chkOptionsPopupMessageConstructionResourceShortage.Text = "Construction Resource Shortage";
            this.chkOptionsPopupMessageConstructionResourceShortage.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageUnderAttackCivilianBases.AutoSize = true;
            this.chkOptionsPopupMessageUnderAttackCivilianBases.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageUnderAttackCivilianBases.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageUnderAttackCivilianBases.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageUnderAttackCivilianBases.Location = new System.Drawing.Point(7, 223);
            this.chkOptionsPopupMessageUnderAttackCivilianBases.Name = "chkOptionsPopupMessageUnderAttackCivilianBases";
            this.chkOptionsPopupMessageUnderAttackCivilianBases.Size = new System.Drawing.Size(193, 17);
            this.chkOptionsPopupMessageUnderAttackCivilianBases.TabIndex = 31;
            this.chkOptionsPopupMessageUnderAttackCivilianBases.Text = "Under Attack - Civilian Bases";
            this.chkOptionsPopupMessageUnderAttackCivilianBases.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.AutoSize = true;
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.Location = new System.Drawing.Point(7, 274);
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.Name = "chkOptionsPopupMessageUnderAttackMilitaryShips";
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.Size = new System.Drawing.Size(189, 17);
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.TabIndex = 30;
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.Text = "Under Attack - Military Ships";
            this.chkOptionsPopupMessageUnderAttackMilitaryShips.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageUnderAttackExplorationShips.AutoSize = true;
            this.chkOptionsPopupMessageUnderAttackExplorationShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageUnderAttackExplorationShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageUnderAttackExplorationShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageUnderAttackExplorationShips.Location = new System.Drawing.Point(7, 240);
            this.chkOptionsPopupMessageUnderAttackExplorationShips.Name = "chkOptionsPopupMessageUnderAttackExplorationShips";
            this.chkOptionsPopupMessageUnderAttackExplorationShips.Size = new System.Drawing.Size(212, 17);
            this.chkOptionsPopupMessageUnderAttackExplorationShips.TabIndex = 29;
            this.chkOptionsPopupMessageUnderAttackExplorationShips.Text = "Under Attack - Exploration Ships";
            this.chkOptionsPopupMessageUnderAttackExplorationShips.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.AutoSize = true;
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.Location = new System.Drawing.Point(7, 291);
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.Name = "chkOptionsPopupMessageUnderAttackOtherStateBases";
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.Size = new System.Drawing.Size(284, 17);
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.TabIndex = 28;
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.Text = "Under Attack - Research, Monitoring, Resorts";
            this.chkOptionsPopupMessageUnderAttackOtherStateBases.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.AutoSize = true;
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.Location = new System.Drawing.Point(7, 257);
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.Name = "chkOptionsPopupMessageUnderAttackColonyConstructionShips";
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.Size = new System.Drawing.Size(276, 17);
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.TabIndex = 27;
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.Text = "Under Attack - Colony && Construction Ships";
            this.chkOptionsPopupMessageUnderAttackColonyConstructionShips.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.AutoSize = true;
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.Location = new System.Drawing.Point(7, 308);
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.Name = "chkOptionsPopupMessageUnderAttackColoniesSpaceports";
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.Size = new System.Drawing.Size(242, 17);
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.TabIndex = 26;
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.Text = "Under Attack - Colonies && Spaceports";
            this.chkOptionsPopupMessageUnderAttackColoniesSpaceports.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageUnderAttackCivilianShips.AutoSize = true;
            this.chkOptionsPopupMessageUnderAttackCivilianShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageUnderAttackCivilianShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageUnderAttackCivilianShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageUnderAttackCivilianShips.Location = new System.Drawing.Point(7, 206);
            this.chkOptionsPopupMessageUnderAttackCivilianShips.Name = "chkOptionsPopupMessageUnderAttackCivilianShips";
            this.chkOptionsPopupMessageUnderAttackCivilianShips.Size = new System.Drawing.Size(190, 17);
            this.chkOptionsPopupMessageUnderAttackCivilianShips.TabIndex = 25;
            this.chkOptionsPopupMessageUnderAttackCivilianShips.Text = "Under Attack - Civilian Ships";
            this.chkOptionsPopupMessageUnderAttackCivilianShips.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageShipNeedsRefuelling.AutoSize = true;
            this.chkOptionsPopupMessageShipNeedsRefuelling.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageShipNeedsRefuelling.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageShipNeedsRefuelling.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageShipNeedsRefuelling.Location = new System.Drawing.Point(7, 189);
            this.chkOptionsPopupMessageShipNeedsRefuelling.Name = "chkOptionsPopupMessageShipNeedsRefuelling";
            this.chkOptionsPopupMessageShipNeedsRefuelling.Size = new System.Drawing.Size(207, 17);
            this.chkOptionsPopupMessageShipNeedsRefuelling.TabIndex = 20;
            this.chkOptionsPopupMessageShipNeedsRefuelling.Text = "Ship Needs Refuelling or Repair";
            this.chkOptionsPopupMessageShipNeedsRefuelling.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageShipMissionComplete.AutoSize = true;
            this.chkOptionsPopupMessageShipMissionComplete.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageShipMissionComplete.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageShipMissionComplete.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageShipMissionComplete.Location = new System.Drawing.Point(7, 172);
            this.chkOptionsPopupMessageShipMissionComplete.Name = "chkOptionsPopupMessageShipMissionComplete";
            this.chkOptionsPopupMessageShipMissionComplete.Size = new System.Drawing.Size(155, 17);
            this.chkOptionsPopupMessageShipMissionComplete.TabIndex = 19;
            this.chkOptionsPopupMessageShipMissionComplete.Text = "Ship Mission Complete";
            this.chkOptionsPopupMessageShipMissionComplete.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageExploration.AutoSize = true;
            this.chkOptionsPopupMessageExploration.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageExploration.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageExploration.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageExploration.Location = new System.Drawing.Point(7, 155);
            this.chkOptionsPopupMessageExploration.Name = "chkOptionsPopupMessageExploration";
            this.chkOptionsPopupMessageExploration.Size = new System.Drawing.Size(158, 17);
            this.chkOptionsPopupMessageExploration.TabIndex = 16;
            this.chkOptionsPopupMessageExploration.Text = "Exploration discoveries";
            this.chkOptionsPopupMessageExploration.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageIntelligenceMissions.AutoSize = true;
            this.chkOptionsPopupMessageIntelligenceMissions.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageIntelligenceMissions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageIntelligenceMissions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageIntelligenceMissions.Location = new System.Drawing.Point(7, 138);
            this.chkOptionsPopupMessageIntelligenceMissions.Name = "chkOptionsPopupMessageIntelligenceMissions";
            this.chkOptionsPopupMessageIntelligenceMissions.Size = new System.Drawing.Size(143, 17);
            this.chkOptionsPopupMessageIntelligenceMissions.TabIndex = 15;
            this.chkOptionsPopupMessageIntelligenceMissions.Text = "Intelligence Missions";
            this.chkOptionsPopupMessageIntelligenceMissions.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageResearchBreakthrough.AutoSize = true;
            this.chkOptionsPopupMessageResearchBreakthrough.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageResearchBreakthrough.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageResearchBreakthrough.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageResearchBreakthrough.Location = new System.Drawing.Point(7, 121);
            this.chkOptionsPopupMessageResearchBreakthrough.Name = "chkOptionsPopupMessageResearchBreakthrough";
            this.chkOptionsPopupMessageResearchBreakthrough.Size = new System.Drawing.Size(160, 17);
            this.chkOptionsPopupMessageResearchBreakthrough.TabIndex = 7;
            this.chkOptionsPopupMessageResearchBreakthrough.Text = "Research breakthrough";
            this.chkOptionsPopupMessageResearchBreakthrough.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageEmpireMetDestroyed.AutoSize = true;
            this.chkOptionsPopupMessageEmpireMetDestroyed.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageEmpireMetDestroyed.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageEmpireMetDestroyed.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageEmpireMetDestroyed.Location = new System.Drawing.Point(7, 104);
            this.chkOptionsPopupMessageEmpireMetDestroyed.Name = "chkOptionsPopupMessageEmpireMetDestroyed";
            this.chkOptionsPopupMessageEmpireMetDestroyed.Size = new System.Drawing.Size(127, 17);
            this.chkOptionsPopupMessageEmpireMetDestroyed.TabIndex = 8;
            this.chkOptionsPopupMessageEmpireMetDestroyed.Text = "Empire Discovery";
            this.chkOptionsPopupMessageEmpireMetDestroyed.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageColonyGainLoss.AutoSize = true;
            this.chkOptionsPopupMessageColonyGainLoss.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageColonyGainLoss.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageColonyGainLoss.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageColonyGainLoss.Location = new System.Drawing.Point(7, 87);
            this.chkOptionsPopupMessageColonyGainLoss.Name = "chkOptionsPopupMessageColonyGainLoss";
            this.chkOptionsPopupMessageColonyGainLoss.Size = new System.Drawing.Size(141, 17);
            this.chkOptionsPopupMessageColonyGainLoss.TabIndex = 13;
            this.chkOptionsPopupMessageColonyGainLoss.Text = "Colony Gain or Loss";
            this.chkOptionsPopupMessageColonyGainLoss.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.AutoSize = true;
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.Location = new System.Drawing.Point(7, 70);
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.Name = "chkOptionsPopupMessageDiplomacyWarTradeSanctions";
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.Size = new System.Drawing.Size(157, 17);
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.TabIndex = 10;
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.Text = "War && Trade Sanctions";
            this.chkOptionsPopupMessageDiplomacyWarTradeSanctions.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageDiplomacyTreaties.AutoSize = true;
            this.chkOptionsPopupMessageDiplomacyTreaties.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageDiplomacyTreaties.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageDiplomacyTreaties.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageDiplomacyTreaties.Location = new System.Drawing.Point(7, 53);
            this.chkOptionsPopupMessageDiplomacyTreaties.Name = "chkOptionsPopupMessageDiplomacyTreaties";
            this.chkOptionsPopupMessageDiplomacyTreaties.Size = new System.Drawing.Size(100, 17);
            this.chkOptionsPopupMessageDiplomacyTreaties.TabIndex = 11;
            this.chkOptionsPopupMessageDiplomacyTreaties.Text = "Treaty offers";
            this.chkOptionsPopupMessageDiplomacyTreaties.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageRequestWarning.AutoSize = true;
            this.chkOptionsPopupMessageRequestWarning.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageRequestWarning.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageRequestWarning.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageRequestWarning.Location = new System.Drawing.Point(7, 36);
            this.chkOptionsPopupMessageRequestWarning.Name = "chkOptionsPopupMessageRequestWarning";
            this.chkOptionsPopupMessageRequestWarning.Size = new System.Drawing.Size(181, 17);
            this.chkOptionsPopupMessageRequestWarning.TabIndex = 14;
            this.chkOptionsPopupMessageRequestWarning.Text = "Requests, Warnings && Gifts";
            this.chkOptionsPopupMessageRequestWarning.UseVisualStyleBackColor = false;
            this.chkOptionsPopupMessageShipBuilt.AutoSize = true;
            this.chkOptionsPopupMessageShipBuilt.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsPopupMessageShipBuilt.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsPopupMessageShipBuilt.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsPopupMessageShipBuilt.Location = new System.Drawing.Point(7, 19);
            this.chkOptionsPopupMessageShipBuilt.Name = "chkOptionsPopupMessageShipBuilt";
            this.chkOptionsPopupMessageShipBuilt.Size = new System.Drawing.Size(108, 17);
            this.chkOptionsPopupMessageShipBuilt.TabIndex = 5;
            this.chkOptionsPopupMessageShipBuilt.Text = "New Ship Built";
            this.chkOptionsPopupMessageShipBuilt.UseVisualStyleBackColor = false;
            this.grpOptionsScrollingMessages.BackColor = System.Drawing.Color.Transparent;
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageConstructionResourceShortage);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageUnderAttackCivilianBases);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageUnderAttackMilitaryShips);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageUnderAttackExplorationShips);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageUnderAttackOtherStateBases);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageShipNeedsRefuelling);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageShipMissionComplete);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageExploration);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageIntelligenceMissions);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageResearchBreakthrough);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageEmpireMetDestroyed);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageColonyGainLoss);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageUnderAttackCivilianShips);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageWarTradeSanctions);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageDiplomacyTreaties);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageRequestWarning);
            this.grpOptionsScrollingMessages.Controls.Add(this.chkOptionsScrollingMessageNewShipBuilt);
            this.grpOptionsScrollingMessages.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpOptionsScrollingMessages.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpOptionsScrollingMessages.Location = new System.Drawing.Point(12, 14);
            this.grpOptionsScrollingMessages.Name = "grpOptionsScrollingMessages";
            this.grpOptionsScrollingMessages.Size = new System.Drawing.Size(295, 349);
            this.grpOptionsScrollingMessages.TabIndex = 19;
            this.grpOptionsScrollingMessages.TabStop = false;
            this.grpOptionsScrollingMessages.Text = "Scrolling Messages";
            this.chkOptionsScrollingMessageConstructionResourceShortage.AutoSize = true;
            this.chkOptionsScrollingMessageConstructionResourceShortage.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageConstructionResourceShortage.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageConstructionResourceShortage.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageConstructionResourceShortage.Location = new System.Drawing.Point(7, 325);
            this.chkOptionsScrollingMessageConstructionResourceShortage.Name = "chkOptionsScrollingMessageConstructionResourceShortage";
            this.chkOptionsScrollingMessageConstructionResourceShortage.Size = new System.Drawing.Size(211, 17);
            this.chkOptionsScrollingMessageConstructionResourceShortage.TabIndex = 33;
            this.chkOptionsScrollingMessageConstructionResourceShortage.Text = "Construction Resource Shortage";
            this.chkOptionsScrollingMessageConstructionResourceShortage.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.AutoSize = true;
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.Location = new System.Drawing.Point(7, 223);
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.Name = "chkOptionsScrollingMessageUnderAttackCivilianBases";
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.Size = new System.Drawing.Size(193, 17);
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.TabIndex = 24;
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.Text = "Under Attack - Civilian Bases";
            this.chkOptionsScrollingMessageUnderAttackCivilianBases.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.AutoSize = true;
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.Location = new System.Drawing.Point(7, 274);
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.Name = "chkOptionsScrollingMessageUnderAttackMilitaryShips";
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.Size = new System.Drawing.Size(189, 17);
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.TabIndex = 23;
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.Text = "Under Attack - Military Ships";
            this.chkOptionsScrollingMessageUnderAttackMilitaryShips.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.AutoSize = true;
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.Location = new System.Drawing.Point(7, 240);
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.Name = "chkOptionsScrollingMessageUnderAttackExplorationShips";
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.Size = new System.Drawing.Size(212, 17);
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.TabIndex = 22;
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.Text = "Under Attack - Exploration Ships";
            this.chkOptionsScrollingMessageUnderAttackExplorationShips.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.AutoSize = true;
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.Location = new System.Drawing.Point(7, 291);
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.Name = "chkOptionsScrollingMessageUnderAttackOtherStateBases";
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.Size = new System.Drawing.Size(284, 17);
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.TabIndex = 21;
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.Text = "Under Attack - Research, Monitoring, Resorts";
            this.chkOptionsScrollingMessageUnderAttackOtherStateBases.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.AutoSize = true;
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Location = new System.Drawing.Point(7, 257);
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Name = "chkOptionsScrollingMessageUnderAttackColonyConstructionShips";
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Size = new System.Drawing.Size(276, 17);
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.TabIndex = 20;
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Text = "Under Attack - Colony && Construction Ships";
            this.chkOptionsScrollingMessageUnderAttackColonyConstructionShips.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.AutoSize = true;
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Location = new System.Drawing.Point(7, 308);
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Name = "chkOptionsScrollingMessageUnderAttackColoniesSpaceports";
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Size = new System.Drawing.Size(242, 17);
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.TabIndex = 19;
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Text = "Under Attack - Colonies && Spaceports";
            this.chkOptionsScrollingMessageUnderAttackColoniesSpaceports.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageShipNeedsRefuelling.AutoSize = true;
            this.chkOptionsScrollingMessageShipNeedsRefuelling.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageShipNeedsRefuelling.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageShipNeedsRefuelling.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageShipNeedsRefuelling.Location = new System.Drawing.Point(7, 189);
            this.chkOptionsScrollingMessageShipNeedsRefuelling.Name = "chkOptionsScrollingMessageShipNeedsRefuelling";
            this.chkOptionsScrollingMessageShipNeedsRefuelling.Size = new System.Drawing.Size(207, 17);
            this.chkOptionsScrollingMessageShipNeedsRefuelling.TabIndex = 18;
            this.chkOptionsScrollingMessageShipNeedsRefuelling.Text = "Ship Needs Refuelling or Repair";
            this.chkOptionsScrollingMessageShipNeedsRefuelling.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageShipMissionComplete.AutoSize = true;
            this.chkOptionsScrollingMessageShipMissionComplete.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageShipMissionComplete.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageShipMissionComplete.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageShipMissionComplete.Location = new System.Drawing.Point(7, 172);
            this.chkOptionsScrollingMessageShipMissionComplete.Name = "chkOptionsScrollingMessageShipMissionComplete";
            this.chkOptionsScrollingMessageShipMissionComplete.Size = new System.Drawing.Size(155, 17);
            this.chkOptionsScrollingMessageShipMissionComplete.TabIndex = 17;
            this.chkOptionsScrollingMessageShipMissionComplete.Text = "Ship Mission Complete";
            this.chkOptionsScrollingMessageShipMissionComplete.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageExploration.AutoSize = true;
            this.chkOptionsScrollingMessageExploration.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageExploration.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageExploration.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageExploration.Location = new System.Drawing.Point(7, 155);
            this.chkOptionsScrollingMessageExploration.Name = "chkOptionsScrollingMessageExploration";
            this.chkOptionsScrollingMessageExploration.Size = new System.Drawing.Size(158, 17);
            this.chkOptionsScrollingMessageExploration.TabIndex = 16;
            this.chkOptionsScrollingMessageExploration.Text = "Exploration discoveries";
            this.chkOptionsScrollingMessageExploration.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageIntelligenceMissions.AutoSize = true;
            this.chkOptionsScrollingMessageIntelligenceMissions.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageIntelligenceMissions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageIntelligenceMissions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageIntelligenceMissions.Location = new System.Drawing.Point(7, 138);
            this.chkOptionsScrollingMessageIntelligenceMissions.Name = "chkOptionsScrollingMessageIntelligenceMissions";
            this.chkOptionsScrollingMessageIntelligenceMissions.Size = new System.Drawing.Size(143, 17);
            this.chkOptionsScrollingMessageIntelligenceMissions.TabIndex = 15;
            this.chkOptionsScrollingMessageIntelligenceMissions.Text = "Intelligence Missions";
            this.chkOptionsScrollingMessageIntelligenceMissions.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageResearchBreakthrough.AutoSize = true;
            this.chkOptionsScrollingMessageResearchBreakthrough.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageResearchBreakthrough.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageResearchBreakthrough.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageResearchBreakthrough.Location = new System.Drawing.Point(7, 121);
            this.chkOptionsScrollingMessageResearchBreakthrough.Name = "chkOptionsScrollingMessageResearchBreakthrough";
            this.chkOptionsScrollingMessageResearchBreakthrough.Size = new System.Drawing.Size(160, 17);
            this.chkOptionsScrollingMessageResearchBreakthrough.TabIndex = 7;
            this.chkOptionsScrollingMessageResearchBreakthrough.Text = "Research breakthrough";
            this.chkOptionsScrollingMessageResearchBreakthrough.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageEmpireMetDestroyed.AutoSize = true;
            this.chkOptionsScrollingMessageEmpireMetDestroyed.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageEmpireMetDestroyed.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageEmpireMetDestroyed.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageEmpireMetDestroyed.Location = new System.Drawing.Point(7, 104);
            this.chkOptionsScrollingMessageEmpireMetDestroyed.Name = "chkOptionsScrollingMessageEmpireMetDestroyed";
            this.chkOptionsScrollingMessageEmpireMetDestroyed.Size = new System.Drawing.Size(127, 17);
            this.chkOptionsScrollingMessageEmpireMetDestroyed.TabIndex = 8;
            this.chkOptionsScrollingMessageEmpireMetDestroyed.Text = "Empire Discovery";
            this.chkOptionsScrollingMessageEmpireMetDestroyed.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageColonyGainLoss.AutoSize = true;
            this.chkOptionsScrollingMessageColonyGainLoss.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageColonyGainLoss.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageColonyGainLoss.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageColonyGainLoss.Location = new System.Drawing.Point(7, 87);
            this.chkOptionsScrollingMessageColonyGainLoss.Name = "chkOptionsScrollingMessageColonyGainLoss";
            this.chkOptionsScrollingMessageColonyGainLoss.Size = new System.Drawing.Size(141, 17);
            this.chkOptionsScrollingMessageColonyGainLoss.TabIndex = 13;
            this.chkOptionsScrollingMessageColonyGainLoss.Text = "Colony Gain or Loss";
            this.chkOptionsScrollingMessageColonyGainLoss.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.AutoSize = true;
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.Location = new System.Drawing.Point(7, 206);
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.Name = "chkOptionsScrollingMessageUnderAttackCivilianShips";
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.Size = new System.Drawing.Size(190, 17);
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.TabIndex = 9;
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.Text = "Under Attack - Civilian Ships";
            this.chkOptionsScrollingMessageUnderAttackCivilianShips.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageWarTradeSanctions.AutoSize = true;
            this.chkOptionsScrollingMessageWarTradeSanctions.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageWarTradeSanctions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageWarTradeSanctions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageWarTradeSanctions.Location = new System.Drawing.Point(7, 70);
            this.chkOptionsScrollingMessageWarTradeSanctions.Name = "chkOptionsScrollingMessageWarTradeSanctions";
            this.chkOptionsScrollingMessageWarTradeSanctions.Size = new System.Drawing.Size(157, 17);
            this.chkOptionsScrollingMessageWarTradeSanctions.TabIndex = 10;
            this.chkOptionsScrollingMessageWarTradeSanctions.Text = "War && Trade Sanctions";
            this.chkOptionsScrollingMessageWarTradeSanctions.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageDiplomacyTreaties.AutoSize = true;
            this.chkOptionsScrollingMessageDiplomacyTreaties.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageDiplomacyTreaties.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageDiplomacyTreaties.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageDiplomacyTreaties.Location = new System.Drawing.Point(7, 53);
            this.chkOptionsScrollingMessageDiplomacyTreaties.Name = "chkOptionsScrollingMessageDiplomacyTreaties";
            this.chkOptionsScrollingMessageDiplomacyTreaties.Size = new System.Drawing.Size(100, 17);
            this.chkOptionsScrollingMessageDiplomacyTreaties.TabIndex = 11;
            this.chkOptionsScrollingMessageDiplomacyTreaties.Text = "Treaty offers";
            this.chkOptionsScrollingMessageDiplomacyTreaties.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageRequestWarning.AutoSize = true;
            this.chkOptionsScrollingMessageRequestWarning.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageRequestWarning.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageRequestWarning.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageRequestWarning.Location = new System.Drawing.Point(7, 36);
            this.chkOptionsScrollingMessageRequestWarning.Name = "chkOptionsScrollingMessageRequestWarning";
            this.chkOptionsScrollingMessageRequestWarning.Size = new System.Drawing.Size(181, 17);
            this.chkOptionsScrollingMessageRequestWarning.TabIndex = 14;
            this.chkOptionsScrollingMessageRequestWarning.Text = "Requests, Warnings && Gifts";
            this.chkOptionsScrollingMessageRequestWarning.UseVisualStyleBackColor = false;
            this.chkOptionsScrollingMessageNewShipBuilt.AutoSize = true;
            this.chkOptionsScrollingMessageNewShipBuilt.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsScrollingMessageNewShipBuilt.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsScrollingMessageNewShipBuilt.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsScrollingMessageNewShipBuilt.Location = new System.Drawing.Point(7, 19);
            this.chkOptionsScrollingMessageNewShipBuilt.Name = "chkOptionsScrollingMessageNewShipBuilt";
            this.chkOptionsScrollingMessageNewShipBuilt.Size = new System.Drawing.Size(108, 17);
            this.chkOptionsScrollingMessageNewShipBuilt.TabIndex = 5;
            this.chkOptionsScrollingMessageNewShipBuilt.Text = "New Ship Built";
            this.chkOptionsScrollingMessageNewShipBuilt.UseVisualStyleBackColor = false;
            this.pnlThemes.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlThemes.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlThemes.BackgroundImage");
            this.pnlThemes.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlThemes.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlThemes.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlThemes.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlThemes.BorderSize = 3;
            this.pnlThemes.Controls.Add(this.lblCurrentTheme);
            this.pnlThemes.Controls.Add(this.pnlThemeDetail);
            this.pnlThemes.Controls.Add(this.btnThemeSwitch);
            this.pnlThemes.Controls.Add(this.btnThemeCancel);
            this.pnlThemes.HeaderIcon = null;
            this.pnlThemes.HeaderTitle = "Change Theme";
            this.pnlThemes.Location = new System.Drawing.Point(198, 19);
            this.pnlThemes.Name = "pnlThemes";
            this.pnlThemes.Size = new System.Drawing.Size(344, 172);
            this.pnlThemes.TabIndex = 125;
            this.pnlThemes.Visible = false;
            this.pnlThemes.CloseButtonClicked += new System.EventHandler(pnlThemes_CloseButtonClicked);
            this.lblCurrentTheme.AutoSize = true;
            this.lblCurrentTheme.BackColor = System.Drawing.Color.Transparent;
            this.lblCurrentTheme.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblCurrentTheme.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblCurrentTheme.Location = new System.Drawing.Point(17, 17);
            this.lblCurrentTheme.Name = "lblCurrentTheme";
            this.lblCurrentTheme.Size = new System.Drawing.Size(105, 14);
            this.lblCurrentTheme.TabIndex = 216;
            this.lblCurrentTheme.Text = "Current Theme";
            this.pnlThemeDetail.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlThemeDetail.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlThemeDetail.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlThemeDetail.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlThemeDetail.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlThemeDetail.BorderWidth = 2;
            this.pnlThemeDetail.Controls.Add(this.lblThemeGalaxyMaps);
            this.pnlThemeDetail.Controls.Add(this.picThemeImage);
            this.pnlThemeDetail.Controls.Add(this.lblThemeDescription);
            this.pnlThemeDetail.Controls.Add(this.lblThemeTitle);
            this.pnlThemeDetail.Curvature = 20;
            this.pnlThemeDetail.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlThemeDetail.Location = new System.Drawing.Point(99, 16);
            this.pnlThemeDetail.Margin = new System.Windows.Forms.Padding(0);
            this.pnlThemeDetail.Name = "pnlThemeDetail";
            this.pnlThemeDetail.Size = new System.Drawing.Size(235, 87);
            this.pnlThemeDetail.TabIndex = 29;
            this.lblThemeGalaxyMaps.AutoSize = true;
            this.lblThemeGalaxyMaps.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblThemeGalaxyMaps.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblThemeGalaxyMaps.Location = new System.Drawing.Point(78, 67);
            this.lblThemeGalaxyMaps.Name = "lblThemeGalaxyMaps";
            this.lblThemeGalaxyMaps.Size = new System.Drawing.Size(80, 13);
            this.lblThemeGalaxyMaps.TabIndex = 4;
            this.lblThemeGalaxyMaps.Text = "Galaxy Maps";
            this.picThemeImage.Location = new System.Drawing.Point(118, 12);
            this.picThemeImage.Name = "picThemeImage";
            this.picThemeImage.Size = new System.Drawing.Size(100, 50);
            this.picThemeImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
            this.picThemeImage.TabIndex = 3;
            this.picThemeImage.TabStop = false;
            this.lblThemeDescription.AutoSize = true;
            this.lblThemeDescription.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblThemeDescription.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblThemeDescription.Location = new System.Drawing.Point(24, 47);
            this.lblThemeDescription.Name = "lblThemeDescription";
            this.lblThemeDescription.Size = new System.Drawing.Size(40, 13);
            this.lblThemeDescription.TabIndex = 2;
            this.lblThemeDescription.Text = "Detail";
            this.lblThemeTitle.AutoSize = true;
            this.lblThemeTitle.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblThemeTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblThemeTitle.Location = new System.Drawing.Point(24, 18);
            this.lblThemeTitle.Name = "lblThemeTitle";
            this.lblThemeTitle.Size = new System.Drawing.Size(36, 14);
            this.lblThemeTitle.TabIndex = 1;
            this.lblThemeTitle.Text = "Title";
            this.btnThemeSwitch.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnThemeSwitch.ClipBackground = false;
            this.btnThemeSwitch.DelayFrameRefresh = false;
            this.btnThemeSwitch.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnThemeSwitch.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnThemeSwitch.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnThemeSwitch.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnThemeSwitch.IntensifyColors = false;
            this.btnThemeSwitch.Location = new System.Drawing.Point(196, 126);
            this.btnThemeSwitch.Name = "btnThemeSwitch";
            this.btnThemeSwitch.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnThemeSwitch.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnThemeSwitch.Size = new System.Drawing.Size(138, 30);
            this.btnThemeSwitch.TabIndex = 214;
            this.btnThemeSwitch.TabStop = false;
            this.btnThemeSwitch.Text = "Switch Theme";
            this.btnThemeSwitch.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnThemeSwitch.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnThemeSwitch.ToggledOn = false;
            this.btnThemeSwitch.Click += new System.EventHandler(btnThemeSwitch_Click);
            this.btnThemeCancel.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnThemeCancel.ClipBackground = false;
            this.btnThemeCancel.DelayFrameRefresh = false;
            this.btnThemeCancel.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnThemeCancel.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnThemeCancel.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnThemeCancel.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnThemeCancel.IntensifyColors = false;
            this.btnThemeCancel.Location = new System.Drawing.Point(99, 125);
            this.btnThemeCancel.Name = "btnThemeCancel";
            this.btnThemeCancel.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnThemeCancel.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnThemeCancel.Size = new System.Drawing.Size(95, 30);
            this.btnThemeCancel.TabIndex = 215;
            this.btnThemeCancel.TabStop = false;
            this.btnThemeCancel.Text = "Cancel";
            this.btnThemeCancel.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnThemeCancel.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnThemeCancel.ToggledOn = false;
            this.btnThemeCancel.Click += new System.EventHandler(btnThemeCancel_Click);
            this.pnlNewGame.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlNewGame.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlNewGame.BackgroundImage");
            this.pnlNewGame.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlNewGame.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlNewGame.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlNewGame.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlNewGame.BorderSize = 3;
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameYourEmpireType);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameJumpStart);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameYourRace);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameYourEmpire);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameTheGalaxy);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameColonizationTerritory);
            this.pnlNewGame.Controls.Add(this.lblHelpTitle);
            this.pnlNewGame.Controls.Add(this.lblHelpDescription);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameOtherEmpires);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameVictoryConditions);
            this.pnlNewGame.Controls.Add(this.pnlStartNewGameGalaxyMaps);
            this.pnlNewGame.HeaderIcon = null;
            this.pnlNewGame.HeaderTitle = "Start a New Game";
            this.pnlNewGame.Location = new System.Drawing.Point(269, 18);
            this.pnlNewGame.Name = "pnlNewGame";
            this.pnlNewGame.Size = new System.Drawing.Size(967, 717);
            this.pnlNewGame.TabIndex = 75;
            this.pnlNewGame.Visible = false;
            this.pnlNewGame.CloseButtonClicked += new System.EventHandler(pnlNewGame_CloseButtonClicked);
            this.pnlStartNewGameYourEmpireType.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.pnlStartNewGameIntroductoryBorder);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.lblStartNewGameActiveTheme);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.picStartNewGameYourEmpireTypeTimeline);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypeLegends);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypeQuickStarts);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypeClassicEra);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypeTheAncientGalaxy);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypeNormalClassic);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypePirateClassic);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypePirateShadows);
            this.pnlStartNewGameYourEmpireType.Controls.Add(this.btnStartNewGameYourEmpireTypeNormalShadows);
            this.pnlStartNewGameYourEmpireType.Location = new System.Drawing.Point(20, 100);
            this.pnlStartNewGameYourEmpireType.Name = "pnlStartNewGameYourEmpireType";
            this.pnlStartNewGameYourEmpireType.Size = new System.Drawing.Size(900, 600);
            this.pnlStartNewGameYourEmpireType.TabIndex = 50;
            this.pnlStartNewGameIntroductoryBorder.Controls.Add(this.btnStartNewGameIntroductory);
            this.pnlStartNewGameIntroductoryBorder.ForeColor = System.Drawing.Color.Green;
            this.pnlStartNewGameIntroductoryBorder.Location = new System.Drawing.Point(32, 414);
            this.pnlStartNewGameIntroductoryBorder.Name = "pnlStartNewGameIntroductoryBorder";
            this.pnlStartNewGameIntroductoryBorder.Size = new System.Drawing.Size(320, 90);
            this.pnlStartNewGameIntroductoryBorder.TabIndex = 279;
            this.btnStartNewGameIntroductory.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameIntroductory.ClipBackground = false;
            this.btnStartNewGameIntroductory.DelayFrameRefresh = false;
            this.btnStartNewGameIntroductory.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameIntroductory.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameIntroductory.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameIntroductory.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameIntroductory.IntensifyColors = false;
            this.btnStartNewGameIntroductory.Location = new System.Drawing.Point(10, 8);
            this.btnStartNewGameIntroductory.Name = "btnStartNewGameIntroductory";
            this.btnStartNewGameIntroductory.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameIntroductory.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameIntroductory.Size = new System.Drawing.Size(300, 70);
            this.btnStartNewGameIntroductory.TabIndex = 278;
            this.btnStartNewGameIntroductory.TabStop = false;
            this.btnStartNewGameIntroductory.Text = "Introductory Game >>";
            this.btnStartNewGameIntroductory.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameIntroductory.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameIntroductory.ToggledOn = false;
            this.btnStartNewGameIntroductory.Click += new System.EventHandler(btnStartNewGameIntroductory_Click);
            this.lblStartNewGameActiveTheme.AutoSize = true;
            this.lblStartNewGameActiveTheme.BackColor = System.Drawing.Color.Transparent;
            this.lblStartNewGameActiveTheme.ForeColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lblStartNewGameActiveTheme.Location = new System.Drawing.Point(408, 553);
            this.lblStartNewGameActiveTheme.Name = "lblStartNewGameActiveTheme";
            this.lblStartNewGameActiveTheme.Size = new System.Drawing.Size(73, 13);
            this.lblStartNewGameActiveTheme.TabIndex = 277;
            this.lblStartNewGameActiveTheme.Text = "Active Theme";
            this.picStartNewGameYourEmpireTypeTimeline.Image = (System.Drawing.Image)resources.GetObject("picStartNewGameYourEmpireTypeTimeline.Image");
            this.picStartNewGameYourEmpireTypeTimeline.Location = new System.Drawing.Point(10, 260);
            this.picStartNewGameYourEmpireTypeTimeline.Name = "picStartNewGameYourEmpireTypeTimeline";
            this.picStartNewGameYourEmpireTypeTimeline.Size = new System.Drawing.Size(880, 150);
            this.picStartNewGameYourEmpireTypeTimeline.TabIndex = 276;
            this.picStartNewGameYourEmpireTypeTimeline.TabStop = false;
            this.btnStartNewGameYourEmpireTypeLegends.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypeLegends.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypeLegends.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypeLegends.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypeLegends.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypeLegends.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypeLegends.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypeLegends.Image");
            this.btnStartNewGameYourEmpireTypeLegends.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypeLegends.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypeLegends.Location = new System.Drawing.Point(750, 10);
            this.btnStartNewGameYourEmpireTypeLegends.Name = "btnStartNewGameYourEmpireTypeLegends";
            this.btnStartNewGameYourEmpireTypeLegends.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypeLegends.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypeLegends.Size = new System.Drawing.Size(140, 250);
            this.btnStartNewGameYourEmpireTypeLegends.TabIndex = 275;
            this.btnStartNewGameYourEmpireTypeLegends.TabStop = false;
            this.btnStartNewGameYourEmpireTypeLegends.Text = "Legends >>";
            this.btnStartNewGameYourEmpireTypeLegends.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypeLegends.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypeLegends.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypeLegends.Click += new System.EventHandler(btnStartNewGameYourEmpireTypeLegends_Click);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Image");
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Location = new System.Drawing.Point(602, 10);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Name = "btnStartNewGameYourEmpireTypeReturnOfTheShakturi";
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Size = new System.Drawing.Size(140, 250);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.TabIndex = 274;
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.TabStop = false;
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Text = "Return of the Shakturi >>";
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Click += new System.EventHandler(btnStartNewGameYourEmpireTypeReturnOfTheShakturi_Click);
            this.btnStartNewGameYourEmpireTypeQuickStarts.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypeQuickStarts.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypeQuickStarts.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypeQuickStarts.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypeQuickStarts.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypeQuickStarts.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypeQuickStarts.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypeQuickStarts.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypeQuickStarts.Location = new System.Drawing.Point(364, 430);
            this.btnStartNewGameYourEmpireTypeQuickStarts.Name = "btnStartNewGameYourEmpireTypeQuickStarts";
            this.btnStartNewGameYourEmpireTypeQuickStarts.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypeQuickStarts.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypeQuickStarts.Size = new System.Drawing.Size(174, 30);
            this.btnStartNewGameYourEmpireTypeQuickStarts.TabIndex = 273;
            this.btnStartNewGameYourEmpireTypeQuickStarts.TabStop = false;
            this.btnStartNewGameYourEmpireTypeQuickStarts.Text = "Quick Starts >>";
            this.btnStartNewGameYourEmpireTypeQuickStarts.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypeQuickStarts.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypeQuickStarts.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypeClassicEra.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypeClassicEra.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypeClassicEra.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypeClassicEra.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypeClassicEra.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypeClassicEra.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypeClassicEra.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypeClassicEra.Image");
            this.btnStartNewGameYourEmpireTypeClassicEra.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypeClassicEra.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypeClassicEra.Location = new System.Drawing.Point(454, 10);
            this.btnStartNewGameYourEmpireTypeClassicEra.Name = "btnStartNewGameYourEmpireTypeClassicEra";
            this.btnStartNewGameYourEmpireTypeClassicEra.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypeClassicEra.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypeClassicEra.Size = new System.Drawing.Size(140, 250);
            this.btnStartNewGameYourEmpireTypeClassicEra.TabIndex = 272;
            this.btnStartNewGameYourEmpireTypeClassicEra.TabStop = false;
            this.btnStartNewGameYourEmpireTypeClassicEra.Text = "Classic Era >>";
            this.btnStartNewGameYourEmpireTypeClassicEra.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypeClassicEra.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypeClassicEra.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypeClassicEra.Click += new System.EventHandler(btnStartNewGameYourEmpireTypeClassicEra_Click);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypeTheAncientGalaxy.Image");
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.Location = new System.Drawing.Point(10, 10);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.Name = "btnStartNewGameYourEmpireTypeTheAncientGalaxy";
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.Size = new System.Drawing.Size(140, 250);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.TabIndex = 271;
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.TabStop = false;
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.Text = "The Ancient Galaxy >>";
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypeTheAncientGalaxy.Click += new System.EventHandler(btnStartNewGameYourEmpireTypeTheAncientGalaxy_Click);
            this.btnStartNewGameYourEmpireTypeNormalClassic.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypeNormalClassic.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypeNormalClassic.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypeNormalClassic.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypeNormalClassic.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypeNormalClassic.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypeNormalClassic.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypeNormalClassic.Image");
            this.btnStartNewGameYourEmpireTypeNormalClassic.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypeNormalClassic.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypeNormalClassic.Location = new System.Drawing.Point(74, 500);
            this.btnStartNewGameYourEmpireTypeNormalClassic.Name = "btnStartNewGameYourEmpireTypeNormalClassic";
            this.btnStartNewGameYourEmpireTypeNormalClassic.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypeNormalClassic.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypeNormalClassic.Size = new System.Drawing.Size(300, 70);
            this.btnStartNewGameYourEmpireTypeNormalClassic.TabIndex = 264;
            this.btnStartNewGameYourEmpireTypeNormalClassic.TabStop = false;
            this.btnStartNewGameYourEmpireTypeNormalClassic.Text = "Play a Custom Game as a Standard Empire >>";
            this.btnStartNewGameYourEmpireTypeNormalClassic.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypeNormalClassic.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypeNormalClassic.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypeNormalClassic.Click += new System.EventHandler(btnStartNewGameYourEmpireTypeNormalClassic_Click);
            this.btnStartNewGameYourEmpireTypePirateClassic.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypePirateClassic.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypePirateClassic.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypePirateClassic.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypePirateClassic.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypePirateClassic.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypePirateClassic.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypePirateClassic.Image");
            this.btnStartNewGameYourEmpireTypePirateClassic.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypePirateClassic.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypePirateClassic.Location = new System.Drawing.Point(520, 500);
            this.btnStartNewGameYourEmpireTypePirateClassic.Name = "btnStartNewGameYourEmpireTypePirateClassic";
            this.btnStartNewGameYourEmpireTypePirateClassic.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypePirateClassic.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypePirateClassic.Size = new System.Drawing.Size(300, 70);
            this.btnStartNewGameYourEmpireTypePirateClassic.TabIndex = 263;
            this.btnStartNewGameYourEmpireTypePirateClassic.TabStop = false;
            this.btnStartNewGameYourEmpireTypePirateClassic.Text = "Play a Custom Game as a Pirate Faction >>";
            this.btnStartNewGameYourEmpireTypePirateClassic.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypePirateClassic.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypePirateClassic.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypePirateClassic.Click += new System.EventHandler(nVkoJxpyvO);
            this.btnStartNewGameYourEmpireTypePirateShadows.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypePirateShadows.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypePirateShadows.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypePirateShadows.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypePirateShadows.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypePirateShadows.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypePirateShadows.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypePirateShadows.Image");
            this.btnStartNewGameYourEmpireTypePirateShadows.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypePirateShadows.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypePirateShadows.Location = new System.Drawing.Point(158, 10);
            this.btnStartNewGameYourEmpireTypePirateShadows.Name = "btnStartNewGameYourEmpireTypePirateShadows";
            this.btnStartNewGameYourEmpireTypePirateShadows.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypePirateShadows.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypePirateShadows.Size = new System.Drawing.Size(140, 250);
            this.btnStartNewGameYourEmpireTypePirateShadows.TabIndex = 262;
            this.btnStartNewGameYourEmpireTypePirateShadows.TabStop = false;
            this.btnStartNewGameYourEmpireTypePirateShadows.Text = "Pirate Faction in the Age of Shadows >>";
            this.btnStartNewGameYourEmpireTypePirateShadows.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypePirateShadows.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypePirateShadows.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypePirateShadows.Click += new System.EventHandler(btnStartNewGameYourEmpireTypePirateShadows_Click);
            this.btnStartNewGameYourEmpireTypeNormalShadows.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireTypeNormalShadows.ClipBackground = false;
            this.btnStartNewGameYourEmpireTypeNormalShadows.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireTypeNormalShadows.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireTypeNormalShadows.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireTypeNormalShadows.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireTypeNormalShadows.Image = (System.Drawing.Image)resources.GetObject("btnStartNewGameYourEmpireTypeNormalShadows.Image");
            this.btnStartNewGameYourEmpireTypeNormalShadows.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireTypeNormalShadows.IntensifyColors = false;
            this.btnStartNewGameYourEmpireTypeNormalShadows.Location = new System.Drawing.Point(306, 10);
            this.btnStartNewGameYourEmpireTypeNormalShadows.Name = "btnStartNewGameYourEmpireTypeNormalShadows";
            this.btnStartNewGameYourEmpireTypeNormalShadows.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireTypeNormalShadows.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireTypeNormalShadows.Size = new System.Drawing.Size(140, 250);
            this.btnStartNewGameYourEmpireTypeNormalShadows.TabIndex = 240;
            this.btnStartNewGameYourEmpireTypeNormalShadows.TabStop = false;
            this.btnStartNewGameYourEmpireTypeNormalShadows.Text = "Standard Empire in the Age of Shadows >>";
            this.btnStartNewGameYourEmpireTypeNormalShadows.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireTypeNormalShadows.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireTypeNormalShadows.ToggledOn = false;
            this.btnStartNewGameYourEmpireTypeNormalShadows.Click += new System.EventHandler(btnStartNewGameYourEmpireTypeNormalShadows_Click);
            this.pnlStartNewGameJumpStart.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameJumpStart.Controls.Add(this.pnlJumpStartPiratePlaystyleDescriptionContainer);
            this.pnlStartNewGameJumpStart.Controls.Add(this.picJumpStartYourEmpirePiratePlaystyle);
            this.pnlStartNewGameJumpStart.Controls.Add(this.lblJumpStartVictoryPiratePlaystyle);
            this.pnlStartNewGameJumpStart.Controls.Add(this.cmbJumpStartVictoryPiratePlayStyle);
            this.pnlStartNewGameJumpStart.Controls.Add(this.chkJumpStartTheGalaxyDifficultyScaling);
            this.pnlStartNewGameJumpStart.Controls.Add(this.pnlJumpStartYourEmpireGovernment);
            this.pnlStartNewGameJumpStart.Controls.Add(this.pnlJumpStartYourEmpireRace);
            this.pnlStartNewGameJumpStart.Controls.Add(this.btnJumpStartTheGalaxyNext);
            this.pnlStartNewGameJumpStart.Controls.Add(this.btnJumpStartTheGalaxyPrevious);
            this.pnlStartNewGameJumpStart.Controls.Add(this.tbarJumpStartTheGalaxyDifficulty);
            this.pnlStartNewGameJumpStart.Controls.Add(this.pnlJumpStartGalaxyShapeSize);
            this.pnlStartNewGameJumpStart.Location = new System.Drawing.Point(403, 18);
            this.pnlStartNewGameJumpStart.Name = "pnlStartNewGameJumpStart";
            this.pnlStartNewGameJumpStart.Size = new System.Drawing.Size(530, 690);
            this.pnlStartNewGameJumpStart.TabIndex = 133;
            this.pnlStartNewGameJumpStart.Visible = false;
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.AutoScroll = true;
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.Controls.Add(this.lblJumpStartPiratePlaystyleDescription);
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.Location = new System.Drawing.Point(375, 600);
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.Name = "pnlJumpStartPiratePlaystyleDescriptionContainer";
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.Size = new System.Drawing.Size(100, 60);
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.TabIndex = 279;
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.Visible = false;
            this.lblJumpStartPiratePlaystyleDescription.AutoSize = true;
            this.lblJumpStartPiratePlaystyleDescription.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartPiratePlaystyleDescription.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartPiratePlaystyleDescription.Location = new System.Drawing.Point(9, 24);
            this.lblJumpStartPiratePlaystyleDescription.Name = "lblJumpStartPiratePlaystyleDescription";
            this.lblJumpStartPiratePlaystyleDescription.Size = new System.Drawing.Size(163, 13);
            this.lblJumpStartPiratePlaystyleDescription.TabIndex = 277;
            this.lblJumpStartPiratePlaystyleDescription.Text = "Pirate Playstyle Description";
            this.picJumpStartYourEmpirePiratePlaystyle.Location = new System.Drawing.Point(393, 579);
            this.picJumpStartYourEmpirePiratePlaystyle.Name = "picJumpStartYourEmpirePiratePlaystyle";
            this.picJumpStartYourEmpirePiratePlaystyle.Size = new System.Drawing.Size(100, 50);
            this.picJumpStartYourEmpirePiratePlaystyle.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.picJumpStartYourEmpirePiratePlaystyle.TabIndex = 278;
            this.picJumpStartYourEmpirePiratePlaystyle.TabStop = false;
            this.lblJumpStartVictoryPiratePlaystyle.AutoSize = true;
            this.lblJumpStartVictoryPiratePlaystyle.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartVictoryPiratePlaystyle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartVictoryPiratePlaystyle.Location = new System.Drawing.Point(397, 521);
            this.lblJumpStartVictoryPiratePlaystyle.Name = "lblJumpStartVictoryPiratePlaystyle";
            this.lblJumpStartVictoryPiratePlaystyle.Size = new System.Drawing.Size(95, 13);
            this.lblJumpStartVictoryPiratePlaystyle.TabIndex = 276;
            this.lblJumpStartVictoryPiratePlaystyle.Text = "Pirate Playstyle";
            this.cmbJumpStartVictoryPiratePlayStyle.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbJumpStartVictoryPiratePlayStyle.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbJumpStartVictoryPiratePlayStyle.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbJumpStartVictoryPiratePlayStyle.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbJumpStartVictoryPiratePlayStyle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbJumpStartVictoryPiratePlayStyle.FormattingEnabled = true;
            this.cmbJumpStartVictoryPiratePlayStyle.Location = new System.Drawing.Point(387, 487);
            this.cmbJumpStartVictoryPiratePlayStyle.Name = "cmbJumpStartVictoryPiratePlayStyle";
            this.cmbJumpStartVictoryPiratePlayStyle.Size = new System.Drawing.Size(95, 21);
            this.cmbJumpStartVictoryPiratePlayStyle.TabIndex = 275;
            this.cmbJumpStartVictoryPiratePlayStyle.SelectedIndexChanged += new System.EventHandler(cmbJumpStartVictoryPiratePlayStyle_SelectedIndexChanged);
            this.cmbJumpStartVictoryPiratePlayStyle.Enter += new System.EventHandler(cmbJumpStartVictoryPiratePlayStyle_Enter);
            this.chkJumpStartTheGalaxyDifficultyScaling.AutoSize = true;
            this.chkJumpStartTheGalaxyDifficultyScaling.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkJumpStartTheGalaxyDifficultyScaling.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkJumpStartTheGalaxyDifficultyScaling.Location = new System.Drawing.Point(225, 146);
            this.chkJumpStartTheGalaxyDifficultyScaling.Name = "chkJumpStartTheGalaxyDifficultyScaling";
            this.chkJumpStartTheGalaxyDifficultyScaling.Size = new System.Drawing.Size(251, 17);
            this.chkJumpStartTheGalaxyDifficultyScaling.TabIndex = 260;
            this.chkJumpStartTheGalaxyDifficultyScaling.Text = "Difficulty scales as player nears victory";
            this.chkJumpStartTheGalaxyDifficultyScaling.UseVisualStyleBackColor = true;
            this.chkJumpStartTheGalaxyDifficultyScaling.Enter += new System.EventHandler(chkJumpStartTheGalaxyDifficultyScaling_Enter);
            this.pnlJumpStartYourEmpireGovernment.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlJumpStartYourEmpireGovernment.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlJumpStartYourEmpireGovernment.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlJumpStartYourEmpireGovernment.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlJumpStartYourEmpireGovernment.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlJumpStartYourEmpireGovernment.BorderWidth = 2;
            this.pnlJumpStartYourEmpireGovernment.Controls.Add(this.cmbJumpStartYourEmpireGovernment);
            this.pnlJumpStartYourEmpireGovernment.Controls.Add(this.lblJumpStartYourEmpireGovernmentName);
            this.pnlJumpStartYourEmpireGovernment.Controls.Add(this.lnkJumpStartYourEmpireGovernment);
            this.pnlJumpStartYourEmpireGovernment.Controls.Add(this.lblJumpStartYourEmpireGovernmentAttributes);
            this.pnlJumpStartYourEmpireGovernment.Controls.Add(this.lblJumpStartYourEmpireGovernmentTitle);
            this.pnlJumpStartYourEmpireGovernment.Curvature = 20;
            this.pnlJumpStartYourEmpireGovernment.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlJumpStartYourEmpireGovernment.Location = new System.Drawing.Point(14, 471);
            this.pnlJumpStartYourEmpireGovernment.Margin = new System.Windows.Forms.Padding(0);
            this.pnlJumpStartYourEmpireGovernment.Name = "pnlJumpStartYourEmpireGovernment";
            this.pnlJumpStartYourEmpireGovernment.Size = new System.Drawing.Size(340, 150);
            this.pnlJumpStartYourEmpireGovernment.TabIndex = 259;
            this.cmbJumpStartYourEmpireGovernment.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbJumpStartYourEmpireGovernment.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbJumpStartYourEmpireGovernment.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbJumpStartYourEmpireGovernment.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbJumpStartYourEmpireGovernment.Font = new System.Drawing.Font("Verdana", 8.25f);
            this.cmbJumpStartYourEmpireGovernment.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbJumpStartYourEmpireGovernment.FormattingEnabled = true;
            this.cmbJumpStartYourEmpireGovernment.Location = new System.Drawing.Point(17, 40);
            this.cmbJumpStartYourEmpireGovernment.Name = "cmbJumpStartYourEmpireGovernment";
            this.cmbJumpStartYourEmpireGovernment.Size = new System.Drawing.Size(121, 22);
            this.cmbJumpStartYourEmpireGovernment.TabIndex = 244;
            this.cmbJumpStartYourEmpireGovernment.SelectedIndexChanged += new System.EventHandler(cmbJumpStartYourEmpireGovernment_SelectedIndexChanged);
            this.cmbJumpStartYourEmpireGovernment.Enter += new System.EventHandler(cmbJumpStartYourEmpireGovernment_Enter);
            this.lblJumpStartYourEmpireGovernmentName.AutoSize = true;
            this.lblJumpStartYourEmpireGovernmentName.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartYourEmpireGovernmentName.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartYourEmpireGovernmentName.Location = new System.Drawing.Point(160, 38);
            this.lblJumpStartYourEmpireGovernmentName.Name = "lblJumpStartYourEmpireGovernmentName";
            this.lblJumpStartYourEmpireGovernmentName.Size = new System.Drawing.Size(130, 14);
            this.lblJumpStartYourEmpireGovernmentName.TabIndex = 216;
            this.lblJumpStartYourEmpireGovernmentName.Text = "Government Name";
            this.lnkJumpStartYourEmpireGovernment.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkJumpStartYourEmpireGovernment.AutoSize = true;
            this.lnkJumpStartYourEmpireGovernment.BackColor = System.Drawing.Color.Transparent;
            this.lnkJumpStartYourEmpireGovernment.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkJumpStartYourEmpireGovernment.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkJumpStartYourEmpireGovernment.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkJumpStartYourEmpireGovernment.Location = new System.Drawing.Point(160, 110);
            this.lnkJumpStartYourEmpireGovernment.MaximumSize = new System.Drawing.Size(200, 30);
            this.lnkJumpStartYourEmpireGovernment.Name = "lnkJumpStartYourEmpireGovernment";
            this.lnkJumpStartYourEmpireGovernment.Size = new System.Drawing.Size(134, 26);
            this.lnkJumpStartYourEmpireGovernment.TabIndex = 215;
            this.lnkJumpStartYourEmpireGovernment.TabStop = true;
            this.lnkJumpStartYourEmpireGovernment.Text = "Read more about this Government type...";
            this.lnkJumpStartYourEmpireGovernment.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkJumpStartYourEmpireGovernment_LinkClicked);
            this.lblJumpStartYourEmpireGovernmentAttributes.AutoSize = true;
            this.lblJumpStartYourEmpireGovernmentAttributes.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartYourEmpireGovernmentAttributes.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartYourEmpireGovernmentAttributes.Location = new System.Drawing.Point(160, 58);
            this.lblJumpStartYourEmpireGovernmentAttributes.Name = "lblJumpStartYourEmpireGovernmentAttributes";
            this.lblJumpStartYourEmpireGovernmentAttributes.Size = new System.Drawing.Size(137, 13);
            this.lblJumpStartYourEmpireGovernmentAttributes.TabIndex = 214;
            this.lblJumpStartYourEmpireGovernmentAttributes.Text = "Government Attributes";
            this.lblJumpStartYourEmpireGovernmentTitle.AutoSize = true;
            this.lblJumpStartYourEmpireGovernmentTitle.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartYourEmpireGovernmentTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartYourEmpireGovernmentTitle.Location = new System.Drawing.Point(10, 10);
            this.lblJumpStartYourEmpireGovernmentTitle.Name = "lblJumpStartYourEmpireGovernmentTitle";
            this.lblJumpStartYourEmpireGovernmentTitle.Size = new System.Drawing.Size(153, 18);
            this.lblJumpStartYourEmpireGovernmentTitle.TabIndex = 208;
            this.lblJumpStartYourEmpireGovernmentTitle.Text = "Your Government";
            this.pnlJumpStartYourEmpireRace.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlJumpStartYourEmpireRace.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlJumpStartYourEmpireRace.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlJumpStartYourEmpireRace.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlJumpStartYourEmpireRace.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlJumpStartYourEmpireRace.BorderWidth = 2;
            this.pnlJumpStartYourEmpireRace.Controls.Add(this.pnlJumpStartYourEmpireRaceAttributesContainer);
            this.pnlJumpStartYourEmpireRace.Controls.Add(this.lblJumpStartYourEmpireRaceName);
            this.pnlJumpStartYourEmpireRace.Controls.Add(this.lnkJumpStartYourEmpireRace);
            this.pnlJumpStartYourEmpireRace.Controls.Add(this.picJumpStartYourEmpireRace);
            this.pnlJumpStartYourEmpireRace.Controls.Add(this.cmbJumpStartYourEmpireRace);
            this.pnlJumpStartYourEmpireRace.Controls.Add(this.lblJumpStartYourEmpireRaceTitle);
            this.pnlJumpStartYourEmpireRace.Curvature = 20;
            this.pnlJumpStartYourEmpireRace.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlJumpStartYourEmpireRace.Location = new System.Drawing.Point(46, 177);
            this.pnlJumpStartYourEmpireRace.Margin = new System.Windows.Forms.Padding(0);
            this.pnlJumpStartYourEmpireRace.Name = "pnlJumpStartYourEmpireRace";
            this.pnlJumpStartYourEmpireRace.Size = new System.Drawing.Size(420, 285);
            this.pnlJumpStartYourEmpireRace.TabIndex = 258;
            this.pnlJumpStartYourEmpireRaceAttributesContainer.AutoScroll = true;
            this.pnlJumpStartYourEmpireRaceAttributesContainer.Controls.Add(this.pnlJumpStartYourEmpireRaceAttributes);
            this.pnlJumpStartYourEmpireRaceAttributesContainer.Location = new System.Drawing.Point(230, 88);
            this.pnlJumpStartYourEmpireRaceAttributesContainer.Name = "pnlJumpStartYourEmpireRaceAttributesContainer";
            this.pnlJumpStartYourEmpireRaceAttributesContainer.Size = new System.Drawing.Size(169, 100);
            this.pnlJumpStartYourEmpireRaceAttributesContainer.TabIndex = 238;
            this.pnlJumpStartYourEmpireRaceAttributes.Location = new System.Drawing.Point(10, 10);
            this.pnlJumpStartYourEmpireRaceAttributes.Name = "pnlJumpStartYourEmpireRaceAttributes";
            this.pnlJumpStartYourEmpireRaceAttributes.Size = new System.Drawing.Size(200, 100);
            this.pnlJumpStartYourEmpireRaceAttributes.TabIndex = 211;
            this.lblJumpStartYourEmpireRaceName.AutoSize = true;
            this.lblJumpStartYourEmpireRaceName.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartYourEmpireRaceName.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartYourEmpireRaceName.Location = new System.Drawing.Point(230, 67);
            this.lblJumpStartYourEmpireRaceName.Name = "lblJumpStartYourEmpireRaceName";
            this.lblJumpStartYourEmpireRaceName.Size = new System.Drawing.Size(81, 14);
            this.lblJumpStartYourEmpireRaceName.TabIndex = 213;
            this.lblJumpStartYourEmpireRaceName.Text = "Race Name";
            this.lnkJumpStartYourEmpireRace.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkJumpStartYourEmpireRace.AutoSize = true;
            this.lnkJumpStartYourEmpireRace.BackColor = System.Drawing.Color.Transparent;
            this.lnkJumpStartYourEmpireRace.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkJumpStartYourEmpireRace.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkJumpStartYourEmpireRace.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkJumpStartYourEmpireRace.Location = new System.Drawing.Point(230, 255);
            this.lnkJumpStartYourEmpireRace.Name = "lnkJumpStartYourEmpireRace";
            this.lnkJumpStartYourEmpireRace.Size = new System.Drawing.Size(171, 13);
            this.lnkJumpStartYourEmpireRace.TabIndex = 212;
            this.lnkJumpStartYourEmpireRace.TabStop = true;
            this.lnkJumpStartYourEmpireRace.Text = "Read more about this race...";
            this.lnkJumpStartYourEmpireRace.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkJumpStartYourEmpireRace_LinkClicked);
            this.picJumpStartYourEmpireRace.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.picJumpStartYourEmpireRace.Location = new System.Drawing.Point(15, 68);
            this.picJumpStartYourEmpireRace.Name = "picJumpStartYourEmpireRace";
            this.picJumpStartYourEmpireRace.Size = new System.Drawing.Size(200, 200);
            this.picJumpStartYourEmpireRace.TabIndex = 209;
            this.picJumpStartYourEmpireRace.TabStop = false;
            this.cmbJumpStartYourEmpireRace.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbJumpStartYourEmpireRace.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbJumpStartYourEmpireRace.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbJumpStartYourEmpireRace.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbJumpStartYourEmpireRace.Font = new System.Drawing.Font("Verdana", 9f);
            this.cmbJumpStartYourEmpireRace.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbJumpStartYourEmpireRace.FormattingEnabled = true;
            this.cmbJumpStartYourEmpireRace.Location = new System.Drawing.Point(15, 35);
            this.cmbJumpStartYourEmpireRace.Name = "cmbJumpStartYourEmpireRace";
            this.cmbJumpStartYourEmpireRace.Size = new System.Drawing.Size(200, 23);
            this.cmbJumpStartYourEmpireRace.TabIndex = 237;
            this.cmbJumpStartYourEmpireRace.SelectedIndexChanged += new System.EventHandler(cmbJumpStartYourEmpireRace_SelectedIndexChanged);
            this.cmbJumpStartYourEmpireRace.Enter += new System.EventHandler(cmbJumpStartYourEmpireRace_Enter);
            this.lblJumpStartYourEmpireRaceTitle.AutoSize = true;
            this.lblJumpStartYourEmpireRaceTitle.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartYourEmpireRaceTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartYourEmpireRaceTitle.Location = new System.Drawing.Point(10, 10);
            this.lblJumpStartYourEmpireRaceTitle.Name = "lblJumpStartYourEmpireRaceTitle";
            this.lblJumpStartYourEmpireRaceTitle.Size = new System.Drawing.Size(91, 18);
            this.lblJumpStartYourEmpireRaceTitle.TabIndex = 207;
            this.lblJumpStartYourEmpireRaceTitle.Text = "Your Race";
            this.btnJumpStartTheGalaxyNext.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnJumpStartTheGalaxyNext.ClipBackground = false;
            this.btnJumpStartTheGalaxyNext.DelayFrameRefresh = false;
            this.btnJumpStartTheGalaxyNext.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnJumpStartTheGalaxyNext.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnJumpStartTheGalaxyNext.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnJumpStartTheGalaxyNext.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnJumpStartTheGalaxyNext.IntensifyColors = false;
            this.btnJumpStartTheGalaxyNext.Location = new System.Drawing.Point(330, 651);
            this.btnJumpStartTheGalaxyNext.Name = "btnJumpStartTheGalaxyNext";
            this.btnJumpStartTheGalaxyNext.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnJumpStartTheGalaxyNext.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnJumpStartTheGalaxyNext.Size = new System.Drawing.Size(156, 30);
            this.btnJumpStartTheGalaxyNext.TabIndex = 257;
            this.btnJumpStartTheGalaxyNext.TabStop = false;
            this.btnJumpStartTheGalaxyNext.Text = "Start the Game!";
            this.btnJumpStartTheGalaxyNext.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnJumpStartTheGalaxyNext.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnJumpStartTheGalaxyNext.ToggledOn = false;
            this.btnJumpStartTheGalaxyNext.Click += new System.EventHandler(btnJumpStartTheGalaxyNext_Click);
            this.btnJumpStartTheGalaxyPrevious.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnJumpStartTheGalaxyPrevious.ClipBackground = false;
            this.btnJumpStartTheGalaxyPrevious.DelayFrameRefresh = false;
            this.btnJumpStartTheGalaxyPrevious.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnJumpStartTheGalaxyPrevious.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnJumpStartTheGalaxyPrevious.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnJumpStartTheGalaxyPrevious.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnJumpStartTheGalaxyPrevious.IntensifyColors = false;
            this.btnJumpStartTheGalaxyPrevious.Location = new System.Drawing.Point(21, 648);
            this.btnJumpStartTheGalaxyPrevious.Name = "btnJumpStartTheGalaxyPrevious";
            this.btnJumpStartTheGalaxyPrevious.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnJumpStartTheGalaxyPrevious.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnJumpStartTheGalaxyPrevious.Size = new System.Drawing.Size(156, 30);
            this.btnJumpStartTheGalaxyPrevious.TabIndex = 256;
            this.btnJumpStartTheGalaxyPrevious.TabStop = false;
            this.btnJumpStartTheGalaxyPrevious.Text = "<< Previous: Playstyle";
            this.btnJumpStartTheGalaxyPrevious.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnJumpStartTheGalaxyPrevious.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnJumpStartTheGalaxyPrevious.ToggledOn = false;
            this.btnJumpStartTheGalaxyPrevious.Click += new System.EventHandler(btnJumpStartTheGalaxyPrevious_Click);
            this.tbarJumpStartTheGalaxyDifficulty.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarJumpStartTheGalaxyDifficulty.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarJumpStartTheGalaxyDifficulty.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarJumpStartTheGalaxyDifficulty.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarJumpStartTheGalaxyDifficulty.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarJumpStartTheGalaxyDifficulty.BorderWidth = 2;
            this.tbarJumpStartTheGalaxyDifficulty.Curvature = 15;
            this.tbarJumpStartTheGalaxyDifficulty.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarJumpStartTheGalaxyDifficulty.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarJumpStartTheGalaxyDifficulty.LabelText = "Difficulty";
            this.tbarJumpStartTheGalaxyDifficulty.LabelWidth = 100;
            this.tbarJumpStartTheGalaxyDifficulty.LinkText = null;
            this.tbarJumpStartTheGalaxyDifficulty.LinkWidth = 0;
            this.tbarJumpStartTheGalaxyDifficulty.Location = new System.Drawing.Point(17, 143);
            this.tbarJumpStartTheGalaxyDifficulty.Margin = new System.Windows.Forms.Padding(0);
            this.tbarJumpStartTheGalaxyDifficulty.Name = "tbarJumpStartTheGalaxyDifficulty";
            this.tbarJumpStartTheGalaxyDifficulty.Size = new System.Drawing.Size(200, 20);
            this.tbarJumpStartTheGalaxyDifficulty.SliderOffset = 25;
            this.tbarJumpStartTheGalaxyDifficulty.TabIndex = 249;
            this.tbarJumpStartTheGalaxyDifficulty.Value = 0;
            this.tbarJumpStartTheGalaxyDifficulty.Enter += new System.EventHandler(tbarJumpStartTheGalaxyDifficulty_Enter);
            this.pnlJumpStartGalaxyShapeSize.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlJumpStartGalaxyShapeSize.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlJumpStartGalaxyShapeSize.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlJumpStartGalaxyShapeSize.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlJumpStartGalaxyShapeSize.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlJumpStartGalaxyShapeSize.BorderWidth = 2;
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.tbarJumpStartTheGalaxyDimensions);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.radJumpStartGalaxyShapeVariedClusters);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.radJumpStartGalaxyShapeEvenClusters);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.tbarJumpStartTheGalaxyStarDensity);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.lblJumpStartGalaxyShapeTitle);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.lblJumpStartGalaxyShapeDescription);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.radJumpStartGalaxyShapeSpiral);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.radJumpStartGalaxyShapeRing);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.radJumpStartGalaxyShapeIrregular);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.radJumpStartGalaxyShapeElliptical);
            this.pnlJumpStartGalaxyShapeSize.Controls.Add(this.picJumpStartTheGalaxyPreview);
            this.pnlJumpStartGalaxyShapeSize.Curvature = 20;
            this.pnlJumpStartGalaxyShapeSize.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlJumpStartGalaxyShapeSize.Location = new System.Drawing.Point(17, 13);
            this.pnlJumpStartGalaxyShapeSize.Margin = new System.Windows.Forms.Padding(0);
            this.pnlJumpStartGalaxyShapeSize.Name = "pnlJumpStartGalaxyShapeSize";
            this.pnlJumpStartGalaxyShapeSize.Size = new System.Drawing.Size(397, 116);
            this.pnlJumpStartGalaxyShapeSize.TabIndex = 211;
            this.tbarJumpStartTheGalaxyDimensions.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarJumpStartTheGalaxyDimensions.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarJumpStartTheGalaxyDimensions.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarJumpStartTheGalaxyDimensions.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarJumpStartTheGalaxyDimensions.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarJumpStartTheGalaxyDimensions.BorderWidth = 2;
            this.tbarJumpStartTheGalaxyDimensions.Curvature = 15;
            this.tbarJumpStartTheGalaxyDimensions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarJumpStartTheGalaxyDimensions.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarJumpStartTheGalaxyDimensions.LabelText = null;
            this.tbarJumpStartTheGalaxyDimensions.LabelWidth = 100;
            this.tbarJumpStartTheGalaxyDimensions.LinkText = null;
            this.tbarJumpStartTheGalaxyDimensions.LinkWidth = 0;
            this.tbarJumpStartTheGalaxyDimensions.Location = new System.Drawing.Point(190, 62);
            this.tbarJumpStartTheGalaxyDimensions.Margin = new System.Windows.Forms.Padding(0);
            this.tbarJumpStartTheGalaxyDimensions.Name = "tbarJumpStartTheGalaxyDimensions";
            this.tbarJumpStartTheGalaxyDimensions.Size = new System.Drawing.Size(200, 20);
            this.tbarJumpStartTheGalaxyDimensions.SliderOffset = 25;
            this.tbarJumpStartTheGalaxyDimensions.TabIndex = 216;
            this.tbarJumpStartTheGalaxyDimensions.Value = 0;
            this.tbarJumpStartTheGalaxyDimensions.ValueChanged += new System.EventHandler(tbarJumpStartTheGalaxyDimensions_ValueChanged);
            this.tbarJumpStartTheGalaxyDimensions.Enter += new System.EventHandler(tbarJumpStartTheGalaxyDimensions_Enter);
            this.radJumpStartGalaxyShapeVariedClusters.AutoSize = true;
            this.radJumpStartGalaxyShapeVariedClusters.BackColor = System.Drawing.Color.Transparent;
            this.radJumpStartGalaxyShapeVariedClusters.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radJumpStartGalaxyShapeVariedClusters.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radJumpStartGalaxyShapeVariedClusters.Location = new System.Drawing.Point(18, 101);
            this.radJumpStartGalaxyShapeVariedClusters.Name = "radJumpStartGalaxyShapeVariedClusters";
            this.radJumpStartGalaxyShapeVariedClusters.Size = new System.Drawing.Size(113, 17);
            this.radJumpStartGalaxyShapeVariedClusters.TabIndex = 215;
            this.radJumpStartGalaxyShapeVariedClusters.TabStop = true;
            this.radJumpStartGalaxyShapeVariedClusters.Text = "Varied Clusters";
            this.radJumpStartGalaxyShapeVariedClusters.UseVisualStyleBackColor = false;
            this.radJumpStartGalaxyShapeVariedClusters.CheckedChanged += new System.EventHandler(radJumpStartGalaxyShapeVariedClusters_CheckedChanged);
            this.radJumpStartGalaxyShapeVariedClusters.Enter += new System.EventHandler(radJumpStartGalaxyShapeVariedClusters_Enter);
            this.radJumpStartGalaxyShapeEvenClusters.AutoSize = true;
            this.radJumpStartGalaxyShapeEvenClusters.BackColor = System.Drawing.Color.Transparent;
            this.radJumpStartGalaxyShapeEvenClusters.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radJumpStartGalaxyShapeEvenClusters.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radJumpStartGalaxyShapeEvenClusters.Location = new System.Drawing.Point(18, 84);
            this.radJumpStartGalaxyShapeEvenClusters.Name = "radJumpStartGalaxyShapeEvenClusters";
            this.radJumpStartGalaxyShapeEvenClusters.Size = new System.Drawing.Size(104, 17);
            this.radJumpStartGalaxyShapeEvenClusters.TabIndex = 214;
            this.radJumpStartGalaxyShapeEvenClusters.TabStop = true;
            this.radJumpStartGalaxyShapeEvenClusters.Text = "Even Clusters";
            this.radJumpStartGalaxyShapeEvenClusters.UseVisualStyleBackColor = false;
            this.radJumpStartGalaxyShapeEvenClusters.CheckedChanged += new System.EventHandler(radJumpStartGalaxyShapeEvenClusters_CheckedChanged);
            this.radJumpStartGalaxyShapeEvenClusters.Enter += new System.EventHandler(radJumpStartGalaxyShapeEvenClusters_Enter);
            this.tbarJumpStartTheGalaxyStarDensity.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarJumpStartTheGalaxyStarDensity.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarJumpStartTheGalaxyStarDensity.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarJumpStartTheGalaxyStarDensity.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarJumpStartTheGalaxyStarDensity.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarJumpStartTheGalaxyStarDensity.BorderWidth = 2;
            this.tbarJumpStartTheGalaxyStarDensity.Curvature = 15;
            this.tbarJumpStartTheGalaxyStarDensity.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarJumpStartTheGalaxyStarDensity.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarJumpStartTheGalaxyStarDensity.LabelText = null;
            this.tbarJumpStartTheGalaxyStarDensity.LabelWidth = 100;
            this.tbarJumpStartTheGalaxyStarDensity.LinkText = null;
            this.tbarJumpStartTheGalaxyStarDensity.LinkWidth = 0;
            this.tbarJumpStartTheGalaxyStarDensity.Location = new System.Drawing.Point(183, 89);
            this.tbarJumpStartTheGalaxyStarDensity.Margin = new System.Windows.Forms.Padding(0);
            this.tbarJumpStartTheGalaxyStarDensity.Name = "tbarJumpStartTheGalaxyStarDensity";
            this.tbarJumpStartTheGalaxyStarDensity.Size = new System.Drawing.Size(200, 20);
            this.tbarJumpStartTheGalaxyStarDensity.SliderOffset = 25;
            this.tbarJumpStartTheGalaxyStarDensity.TabIndex = 214;
            this.tbarJumpStartTheGalaxyStarDensity.Value = 0;
            this.tbarJumpStartTheGalaxyStarDensity.ValueChanged += new System.EventHandler(muloBoAqMA);
            this.tbarJumpStartTheGalaxyStarDensity.Enter += new System.EventHandler(tbarJumpStartTheGalaxyStarDensity_Enter);
            this.lblJumpStartGalaxyShapeTitle.AutoSize = true;
            this.lblJumpStartGalaxyShapeTitle.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartGalaxyShapeTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartGalaxyShapeTitle.Location = new System.Drawing.Point(225, 26);
            this.lblJumpStartGalaxyShapeTitle.Name = "lblJumpStartGalaxyShapeTitle";
            this.lblJumpStartGalaxyShapeTitle.Size = new System.Drawing.Size(131, 14);
            this.lblJumpStartGalaxyShapeTitle.TabIndex = 213;
            this.lblJumpStartGalaxyShapeTitle.Text = "Galaxy Shape Title";
            this.lblJumpStartGalaxyShapeDescription.AutoSize = true;
            this.lblJumpStartGalaxyShapeDescription.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblJumpStartGalaxyShapeDescription.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblJumpStartGalaxyShapeDescription.Location = new System.Drawing.Point(225, 45);
            this.lblJumpStartGalaxyShapeDescription.Name = "lblJumpStartGalaxyShapeDescription";
            this.lblJumpStartGalaxyShapeDescription.Size = new System.Drawing.Size(155, 13);
            this.lblJumpStartGalaxyShapeDescription.TabIndex = 212;
            this.lblJumpStartGalaxyShapeDescription.Text = "Galaxy Shape Description";
            this.radJumpStartGalaxyShapeSpiral.AutoSize = true;
            this.radJumpStartGalaxyShapeSpiral.BackColor = System.Drawing.Color.Transparent;
            this.radJumpStartGalaxyShapeSpiral.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radJumpStartGalaxyShapeSpiral.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radJumpStartGalaxyShapeSpiral.Location = new System.Drawing.Point(18, 33);
            this.radJumpStartGalaxyShapeSpiral.Name = "radJumpStartGalaxyShapeSpiral";
            this.radJumpStartGalaxyShapeSpiral.Size = new System.Drawing.Size(58, 17);
            this.radJumpStartGalaxyShapeSpiral.TabIndex = 211;
            this.radJumpStartGalaxyShapeSpiral.TabStop = true;
            this.radJumpStartGalaxyShapeSpiral.Text = "Spiral";
            this.radJumpStartGalaxyShapeSpiral.UseVisualStyleBackColor = false;
            this.radJumpStartGalaxyShapeSpiral.CheckedChanged += new System.EventHandler(radJumpStartGalaxyShapeSpiral_CheckedChanged);
            this.radJumpStartGalaxyShapeSpiral.Enter += new System.EventHandler(radJumpStartGalaxyShapeSpiral_Enter);
            this.radJumpStartGalaxyShapeRing.AutoSize = true;
            this.radJumpStartGalaxyShapeRing.BackColor = System.Drawing.Color.Transparent;
            this.radJumpStartGalaxyShapeRing.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radJumpStartGalaxyShapeRing.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radJumpStartGalaxyShapeRing.Location = new System.Drawing.Point(18, 50);
            this.radJumpStartGalaxyShapeRing.Name = "radJumpStartGalaxyShapeRing";
            this.radJumpStartGalaxyShapeRing.Size = new System.Drawing.Size(50, 17);
            this.radJumpStartGalaxyShapeRing.TabIndex = 212;
            this.radJumpStartGalaxyShapeRing.TabStop = true;
            this.radJumpStartGalaxyShapeRing.Text = "Ring";
            this.radJumpStartGalaxyShapeRing.UseVisualStyleBackColor = false;
            this.radJumpStartGalaxyShapeRing.CheckedChanged += new System.EventHandler(radJumpStartGalaxyShapeRing_CheckedChanged);
            this.radJumpStartGalaxyShapeRing.Enter += new System.EventHandler(radJumpStartGalaxyShapeRing_Enter);
            this.radJumpStartGalaxyShapeIrregular.AutoSize = true;
            this.radJumpStartGalaxyShapeIrregular.BackColor = System.Drawing.Color.Transparent;
            this.radJumpStartGalaxyShapeIrregular.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radJumpStartGalaxyShapeIrregular.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radJumpStartGalaxyShapeIrregular.Location = new System.Drawing.Point(18, 67);
            this.radJumpStartGalaxyShapeIrregular.Name = "radJumpStartGalaxyShapeIrregular";
            this.radJumpStartGalaxyShapeIrregular.Size = new System.Drawing.Size(76, 17);
            this.radJumpStartGalaxyShapeIrregular.TabIndex = 213;
            this.radJumpStartGalaxyShapeIrregular.TabStop = true;
            this.radJumpStartGalaxyShapeIrregular.Text = "Irregular";
            this.radJumpStartGalaxyShapeIrregular.UseVisualStyleBackColor = false;
            this.radJumpStartGalaxyShapeIrregular.CheckedChanged += new System.EventHandler(radJumpStartGalaxyShapeIrregular_CheckedChanged);
            this.radJumpStartGalaxyShapeIrregular.Enter += new System.EventHandler(radJumpStartGalaxyShapeIrregular_Enter);
            this.radJumpStartGalaxyShapeElliptical.AutoSize = true;
            this.radJumpStartGalaxyShapeElliptical.BackColor = System.Drawing.Color.Transparent;
            this.radJumpStartGalaxyShapeElliptical.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radJumpStartGalaxyShapeElliptical.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radJumpStartGalaxyShapeElliptical.Location = new System.Drawing.Point(18, 16);
            this.radJumpStartGalaxyShapeElliptical.Name = "radJumpStartGalaxyShapeElliptical";
            this.radJumpStartGalaxyShapeElliptical.Size = new System.Drawing.Size(71, 17);
            this.radJumpStartGalaxyShapeElliptical.TabIndex = 210;
            this.radJumpStartGalaxyShapeElliptical.TabStop = true;
            this.radJumpStartGalaxyShapeElliptical.Text = "Elliptical";
            this.radJumpStartGalaxyShapeElliptical.UseVisualStyleBackColor = false;
            this.radJumpStartGalaxyShapeElliptical.CheckedChanged += new System.EventHandler(radJumpStartGalaxyShapeElliptical_CheckedChanged);
            this.radJumpStartGalaxyShapeElliptical.Enter += new System.EventHandler(radJumpStartGalaxyShapeElliptical_Enter);
            this.picJumpStartTheGalaxyPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.picJumpStartTheGalaxyPreview.Location = new System.Drawing.Point(110, 21);
            this.picJumpStartTheGalaxyPreview.Name = "picJumpStartTheGalaxyPreview";
            this.picJumpStartTheGalaxyPreview.Size = new System.Drawing.Size(100, 50);
            this.picJumpStartTheGalaxyPreview.TabIndex = 207;
            this.picJumpStartTheGalaxyPreview.TabStop = false;
            this.pnlStartNewGameYourRace.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameYourRace.Controls.Add(this.pnlStartNewGameYourEmpireRace);
            this.pnlStartNewGameYourRace.Controls.Add(this.picStartNewGameYourRaceImage);
            this.pnlStartNewGameYourRace.Controls.Add(this.btnStartNewGameYourRacePrevious);
            this.pnlStartNewGameYourRace.Controls.Add(this.btnStartNewGameYourRaceNext);
            this.pnlStartNewGameYourRace.Location = new System.Drawing.Point(10, 200);
            this.pnlStartNewGameYourRace.Name = "pnlStartNewGameYourRace";
            this.pnlStartNewGameYourRace.Size = new System.Drawing.Size(532, 400);
            this.pnlStartNewGameYourRace.TabIndex = 47;
            this.pnlStartNewGameYourEmpireRace.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameYourEmpireRace.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameYourEmpireRace.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameYourEmpireRace.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameYourEmpireRace.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameYourEmpireRace.BorderWidth = 2;
            this.pnlStartNewGameYourEmpireRace.Controls.Add(this.pnlStartNewGameYourEmpireRaceAttributesContainer);
            this.pnlStartNewGameYourEmpireRace.Controls.Add(this.lblStartNewGameYourEmpireRaceName);
            this.pnlStartNewGameYourEmpireRace.Controls.Add(this.lnkStartNewGameYourEmpireRace);
            this.pnlStartNewGameYourEmpireRace.Controls.Add(this.picStartNewGameYourEmpireRace);
            this.pnlStartNewGameYourEmpireRace.Controls.Add(this.cmbStartNewGameYourEmpireRace);
            this.pnlStartNewGameYourEmpireRace.Controls.Add(this.lblStartNewGameYourEmpireRaceTitle);
            this.pnlStartNewGameYourEmpireRace.Curvature = 20;
            this.pnlStartNewGameYourEmpireRace.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameYourEmpireRace.Location = new System.Drawing.Point(15, 33);
            this.pnlStartNewGameYourEmpireRace.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameYourEmpireRace.Name = "pnlStartNewGameYourEmpireRace";
            this.pnlStartNewGameYourEmpireRace.Size = new System.Drawing.Size(420, 285);
            this.pnlStartNewGameYourEmpireRace.TabIndex = 238;
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.AutoScroll = true;
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.Controls.Add(this.pnlStartNewGameYourEmpireRaceAttributes);
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.Location = new System.Drawing.Point(230, 88);
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.Name = "pnlStartNewGameYourEmpireRaceAttributesContainer";
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.Size = new System.Drawing.Size(169, 100);
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.TabIndex = 238;
            this.pnlStartNewGameYourEmpireRaceAttributes.Location = new System.Drawing.Point(10, 10);
            this.pnlStartNewGameYourEmpireRaceAttributes.Name = "pnlStartNewGameYourEmpireRaceAttributes";
            this.pnlStartNewGameYourEmpireRaceAttributes.Size = new System.Drawing.Size(200, 100);
            this.pnlStartNewGameYourEmpireRaceAttributes.TabIndex = 211;
            this.pnlStartNewGameYourEmpireRaceAttributes.Enter += new System.EventHandler(pnlStartNewGameYourEmpireRaceAttributes_Enter);
            this.pnlStartNewGameYourEmpireRaceAttributes.MouseEnter += new System.EventHandler(pnlStartNewGameYourEmpireRaceAttributes_MouseEnter);
            this.lblStartNewGameYourEmpireRaceName.AutoSize = true;
            this.lblStartNewGameYourEmpireRaceName.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireRaceName.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireRaceName.Location = new System.Drawing.Point(230, 67);
            this.lblStartNewGameYourEmpireRaceName.Name = "lblStartNewGameYourEmpireRaceName";
            this.lblStartNewGameYourEmpireRaceName.Size = new System.Drawing.Size(81, 14);
            this.lblStartNewGameYourEmpireRaceName.TabIndex = 213;
            this.lblStartNewGameYourEmpireRaceName.Text = "Race Name";
            this.lnkStartNewGameYourEmpireRace.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkStartNewGameYourEmpireRace.AutoSize = true;
            this.lnkStartNewGameYourEmpireRace.BackColor = System.Drawing.Color.Transparent;
            this.lnkStartNewGameYourEmpireRace.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkStartNewGameYourEmpireRace.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkStartNewGameYourEmpireRace.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkStartNewGameYourEmpireRace.Location = new System.Drawing.Point(230, 255);
            this.lnkStartNewGameYourEmpireRace.Name = "lnkStartNewGameYourEmpireRace";
            this.lnkStartNewGameYourEmpireRace.Size = new System.Drawing.Size(171, 13);
            this.lnkStartNewGameYourEmpireRace.TabIndex = 212;
            this.lnkStartNewGameYourEmpireRace.TabStop = true;
            this.lnkStartNewGameYourEmpireRace.Text = "Read more about this race...";
            this.lnkStartNewGameYourEmpireRace.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(cTwaUmbdtf);
            this.picStartNewGameYourEmpireRace.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.picStartNewGameYourEmpireRace.Location = new System.Drawing.Point(15, 68);
            this.picStartNewGameYourEmpireRace.Name = "picStartNewGameYourEmpireRace";
            this.picStartNewGameYourEmpireRace.Size = new System.Drawing.Size(200, 200);
            this.picStartNewGameYourEmpireRace.TabIndex = 209;
            this.picStartNewGameYourEmpireRace.TabStop = false;
            this.cmbStartNewGameYourEmpireRace.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbStartNewGameYourEmpireRace.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbStartNewGameYourEmpireRace.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbStartNewGameYourEmpireRace.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbStartNewGameYourEmpireRace.Font = new System.Drawing.Font("Verdana", 9f);
            this.cmbStartNewGameYourEmpireRace.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbStartNewGameYourEmpireRace.FormattingEnabled = true;
            this.cmbStartNewGameYourEmpireRace.Location = new System.Drawing.Point(15, 35);
            this.cmbStartNewGameYourEmpireRace.Name = "cmbStartNewGameYourEmpireRace";
            this.cmbStartNewGameYourEmpireRace.Size = new System.Drawing.Size(200, 23);
            this.cmbStartNewGameYourEmpireRace.TabIndex = 237;
            this.cmbStartNewGameYourEmpireRace.SelectedIndexChanged += new System.EventHandler(cmbStartNewGameYourEmpireRace_SelectedIndexChanged);
            this.cmbStartNewGameYourEmpireRace.Enter += new System.EventHandler(cmbStartNewGameYourEmpireRace_Enter);
            this.lblStartNewGameYourEmpireRaceTitle.AutoSize = true;
            this.lblStartNewGameYourEmpireRaceTitle.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireRaceTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireRaceTitle.Location = new System.Drawing.Point(10, 10);
            this.lblStartNewGameYourEmpireRaceTitle.Name = "lblStartNewGameYourEmpireRaceTitle";
            this.lblStartNewGameYourEmpireRaceTitle.Size = new System.Drawing.Size(91, 18);
            this.lblStartNewGameYourEmpireRaceTitle.TabIndex = 207;
            this.lblStartNewGameYourEmpireRaceTitle.Text = "Your Race";
            this.picStartNewGameYourRaceImage.Image = (System.Drawing.Image)resources.GetObject("picStartNewGameYourRaceImage.Image");
            this.picStartNewGameYourRaceImage.Location = new System.Drawing.Point(439, 37);
            this.picStartNewGameYourRaceImage.Name = "picStartNewGameYourRaceImage";
            this.picStartNewGameYourRaceImage.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameYourRaceImage.TabIndex = 259;
            this.picStartNewGameYourRaceImage.TabStop = false;
            this.btnStartNewGameYourRacePrevious.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourRacePrevious.ClipBackground = false;
            this.btnStartNewGameYourRacePrevious.DelayFrameRefresh = false;
            this.btnStartNewGameYourRacePrevious.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourRacePrevious.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourRacePrevious.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourRacePrevious.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourRacePrevious.IntensifyColors = false;
            this.btnStartNewGameYourRacePrevious.Location = new System.Drawing.Point(12, 347);
            this.btnStartNewGameYourRacePrevious.Name = "btnStartNewGameYourRacePrevious";
            this.btnStartNewGameYourRacePrevious.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourRacePrevious.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourRacePrevious.Size = new System.Drawing.Size(197, 30);
            this.btnStartNewGameYourRacePrevious.TabIndex = 258;
            this.btnStartNewGameYourRacePrevious.TabStop = false;
            this.btnStartNewGameYourRacePrevious.Text = "<< Previous: Colonization && Territory";
            this.btnStartNewGameYourRacePrevious.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourRacePrevious.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourRacePrevious.ToggledOn = false;
            this.btnStartNewGameYourRacePrevious.Click += new System.EventHandler(btnStartNewGameYourRacePrevious_Click);
            this.btnStartNewGameYourRaceNext.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourRaceNext.ClipBackground = false;
            this.btnStartNewGameYourRaceNext.DelayFrameRefresh = false;
            this.btnStartNewGameYourRaceNext.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourRaceNext.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourRaceNext.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourRaceNext.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourRaceNext.IntensifyColors = false;
            this.btnStartNewGameYourRaceNext.Location = new System.Drawing.Point(261, 348);
            this.btnStartNewGameYourRaceNext.Name = "btnStartNewGameYourRaceNext";
            this.btnStartNewGameYourRaceNext.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourRaceNext.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourRaceNext.Size = new System.Drawing.Size(174, 30);
            this.btnStartNewGameYourRaceNext.TabIndex = 240;
            this.btnStartNewGameYourRaceNext.TabStop = false;
            this.btnStartNewGameYourRaceNext.Text = "Next: Your Empire >>";
            this.btnStartNewGameYourRaceNext.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourRaceNext.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourRaceNext.ToggledOn = false;
            this.btnStartNewGameYourRaceNext.Click += new System.EventHandler(btnStartNewGameYourRaceNext_Click);
            this.pnlStartNewGameYourEmpire.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameYourEmpire.Controls.Add(this.pnlStartNewGameYourEmpireGovernment);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.picStartNewGameYourEmpirePiratePlaystyle);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.lblPiratePlaystyleDescription);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.lblVictoryPiratePlaystyle);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.cmbVictoryPiratePlayStyle);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.tbarStartNewGameYourEmpireCorruption);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.picStartNewGameYourEmpireImage);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.tbarStartNewGameYourEmpireSize);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.tbarStartNewGameYourEmpireTechLevel);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.tbarStartNewGameYourEmpireHomeSystem);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.pnlStartNewGameYourEmpireGalaxyLocation);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.pnlStartNewGameYourEmpireDetails);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.btnStartNewGameYourEmpireNext);
            this.pnlStartNewGameYourEmpire.Controls.Add(this.btnStartNewGameYourEmpirePrevious);
            this.pnlStartNewGameYourEmpire.Location = new System.Drawing.Point(139, 8);
            this.pnlStartNewGameYourEmpire.Name = "pnlStartNewGameYourEmpire";
            this.pnlStartNewGameYourEmpire.Size = new System.Drawing.Size(800, 622);
            this.pnlStartNewGameYourEmpire.TabIndex = 44;
            this.pnlStartNewGameYourEmpireGovernment.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameYourEmpireGovernment.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameYourEmpireGovernment.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameYourEmpireGovernment.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameYourEmpireGovernment.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameYourEmpireGovernment.BorderWidth = 2;
            this.pnlStartNewGameYourEmpireGovernment.Controls.Add(this.cmbStartNewGameYourEmpireGovernment);
            this.pnlStartNewGameYourEmpireGovernment.Controls.Add(this.lblStartNewGameYourEmpireGovernmentName);
            this.pnlStartNewGameYourEmpireGovernment.Controls.Add(this.lnkStartNewGameYourEmpireGovernment);
            this.pnlStartNewGameYourEmpireGovernment.Controls.Add(this.lblStartNewGameYourEmpireGovernmentAttributes);
            this.pnlStartNewGameYourEmpireGovernment.Controls.Add(this.lblStartNewGameYourEmpireGovernmentTitle);
            this.pnlStartNewGameYourEmpireGovernment.Curvature = 20;
            this.pnlStartNewGameYourEmpireGovernment.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameYourEmpireGovernment.Location = new System.Drawing.Point(10, 145);
            this.pnlStartNewGameYourEmpireGovernment.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameYourEmpireGovernment.Name = "pnlStartNewGameYourEmpireGovernment";
            this.pnlStartNewGameYourEmpireGovernment.Size = new System.Drawing.Size(340, 250);
            this.pnlStartNewGameYourEmpireGovernment.TabIndex = 230;
            this.cmbStartNewGameYourEmpireGovernment.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbStartNewGameYourEmpireGovernment.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbStartNewGameYourEmpireGovernment.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbStartNewGameYourEmpireGovernment.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbStartNewGameYourEmpireGovernment.Font = new System.Drawing.Font("Verdana", 8.25f);
            this.cmbStartNewGameYourEmpireGovernment.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbStartNewGameYourEmpireGovernment.FormattingEnabled = true;
            this.cmbStartNewGameYourEmpireGovernment.Location = new System.Drawing.Point(17, 40);
            this.cmbStartNewGameYourEmpireGovernment.Name = "cmbStartNewGameYourEmpireGovernment";
            this.cmbStartNewGameYourEmpireGovernment.Size = new System.Drawing.Size(121, 22);
            this.cmbStartNewGameYourEmpireGovernment.TabIndex = 244;
            this.cmbStartNewGameYourEmpireGovernment.SelectedIndexChanged += new System.EventHandler(cmbStartNewGameYourEmpireGovernment_SelectedIndexChanged);
            this.cmbStartNewGameYourEmpireGovernment.Enter += new System.EventHandler(cmbStartNewGameYourEmpireGovernment_Enter);
            this.lblStartNewGameYourEmpireGovernmentName.AutoSize = true;
            this.lblStartNewGameYourEmpireGovernmentName.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireGovernmentName.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireGovernmentName.Location = new System.Drawing.Point(160, 38);
            this.lblStartNewGameYourEmpireGovernmentName.Name = "lblStartNewGameYourEmpireGovernmentName";
            this.lblStartNewGameYourEmpireGovernmentName.Size = new System.Drawing.Size(130, 14);
            this.lblStartNewGameYourEmpireGovernmentName.TabIndex = 216;
            this.lblStartNewGameYourEmpireGovernmentName.Text = "Government Name";
            this.lnkStartNewGameYourEmpireGovernment.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkStartNewGameYourEmpireGovernment.AutoSize = true;
            this.lnkStartNewGameYourEmpireGovernment.BackColor = System.Drawing.Color.Transparent;
            this.lnkStartNewGameYourEmpireGovernment.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkStartNewGameYourEmpireGovernment.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkStartNewGameYourEmpireGovernment.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkStartNewGameYourEmpireGovernment.Location = new System.Drawing.Point(160, 210);
            this.lnkStartNewGameYourEmpireGovernment.MaximumSize = new System.Drawing.Size(200, 30);
            this.lnkStartNewGameYourEmpireGovernment.Name = "lnkStartNewGameYourEmpireGovernment";
            this.lnkStartNewGameYourEmpireGovernment.Size = new System.Drawing.Size(134, 26);
            this.lnkStartNewGameYourEmpireGovernment.TabIndex = 215;
            this.lnkStartNewGameYourEmpireGovernment.TabStop = true;
            this.lnkStartNewGameYourEmpireGovernment.Text = "Read more about this Government type...";
            this.lnkStartNewGameYourEmpireGovernment.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkStartNewGameYourEmpireGovernment_LinkClicked);
            this.lblStartNewGameYourEmpireGovernmentAttributes.AutoSize = true;
            this.lblStartNewGameYourEmpireGovernmentAttributes.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireGovernmentAttributes.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireGovernmentAttributes.Location = new System.Drawing.Point(160, 58);
            this.lblStartNewGameYourEmpireGovernmentAttributes.Name = "lblStartNewGameYourEmpireGovernmentAttributes";
            this.lblStartNewGameYourEmpireGovernmentAttributes.Size = new System.Drawing.Size(137, 13);
            this.lblStartNewGameYourEmpireGovernmentAttributes.TabIndex = 214;
            this.lblStartNewGameYourEmpireGovernmentAttributes.Text = "Government Attributes";
            this.lblStartNewGameYourEmpireGovernmentTitle.AutoSize = true;
            this.lblStartNewGameYourEmpireGovernmentTitle.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireGovernmentTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireGovernmentTitle.Location = new System.Drawing.Point(10, 10);
            this.lblStartNewGameYourEmpireGovernmentTitle.Name = "lblStartNewGameYourEmpireGovernmentTitle";
            this.lblStartNewGameYourEmpireGovernmentTitle.Size = new System.Drawing.Size(153, 18);
            this.lblStartNewGameYourEmpireGovernmentTitle.TabIndex = 208;
            this.lblStartNewGameYourEmpireGovernmentTitle.Text = "Your Government";
            this.picStartNewGameYourEmpirePiratePlaystyle.Location = new System.Drawing.Point(414, 230);
            this.picStartNewGameYourEmpirePiratePlaystyle.Name = "picStartNewGameYourEmpirePiratePlaystyle";
            this.picStartNewGameYourEmpirePiratePlaystyle.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameYourEmpirePiratePlaystyle.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.picStartNewGameYourEmpirePiratePlaystyle.TabIndex = 274;
            this.picStartNewGameYourEmpirePiratePlaystyle.TabStop = false;
            this.lblPiratePlaystyleDescription.AutoSize = true;
            this.lblPiratePlaystyleDescription.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblPiratePlaystyleDescription.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblPiratePlaystyleDescription.Location = new System.Drawing.Point(391, 91);
            this.lblPiratePlaystyleDescription.Name = "lblPiratePlaystyleDescription";
            this.lblPiratePlaystyleDescription.Size = new System.Drawing.Size(163, 13);
            this.lblPiratePlaystyleDescription.TabIndex = 273;
            this.lblPiratePlaystyleDescription.Text = "Pirate Playstyle Description";
            this.lblVictoryPiratePlaystyle.AutoSize = true;
            this.lblVictoryPiratePlaystyle.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblVictoryPiratePlaystyle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblVictoryPiratePlaystyle.Location = new System.Drawing.Point(364, 60);
            this.lblVictoryPiratePlaystyle.Name = "lblVictoryPiratePlaystyle";
            this.lblVictoryPiratePlaystyle.Size = new System.Drawing.Size(95, 13);
            this.lblVictoryPiratePlaystyle.TabIndex = 272;
            this.lblVictoryPiratePlaystyle.Text = "Pirate Playstyle";
            this.cmbVictoryPiratePlayStyle.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbVictoryPiratePlayStyle.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbVictoryPiratePlayStyle.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbVictoryPiratePlayStyle.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbVictoryPiratePlayStyle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbVictoryPiratePlayStyle.FormattingEnabled = true;
            this.cmbVictoryPiratePlayStyle.Location = new System.Drawing.Point(437, 45);
            this.cmbVictoryPiratePlayStyle.Name = "cmbVictoryPiratePlayStyle";
            this.cmbVictoryPiratePlayStyle.Size = new System.Drawing.Size(95, 21);
            this.cmbVictoryPiratePlayStyle.TabIndex = 271;
            this.cmbVictoryPiratePlayStyle.SelectedIndexChanged += new System.EventHandler(cmbVictoryPiratePlayStyle_SelectedIndexChanged);
            this.cmbVictoryPiratePlayStyle.Enter += new System.EventHandler(cmbVictoryPiratePlayStyle_Enter);
            this.tbarStartNewGameYourEmpireCorruption.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameYourEmpireCorruption.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameYourEmpireCorruption.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameYourEmpireCorruption.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameYourEmpireCorruption.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameYourEmpireCorruption.BorderWidth = 2;
            this.tbarStartNewGameYourEmpireCorruption.Curvature = 15;
            this.tbarStartNewGameYourEmpireCorruption.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameYourEmpireCorruption.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameYourEmpireCorruption.LabelText = "Corruption";
            this.tbarStartNewGameYourEmpireCorruption.LabelWidth = 100;
            this.tbarStartNewGameYourEmpireCorruption.LinkText = null;
            this.tbarStartNewGameYourEmpireCorruption.LinkWidth = 0;
            this.tbarStartNewGameYourEmpireCorruption.Location = new System.Drawing.Point(7, 535);
            this.tbarStartNewGameYourEmpireCorruption.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameYourEmpireCorruption.Name = "tbarStartNewGameYourEmpireCorruption";
            this.tbarStartNewGameYourEmpireCorruption.Size = new System.Drawing.Size(570, 40);
            this.tbarStartNewGameYourEmpireCorruption.SliderOffset = 25;
            this.tbarStartNewGameYourEmpireCorruption.TabIndex = 240;
            this.tbarStartNewGameYourEmpireCorruption.Value = 0;
            this.tbarStartNewGameYourEmpireCorruption.Enter += new System.EventHandler(tbarStartNewGameYourEmpireCorruption_Enter);
            this.picStartNewGameYourEmpireImage.Image = (System.Drawing.Image)resources.GetObject("picStartNewGameYourEmpireImage.Image");
            this.picStartNewGameYourEmpireImage.Location = new System.Drawing.Point(414, 316);
            this.picStartNewGameYourEmpireImage.Name = "picStartNewGameYourEmpireImage";
            this.picStartNewGameYourEmpireImage.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameYourEmpireImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.picStartNewGameYourEmpireImage.TabIndex = 220;
            this.picStartNewGameYourEmpireImage.TabStop = false;
            this.tbarStartNewGameYourEmpireSize.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameYourEmpireSize.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameYourEmpireSize.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameYourEmpireSize.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameYourEmpireSize.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameYourEmpireSize.BorderWidth = 2;
            this.tbarStartNewGameYourEmpireSize.Curvature = 15;
            this.tbarStartNewGameYourEmpireSize.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameYourEmpireSize.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameYourEmpireSize.LabelText = "Size";
            this.tbarStartNewGameYourEmpireSize.LabelWidth = 100;
            this.tbarStartNewGameYourEmpireSize.LinkText = null;
            this.tbarStartNewGameYourEmpireSize.LinkWidth = 0;
            this.tbarStartNewGameYourEmpireSize.Location = new System.Drawing.Point(10, 448);
            this.tbarStartNewGameYourEmpireSize.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameYourEmpireSize.Name = "tbarStartNewGameYourEmpireSize";
            this.tbarStartNewGameYourEmpireSize.Size = new System.Drawing.Size(570, 40);
            this.tbarStartNewGameYourEmpireSize.SliderOffset = 25;
            this.tbarStartNewGameYourEmpireSize.TabIndex = 228;
            this.tbarStartNewGameYourEmpireSize.Value = 0;
            this.tbarStartNewGameYourEmpireSize.Enter += new System.EventHandler(tbarStartNewGameYourEmpireSize_Enter);
            this.tbarStartNewGameYourEmpireTechLevel.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameYourEmpireTechLevel.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameYourEmpireTechLevel.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameYourEmpireTechLevel.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameYourEmpireTechLevel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameYourEmpireTechLevel.BorderWidth = 2;
            this.tbarStartNewGameYourEmpireTechLevel.Curvature = 15;
            this.tbarStartNewGameYourEmpireTechLevel.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameYourEmpireTechLevel.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameYourEmpireTechLevel.LabelText = "Tech Level";
            this.tbarStartNewGameYourEmpireTechLevel.LabelWidth = 100;
            this.tbarStartNewGameYourEmpireTechLevel.LinkText = null;
            this.tbarStartNewGameYourEmpireTechLevel.LinkWidth = 0;
            this.tbarStartNewGameYourEmpireTechLevel.Location = new System.Drawing.Point(10, 493);
            this.tbarStartNewGameYourEmpireTechLevel.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameYourEmpireTechLevel.Name = "tbarStartNewGameYourEmpireTechLevel";
            this.tbarStartNewGameYourEmpireTechLevel.Size = new System.Drawing.Size(570, 40);
            this.tbarStartNewGameYourEmpireTechLevel.SliderOffset = 25;
            this.tbarStartNewGameYourEmpireTechLevel.TabIndex = 229;
            this.tbarStartNewGameYourEmpireTechLevel.Value = 0;
            this.tbarStartNewGameYourEmpireTechLevel.ValueChanged += new System.EventHandler(tbarStartNewGameYourEmpireTechLevel_ValueChanged);
            this.tbarStartNewGameYourEmpireTechLevel.Enter += new System.EventHandler(tbarStartNewGameYourEmpireTechLevel_Enter);
            this.tbarStartNewGameYourEmpireHomeSystem.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameYourEmpireHomeSystem.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameYourEmpireHomeSystem.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameYourEmpireHomeSystem.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameYourEmpireHomeSystem.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameYourEmpireHomeSystem.BorderWidth = 2;
            this.tbarStartNewGameYourEmpireHomeSystem.Curvature = 15;
            this.tbarStartNewGameYourEmpireHomeSystem.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameYourEmpireHomeSystem.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameYourEmpireHomeSystem.LabelText = "Home System";
            this.tbarStartNewGameYourEmpireHomeSystem.LabelWidth = 100;
            this.tbarStartNewGameYourEmpireHomeSystem.LinkText = null;
            this.tbarStartNewGameYourEmpireHomeSystem.LinkWidth = 0;
            this.tbarStartNewGameYourEmpireHomeSystem.Location = new System.Drawing.Point(10, 403);
            this.tbarStartNewGameYourEmpireHomeSystem.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameYourEmpireHomeSystem.Name = "tbarStartNewGameYourEmpireHomeSystem";
            this.tbarStartNewGameYourEmpireHomeSystem.Size = new System.Drawing.Size(570, 40);
            this.tbarStartNewGameYourEmpireHomeSystem.SliderOffset = 25;
            this.tbarStartNewGameYourEmpireHomeSystem.TabIndex = 227;
            this.tbarStartNewGameYourEmpireHomeSystem.Value = 0;
            this.tbarStartNewGameYourEmpireHomeSystem.Enter += new System.EventHandler(tbarStartNewGameYourEmpireHomeSystem_Enter);
            this.pnlStartNewGameYourEmpireGalaxyLocation.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameYourEmpireGalaxyLocation.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameYourEmpireGalaxyLocation.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameYourEmpireGalaxyLocation.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameYourEmpireGalaxyLocation.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameYourEmpireGalaxyLocation.BorderWidth = 2;
            this.pnlStartNewGameYourEmpireGalaxyLocation.Controls.Add(this.lblStartNewGameYourEmpireGalaxyLocation);
            this.pnlStartNewGameYourEmpireGalaxyLocation.Controls.Add(this.picStartNewGameYourEmpireGalaxyLocation);
            this.pnlStartNewGameYourEmpireGalaxyLocation.Controls.Add(this.cmbYourEmpireStartLocation);
            this.pnlStartNewGameYourEmpireGalaxyLocation.Curvature = 20;
            this.pnlStartNewGameYourEmpireGalaxyLocation.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameYourEmpireGalaxyLocation.Location = new System.Drawing.Point(600, 310);
            this.pnlStartNewGameYourEmpireGalaxyLocation.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameYourEmpireGalaxyLocation.Name = "pnlStartNewGameYourEmpireGalaxyLocation";
            this.pnlStartNewGameYourEmpireGalaxyLocation.Size = new System.Drawing.Size(185, 240);
            this.pnlStartNewGameYourEmpireGalaxyLocation.TabIndex = 226;
            this.lblStartNewGameYourEmpireGalaxyLocation.AutoSize = true;
            this.lblStartNewGameYourEmpireGalaxyLocation.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireGalaxyLocation.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireGalaxyLocation.Location = new System.Drawing.Point(12, 14);
            this.lblStartNewGameYourEmpireGalaxyLocation.Name = "lblStartNewGameYourEmpireGalaxyLocation";
            this.lblStartNewGameYourEmpireGalaxyLocation.Size = new System.Drawing.Size(147, 13);
            this.lblStartNewGameYourEmpireGalaxyLocation.TabIndex = 215;
            this.lblStartNewGameYourEmpireGalaxyLocation.Text = "Galaxy Starting Location";
            this.picStartNewGameYourEmpireGalaxyLocation.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.picStartNewGameYourEmpireGalaxyLocation.Location = new System.Drawing.Point(15, 70);
            this.picStartNewGameYourEmpireGalaxyLocation.Name = "picStartNewGameYourEmpireGalaxyLocation";
            this.picStartNewGameYourEmpireGalaxyLocation.Size = new System.Drawing.Size(155, 155);
            this.picStartNewGameYourEmpireGalaxyLocation.TabIndex = 44;
            this.picStartNewGameYourEmpireGalaxyLocation.TabStop = false;
            this.cmbYourEmpireStartLocation.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbYourEmpireStartLocation.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbYourEmpireStartLocation.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbYourEmpireStartLocation.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbYourEmpireStartLocation.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbYourEmpireStartLocation.FormattingEnabled = true;
            this.cmbYourEmpireStartLocation.Location = new System.Drawing.Point(15, 35);
            this.cmbYourEmpireStartLocation.Name = "cmbYourEmpireStartLocation";
            this.cmbYourEmpireStartLocation.Size = new System.Drawing.Size(155, 21);
            this.cmbYourEmpireStartLocation.TabIndex = 226;
            this.cmbYourEmpireStartLocation.SelectedIndexChanged += new System.EventHandler(cmbYourEmpireStartLocation_SelectedIndexChanged);
            this.cmbYourEmpireStartLocation.Enter += new System.EventHandler(cmbYourEmpireStartLocation_Enter);
            this.pnlStartNewGameYourEmpireDetails.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameYourEmpireDetails.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameYourEmpireDetails.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameYourEmpireDetails.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameYourEmpireDetails.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameYourEmpireDetails.BorderWidth = 2;
            this.pnlStartNewGameYourEmpireDetails.Controls.Add(this.lblStartNewGameYourEmpireMainColor);
            this.pnlStartNewGameYourEmpireDetails.Controls.Add(this.lblStartNewGameYourEmpireSecondaryColor);
            this.pnlStartNewGameYourEmpireDetails.Controls.Add(this.cmbSecondaryColor);
            this.pnlStartNewGameYourEmpireDetails.Controls.Add(this.cmbPrimaryColor);
            this.pnlStartNewGameYourEmpireDetails.Controls.Add(this.lblStartNewGameYourEmpireName);
            this.pnlStartNewGameYourEmpireDetails.Controls.Add(this.txtYourEmpireName);
            this.pnlStartNewGameYourEmpireDetails.Controls.Add(this.cmbFlagShape);
            this.pnlStartNewGameYourEmpireDetails.Curvature = 20;
            this.pnlStartNewGameYourEmpireDetails.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameYourEmpireDetails.Location = new System.Drawing.Point(10, 10);
            this.pnlStartNewGameYourEmpireDetails.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameYourEmpireDetails.Name = "pnlStartNewGameYourEmpireDetails";
            this.pnlStartNewGameYourEmpireDetails.Size = new System.Drawing.Size(340, 120);
            this.pnlStartNewGameYourEmpireDetails.TabIndex = 222;
            this.lblStartNewGameYourEmpireMainColor.AutoSize = true;
            this.lblStartNewGameYourEmpireMainColor.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireMainColor.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireMainColor.Location = new System.Drawing.Point(8, 57);
            this.lblStartNewGameYourEmpireMainColor.Name = "lblStartNewGameYourEmpireMainColor";
            this.lblStartNewGameYourEmpireMainColor.Size = new System.Drawing.Size(68, 13);
            this.lblStartNewGameYourEmpireMainColor.TabIndex = 212;
            this.lblStartNewGameYourEmpireMainColor.Text = "Main Color";
            this.lblStartNewGameYourEmpireSecondaryColor.AutoSize = true;
            this.lblStartNewGameYourEmpireSecondaryColor.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireSecondaryColor.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireSecondaryColor.Location = new System.Drawing.Point(8, 85);
            this.lblStartNewGameYourEmpireSecondaryColor.Name = "lblStartNewGameYourEmpireSecondaryColor";
            this.lblStartNewGameYourEmpireSecondaryColor.Size = new System.Drawing.Size(103, 13);
            this.lblStartNewGameYourEmpireSecondaryColor.TabIndex = 211;
            this.lblStartNewGameYourEmpireSecondaryColor.Text = "Secondary Color";
            this.cmbSecondaryColor.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbSecondaryColor.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbSecondaryColor.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbSecondaryColor.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbSecondaryColor.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbSecondaryColor.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbSecondaryColor.FormattingEnabled = true;
            this.cmbSecondaryColor.Location = new System.Drawing.Point(120, 81);
            this.cmbSecondaryColor.Name = "cmbSecondaryColor";
            this.cmbSecondaryColor.Size = new System.Drawing.Size(80, 22);
            this.cmbSecondaryColor.TabIndex = 224;
            this.cmbSecondaryColor.SelectedIndexChanged += new System.EventHandler(cmbSecondaryColor_SelectedIndexChanged);
            this.cmbSecondaryColor.Enter += new System.EventHandler(cmbSecondaryColor_Enter);
            this.cmbPrimaryColor.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbPrimaryColor.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbPrimaryColor.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbPrimaryColor.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbPrimaryColor.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbPrimaryColor.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbPrimaryColor.FormattingEnabled = true;
            this.cmbPrimaryColor.Location = new System.Drawing.Point(120, 54);
            this.cmbPrimaryColor.Name = "cmbPrimaryColor";
            this.cmbPrimaryColor.Size = new System.Drawing.Size(80, 22);
            this.cmbPrimaryColor.TabIndex = 223;
            this.cmbPrimaryColor.SelectedIndexChanged += new System.EventHandler(cmbPrimaryColor_SelectedIndexChanged);
            this.cmbPrimaryColor.Enter += new System.EventHandler(cmbPrimaryColor_Enter);
            this.lblStartNewGameYourEmpireName.AutoSize = true;
            this.lblStartNewGameYourEmpireName.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameYourEmpireName.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameYourEmpireName.Location = new System.Drawing.Point(10, 15);
            this.lblStartNewGameYourEmpireName.Name = "lblStartNewGameYourEmpireName";
            this.lblStartNewGameYourEmpireName.Size = new System.Drawing.Size(84, 13);
            this.lblStartNewGameYourEmpireName.TabIndex = 208;
            this.lblStartNewGameYourEmpireName.Text = "Empire Name";
            this.txtYourEmpireName.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.txtYourEmpireName.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.txtYourEmpireName.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.txtYourEmpireName.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.txtYourEmpireName.Location = new System.Drawing.Point(120, 12);
            this.txtYourEmpireName.Name = "txtYourEmpireName";
            this.txtYourEmpireName.Size = new System.Drawing.Size(200, 21);
            this.txtYourEmpireName.TabIndex = 222;
            this.txtYourEmpireName.Enter += new System.EventHandler(txtYourEmpireName_Enter);
            this.cmbFlagShape.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbFlagShape.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbFlagShape.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbFlagShape.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbFlagShape.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbFlagShape.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbFlagShape.FormattingEnabled = true;
            this.cmbFlagShape.Location = new System.Drawing.Point(215, 54);
            this.cmbFlagShape.Name = "cmbFlagShape";
            this.cmbFlagShape.Size = new System.Drawing.Size(105, 22);
            this.cmbFlagShape.TabIndex = 225;
            this.cmbFlagShape.DrawItem += new System.Windows.Forms.DrawItemEventHandler(cmbFlagShape_DrawItem);
            this.cmbFlagShape.MeasureItem += new System.Windows.Forms.MeasureItemEventHandler(cmbFlagShape_MeasureItem);
            this.cmbFlagShape.Enter += new System.EventHandler(cmbFlagShape_Enter);
            this.btnStartNewGameYourEmpireNext.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpireNext.ClipBackground = false;
            this.btnStartNewGameYourEmpireNext.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpireNext.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpireNext.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpireNext.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpireNext.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpireNext.IntensifyColors = false;
            this.btnStartNewGameYourEmpireNext.Location = new System.Drawing.Point(618, 584);
            this.btnStartNewGameYourEmpireNext.Name = "btnStartNewGameYourEmpireNext";
            this.btnStartNewGameYourEmpireNext.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpireNext.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpireNext.Size = new System.Drawing.Size(174, 30);
            this.btnStartNewGameYourEmpireNext.TabIndex = 239;
            this.btnStartNewGameYourEmpireNext.TabStop = false;
            this.btnStartNewGameYourEmpireNext.Text = "Next: Other Empires >>";
            this.btnStartNewGameYourEmpireNext.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpireNext.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpireNext.ToggledOn = false;
            this.btnStartNewGameYourEmpireNext.Click += new System.EventHandler(btnStartNewGameYourEmpireNext_Click);
            this.btnStartNewGameYourEmpirePrevious.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameYourEmpirePrevious.ClipBackground = false;
            this.btnStartNewGameYourEmpirePrevious.DelayFrameRefresh = false;
            this.btnStartNewGameYourEmpirePrevious.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameYourEmpirePrevious.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameYourEmpirePrevious.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameYourEmpirePrevious.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameYourEmpirePrevious.IntensifyColors = false;
            this.btnStartNewGameYourEmpirePrevious.Location = new System.Drawing.Point(7, 582);
            this.btnStartNewGameYourEmpirePrevious.Name = "btnStartNewGameYourEmpirePrevious";
            this.btnStartNewGameYourEmpirePrevious.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameYourEmpirePrevious.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameYourEmpirePrevious.Size = new System.Drawing.Size(176, 30);
            this.btnStartNewGameYourEmpirePrevious.TabIndex = 238;
            this.btnStartNewGameYourEmpirePrevious.TabStop = false;
            this.btnStartNewGameYourEmpirePrevious.Text = "<< Previous: Your Race";
            this.btnStartNewGameYourEmpirePrevious.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameYourEmpirePrevious.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameYourEmpirePrevious.ToggledOn = false;
            this.btnStartNewGameYourEmpirePrevious.Click += new System.EventHandler(btnStartNewGameYourEmpirePrevious_Click);
            this.pnlStartNewGameTheGalaxy.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.pnlStartNewGameTheGalaxyLoadExisting);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.tbarStartNewGameTheGalaxyPirateStrength);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.chkStartNewGameTheGalaxyPiratesRespawn);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.btnStartNewGameTheGalaxyPrevious);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.chkStartNewGameTheGalaxyDifficultyScaling);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.tbarStartNewGameTheGalaxyDifficulty);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.lblStartNewGameTheGalaxyPirateProximityLabel);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.cmbStartNewGameTheGalaxyPirateProximity);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.lblStartNewGameTheGalaxyResearchBaseTechLabel);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.numStartNewGameTheGalaxyResearchBaseTech);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.picStartNewGameTheGalaxyImage);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.pnlStartNewGameGalaxyShapeSize);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.tbarStartNewGameTheGalaxyPirates);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.tbarStartNewGameTheGalaxySpaceCreatures);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.tbarStartNewGameTheGalaxyResearchSpeed);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.tbarStartNewGameTheGalaxyAggression);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.tbarStartNewGameTheGalaxyExpansion);
            this.pnlStartNewGameTheGalaxy.Controls.Add(this.btnStartNewGameTheGalaxyNext);
            this.pnlStartNewGameTheGalaxy.Location = new System.Drawing.Point(23, 176);
            this.pnlStartNewGameTheGalaxy.Name = "pnlStartNewGameTheGalaxy";
            this.pnlStartNewGameTheGalaxy.Size = new System.Drawing.Size(535, 538);
            this.pnlStartNewGameTheGalaxy.TabIndex = 43;
            this.pnlStartNewGameTheGalaxyLoadExisting.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameTheGalaxyLoadExisting.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameTheGalaxyLoadExisting.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameTheGalaxyLoadExisting.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameTheGalaxyLoadExisting.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameTheGalaxyLoadExisting.BorderWidth = 2;
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.chkStartNewGameTheGalaxyLoadExistingRuins);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.chkStartNewGameTheGalaxyLoadExistingCreatures);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.chkStartNewGameTheGalaxyLoadExistingResources);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.btnStartNewGameTheGalaxyLoadExistingClear);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.btnStartNewGameTheGalaxyLoadExistingBrowse);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.lblStartNewGameTheGalaxyLoadExistingFilepath);
            this.pnlStartNewGameTheGalaxyLoadExisting.Controls.Add(this.lblStartNewGameTheGalaxyLoadExistingTitle);
            this.pnlStartNewGameTheGalaxyLoadExisting.Curvature = 20;
            this.pnlStartNewGameTheGalaxyLoadExisting.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameTheGalaxyLoadExisting.Location = new System.Drawing.Point(20, 329);
            this.pnlStartNewGameTheGalaxyLoadExisting.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameTheGalaxyLoadExisting.Name = "pnlStartNewGameTheGalaxyLoadExisting";
            this.pnlStartNewGameTheGalaxyLoadExisting.Size = new System.Drawing.Size(300, 200);
            this.pnlStartNewGameTheGalaxyLoadExisting.TabIndex = 258;
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.AutoSize = true;
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Location = new System.Drawing.Point(27, 171);
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Name = "chkStartNewGameTheGalaxyLoadExistingSpecialLocations";
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Size = new System.Drawing.Size(194, 17);
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.TabIndex = 262;
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Text = "Regenerate Special Locations";
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.UseVisualStyleBackColor = true;
            this.chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Enter += new System.EventHandler(BrXoYtPsoA);
            this.chkStartNewGameTheGalaxyLoadExistingRuins.AutoSize = true;
            this.chkStartNewGameTheGalaxyLoadExistingRuins.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameTheGalaxyLoadExistingRuins.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameTheGalaxyLoadExistingRuins.Location = new System.Drawing.Point(27, 152);
            this.chkStartNewGameTheGalaxyLoadExistingRuins.Name = "chkStartNewGameTheGalaxyLoadExistingRuins";
            this.chkStartNewGameTheGalaxyLoadExistingRuins.Size = new System.Drawing.Size(127, 17);
            this.chkStartNewGameTheGalaxyLoadExistingRuins.TabIndex = 261;
            this.chkStartNewGameTheGalaxyLoadExistingRuins.Text = "Regenerate Ruins";
            this.chkStartNewGameTheGalaxyLoadExistingRuins.UseVisualStyleBackColor = true;
            this.chkStartNewGameTheGalaxyLoadExistingRuins.Enter += new System.EventHandler(IfEoxFyIkN);
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.AutoSize = true;
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.Location = new System.Drawing.Point(29, 136);
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.Name = "chkStartNewGameTheGalaxyLoadExistingCreatures";
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.Size = new System.Drawing.Size(192, 17);
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.TabIndex = 260;
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.Text = "Regenerate Space Creatures";
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.UseVisualStyleBackColor = true;
            this.chkStartNewGameTheGalaxyLoadExistingCreatures.Enter += new System.EventHandler(chkStartNewGameTheGalaxyLoadExistingCreatures_Enter);
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.AutoSize = true;
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Location = new System.Drawing.Point(27, 120);
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Name = "chkStartNewGameTheGalaxyLoadExistingSceneryResearch";
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Size = new System.Drawing.Size(276, 17);
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.TabIndex = 259;
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Text = "Regenerate Scenery and Research bonuses";
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.UseVisualStyleBackColor = true;
            this.chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Enter += new System.EventHandler(chkStartNewGameTheGalaxyLoadExistingSceneryResearch_Enter);
            this.chkStartNewGameTheGalaxyLoadExistingResources.AutoSize = true;
            this.chkStartNewGameTheGalaxyLoadExistingResources.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameTheGalaxyLoadExistingResources.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameTheGalaxyLoadExistingResources.Location = new System.Drawing.Point(27, 104);
            this.chkStartNewGameTheGalaxyLoadExistingResources.Name = "chkStartNewGameTheGalaxyLoadExistingResources";
            this.chkStartNewGameTheGalaxyLoadExistingResources.Size = new System.Drawing.Size(155, 17);
            this.chkStartNewGameTheGalaxyLoadExistingResources.TabIndex = 258;
            this.chkStartNewGameTheGalaxyLoadExistingResources.Text = "Regenerate Resources";
            this.chkStartNewGameTheGalaxyLoadExistingResources.UseVisualStyleBackColor = true;
            this.chkStartNewGameTheGalaxyLoadExistingResources.Enter += new System.EventHandler(chkStartNewGameTheGalaxyLoadExistingResources_Enter);
            this.btnStartNewGameTheGalaxyLoadExistingClear.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameTheGalaxyLoadExistingClear.ClipBackground = false;
            this.btnStartNewGameTheGalaxyLoadExistingClear.DelayFrameRefresh = false;
            this.btnStartNewGameTheGalaxyLoadExistingClear.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameTheGalaxyLoadExistingClear.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameTheGalaxyLoadExistingClear.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameTheGalaxyLoadExistingClear.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameTheGalaxyLoadExistingClear.IntensifyColors = false;
            this.btnStartNewGameTheGalaxyLoadExistingClear.Location = new System.Drawing.Point(174, 66);
            this.btnStartNewGameTheGalaxyLoadExistingClear.Name = "btnStartNewGameTheGalaxyLoadExistingClear";
            this.btnStartNewGameTheGalaxyLoadExistingClear.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameTheGalaxyLoadExistingClear.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameTheGalaxyLoadExistingClear.Size = new System.Drawing.Size(120, 30);
            this.btnStartNewGameTheGalaxyLoadExistingClear.TabIndex = 257;
            this.btnStartNewGameTheGalaxyLoadExistingClear.TabStop = false;
            this.btnStartNewGameTheGalaxyLoadExistingClear.Text = "Clear Map";
            this.btnStartNewGameTheGalaxyLoadExistingClear.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameTheGalaxyLoadExistingClear.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameTheGalaxyLoadExistingClear.ToggledOn = false;
            this.btnStartNewGameTheGalaxyLoadExistingClear.Click += new System.EventHandler(btnStartNewGameTheGalaxyLoadExistingClear_Click);
            this.btnStartNewGameTheGalaxyLoadExistingClear.Enter += new System.EventHandler(btnStartNewGameTheGalaxyLoadExistingClear_Enter);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.ClipBackground = false;
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.DelayFrameRefresh = false;
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.IntensifyColors = false;
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.Location = new System.Drawing.Point(174, 28);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.Name = "btnStartNewGameTheGalaxyLoadExistingBrowse";
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.Size = new System.Drawing.Size(120, 30);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.TabIndex = 256;
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.TabStop = false;
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.Text = "Browse for Maps...";
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.ToggledOn = false;
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.Click += new System.EventHandler(btnStartNewGameTheGalaxyLoadExistingBrowse_Click);
            this.btnStartNewGameTheGalaxyLoadExistingBrowse.Enter += new System.EventHandler(btnStartNewGameTheGalaxyLoadExistingBrowse_Enter);
            this.lblStartNewGameTheGalaxyLoadExistingFilepath.AutoSize = true;
            this.lblStartNewGameTheGalaxyLoadExistingFilepath.ForeColor = System.Drawing.Color.Yellow;
            this.lblStartNewGameTheGalaxyLoadExistingFilepath.Location = new System.Drawing.Point(46, 55);
            this.lblStartNewGameTheGalaxyLoadExistingFilepath.Name = "lblStartNewGameTheGalaxyLoadExistingFilepath";
            this.lblStartNewGameTheGalaxyLoadExistingFilepath.Size = new System.Drawing.Size(44, 13);
            this.lblStartNewGameTheGalaxyLoadExistingFilepath.TabIndex = 2;
            this.lblStartNewGameTheGalaxyLoadExistingFilepath.Text = "Filepath";
            this.lblStartNewGameTheGalaxyLoadExistingTitle.AutoSize = true;
            this.lblStartNewGameTheGalaxyLoadExistingTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameTheGalaxyLoadExistingTitle.Location = new System.Drawing.Point(17, 14);
            this.lblStartNewGameTheGalaxyLoadExistingTitle.Name = "lblStartNewGameTheGalaxyLoadExistingTitle";
            this.lblStartNewGameTheGalaxyLoadExistingTitle.Size = new System.Drawing.Size(184, 13);
            this.lblStartNewGameTheGalaxyLoadExistingTitle.TabIndex = 0;
            this.lblStartNewGameTheGalaxyLoadExistingTitle.Text = "OR Load an existing Galaxy as a map";
            this.tbarStartNewGameTheGalaxyPirateStrength.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyPirateStrength.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyPirateStrength.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyPirateStrength.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyPirateStrength.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyPirateStrength.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyPirateStrength.Curvature = 15;
            this.tbarStartNewGameTheGalaxyPirateStrength.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyPirateStrength.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyPirateStrength.LabelText = null;
            this.tbarStartNewGameTheGalaxyPirateStrength.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyPirateStrength.LinkText = null;
            this.tbarStartNewGameTheGalaxyPirateStrength.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyPirateStrength.Location = new System.Drawing.Point(92, 283);
            this.tbarStartNewGameTheGalaxyPirateStrength.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyPirateStrength.Name = "tbarStartNewGameTheGalaxyPirateStrength";
            this.tbarStartNewGameTheGalaxyPirateStrength.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyPirateStrength.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyPirateStrength.TabIndex = 257;
            this.tbarStartNewGameTheGalaxyPirateStrength.Value = 0;
            this.tbarStartNewGameTheGalaxyPirateStrength.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyPirateStrength_Enter);
            this.chkStartNewGameTheGalaxyPiratesRespawn.AutoSize = true;
            this.chkStartNewGameTheGalaxyPiratesRespawn.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameTheGalaxyPiratesRespawn.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameTheGalaxyPiratesRespawn.Location = new System.Drawing.Point(18, 310);
            this.chkStartNewGameTheGalaxyPiratesRespawn.Name = "chkStartNewGameTheGalaxyPiratesRespawn";
            this.chkStartNewGameTheGalaxyPiratesRespawn.Size = new System.Drawing.Size(220, 17);
            this.chkStartNewGameTheGalaxyPiratesRespawn.TabIndex = 256;
            this.chkStartNewGameTheGalaxyPiratesRespawn.Text = "Destroyed Pirates do not respawn";
            this.chkStartNewGameTheGalaxyPiratesRespawn.UseVisualStyleBackColor = true;
            this.chkStartNewGameTheGalaxyPiratesRespawn.Enter += new System.EventHandler(chkStartNewGameTheGalaxyPiratesRespawn_Enter);
            this.btnStartNewGameTheGalaxyPrevious.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameTheGalaxyPrevious.ClipBackground = false;
            this.btnStartNewGameTheGalaxyPrevious.DelayFrameRefresh = false;
            this.btnStartNewGameTheGalaxyPrevious.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameTheGalaxyPrevious.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameTheGalaxyPrevious.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameTheGalaxyPrevious.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameTheGalaxyPrevious.IntensifyColors = false;
            this.btnStartNewGameTheGalaxyPrevious.Location = new System.Drawing.Point(8, 217);
            this.btnStartNewGameTheGalaxyPrevious.Name = "btnStartNewGameTheGalaxyPrevious";
            this.btnStartNewGameTheGalaxyPrevious.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameTheGalaxyPrevious.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameTheGalaxyPrevious.Size = new System.Drawing.Size(156, 30);
            this.btnStartNewGameTheGalaxyPrevious.TabIndex = 255;
            this.btnStartNewGameTheGalaxyPrevious.TabStop = false;
            this.btnStartNewGameTheGalaxyPrevious.Text = "<< Previous: Playstyle";
            this.btnStartNewGameTheGalaxyPrevious.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameTheGalaxyPrevious.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameTheGalaxyPrevious.ToggledOn = false;
            this.btnStartNewGameTheGalaxyPrevious.Click += new System.EventHandler(btnStartNewGameTheGalaxyPrevious_Click);
            this.chkStartNewGameTheGalaxyDifficultyScaling.AutoSize = true;
            this.chkStartNewGameTheGalaxyDifficultyScaling.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameTheGalaxyDifficultyScaling.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameTheGalaxyDifficultyScaling.Location = new System.Drawing.Point(13, 290);
            this.chkStartNewGameTheGalaxyDifficultyScaling.Name = "chkStartNewGameTheGalaxyDifficultyScaling";
            this.chkStartNewGameTheGalaxyDifficultyScaling.Size = new System.Drawing.Size(251, 17);
            this.chkStartNewGameTheGalaxyDifficultyScaling.TabIndex = 254;
            this.chkStartNewGameTheGalaxyDifficultyScaling.Text = "Difficulty scales as player nears victory";
            this.chkStartNewGameTheGalaxyDifficultyScaling.UseVisualStyleBackColor = true;
            this.chkStartNewGameTheGalaxyDifficultyScaling.Enter += new System.EventHandler(chkStartNewGameTheGalaxyDifficultyScaling_Enter);
            this.tbarStartNewGameTheGalaxyDifficulty.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyDifficulty.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyDifficulty.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyDifficulty.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyDifficulty.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyDifficulty.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyDifficulty.Curvature = 15;
            this.tbarStartNewGameTheGalaxyDifficulty.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyDifficulty.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyDifficulty.LabelText = "Difficulty";
            this.tbarStartNewGameTheGalaxyDifficulty.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyDifficulty.LinkText = null;
            this.tbarStartNewGameTheGalaxyDifficulty.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyDifficulty.Location = new System.Drawing.Point(13, 164);
            this.tbarStartNewGameTheGalaxyDifficulty.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyDifficulty.Name = "tbarStartNewGameTheGalaxyDifficulty";
            this.tbarStartNewGameTheGalaxyDifficulty.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyDifficulty.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyDifficulty.TabIndex = 248;
            this.tbarStartNewGameTheGalaxyDifficulty.Value = 0;
            this.tbarStartNewGameTheGalaxyDifficulty.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyDifficulty_Enter);
            this.lblStartNewGameTheGalaxyPirateProximityLabel.AutoSize = true;
            this.lblStartNewGameTheGalaxyPirateProximityLabel.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameTheGalaxyPirateProximityLabel.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameTheGalaxyPirateProximityLabel.Location = new System.Drawing.Point(306, 236);
            this.lblStartNewGameTheGalaxyPirateProximityLabel.Name = "lblStartNewGameTheGalaxyPirateProximityLabel";
            this.lblStartNewGameTheGalaxyPirateProximityLabel.Size = new System.Drawing.Size(163, 13);
            this.lblStartNewGameTheGalaxyPirateProximityLabel.TabIndex = 247;
            this.lblStartNewGameTheGalaxyPirateProximityLabel.Text = "Pirate Proximity to Empires";
            this.cmbStartNewGameTheGalaxyPirateProximity.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbStartNewGameTheGalaxyPirateProximity.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbStartNewGameTheGalaxyPirateProximity.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbStartNewGameTheGalaxyPirateProximity.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbStartNewGameTheGalaxyPirateProximity.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbStartNewGameTheGalaxyPirateProximity.FormattingEnabled = true;
            this.cmbStartNewGameTheGalaxyPirateProximity.Location = new System.Drawing.Point(313, 254);
            this.cmbStartNewGameTheGalaxyPirateProximity.Name = "cmbStartNewGameTheGalaxyPirateProximity";
            this.cmbStartNewGameTheGalaxyPirateProximity.Size = new System.Drawing.Size(95, 21);
            this.cmbStartNewGameTheGalaxyPirateProximity.TabIndex = 246;
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.AutoSize = true;
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.Location = new System.Drawing.Point(386, 192);
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.Name = "lblStartNewGameTheGalaxyResearchBaseTechLabel";
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.Size = new System.Drawing.Size(15, 13);
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.TabIndex = 245;
            this.lblStartNewGameTheGalaxyResearchBaseTechLabel.Text = "K";
            this.numStartNewGameTheGalaxyResearchBaseTech.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numStartNewGameTheGalaxyResearchBaseTech.Enabled = false;
            this.numStartNewGameTheGalaxyResearchBaseTech.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numStartNewGameTheGalaxyResearchBaseTech.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numStartNewGameTheGalaxyResearchBaseTech.Location = new System.Drawing.Point(345, 190);
            this.numStartNewGameTheGalaxyResearchBaseTech.Maximum = new decimal(new int[4] { 25, 0, 0, 0 });
            this.numStartNewGameTheGalaxyResearchBaseTech.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numStartNewGameTheGalaxyResearchBaseTech.Name = "numStartNewGameTheGalaxyResearchBaseTech";
            this.numStartNewGameTheGalaxyResearchBaseTech.Size = new System.Drawing.Size(40, 21);
            this.numStartNewGameTheGalaxyResearchBaseTech.TabIndex = 244;
            this.numStartNewGameTheGalaxyResearchBaseTech.UpDownAlign = System.Windows.Forms.LeftRightAlignment.Left;
            this.numStartNewGameTheGalaxyResearchBaseTech.Value = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numStartNewGameTheGalaxyResearchBaseTech.Enter += new System.EventHandler(numStartNewGameTheGalaxyResearchBaseTech_Enter);
            this.picStartNewGameTheGalaxyImage.Image = (System.Drawing.Image)resources.GetObject("picStartNewGameTheGalaxyImage.Image");
            this.picStartNewGameTheGalaxyImage.Location = new System.Drawing.Point(313, 134);
            this.picStartNewGameTheGalaxyImage.Name = "picStartNewGameTheGalaxyImage";
            this.picStartNewGameTheGalaxyImage.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameTheGalaxyImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.picStartNewGameTheGalaxyImage.TabIndex = 226;
            this.picStartNewGameTheGalaxyImage.TabStop = false;
            this.pnlStartNewGameGalaxyShapeSize.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameGalaxyShapeSize.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameGalaxyShapeSize.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameGalaxyShapeSize.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameGalaxyShapeSize.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameGalaxyShapeSize.BorderWidth = 2;
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.tbarStartNewGameTheGalaxyDimensions);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.radStartNewGameGalaxyShapeClustersVaried);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.radStartNewGameGalaxyShapeClustersEven);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.tbarStartNewGameTheGalaxyStarDensity);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.lblStartNewGameGalaxyShapeTitle);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.lblStartNewGameGalaxyShapeDescription);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.radStartNewGameGalaxyShapeSpiral);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.radStartNewGameGalaxyShapeRing);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.radStartNewGameGalaxyShapeIrregular);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.radStartNewGameGalaxyShapeElliptical);
            this.pnlStartNewGameGalaxyShapeSize.Controls.Add(this.picStartNewGameTheGalaxyPreview);
            this.pnlStartNewGameGalaxyShapeSize.Curvature = 20;
            this.pnlStartNewGameGalaxyShapeSize.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameGalaxyShapeSize.Location = new System.Drawing.Point(11, 8);
            this.pnlStartNewGameGalaxyShapeSize.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameGalaxyShapeSize.Name = "pnlStartNewGameGalaxyShapeSize";
            this.pnlStartNewGameGalaxyShapeSize.Size = new System.Drawing.Size(397, 116);
            this.pnlStartNewGameGalaxyShapeSize.TabIndex = 210;
            this.tbarStartNewGameTheGalaxyDimensions.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyDimensions.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyDimensions.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyDimensions.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyDimensions.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyDimensions.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyDimensions.Curvature = 15;
            this.tbarStartNewGameTheGalaxyDimensions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyDimensions.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyDimensions.LabelText = null;
            this.tbarStartNewGameTheGalaxyDimensions.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyDimensions.LinkText = null;
            this.tbarStartNewGameTheGalaxyDimensions.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyDimensions.Location = new System.Drawing.Point(190, 62);
            this.tbarStartNewGameTheGalaxyDimensions.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyDimensions.Name = "tbarStartNewGameTheGalaxyDimensions";
            this.tbarStartNewGameTheGalaxyDimensions.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyDimensions.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyDimensions.TabIndex = 216;
            this.tbarStartNewGameTheGalaxyDimensions.Value = 0;
            this.tbarStartNewGameTheGalaxyDimensions.ValueChanged += new System.EventHandler(tbarStartNewGameTheGalaxyDimensions_ValueChanged);
            this.tbarStartNewGameTheGalaxyDimensions.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyDimensions_Enter);
            this.radStartNewGameGalaxyShapeClustersVaried.AutoSize = true;
            this.radStartNewGameGalaxyShapeClustersVaried.BackColor = System.Drawing.Color.Transparent;
            this.radStartNewGameGalaxyShapeClustersVaried.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radStartNewGameGalaxyShapeClustersVaried.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radStartNewGameGalaxyShapeClustersVaried.Location = new System.Drawing.Point(18, 101);
            this.radStartNewGameGalaxyShapeClustersVaried.Name = "radStartNewGameGalaxyShapeClustersVaried";
            this.radStartNewGameGalaxyShapeClustersVaried.Size = new System.Drawing.Size(113, 17);
            this.radStartNewGameGalaxyShapeClustersVaried.TabIndex = 215;
            this.radStartNewGameGalaxyShapeClustersVaried.TabStop = true;
            this.radStartNewGameGalaxyShapeClustersVaried.Text = "Varied Clusters";
            this.radStartNewGameGalaxyShapeClustersVaried.UseVisualStyleBackColor = false;
            this.radStartNewGameGalaxyShapeClustersVaried.CheckedChanged += new System.EventHandler(radStartNewGameGalaxyShapeClustersVaried_CheckedChanged);
            this.radStartNewGameGalaxyShapeClustersVaried.Enter += new System.EventHandler(radStartNewGameGalaxyShapeClustersVaried_Enter);
            this.radStartNewGameGalaxyShapeClustersEven.AutoSize = true;
            this.radStartNewGameGalaxyShapeClustersEven.BackColor = System.Drawing.Color.Transparent;
            this.radStartNewGameGalaxyShapeClustersEven.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radStartNewGameGalaxyShapeClustersEven.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radStartNewGameGalaxyShapeClustersEven.Location = new System.Drawing.Point(18, 84);
            this.radStartNewGameGalaxyShapeClustersEven.Name = "radStartNewGameGalaxyShapeClustersEven";
            this.radStartNewGameGalaxyShapeClustersEven.Size = new System.Drawing.Size(104, 17);
            this.radStartNewGameGalaxyShapeClustersEven.TabIndex = 214;
            this.radStartNewGameGalaxyShapeClustersEven.TabStop = true;
            this.radStartNewGameGalaxyShapeClustersEven.Text = "Even Clusters";
            this.radStartNewGameGalaxyShapeClustersEven.UseVisualStyleBackColor = false;
            this.radStartNewGameGalaxyShapeClustersEven.CheckedChanged += new System.EventHandler(radStartNewGameGalaxyShapeClustersEven_CheckedChanged);
            this.radStartNewGameGalaxyShapeClustersEven.Enter += new System.EventHandler(radStartNewGameGalaxyShapeClustersEven_Enter);
            this.tbarStartNewGameTheGalaxyStarDensity.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyStarDensity.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyStarDensity.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyStarDensity.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyStarDensity.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyStarDensity.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyStarDensity.Curvature = 15;
            this.tbarStartNewGameTheGalaxyStarDensity.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyStarDensity.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyStarDensity.LabelText = null;
            this.tbarStartNewGameTheGalaxyStarDensity.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyStarDensity.LinkText = null;
            this.tbarStartNewGameTheGalaxyStarDensity.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyStarDensity.Location = new System.Drawing.Point(183, 89);
            this.tbarStartNewGameTheGalaxyStarDensity.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyStarDensity.Name = "tbarStartNewGameTheGalaxyStarDensity";
            this.tbarStartNewGameTheGalaxyStarDensity.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyStarDensity.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyStarDensity.TabIndex = 214;
            this.tbarStartNewGameTheGalaxyStarDensity.Value = 0;
            this.tbarStartNewGameTheGalaxyStarDensity.ValueChanged += new System.EventHandler(tbarStartNewGameTheGalaxyStarDensity_ValueChanged);
            this.tbarStartNewGameTheGalaxyStarDensity.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyStarDensity_Enter);
            this.lblStartNewGameGalaxyShapeTitle.AutoSize = true;
            this.lblStartNewGameGalaxyShapeTitle.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameGalaxyShapeTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameGalaxyShapeTitle.Location = new System.Drawing.Point(225, 26);
            this.lblStartNewGameGalaxyShapeTitle.Name = "lblStartNewGameGalaxyShapeTitle";
            this.lblStartNewGameGalaxyShapeTitle.Size = new System.Drawing.Size(131, 14);
            this.lblStartNewGameGalaxyShapeTitle.TabIndex = 213;
            this.lblStartNewGameGalaxyShapeTitle.Text = "Galaxy Shape Title";
            this.lblStartNewGameGalaxyShapeDescription.AutoSize = true;
            this.lblStartNewGameGalaxyShapeDescription.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameGalaxyShapeDescription.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameGalaxyShapeDescription.Location = new System.Drawing.Point(225, 45);
            this.lblStartNewGameGalaxyShapeDescription.Name = "lblStartNewGameGalaxyShapeDescription";
            this.lblStartNewGameGalaxyShapeDescription.Size = new System.Drawing.Size(155, 13);
            this.lblStartNewGameGalaxyShapeDescription.TabIndex = 212;
            this.lblStartNewGameGalaxyShapeDescription.Text = "Galaxy Shape Description";
            this.radStartNewGameGalaxyShapeSpiral.AutoSize = true;
            this.radStartNewGameGalaxyShapeSpiral.BackColor = System.Drawing.Color.Transparent;
            this.radStartNewGameGalaxyShapeSpiral.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radStartNewGameGalaxyShapeSpiral.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radStartNewGameGalaxyShapeSpiral.Location = new System.Drawing.Point(18, 33);
            this.radStartNewGameGalaxyShapeSpiral.Name = "radStartNewGameGalaxyShapeSpiral";
            this.radStartNewGameGalaxyShapeSpiral.Size = new System.Drawing.Size(58, 17);
            this.radStartNewGameGalaxyShapeSpiral.TabIndex = 211;
            this.radStartNewGameGalaxyShapeSpiral.TabStop = true;
            this.radStartNewGameGalaxyShapeSpiral.Text = "Spiral";
            this.radStartNewGameGalaxyShapeSpiral.UseVisualStyleBackColor = false;
            this.radStartNewGameGalaxyShapeSpiral.CheckedChanged += new System.EventHandler(radStartNewGameGalaxyShapeSpiral_CheckedChanged);
            this.radStartNewGameGalaxyShapeSpiral.Enter += new System.EventHandler(radStartNewGameGalaxyShapeSpiral_Enter);
            this.radStartNewGameGalaxyShapeRing.AutoSize = true;
            this.radStartNewGameGalaxyShapeRing.BackColor = System.Drawing.Color.Transparent;
            this.radStartNewGameGalaxyShapeRing.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radStartNewGameGalaxyShapeRing.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radStartNewGameGalaxyShapeRing.Location = new System.Drawing.Point(18, 50);
            this.radStartNewGameGalaxyShapeRing.Name = "radStartNewGameGalaxyShapeRing";
            this.radStartNewGameGalaxyShapeRing.Size = new System.Drawing.Size(50, 17);
            this.radStartNewGameGalaxyShapeRing.TabIndex = 212;
            this.radStartNewGameGalaxyShapeRing.TabStop = true;
            this.radStartNewGameGalaxyShapeRing.Text = "Ring";
            this.radStartNewGameGalaxyShapeRing.UseVisualStyleBackColor = false;
            this.radStartNewGameGalaxyShapeRing.CheckedChanged += new System.EventHandler(radStartNewGameGalaxyShapeRing_CheckedChanged);
            this.radStartNewGameGalaxyShapeRing.Enter += new System.EventHandler(radStartNewGameGalaxyShapeRing_Enter);
            this.radStartNewGameGalaxyShapeIrregular.AutoSize = true;
            this.radStartNewGameGalaxyShapeIrregular.BackColor = System.Drawing.Color.Transparent;
            this.radStartNewGameGalaxyShapeIrregular.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radStartNewGameGalaxyShapeIrregular.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radStartNewGameGalaxyShapeIrregular.Location = new System.Drawing.Point(18, 67);
            this.radStartNewGameGalaxyShapeIrregular.Name = "radStartNewGameGalaxyShapeIrregular";
            this.radStartNewGameGalaxyShapeIrregular.Size = new System.Drawing.Size(76, 17);
            this.radStartNewGameGalaxyShapeIrregular.TabIndex = 213;
            this.radStartNewGameGalaxyShapeIrregular.TabStop = true;
            this.radStartNewGameGalaxyShapeIrregular.Text = "Irregular";
            this.radStartNewGameGalaxyShapeIrregular.UseVisualStyleBackColor = false;
            this.radStartNewGameGalaxyShapeIrregular.CheckedChanged += new System.EventHandler(radStartNewGameGalaxyShapeIrregular_CheckedChanged);
            this.radStartNewGameGalaxyShapeIrregular.Enter += new System.EventHandler(radStartNewGameGalaxyShapeIrregular_Enter);
            this.radStartNewGameGalaxyShapeElliptical.AutoSize = true;
            this.radStartNewGameGalaxyShapeElliptical.BackColor = System.Drawing.Color.Transparent;
            this.radStartNewGameGalaxyShapeElliptical.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radStartNewGameGalaxyShapeElliptical.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radStartNewGameGalaxyShapeElliptical.Location = new System.Drawing.Point(18, 16);
            this.radStartNewGameGalaxyShapeElliptical.Name = "radStartNewGameGalaxyShapeElliptical";
            this.radStartNewGameGalaxyShapeElliptical.Size = new System.Drawing.Size(71, 17);
            this.radStartNewGameGalaxyShapeElliptical.TabIndex = 210;
            this.radStartNewGameGalaxyShapeElliptical.TabStop = true;
            this.radStartNewGameGalaxyShapeElliptical.Text = "Elliptical";
            this.radStartNewGameGalaxyShapeElliptical.UseVisualStyleBackColor = false;
            this.radStartNewGameGalaxyShapeElliptical.CheckedChanged += new System.EventHandler(radStartNewGameGalaxyShapeElliptical_CheckedChanged);
            this.radStartNewGameGalaxyShapeElliptical.Enter += new System.EventHandler(radStartNewGameGalaxyShapeElliptical_Enter);
            this.picStartNewGameTheGalaxyPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.picStartNewGameTheGalaxyPreview.Location = new System.Drawing.Point(110, 21);
            this.picStartNewGameTheGalaxyPreview.Name = "picStartNewGameTheGalaxyPreview";
            this.picStartNewGameTheGalaxyPreview.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameTheGalaxyPreview.TabIndex = 207;
            this.picStartNewGameTheGalaxyPreview.TabStop = false;
            this.tbarStartNewGameTheGalaxyPirates.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyPirates.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyPirates.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyPirates.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyPirates.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyPirates.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyPirates.Curvature = 15;
            this.tbarStartNewGameTheGalaxyPirates.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyPirates.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyPirates.LabelText = null;
            this.tbarStartNewGameTheGalaxyPirates.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyPirates.LinkText = null;
            this.tbarStartNewGameTheGalaxyPirates.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyPirates.Location = new System.Drawing.Point(98, 256);
            this.tbarStartNewGameTheGalaxyPirates.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyPirates.Name = "tbarStartNewGameTheGalaxyPirates";
            this.tbarStartNewGameTheGalaxyPirates.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyPirates.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyPirates.TabIndex = 220;
            this.tbarStartNewGameTheGalaxyPirates.Value = 0;
            this.tbarStartNewGameTheGalaxyPirates.LinkClicked += new System.EventHandler(tbarStartNewGameTheGalaxyPirates_LinkClicked);
            this.tbarStartNewGameTheGalaxyPirates.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyPirates_Enter);
            this.tbarStartNewGameTheGalaxySpaceCreatures.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxySpaceCreatures.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxySpaceCreatures.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxySpaceCreatures.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxySpaceCreatures.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxySpaceCreatures.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxySpaceCreatures.Curvature = 15;
            this.tbarStartNewGameTheGalaxySpaceCreatures.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxySpaceCreatures.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxySpaceCreatures.LabelText = null;
            this.tbarStartNewGameTheGalaxySpaceCreatures.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxySpaceCreatures.LinkText = null;
            this.tbarStartNewGameTheGalaxySpaceCreatures.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxySpaceCreatures.Location = new System.Drawing.Point(98, 228);
            this.tbarStartNewGameTheGalaxySpaceCreatures.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxySpaceCreatures.Name = "tbarStartNewGameTheGalaxySpaceCreatures";
            this.tbarStartNewGameTheGalaxySpaceCreatures.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxySpaceCreatures.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxySpaceCreatures.TabIndex = 219;
            this.tbarStartNewGameTheGalaxySpaceCreatures.Value = 0;
            this.tbarStartNewGameTheGalaxySpaceCreatures.LinkClicked += new System.EventHandler(tbarStartNewGameTheGalaxySpaceCreatures_LinkClicked);
            this.tbarStartNewGameTheGalaxySpaceCreatures.Enter += new System.EventHandler(RmWafgkJeh);
            this.tbarStartNewGameTheGalaxyResearchSpeed.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyResearchSpeed.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyResearchSpeed.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyResearchSpeed.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyResearchSpeed.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyResearchSpeed.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyResearchSpeed.Curvature = 15;
            this.tbarStartNewGameTheGalaxyResearchSpeed.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyResearchSpeed.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyResearchSpeed.LabelText = null;
            this.tbarStartNewGameTheGalaxyResearchSpeed.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyResearchSpeed.LinkText = null;
            this.tbarStartNewGameTheGalaxyResearchSpeed.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyResearchSpeed.Location = new System.Drawing.Point(98, 203);
            this.tbarStartNewGameTheGalaxyResearchSpeed.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyResearchSpeed.Name = "tbarStartNewGameTheGalaxyResearchSpeed";
            this.tbarStartNewGameTheGalaxyResearchSpeed.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyResearchSpeed.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyResearchSpeed.TabIndex = 218;
            this.tbarStartNewGameTheGalaxyResearchSpeed.Value = 0;
            this.tbarStartNewGameTheGalaxyResearchSpeed.LinkClicked += new System.EventHandler(tbarStartNewGameTheGalaxyResearchSpeed_LinkClicked);
            this.tbarStartNewGameTheGalaxyResearchSpeed.ValueChanged += new System.EventHandler(tbarStartNewGameTheGalaxyResearchSpeed_ValueChanged);
            this.tbarStartNewGameTheGalaxyResearchSpeed.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyResearchSpeed_Enter);
            this.tbarStartNewGameTheGalaxyAggression.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyAggression.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyAggression.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyAggression.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyAggression.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyAggression.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyAggression.Curvature = 15;
            this.tbarStartNewGameTheGalaxyAggression.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyAggression.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyAggression.LabelText = null;
            this.tbarStartNewGameTheGalaxyAggression.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyAggression.LinkText = null;
            this.tbarStartNewGameTheGalaxyAggression.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyAggression.Location = new System.Drawing.Point(98, 177);
            this.tbarStartNewGameTheGalaxyAggression.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyAggression.Name = "tbarStartNewGameTheGalaxyAggression";
            this.tbarStartNewGameTheGalaxyAggression.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyAggression.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyAggression.TabIndex = 217;
            this.tbarStartNewGameTheGalaxyAggression.Value = 0;
            this.tbarStartNewGameTheGalaxyAggression.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyAggression_Enter);
            this.tbarStartNewGameTheGalaxyExpansion.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyExpansion.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyExpansion.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyExpansion.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyExpansion.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyExpansion.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyExpansion.Curvature = 15;
            this.tbarStartNewGameTheGalaxyExpansion.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyExpansion.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyExpansion.LabelText = null;
            this.tbarStartNewGameTheGalaxyExpansion.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyExpansion.LinkText = null;
            this.tbarStartNewGameTheGalaxyExpansion.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyExpansion.Location = new System.Drawing.Point(98, 153);
            this.tbarStartNewGameTheGalaxyExpansion.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyExpansion.Name = "tbarStartNewGameTheGalaxyExpansion";
            this.tbarStartNewGameTheGalaxyExpansion.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyExpansion.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyExpansion.TabIndex = 216;
            this.tbarStartNewGameTheGalaxyExpansion.Value = 0;
            this.tbarStartNewGameTheGalaxyExpansion.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyExpansion_Enter);
            this.btnStartNewGameTheGalaxyNext.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameTheGalaxyNext.ClipBackground = false;
            this.btnStartNewGameTheGalaxyNext.DelayFrameRefresh = false;
            this.btnStartNewGameTheGalaxyNext.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameTheGalaxyNext.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameTheGalaxyNext.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameTheGalaxyNext.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameTheGalaxyNext.IntensifyColors = false;
            this.btnStartNewGameTheGalaxyNext.Location = new System.Drawing.Point(276, 280);
            this.btnStartNewGameTheGalaxyNext.Name = "btnStartNewGameTheGalaxyNext";
            this.btnStartNewGameTheGalaxyNext.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameTheGalaxyNext.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameTheGalaxyNext.Size = new System.Drawing.Size(156, 30);
            this.btnStartNewGameTheGalaxyNext.TabIndex = 221;
            this.btnStartNewGameTheGalaxyNext.TabStop = false;
            this.btnStartNewGameTheGalaxyNext.Text = "Next: Colonization && Territory >>";
            this.btnStartNewGameTheGalaxyNext.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameTheGalaxyNext.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameTheGalaxyNext.ToggledOn = false;
            this.btnStartNewGameTheGalaxyNext.Click += new System.EventHandler(btnStartNewGameTheGalaxyNext_Click);
            this.pnlStartNewGameColonizationTerritory.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.chkStartNewGameColonizationTerritoryEnforceColonizationRange);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.sldStartNewGameColonizationTerritoryColonyInfluenceRange);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.tbarStartNewGameTheGalaxyColonyPrevalence);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.tbarStartNewGameTheGalaxyAlienLife);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.picStartNewGameColonizationTerritoryImage);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.btnStartNewGameColonizationTerritoryPrevious);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.btnStartNewGameColonizationTerritoryNext);
            this.pnlStartNewGameColonizationTerritory.Controls.Add(this.grpStartNewGameColonizationTerritoryColonizationRange);
            this.pnlStartNewGameColonizationTerritory.Location = new System.Drawing.Point(8, 16);
            this.pnlStartNewGameColonizationTerritory.Name = "pnlStartNewGameColonizationTerritory";
            this.pnlStartNewGameColonizationTerritory.Size = new System.Drawing.Size(532, 400);
            this.pnlStartNewGameColonizationTerritory.TabIndex = 48;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.AutoSize = true;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.BackColor = System.Drawing.Color.Transparent;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Location = new System.Drawing.Point(456, 205);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Name = "lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion";
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Size = new System.Drawing.Size(70, 13);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.TabIndex = 267;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Text = "Suggestion";
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.AutoSize = true;
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.BackColor = System.Drawing.Color.Transparent;
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.Location = new System.Drawing.Point(32, 223);
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.Name = "chkStartNewGameColonizationTerritoryEnforceColonizationRange";
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.Size = new System.Drawing.Size(15, 14);
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.TabIndex = 266;
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.UseVisualStyleBackColor = false;
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.CheckedChanged += new System.EventHandler(chkStartNewGameColonizationTerritoryEnforceColonizationRange_CheckedChanged);
            this.chkStartNewGameColonizationTerritoryEnforceColonizationRange.Enter += new System.EventHandler(chkStartNewGameColonizationTerritoryEnforceColonizationRange_Enter);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.AutoSize = true;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.BackColor = System.Drawing.Color.Transparent;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Location = new System.Drawing.Point(401, 193);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Name = "lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue";
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Size = new System.Drawing.Size(40, 13);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.TabIndex = 265;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Text = "100%";
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.AutoSize = true;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.BackColor = System.Drawing.Color.Transparent;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Location = new System.Drawing.Point(35, 193);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Name = "lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle";
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Size = new System.Drawing.Size(144, 13);
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.TabIndex = 263;
            this.lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Text = "Colony Influence Range";
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.BackColor = System.Drawing.Color.Transparent;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.BarInnerColor = System.Drawing.Color.FromArgb(64, 64, 72);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.BarOuterColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.BarPenColor = System.Drawing.Color.FromArgb(16, 16, 24);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.BorderRoundRectSize = new System.Drawing.Size(2, 2);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ElapsedInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ElapsedOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ForeColor = System.Drawing.Color.White;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.LargeChange = 5u;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Location = new System.Drawing.Point(86, 193);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Maximum = 200;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Minimum = 10;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Name = "sldStartNewGameColonizationTerritoryColonyInfluenceRange";
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Size = new System.Drawing.Size(300, 16);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.SmallChange = 1u;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.TabIndex = 262;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Text = "colorSlider1";
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ThumbInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ThumbOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ThumbPenColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ThumbRoundRectSize = new System.Drawing.Size(3, 3);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.ThumbSize = 20;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Value = 100;
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Scroll += new System.Windows.Forms.ScrollEventHandler(sldStartNewGameColonizationTerritoryColonyInfluenceRange_Scroll);
            this.sldStartNewGameColonizationTerritoryColonyInfluenceRange.Enter += new System.EventHandler(sldStartNewGameColonizationTerritoryColonyInfluenceRange_Enter);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.Curvature = 15;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.LabelText = "Planet Quality";
            this.tbarStartNewGameTheGalaxyColonyPrevalence.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.LinkText = null;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.Location = new System.Drawing.Point(38, 93);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.Name = "tbarStartNewGameTheGalaxyColonyPrevalence";
            this.tbarStartNewGameTheGalaxyColonyPrevalence.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyColonyPrevalence.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.TabIndex = 261;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.Value = 0;
            this.tbarStartNewGameTheGalaxyColonyPrevalence.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyColonyPrevalence_Enter);
            this.tbarStartNewGameTheGalaxyAlienLife.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbarStartNewGameTheGalaxyAlienLife.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.tbarStartNewGameTheGalaxyAlienLife.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbarStartNewGameTheGalaxyAlienLife.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbarStartNewGameTheGalaxyAlienLife.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbarStartNewGameTheGalaxyAlienLife.BorderWidth = 2;
            this.tbarStartNewGameTheGalaxyAlienLife.Curvature = 15;
            this.tbarStartNewGameTheGalaxyAlienLife.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbarStartNewGameTheGalaxyAlienLife.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbarStartNewGameTheGalaxyAlienLife.LabelText = null;
            this.tbarStartNewGameTheGalaxyAlienLife.LabelWidth = 100;
            this.tbarStartNewGameTheGalaxyAlienLife.LinkText = null;
            this.tbarStartNewGameTheGalaxyAlienLife.LinkWidth = 0;
            this.tbarStartNewGameTheGalaxyAlienLife.Location = new System.Drawing.Point(36, 135);
            this.tbarStartNewGameTheGalaxyAlienLife.Margin = new System.Windows.Forms.Padding(0);
            this.tbarStartNewGameTheGalaxyAlienLife.Name = "tbarStartNewGameTheGalaxyAlienLife";
            this.tbarStartNewGameTheGalaxyAlienLife.Size = new System.Drawing.Size(200, 20);
            this.tbarStartNewGameTheGalaxyAlienLife.SliderOffset = 25;
            this.tbarStartNewGameTheGalaxyAlienLife.TabIndex = 260;
            this.tbarStartNewGameTheGalaxyAlienLife.Value = 0;
            this.tbarStartNewGameTheGalaxyAlienLife.LinkClicked += new System.EventHandler(tbarStartNewGameTheGalaxyAlienLife_LinkClicked);
            this.tbarStartNewGameTheGalaxyAlienLife.Enter += new System.EventHandler(tbarStartNewGameTheGalaxyAlienLife_Enter);
            this.picStartNewGameColonizationTerritoryImage.Image = (System.Drawing.Image)resources.GetObject("picStartNewGameColonizationTerritoryImage.Image");
            this.picStartNewGameColonizationTerritoryImage.Location = new System.Drawing.Point(409, 22);
            this.picStartNewGameColonizationTerritoryImage.Name = "picStartNewGameColonizationTerritoryImage";
            this.picStartNewGameColonizationTerritoryImage.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameColonizationTerritoryImage.TabIndex = 259;
            this.picStartNewGameColonizationTerritoryImage.TabStop = false;
            this.btnStartNewGameColonizationTerritoryPrevious.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameColonizationTerritoryPrevious.ClipBackground = false;
            this.btnStartNewGameColonizationTerritoryPrevious.DelayFrameRefresh = false;
            this.btnStartNewGameColonizationTerritoryPrevious.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameColonizationTerritoryPrevious.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameColonizationTerritoryPrevious.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameColonizationTerritoryPrevious.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameColonizationTerritoryPrevious.IntensifyColors = false;
            this.btnStartNewGameColonizationTerritoryPrevious.Location = new System.Drawing.Point(12, 347);
            this.btnStartNewGameColonizationTerritoryPrevious.Name = "btnStartNewGameColonizationTerritoryPrevious";
            this.btnStartNewGameColonizationTerritoryPrevious.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameColonizationTerritoryPrevious.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameColonizationTerritoryPrevious.Size = new System.Drawing.Size(197, 30);
            this.btnStartNewGameColonizationTerritoryPrevious.TabIndex = 258;
            this.btnStartNewGameColonizationTerritoryPrevious.TabStop = false;
            this.btnStartNewGameColonizationTerritoryPrevious.Text = "<< Previous: The Galaxy";
            this.btnStartNewGameColonizationTerritoryPrevious.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameColonizationTerritoryPrevious.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameColonizationTerritoryPrevious.ToggledOn = false;
            this.btnStartNewGameColonizationTerritoryPrevious.Click += new System.EventHandler(btnStartNewGameColonizationTerritoryPrevious_Click);
            this.btnStartNewGameColonizationTerritoryNext.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameColonizationTerritoryNext.ClipBackground = false;
            this.btnStartNewGameColonizationTerritoryNext.DelayFrameRefresh = false;
            this.btnStartNewGameColonizationTerritoryNext.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameColonizationTerritoryNext.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameColonizationTerritoryNext.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameColonizationTerritoryNext.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameColonizationTerritoryNext.IntensifyColors = false;
            this.btnStartNewGameColonizationTerritoryNext.Location = new System.Drawing.Point(261, 348);
            this.btnStartNewGameColonizationTerritoryNext.Name = "btnStartNewGameColonizationTerritoryNext";
            this.btnStartNewGameColonizationTerritoryNext.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameColonizationTerritoryNext.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameColonizationTerritoryNext.Size = new System.Drawing.Size(174, 30);
            this.btnStartNewGameColonizationTerritoryNext.TabIndex = 240;
            this.btnStartNewGameColonizationTerritoryNext.TabStop = false;
            this.btnStartNewGameColonizationTerritoryNext.Text = "Next: Your Race >>";
            this.btnStartNewGameColonizationTerritoryNext.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameColonizationTerritoryNext.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameColonizationTerritoryNext.ToggledOn = false;
            this.btnStartNewGameColonizationTerritoryNext.Click += new System.EventHandler(btnStartNewGameColonizationTerritoryNext_Click);
            this.grpStartNewGameColonizationTerritoryColonizationRange.BackColor = System.Drawing.Color.Transparent;
            this.grpStartNewGameColonizationTerritoryColonizationRange.Controls.Add(this.lblStartNewGameColonizationTerritoryColonizationRangeValue);
            this.grpStartNewGameColonizationTerritoryColonizationRange.Controls.Add(this.lblStartNewGameColonizationTerritoryColonizationRangeTitle);
            this.grpStartNewGameColonizationTerritoryColonizationRange.Controls.Add(this.sldStartNewGameColonizationTerritoryColonizationRange);
            this.grpStartNewGameColonizationTerritoryColonizationRange.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpStartNewGameColonizationTerritoryColonizationRange.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpStartNewGameColonizationTerritoryColonizationRange.Location = new System.Drawing.Point(22, 223);
            this.grpStartNewGameColonizationTerritoryColonizationRange.Name = "grpStartNewGameColonizationTerritoryColonizationRange";
            this.grpStartNewGameColonizationTerritoryColonizationRange.Size = new System.Drawing.Size(433, 65);
            this.grpStartNewGameColonizationTerritoryColonizationRange.TabIndex = 264;
            this.grpStartNewGameColonizationTerritoryColonizationRange.TabStop = false;
            this.grpStartNewGameColonizationTerritoryColonizationRange.Text = "     Enforce Colonization Range Limits";
            this.grpStartNewGameColonizationTerritoryColonizationRange.Enter += new System.EventHandler(grpStartNewGameColonizationTerritoryColonizationRange_Enter);
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.AutoSize = true;
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.BackColor = System.Drawing.Color.Transparent;
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.Location = new System.Drawing.Point(379, 24);
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.Name = "lblStartNewGameColonizationTerritoryColonizationRangeValue";
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.Size = new System.Drawing.Size(43, 13);
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.TabIndex = 268;
            this.lblStartNewGameColonizationTerritoryColonizationRangeValue.Text = "4000K";
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.AutoSize = true;
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.BackColor = System.Drawing.Color.Transparent;
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.Location = new System.Drawing.Point(13, 24);
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.Name = "lblStartNewGameColonizationTerritoryColonizationRangeTitle";
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.Size = new System.Drawing.Size(117, 13);
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.TabIndex = 267;
            this.lblStartNewGameColonizationTerritoryColonizationRangeTitle.Text = "Colonization Range";
            this.sldStartNewGameColonizationTerritoryColonizationRange.BackColor = System.Drawing.Color.Transparent;
            this.sldStartNewGameColonizationTerritoryColonizationRange.BarInnerColor = System.Drawing.Color.FromArgb(64, 64, 72);
            this.sldStartNewGameColonizationTerritoryColonizationRange.BarOuterColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldStartNewGameColonizationTerritoryColonizationRange.BarPenColor = System.Drawing.Color.FromArgb(16, 16, 24);
            this.sldStartNewGameColonizationTerritoryColonizationRange.BorderRoundRectSize = new System.Drawing.Size(2, 2);
            this.sldStartNewGameColonizationTerritoryColonizationRange.ElapsedInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldStartNewGameColonizationTerritoryColonizationRange.ElapsedOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldStartNewGameColonizationTerritoryColonizationRange.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.sldStartNewGameColonizationTerritoryColonizationRange.ForeColor = System.Drawing.Color.White;
            this.sldStartNewGameColonizationTerritoryColonizationRange.LargeChange = 5u;
            this.sldStartNewGameColonizationTerritoryColonizationRange.Location = new System.Drawing.Point(64, 24);
            this.sldStartNewGameColonizationTerritoryColonizationRange.Maximum = 5000;
            this.sldStartNewGameColonizationTerritoryColonizationRange.Minimum = 500;
            this.sldStartNewGameColonizationTerritoryColonizationRange.Name = "sldStartNewGameColonizationTerritoryColonizationRange";
            this.sldStartNewGameColonizationTerritoryColonizationRange.Size = new System.Drawing.Size(300, 16);
            this.sldStartNewGameColonizationTerritoryColonizationRange.SmallChange = 1u;
            this.sldStartNewGameColonizationTerritoryColonizationRange.TabIndex = 266;
            this.sldStartNewGameColonizationTerritoryColonizationRange.Text = "colorSlider2";
            this.sldStartNewGameColonizationTerritoryColonizationRange.ThumbInnerColor = System.Drawing.Color.FromArgb(80, 80, 96);
            this.sldStartNewGameColonizationTerritoryColonizationRange.ThumbOuterColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.sldStartNewGameColonizationTerritoryColonizationRange.ThumbPenColor = System.Drawing.Color.FromArgb(32, 32, 40);
            this.sldStartNewGameColonizationTerritoryColonizationRange.ThumbRoundRectSize = new System.Drawing.Size(3, 3);
            this.sldStartNewGameColonizationTerritoryColonizationRange.ThumbSize = 20;
            this.sldStartNewGameColonizationTerritoryColonizationRange.Value = 1000;
            this.sldStartNewGameColonizationTerritoryColonizationRange.Scroll += new System.Windows.Forms.ScrollEventHandler(sldStartNewGameColonizationTerritoryColonizationRange_Scroll);
            this.sldStartNewGameColonizationTerritoryColonizationRange.Enter += new System.EventHandler(sldStartNewGameColonizationTerritoryColonizationRange_Enter);
            this.lblHelpTitle.AutoSize = true;
            this.lblHelpTitle.BackColor = System.Drawing.Color.Transparent;
            this.lblHelpTitle.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblHelpTitle.ForeColor = System.Drawing.Color.Yellow;
            this.lblHelpTitle.Location = new System.Drawing.Point(625, 36);
            this.lblHelpTitle.Name = "lblHelpTitle";
            this.lblHelpTitle.Size = new System.Drawing.Size(0, 14);
            this.lblHelpTitle.TabIndex = 11;
            this.lblHelpDescription.AutoSize = true;
            this.lblHelpDescription.BackColor = System.Drawing.Color.Transparent;
            this.lblHelpDescription.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblHelpDescription.ForeColor = System.Drawing.Color.Yellow;
            this.lblHelpDescription.Location = new System.Drawing.Point(625, 55);
            this.lblHelpDescription.Name = "lblHelpDescription";
            this.lblHelpDescription.Size = new System.Drawing.Size(0, 13);
            this.lblHelpDescription.TabIndex = 9;
            this.pnlStartNewGameOtherEmpires.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameOtherEmpires.Controls.Add(this.picStartNewGameOtherEmpiresImageBottom);
            this.pnlStartNewGameOtherEmpires.Controls.Add(this.pnlStartNewGameOtherEmpiresList);
            this.pnlStartNewGameOtherEmpires.Controls.Add(this.pnlStartNewGameOtherEmpiresAutoGen);
            this.pnlStartNewGameOtherEmpires.Controls.Add(this.lblStartNewGameOtherEmpiresOR);
            this.pnlStartNewGameOtherEmpires.Controls.Add(this.btnStartNewGameOtherEmpiresNext);
            this.pnlStartNewGameOtherEmpires.Controls.Add(this.btnStartNewGameOtherEmpiresPrevious);
            this.pnlStartNewGameOtherEmpires.Controls.Add(this.chkGalaxyNewEmpiresDuringGame);
            this.pnlStartNewGameOtherEmpires.Location = new System.Drawing.Point(11, 8);
            this.pnlStartNewGameOtherEmpires.Name = "pnlStartNewGameOtherEmpires";
            this.pnlStartNewGameOtherEmpires.Size = new System.Drawing.Size(645, 408);
            this.pnlStartNewGameOtherEmpires.TabIndex = 46;
            this.picStartNewGameOtherEmpiresImageBottom.Image = (System.Drawing.Image)resources.GetObject("picStartNewGameOtherEmpiresImageBottom.Image");
            this.picStartNewGameOtherEmpiresImageBottom.Location = new System.Drawing.Point(508, 20);
            this.picStartNewGameOtherEmpiresImageBottom.Name = "picStartNewGameOtherEmpiresImageBottom";
            this.picStartNewGameOtherEmpiresImageBottom.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameOtherEmpiresImageBottom.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.picStartNewGameOtherEmpiresImageBottom.TabIndex = 55;
            this.picStartNewGameOtherEmpiresImageBottom.TabStop = false;
            this.pnlStartNewGameOtherEmpiresList.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameOtherEmpiresList.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameOtherEmpiresList.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameOtherEmpiresList.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameOtherEmpiresList.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameOtherEmpiresList.BorderWidth = 2;
            this.pnlStartNewGameOtherEmpiresList.Controls.Add(this.btnAddNewEmpire);
            this.pnlStartNewGameOtherEmpiresList.Controls.Add(this.ctlStartingEmpiresList);
            this.pnlStartNewGameOtherEmpiresList.Curvature = 20;
            this.pnlStartNewGameOtherEmpiresList.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameOtherEmpiresList.Location = new System.Drawing.Point(29, 144);
            this.pnlStartNewGameOtherEmpiresList.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameOtherEmpiresList.Name = "pnlStartNewGameOtherEmpiresList";
            this.pnlStartNewGameOtherEmpiresList.Size = new System.Drawing.Size(476, 152);
            this.pnlStartNewGameOtherEmpiresList.TabIndex = 242;
            this.btnAddNewEmpire.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnAddNewEmpire.ClipBackground = false;
            this.btnAddNewEmpire.DelayFrameRefresh = false;
            this.btnAddNewEmpire.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnAddNewEmpire.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnAddNewEmpire.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnAddNewEmpire.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnAddNewEmpire.IntensifyColors = false;
            this.btnAddNewEmpire.Location = new System.Drawing.Point(303, 10);
            this.btnAddNewEmpire.Name = "btnAddNewEmpire";
            this.btnAddNewEmpire.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnAddNewEmpire.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnAddNewEmpire.Size = new System.Drawing.Size(150, 25);
            this.btnAddNewEmpire.TabIndex = 242;
            this.btnAddNewEmpire.Text = "Add New Empire";
            this.btnAddNewEmpire.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnAddNewEmpire.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnAddNewEmpire.ToggledOn = false;
            this.btnAddNewEmpire.Click += new System.EventHandler(btnAddNewEmpire_Click);
            this.ctlStartingEmpiresList.Location = new System.Drawing.Point(19, 43);
            this.ctlStartingEmpiresList.Name = "ctlStartingEmpiresList";
            this.ctlStartingEmpiresList.RemoveImage = null;
            this.ctlStartingEmpiresList.RowTemplateHeight = 25;
            this.ctlStartingEmpiresList.Size = new System.Drawing.Size(434, 91);
            this.ctlStartingEmpiresList.SoundsEnabled = false;
            this.ctlStartingEmpiresList.TabIndex = 243;
            this.ctlStartingEmpiresList.Enter += new System.EventHandler(ctlStartingEmpiresList_Enter);
            this.pnlStartNewGameOtherEmpiresAutoGen.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlStartNewGameOtherEmpiresAutoGen.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlStartNewGameOtherEmpiresAutoGen.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlStartNewGameOtherEmpiresAutoGen.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlStartNewGameOtherEmpiresAutoGen.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlStartNewGameOtherEmpiresAutoGen.BorderWidth = 2;
            this.pnlStartNewGameOtherEmpiresAutoGen.Controls.Add(this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2);
            this.pnlStartNewGameOtherEmpiresAutoGen.Controls.Add(this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1);
            this.pnlStartNewGameOtherEmpiresAutoGen.Controls.Add(this.chkOtherEmpiresAutogenerate);
            this.pnlStartNewGameOtherEmpiresAutoGen.Controls.Add(this.numAutogenerateEmpiresAmount);
            this.pnlStartNewGameOtherEmpiresAutoGen.Curvature = 20;
            this.pnlStartNewGameOtherEmpiresAutoGen.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlStartNewGameOtherEmpiresAutoGen.Location = new System.Drawing.Point(30, 20);
            this.pnlStartNewGameOtherEmpiresAutoGen.Margin = new System.Windows.Forms.Padding(0);
            this.pnlStartNewGameOtherEmpiresAutoGen.Name = "pnlStartNewGameOtherEmpiresAutoGen";
            this.pnlStartNewGameOtherEmpiresAutoGen.Size = new System.Drawing.Size(429, 75);
            this.pnlStartNewGameOtherEmpiresAutoGen.TabIndex = 240;
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.AutoSize = true;
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Location = new System.Drawing.Point(188, 43);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Name = "lblStartNewGameOtherEmpiresAutoGenNumberDescrip2";
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Size = new System.Drawing.Size(100, 13);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.TabIndex = 54;
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Text = "starting empires";
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.AutoSize = true;
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Location = new System.Drawing.Point(76, 43);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Name = "lblStartNewGameOtherEmpiresAutoGenNumberDescrip1";
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Size = new System.Drawing.Size(60, 13);
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.TabIndex = 53;
            this.lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Text = "Generate";
            this.chkOtherEmpiresAutogenerate.AutoSize = true;
            this.chkOtherEmpiresAutogenerate.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOtherEmpiresAutogenerate.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOtherEmpiresAutogenerate.Location = new System.Drawing.Point(14, 14);
            this.chkOtherEmpiresAutogenerate.Name = "chkOtherEmpiresAutogenerate";
            this.chkOtherEmpiresAutogenerate.Size = new System.Drawing.Size(209, 17);
            this.chkOtherEmpiresAutogenerate.TabIndex = 240;
            this.chkOtherEmpiresAutogenerate.Text = "Auto-Generate Starting Empires";
            this.chkOtherEmpiresAutogenerate.UseVisualStyleBackColor = true;
            this.chkOtherEmpiresAutogenerate.CheckedChanged += new System.EventHandler(chkOtherEmpiresAutogenerate_CheckedChanged);
            this.chkOtherEmpiresAutogenerate.Enter += new System.EventHandler(chkOtherEmpiresAutogenerate_Enter);
            this.numAutogenerateEmpiresAmount.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numAutogenerateEmpiresAmount.Enabled = false;
            this.numAutogenerateEmpiresAmount.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numAutogenerateEmpiresAmount.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numAutogenerateEmpiresAmount.Location = new System.Drawing.Point(142, 41);
            this.numAutogenerateEmpiresAmount.Maximum = new decimal(new int[4] { 25, 0, 0, 0 });
            this.numAutogenerateEmpiresAmount.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numAutogenerateEmpiresAmount.Name = "numAutogenerateEmpiresAmount";
            this.numAutogenerateEmpiresAmount.Size = new System.Drawing.Size(40, 21);
            this.numAutogenerateEmpiresAmount.TabIndex = 241;
            this.numAutogenerateEmpiresAmount.Value = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numAutogenerateEmpiresAmount.Enter += new System.EventHandler(numAutogenerateEmpiresAmount_Enter);
            this.lblStartNewGameOtherEmpiresOR.AutoSize = true;
            this.lblStartNewGameOtherEmpiresOR.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameOtherEmpiresOR.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameOtherEmpiresOR.Location = new System.Drawing.Point(37, 112);
            this.lblStartNewGameOtherEmpiresOR.Name = "lblStartNewGameOtherEmpiresOR";
            this.lblStartNewGameOtherEmpiresOR.Size = new System.Drawing.Size(224, 13);
            this.lblStartNewGameOtherEmpiresOR.TabIndex = 52;
            this.lblStartNewGameOtherEmpiresOR.Text = "OR specify the starting empires below";
            this.btnStartNewGameOtherEmpiresNext.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameOtherEmpiresNext.ClipBackground = false;
            this.btnStartNewGameOtherEmpiresNext.DelayFrameRefresh = false;
            this.btnStartNewGameOtherEmpiresNext.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameOtherEmpiresNext.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameOtherEmpiresNext.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameOtherEmpiresNext.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameOtherEmpiresNext.IntensifyColors = false;
            this.btnStartNewGameOtherEmpiresNext.Location = new System.Drawing.Point(271, 331);
            this.btnStartNewGameOtherEmpiresNext.Name = "btnStartNewGameOtherEmpiresNext";
            this.btnStartNewGameOtherEmpiresNext.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameOtherEmpiresNext.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameOtherEmpiresNext.Size = new System.Drawing.Size(202, 30);
            this.btnStartNewGameOtherEmpiresNext.TabIndex = 246;
            this.btnStartNewGameOtherEmpiresNext.TabStop = false;
            this.btnStartNewGameOtherEmpiresNext.Text = "Next: Victory Conditions >>";
            this.btnStartNewGameOtherEmpiresNext.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameOtherEmpiresNext.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameOtherEmpiresNext.ToggledOn = false;
            this.btnStartNewGameOtherEmpiresNext.Click += new System.EventHandler(btnStartNewGameOtherEmpiresNext_Click);
            this.btnStartNewGameOtherEmpiresPrevious.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameOtherEmpiresPrevious.ClipBackground = false;
            this.btnStartNewGameOtherEmpiresPrevious.DelayFrameRefresh = false;
            this.btnStartNewGameOtherEmpiresPrevious.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameOtherEmpiresPrevious.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameOtherEmpiresPrevious.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameOtherEmpiresPrevious.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameOtherEmpiresPrevious.IntensifyColors = false;
            this.btnStartNewGameOtherEmpiresPrevious.Location = new System.Drawing.Point(41, 334);
            this.btnStartNewGameOtherEmpiresPrevious.Name = "btnStartNewGameOtherEmpiresPrevious";
            this.btnStartNewGameOtherEmpiresPrevious.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameOtherEmpiresPrevious.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameOtherEmpiresPrevious.Size = new System.Drawing.Size(191, 30);
            this.btnStartNewGameOtherEmpiresPrevious.TabIndex = 245;
            this.btnStartNewGameOtherEmpiresPrevious.TabStop = false;
            this.btnStartNewGameOtherEmpiresPrevious.Text = "<< Previous: Your Empire";
            this.btnStartNewGameOtherEmpiresPrevious.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameOtherEmpiresPrevious.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameOtherEmpiresPrevious.ToggledOn = false;
            this.btnStartNewGameOtherEmpiresPrevious.Click += new System.EventHandler(btnStartNewGameOtherEmpiresPrevious_Click);
            this.chkGalaxyNewEmpiresDuringGame.AutoSize = true;
            this.chkGalaxyNewEmpiresDuringGame.BackColor = System.Drawing.Color.Transparent;
            this.chkGalaxyNewEmpiresDuringGame.Checked = true;
            this.chkGalaxyNewEmpiresDuringGame.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkGalaxyNewEmpiresDuringGame.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGalaxyNewEmpiresDuringGame.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGalaxyNewEmpiresDuringGame.Location = new System.Drawing.Point(68, 310);
            this.chkGalaxyNewEmpiresDuringGame.Name = "chkGalaxyNewEmpiresDuringGame";
            this.chkGalaxyNewEmpiresDuringGame.Size = new System.Drawing.Size(290, 17);
            this.chkGalaxyNewEmpiresDuringGame.TabIndex = 244;
            this.chkGalaxyNewEmpiresDuringGame.Text = "Allow new Empires to appear during the game";
            this.chkGalaxyNewEmpiresDuringGame.UseVisualStyleBackColor = false;
            this.chkGalaxyNewEmpiresDuringGame.Enter += new System.EventHandler(chkGalaxyNewEmpiresDuringGame_Enter);
            this.pnlStartNewGameVictoryConditions.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkStartNewGameEnableGiantKaltors);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkStartNewGameEnableTechTrading);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkStoryShadows);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.pnlStartNewGameVictoryConditionsGroup);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkVictoryEnableRaceSpecificEvents);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkVictoryEnableDisasterEvents);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkStoryDistantWorlds);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkStoryReturnOfTheShakturi);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.picStartNewGameVictoryConditionsImage);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.btnStartNewGameStart);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.btnStartNewGameVictoryConditionsPrevious);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.numVictoryTimeLimitYears);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.numVictoryTimeStartYears);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkVictoryTimeStart);
            this.pnlStartNewGameVictoryConditions.Controls.Add(this.chkVictoryTimeLimit);
            this.pnlStartNewGameVictoryConditions.Location = new System.Drawing.Point(22, 429);
            this.pnlStartNewGameVictoryConditions.Name = "pnlStartNewGameVictoryConditions";
            this.pnlStartNewGameVictoryConditions.Size = new System.Drawing.Size(772, 280);
            this.pnlStartNewGameVictoryConditions.TabIndex = 45;
            this.chkStartNewGameEnableGiantKaltors.AutoSize = true;
            this.chkStartNewGameEnableGiantKaltors.CheckAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.chkStartNewGameEnableGiantKaltors.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameEnableGiantKaltors.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameEnableGiantKaltors.Location = new System.Drawing.Point(500, 250);
            this.chkStartNewGameEnableGiantKaltors.Name = "chkStartNewGameEnableGiantKaltors";
            this.chkStartNewGameEnableGiantKaltors.Size = new System.Drawing.Size(215, 17);
            this.chkStartNewGameEnableGiantKaltors.TabIndex = 272;
            this.chkStartNewGameEnableGiantKaltors.Text = "Allow Giant Kaltors at game start";
            this.chkStartNewGameEnableGiantKaltors.UseVisualStyleBackColor = true;
            this.chkStartNewGameEnableGiantKaltors.Enter += new System.EventHandler(chkStartNewGameEnableGiantKaltors_Enter);
            this.chkStartNewGameEnableTechTrading.AutoSize = true;
            this.chkStartNewGameEnableTechTrading.CheckAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.chkStartNewGameEnableTechTrading.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStartNewGameEnableTechTrading.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStartNewGameEnableTechTrading.Location = new System.Drawing.Point(500, 227);
            this.chkStartNewGameEnableTechTrading.Name = "chkStartNewGameEnableTechTrading";
            this.chkStartNewGameEnableTechTrading.Size = new System.Drawing.Size(134, 17);
            this.chkStartNewGameEnableTechTrading.TabIndex = 271;
            this.chkStartNewGameEnableTechTrading.Text = "Allow Tech Trading";
            this.chkStartNewGameEnableTechTrading.UseVisualStyleBackColor = true;
            this.chkStartNewGameEnableTechTrading.Enter += new System.EventHandler(chkStartNewGameEnableTechTrading_Enter);
            this.chkStoryShadows.AutoSize = true;
            this.chkStoryShadows.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStoryShadows.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStoryShadows.Location = new System.Drawing.Point(454, 202);
            this.chkStoryShadows.Name = "chkStoryShadows";
            this.chkStoryShadows.Size = new System.Drawing.Size(194, 17);
            this.chkStoryShadows.TabIndex = 270;
            this.chkStoryShadows.Text = "Enable Shadows story events";
            this.chkStoryShadows.UseVisualStyleBackColor = true;
            this.chkStoryShadows.Enter += new System.EventHandler(chkStoryShadows_Enter);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.chkVictoryTerritory);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.lblVictoryThresholdPercentage);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.chkVictoryEconomy);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.cmbVictoryThresholdPercentage);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.chkVictoryPopulation);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.lblVictorySandbox);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.numVictoryTerritoryPercent);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.numVictoryEconomyPercent);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.chkVictoryEnableRaceSpecificConditions);
            this.pnlStartNewGameVictoryConditionsGroup.Controls.Add(this.numVictoryPopulationPercent);
            this.pnlStartNewGameVictoryConditionsGroup.Location = new System.Drawing.Point(277, 14);
            this.pnlStartNewGameVictoryConditionsGroup.Name = "pnlStartNewGameVictoryConditionsGroup";
            this.pnlStartNewGameVictoryConditionsGroup.Size = new System.Drawing.Size(481, 143);
            this.pnlStartNewGameVictoryConditionsGroup.TabIndex = 269;
            this.chkVictoryTerritory.AutoSize = true;
            this.chkVictoryTerritory.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryTerritory.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryTerritory.Location = new System.Drawing.Point(12, 13);
            this.chkVictoryTerritory.Name = "chkVictoryTerritory";
            this.chkVictoryTerritory.Size = new System.Drawing.Size(305, 17);
            this.chkVictoryTerritory.TabIndex = 247;
            this.chkVictoryTerritory.Text = "Territory: control            % of colonies in galaxy";
            this.chkVictoryTerritory.UseVisualStyleBackColor = true;
            this.chkVictoryTerritory.CheckedChanged += new System.EventHandler(chkVictoryTerritory_CheckedChanged);
            this.chkVictoryTerritory.Enter += new System.EventHandler(chkVictoryTerritory_Enter);
            this.lblVictoryThresholdPercentage.AutoSize = true;
            this.lblVictoryThresholdPercentage.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblVictoryThresholdPercentage.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblVictoryThresholdPercentage.Location = new System.Drawing.Point(9, 114);
            this.lblVictoryThresholdPercentage.Name = "lblVictoryThresholdPercentage";
            this.lblVictoryThresholdPercentage.Size = new System.Drawing.Size(154, 13);
            this.lblVictoryThresholdPercentage.TabIndex = 268;
            this.lblVictoryThresholdPercentage.Text = "Victory Threshold Percent";
            this.chkVictoryEconomy.AutoSize = true;
            this.chkVictoryEconomy.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryEconomy.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryEconomy.Location = new System.Drawing.Point(12, 59);
            this.chkVictoryEconomy.Name = "chkVictoryEconomy";
            this.chkVictoryEconomy.Size = new System.Drawing.Size(390, 17);
            this.chkVictoryEconomy.TabIndex = 251;
            this.chkVictoryEconomy.Text = "Economy: private economy generates            % of galaxy total";
            this.chkVictoryEconomy.UseVisualStyleBackColor = true;
            this.chkVictoryEconomy.CheckedChanged += new System.EventHandler(chkVictoryEconomy_CheckedChanged);
            this.chkVictoryEconomy.Enter += new System.EventHandler(chkVictoryEconomy_Enter);
            this.cmbVictoryThresholdPercentage.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbVictoryThresholdPercentage.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbVictoryThresholdPercentage.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbVictoryThresholdPercentage.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbVictoryThresholdPercentage.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbVictoryThresholdPercentage.FormattingEnabled = true;
            this.cmbVictoryThresholdPercentage.Items.AddRange(new object[6] { "75%", "80%", "85%", "90%", "95%", "100%" });
            this.cmbVictoryThresholdPercentage.Location = new System.Drawing.Point(111, 109);
            this.cmbVictoryThresholdPercentage.Name = "cmbVictoryThresholdPercentage";
            this.cmbVictoryThresholdPercentage.Size = new System.Drawing.Size(60, 21);
            this.cmbVictoryThresholdPercentage.TabIndex = 267;
            this.cmbVictoryThresholdPercentage.Enter += new System.EventHandler(cmbVictoryThresholdPercentage_Enter);
            this.chkVictoryPopulation.AutoSize = true;
            this.chkVictoryPopulation.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryPopulation.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryPopulation.Location = new System.Drawing.Point(12, 36);
            this.chkVictoryPopulation.Name = "chkVictoryPopulation";
            this.chkVictoryPopulation.Size = new System.Drawing.Size(327, 17);
            this.chkVictoryPopulation.TabIndex = 249;
            this.chkVictoryPopulation.Text = "Population: control            % of population in galaxy";
            this.chkVictoryPopulation.UseVisualStyleBackColor = true;
            this.chkVictoryPopulation.CheckedChanged += new System.EventHandler(chkVictoryPopulation_CheckedChanged);
            this.chkVictoryPopulation.Enter += new System.EventHandler(chkVictoryPopulation_Enter);
            this.lblVictorySandbox.AutoSize = true;
            this.lblVictorySandbox.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblVictorySandbox.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblVictorySandbox.Location = new System.Drawing.Point(265, 105);
            this.lblVictorySandbox.Name = "lblVictorySandbox";
            this.lblVictorySandbox.Size = new System.Drawing.Size(448, 13);
            this.lblVictorySandbox.TabIndex = 261;
            this.lblVictorySandbox.Text = "Leave all Victory Conditions unchecked to play in Sandbox mode (open play)";
            this.numVictoryTerritoryPercent.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numVictoryTerritoryPercent.Enabled = false;
            this.numVictoryTerritoryPercent.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numVictoryTerritoryPercent.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numVictoryTerritoryPercent.Location = new System.Drawing.Point(138, 11);
            this.numVictoryTerritoryPercent.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numVictoryTerritoryPercent.Name = "numVictoryTerritoryPercent";
            this.numVictoryTerritoryPercent.Size = new System.Drawing.Size(40, 21);
            this.numVictoryTerritoryPercent.TabIndex = 248;
            this.numVictoryTerritoryPercent.Value = new decimal(new int[4] { 33, 0, 0, 0 });
            this.numVictoryEconomyPercent.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numVictoryEconomyPercent.Enabled = false;
            this.numVictoryEconomyPercent.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numVictoryEconomyPercent.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numVictoryEconomyPercent.Location = new System.Drawing.Point(258, 57);
            this.numVictoryEconomyPercent.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numVictoryEconomyPercent.Name = "numVictoryEconomyPercent";
            this.numVictoryEconomyPercent.Size = new System.Drawing.Size(40, 21);
            this.numVictoryEconomyPercent.TabIndex = 252;
            this.numVictoryEconomyPercent.Value = new decimal(new int[4] { 33, 0, 0, 0 });
            this.chkVictoryEnableRaceSpecificConditions.AutoSize = true;
            this.chkVictoryEnableRaceSpecificConditions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryEnableRaceSpecificConditions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryEnableRaceSpecificConditions.Location = new System.Drawing.Point(12, 82);
            this.chkVictoryEnableRaceSpecificConditions.Name = "chkVictoryEnableRaceSpecificConditions";
            this.chkVictoryEnableRaceSpecificConditions.Size = new System.Drawing.Size(244, 17);
            this.chkVictoryEnableRaceSpecificConditions.TabIndex = 264;
            this.chkVictoryEnableRaceSpecificConditions.Text = "Enable race-specific victory conditions";
            this.chkVictoryEnableRaceSpecificConditions.UseVisualStyleBackColor = true;
            this.chkVictoryEnableRaceSpecificConditions.CheckedChanged += new System.EventHandler(chkVictoryEnableRaceSpecificConditions_CheckedChanged);
            this.chkVictoryEnableRaceSpecificConditions.Enter += new System.EventHandler(ijvJztcJac);
            this.numVictoryPopulationPercent.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numVictoryPopulationPercent.Enabled = false;
            this.numVictoryPopulationPercent.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numVictoryPopulationPercent.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numVictoryPopulationPercent.Location = new System.Drawing.Point(147, 35);
            this.numVictoryPopulationPercent.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numVictoryPopulationPercent.Name = "numVictoryPopulationPercent";
            this.numVictoryPopulationPercent.Size = new System.Drawing.Size(40, 21);
            this.numVictoryPopulationPercent.TabIndex = 250;
            this.numVictoryPopulationPercent.Value = new decimal(new int[4] { 33, 0, 0, 0 });
            this.chkVictoryEnableRaceSpecificEvents.AutoSize = true;
            this.chkVictoryEnableRaceSpecificEvents.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryEnableRaceSpecificEvents.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryEnableRaceSpecificEvents.Location = new System.Drawing.Point(265, 232);
            this.chkVictoryEnableRaceSpecificEvents.Name = "chkVictoryEnableRaceSpecificEvents";
            this.chkVictoryEnableRaceSpecificEvents.Size = new System.Drawing.Size(182, 17);
            this.chkVictoryEnableRaceSpecificEvents.TabIndex = 266;
            this.chkVictoryEnableRaceSpecificEvents.Text = "Enable race-specific events";
            this.chkVictoryEnableRaceSpecificEvents.UseVisualStyleBackColor = true;
            this.chkVictoryEnableRaceSpecificEvents.Enter += new System.EventHandler(chkVictoryEnableRaceSpecificEvents_Enter);
            this.chkVictoryEnableDisasterEvents.AutoSize = true;
            this.chkVictoryEnableDisasterEvents.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryEnableDisasterEvents.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryEnableDisasterEvents.Location = new System.Drawing.Point(15, 253);
            this.chkVictoryEnableDisasterEvents.Name = "chkVictoryEnableDisasterEvents";
            this.chkVictoryEnableDisasterEvents.Size = new System.Drawing.Size(222, 17);
            this.chkVictoryEnableDisasterEvents.TabIndex = 265;
            this.chkVictoryEnableDisasterEvents.Text = "Enable Disasters and other events";
            this.chkVictoryEnableDisasterEvents.UseVisualStyleBackColor = true;
            this.chkVictoryEnableDisasterEvents.Enter += new System.EventHandler(chkVictoryEnableDisasterEvents_Enter);
            this.chkStoryDistantWorlds.AutoSize = true;
            this.chkStoryDistantWorlds.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStoryDistantWorlds.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStoryDistantWorlds.Location = new System.Drawing.Point(15, 211);
            this.chkStoryDistantWorlds.Name = "chkStoryDistantWorlds";
            this.chkStoryDistantWorlds.Size = new System.Drawing.Size(272, 17);
            this.chkStoryDistantWorlds.TabIndex = 263;
            this.chkStoryDistantWorlds.Text = "Enable original Distant Worlds story events";
            this.chkStoryDistantWorlds.UseVisualStyleBackColor = true;
            this.chkStoryReturnOfTheShakturi.AutoSize = true;
            this.chkStoryReturnOfTheShakturi.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkStoryReturnOfTheShakturi.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkStoryReturnOfTheShakturi.Location = new System.Drawing.Point(13, 230);
            this.chkStoryReturnOfTheShakturi.Name = "chkStoryReturnOfTheShakturi";
            this.chkStoryReturnOfTheShakturi.Size = new System.Drawing.Size(404, 17);
            this.chkStoryReturnOfTheShakturi.TabIndex = 262;
            this.chkStoryReturnOfTheShakturi.Text = "Enable Return Of The Shakturi story events and victory conditions";
            this.chkStoryReturnOfTheShakturi.UseVisualStyleBackColor = true;
            this.chkStoryReturnOfTheShakturi.Enter += new System.EventHandler(chkStoryReturnOfTheShakturi_Enter);
            this.picStartNewGameVictoryConditionsImage.Image = (System.Drawing.Image)resources.GetObject("picStartNewGameVictoryConditionsImage.Image");
            this.picStartNewGameVictoryConditionsImage.Location = new System.Drawing.Point(309, 122);
            this.picStartNewGameVictoryConditionsImage.Name = "picStartNewGameVictoryConditionsImage";
            this.picStartNewGameVictoryConditionsImage.Size = new System.Drawing.Size(100, 50);
            this.picStartNewGameVictoryConditionsImage.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.picStartNewGameVictoryConditionsImage.TabIndex = 259;
            this.picStartNewGameVictoryConditionsImage.TabStop = false;
            this.btnStartNewGameStart.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameStart.ClipBackground = false;
            this.btnStartNewGameStart.DelayFrameRefresh = false;
            this.btnStartNewGameStart.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameStart.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameStart.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameStart.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameStart.IntensifyColors = false;
            this.btnStartNewGameStart.Location = new System.Drawing.Point(227, 179);
            this.btnStartNewGameStart.Name = "btnStartNewGameStart";
            this.btnStartNewGameStart.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameStart.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameStart.Size = new System.Drawing.Size(202, 30);
            this.btnStartNewGameStart.TabIndex = 258;
            this.btnStartNewGameStart.TabStop = false;
            this.btnStartNewGameStart.Text = "Start the Game!";
            this.btnStartNewGameStart.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameStart.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameStart.ToggledOn = false;
            this.btnStartNewGameStart.Click += new System.EventHandler(btnStartNewGameStart_Click);
            this.btnStartNewGameVictoryConditionsPrevious.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameVictoryConditionsPrevious.ClipBackground = false;
            this.btnStartNewGameVictoryConditionsPrevious.DelayFrameRefresh = false;
            this.btnStartNewGameVictoryConditionsPrevious.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameVictoryConditionsPrevious.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameVictoryConditionsPrevious.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameVictoryConditionsPrevious.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameVictoryConditionsPrevious.IntensifyColors = false;
            this.btnStartNewGameVictoryConditionsPrevious.Location = new System.Drawing.Point(12, 179);
            this.btnStartNewGameVictoryConditionsPrevious.Name = "btnStartNewGameVictoryConditionsPrevious";
            this.btnStartNewGameVictoryConditionsPrevious.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameVictoryConditionsPrevious.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameVictoryConditionsPrevious.Size = new System.Drawing.Size(197, 30);
            this.btnStartNewGameVictoryConditionsPrevious.TabIndex = 257;
            this.btnStartNewGameVictoryConditionsPrevious.TabStop = false;
            this.btnStartNewGameVictoryConditionsPrevious.Text = "<< Previous: Other Empires";
            this.btnStartNewGameVictoryConditionsPrevious.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameVictoryConditionsPrevious.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameVictoryConditionsPrevious.ToggledOn = false;
            this.btnStartNewGameVictoryConditionsPrevious.Click += new System.EventHandler(btnStartNewGameVictoryConditionsPrevious_Click);
            this.numVictoryTimeLimitYears.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numVictoryTimeLimitYears.Enabled = false;
            this.numVictoryTimeLimitYears.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numVictoryTimeLimitYears.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numVictoryTimeLimitYears.Location = new System.Drawing.Point(225, 94);
            this.numVictoryTimeLimitYears.Maximum = new decimal(new int[4] { 1000, 0, 0, 0 });
            this.numVictoryTimeLimitYears.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numVictoryTimeLimitYears.Name = "numVictoryTimeLimitYears";
            this.numVictoryTimeLimitYears.Size = new System.Drawing.Size(50, 21);
            this.numVictoryTimeLimitYears.TabIndex = 254;
            this.numVictoryTimeLimitYears.Value = new decimal(new int[4] { 10, 0, 0, 0 });
            this.numVictoryTimeLimitYears.Enter += new System.EventHandler(nOoJoHmYfo);
            this.numVictoryTimeStartYears.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numVictoryTimeStartYears.Enabled = false;
            this.numVictoryTimeStartYears.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numVictoryTimeStartYears.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numVictoryTimeStartYears.Location = new System.Drawing.Point(217, 117);
            this.numVictoryTimeStartYears.Maximum = new decimal(new int[4] { 99, 0, 0, 0 });
            this.numVictoryTimeStartYears.Minimum = new decimal(new int[4] { 1, 0, 0, 0 });
            this.numVictoryTimeStartYears.Name = "numVictoryTimeStartYears";
            this.numVictoryTimeStartYears.Size = new System.Drawing.Size(40, 21);
            this.numVictoryTimeStartYears.TabIndex = 256;
            this.numVictoryTimeStartYears.Value = new decimal(new int[4] { 3, 0, 0, 0 });
            this.numVictoryTimeStartYears.Enter += new System.EventHandler(numVictoryTimeStartYears_Enter);
            this.chkVictoryTimeStart.AutoSize = true;
            this.chkVictoryTimeStart.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryTimeStart.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryTimeStart.Location = new System.Drawing.Point(19, 118);
            this.chkVictoryTimeStart.Name = "chkVictoryTimeStart";
            this.chkVictoryTimeStart.Size = new System.Drawing.Size(284, 17);
            this.chkVictoryTimeStart.TabIndex = 255;
            this.chkVictoryTimeStart.Text = "Victory Conditions apply after              years";
            this.chkVictoryTimeStart.UseVisualStyleBackColor = true;
            this.chkVictoryTimeStart.CheckedChanged += new System.EventHandler(chkVictoryTimeStart_CheckedChanged);
            this.chkVictoryTimeStart.Enter += new System.EventHandler(chkVictoryTimeStart_Enter);
            this.chkVictoryTimeLimit.AutoSize = true;
            this.chkVictoryTimeLimit.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkVictoryTimeLimit.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkVictoryTimeLimit.Location = new System.Drawing.Point(19, 95);
            this.chkVictoryTimeLimit.Name = "chkVictoryTimeLimit";
            this.chkVictoryTimeLimit.Size = new System.Drawing.Size(300, 17);
            this.chkVictoryTimeLimit.TabIndex = 253;
            this.chkVictoryTimeLimit.Text = "Time Limit: game finishes after                years";
            this.chkVictoryTimeLimit.UseVisualStyleBackColor = true;
            this.chkVictoryTimeLimit.CheckedChanged += new System.EventHandler(chkVictoryTimeLimit_CheckedChanged);
            this.chkVictoryTimeLimit.Enter += new System.EventHandler(chkVictoryTimeLimit_Enter);
            this.pnlStartNewGameGalaxyMaps.BackColor = System.Drawing.Color.Transparent;
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.lblStartNewGameGalaxyMapsAvailableGalaxies);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.lblStartNewGameGalaxyMapsAvailableFactions);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.pnlStartNewGameGalaxyMapsEmpire);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.ctlStartNewGameGalaxyMapsEmpires);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.pnlStartNewGameGalaxyMapsGalaxy);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.ctlStartNewGameGalaxyMapsGalaxies);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.lblStartNewGameGalaxyMapsExplanation);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.btnStartNewGameGalaxyMapsStart);
            this.pnlStartNewGameGalaxyMaps.Controls.Add(this.btnStartNewGameGalaxyMapsCustom);
            this.pnlStartNewGameGalaxyMaps.Location = new System.Drawing.Point(400, 40);
            this.pnlStartNewGameGalaxyMaps.Name = "pnlStartNewGameGalaxyMaps";
            this.pnlStartNewGameGalaxyMaps.Size = new System.Drawing.Size(500, 500);
            this.pnlStartNewGameGalaxyMaps.TabIndex = 51;
            this.pnlStartNewGameGalaxyMaps.Visible = false;
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.AutoSize = true;
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.Location = new System.Drawing.Point(27, 73);
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.Name = "lblStartNewGameGalaxyMapsAvailableGalaxies";
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.Size = new System.Drawing.Size(108, 13);
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.TabIndex = 280;
            this.lblStartNewGameGalaxyMapsAvailableGalaxies.Text = "Playable Galaxies";
            this.lblStartNewGameGalaxyMapsAvailableFactions.AutoSize = true;
            this.lblStartNewGameGalaxyMapsAvailableFactions.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameGalaxyMapsAvailableFactions.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameGalaxyMapsAvailableFactions.Location = new System.Drawing.Point(28, 240);
            this.lblStartNewGameGalaxyMapsAvailableFactions.Name = "lblStartNewGameGalaxyMapsAvailableFactions";
            this.lblStartNewGameGalaxyMapsAvailableFactions.Size = new System.Drawing.Size(105, 13);
            this.lblStartNewGameGalaxyMapsAvailableFactions.TabIndex = 279;
            this.lblStartNewGameGalaxyMapsAvailableFactions.Text = "Playable Factions";
            this.pnlStartNewGameGalaxyMapsEmpire.Location = new System.Drawing.Point(153, 262);
            this.pnlStartNewGameGalaxyMapsEmpire.Name = "pnlStartNewGameGalaxyMapsEmpire";
            this.pnlStartNewGameGalaxyMapsEmpire.Size = new System.Drawing.Size(200, 100);
            this.pnlStartNewGameGalaxyMapsEmpire.TabIndex = 278;
            this.ctlStartNewGameGalaxyMapsEmpires.Location = new System.Drawing.Point(30, 260);
            this.ctlStartNewGameGalaxyMapsEmpires.Name = "ctlStartNewGameGalaxyMapsEmpires";
            this.ctlStartNewGameGalaxyMapsEmpires.RowTemplateHeight = 20;
            this.ctlStartNewGameGalaxyMapsEmpires.Size = new System.Drawing.Size(100, 100);
            this.ctlStartNewGameGalaxyMapsEmpires.SoundsEnabled = false;
            this.ctlStartNewGameGalaxyMapsEmpires.TabIndex = 277;
            this.ctlStartNewGameGalaxyMapsEmpires.Enter += new System.EventHandler(ctlStartNewGameGalaxyMapsEmpires_Enter);
            this.pnlStartNewGameGalaxyMapsGalaxy.Location = new System.Drawing.Point(146, 95);
            this.pnlStartNewGameGalaxyMapsGalaxy.Name = "pnlStartNewGameGalaxyMapsGalaxy";
            this.pnlStartNewGameGalaxyMapsGalaxy.Size = new System.Drawing.Size(200, 100);
            this.pnlStartNewGameGalaxyMapsGalaxy.TabIndex = 276;
            this.ctlStartNewGameGalaxyMapsGalaxies.Location = new System.Drawing.Point(27, 95);
            this.ctlStartNewGameGalaxyMapsGalaxies.Name = "ctlStartNewGameGalaxyMapsGalaxies";
            this.ctlStartNewGameGalaxyMapsGalaxies.RowTemplateHeight = 20;
            this.ctlStartNewGameGalaxyMapsGalaxies.Size = new System.Drawing.Size(100, 100);
            this.ctlStartNewGameGalaxyMapsGalaxies.SoundsEnabled = false;
            this.ctlStartNewGameGalaxyMapsGalaxies.TabIndex = 275;
            this.ctlStartNewGameGalaxyMapsGalaxies.Enter += new System.EventHandler(ctlStartNewGameGalaxyMapsGalaxies_Enter);
            this.lblStartNewGameGalaxyMapsExplanation.AutoSize = true;
            this.lblStartNewGameGalaxyMapsExplanation.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblStartNewGameGalaxyMapsExplanation.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblStartNewGameGalaxyMapsExplanation.Location = new System.Drawing.Point(24, 24);
            this.lblStartNewGameGalaxyMapsExplanation.Name = "lblStartNewGameGalaxyMapsExplanation";
            this.lblStartNewGameGalaxyMapsExplanation.Size = new System.Drawing.Size(73, 13);
            this.lblStartNewGameGalaxyMapsExplanation.TabIndex = 274;
            this.lblStartNewGameGalaxyMapsExplanation.Text = "Explanation";
            this.btnStartNewGameGalaxyMapsStart.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameGalaxyMapsStart.ClipBackground = false;
            this.btnStartNewGameGalaxyMapsStart.DelayFrameRefresh = false;
            this.btnStartNewGameGalaxyMapsStart.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameGalaxyMapsStart.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameGalaxyMapsStart.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameGalaxyMapsStart.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameGalaxyMapsStart.IntensifyColors = false;
            this.btnStartNewGameGalaxyMapsStart.Location = new System.Drawing.Point(311, 453);
            this.btnStartNewGameGalaxyMapsStart.Name = "btnStartNewGameGalaxyMapsStart";
            this.btnStartNewGameGalaxyMapsStart.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameGalaxyMapsStart.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameGalaxyMapsStart.Size = new System.Drawing.Size(174, 30);
            this.btnStartNewGameGalaxyMapsStart.TabIndex = 241;
            this.btnStartNewGameGalaxyMapsStart.TabStop = false;
            this.btnStartNewGameGalaxyMapsStart.Text = "Play selected Galaxy and Faction >>";
            this.btnStartNewGameGalaxyMapsStart.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameGalaxyMapsStart.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameGalaxyMapsStart.ToggledOn = false;
            this.btnStartNewGameGalaxyMapsStart.Click += new System.EventHandler(btnStartNewGameGalaxyMapsStart_Click);
            this.btnStartNewGameGalaxyMapsCustom.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnStartNewGameGalaxyMapsCustom.ClipBackground = false;
            this.btnStartNewGameGalaxyMapsCustom.DelayFrameRefresh = false;
            this.btnStartNewGameGalaxyMapsCustom.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnStartNewGameGalaxyMapsCustom.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnStartNewGameGalaxyMapsCustom.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnStartNewGameGalaxyMapsCustom.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnStartNewGameGalaxyMapsCustom.IntensifyColors = false;
            this.btnStartNewGameGalaxyMapsCustom.Location = new System.Drawing.Point(311, 17);
            this.btnStartNewGameGalaxyMapsCustom.Name = "btnStartNewGameGalaxyMapsCustom";
            this.btnStartNewGameGalaxyMapsCustom.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnStartNewGameGalaxyMapsCustom.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnStartNewGameGalaxyMapsCustom.Size = new System.Drawing.Size(174, 30);
            this.btnStartNewGameGalaxyMapsCustom.TabIndex = 240;
            this.btnStartNewGameGalaxyMapsCustom.TabStop = false;
            this.btnStartNewGameGalaxyMapsCustom.Text = "No thanks, I want to set up a Custom Game >>";
            this.btnStartNewGameGalaxyMapsCustom.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnStartNewGameGalaxyMapsCustom.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnStartNewGameGalaxyMapsCustom.ToggledOn = false;
            this.btnStartNewGameGalaxyMapsCustom.Click += new System.EventHandler(btnStartNewGameGalaxyMapsCustom_Click);
            this.pnlAbout.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlAbout.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlAbout.BackgroundImage");
            this.pnlAbout.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlAbout.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlAbout.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlAbout.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlAbout.BorderSize = 3;
            this.pnlAbout.Controls.Add(this.pnlAboutCredits);
            this.pnlAbout.Controls.Add(this.upEzpZsgAK);
            this.pnlAbout.Controls.Add(this.btnAboutClose);
            this.pnlAbout.Controls.Add(this.lblAboutTitle);
            this.pnlAbout.Controls.Add(this.picAbout);
            this.pnlAbout.Location = new System.Drawing.Point(864, 692);
            this.pnlAbout.Name = "pnlAbout";
            this.pnlAbout.Size = new System.Drawing.Size(250, 100);
            this.pnlAbout.TabIndex = 91;
            this.pnlAbout.Visible = false;
            this.pnlAboutCredits.DefaultFont = new System.Drawing.Font("Verdana", 12f, System.Drawing.FontStyle.Bold);
            this.pnlAboutCredits.DefaultTextColor = System.Drawing.Color.Yellow;
            this.pnlAboutCredits.Location = new System.Drawing.Point(130, 13);
            this.pnlAboutCredits.Name = "pnlAboutCredits";
            this.pnlAboutCredits.ScrollSpeed = 20.0;
            this.pnlAboutCredits.Size = new System.Drawing.Size(200, 100);
            this.pnlAboutCredits.TabIndex = 97;
            this.upEzpZsgAK.AutoSize = true;
            this.upEzpZsgAK.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.upEzpZsgAK.ForeColor = System.Drawing.Color.White;
            this.upEzpZsgAK.Location = new System.Drawing.Point(165, 46);
            this.upEzpZsgAK.Name = "lblAboutText";
            this.upEzpZsgAK.Size = new System.Drawing.Size(40, 13);
            this.upEzpZsgAK.TabIndex = 81;
            this.upEzpZsgAK.Text = "About";
            this.btnAboutClose.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnAboutClose.ClipBackground = false;
            this.btnAboutClose.DelayFrameRefresh = false;
            this.btnAboutClose.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnAboutClose.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnAboutClose.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnAboutClose.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnAboutClose.IntensifyColors = false;
            this.btnAboutClose.Location = new System.Drawing.Point(162, 13);
            this.btnAboutClose.Name = "btnAboutClose";
            this.btnAboutClose.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnAboutClose.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnAboutClose.Size = new System.Drawing.Size(75, 23);
            this.btnAboutClose.TabIndex = 80;
            this.btnAboutClose.Text = "Close";
            this.btnAboutClose.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnAboutClose.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnAboutClose.ToggledOn = false;
            this.btnAboutClose.Click += new System.EventHandler(btnAboutClose_Click);
            this.lblAboutTitle.AutoSize = true;
            this.lblAboutTitle.BackColor = System.Drawing.Color.Transparent;
            this.lblAboutTitle.Font = new System.Drawing.Font("Verdana", 14.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblAboutTitle.ForeColor = System.Drawing.Color.White;
            this.lblAboutTitle.Location = new System.Drawing.Point(5, 71);
            this.lblAboutTitle.Name = "lblAboutTitle";
            this.lblAboutTitle.Size = new System.Drawing.Size(241, 23);
            this.lblAboutTitle.TabIndex = 7;
            this.lblAboutTitle.Text = "About Distant Worlds";
            this.picAbout.BackColor = System.Drawing.Color.Transparent;
            this.picAbout.Image = (System.Drawing.Image)resources.GetObject("picAbout.Image");
            this.picAbout.Location = new System.Drawing.Point(9, 11);
            this.picAbout.Name = "picAbout";
            this.picAbout.Size = new System.Drawing.Size(115, 50);
            this.picAbout.TabIndex = 0;
            this.picAbout.TabStop = false;
            this.pnlSaveLoadProgress.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlSaveLoadProgress.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlSaveLoadProgress.BackgroundImage");
            this.pnlSaveLoadProgress.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlSaveLoadProgress.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlSaveLoadProgress.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlSaveLoadProgress.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlSaveLoadProgress.BorderSize = 3;
            this.pnlSaveLoadProgress.Controls.Add(this.lblSaveLoadMessage);
            this.pnlSaveLoadProgress.Controls.Add(this.picSaveLoadGalaxy);
            this.pnlSaveLoadProgress.Location = new System.Drawing.Point(18, 74);
            this.pnlSaveLoadProgress.Name = "pnlSaveLoadProgress";
            this.pnlSaveLoadProgress.Size = new System.Drawing.Size(129, 100);
            this.pnlSaveLoadProgress.TabIndex = 74;
            this.pnlSaveLoadProgress.Visible = false;
            this.lblSaveLoadMessage.BackColor = System.Drawing.Color.FromArgb(8, 8, 12);
            this.lblSaveLoadMessage.Location = new System.Drawing.Point(63, 71);
            this.lblSaveLoadMessage.Name = "lblSaveLoadMessage";
            this.lblSaveLoadMessage.Size = new System.Drawing.Size(50, 20);
            this.lblSaveLoadMessage.TabIndex = 3;
            this.picSaveLoadGalaxy.BackColor = System.Drawing.Color.Transparent;
            this.picSaveLoadGalaxy.Image = (System.Drawing.Image)resources.GetObject("picSaveLoadGalaxy.Image");
            this.picSaveLoadGalaxy.Location = new System.Drawing.Point(9, 11);
            this.picSaveLoadGalaxy.Name = "picSaveLoadGalaxy";
            this.picSaveLoadGalaxy.Size = new System.Drawing.Size(115, 50);
            this.picSaveLoadGalaxy.TabIndex = 0;
            this.picSaveLoadGalaxy.TabStop = false;
            this.pnlButtons.BackColor = System.Drawing.Color.FromArgb(128, 128, 0, 255);
            this.pnlButtons.BackColor2 = System.Drawing.Color.FromArgb(128, 70, 0, 140);
            this.pnlButtons.BackColor3 = System.Drawing.Color.FromArgb(128, 32, 0, 64);
            this.pnlButtons.BorderColor = System.Drawing.Color.FromArgb(128, 0, 255);
            this.pnlButtons.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlButtons.BorderWidth = 3;
            this.pnlButtons.Controls.Add(this.menuGroup);
            this.pnlButtons.Controls.Add(this.lnkThemes);
            this.pnlButtons.Controls.Add(this.lnkOptions);
            this.pnlButtons.Controls.Add(this.lnkAbout);
            this.pnlButtons.Controls.Add(this.lnkGalactopedia);
            this.pnlButtons.Controls.Add(this.lnkTutorial);
            this.pnlButtons.Controls.Add(this.lnkPlayScenario);
            this.pnlButtons.Controls.Add(this.lnkCheckForUpdates);
            this.pnlButtons.Controls.Add(this.lnkNewGame);
            this.pnlButtons.Controls.Add(this.lnkLoadGame);
            this.pnlButtons.Controls.Add(this.lnkExit);
            this.pnlButtons.Curvature = 30;
            this.pnlButtons.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlButtons.Location = new System.Drawing.Point(18, 104);
            this.pnlButtons.Margin = new System.Windows.Forms.Padding(0);
            this.pnlButtons.Name = "pnlButtons";
            this.pnlButtons.Size = new System.Drawing.Size(248, 472);
            this.pnlButtons.TabIndex = 6;
            this.pnlButtons.MouseMove += new System.Windows.Forms.MouseEventHandler(pnlButtons_MouseMove);
            this.menuGroup.Controls.Add(this.menuExit);
            this.menuGroup.Controls.Add(this.menuChangeTheme);
            this.menuGroup.Controls.Add(this.menuOptions);
            this.menuGroup.Controls.Add(this.menuLoadGame);
            this.menuGroup.Controls.Add(this.menuStartNewGame);
            this.menuGroup.Controls.Add(this.menuTutorials);
            this.menuGroup.Location = new System.Drawing.Point(15, 216);
            this.menuGroup.Name = "menuGroup";
            this.menuGroup.Size = new System.Drawing.Size(200, 240);
            this.menuGroup.TabIndex = 10;
            this.menuGroup.MouseMove += new System.Windows.Forms.MouseEventHandler(menuGroup_MouseMove);
            this.menuExit.Location = new System.Drawing.Point(17, 199);
            this.menuExit.Name = "menuExit";
            this.menuExit.Size = new System.Drawing.Size(100, 30);
            this.menuExit.TabIndex = 5;
            this.menuExit.Click += new System.EventHandler(menuExit_Click);
            this.menuExit.MouseEnter += new System.EventHandler(lnkExit_MouseEnter);
            this.menuExit.MouseLeave += new System.EventHandler(lnkExit_MouseLeave);
            this.menuExit.MouseMove += new System.Windows.Forms.MouseEventHandler(menuExit_MouseMove);
            this.menuChangeTheme.Location = new System.Drawing.Point(16, 160);
            this.menuChangeTheme.Name = "menuChangeTheme";
            this.menuChangeTheme.Size = new System.Drawing.Size(100, 30);
            this.menuChangeTheme.TabIndex = 4;
            this.menuChangeTheme.Click += new System.EventHandler(menuChangeTheme_Click);
            this.menuChangeTheme.MouseEnter += new System.EventHandler(lnkThemes_MouseEnter);
            this.menuChangeTheme.MouseLeave += new System.EventHandler(lnkThemes_MouseLeave);
            this.menuChangeTheme.MouseMove += new System.Windows.Forms.MouseEventHandler(menuChangeTheme_MouseMove);
            this.menuOptions.Location = new System.Drawing.Point(15, 122);
            this.menuOptions.Name = "menuOptions";
            this.menuOptions.Size = new System.Drawing.Size(100, 30);
            this.menuOptions.TabIndex = 3;
            this.menuOptions.Click += new System.EventHandler(menuOptions_Click);
            this.menuOptions.MouseEnter += new System.EventHandler(lnkOptions_MouseEnter);
            this.menuOptions.MouseLeave += new System.EventHandler(lnkOptions_MouseLeave);
            this.menuOptions.MouseMove += new System.Windows.Forms.MouseEventHandler(menuOptions_MouseMove);
            this.menuLoadGame.Location = new System.Drawing.Point(14, 84);
            this.menuLoadGame.Name = "menuLoadGame";
            this.menuLoadGame.Size = new System.Drawing.Size(100, 30);
            this.menuLoadGame.TabIndex = 2;
            this.menuLoadGame.Click += new System.EventHandler(menuLoadGame_Click);
            this.menuLoadGame.MouseEnter += new System.EventHandler(lnkLoadGame_MouseEnter);
            this.menuLoadGame.MouseLeave += new System.EventHandler(lnkLoadGame_MouseLeave);
            this.menuLoadGame.MouseMove += new System.Windows.Forms.MouseEventHandler(menuLoadGame_MouseMove);
            this.menuStartNewGame.Location = new System.Drawing.Point(14, 47);
            this.menuStartNewGame.Name = "menuStartNewGame";
            this.menuStartNewGame.Size = new System.Drawing.Size(100, 30);
            this.menuStartNewGame.TabIndex = 1;
            this.menuStartNewGame.Click += new System.EventHandler(menuStartNewGame_Click);
            this.menuStartNewGame.MouseEnter += new System.EventHandler(lnkNewGame_MouseEnter);
            this.menuStartNewGame.MouseLeave += new System.EventHandler(lnkNewGame_MouseLeave);
            this.menuStartNewGame.MouseMove += new System.Windows.Forms.MouseEventHandler(menuStartNewGame_MouseMove);
            this.menuTutorials.Location = new System.Drawing.Point(13, 9);
            this.menuTutorials.Name = "menuTutorials";
            this.menuTutorials.Size = new System.Drawing.Size(100, 30);
            this.menuTutorials.TabIndex = 0;
            this.menuTutorials.Click += new System.EventHandler(menuTutorials_Click);
            this.menuTutorials.MouseEnter += new System.EventHandler(lnkTutorial_MouseEnter);
            this.menuTutorials.MouseLeave += new System.EventHandler(lnkTutorial_MouseLeave);
            this.menuTutorials.MouseMove += new System.Windows.Forms.MouseEventHandler(menuTutorials_MouseMove);
            this.lnkThemes.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkThemes.AutoSize = true;
            this.lnkThemes.BackColor = System.Drawing.Color.Transparent;
            this.lnkThemes.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkThemes.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft;
            this.lnkThemes.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkThemes.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkThemes.Location = new System.Drawing.Point(27, 5);
            this.lnkThemes.Name = "lnkThemes";
            this.lnkThemes.Size = new System.Drawing.Size(211, 29);
            this.lnkThemes.TabIndex = 9;
            this.lnkThemes.TabStop = true;
            this.lnkThemes.Text = "Change Theme";
            this.lnkThemes.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkThemes_LinkClicked);
            this.lnkThemes.MouseEnter += new System.EventHandler(lnkThemes_MouseEnter);
            this.lnkThemes.MouseLeave += new System.EventHandler(lnkThemes_MouseLeave);
            this.lnkOptions.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkOptions.AutoSize = true;
            this.lnkOptions.BackColor = System.Drawing.Color.Transparent;
            this.lnkOptions.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkOptions.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkOptions.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkOptions.Location = new System.Drawing.Point(70, 162);
            this.lnkOptions.Name = "lnkOptions";
            this.lnkOptions.Size = new System.Drawing.Size(116, 29);
            this.lnkOptions.TabIndex = 8;
            this.lnkOptions.TabStop = true;
            this.lnkOptions.Text = "Options";
            this.lnkOptions.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkOptions_LinkClicked);
            this.lnkOptions.MouseEnter += new System.EventHandler(lnkOptions_MouseEnter);
            this.lnkOptions.MouseLeave += new System.EventHandler(lnkOptions_MouseLeave);
            this.lnkAbout.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkAbout.AutoSize = true;
            this.lnkAbout.BackColor = System.Drawing.Color.Transparent;
            this.lnkAbout.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkAbout.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkAbout.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkAbout.Location = new System.Drawing.Point(1, 143);
            this.lnkAbout.Name = "lnkAbout";
            this.lnkAbout.Size = new System.Drawing.Size(108, 29);
            this.lnkAbout.TabIndex = 7;
            this.lnkAbout.TabStop = true;
            this.lnkAbout.Text = "Credits";
            this.lnkAbout.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkAbout_LinkClicked);
            this.lnkAbout.MouseEnter += new System.EventHandler(menuCredits_MouseEnter);
            this.lnkAbout.MouseLeave += new System.EventHandler(menuCredits_MouseLeave);
            this.lnkGalactopedia.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkGalactopedia.AutoSize = true;
            this.lnkGalactopedia.BackColor = System.Drawing.Color.Transparent;
            this.lnkGalactopedia.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkGalactopedia.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkGalactopedia.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkGalactopedia.Location = new System.Drawing.Point(25, 98);
            this.lnkGalactopedia.Name = "lnkGalactopedia";
            this.lnkGalactopedia.Size = new System.Drawing.Size(187, 29);
            this.lnkGalactopedia.TabIndex = 6;
            this.lnkGalactopedia.TabStop = true;
            this.lnkGalactopedia.Text = "Galactopedia";
            this.lnkGalactopedia.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkGalactopedia_LinkClicked);
            this.lnkGalactopedia.MouseEnter += new System.EventHandler(menuGalactopedia_MouseEnter);
            this.lnkGalactopedia.MouseLeave += new System.EventHandler(menuGalactopedia_MouseLeave);
            this.lnkTutorial.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorial.AutoSize = true;
            this.lnkTutorial.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorial.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorial.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorial.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorial.Location = new System.Drawing.Point(25, 42);
            this.lnkTutorial.Name = "lnkTutorial";
            this.lnkTutorial.Size = new System.Drawing.Size(131, 29);
            this.lnkTutorial.TabIndex = 5;
            this.lnkTutorial.TabStop = true;
            this.lnkTutorial.Text = "Tutorials";
            this.lnkTutorial.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorial_LinkClicked);
            this.lnkTutorial.MouseEnter += new System.EventHandler(lnkTutorial_MouseEnter);
            this.lnkTutorial.MouseLeave += new System.EventHandler(lnkTutorial_MouseLeave);
            this.lnkPlayScenario.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkPlayScenario.AutoSize = true;
            this.lnkPlayScenario.BackColor = System.Drawing.Color.Transparent;
            this.lnkPlayScenario.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkPlayScenario.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkPlayScenario.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkPlayScenario.Location = new System.Drawing.Point(25, 67);
            this.lnkPlayScenario.Name = "lnkPlayScenario";
            this.lnkPlayScenario.Size = new System.Drawing.Size(163, 29);
            this.lnkPlayScenario.TabIndex = 4;
            this.lnkPlayScenario.TabStop = true;
            this.lnkPlayScenario.Text = "Quick Start";
            this.lnkPlayScenario.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkPlayScenario_LinkClicked);
            this.lnkPlayScenario.MouseEnter += new System.EventHandler(lnkPlayScenario_MouseEnter);
            this.lnkPlayScenario.MouseLeave += new System.EventHandler(lnkPlayScenario_MouseLeave);
            this.lnkCheckForUpdates.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkCheckForUpdates.AutoSize = true;
            this.lnkCheckForUpdates.BackColor = System.Drawing.Color.Transparent;
            this.lnkCheckForUpdates.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkCheckForUpdates.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkCheckForUpdates.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkCheckForUpdates.Location = new System.Drawing.Point(19, 111);
            this.lnkCheckForUpdates.Name = "lnkCheckForUpdates";
            this.lnkCheckForUpdates.Size = new System.Drawing.Size(263, 29);
            this.lnkCheckForUpdates.TabIndex = 3;
            this.lnkCheckForUpdates.TabStop = true;
            this.lnkCheckForUpdates.Text = "Check For Updates";
            this.lnkCheckForUpdates.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkCheckForUpdates_LinkClicked);
            this.lnkCheckForUpdates.MouseEnter += new System.EventHandler(menuCheckForUpdates_MouseEnter);
            this.lnkCheckForUpdates.MouseLeave += new System.EventHandler(menuCheckForUpdates_MouseLeave);
            this.lnkNewGame.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkNewGame.AutoSize = true;
            this.lnkNewGame.BackColor = System.Drawing.Color.Transparent;
            this.lnkNewGame.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkNewGame.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft;
            this.lnkNewGame.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkNewGame.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkNewGame.Location = new System.Drawing.Point(27, 27);
            this.lnkNewGame.Name = "lnkNewGame";
            this.lnkNewGame.Size = new System.Drawing.Size(232, 29);
            this.lnkNewGame.TabIndex = 0;
            this.lnkNewGame.TabStop = true;
            this.lnkNewGame.Text = "Start New Game";
            this.lnkNewGame.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkNewGame_LinkClicked);
            this.lnkNewGame.MouseEnter += new System.EventHandler(lnkNewGame_MouseEnter);
            this.lnkNewGame.MouseLeave += new System.EventHandler(lnkNewGame_MouseLeave);
            this.lnkLoadGame.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkLoadGame.AutoSize = true;
            this.lnkLoadGame.BackColor = System.Drawing.Color.Transparent;
            this.lnkLoadGame.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkLoadGame.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkLoadGame.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkLoadGame.Location = new System.Drawing.Point(24, 82);
            this.lnkLoadGame.Name = "lnkLoadGame";
            this.lnkLoadGame.Size = new System.Drawing.Size(161, 29);
            this.lnkLoadGame.TabIndex = 1;
            this.lnkLoadGame.TabStop = true;
            this.lnkLoadGame.Text = "Load Game";
            this.lnkLoadGame.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkLoadGame_LinkClicked);
            this.lnkLoadGame.MouseEnter += new System.EventHandler(lnkLoadGame_MouseEnter);
            this.lnkLoadGame.MouseLeave += new System.EventHandler(lnkLoadGame_MouseLeave);
            this.lnkExit.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkExit.AutoSize = true;
            this.lnkExit.BackColor = System.Drawing.Color.Transparent;
            this.lnkExit.Font = new System.Drawing.Font("Verdana", 18f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkExit.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkExit.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkExit.Location = new System.Drawing.Point(27, 185);
            this.lnkExit.Name = "lnkExit";
            this.lnkExit.Size = new System.Drawing.Size(64, 29);
            this.lnkExit.TabIndex = 2;
            this.lnkExit.TabStop = true;
            this.lnkExit.Text = "Exit";
            this.lnkExit.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkExit_LinkClicked);
            this.lnkExit.MouseEnter += new System.EventHandler(lnkExit_MouseEnter);
            this.lnkExit.MouseLeave += new System.EventHandler(lnkExit_MouseLeave);
            this.pnlEncyclopedia.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlEncyclopedia.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlEncyclopedia.BackgroundImage");
            this.pnlEncyclopedia.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlEncyclopedia.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlEncyclopedia.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlEncyclopedia.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlEncyclopedia.BorderSize = 3;
            this.pnlEncyclopedia.Controls.Add(this.chkEncyclopediaShowAtStart);
            this.pnlEncyclopedia.Controls.Add(this.pnlEncyclopediaTopics);
            this.pnlEncyclopedia.Controls.Add(this.btnEncyclopediaHome);
            this.pnlEncyclopedia.Controls.Add(this.webEncyclopediaContent);
            this.pnlEncyclopedia.Controls.Add(this.pnlEncyclopediaRelatedItems);
            this.pnlEncyclopedia.Controls.Add(this.btnEncyclopediaBack);
            this.pnlEncyclopedia.Controls.Add(this.btnEncyclopediaForward);
            this.pnlEncyclopedia.HeaderIcon = (System.Drawing.Image)resources.GetObject("pnlEncyclopedia.HeaderIcon");
            this.pnlEncyclopedia.HeaderTitle = "Galactopedia";
            this.pnlEncyclopedia.Location = new System.Drawing.Point(212, 532);
            this.pnlEncyclopedia.Name = "pnlEncyclopedia";
            this.pnlEncyclopedia.Size = new System.Drawing.Size(203, 217);
            this.pnlEncyclopedia.TabIndex = 90;
            this.pnlEncyclopedia.Visible = false;
            this.pnlEncyclopedia.CloseButtonClicked += new System.EventHandler(pnlEncyclopedia_CloseButtonClicked);
            this.chkEncyclopediaShowAtStart.AutoSize = true;
            this.chkEncyclopediaShowAtStart.BackColor = System.Drawing.Color.Transparent;
            this.chkEncyclopediaShowAtStart.Checked = true;
            this.chkEncyclopediaShowAtStart.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkEncyclopediaShowAtStart.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkEncyclopediaShowAtStart.ForeColor = System.Drawing.Color.White;
            this.chkEncyclopediaShowAtStart.Location = new System.Drawing.Point(9, 196);
            this.chkEncyclopediaShowAtStart.Name = "chkEncyclopediaShowAtStart";
            this.chkEncyclopediaShowAtStart.Size = new System.Drawing.Size(182, 17);
            this.chkEncyclopediaShowAtStart.TabIndex = 63;
            this.chkEncyclopediaShowAtStart.Text = "Show this screen at startup";
            this.chkEncyclopediaShowAtStart.UseVisualStyleBackColor = false;
            this.pnlEncyclopediaTopics.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlEncyclopediaTopics.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.pnlEncyclopediaTopics.ForeColor = System.Drawing.Color.White;
            this.pnlEncyclopediaTopics.Location = new System.Drawing.Point(136, 57);
            this.pnlEncyclopediaTopics.Name = "pnlEncyclopediaTopics";
            this.pnlEncyclopediaTopics.Size = new System.Drawing.Size(60, 80);
            this.pnlEncyclopediaTopics.TabIndex = 62;
            this.btnEncyclopediaHome.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnEncyclopediaHome.ClipBackground = false;
            this.btnEncyclopediaHome.DelayFrameRefresh = false;
            this.btnEncyclopediaHome.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnEncyclopediaHome.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnEncyclopediaHome.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnEncyclopediaHome.Image = (System.Drawing.Image)resources.GetObject("btnEncyclopediaHome.Image");
            this.btnEncyclopediaHome.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnEncyclopediaHome.IntensifyColors = false;
            this.btnEncyclopediaHome.Location = new System.Drawing.Point(147, 152);
            this.btnEncyclopediaHome.Name = "btnEncyclopediaHome";
            this.btnEncyclopediaHome.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnEncyclopediaHome.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnEncyclopediaHome.Size = new System.Drawing.Size(40, 28);
            this.btnEncyclopediaHome.TabIndex = 61;
            this.btnEncyclopediaHome.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnEncyclopediaHome.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnEncyclopediaHome.ToggledOn = false;
            this.btnEncyclopediaHome.Click += new System.EventHandler(btnEncyclopediaHome_Click);
            this.webEncyclopediaContent.AllowWebBrowserDrop = false;
            this.webEncyclopediaContent.Location = new System.Drawing.Point(9, 76);
            this.webEncyclopediaContent.MinimumSize = new System.Drawing.Size(20, 20);
            this.webEncyclopediaContent.Name = "webEncyclopediaContent";
            this.webEncyclopediaContent.ScriptErrorsSuppressed = true;
            this.webEncyclopediaContent.Size = new System.Drawing.Size(116, 57);
            this.webEncyclopediaContent.TabIndex = 60;
            this.webEncyclopediaContent.WebBrowserShortcutsEnabled = false;
            this.pnlEncyclopediaRelatedItems.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlEncyclopediaRelatedItems.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlEncyclopediaRelatedItems.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlEncyclopediaRelatedItems.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlEncyclopediaRelatedItems.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlEncyclopediaRelatedItems.BorderWidth = 2;
            this.pnlEncyclopediaRelatedItems.Curvature = 20;
            this.pnlEncyclopediaRelatedItems.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlEncyclopediaRelatedItems.Items = null;
            this.pnlEncyclopediaRelatedItems.Location = new System.Drawing.Point(10, 140);
            this.pnlEncyclopediaRelatedItems.Margin = new System.Windows.Forms.Padding(0);
            this.pnlEncyclopediaRelatedItems.Name = "pnlEncyclopediaRelatedItems";
            this.pnlEncyclopediaRelatedItems.Size = new System.Drawing.Size(125, 48);
            this.pnlEncyclopediaRelatedItems.TabIndex = 59;
            this.btnEncyclopediaBack.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnEncyclopediaBack.ClipBackground = false;
            this.btnEncyclopediaBack.DelayFrameRefresh = false;
            this.btnEncyclopediaBack.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnEncyclopediaBack.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnEncyclopediaBack.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnEncyclopediaBack.Image = (System.Drawing.Image)resources.GetObject("btnEncyclopediaBack.Image");
            this.btnEncyclopediaBack.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnEncyclopediaBack.IntensifyColors = false;
            this.btnEncyclopediaBack.Location = new System.Drawing.Point(9, 43);
            this.btnEncyclopediaBack.Name = "btnEncyclopediaBack";
            this.btnEncyclopediaBack.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnEncyclopediaBack.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnEncyclopediaBack.Size = new System.Drawing.Size(40, 28);
            this.btnEncyclopediaBack.TabIndex = 56;
            this.btnEncyclopediaBack.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnEncyclopediaBack.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnEncyclopediaBack.ToggledOn = false;
            this.btnEncyclopediaBack.Click += new System.EventHandler(btnEncyclopediaBack_Click);
            this.btnEncyclopediaForward.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnEncyclopediaForward.ClipBackground = false;
            this.btnEncyclopediaForward.DelayFrameRefresh = false;
            this.btnEncyclopediaForward.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnEncyclopediaForward.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnEncyclopediaForward.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnEncyclopediaForward.Image = (System.Drawing.Image)resources.GetObject("btnEncyclopediaForward.Image");
            this.btnEncyclopediaForward.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnEncyclopediaForward.IntensifyColors = false;
            this.btnEncyclopediaForward.Location = new System.Drawing.Point(57, 42);
            this.btnEncyclopediaForward.Name = "btnEncyclopediaForward";
            this.btnEncyclopediaForward.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnEncyclopediaForward.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnEncyclopediaForward.Size = new System.Drawing.Size(40, 28);
            this.btnEncyclopediaForward.TabIndex = 55;
            this.btnEncyclopediaForward.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnEncyclopediaForward.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnEncyclopediaForward.ToggledOn = false;
            this.btnEncyclopediaForward.Click += new System.EventHandler(btnEncyclopediaForward_Click);
            this.pnlGameOptionsAdvancedDisplaySettings.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlGameOptionsAdvancedDisplaySettings.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlGameOptionsAdvancedDisplaySettings.BackgroundImage");
            this.pnlGameOptionsAdvancedDisplaySettings.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlGameOptionsAdvancedDisplaySettings.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlGameOptionsAdvancedDisplaySettings.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlGameOptionsAdvancedDisplaySettings.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlGameOptionsAdvancedDisplaySettings.BorderSize = 3;
            this.pnlGameOptionsAdvancedDisplaySettings.Controls.Add(this.chkGameOptionsGalaxyDisplayCleanGalaxyView);
            this.pnlGameOptionsAdvancedDisplaySettings.Controls.Add(this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons);
            this.pnlGameOptionsAdvancedDisplaySettings.Controls.Add(this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail);
            this.pnlGameOptionsAdvancedDisplaySettings.Controls.Add(this.chkOptionsShowSystemNebulae);
            this.pnlGameOptionsAdvancedDisplaySettings.Controls.Add(this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate);
            this.pnlGameOptionsAdvancedDisplaySettings.HeaderIcon = null;
            this.pnlGameOptionsAdvancedDisplaySettings.HeaderTitle = "Advanced Display Settings";
            this.pnlGameOptionsAdvancedDisplaySettings.Location = new System.Drawing.Point(377, 348);
            this.pnlGameOptionsAdvancedDisplaySettings.Name = "pnlGameOptionsAdvancedDisplaySettings";
            this.pnlGameOptionsAdvancedDisplaySettings.Size = new System.Drawing.Size(300, 410);
            this.pnlGameOptionsAdvancedDisplaySettings.TabIndex = 124;
            this.pnlGameOptionsAdvancedDisplaySettings.Visible = false;
            this.pnlGameOptionsAdvancedDisplaySettings.CloseButtonClicked += new System.EventHandler(pnlGameOptionsAdvancedDisplaySettings_CloseButtonClicked);
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.Location = new System.Drawing.Point(12, 359);
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.Name = "chkGameOptionsGalaxyDisplayCleanGalaxyView";
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.Size = new System.Drawing.Size(133, 17);
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.TabIndex = 75;
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.Text = "Clean Galaxy view";
            this.chkGameOptionsGalaxyDisplayCleanGalaxyView.UseVisualStyleBackColor = false;
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.BackColor = System.Drawing.Color.Transparent;
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayAlwaysPirates);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayColonyShips);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayConstructionShips);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplaySpacePorts);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayExplorationShips);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayResupplyShips);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayOtherBases);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayCivilianShips);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayFleets);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Controls.Add(this.chkGameOptionsGalaxyDisplayMilitaryShips);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Location = new System.Drawing.Point(12, 159);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Name = "grpGameOptionsAdvancedDisplaySettingsGalaxyIcons";
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Size = new System.Drawing.Size(274, 191);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.TabIndex = 70;
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.TabStop = false;
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Text = "Galaxy View - Ship Display";
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.Location = new System.Drawing.Point(10, 167);
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.Name = "chkGameOptionsGalaxyDisplayAlwaysPirates";
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.Size = new System.Drawing.Size(142, 17);
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.TabIndex = 80;
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.Text = "Always show Pirates";
            this.chkGameOptionsGalaxyDisplayAlwaysPirates.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayColonyShips.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayColonyShips.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayColonyShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayColonyShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayColonyShips.Location = new System.Drawing.Point(136, 37);
            this.chkGameOptionsGalaxyDisplayColonyShips.Name = "chkGameOptionsGalaxyDisplayColonyShips";
            this.chkGameOptionsGalaxyDisplayColonyShips.Size = new System.Drawing.Size(99, 17);
            this.chkGameOptionsGalaxyDisplayColonyShips.TabIndex = 79;
            this.chkGameOptionsGalaxyDisplayColonyShips.Text = "Colony ships";
            this.chkGameOptionsGalaxyDisplayColonyShips.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Location = new System.Drawing.Point(10, 148);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Name = "chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips";
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Size = new System.Drawing.Size(220, 17);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.TabIndex = 78;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Text = "Always show enemy Military ships";
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Location = new System.Drawing.Point(10, 129);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Name = "chkGameOptionsGalaxyDisplayAlwaysEnemyFleets";
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Size = new System.Drawing.Size(179, 17);
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.TabIndex = 77;
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Text = "Always show enemy Fleets";
            this.chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayConstructionShips.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayConstructionShips.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayConstructionShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayConstructionShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayConstructionShips.Location = new System.Drawing.Point(136, 56);
            this.chkGameOptionsGalaxyDisplayConstructionShips.Name = "chkGameOptionsGalaxyDisplayConstructionShips";
            this.chkGameOptionsGalaxyDisplayConstructionShips.Size = new System.Drawing.Size(131, 17);
            this.chkGameOptionsGalaxyDisplayConstructionShips.TabIndex = 76;
            this.chkGameOptionsGalaxyDisplayConstructionShips.Text = "Construction ships";
            this.chkGameOptionsGalaxyDisplayConstructionShips.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplaySpacePorts.AutoSize = true;
            this.chkGameOptionsGalaxyDisplaySpacePorts.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplaySpacePorts.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplaySpacePorts.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplaySpacePorts.Location = new System.Drawing.Point(10, 75);
            this.chkGameOptionsGalaxyDisplaySpacePorts.Name = "chkGameOptionsGalaxyDisplaySpacePorts";
            this.chkGameOptionsGalaxyDisplaySpacePorts.Size = new System.Drawing.Size(94, 17);
            this.chkGameOptionsGalaxyDisplaySpacePorts.TabIndex = 75;
            this.chkGameOptionsGalaxyDisplaySpacePorts.Text = "Space ports";
            this.chkGameOptionsGalaxyDisplaySpacePorts.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayExplorationShips.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayExplorationShips.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayExplorationShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayExplorationShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayExplorationShips.Location = new System.Drawing.Point(136, 18);
            this.chkGameOptionsGalaxyDisplayExplorationShips.Name = "chkGameOptionsGalaxyDisplayExplorationShips";
            this.chkGameOptionsGalaxyDisplayExplorationShips.Size = new System.Drawing.Size(123, 17);
            this.chkGameOptionsGalaxyDisplayExplorationShips.TabIndex = 74;
            this.chkGameOptionsGalaxyDisplayExplorationShips.Text = "Exploration ships";
            this.chkGameOptionsGalaxyDisplayExplorationShips.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayResupplyShips.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayResupplyShips.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayResupplyShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayResupplyShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayResupplyShips.Location = new System.Drawing.Point(10, 37);
            this.chkGameOptionsGalaxyDisplayResupplyShips.Name = "chkGameOptionsGalaxyDisplayResupplyShips";
            this.chkGameOptionsGalaxyDisplayResupplyShips.Size = new System.Drawing.Size(111, 17);
            this.chkGameOptionsGalaxyDisplayResupplyShips.TabIndex = 73;
            this.chkGameOptionsGalaxyDisplayResupplyShips.Text = "Resupply ships";
            this.chkGameOptionsGalaxyDisplayResupplyShips.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayOtherBases.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayOtherBases.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayOtherBases.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayOtherBases.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayOtherBases.Location = new System.Drawing.Point(10, 94);
            this.chkGameOptionsGalaxyDisplayOtherBases.Name = "chkGameOptionsGalaxyDisplayOtherBases";
            this.chkGameOptionsGalaxyDisplayOtherBases.Size = new System.Drawing.Size(95, 17);
            this.chkGameOptionsGalaxyDisplayOtherBases.TabIndex = 72;
            this.chkGameOptionsGalaxyDisplayOtherBases.Text = "Other bases";
            this.chkGameOptionsGalaxyDisplayOtherBases.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayCivilianShips.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayCivilianShips.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayCivilianShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayCivilianShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayCivilianShips.Location = new System.Drawing.Point(136, 75);
            this.chkGameOptionsGalaxyDisplayCivilianShips.Name = "chkGameOptionsGalaxyDisplayCivilianShips";
            this.chkGameOptionsGalaxyDisplayCivilianShips.Size = new System.Drawing.Size(101, 17);
            this.chkGameOptionsGalaxyDisplayCivilianShips.TabIndex = 71;
            this.chkGameOptionsGalaxyDisplayCivilianShips.Text = "Civilian ships";
            this.chkGameOptionsGalaxyDisplayCivilianShips.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayFleets.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayFleets.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayFleets.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayFleets.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayFleets.Location = new System.Drawing.Point(10, 18);
            this.chkGameOptionsGalaxyDisplayFleets.Name = "chkGameOptionsGalaxyDisplayFleets";
            this.chkGameOptionsGalaxyDisplayFleets.Size = new System.Drawing.Size(59, 17);
            this.chkGameOptionsGalaxyDisplayFleets.TabIndex = 70;
            this.chkGameOptionsGalaxyDisplayFleets.Text = "Fleets";
            this.chkGameOptionsGalaxyDisplayFleets.UseVisualStyleBackColor = false;
            this.chkGameOptionsGalaxyDisplayMilitaryShips.AutoSize = true;
            this.chkGameOptionsGalaxyDisplayMilitaryShips.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsGalaxyDisplayMilitaryShips.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsGalaxyDisplayMilitaryShips.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsGalaxyDisplayMilitaryShips.Location = new System.Drawing.Point(10, 56);
            this.chkGameOptionsGalaxyDisplayMilitaryShips.Name = "chkGameOptionsGalaxyDisplayMilitaryShips";
            this.chkGameOptionsGalaxyDisplayMilitaryShips.Size = new System.Drawing.Size(100, 17);
            this.chkGameOptionsGalaxyDisplayMilitaryShips.TabIndex = 69;
            this.chkGameOptionsGalaxyDisplayMilitaryShips.Text = "Military ships";
            this.chkGameOptionsGalaxyDisplayMilitaryShips.UseVisualStyleBackColor = false;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.BackColor2 = System.Drawing.Color.FromArgb(36, 35, 40);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Curvature = 10;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LabelText = "System Nebulae Detail";
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LabelWidth = 100;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LinkText = null;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LinkWidth = 0;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Location = new System.Drawing.Point(13, 109);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Margin = new System.Windows.Forms.Padding(0);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Name = "tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail";
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Size = new System.Drawing.Size(270, 42);
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.SliderOffset = 25;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.TabIndex = 68;
            this.tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Value = 0;
            this.chkOptionsShowSystemNebulae.AutoSize = true;
            this.chkOptionsShowSystemNebulae.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsShowSystemNebulae.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsShowSystemNebulae.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsShowSystemNebulae.Location = new System.Drawing.Point(12, 82);
            this.chkOptionsShowSystemNebulae.Name = "chkOptionsShowSystemNebulae";
            this.chkOptionsShowSystemNebulae.Size = new System.Drawing.Size(222, 17);
            this.chkOptionsShowSystemNebulae.TabIndex = 64;
            this.chkOptionsShowSystemNebulae.Text = "Display nebulae clouds in systems";
            this.chkOptionsShowSystemNebulae.UseVisualStyleBackColor = false;
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.BackColor = System.Drawing.Color.Transparent;
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Controls.Add(this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Controls.Add(this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Controls.Add(this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Location = new System.Drawing.Point(12, 10);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Name = "grpGameOptionsAdvancedDisplaySettingsMaximumFramerate";
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Size = new System.Drawing.Size(274, 50);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.TabIndex = 67;
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.TabStop = false;
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Text = "Maximum Framerate";
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Location = new System.Drawing.Point(107, 18);
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Minimum = new decimal(new int[4] { 10, 0, 0, 0 });
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Name = "numGameOptionsAdvancedDisplaySettingsMaximumFramerate";
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Size = new System.Drawing.Size(45, 21);
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.TabIndex = 67;
            this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Value = new decimal(new int[4] { 50, 0, 0, 0 });
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.AutoSize = true;
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.BackColor = System.Drawing.Color.Transparent;
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Location = new System.Drawing.Point(8, 20);
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Name = "chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited";
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Size = new System.Drawing.Size(79, 17);
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.TabIndex = 69;
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Text = "Unlimited";
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.UseVisualStyleBackColor = false;
            this.chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.CheckedChanged += new System.EventHandler(chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited_CheckedChanged);
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.AutoSize = true;
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Location = new System.Drawing.Point(157, 21);
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Name = "lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS";
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Size = new System.Drawing.Size(24, 13);
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.TabIndex = 68;
            this.lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Text = "fps";
            this.pnlQuickStart.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlQuickStart.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlQuickStart.BackgroundImage");
            this.pnlQuickStart.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlQuickStart.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlQuickStart.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlQuickStart.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlQuickStart.BorderSize = 3;
            this.pnlQuickStart.Controls.Add(this.radioSovereignTerritoriesMinorFaction);
            this.pnlQuickStart.Controls.Add(this.radioSovereignTerritoriesRegionalRuler);
            this.pnlQuickStart.Controls.Add(this.radioGalacticRepublicWildFrontiers);
            this.pnlQuickStart.Controls.Add(this.radioGalacticRepublicSupremeRuler);
            this.pnlQuickStart.Controls.Add(this.radioFullyDevelopedLarge);
            this.pnlQuickStart.Controls.Add(this.radioFullyDevelopedSmall);
            this.pnlQuickStart.Controls.Add(this.radioFullyDevelopedStandard);
            this.pnlQuickStart.Controls.Add(this.radioExpandingFromTheCore);
            this.pnlQuickStart.Controls.Add(this.radioExpandingSettlements);
            this.pnlQuickStart.Controls.Add(this.radioSmall);
            this.pnlQuickStart.Controls.Add(this.radioRandom);
            this.pnlQuickStart.Controls.Add(this.radioConflict);
            this.pnlQuickStart.Controls.Add(this.radioRingRace);
            this.pnlQuickStart.Controls.Add(this.radioEpic);
            this.pnlQuickStart.Controls.Add(this.radioClassicRebels);
            this.pnlQuickStart.Controls.Add(this.pnlQuickStartDescription);
            this.pnlQuickStart.Controls.Add(this.btnQuickStart);
            this.pnlQuickStart.Controls.Add(this.btnQuickStartCancel);
            this.pnlQuickStart.Controls.Add(this.radioClassicEmpire);
            this.pnlQuickStart.HeaderIcon = null;
            this.pnlQuickStart.HeaderTitle = "Quick Start";
            this.pnlQuickStart.Location = new System.Drawing.Point(160, 529);
            this.pnlQuickStart.Name = "pnlQuickStart";
            this.pnlQuickStart.Size = new System.Drawing.Size(696, 227);
            this.pnlQuickStart.TabIndex = 77;
            this.pnlQuickStart.Visible = false;
            this.pnlQuickStart.CloseButtonClicked += new System.EventHandler(pnlQuickStart_CloseButtonClicked);
            this.radioSovereignTerritoriesMinorFaction.AutoSize = true;
            this.radioSovereignTerritoriesMinorFaction.BackColor = System.Drawing.Color.Transparent;
            this.radioSovereignTerritoriesMinorFaction.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioSovereignTerritoriesMinorFaction.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioSovereignTerritoriesMinorFaction.Location = new System.Drawing.Point(445, 158);
            this.radioSovereignTerritoriesMinorFaction.Name = "radioSovereignTerritoriesMinorFaction";
            this.radioSovereignTerritoriesMinorFaction.Size = new System.Drawing.Size(234, 17);
            this.radioSovereignTerritoriesMinorFaction.TabIndex = 213;
            this.radioSovereignTerritoriesMinorFaction.TabStop = true;
            this.radioSovereignTerritoriesMinorFaction.Text = "Sovereign Territories - Minor Faction";
            this.radioSovereignTerritoriesMinorFaction.UseVisualStyleBackColor = false;
            this.radioSovereignTerritoriesMinorFaction.CheckedChanged += new System.EventHandler(radioSovereignTerritoriesMinorFaction_CheckedChanged);
            this.radioSovereignTerritoriesRegionalRuler.AutoSize = true;
            this.radioSovereignTerritoriesRegionalRuler.BackColor = System.Drawing.Color.Transparent;
            this.radioSovereignTerritoriesRegionalRuler.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioSovereignTerritoriesRegionalRuler.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioSovereignTerritoriesRegionalRuler.Location = new System.Drawing.Point(445, 135);
            this.radioSovereignTerritoriesRegionalRuler.Name = "radioSovereignTerritoriesRegionalRuler";
            this.radioSovereignTerritoriesRegionalRuler.Size = new System.Drawing.Size(242, 17);
            this.radioSovereignTerritoriesRegionalRuler.TabIndex = 212;
            this.radioSovereignTerritoriesRegionalRuler.TabStop = true;
            this.radioSovereignTerritoriesRegionalRuler.Text = "Sovereign Territories - Regional Ruler";
            this.radioSovereignTerritoriesRegionalRuler.UseVisualStyleBackColor = false;
            this.radioSovereignTerritoriesRegionalRuler.CheckedChanged += new System.EventHandler(radioSovereignTerritoriesRegionalRuler_CheckedChanged);
            this.radioGalacticRepublicWildFrontiers.AutoSize = true;
            this.radioGalacticRepublicWildFrontiers.BackColor = System.Drawing.Color.Transparent;
            this.radioGalacticRepublicWildFrontiers.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioGalacticRepublicWildFrontiers.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioGalacticRepublicWildFrontiers.Location = new System.Drawing.Point(445, 112);
            this.radioGalacticRepublicWildFrontiers.Name = "radioGalacticRepublicWildFrontiers";
            this.radioGalacticRepublicWildFrontiers.Size = new System.Drawing.Size(213, 17);
            this.radioGalacticRepublicWildFrontiers.TabIndex = 211;
            this.radioGalacticRepublicWildFrontiers.TabStop = true;
            this.radioGalacticRepublicWildFrontiers.Text = "Galactic Republic - Wild Frontiers";
            this.radioGalacticRepublicWildFrontiers.UseVisualStyleBackColor = false;
            this.radioGalacticRepublicWildFrontiers.CheckedChanged += new System.EventHandler(radioGalacticRepublicWildFrontiers_CheckedChanged);
            this.radioGalacticRepublicSupremeRuler.AutoSize = true;
            this.radioGalacticRepublicSupremeRuler.BackColor = System.Drawing.Color.Transparent;
            this.radioGalacticRepublicSupremeRuler.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioGalacticRepublicSupremeRuler.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioGalacticRepublicSupremeRuler.Location = new System.Drawing.Point(445, 90);
            this.radioGalacticRepublicSupremeRuler.Name = "radioGalacticRepublicSupremeRuler";
            this.radioGalacticRepublicSupremeRuler.Size = new System.Drawing.Size(221, 17);
            this.radioGalacticRepublicSupremeRuler.TabIndex = 210;
            this.radioGalacticRepublicSupremeRuler.TabStop = true;
            this.radioGalacticRepublicSupremeRuler.Text = "Galactic Republic - Supreme Ruler";
            this.radioGalacticRepublicSupremeRuler.UseVisualStyleBackColor = false;
            this.radioGalacticRepublicSupremeRuler.CheckedChanged += new System.EventHandler(radioGalacticRepublicSupremeRuler_CheckedChanged);
            this.radioFullyDevelopedLarge.AutoSize = true;
            this.radioFullyDevelopedLarge.BackColor = System.Drawing.Color.Transparent;
            this.radioFullyDevelopedLarge.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioFullyDevelopedLarge.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioFullyDevelopedLarge.Location = new System.Drawing.Point(445, 67);
            this.radioFullyDevelopedLarge.Name = "radioFullyDevelopedLarge";
            this.radioFullyDevelopedLarge.Size = new System.Drawing.Size(161, 17);
            this.radioFullyDevelopedLarge.TabIndex = 209;
            this.radioFullyDevelopedLarge.TabStop = true;
            this.radioFullyDevelopedLarge.Text = "Fully Developed - Large";
            this.radioFullyDevelopedLarge.UseVisualStyleBackColor = false;
            this.radioFullyDevelopedLarge.CheckedChanged += new System.EventHandler(radioFullyDevelopedLarge_CheckedChanged);
            this.radioFullyDevelopedSmall.AutoSize = true;
            this.radioFullyDevelopedSmall.BackColor = System.Drawing.Color.Transparent;
            this.radioFullyDevelopedSmall.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioFullyDevelopedSmall.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioFullyDevelopedSmall.Location = new System.Drawing.Point(445, 22);
            this.radioFullyDevelopedSmall.Name = "radioFullyDevelopedSmall";
            this.radioFullyDevelopedSmall.Size = new System.Drawing.Size(161, 17);
            this.radioFullyDevelopedSmall.TabIndex = 207;
            this.radioFullyDevelopedSmall.TabStop = true;
            this.radioFullyDevelopedSmall.Text = "Fully Developed - Small";
            this.radioFullyDevelopedSmall.UseVisualStyleBackColor = false;
            this.radioFullyDevelopedSmall.CheckedChanged += new System.EventHandler(radioFullyDevelopedSmall_CheckedChanged);
            this.radioFullyDevelopedStandard.AutoSize = true;
            this.radioFullyDevelopedStandard.BackColor = System.Drawing.Color.Transparent;
            this.radioFullyDevelopedStandard.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioFullyDevelopedStandard.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioFullyDevelopedStandard.Location = new System.Drawing.Point(445, 45);
            this.radioFullyDevelopedStandard.Name = "radioFullyDevelopedStandard";
            this.radioFullyDevelopedStandard.Size = new System.Drawing.Size(181, 17);
            this.radioFullyDevelopedStandard.TabIndex = 208;
            this.radioFullyDevelopedStandard.TabStop = true;
            this.radioFullyDevelopedStandard.Text = "Fully Developed - Standard";
            this.radioFullyDevelopedStandard.UseVisualStyleBackColor = false;
            this.radioFullyDevelopedStandard.CheckedChanged += new System.EventHandler(radioFullyDevelopedStandard_CheckedChanged);
            this.radioExpandingFromTheCore.AutoSize = true;
            this.radioExpandingFromTheCore.BackColor = System.Drawing.Color.Transparent;
            this.radioExpandingFromTheCore.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioExpandingFromTheCore.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioExpandingFromTheCore.Location = new System.Drawing.Point(226, 32);
            this.radioExpandingFromTheCore.Name = "radioExpandingFromTheCore";
            this.radioExpandingFromTheCore.Size = new System.Drawing.Size(169, 17);
            this.radioExpandingFromTheCore.TabIndex = 206;
            this.radioExpandingFromTheCore.TabStop = true;
            this.radioExpandingFromTheCore.Text = "Expanding from the Core";
            this.radioExpandingFromTheCore.UseVisualStyleBackColor = false;
            this.radioExpandingFromTheCore.CheckedChanged += new System.EventHandler(radioExpandingFromTheCore_CheckedChanged);
            this.radioExpandingSettlements.AutoSize = true;
            this.radioExpandingSettlements.BackColor = System.Drawing.Color.Transparent;
            this.radioExpandingSettlements.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioExpandingSettlements.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioExpandingSettlements.Location = new System.Drawing.Point(226, 9);
            this.radioExpandingSettlements.Name = "radioExpandingSettlements";
            this.radioExpandingSettlements.Size = new System.Drawing.Size(156, 17);
            this.radioExpandingSettlements.TabIndex = 205;
            this.radioExpandingSettlements.TabStop = true;
            this.radioExpandingSettlements.Text = "Expanding Settlements";
            this.radioExpandingSettlements.UseVisualStyleBackColor = false;
            this.radioExpandingSettlements.CheckedChanged += new System.EventHandler(radioExpandingSettlements_CheckedChanged);
            this.radioSmall.AutoSize = true;
            this.radioSmall.BackColor = System.Drawing.Color.Transparent;
            this.radioSmall.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioSmall.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioSmall.Location = new System.Drawing.Point(13, 57);
            this.radioSmall.Name = "radioSmall";
            this.radioSmall.Size = new System.Drawing.Size(48, 17);
            this.radioSmall.TabIndex = 201;
            this.radioSmall.TabStop = true;
            this.radioSmall.Text = "Fast";
            this.radioSmall.UseVisualStyleBackColor = false;
            this.radioSmall.CheckedChanged += new System.EventHandler(radioSmall_CheckedChanged);
            this.radioRandom.AutoSize = true;
            this.radioRandom.BackColor = System.Drawing.Color.Transparent;
            this.radioRandom.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioRandom.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioRandom.Location = new System.Drawing.Point(13, 34);
            this.radioRandom.Name = "radioRandom";
            this.radioRandom.Size = new System.Drawing.Size(72, 17);
            this.radioRandom.TabIndex = 200;
            this.radioRandom.TabStop = true;
            this.radioRandom.Text = "Random";
            this.radioRandom.UseVisualStyleBackColor = false;
            this.radioRandom.CheckedChanged += new System.EventHandler(radioRandom_CheckedChanged);
            this.radioConflict.AutoSize = true;
            this.radioConflict.BackColor = System.Drawing.Color.Transparent;
            this.radioConflict.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioConflict.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioConflict.Location = new System.Drawing.Point(13, 126);
            this.radioConflict.Name = "radioConflict";
            this.radioConflict.Size = new System.Drawing.Size(72, 17);
            this.radioConflict.TabIndex = 204;
            this.radioConflict.TabStop = true;
            this.radioConflict.Text = "Conflict!";
            this.radioConflict.UseVisualStyleBackColor = false;
            this.radioConflict.CheckedChanged += new System.EventHandler(radioConflict_CheckedChanged);
            this.radioRingRace.AutoSize = true;
            this.radioRingRace.BackColor = System.Drawing.Color.Transparent;
            this.radioRingRace.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioRingRace.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioRingRace.Location = new System.Drawing.Point(13, 103);
            this.radioRingRace.Name = "radioRingRace";
            this.radioRingRace.Size = new System.Drawing.Size(82, 17);
            this.radioRingRace.TabIndex = 203;
            this.radioRingRace.TabStop = true;
            this.radioRingRace.Text = "Ring Race";
            this.radioRingRace.UseVisualStyleBackColor = false;
            this.radioRingRace.CheckedChanged += new System.EventHandler(radioRingRace_CheckedChanged);
            this.radioEpic.AutoSize = true;
            this.radioEpic.BackColor = System.Drawing.Color.Transparent;
            this.radioEpic.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioEpic.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioEpic.Location = new System.Drawing.Point(13, 80);
            this.radioEpic.Name = "radioEpic";
            this.radioEpic.Size = new System.Drawing.Size(48, 17);
            this.radioEpic.TabIndex = 202;
            this.radioEpic.TabStop = true;
            this.radioEpic.Text = "Epic";
            this.radioEpic.UseVisualStyleBackColor = false;
            this.radioEpic.CheckedChanged += new System.EventHandler(radioEpic_CheckedChanged);
            this.radioClassicRebels.AutoSize = true;
            this.radioClassicRebels.BackColor = System.Drawing.Color.Transparent;
            this.radioClassicRebels.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioClassicRebels.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioClassicRebels.Location = new System.Drawing.Point(60, 199);
            this.radioClassicRebels.Name = "radioClassicRebels";
            this.radioClassicRebels.Size = new System.Drawing.Size(132, 17);
            this.radioClassicRebels.TabIndex = 31;
            this.radioClassicRebels.TabStop = true;
            this.radioClassicRebels.Text = "Classic Renegades";
            this.radioClassicRebels.UseVisualStyleBackColor = false;
            this.radioClassicRebels.Visible = false;
            this.radioClassicRebels.CheckedChanged += new System.EventHandler(radioClassicRebels_CheckedChanged);
            this.pnlQuickStartDescription.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.pnlQuickStartDescription.BackColor2 = System.Drawing.Color.FromArgb(22, 21, 26);
            this.pnlQuickStartDescription.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.pnlQuickStartDescription.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.pnlQuickStartDescription.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pnlQuickStartDescription.BorderWidth = 2;
            this.pnlQuickStartDescription.Controls.Add(this.chkQuickStartDistantWorldsStoryEvents);
            this.pnlQuickStartDescription.Controls.Add(this.chkQuickStartReturnOfTheShakturiStoryEvents);
            this.pnlQuickStartDescription.Controls.Add(this.lnkQuickStartRaceHelp);
            this.pnlQuickStartDescription.Controls.Add(this.lblQuickStartRace);
            this.pnlQuickStartDescription.Controls.Add(this.cmbQuickStartRace);
            this.pnlQuickStartDescription.Controls.Add(this.lblQuickStartDescriptionDetail);
            this.pnlQuickStartDescription.Controls.Add(this.lblQuickStartDescriptionTitle);
            this.pnlQuickStartDescription.Curvature = 20;
            this.pnlQuickStartDescription.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.pnlQuickStartDescription.Location = new System.Drawing.Point(199, 54);
            this.pnlQuickStartDescription.Margin = new System.Windows.Forms.Padding(0);
            this.pnlQuickStartDescription.Name = "pnlQuickStartDescription";
            this.pnlQuickStartDescription.Size = new System.Drawing.Size(235, 116);
            this.pnlQuickStartDescription.TabIndex = 29;
            this.chkQuickStartDistantWorldsStoryEvents.AutoSize = true;
            this.chkQuickStartDistantWorldsStoryEvents.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkQuickStartDistantWorldsStoryEvents.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkQuickStartDistantWorldsStoryEvents.Location = new System.Drawing.Point(11, 89);
            this.chkQuickStartDistantWorldsStoryEvents.Name = "chkQuickStartDistantWorldsStoryEvents";
            this.chkQuickStartDistantWorldsStoryEvents.Size = new System.Drawing.Size(208, 17);
            this.chkQuickStartDistantWorldsStoryEvents.TabIndex = 242;
            this.chkQuickStartDistantWorldsStoryEvents.Text = "Distant Worlds original storyline";
            this.chkQuickStartDistantWorldsStoryEvents.UseVisualStyleBackColor = true;
            this.chkQuickStartReturnOfTheShakturiStoryEvents.AutoSize = true;
            this.chkQuickStartReturnOfTheShakturiStoryEvents.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkQuickStartReturnOfTheShakturiStoryEvents.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkQuickStartReturnOfTheShakturiStoryEvents.Location = new System.Drawing.Point(14, 6);
            this.chkQuickStartReturnOfTheShakturiStoryEvents.Name = "chkQuickStartReturnOfTheShakturiStoryEvents";
            this.chkQuickStartReturnOfTheShakturiStoryEvents.Size = new System.Drawing.Size(211, 17);
            this.chkQuickStartReturnOfTheShakturiStoryEvents.TabIndex = 241;
            this.chkQuickStartReturnOfTheShakturiStoryEvents.Text = "Return Of The Shakturi storyline";
            this.chkQuickStartReturnOfTheShakturiStoryEvents.UseVisualStyleBackColor = true;
            this.lnkQuickStartRaceHelp.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkQuickStartRaceHelp.AutoSize = true;
            this.lnkQuickStartRaceHelp.BackColor = System.Drawing.Color.Transparent;
            this.lnkQuickStartRaceHelp.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkQuickStartRaceHelp.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkQuickStartRaceHelp.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkQuickStartRaceHelp.Location = new System.Drawing.Point(115, 36);
            this.lnkQuickStartRaceHelp.Name = "lnkQuickStartRaceHelp";
            this.lnkQuickStartRaceHelp.Size = new System.Drawing.Size(108, 13);
            this.lnkQuickStartRaceHelp.TabIndex = 77;
            this.lnkQuickStartRaceHelp.TabStop = true;
            this.lnkQuickStartRaceHelp.Text = "About this Race...";
            this.lnkQuickStartRaceHelp.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkQuickStartRaceHelp_LinkClicked);
            this.lblQuickStartRace.AutoSize = true;
            this.lblQuickStartRace.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblQuickStartRace.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblQuickStartRace.Location = new System.Drawing.Point(21, 64);
            this.lblQuickStartRace.Name = "lblQuickStartRace";
            this.lblQuickStartRace.Size = new System.Drawing.Size(39, 14);
            this.lblQuickStartRace.TabIndex = 4;
            this.lblQuickStartRace.Text = "Race";
            this.lblQuickStartRace.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.cmbQuickStartRace.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbQuickStartRace.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
            this.cmbQuickStartRace.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbQuickStartRace.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbQuickStartRace.Font = new System.Drawing.Font("Verdana", 9f);
            this.cmbQuickStartRace.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbQuickStartRace.FormattingEnabled = true;
            this.cmbQuickStartRace.Location = new System.Drawing.Point(75, 60);
            this.cmbQuickStartRace.Name = "cmbQuickStartRace";
            this.cmbQuickStartRace.Size = new System.Drawing.Size(121, 23);
            this.cmbQuickStartRace.TabIndex = 3;
            this.lblQuickStartDescriptionDetail.AutoSize = true;
            this.lblQuickStartDescriptionDetail.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblQuickStartDescriptionDetail.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblQuickStartDescriptionDetail.Location = new System.Drawing.Point(24, 47);
            this.lblQuickStartDescriptionDetail.Name = "lblQuickStartDescriptionDetail";
            this.lblQuickStartDescriptionDetail.Size = new System.Drawing.Size(40, 13);
            this.lblQuickStartDescriptionDetail.TabIndex = 2;
            this.lblQuickStartDescriptionDetail.Text = "Detail";
            this.lblQuickStartDescriptionTitle.AutoSize = true;
            this.lblQuickStartDescriptionTitle.Font = new System.Drawing.Font("Verdana", 9f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lblQuickStartDescriptionTitle.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblQuickStartDescriptionTitle.Location = new System.Drawing.Point(24, 18);
            this.lblQuickStartDescriptionTitle.Name = "lblQuickStartDescriptionTitle";
            this.lblQuickStartDescriptionTitle.Size = new System.Drawing.Size(36, 14);
            this.lblQuickStartDescriptionTitle.TabIndex = 1;
            this.lblQuickStartDescriptionTitle.Text = "Title";
            this.btnQuickStart.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnQuickStart.ClipBackground = false;
            this.btnQuickStart.DelayFrameRefresh = false;
            this.btnQuickStart.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnQuickStart.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnQuickStart.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnQuickStart.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnQuickStart.IntensifyColors = false;
            this.btnQuickStart.Location = new System.Drawing.Point(355, 192);
            this.btnQuickStart.Name = "btnQuickStart";
            this.btnQuickStart.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnQuickStart.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnQuickStart.Size = new System.Drawing.Size(200, 30);
            this.btnQuickStart.TabIndex = 214;
            this.btnQuickStart.TabStop = false;
            this.btnQuickStart.Text = "Start Game";
            this.btnQuickStart.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnQuickStart.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnQuickStart.ToggledOn = false;
            this.btnQuickStart.Click += new System.EventHandler(btnQuickStart_Click);
            this.btnQuickStartCancel.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnQuickStartCancel.ClipBackground = false;
            this.btnQuickStartCancel.DelayFrameRefresh = false;
            this.btnQuickStartCancel.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnQuickStartCancel.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnQuickStartCancel.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnQuickStartCancel.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnQuickStartCancel.IntensifyColors = false;
            this.btnQuickStartCancel.Location = new System.Drawing.Point(199, 192);
            this.btnQuickStartCancel.Name = "btnQuickStartCancel";
            this.btnQuickStartCancel.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnQuickStartCancel.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnQuickStartCancel.Size = new System.Drawing.Size(150, 30);
            this.btnQuickStartCancel.TabIndex = 215;
            this.btnQuickStartCancel.TabStop = false;
            this.btnQuickStartCancel.Text = "Cancel";
            this.btnQuickStartCancel.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnQuickStartCancel.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnQuickStartCancel.ToggledOn = false;
            this.btnQuickStartCancel.Click += new System.EventHandler(btnQuickStartCancel_Click);
            this.radioClassicEmpire.AutoSize = true;
            this.radioClassicEmpire.BackColor = System.Drawing.Color.Transparent;
            this.radioClassicEmpire.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.radioClassicEmpire.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.radioClassicEmpire.Location = new System.Drawing.Point(59, 176);
            this.radioClassicEmpire.Name = "radioClassicEmpire";
            this.radioClassicEmpire.Size = new System.Drawing.Size(109, 17);
            this.radioClassicEmpire.TabIndex = 0;
            this.radioClassicEmpire.TabStop = true;
            this.radioClassicEmpire.Text = "Classic Empire";
            this.radioClassicEmpire.UseVisualStyleBackColor = false;
            this.radioClassicEmpire.Visible = false;
            this.radioClassicEmpire.CheckedChanged += new System.EventHandler(radioClassicEmpire_CheckedChanged);
            this.FtIzCrmve5.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.FtIzCrmve5.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlTutorialStart.BackgroundImage");
            this.FtIzCrmve5.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.FtIzCrmve5.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.FtIzCrmve5.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.FtIzCrmve5.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.FtIzCrmve5.BorderSize = 3;
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialDealingWithPirates);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialFleetsTroops);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialResearchDesign);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialShipsMissions);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialEmpireAndColonies);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialPreWarpEmpire);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialPlayAsPirate);
            this.FtIzCrmve5.Controls.Add(this.btnTutorialStartCancel);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialExpansionDiplomacy);
            this.FtIzCrmve5.Controls.Add(this.lnkTutorialFindingYourWayAround);
            this.FtIzCrmve5.HeaderIcon = null;
            this.FtIzCrmve5.HeaderTitle = "Tutorials";
            this.FtIzCrmve5.Location = new System.Drawing.Point(862, 397);
            this.FtIzCrmve5.Name = "pnlTutorialStart";
            this.FtIzCrmve5.Size = new System.Drawing.Size(252, 299);
            this.FtIzCrmve5.TabIndex = 78;
            this.FtIzCrmve5.Visible = false;
            this.FtIzCrmve5.CloseButtonClicked += new System.EventHandler(FtIzCrmve5_CloseButtonClicked);
            this.lnkTutorialDealingWithPirates.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialDealingWithPirates.AutoSize = true;
            this.lnkTutorialDealingWithPirates.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialDealingWithPirates.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialDealingWithPirates.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialDealingWithPirates.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialDealingWithPirates.Location = new System.Drawing.Point(36, 222);
            this.lnkTutorialDealingWithPirates.Name = "lnkTutorialDealingWithPirates";
            this.lnkTutorialDealingWithPirates.Size = new System.Drawing.Size(301, 18);
            this.lnkTutorialDealingWithPirates.TabIndex = 86;
            this.lnkTutorialDealingWithPirates.TabStop = true;
            this.lnkTutorialDealingWithPirates.Text = "Launch Dealing with Pirates Tutorial";
            this.lnkTutorialDealingWithPirates.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialDealingWithPirates_LinkClicked);
            this.lnkTutorialFleetsTroops.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialFleetsTroops.AutoSize = true;
            this.lnkTutorialFleetsTroops.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialFleetsTroops.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialFleetsTroops.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialFleetsTroops.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialFleetsTroops.Location = new System.Drawing.Point(31, 201);
            this.lnkTutorialFleetsTroops.Name = "lnkTutorialFleetsTroops";
            this.lnkTutorialFleetsTroops.Size = new System.Drawing.Size(465, 18);
            this.lnkTutorialFleetsTroops.TabIndex = 85;
            this.lnkTutorialFleetsTroops.TabStop = true;
            this.lnkTutorialFleetsTroops.Text = "Launch Fleets, Troops and Intelligence missions Tutorial";
            this.lnkTutorialFleetsTroops.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialFleetsTroops_LinkClicked);
            this.lnkTutorialResearchDesign.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialResearchDesign.AutoSize = true;
            this.lnkTutorialResearchDesign.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialResearchDesign.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialResearchDesign.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialResearchDesign.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialResearchDesign.Location = new System.Drawing.Point(26, 182);
            this.lnkTutorialResearchDesign.Name = "lnkTutorialResearchDesign";
            this.lnkTutorialResearchDesign.Size = new System.Drawing.Size(462, 18);
            this.lnkTutorialResearchDesign.TabIndex = 84;
            this.lnkTutorialResearchDesign.TabStop = true;
            this.lnkTutorialResearchDesign.Text = "Launch Research, Ship Design and Construction Tutorial";
            this.lnkTutorialResearchDesign.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialResearchDesign_LinkClicked);
            this.lnkTutorialShipsMissions.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialShipsMissions.AutoSize = true;
            this.lnkTutorialShipsMissions.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialShipsMissions.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialShipsMissions.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialShipsMissions.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialShipsMissions.Location = new System.Drawing.Point(25, 163);
            this.lnkTutorialShipsMissions.Name = "lnkTutorialShipsMissions";
            this.lnkTutorialShipsMissions.Size = new System.Drawing.Size(271, 18);
            this.lnkTutorialShipsMissions.TabIndex = 83;
            this.lnkTutorialShipsMissions.TabStop = true;
            this.lnkTutorialShipsMissions.Text = "Launch Ships and Bases Tutorial";
            this.lnkTutorialShipsMissions.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialShipsMissions_LinkClicked);
            this.lnkTutorialEmpireAndColonies.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialEmpireAndColonies.AutoSize = true;
            this.lnkTutorialEmpireAndColonies.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialEmpireAndColonies.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialEmpireAndColonies.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialEmpireAndColonies.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialEmpireAndColonies.Location = new System.Drawing.Point(21, 142);
            this.lnkTutorialEmpireAndColonies.Name = "lnkTutorialEmpireAndColonies";
            this.lnkTutorialEmpireAndColonies.Size = new System.Drawing.Size(303, 18);
            this.lnkTutorialEmpireAndColonies.TabIndex = 82;
            this.lnkTutorialEmpireAndColonies.TabStop = true;
            this.lnkTutorialEmpireAndColonies.Text = "Launch Empire and Colonies Tutorial";
            this.lnkTutorialEmpireAndColonies.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialEmpireAndColonies_LinkClicked);
            this.lnkTutorialPreWarpEmpire.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialPreWarpEmpire.AutoSize = true;
            this.lnkTutorialPreWarpEmpire.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialPreWarpEmpire.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialPreWarpEmpire.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialPreWarpEmpire.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialPreWarpEmpire.Location = new System.Drawing.Point(21, 111);
            this.lnkTutorialPreWarpEmpire.Name = "lnkTutorialPreWarpEmpire";
            this.lnkTutorialPreWarpEmpire.Size = new System.Drawing.Size(271, 18);
            this.lnkTutorialPreWarpEmpire.TabIndex = 81;
            this.lnkTutorialPreWarpEmpire.TabStop = true;
            this.lnkTutorialPreWarpEmpire.Text = "Launch PreWarp Empire Tutorial";
            this.lnkTutorialPreWarpEmpire.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialPreWarpEmpire_LinkClicked);
            this.lnkTutorialPlayAsPirate.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialPlayAsPirate.AutoSize = true;
            this.lnkTutorialPlayAsPirate.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialPlayAsPirate.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialPlayAsPirate.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialPlayAsPirate.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialPlayAsPirate.Location = new System.Drawing.Point(21, 88);
            this.lnkTutorialPlayAsPirate.Name = "lnkTutorialPlayAsPirate";
            this.lnkTutorialPlayAsPirate.Size = new System.Drawing.Size(253, 18);
            this.lnkTutorialPlayAsPirate.TabIndex = 80;
            this.lnkTutorialPlayAsPirate.TabStop = true;
            this.lnkTutorialPlayAsPirate.Text = "Launch Play As Pirate Tutorial";
            this.lnkTutorialPlayAsPirate.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialPlayAsPirate_LinkClicked);
            this.btnTutorialStartCancel.BackColor = System.Drawing.Color.FromArgb(0, 0, 0);
            this.btnTutorialStartCancel.ClipBackground = false;
            this.btnTutorialStartCancel.DelayFrameRefresh = false;
            this.btnTutorialStartCancel.Font = new System.Drawing.Font("Verdana", 8f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Pixel);
            this.btnTutorialStartCancel.ForeColor = System.Drawing.Color.FromArgb(150, 150, 150);
            this.btnTutorialStartCancel.GlowColor = System.Drawing.Color.FromArgb(48, 48, 128);
            this.btnTutorialStartCancel.InnerBorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.btnTutorialStartCancel.IntensifyColors = false;
            this.btnTutorialStartCancel.Location = new System.Drawing.Point(161, 266);
            this.btnTutorialStartCancel.Name = "btnTutorialStartCancel";
            this.btnTutorialStartCancel.OuterBorderColor = System.Drawing.Color.FromArgb(0, 0, 16);
            this.btnTutorialStartCancel.ShineColor = System.Drawing.Color.FromArgb(112, 112, 128);
            this.btnTutorialStartCancel.Size = new System.Drawing.Size(75, 23);
            this.btnTutorialStartCancel.TabIndex = 79;
            this.btnTutorialStartCancel.Text = "Cancel";
            this.btnTutorialStartCancel.TextColor = System.Drawing.Color.FromArgb(120, 120, 120);
            this.btnTutorialStartCancel.TextColor2 = System.Drawing.Color.FromArgb(255, 255, 255);
            this.btnTutorialStartCancel.ToggledOn = false;
            this.btnTutorialStartCancel.Click += new System.EventHandler(btnTutorialStartCancel_Click);
            this.lnkTutorialExpansionDiplomacy.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialExpansionDiplomacy.AutoSize = true;
            this.lnkTutorialExpansionDiplomacy.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialExpansionDiplomacy.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialExpansionDiplomacy.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialExpansionDiplomacy.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialExpansionDiplomacy.Location = new System.Drawing.Point(21, 55);
            this.lnkTutorialExpansionDiplomacy.Name = "lnkTutorialExpansionDiplomacy";
            this.lnkTutorialExpansionDiplomacy.Size = new System.Drawing.Size(345, 18);
            this.lnkTutorialExpansionDiplomacy.TabIndex = 78;
            this.lnkTutorialExpansionDiplomacy.TabStop = true;
            this.lnkTutorialExpansionDiplomacy.Text = "Launch Expansion and Diplomacy Tutorial";
            this.lnkTutorialExpansionDiplomacy.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialExpansionDiplomacy_LinkClicked);
            this.lnkTutorialFindingYourWayAround.ActiveLinkColor = System.Drawing.Color.FromArgb(255, 128, 0);
            this.lnkTutorialFindingYourWayAround.AutoSize = true;
            this.lnkTutorialFindingYourWayAround.BackColor = System.Drawing.Color.Transparent;
            this.lnkTutorialFindingYourWayAround.Font = new System.Drawing.Font("Verdana", 11.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.lnkTutorialFindingYourWayAround.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;
            this.lnkTutorialFindingYourWayAround.LinkColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lnkTutorialFindingYourWayAround.Location = new System.Drawing.Point(21, 37);
            this.lnkTutorialFindingYourWayAround.Name = "lnkTutorialFindingYourWayAround";
            this.lnkTutorialFindingYourWayAround.Size = new System.Drawing.Size(344, 18);
            this.lnkTutorialFindingYourWayAround.TabIndex = 77;
            this.lnkTutorialFindingYourWayAround.TabStop = true;
            this.lnkTutorialFindingYourWayAround.Text = "Launch Finding Your Way Around Tutorial";
            this.lnkTutorialFindingYourWayAround.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(lnkTutorialFindingYourWayAround_LinkClicked);
            this.pnlGameOptionsEmpireSettings.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.pnlGameOptionsEmpireSettings.BackgroundImage = (System.Drawing.Image)resources.GetObject("pnlGameOptionsEmpireSettings.BackgroundImage");
            this.pnlGameOptionsEmpireSettings.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.pnlGameOptionsEmpireSettings.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.pnlGameOptionsEmpireSettings.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.pnlGameOptionsEmpireSettings.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.pnlGameOptionsEmpireSettings.BorderSize = 3;
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.grpGameOptionsDefaultEngagementStancesManual);
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.chkOptionsSuppressAllPopups);
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.chkOptionsNewShipsAutomated);
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.grpGameOptionsDiscoveries);
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.grpGameOptionsFleetAttackSettings);
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.chkOptionsAllowSameSystemAsOtherEmpires);
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.sldGameOptionsAttackOvermatch);
            this.pnlGameOptionsEmpireSettings.Controls.Add(this.grpGameOptionsDefaultEngagementStances);
            this.pnlGameOptionsEmpireSettings.HeaderIcon = null;
            this.pnlGameOptionsEmpireSettings.HeaderTitle = "Other Empire Settings";
            this.pnlGameOptionsEmpireSettings.Location = new System.Drawing.Point(474, 229);
            this.pnlGameOptionsEmpireSettings.Name = "pnlGameOptionsEmpireSettings";
            this.pnlGameOptionsEmpireSettings.Size = new System.Drawing.Size(379, 670);
            this.pnlGameOptionsEmpireSettings.TabIndex = 130;
            this.pnlGameOptionsEmpireSettings.Visible = false;
            this.pnlGameOptionsEmpireSettings.CloseButtonClicked += new System.EventHandler(pnlGameOptionsEmpireSettings_CloseButtonClicked);
            this.grpGameOptionsDefaultEngagementStancesManual.BackColor = System.Drawing.Color.Transparent;
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.cmbGameOptionsEngagementStanceAttackManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.lblGameOptionsEngagementStanceAttackManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.cmbGameOptionsEngagementStanceOtherManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.cmbGameOptionsEngagementStancePatrolManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.lblGameOptionsEngagementStanceOtherManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.lblGameOptionsEngagementStanceEscortManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.cmbGameOptionsEngagementStanceEscortManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Controls.Add(this.lblGameOptionsEngagementStancePatrolManual);
            this.grpGameOptionsDefaultEngagementStancesManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpGameOptionsDefaultEngagementStancesManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpGameOptionsDefaultEngagementStancesManual.Location = new System.Drawing.Point(22, 165);
            this.grpGameOptionsDefaultEngagementStancesManual.Name = "grpGameOptionsDefaultEngagementStancesManual";
            this.grpGameOptionsDefaultEngagementStancesManual.Size = new System.Drawing.Size(274, 145);
            this.grpGameOptionsDefaultEngagementStancesManual.TabIndex = 76;
            this.grpGameOptionsDefaultEngagementStancesManual.TabStop = false;
            this.grpGameOptionsDefaultEngagementStancesManual.Text = "Default Engagement Stances - Manual";
            this.cmbGameOptionsEngagementStanceAttackManual.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStanceAttackManual.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStanceAttackManual.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStanceAttackManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStanceAttackManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStanceAttackManual.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStanceAttackManual.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStanceAttackManual.Location = new System.Drawing.Point(92, 102);
            this.cmbGameOptionsEngagementStanceAttackManual.Name = "cmbGameOptionsEngagementStanceAttackManual";
            this.cmbGameOptionsEngagementStanceAttackManual.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStanceAttackManual.TabIndex = 77;
            this.lblGameOptionsEngagementStanceAttackManual.AutoSize = true;
            this.lblGameOptionsEngagementStanceAttackManual.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStanceAttackManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStanceAttackManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStanceAttackManual.Location = new System.Drawing.Point(-4, 104);
            this.lblGameOptionsEngagementStanceAttackManual.Name = "lblGameOptionsEngagementStanceAttackManual";
            this.lblGameOptionsEngagementStanceAttackManual.Size = new System.Drawing.Size(100, 13);
            this.lblGameOptionsEngagementStanceAttackManual.TabIndex = 76;
            this.lblGameOptionsEngagementStanceAttackManual.Text = "Attack/Bombard";
            this.cmbGameOptionsEngagementStanceOtherManual.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStanceOtherManual.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStanceOtherManual.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStanceOtherManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStanceOtherManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStanceOtherManual.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStanceOtherManual.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStanceOtherManual.Location = new System.Drawing.Point(90, 75);
            this.cmbGameOptionsEngagementStanceOtherManual.Name = "cmbGameOptionsEngagementStanceOtherManual";
            this.cmbGameOptionsEngagementStanceOtherManual.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStanceOtherManual.TabIndex = 73;
            this.cmbGameOptionsEngagementStancePatrolManual.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStancePatrolManual.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStancePatrolManual.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStancePatrolManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStancePatrolManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStancePatrolManual.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStancePatrolManual.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStancePatrolManual.Location = new System.Drawing.Point(90, 21);
            this.cmbGameOptionsEngagementStancePatrolManual.Name = "cmbGameOptionsEngagementStancePatrolManual";
            this.cmbGameOptionsEngagementStancePatrolManual.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStancePatrolManual.TabIndex = 72;
            this.lblGameOptionsEngagementStanceOtherManual.AutoSize = true;
            this.lblGameOptionsEngagementStanceOtherManual.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStanceOtherManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStanceOtherManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStanceOtherManual.Location = new System.Drawing.Point(14, 68);
            this.lblGameOptionsEngagementStanceOtherManual.Name = "lblGameOptionsEngagementStanceOtherManual";
            this.lblGameOptionsEngagementStanceOtherManual.Size = new System.Drawing.Size(39, 13);
            this.lblGameOptionsEngagementStanceOtherManual.TabIndex = 71;
            this.lblGameOptionsEngagementStanceOtherManual.Text = "Other";
            this.lblGameOptionsEngagementStanceEscortManual.AutoSize = true;
            this.lblGameOptionsEngagementStanceEscortManual.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStanceEscortManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStanceEscortManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStanceEscortManual.Location = new System.Drawing.Point(14, 44);
            this.lblGameOptionsEngagementStanceEscortManual.Name = "lblGameOptionsEngagementStanceEscortManual";
            this.lblGameOptionsEngagementStanceEscortManual.Size = new System.Drawing.Size(42, 13);
            this.lblGameOptionsEngagementStanceEscortManual.TabIndex = 70;
            this.lblGameOptionsEngagementStanceEscortManual.Text = "Escort";
            this.cmbGameOptionsEngagementStanceEscortManual.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStanceEscortManual.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStanceEscortManual.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStanceEscortManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStanceEscortManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStanceEscortManual.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStanceEscortManual.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStanceEscortManual.Location = new System.Drawing.Point(88, 48);
            this.cmbGameOptionsEngagementStanceEscortManual.Name = "cmbGameOptionsEngagementStanceEscortManual";
            this.cmbGameOptionsEngagementStanceEscortManual.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStanceEscortManual.TabIndex = 69;
            this.lblGameOptionsEngagementStancePatrolManual.AutoSize = true;
            this.lblGameOptionsEngagementStancePatrolManual.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStancePatrolManual.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStancePatrolManual.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStancePatrolManual.Location = new System.Drawing.Point(14, 23);
            this.lblGameOptionsEngagementStancePatrolManual.Name = "lblGameOptionsEngagementStancePatrolManual";
            this.lblGameOptionsEngagementStancePatrolManual.Size = new System.Drawing.Size(40, 13);
            this.lblGameOptionsEngagementStancePatrolManual.TabIndex = 68;
            this.lblGameOptionsEngagementStancePatrolManual.Text = "Patrol";
            this.chkOptionsSuppressAllPopups.AutoSize = true;
            this.chkOptionsSuppressAllPopups.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsSuppressAllPopups.CheckAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.chkOptionsSuppressAllPopups.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsSuppressAllPopups.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsSuppressAllPopups.Location = new System.Drawing.Point(31, 642);
            this.chkOptionsSuppressAllPopups.Name = "chkOptionsSuppressAllPopups";
            this.chkOptionsSuppressAllPopups.Size = new System.Drawing.Size(188, 17);
            this.chkOptionsSuppressAllPopups.TabIndex = 75;
            this.chkOptionsSuppressAllPopups.Text = "Suppress all pop-up screens";
            this.chkOptionsSuppressAllPopups.UseVisualStyleBackColor = false;
            this.chkOptionsSuppressAllPopups.CheckedChanged += new System.EventHandler(chkOptionsSuppressAllPopups_CheckedChanged);
            this.chkOptionsNewShipsAutomated.AutoSize = true;
            this.chkOptionsNewShipsAutomated.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsNewShipsAutomated.CheckAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.chkOptionsNewShipsAutomated.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsNewShipsAutomated.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsNewShipsAutomated.Location = new System.Drawing.Point(31, 625);
            this.chkOptionsNewShipsAutomated.Name = "chkOptionsNewShipsAutomated";
            this.chkOptionsNewShipsAutomated.Size = new System.Drawing.Size(209, 17);
            this.chkOptionsNewShipsAutomated.TabIndex = 74;
            this.chkOptionsNewShipsAutomated.Text = "Newly built ships are automated";
            this.chkOptionsNewShipsAutomated.UseVisualStyleBackColor = false;
            this.grpGameOptionsDiscoveries.BackColor = System.Drawing.Color.Transparent;
            this.grpGameOptionsDiscoveries.Controls.Add(this.cmbGameOptionsEncounterAbandonedShipOrBase);
            this.grpGameOptionsDiscoveries.Controls.Add(this.cmbGameOptionsEncounterRuins);
            this.grpGameOptionsDiscoveries.Controls.Add(this.lblGameOptionsEncounterAbandonedShipOrBase);
            this.grpGameOptionsDiscoveries.Controls.Add(this.lblGameOptionsEncounterRuins);
            this.grpGameOptionsDiscoveries.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpGameOptionsDiscoveries.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpGameOptionsDiscoveries.Location = new System.Drawing.Point(28, 535);
            this.grpGameOptionsDiscoveries.Name = "grpGameOptionsDiscoveries";
            this.grpGameOptionsDiscoveries.Size = new System.Drawing.Size(315, 79);
            this.grpGameOptionsDiscoveries.TabIndex = 73;
            this.grpGameOptionsDiscoveries.TabStop = false;
            this.grpGameOptionsDiscoveries.Text = "Discoveries";
            this.cmbGameOptionsEncounterAbandonedShipOrBase.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEncounterAbandonedShipOrBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEncounterAbandonedShipOrBase.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEncounterAbandonedShipOrBase.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEncounterAbandonedShipOrBase.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEncounterAbandonedShipOrBase.FormattingEnabled = true;
            this.cmbGameOptionsEncounterAbandonedShipOrBase.Items.AddRange(new object[3] { "Ask what to do", "Investigate - show all results", "Investigate - do not show results" });
            this.cmbGameOptionsEncounterAbandonedShipOrBase.Location = new System.Drawing.Point(234, 46);
            this.cmbGameOptionsEncounterAbandonedShipOrBase.Name = "cmbGameOptionsEncounterAbandonedShipOrBase";
            this.cmbGameOptionsEncounterAbandonedShipOrBase.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEncounterAbandonedShipOrBase.TabIndex = 74;
            this.cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndexChanged += new System.EventHandler(cmbGameOptionsEncounterAbandonedShipOrBase_SelectedIndexChanged);
            this.cmbGameOptionsEncounterRuins.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEncounterRuins.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEncounterRuins.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEncounterRuins.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEncounterRuins.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEncounterRuins.FormattingEnabled = true;
            this.cmbGameOptionsEncounterRuins.Items.AddRange(new object[5] { "Ask what to do", "Investigate - show all results", "Investigate - report discoveries", "Investigate - report major discoveries", "Investigate - do not show results" });
            this.cmbGameOptionsEncounterRuins.Location = new System.Drawing.Point(234, 19);
            this.cmbGameOptionsEncounterRuins.Name = "cmbGameOptionsEncounterRuins";
            this.cmbGameOptionsEncounterRuins.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEncounterRuins.TabIndex = 73;
            this.cmbGameOptionsEncounterRuins.SelectedIndexChanged += new System.EventHandler(cmbGameOptionsEncounterRuins_SelectedIndexChanged);
            this.lblGameOptionsEncounterAbandonedShipOrBase.AutoSize = true;
            this.lblGameOptionsEncounterAbandonedShipOrBase.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEncounterAbandonedShipOrBase.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEncounterAbandonedShipOrBase.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEncounterAbandonedShipOrBase.Location = new System.Drawing.Point(7, 48);
            this.lblGameOptionsEncounterAbandonedShipOrBase.Name = "lblGameOptionsEncounterAbandonedShipOrBase";
            this.lblGameOptionsEncounterAbandonedShipOrBase.Size = new System.Drawing.Size(245, 13);
            this.lblGameOptionsEncounterAbandonedShipOrBase.TabIndex = 70;
            this.lblGameOptionsEncounterAbandonedShipOrBase.Text = "When encounter Abandoned Ship or Base";
            this.lblGameOptionsEncounterRuins.AutoSize = true;
            this.lblGameOptionsEncounterRuins.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEncounterRuins.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEncounterRuins.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEncounterRuins.Location = new System.Drawing.Point(79, 22);
            this.lblGameOptionsEncounterRuins.Name = "lblGameOptionsEncounterRuins";
            this.lblGameOptionsEncounterRuins.Size = new System.Drawing.Size(135, 13);
            this.lblGameOptionsEncounterRuins.TabIndex = 68;
            this.lblGameOptionsEncounterRuins.Text = "When encounter Ruins";
            this.grpGameOptionsFleetAttackSettings.BackColor = System.Drawing.Color.Transparent;
            this.grpGameOptionsFleetAttackSettings.Controls.Add(this.numGameOptionsFleetAttackGather);
            this.grpGameOptionsFleetAttackSettings.Controls.Add(this.numGameOptionsFleetAttackRefuel);
            this.grpGameOptionsFleetAttackSettings.Controls.Add(this.lblGameOptionsFleetAttackGather);
            this.grpGameOptionsFleetAttackSettings.Controls.Add(this.lblGameOptionsFleetAttackRefuel);
            this.grpGameOptionsFleetAttackSettings.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpGameOptionsFleetAttackSettings.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpGameOptionsFleetAttackSettings.Location = new System.Drawing.Point(20, 308);
            this.grpGameOptionsFleetAttackSettings.Name = "grpGameOptionsFleetAttackSettings";
            this.grpGameOptionsFleetAttackSettings.Size = new System.Drawing.Size(315, 93);
            this.grpGameOptionsFleetAttackSettings.TabIndex = 72;
            this.grpGameOptionsFleetAttackSettings.TabStop = false;
            this.grpGameOptionsFleetAttackSettings.Text = "Fleet Attack Settings";
            this.numGameOptionsFleetAttackGather.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numGameOptionsFleetAttackGather.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.numGameOptionsFleetAttackGather.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numGameOptionsFleetAttackGather.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numGameOptionsFleetAttackGather.Location = new System.Drawing.Point(11, 43);
            this.numGameOptionsFleetAttackGather.Name = "numGameOptionsFleetAttackGather";
            this.numGameOptionsFleetAttackGather.Size = new System.Drawing.Size(45, 21);
            this.numGameOptionsFleetAttackGather.TabIndex = 93;
            this.numGameOptionsFleetAttackRefuel.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.numGameOptionsFleetAttackRefuel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.numGameOptionsFleetAttackRefuel.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.numGameOptionsFleetAttackRefuel.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.numGameOptionsFleetAttackRefuel.Location = new System.Drawing.Point(11, 20);
            this.numGameOptionsFleetAttackRefuel.Name = "numGameOptionsFleetAttackRefuel";
            this.numGameOptionsFleetAttackRefuel.Size = new System.Drawing.Size(45, 21);
            this.numGameOptionsFleetAttackRefuel.TabIndex = 92;
            this.lblGameOptionsFleetAttackGather.AutoSize = true;
            this.lblGameOptionsFleetAttackGather.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsFleetAttackGather.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsFleetAttackGather.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsFleetAttackGather.Location = new System.Drawing.Point(54, 44);
            this.lblGameOptionsFleetAttackGather.Name = "lblGameOptionsFleetAttackGather";
            this.lblGameOptionsFleetAttackGather.Size = new System.Drawing.Size(318, 13);
            this.lblGameOptionsFleetAttackGather.TabIndex = 70;
            this.lblGameOptionsFleetAttackGather.Text = "First assemble when this percentage of fleet dispersed";
            this.lblGameOptionsFleetAttackRefuel.AutoSize = true;
            this.lblGameOptionsFleetAttackRefuel.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsFleetAttackRefuel.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsFleetAttackRefuel.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsFleetAttackRefuel.Location = new System.Drawing.Point(54, 23);
            this.lblGameOptionsFleetAttackRefuel.Name = "lblGameOptionsFleetAttackRefuel";
            this.lblGameOptionsFleetAttackRefuel.Size = new System.Drawing.Size(295, 13);
            this.lblGameOptionsFleetAttackRefuel.TabIndex = 68;
            this.lblGameOptionsFleetAttackRefuel.Text = "First refuel when this percentage of fleet need fuel";
            this.chkOptionsAllowSameSystemAsOtherEmpires.AutoSize = true;
            this.chkOptionsAllowSameSystemAsOtherEmpires.BackColor = System.Drawing.Color.Transparent;
            this.chkOptionsAllowSameSystemAsOtherEmpires.CheckAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.chkOptionsAllowSameSystemAsOtherEmpires.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.chkOptionsAllowSameSystemAsOtherEmpires.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.chkOptionsAllowSameSystemAsOtherEmpires.Location = new System.Drawing.Point(22, 511);
            this.chkOptionsAllowSameSystemAsOtherEmpires.Name = "chkOptionsAllowSameSystemAsOtherEmpires";
            this.chkOptionsAllowSameSystemAsOtherEmpires.Size = new System.Drawing.Size(391, 17);
            this.chkOptionsAllowSameSystemAsOtherEmpires.TabIndex = 70;
            this.chkOptionsAllowSameSystemAsOtherEmpires.Text = "Allow colonization and mining stations in other empires systems";
            this.chkOptionsAllowSameSystemAsOtherEmpires.UseVisualStyleBackColor = false;
            this.sldGameOptionsAttackOvermatch.BackColor = System.Drawing.Color.FromArgb(39, 40, 44);
            this.sldGameOptionsAttackOvermatch.BackColor2 = System.Drawing.Color.FromArgb(36, 35, 40);
            this.sldGameOptionsAttackOvermatch.BackColor3 = System.Drawing.Color.FromArgb(51, 54, 61);
            this.sldGameOptionsAttackOvermatch.BorderColor = System.Drawing.Color.FromArgb(67, 67, 77);
            this.sldGameOptionsAttackOvermatch.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.sldGameOptionsAttackOvermatch.Curvature = 10;
            this.sldGameOptionsAttackOvermatch.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.sldGameOptionsAttackOvermatch.GradientMode = DistantWorlds.Controls.LinearGradientMode.Vertical;
            this.sldGameOptionsAttackOvermatch.LabelText = "Attack Overmatch";
            this.sldGameOptionsAttackOvermatch.LabelWidth = 100;
            this.sldGameOptionsAttackOvermatch.LinkText = null;
            this.sldGameOptionsAttackOvermatch.LinkWidth = 0;
            this.sldGameOptionsAttackOvermatch.Location = new System.Drawing.Point(29, 435);
            this.sldGameOptionsAttackOvermatch.Margin = new System.Windows.Forms.Padding(0);
            this.sldGameOptionsAttackOvermatch.Name = "sldGameOptionsAttackOvermatch";
            this.sldGameOptionsAttackOvermatch.Size = new System.Drawing.Size(270, 50);
            this.sldGameOptionsAttackOvermatch.SliderOffset = 25;
            this.sldGameOptionsAttackOvermatch.TabIndex = 68;
            this.sldGameOptionsAttackOvermatch.Value = 0;
            this.grpGameOptionsDefaultEngagementStances.BackColor = System.Drawing.Color.Transparent;
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.cmbGameOptionsEngagementStanceAttack);
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.lblGameOptionsEngagementStanceAttack);
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.cmbGameOptionsEngagementStanceOther);
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.cmbGameOptionsEngagementStancePatrol);
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.lblGameOptionsEngagementStanceOther);
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.lblGameOptionsEngagementStanceEscort);
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.cmbGameOptionsEngagementStanceEscort);
            this.grpGameOptionsDefaultEngagementStances.Controls.Add(this.lblGameOptionsEngagementStancePatrol);
            this.grpGameOptionsDefaultEngagementStances.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, 0);
            this.grpGameOptionsDefaultEngagementStances.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.grpGameOptionsDefaultEngagementStances.Location = new System.Drawing.Point(12, 10);
            this.grpGameOptionsDefaultEngagementStances.Name = "grpGameOptionsDefaultEngagementStances";
            this.grpGameOptionsDefaultEngagementStances.Size = new System.Drawing.Size(274, 145);
            this.grpGameOptionsDefaultEngagementStances.TabIndex = 67;
            this.grpGameOptionsDefaultEngagementStances.TabStop = false;
            this.grpGameOptionsDefaultEngagementStances.Text = "Default Engagement Stances - Auto";
            this.cmbGameOptionsEngagementStanceAttack.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStanceAttack.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStanceAttack.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStanceAttack.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStanceAttack.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStanceAttack.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStanceAttack.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStanceAttack.Location = new System.Drawing.Point(92, 102);
            this.cmbGameOptionsEngagementStanceAttack.Name = "cmbGameOptionsEngagementStanceAttack";
            this.cmbGameOptionsEngagementStanceAttack.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStanceAttack.TabIndex = 77;
            this.lblGameOptionsEngagementStanceAttack.AutoSize = true;
            this.lblGameOptionsEngagementStanceAttack.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStanceAttack.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStanceAttack.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStanceAttack.Location = new System.Drawing.Point(-4, 104);
            this.lblGameOptionsEngagementStanceAttack.Name = "lblGameOptionsEngagementStanceAttack";
            this.lblGameOptionsEngagementStanceAttack.Size = new System.Drawing.Size(100, 13);
            this.lblGameOptionsEngagementStanceAttack.TabIndex = 76;
            this.lblGameOptionsEngagementStanceAttack.Text = "Attack/Bombard";
            this.cmbGameOptionsEngagementStanceOther.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStanceOther.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStanceOther.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStanceOther.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStanceOther.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStanceOther.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStanceOther.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStanceOther.Location = new System.Drawing.Point(90, 75);
            this.cmbGameOptionsEngagementStanceOther.Name = "cmbGameOptionsEngagementStanceOther";
            this.cmbGameOptionsEngagementStanceOther.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStanceOther.TabIndex = 73;
            this.cmbGameOptionsEngagementStancePatrol.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStancePatrol.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStancePatrol.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStancePatrol.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStancePatrol.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStancePatrol.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStancePatrol.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStancePatrol.Location = new System.Drawing.Point(90, 21);
            this.cmbGameOptionsEngagementStancePatrol.Name = "cmbGameOptionsEngagementStancePatrol";
            this.cmbGameOptionsEngagementStancePatrol.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStancePatrol.TabIndex = 72;
            this.lblGameOptionsEngagementStanceOther.AutoSize = true;
            this.lblGameOptionsEngagementStanceOther.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStanceOther.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStanceOther.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStanceOther.Location = new System.Drawing.Point(14, 68);
            this.lblGameOptionsEngagementStanceOther.Name = "lblGameOptionsEngagementStanceOther";
            this.lblGameOptionsEngagementStanceOther.Size = new System.Drawing.Size(39, 13);
            this.lblGameOptionsEngagementStanceOther.TabIndex = 71;
            this.lblGameOptionsEngagementStanceOther.Text = "Other";
            this.lblGameOptionsEngagementStanceEscort.AutoSize = true;
            this.lblGameOptionsEngagementStanceEscort.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStanceEscort.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStanceEscort.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStanceEscort.Location = new System.Drawing.Point(14, 44);
            this.lblGameOptionsEngagementStanceEscort.Name = "lblGameOptionsEngagementStanceEscort";
            this.lblGameOptionsEngagementStanceEscort.Size = new System.Drawing.Size(42, 13);
            this.lblGameOptionsEngagementStanceEscort.TabIndex = 70;
            this.lblGameOptionsEngagementStanceEscort.Text = "Escort";
            this.cmbGameOptionsEngagementStanceEscort.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.cmbGameOptionsEngagementStanceEscort.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cmbGameOptionsEngagementStanceEscort.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
            this.cmbGameOptionsEngagementStanceEscort.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.cmbGameOptionsEngagementStanceEscort.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.cmbGameOptionsEngagementStanceEscort.FormattingEnabled = true;
            this.cmbGameOptionsEngagementStanceEscort.Items.AddRange(new object[4] { "No default stance", "Engage when attacked", "Engage nearby targets", "Engage system targets" });
            this.cmbGameOptionsEngagementStanceEscort.Location = new System.Drawing.Point(88, 48);
            this.cmbGameOptionsEngagementStanceEscort.Name = "cmbGameOptionsEngagementStanceEscort";
            this.cmbGameOptionsEngagementStanceEscort.Size = new System.Drawing.Size(70, 21);
            this.cmbGameOptionsEngagementStanceEscort.TabIndex = 69;
            this.lblGameOptionsEngagementStancePatrol.AutoSize = true;
            this.lblGameOptionsEngagementStancePatrol.BackColor = System.Drawing.Color.Transparent;
            this.lblGameOptionsEngagementStancePatrol.Font = new System.Drawing.Font("Verdana", 8.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, 0);
            this.lblGameOptionsEngagementStancePatrol.ForeColor = System.Drawing.Color.FromArgb(170, 170, 170);
            this.lblGameOptionsEngagementStancePatrol.Location = new System.Drawing.Point(14, 23);
            this.lblGameOptionsEngagementStancePatrol.Name = "lblGameOptionsEngagementStancePatrol";
            this.lblGameOptionsEngagementStancePatrol.Size = new System.Drawing.Size(40, 13);
            this.lblGameOptionsEngagementStancePatrol.TabIndex = 68;
            this.lblGameOptionsEngagementStancePatrol.Text = "Patrol";
            this.borderPanel1.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.borderPanel1.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.borderPanel1.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.borderPanel1.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.borderPanel1.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.borderPanel1.BorderSize = 3;
            this.borderPanel1.Location = new System.Drawing.Point(0, 0);
            this.borderPanel1.Name = "borderPanel1";
            this.borderPanel1.Size = new System.Drawing.Size(200, 100);
            this.borderPanel1.TabIndex = 0;
            this.borderPanel2.BackColor = System.Drawing.Color.FromArgb(48, 48, 64);
            this.borderPanel2.BorderColor1 = System.Drawing.Color.FromArgb(96, 200, 200, 200);
            this.borderPanel2.BorderColor2 = System.Drawing.Color.FromArgb(96, 140, 140, 140);
            this.borderPanel2.BorderColor3 = System.Drawing.Color.FromArgb(96, 20, 20, 20);
            this.borderPanel2.BorderColor4 = System.Drawing.Color.FromArgb(96, 80, 80, 80);
            this.borderPanel2.BorderSize = 3;
            this.borderPanel2.Location = new System.Drawing.Point(0, 0);
            this.borderPanel2.Name = "borderPanel2";
            this.borderPanel2.Size = new System.Drawing.Size(200, 100);
            this.borderPanel2.TabIndex = 0;
            this.toolTip.AutoPopDelay = 32000;
            this.toolTip.InitialDelay = 500;
            this.toolTip.ReshowDelay = 100;
            this.lblActiveTheme.AutoSize = true;
            this.lblActiveTheme.BackColor = System.Drawing.Color.Transparent;
            this.lblActiveTheme.ForeColor = System.Drawing.Color.FromArgb(255, 192, 0);
            this.lblActiveTheme.Location = new System.Drawing.Point(122, 4);
            this.lblActiveTheme.Name = "lblActiveTheme";
            this.lblActiveTheme.Size = new System.Drawing.Size(73, 13);
            this.lblActiveTheme.TabIndex = 132;
            this.lblActiveTheme.Text = "Active Theme";
            this.menuGalactopedia.BackColor = System.Drawing.Color.Transparent;
            this.menuGalactopedia.Location = new System.Drawing.Point(15, 24);
            this.menuGalactopedia.Name = "menuGalactopedia";
            this.menuGalactopedia.Size = new System.Drawing.Size(100, 30);
            this.menuGalactopedia.TabIndex = 133;
            this.menuGalactopedia.Click += new System.EventHandler(menuGalactopedia_Click);
            this.menuGalactopedia.MouseEnter += new System.EventHandler(menuGalactopedia_MouseEnter);
            this.menuGalactopedia.MouseLeave += new System.EventHandler(menuGalactopedia_MouseLeave);
            this.menuGalactopedia.MouseMove += new System.Windows.Forms.MouseEventHandler(menuGalactopedia_MouseMove);
            this.menuCheckForUpdates.BackColor = System.Drawing.Color.Transparent;
            this.menuCheckForUpdates.Location = new System.Drawing.Point(17, 9);
            this.menuCheckForUpdates.Name = "menuCheckForUpdates";
            this.menuCheckForUpdates.Size = new System.Drawing.Size(100, 30);
            this.menuCheckForUpdates.TabIndex = 134;
            this.menuCheckForUpdates.Click += new System.EventHandler(menuCheckForUpdates_Click);
            this.menuCheckForUpdates.MouseEnter += new System.EventHandler(menuCheckForUpdates_MouseEnter);
            this.menuCheckForUpdates.MouseLeave += new System.EventHandler(menuCheckForUpdates_MouseLeave);
            this.menuCheckForUpdates.MouseMove += new System.Windows.Forms.MouseEventHandler(menuCheckForUpdates_MouseMove);
            this.menuCredits.BackColor = System.Drawing.Color.Transparent;
            this.menuCredits.Location = new System.Drawing.Point(133, 664);
            this.menuCredits.Name = "menuCredits";
            this.menuCredits.Size = new System.Drawing.Size(100, 30);
            this.menuCredits.TabIndex = 135;
            this.menuCredits.Click += new System.EventHandler(menuCredits_Click);
            this.menuCredits.MouseEnter += new System.EventHandler(menuCredits_MouseEnter);
            this.menuCredits.MouseLeave += new System.EventHandler(menuCredits_MouseLeave);
            this.menuCredits.MouseMove += new System.Windows.Forms.MouseEventHandler(menuCredits_MouseMove);
            this.pnlTopLeftCorner.BackColor = System.Drawing.Color.FromArgb(128, 0, 0, 0);
            this.pnlTopLeftCorner.Controls.Add(this.menuGalactopedia);
            this.pnlTopLeftCorner.Location = new System.Drawing.Point(24, 585);
            this.pnlTopLeftCorner.Name = "pnlTopLeftCorner";
            this.pnlTopLeftCorner.Size = new System.Drawing.Size(100, 70);
            this.pnlTopLeftCorner.TabIndex = 136;
            this.pnlBottomLeftCorner.BackColor = System.Drawing.Color.FromArgb(128, 0, 0, 0);
            this.pnlBottomLeftCorner.Controls.Add(this.menuCheckForUpdates);
            this.pnlBottomLeftCorner.Controls.Add(this.lblVersion);
            this.pnlBottomLeftCorner.Location = new System.Drawing.Point(18, 662);
            this.pnlBottomLeftCorner.Name = "pnlBottomLeftCorner";
            this.pnlBottomLeftCorner.Size = new System.Drawing.Size(100, 100);
            this.pnlBottomLeftCorner.TabIndex = 137;
            base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.None;
            this.BackgroundImage = (System.Drawing.Image)resources.GetObject("$this.BackgroundImage");
            this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
            base.ClientSize = new System.Drawing.Size(1248, 776);
            base.Controls.Add(this.pnlGameOptions);
            base.Controls.Add(this.FtIzCrmve5);
            base.Controls.Add(this.pnlBottomLeftCorner);
            base.Controls.Add(this.pnlTopLeftCorner);
            base.Controls.Add(this.menuCredits);
            base.Controls.Add(this.pnlButtons);
            base.Controls.Add(this.lblActiveTheme);
            base.Controls.Add(this.pnlNewGame);
            base.Controls.Add(this.lblMenuHints);
            //base.Controls.Add((System.Windows.Forms.Control)(object)this.mediaPlayer);
            base.Controls.Add(this.pnlAbout);
            base.Controls.Add(this.lnkCopyright);
            base.Controls.Add(this.pnlSaveLoadProgress);
            base.Controls.Add(this.picTitle);
            base.Controls.Add(this.lblCopyright);
            base.Controls.Add(this.pnlEncyclopedia);
            base.Controls.Add(this.pnlQuickStart);
            base.Controls.Add(this.pnlGameOptionsEmpireSettings);
            base.Controls.Add(this.pnlGameOptionsMessages);
            base.Controls.Add(this.pnlThemes);
            base.Controls.Add(this.pnlGameOptionsAdvancedDisplaySettings);
            this.DoubleBuffered = true;
            base.Icon = (System.Drawing.Icon)resources.GetObject("$this.Icon");
            base.KeyPreview = true;
            base.Name = "Start";
            this.Text = "Distant Worlds";
            base.FormClosed += new System.Windows.Forms.FormClosedEventHandler(Start_FormClosed);
            base.Load += new System.EventHandler(Start_Load);
            base.KeyDown += new System.Windows.Forms.KeyEventHandler(Start_KeyDown);
            base.MouseMove += new System.Windows.Forms.MouseEventHandler(Start_MouseMove);
            ((System.ComponentModel.ISupportInitialize)this.picTitle).EndInit();
            //((System.ComponentModel.ISupportInitialize)this.mediaPlayer).EndInit();
            this.pnlGameOptions.ResumeLayout(false);
            this.pnlGameOptions.PerformLayout();
            this.grpOptionsAutoSave.ResumeLayout(false);
            this.grpOptionsAutoSave.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.numOptionsAutoSaveMinutes).EndInit();
            this.grpOptionsDisplaySettings.ResumeLayout(false);
            this.grpOptionsDisplaySettings.PerformLayout();
            this.grpOptionsVolume.ResumeLayout(false);
            this.grpOptionsVolume.PerformLayout();
            this.grpOptionsControl.ResumeLayout(false);
            this.grpOptionsControl.PerformLayout();
            this.pnlOptionsAutomationMode.ResumeLayout(false);
            this.pnlOptionsAutomationMode.PerformLayout();
            this.pnlGameOptionsMessages.ResumeLayout(false);
            this.grpOptionsPopupMessages.ResumeLayout(false);
            this.grpOptionsPopupMessages.PerformLayout();
            this.grpOptionsScrollingMessages.ResumeLayout(false);
            this.grpOptionsScrollingMessages.PerformLayout();
            this.pnlThemes.ResumeLayout(false);
            this.pnlThemes.PerformLayout();
            this.pnlThemeDetail.ResumeLayout(false);
            this.pnlThemeDetail.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picThemeImage).EndInit();
            this.pnlNewGame.ResumeLayout(false);
            this.pnlNewGame.PerformLayout();
            this.pnlStartNewGameYourEmpireType.ResumeLayout(false);
            this.pnlStartNewGameYourEmpireType.PerformLayout();
            this.pnlStartNewGameIntroductoryBorder.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireTypeTimeline).EndInit();
            this.pnlStartNewGameJumpStart.ResumeLayout(false);
            this.pnlStartNewGameJumpStart.PerformLayout();
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.ResumeLayout(false);
            this.pnlJumpStartPiratePlaystyleDescriptionContainer.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picJumpStartYourEmpirePiratePlaystyle).EndInit();
            this.pnlJumpStartYourEmpireGovernment.ResumeLayout(false);
            this.pnlJumpStartYourEmpireGovernment.PerformLayout();
            this.pnlJumpStartYourEmpireRace.ResumeLayout(false);
            this.pnlJumpStartYourEmpireRace.PerformLayout();
            this.pnlJumpStartYourEmpireRaceAttributesContainer.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)this.picJumpStartYourEmpireRace).EndInit();
            this.pnlJumpStartGalaxyShapeSize.ResumeLayout(false);
            this.pnlJumpStartGalaxyShapeSize.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picJumpStartTheGalaxyPreview).EndInit();
            this.pnlStartNewGameYourRace.ResumeLayout(false);
            this.pnlStartNewGameYourEmpireRace.ResumeLayout(false);
            this.pnlStartNewGameYourEmpireRace.PerformLayout();
            this.pnlStartNewGameYourEmpireRaceAttributesContainer.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireRace).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourRaceImage).EndInit();
            this.pnlStartNewGameYourEmpire.ResumeLayout(false);
            this.pnlStartNewGameYourEmpire.PerformLayout();
            this.pnlStartNewGameYourEmpireGovernment.ResumeLayout(false);
            this.pnlStartNewGameYourEmpireGovernment.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpirePiratePlaystyle).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireImage).EndInit();
            this.pnlStartNewGameYourEmpireGalaxyLocation.ResumeLayout(false);
            this.pnlStartNewGameYourEmpireGalaxyLocation.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameYourEmpireGalaxyLocation).EndInit();
            this.pnlStartNewGameYourEmpireDetails.ResumeLayout(false);
            this.pnlStartNewGameYourEmpireDetails.PerformLayout();
            this.pnlStartNewGameTheGalaxy.ResumeLayout(false);
            this.pnlStartNewGameTheGalaxy.PerformLayout();
            this.pnlStartNewGameTheGalaxyLoadExisting.ResumeLayout(false);
            this.pnlStartNewGameTheGalaxyLoadExisting.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.numStartNewGameTheGalaxyResearchBaseTech).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameTheGalaxyImage).EndInit();
            this.pnlStartNewGameGalaxyShapeSize.ResumeLayout(false);
            this.pnlStartNewGameGalaxyShapeSize.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameTheGalaxyPreview).EndInit();
            this.pnlStartNewGameColonizationTerritory.ResumeLayout(false);
            this.pnlStartNewGameColonizationTerritory.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameColonizationTerritoryImage).EndInit();
            this.grpStartNewGameColonizationTerritoryColonizationRange.ResumeLayout(false);
            this.grpStartNewGameColonizationTerritoryColonizationRange.PerformLayout();
            this.pnlStartNewGameOtherEmpires.ResumeLayout(false);
            this.pnlStartNewGameOtherEmpires.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameOtherEmpiresImageBottom).EndInit();
            this.pnlStartNewGameOtherEmpiresList.ResumeLayout(false);
            this.pnlStartNewGameOtherEmpiresAutoGen.ResumeLayout(false);
            this.pnlStartNewGameOtherEmpiresAutoGen.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.numAutogenerateEmpiresAmount).EndInit();
            this.pnlStartNewGameVictoryConditions.ResumeLayout(false);
            this.pnlStartNewGameVictoryConditions.PerformLayout();
            this.pnlStartNewGameVictoryConditionsGroup.ResumeLayout(false);
            this.pnlStartNewGameVictoryConditionsGroup.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryTerritoryPercent).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryEconomyPercent).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryPopulationPercent).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.picStartNewGameVictoryConditionsImage).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryTimeLimitYears).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.numVictoryTimeStartYears).EndInit();
            this.pnlStartNewGameGalaxyMaps.ResumeLayout(false);
            this.pnlStartNewGameGalaxyMaps.PerformLayout();
            this.pnlAbout.ResumeLayout(false);
            this.pnlAbout.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.picAbout).EndInit();
            this.pnlSaveLoadProgress.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)this.picSaveLoadGalaxy).EndInit();
            this.pnlButtons.ResumeLayout(false);
            this.pnlButtons.PerformLayout();
            this.menuGroup.ResumeLayout(false);
            this.pnlEncyclopedia.ResumeLayout(false);
            this.pnlEncyclopedia.PerformLayout();
            this.pnlGameOptionsAdvancedDisplaySettings.ResumeLayout(false);
            this.pnlGameOptionsAdvancedDisplaySettings.PerformLayout();
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.ResumeLayout(false);
            this.grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.PerformLayout();
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.ResumeLayout(false);
            this.grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.numGameOptionsAdvancedDisplaySettingsMaximumFramerate).EndInit();
            this.pnlQuickStart.ResumeLayout(false);
            this.pnlQuickStart.PerformLayout();
            this.pnlQuickStartDescription.ResumeLayout(false);
            this.pnlQuickStartDescription.PerformLayout();
            this.FtIzCrmve5.ResumeLayout(false);
            this.FtIzCrmve5.PerformLayout();
            this.pnlGameOptionsEmpireSettings.ResumeLayout(false);
            this.pnlGameOptionsEmpireSettings.PerformLayout();
            this.grpGameOptionsDefaultEngagementStancesManual.ResumeLayout(false);
            this.grpGameOptionsDefaultEngagementStancesManual.PerformLayout();
            this.grpGameOptionsDiscoveries.ResumeLayout(false);
            this.grpGameOptionsDiscoveries.PerformLayout();
            this.grpGameOptionsFleetAttackSettings.ResumeLayout(false);
            this.grpGameOptionsFleetAttackSettings.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)this.numGameOptionsFleetAttackGather).EndInit();
            ((System.ComponentModel.ISupportInitialize)this.numGameOptionsFleetAttackRefuel).EndInit();
            this.grpGameOptionsDefaultEngagementStances.ResumeLayout(false);
            this.grpGameOptionsDefaultEngagementStances.PerformLayout();
            this.pnlTopLeftCorner.ResumeLayout(false);
            this.pnlBottomLeftCorner.ResumeLayout(false);
            this.pnlBottomLeftCorner.PerformLayout();
            base.ResumeLayout(false);
            base.PerformLayout();
        }

        [DllImport("kernel32.dll")]
        private static extern ErrorModes SetErrorMode(ErrorModes errorModes_0);

        [DllImport("kernel32.dll")]
        private static extern ErrorModes GetErrorMode();

        public Start() : base()
        {

            bool_0 = true;
            color_0 = Color.FromArgb(96, 255, 64, 64);
            oyxRtRyAwjg = new BackgroundWorker();
            timer_0 = new System.Timers.Timer();
            float_1 = 1f;
            list_0 = new List<Control>();
            galaxySummaryList_0 = new GalaxySummaryList();
            string_1 = string.Empty;
            //bool_4 = true;
            wjhRtsSwmsa = string.Empty;
            try
            {
                TextResolver.LoadText(Application.StartupPath + "\\GameText.txt");
                GameOptions gameOptions = Main.smethod_0();
                string customizationSetName = string.Empty;
                if (gameOptions != null && !string.IsNullOrEmpty(gameOptions.CustomizationSetName))
                {
                    customizationSetName = gameOptions.CustomizationSetName;
                    string text = Application.StartupPath + "\\Customization\\" + gameOptions.CustomizationSetName + "\\";
                    if (!Directory.Exists(text))
                    {
                        customizationSetName = string.Empty;
                    }
                    string text2 = text + "GameText.txt";
                    if (File.Exists(text2))
                    {
                        TextResolver.LoadText(text2);
                    }
                }
                Galaxy.InitializeData(Application.StartupPath, customizationSetName, out resourceSystem_0);
                InitializeComponent();
                BaconStart.InitializeMore(this, gameOptions);
                Main._ExpModMain.ModStartup(this);
                intptr_0 = method_150("DistantWorlds.Resources.Forgotte.ttf");
                intptr_1 = method_150("DistantWorlds.Resources.Forgottb.ttf");
                SetStyle(ControlStyles.OptimizedDoubleBuffer, value: true);
                SetStyle(ControlStyles.AllPaintingInWmPaint, value: true);
                SetStyle(ControlStyles.UserPaint, value: true);
                UpdateStyles();
                timer_0.Elapsed += timer_0_Elapsed;
                delegate7_0 = method_18;
                delegate8_0 = method_2;
                delegate9_0 = method_4;
                delegate10_0 = method_8;
            }
            catch (Exception ex)
            {
                Main.CrashDump(ex);
                throw;
            }
        }

        [DllImport("user32")]
        private static extern int SystemParametersInfo(int int_1, int int_2, int int_3, int int_4);

        public bool ToggleScreenSaverActive(bool active)
        {
            int int_ = (active ? 1 : 0);
            int num = SystemParametersInfo(17, int_, 0, 0);
            return num > 0;
        }

        private Dictionary<string, double> method_0(string string_2)
        {
            Dictionary<string, double> dictionary = new Dictionary<string, double>();
            string text = string_2 + "\\startup.ini";
            int num = 0;
            try
            {
                if (File.Exists(text))
                {
                    FileStream fileStream = File.OpenRead(text);
                    StreamReader streamReader = new StreamReader(fileStream);
                    while (true)
                    {
                        if (!streamReader.EndOfStream)
                        {
                            num++;
                            string text2 = streamReader.ReadLine();
                            if (!string.IsNullOrEmpty(text2) && text2.Trim() != string.Empty && text2.Trim().Substring(0, 1) != "'")
                            {
                                int num2 = text2.IndexOf(" ");
                                if (num2 < 0)
                                {
                                    break;
                                }
                                string text3 = text2.Substring(0, num2);
                                string text4 = text2.Substring(num2, text2.Length - num2);
                                text4 = text4.Trim();
                                double result = -1.0;
                                if (!double.TryParse(text4, NumberStyles.Float, CultureInfo.InvariantCulture, out result))
                                {
                                    throw new ApplicationException(string.Format(TextResolver.GetText("Error reading value in file Startup.ini at line X"), num.ToString()));
                                }
                                dictionary.Add(text3.ToLower(CultureInfo.InvariantCulture), result);
                            }
                            continue;
                        }
                        streamReader.Close();
                        fileStream.Close();
                        return dictionary;
                    }
                    throw new ApplicationException(string.Format(TextResolver.GetText("Error reading name in file Startup.ini at line X"), num.ToString()));
                }
                return dictionary;
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException(string.Format(TextResolver.GetText("Error at line X reading file Y"), num.ToString(), text));
            }
        }

        private void Start_Load(object sender, EventArgs e)
        {
            //IL_1ba8: Unknown result type (might be due to invalid IL or missing references)
            //IL_1bb2: Expected O, but got Unknown
            //IL_1bbf: Unknown result type (might be due to invalid IL or missing references)
            //IL_1bc9: Expected O, but got Unknown
            //IL_1bd6: Unknown result type (might be due to invalid IL or missing references)
            //IL_1be0: Expected O, but got Unknown
            try
            {
                SetControlLocalizedLabels();
                font_0 = ((IFontCache)this).GenerateFont(15.33f, isBold: false);
                font_1 = ((IFontCache)this).GenerateFont(20.77f, isBold: false);
                font_2 = ((IFontCache)this).GenerateFont(15.33f, isBold: false);
                font_3 = ((IFontCache)this).GenerateFont(16.67f, isBold: false);
                font_4 = ((IFontCache)this).GenerateFont(16.67f, isBold: true);
                font_6 = ((IFontCache)this).GenerateFont(15.33f, isBold: true);
                font_5 = ((IFontCache)this).GenerateFont(18.67f, isBold: false);
                font_7 = ((IFontCache)this).GenerateFont(18.67f, isBold: true);
                font_8 = ((IFontCache)this).GenerateFont(18.67f, isBold: true);
                font_9 = ((IFontCache)this).GenerateFont(22.67f, isBold: true);
                font_10 = ((IFontCache)this).GenerateFont(32f, isBold: true);
                Font font = Font;
                method_151(font_0, this);
                method_152(font_0, this, typeof(BorderPanel));
                method_152(((IFontCache)this).GenerateFont(15.83f, isBold: true), this, typeof(GlassButton));
                Font = font;
                //Splash splash = new Splash();
                //method_151(font_7, splash.lblMessage);
                //splash.Show();
                //method_151(font_7, Class5._Splash.lblMessage);
                Class5._Splash.SetFont(font_7);
                //Class5._Splash.Show();
                Class5._Splash.Start();
                pnlAbout.SetFontCache(this);
                pnlEncyclopedia.SetFontCache(this);
                pnlNewGame.SetFontCache(this);
                pnlQuickStart.SetFontCache(this);
                pnlSaveLoadProgress.SetFontCache(this);
                FtIzCrmve5.SetFontCache(this);
                pnlGameOptions.SetFontCache(this);
                pnlGameOptionsAdvancedDisplaySettings.SetFontCache(this);
                pnlGameOptionsEmpireSettings.SetFontCache(this);
                pnlGameOptionsMessages.SetFontCache(this);
                pnlThemes.SetFontCache(this);
                pnlButtons.SetFontCache(this);
                pnlEncyclopediaRelatedItems.SetFontCache(this);
                pnlEncyclopediaTopics.SetFontCache(this);
                pnlStartNewGameYourEmpireDetails.SetFontCache(this);
                pnlStartNewGameYourEmpireGalaxyLocation.SetFontCache(this);
                pnlStartNewGameYourEmpireGovernment.SetFontCache(this);
                pnlStartNewGameYourEmpireRace.SetFontCache(this);
                pnlQuickStartDescription.SetFontCache(this);
                ctlStartingEmpiresList.SetFontCache(this);
                pnlThemeDetail.SetFontCache(this);
                ctlStartNewGameGalaxyMapsGalaxies.SetFontCache(this);
                ctlStartNewGameGalaxyMapsEmpires.SetFontCache(this);
                Size size = Screen.GetBounds(this).Size;
                Cursor.Current = Cursors.WaitCursor;
                Application.DoEvents();
                string text = Application.StartupPath + "\\images\\";
                string text2 = text + "ui\\chrome\\";
                bitmap_0 = (Bitmap)Image.FromFile(text2 + "galaxy.png");
                bitmap_1 = (Bitmap)Image.FromFile(text2 + "smallTitle.png");
                bitmap_2 = (Bitmap)Image.FromFile(text2 + "codeforce.png");
                bitmap_3 = (Bitmap)Image.FromFile(text2 + "matrix.png");
                bitmap_11 = (Bitmap)Image.FromFile(text2 + "remove.png");
                bitmap_4 = (Bitmap)Image.FromFile(text2 + "galaxyshape_elliptical.png");
                bitmap_5 = (Bitmap)Image.FromFile(text2 + "galaxyshape_spiral.png");
                bitmap_6 = (Bitmap)Image.FromFile(text2 + "galaxyshape_ring.png");
                bitmap_7 = (Bitmap)Image.FromFile(text2 + "galaxyshape_irregular.png");
                bitmap_8 = (Bitmap)Image.FromFile(text2 + "galaxyshape_clusterseven.png");
                bitmap_9 = (Bitmap)Image.FromFile(text2 + "galaxyshape_clustersvaried.png");
                bitmap_12 = (Bitmap)Image.FromFile(text2 + "pirateflag.png");
                bitmap_13 = (Bitmap)Image.FromFile(text2 + "pirateflag_small.png");
                solidBrush_0 = new SolidBrush(color_0);
                Dictionary<string, double> dictionary = method_0(Application.StartupPath);
                int num = 0;
                if (dictionary.ContainsKey("screenwidth"))
                {
                    num = (int)dictionary["screenwidth"];
                }
                int num2 = 0;
                if (dictionary.ContainsKey("screenheight"))
                {
                    num2 = (int)dictionary["screenheight"];
                }
                bool flag = true;
                if (num < 1024 || num2 < 768)
                {
                    num = size.Width;
                    num2 = size.Height;
                    flag = false;
                }
                main_0 = new Main(num, num2, flag);
                bool flag2 = true;
                if (dictionary.ContainsKey("playmovie") && (int)dictionary["playmovie"] == 0)
                {
                    flag2 = false;
                }
                double_0 = 1.0;
                if (dictionary.ContainsKey("hyperdrivespeed"))
                {
                    double_0 = dictionary["hyperdrivespeed"];
                    double_0 = Math.Max(1.0, Math.Min(3.0, double_0));
                }
                base.Visible = false;
                SuspendLayout();
                SetStyle(ControlStyles.OptimizedDoubleBuffer, value: true);
                SetStyle(ControlStyles.AllPaintingInWmPaint, value: true);
                UpdateStyles();
                BringToFront();
                if (flag)
                {
                    base.FormBorderStyle = FormBorderStyle.Fixed3D;
                    base.MaximizeBox = false;
                    base.ClientSize = new Size(num, num2);
                    CenterToScreen();
                }
                else
                {
                    base.FormBorderStyle = FormBorderStyle.None;
                    base.ClientSize = new Size(num, num2);
                    base.Location = new Point(0, 0);
                    base.WindowState = FormWindowState.Minimized;
                    base.WindowState = FormWindowState.Maximized;
                }
                ToggleScreenSaverActive(active: false);
                lblActiveTheme.Font = font_7;
                int num3 = num / 2;
                lblActiveTheme.Location = new Point(num3, 20);
                lblActiveTheme.TextAlign = ContentAlignment.MiddleCenter;
                lblStartNewGameActiveTheme.Font = font_6;
                lblStartNewGameActiveTheme.TextAlign = ContentAlignment.MiddleCenter;
                int num4 = 340;
                int num5 = 500;
                int num6 = 300;
                int num7 = 111;
                int num8 = 76;
                if (num > 1920 && num2 > 1080)
                {
                    float_1 = (float)num2 / 1080f;
                    num4 = (int)((float)num4 * float_1);
                    num5 = (int)((float)num5 * float_1);
                    num6 = (int)((float)num6 * float_1);
                    num7 = (int)((float)num7 * float_1);
                    num8 = (int)((float)num8 * float_1);
                    font_2 = ((IFontCache)this).GenerateFont(15.33f * float_1, isBold: false);
                    font_8 = ((IFontCache)this).GenerateFont(18.67f * float_1, isBold: true);
                }
                pnlButtons.Size = new Size(num4, num5);
                int num9 = (num2 - pnlButtons.Height) / 2;
                pnlButtons.Location = new Point((num - pnlButtons.Width) / 2, num9);
                pnlButtons.BackColor = Color.FromArgb(208, 15, 15, 15);
                pnlButtons.BackColor2 = Color.FromArgb(208, 37, 35, 49);
                pnlButtons.BackColor3 = Color.FromArgb(208, 15, 15, 15);
                pnlButtons.BorderColor = Color.FromArgb(208, 31, 30, 41);
                pnlButtons.BorderWidth = 3;
                Color linkColor = Color.FromArgb(194, 194, 194);
                Color activeLinkColor = Color.FromArgb(255, 192, 0);
                lnkTutorial.LinkColor = linkColor;
                lnkPlayScenario.LinkColor = linkColor;
                lnkNewGame.LinkColor = linkColor;
                lnkLoadGame.LinkColor = linkColor;
                lnkGalactopedia.LinkColor = linkColor;
                lnkOptions.LinkColor = linkColor;
                lnkThemes.LinkColor = linkColor;
                lnkCheckForUpdates.LinkColor = linkColor;
                lnkAbout.LinkColor = linkColor;
                lnkExit.LinkColor = linkColor;
                lnkTutorial.ActiveLinkColor = activeLinkColor;
                lnkPlayScenario.ActiveLinkColor = activeLinkColor;
                lnkNewGame.ActiveLinkColor = activeLinkColor;
                lnkLoadGame.ActiveLinkColor = activeLinkColor;
                lnkGalactopedia.ActiveLinkColor = activeLinkColor;
                lnkOptions.ActiveLinkColor = activeLinkColor;
                lnkThemes.ActiveLinkColor = activeLinkColor;
                lnkCheckForUpdates.ActiveLinkColor = activeLinkColor;
                lnkAbout.ActiveLinkColor = activeLinkColor;
                lnkExit.ActiveLinkColor = activeLinkColor;
                lnkTutorial.Font = font_10;
                lnkPlayScenario.Font = font_10;
                lnkNewGame.Font = font_10;
                lnkLoadGame.Font = font_10;
                lnkGalactopedia.Font = font_10;
                lnkOptions.Font = font_10;
                lnkThemes.Font = font_10;
                lnkCheckForUpdates.Font = font_10;
                lnkAbout.Font = font_10;
                lnkExit.Font = font_10;
                lblVersion.Font = font_2;
                lnkCopyright.Font = font_7;
                int num10 = 36;
                lnkTutorial.Visible = false;
                lnkPlayScenario.Visible = false;
                lnkNewGame.Visible = false;
                lnkLoadGame.Visible = false;
                lnkGalactopedia.Visible = false;
                lnkOptions.Visible = false;
                lnkThemes.Visible = false;
                lnkCheckForUpdates.Visible = false;
                lnkAbout.Visible = false;
                lnkExit.Visible = false;
                menuGroup.Location = new Point(0, 0);
                menuGroup.Size = pnlButtons.Size;
                menuGroup.AddMenuItem(menuTutorials);
                menuGroup.AddMenuItem(menuStartNewGame);
                menuGroup.AddMenuItem(menuLoadGame);
                menuGroup.AddMenuItem(menuOptions);
                menuGroup.AddMenuItem(menuChangeTheme);
                menuGroup.AddMenuItem(menuExit);
                int num11 = num7;
                menuTutorials.Size = new Size(num6, num11);
                menuStartNewGame.Size = new Size(num6, num11);
                menuLoadGame.Size = new Size(num6, num11);
                menuOptions.Size = new Size(num6, num11);
                menuChangeTheme.Size = new Size(num6, num11);
                menuExit.Size = new Size(num6, num11);
                if (float_1 != 1f)
                {
                    main_0.bitmap_160 = GraphicsHelper.ScaleImage(main_0.bitmap_160, (int)((float)main_0.bitmap_160.Width * float_1), (int)((float)main_0.bitmap_160.Height * float_1), 1f);
                    main_0.bitmap_159 = GraphicsHelper.ScaleImage(main_0.bitmap_159, (int)((float)main_0.bitmap_159.Width * float_1), (int)((float)main_0.bitmap_159.Height * float_1), 1f);
                    main_0.bitmap_162 = GraphicsHelper.ScaleImage(main_0.bitmap_162, (int)((float)main_0.bitmap_162.Width * float_1), (int)((float)main_0.bitmap_162.Height * float_1), 1f);
                    main_0.bitmap_161 = GraphicsHelper.ScaleImage(main_0.bitmap_161, (int)((float)main_0.bitmap_161.Width * float_1), (int)((float)main_0.bitmap_161.Height * float_1), 1f);
                    main_0.bitmap_164 = GraphicsHelper.ScaleImage(main_0.bitmap_164, (int)((float)main_0.bitmap_164.Width * float_1), (int)((float)main_0.bitmap_164.Height * float_1), 1f);
                    main_0.bitmap_163 = GraphicsHelper.ScaleImage(main_0.bitmap_163, (int)((float)main_0.bitmap_163.Width * float_1), (int)((float)main_0.bitmap_163.Height * float_1), 1f);
                    main_0.bitmap_166 = GraphicsHelper.ScaleImage(main_0.bitmap_166, (int)((float)main_0.bitmap_166.Width * float_1), (int)((float)main_0.bitmap_166.Height * float_1), 1f);
                    main_0.bitmap_165 = GraphicsHelper.ScaleImage(main_0.bitmap_165, (int)((float)main_0.bitmap_165.Width * float_1), (int)((float)main_0.bitmap_165.Height * float_1), 1f);
                    main_0.bitmap_168 = GraphicsHelper.ScaleImage(main_0.bitmap_168, (int)((float)main_0.bitmap_168.Width * float_1), (int)((float)main_0.bitmap_168.Height * float_1), 1f);
                    main_0.bitmap_167 = GraphicsHelper.ScaleImage(main_0.bitmap_167, (int)((float)main_0.bitmap_167.Width * float_1), (int)((float)main_0.bitmap_167.Height * float_1), 1f);
                    main_0.bitmap_170 = GraphicsHelper.ScaleImage(main_0.bitmap_170, (int)((float)main_0.bitmap_170.Width * float_1), (int)((float)main_0.bitmap_170.Height * float_1), 1f);
                    main_0.bitmap_169 = GraphicsHelper.ScaleImage(main_0.bitmap_169, (int)((float)main_0.bitmap_169.Width * float_1), (int)((float)main_0.bitmap_169.Height * float_1), 1f);
                }
                menuTutorials.InitializeMenuItem(main_0.bitmap_160, main_0.bitmap_159);
                menuStartNewGame.InitializeMenuItem(main_0.bitmap_162, main_0.bitmap_161);
                menuLoadGame.InitializeMenuItem(main_0.bitmap_164, main_0.bitmap_163);
                menuOptions.InitializeMenuItem(main_0.bitmap_166, main_0.bitmap_165);
                menuChangeTheme.InitializeMenuItem(main_0.bitmap_168, main_0.bitmap_167);
                menuExit.InitializeMenuItem(main_0.bitmap_170, main_0.bitmap_169);
                num10 = 0;
                menuTutorials.Location = new Point((pnlButtons.Width - menuTutorials.Width) / 2, 0);
                menuStartNewGame.Location = new Point((pnlButtons.Width - menuStartNewGame.Width) / 2, 0 + num8);
                menuLoadGame.Location = new Point((pnlButtons.Width - menuLoadGame.Width) / 2, 0 + num8 * 2);
                menuOptions.Location = new Point((pnlButtons.Width - menuOptions.Width) / 2, 0 + num8 * 3);
                menuChangeTheme.Location = new Point((pnlButtons.Width - menuChangeTheme.Width) / 2, 0 + num8 * 4);
                menuExit.Location = new Point((pnlButtons.Width - menuExit.Width) / 2, 0 + num8 * 5);
                int num12 = (int)(115f * float_1);
                int num13 = (int)(97f * float_1);
                int num14 = (int)(135f * float_1);
                int num15 = (int)(117f * float_1);
                pnlTopLeftCorner.Size = new Size(num14, num15);
                pnlTopLeftCorner.Location = new Point(0, 0);
                pnlTopLeftCorner.BackColor = Color.FromArgb(144, 0, 0, 0);
                int num16 = (int)(108f * float_1);
                int num17 = (int)(56f * float_1);
                int num18 = (int)(135f * float_1);
                int num19 = (int)(112f * float_1);
                pnlBottomLeftCorner.Size = new Size(num18, num19);
                pnlBottomLeftCorner.Location = new Point(0, num2 - num19);
                pnlBottomLeftCorner.BackColor = Color.FromArgb(144, 0, 0, 0);
                menuGalactopedia.Size = new Size(num12, num13);
                menuGalactopedia.Location = new Point((num14 - num12) / 2, (num15 - num13) / 2);
                if (float_1 != 1f)
                {
                    main_0.bitmap_172 = GraphicsHelper.ScaleImage(main_0.bitmap_172, float_1, 1f);
                    main_0.bitmap_171 = GraphicsHelper.ScaleImage(main_0.bitmap_171, float_1, 1f);
                }
                menuGalactopedia.InitializeMenuItem(main_0.bitmap_172, main_0.bitmap_171);
                menuCheckForUpdates.Size = new Size(num16, num17);
                menuCheckForUpdates.Location = new Point((num18 - num16) / 2, (num19 - num17) / 2);
                if (float_1 != 1f)
                {
                    main_0.bitmap_175 = GraphicsHelper.ScaleImage(main_0.bitmap_175, float_1, 1f);
                    main_0.bitmap_174 = GraphicsHelper.ScaleImage(main_0.bitmap_174, float_1, 1f);
                }
                menuCheckForUpdates.InitializeMenuItem(main_0.bitmap_175, main_0.bitmap_174);
                int num20 = (int)(105f * float_1);
                int num21 = (int)(60f * float_1);
                menuCredits.Size = new Size(105, 60);
                menuCredits.Location = new Point(num - (num20 + 10), num2 - (num21 + 10));
                if (float_1 != 1f)
                {
                    main_0.bitmap_173 = GraphicsHelper.ScaleImage(main_0.bitmap_173, float_1, 1f);
                    main_0.iEycGdoMqb = GraphicsHelper.ScaleImage(main_0.iEycGdoMqb, float_1, 1f);
                }
                menuCredits.InitializeMenuItem(main_0.bitmap_173, main_0.iEycGdoMqb);
                lnkTutorial.Location = new Point((pnlButtons.Width - lnkTutorial.Width) / 2, num10);
                lnkPlayScenario.Location = new Point((pnlButtons.Width - lnkPlayScenario.Width) / 2, num10 + num8);
                lnkNewGame.Location = new Point((pnlButtons.Width - lnkNewGame.Width) / 2, num10 + num8 * 2);
                lnkLoadGame.Location = new Point((pnlButtons.Width - lnkLoadGame.Width) / 2, num10 + num8 * 3);
                lnkGalactopedia.Location = new Point((pnlButtons.Width - lnkGalactopedia.Width) / 2, num10 + num8 * 4);
                lnkOptions.Location = new Point((pnlButtons.Width - lnkOptions.Width) / 2, num10 + num8 * 5);
                lnkThemes.Location = new Point((pnlButtons.Width - lnkThemes.Width) / 2, num10 + num8 * 6);
                lnkCheckForUpdates.Location = new Point((pnlButtons.Width - lnkCheckForUpdates.Width) / 2, num10 + num8 * 7);
                lnkAbout.Location = new Point((pnlButtons.Width - lnkAbout.Width) / 2, num10 + num8 * 8);
                lnkExit.Location = new Point((pnlButtons.Width - lnkExit.Width) / 2, num10 + num8 * 9);
                int num22 = (int)(25f * float_1);
                lblVersion.Location = new Point(num22, pnlBottomLeftCorner.Height - 30);
                lblVersion.Text = TextResolver.GetText("Version") + " " + Application.ProductVersion;
                lblVersion.MaximumSize = new Size(pnlBottomLeftCorner.Width, 30);
                lblVersion.Size = new Size(pnlBottomLeftCorner.Width, 30);
                lblVersion.TextAlign = ContentAlignment.TopCenter;
                Color color = Color.FromArgb(255, 160, 0);
                lblVersion.ForeColor = color;
                lnkCopyright.ForeColor = color;
                lnkCopyright.LinkColor = color;
                lnkCopyright.ActiveLinkColor = color;
                int num23 = (int)(250f * float_1);
                lblMenuHints.Location = new Point(pnlButtons.Location.X - (num23 + 30), pnlButtons.Location.Y + pnlButtons.Height / 2 - 50);
                lblCopyright.Visible = false;
                string text3 = TextResolver.GetText("Copyright");
                Graphics graphics = CreateGraphics();
                int num24 = (int)graphics.MeasureString(text3, lnkCopyright.Font, 600, StringFormat.GenericTypographic).Width;
                lnkCopyright.Location = new Point((num - num24) / 2, num2 - 25);
                lnkCopyright.Text = text3;
                picTitle.Visible = false;
                picTitle.Size = new Size(482, 276);
                int val = (num2 - (10 + picTitle.Height + 10 + pnlButtons.Height + 10 + lnkCopyright.Height + 10)) / 2;
                val = Math.Max(10, val);
                picTitle.Location = new Point((num - picTitle.Width) / 2, 70);
                string text4 = string.Empty;
                if (main_0.gameOptions_0 != null)
                {
                    text4 = main_0.gameOptions_0.CustomizationSetName;
                }
                resourceSystem_0 = Galaxy.InitializeResourceDefinitions(Application.StartupPath, text4);
                Galaxy.ResourceSystemStatic = resourceSystem_0;
                List<string> list = new List<string>();
                list.Add("(" + TextResolver.GetText("Random") + ")");
                raceList_1 = Galaxy.LoadRaces(Application.StartupPath, text4);
                Galaxy.SetResearchRaceSpecialProjects(raceList_1);
                Galaxy.SetResearchComponentMaxTechPoints(main_0.gameOptions_0.StartGameOptions.GalaxyResearchSpeed * 1000);
                raceList_0 = raceList_1.ResolvePlayableRaces();
                foreach (Race item in raceList_0)
                {
                    list.Add(item.Name);
                }
                list.Sort();
                cmbStartNewGameYourEmpireRace.BindData(font_0, raceList_0, null, allowRandomRace: true);
                raceList_0.Sort();
                ctlStartingEmpiresList.SetRaces(text4);
                ctlStartingEmpiresList.SetProximityValues(10, 10);
                Galaxy.FlagShapes = Galaxy.LoadFlagShapes(Application.StartupPath, text4);
                Galaxy.FlagShapesPirates = Galaxy.LoadFlagShapesPirates(Application.StartupPath, text4);
                encyclopediaItemList_0 = main_0.method_465(null, Application.StartupPath, text4);
                encyclopediaItemList_1 = new EncyclopediaItemList();
                int_0 = 0;
                string folderPath = Application.StartupPath + "\\maps\\";
                if (!string.IsNullOrEmpty(text4))
                {
                    folderPath = Application.StartupPath + "\\Customization\\" + text4 + "\\maps\\";
                }
                galaxySummaryList_0.LoadFromFolder(folderPath);
                lblStartNewGameGalaxyMapsAvailableGalaxies.Text = string.Format(TextResolver.GetText("StartNewGame GalaxyMaps AvailableGalaxies"), "(" + TextResolver.GetText("Default") + ")");
                ctlStartNewGameGalaxyMapsGalaxies.SelectionChanged += ctlStartNewGameGalaxyMapsGalaxies_SelectionChanged;
                ctlStartNewGameGalaxyMapsEmpires.SelectionChanged += ctlStartNewGameGalaxyMapsEmpires_SelectionChanged;
                cmbPrimaryColor.Ignite();
                cmbSecondaryColor.Ignite(allowWhite: true, allowBlack: false, useDarkerPalette: false, Color.Empty);
                List<string> list2 = new List<string>();
                for (int i = 0; i < Galaxy.FlagShapes.Count; i++)
                {
                    list2.Add(" ");
                }
                cmbFlagShape.Items.AddRange(list2.ToArray());
                ResumeLayout();
                //splash.Close();
                //Class5._Splash.Close();
                Class5._Splash.Stop();
                method_142(bool_5: false);
                base.Visible = true;
                method_1(text4);
                Cursor.Current = Cursors.Default;
                string text5 = Application.StartupPath + "\\sounds\\effects\\";
                string text6 = string.Empty;
                if (!string.IsNullOrEmpty(text4))
                {
                    text6 = Application.StartupPath + "\\Customization\\" + text4 + "\\sounds\\effects\\";
                }
                if (!string.IsNullOrEmpty(text6) && File.Exists(text6 + "button1.wav"))
                {
                    CloseButton.SetSoundLocation(text6 + "button1.wav");
                }
                else
                {
                    CloseButton.SetSoundLocation(text5 + "button1.wav");
                }
                method_6(text5, text6, this);
                method_5(text5, text6);
                ctlStartingEmpiresList.SoundsEnabled = true;
                SetErrorMode(ErrorModes.SEM_FAILCRITICALERRORS);
                if (flag2)
                {
                    Cursor.Hide();
                    string_0 = new string[3]
                    {
                    Application.StartupPath + "\\movies\\matrixintro.wmv",
                    Application.StartupPath + "\\movies\\codeforceintro.wmv",
                    Application.StartupPath + "\\movies\\distantworldsintro.wmv"
                    };
                    method_141(string_0);
                    /*this.mediaPlayer.PlayStateChange += new AxWMPLib._WMPOCXEvents_PlayStateChangeEventHandler(this.mediaPlayer_PlayStateChange);
                    this.mediaPlayer.MediaError += new AxWMPLib._WMPOCXEvents_MediaErrorEventHandler(this.mediaPlayer_MediaError);
                    this.mediaPlayer.MouseDownEvent += new AxWMPLib._WMPOCXEvents_MouseDownEventHandler(this.mediaPlayer_MouseDownEvent);*/
                }
                oyxRtRyAwjg.DoWork += gameStartBackgroundWorker_DoWork;
                oyxRtRyAwjg.RunWorkerCompleted += oyxRtRyAwjg_RunWorkerCompleted;
                main_0.SendToBack();
                main_0.Visible = true;
                main_0.Visible = false;
                if (main_0 != null && main_0.gameOptions_0 != null && main_0.gameOptions_0.ShowEncyclopediaAtStart)
                {
                    method_127(TextResolver.GetText("Introduction"));
                }
                if (flag2)
                {
                    //((Control)(object)mediaPlayer).BringToFront();
                }
                else
                {
                    method_143();
                }
            }
            catch (Exception ex)
            {
                Main.CrashDump(ex);
                throw;
            }
        }

        private void method_1(string string_2)
        {
            string text = TextResolver.GetText("Current Theme") + ": " + string_2;
            if (string.IsNullOrEmpty(string_2))
            {
                text = string.Empty;
            }
            using (Graphics graphics = lblActiveTheme.CreateGraphics())
            {
                SizeF sizeF = graphics.MeasureString(text, font_7);
                int num = (base.Width - (int)sizeF.Width) / 2;
                lblActiveTheme.Location = new Point(num, lblActiveTheme.Location.Y);
                lblActiveTheme.Text = text;
            }
            using Graphics graphics2 = lblStartNewGameActiveTheme.CreateGraphics();
            int num2 = (900 - (int)graphics2.MeasureString(text, font_6).Width) / 2;
            lblStartNewGameActiveTheme.Location = new Point(num2, 620);
            lblStartNewGameActiveTheme.Text = text;
        }

        private void method_2(string string_2, bool bool_5, bool bool_6)
        {
            if (main_0 == null)
            {
                return;
            }
            bool flag = main_0.mainView.bool_0;
            main_0.mainView.bool_0 = false;
            if (bool_5)
            {
                if (string_2 == "(Default)")
                {
                    string_2 = string.Empty;
                }
                main_0.gameOptions_0.CustomizationSetName = string_2;
            }
            main_0.string_3 = string_2;
            if (string.IsNullOrEmpty(string_2))
            {
                string text = Application.StartupPath + "\\GameText.txt";
                if (File.Exists(text))
                {
                    TextResolver.LoadText(text);
                }
            }
            else
            {
                string text2 = Application.StartupPath + "\\Customization\\" + string_2 + "\\GameText.txt";
                if (File.Exists(text2))
                {
                    TextResolver.LoadText(text2);
                }
            }
            ResourceSystem resourceSystem = null;
            Galaxy.InitializeData(Application.StartupPath, string_2, out resourceSystem);
            resourceSystem_0 = Galaxy.ResourceSystemStatic;
            string string_3 = Application.StartupPath + "\\images\\";
            string string_4 = Application.StartupPath + "\\Customization\\" + string_2 + "\\images\\";
            main_0.bitmap_6 = new Bitmap[22];
            main_0.int_5 = new int[22];
            main_0.bitmap_7 = new Bitmap[22];
            main_0.list_2 = new List<Rectangle>[22];
            main_0.bitmap_23 = new Bitmap[20];
            main_0.bitmap_24 = new Bitmap[20];
            main_0.bitmap_25 = new Bitmap[20];
            main_0.bitmap_26 = new Bitmap[20];
            main_0.bitmap_27 = new Bitmap[20];
            main_0.habitatImageCache_0.Initialize(Application.StartupPath, string_2, initialLoad: false);
            main_0.builtObjectImageCache_0.Initialize(Application.StartupPath, string_2);
            Galaxy.FlagShapes = Galaxy.LoadFlagShapes(Application.StartupPath, string_2);
            Galaxy.FlagShapesPirates = Galaxy.LoadFlagShapesPirates(Application.StartupPath, string_2);
            Parallel.Invoke(() => main_0.LoadFighters(string_3, string_4, 0.5),
                () => main_0.LoadRacesImg(string_3, string_4, string_2),
                () => main_0.LoadTroops(string_3, string_4, string_2),
                () => main_0.LoadUiResources(string_3, string_4),
                () => main_0.LoadUiComponents(string_3, string_4),
                () => main_0.LoadUiChrome(string_3, string_2),
                () => main_0.LoadUiCursors(string_3, string_4),
                () => main_0.LoadEffectsWeapons(string_3, string_4),
                () => main_0.LoadPlanetaryFacilities(string_3, string_4),
                () => main_0.LoadRuins(string_3, string_4));
            main_0.string_27 = string.Empty;
            bool bool_7 = false;
            if (string.IsNullOrEmpty(string_2))
            {
                bool_7 = true;
            }
            double double_ = 0.5;
            Parallel.Invoke(() => main_0.LoadStars(string_3, string_4, double_, bool_7),
                () => main_0.LoadHyperEffects(string_3, string_4, double_),
                () => main_0.LoadEffects(string_3, string_4, double_),
                () => main_0.LoadEnvironmentOverlays(string_3, string_4),
                () => main_0.LoadEffectsExplosion(string_3, string_4, double_, bool_7),
                () => main_0.LoadUiMessages(string_3, string_4),
                () => main_0.LoadUiEvents(string_3, string_4),
                () => main_0.LoadUiPlagues(string_3, string_4),
                () => main_0.LoadEnvLandscapes(string_3, string_4),
                () => main_0.LoadUiAchievements(string_3, string_4),
                () => main_0.LoadUiShipsymbols(string_3, string_4),
                () => main_0.LoadEnvGalaxybackdrops(string_3, string_4)
            );
            main_0.mainView.ResetRendering();
            encyclopediaItemList_0 = main_0.method_465(null, Application.StartupPath, string_2);
            encyclopediaItemList_1 = new EncyclopediaItemList();
            int_0 = 0;
            main_0.encyclopediaItemList_0 = main_0.method_465(null, Application.StartupPath, string_2);
            main_0.vTtmruAejE = new EncyclopediaItemList();
            main_0.int_25 = 0;
            main_0.subRoleNameSet_0 = Galaxy.LoadShipNames(Application.StartupPath, string_2);
            main_0.list_1 = Galaxy.LoadColonyNames(Application.StartupPath, string_2);
            raceList_1 = Galaxy.LoadRaces(Application.StartupPath, string_2);
            raceList_0 = raceList_1.ResolvePlayableRaces();
            Galaxy.SetResearchRaceSpecialProjects(raceList_1);
            method_3(string_2);
            main_0.EffectsPlayer.Initialize(Application.StartupPath, string_2);
            string text3 = Application.StartupPath + "\\sounds\\effects\\";
            string text4 = string.Empty;
            if (!string.IsNullOrEmpty(string_2))
            {
                text4 = Application.StartupPath + "\\Customization\\" + string_2 + "\\sounds\\effects\\";
            }
            if (!string.IsNullOrEmpty(text4) && File.Exists(text4 + "button1.wav"))
            {
                CloseButton.SetSoundLocation(text4 + "button1.wav");
            }
            else
            {
                CloseButton.SetSoundLocation(text3 + "button1.wav");
            }
            method_6(text3, text4, this);
            method_5(text3, text4);
            Invoke(delegate9_0, string_2, bool_6);
            main_0.method_65(200);
            main_0.mainView.bool_0 = flag;
        }

        private void method_3(string string_2)
        {
            string folderPath = Application.StartupPath + "\\maps\\";
            if (!string.IsNullOrEmpty(string_2))
            {
                folderPath = Application.StartupPath + "\\Customization\\" + string_2 + "\\maps\\";
            }
            galaxySummaryList_0.Clear();
            galaxySummaryList_0.LoadFromFolder(folderPath);
        }

        private void method_4(string string_2, bool bool_5)
        {
            lblStartNewGameGalaxyMapsAvailableGalaxies.Text = string.Format(TextResolver.GetText("StartNewGame GalaxyMaps AvailableGalaxies"), string_2);
            pnlStartNewGameYourEmpireRaceAttributes.BindData(null, font_3, font_7);
            picStartNewGameYourEmpireRace.Image = null;
            if (bool_5)
            {
                cmbStartNewGameYourEmpireRace.BindData(font_0, raceList_0, null, allowRandomRace: true);
                cmbJumpStartYourEmpireRace.BindData(font_0, raceList_0, null, allowRandomRace: true);
                raceList_0.Sort();
                ctlStartingEmpiresList.SetRaces(string_2);
                ctlStartingEmpiresList.SetProximityValues(10, 10);
            }
            main_0.method_72(string_2);
            method_1(string_2);
            main_0.method_67(string_2);
        }

        private void method_5(string string_2, string string_3)
        {
            string text = string_2 + "button2.wav";
            if (!string.IsNullOrEmpty(string_3) && File.Exists(string_3 + "button2.wav"))
            {
                text = string_3 + "button2.wav";
            }
            string_1 = text;
        }

        private void method_6(string string_2, string string_3, Control control_0)
        {
            if (control_0 is GlassButton)
            {
                if (!string.IsNullOrEmpty(string_3) && File.Exists(string_3 + "button1.wav"))
                {
                    GlassButton.SetSoundLocation(string_3 + "button1.wav");
                }
                else
                {
                    GlassButton.SetSoundLocation(string_2 + "button1.wav");
                }
            }
            if (control_0 is HoverButton)
            {
                if (!string.IsNullOrEmpty(string_3) && File.Exists(string_3 + "button2.wav"))
                {
                    HoverButton.SetSoundLocation(string_3 + "button2.wav");
                }
                else
                {
                    HoverButton.SetSoundLocation(string_2 + "button2.wav");
                }
            }
            if (control_0 is ListViewBase)
            {
                if (!string.IsNullOrEmpty(string_3) && File.Exists(string_3 + "grid.wav"))
                {
                    ListViewBase.SetSoundLocation(string_3 + "grid.wav");
                }
                else
                {
                    ListViewBase.SetSoundLocation(string_2 + "grid.wav");
                }
            }
            if (control_0 is HoverMenuItem)
            {
                if (!string.IsNullOrEmpty(string_3) && File.Exists(string_3 + "button2.wav"))
                {
                    HoverMenuItem.SetSoundLocation(string_3 + "button2.wav");
                }
                else
                {
                    HoverMenuItem.SetSoundLocation(string_2 + "button2.wav");
                }
            }
            if (control_0.Controls == null)
            {
                return;
            }
            foreach (Control control in control_0.Controls)
            {
                method_6(string_2, string_3, control);
            }
        }

        private void lnkNewGame_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_31("");
        }

        private ICryptoTransform method_7(byte[] byte_0, byte[] byte_1)
        {
            Rijndael rijndael = new RijndaelManaged();
            rijndael.KeySize = 128;
            rijndael.Padding = PaddingMode.Zeros;
            rijndael.Mode = CipherMode.CBC;
            return rijndael.CreateDecryptor(byte_0, byte_1);
        }

        private void method_8(string string_2)
        {
            pnlSaveLoadProgress.Size = new Size(320, 330);
            pnlSaveLoadProgress.Location = new Point((base.Width - pnlSaveLoadProgress.Width) / 2, (base.Height - pnlSaveLoadProgress.Height) / 2);
            pnlSaveLoadProgress.Font = font_7;
            Point location = new Point((pnlSaveLoadProgress.Width - bitmap_0.Width) / 2, (pnlSaveLoadProgress.Height - bitmap_0.Height) / 2 + 15);
            picSaveLoadGalaxy.Size = new Size(bitmap_0.Width, bitmap_0.Height);
            picSaveLoadGalaxy.Location = location;
            picSaveLoadGalaxy.BringToFront();
            Graphics graphics = lblSaveLoadMessage.CreateGraphics();
            int num = (int)graphics.MeasureString(string_2, pnlSaveLoadProgress.Font, 320, StringFormat.GenericTypographic).Width;
            int num2 = (int)graphics.MeasureString(string_2, pnlSaveLoadProgress.Font, 320, StringFormat.GenericTypographic).Height;
            lblSaveLoadMessage.Size = new Size(num + 2, num2 + 2);
            lblSaveLoadMessage.Location = new Point((pnlSaveLoadProgress.Width - num) / 2, 13);
            lblSaveLoadMessage.Font = font_7;
            lblSaveLoadMessage.ForeColor = Color.White;
            lblSaveLoadMessage.BackColor = Color.Transparent;
            lblSaveLoadMessage.Text = string_2;
            lblSaveLoadMessage.BringToFront();
            pnlSaveLoadProgress.BringToFront();
            pnlSaveLoadProgress.Visible = true;
            pnlSaveLoadProgress.Update();
            method_17(pnlSaveLoadProgress);
        }

        private void method_9()
        {
            method_19();
            pnlSaveLoadProgress.Visible = false;
        }

        private void method_10()
        {
            while (!bool_0)
            {
                Application.UseWaitCursor = true;
                Cursor.Current = Cursors.WaitCursor;
                Application.DoEvents();
                Thread.Sleep(30);
            }
            Application.UseWaitCursor = false;
            Cursor.Current = Cursors.Default;
        }

        private void method_11(object object_0)
        {
            try
            {
                GC.Collect();
                string string_ = string.Empty;
                Stream stream_ = null;
                if (object_0 is List<object>)
                {
                    List<object> list = (List<object>)object_0;
                    if (list[0] is string)
                    {
                        string_ = (string)list[0];
                    }
                    if (list[1] is Stream)
                    {
                        stream_ = (Stream)list[1];
                    }
                }
                List<object> list2 = new List<object>();
                list2 = LoadFromFile(string_, stream_, bool_5: true);
                method_14(list2);
            }
            catch (SerializationException)
            {
                string text = TextResolver.GetText("This is not a valid Distant Worlds game file");
                MessageBox.Show(text, TextResolver.GetText("Cannot load file"), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                method_12();
            }
            catch (OutOfMemoryException)
            {
                string text2 = "There was not enough memory to load this Distant Worlds game. Please close all other open applications and try again.";
                text2 = text2 + "\n\nWorking Set: " + Environment.WorkingSet + " bytes";
                MessageBox.Show(text2, "Cannot load file", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                method_12();
            }
            catch (Exception ex3)
            {
                string text3 = "Distant Worlds could not load this game.";
                text3 += "\n\nError:\n\n";
                text3 += ex3.ToString();
                text3 = text3 + "\n\nWorking Set: " + Environment.WorkingSet + " bytes";
                MessageBox.Show(text3, "Cannot load file", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                method_12();
            }
            finally
            {
                bool_0 = true;
            }
        }

        private void method_12()
        {
            RecoverFromLoadErrorDelegate method = method_13;
            Invoke(method);
        }

        private void method_13()
        {
            Application.UseWaitCursor = false;
            Cursor.Current = Cursors.Default;
            method_9();
            base.Enabled = true;
            Show();
            main_0.Visible = false;
            bool_1 = true;
        }

        private List<object> LoadFromFile(string filePath, Stream fileStream, bool bool_5)
        {
            //IL_015e: Unknown result type (might be due to invalid IL or missing references)
            //IL_0165: Expected O, but got Unknown
            List<object> list = new List<object>();
            GalaxySummary galaxySummary = GalaxySummary.ReadGalaxySummary(fileStream);
            string text = galaxySummary.ThemeName;
            string text2 = main_0.string_3;
            if (string.IsNullOrEmpty(text))
            {
                text = string.Empty;
            }
            if (string.IsNullOrEmpty(text2))
            {
                text2 = string.Empty;
            }
            if (bool_5 && text != text2 && delegate8_0 != null)
            {
                Application.DoEvents();
                string text3 = galaxySummary.ThemeName;
                if (string.IsNullOrEmpty(text3))
                {
                    text3 = "(" + TextResolver.GetText("Default") + ")";
                }
                Invoke(delegate10_0, string.Format(TextResolver.GetText("Switching to THEMENAME theme"), text3));
                Application.DoEvents();
                Invoke(delegate8_0, galaxySummary.ThemeName, true, true);
                Application.DoEvents();
                Invoke(delegate10_0, TextResolver.GetText("Loading the Galaxy..."));
                Application.DoEvents();
            }
            CompactSerializer compactSerializer = new CompactSerializer(typeof(Game), main_0.method_358());
            ICryptoTransform transform = method_7(Main.byte_0, Main.byte_1);
            CryptoStream cryptoStream = new CryptoStream(fileStream, transform, CryptoStreamMode.Read);
            DeflateStream val = new DeflateStream(cryptoStream, (CompressionMode)1, (CompressionLevel)1, true);
            val.BufferSize = 4194304;
            XmlDictionaryReaderQuotas max = XmlDictionaryReaderQuotas.Max;
            XmlDictionaryReader xmlDictionaryReader = XmlDictionaryReader.CreateBinaryReader(val, max);
            Game item = (Game)compactSerializer.ReadObject(xmlDictionaryReader);
            Main._ExpModMain.FixAllDesignRepairTemplates(item, false);
            xmlDictionaryReader.Close();
            val.Close();
            cryptoStream.Close();
            fileStream.Close();
            list.Add(filePath);
            list.Add(item);
            return list;
        }

        private void method_14(object object_0)
        {
            string string_ = string.Empty;
            Game game = null;
            if (object_0 is List<object>)
            {
                List<object> list = (List<object>)object_0;
                if (list[0] is string)
                {
                    string_ = (string)list[0];
                }
                if (list[1] is Game)
                {
                    game = (Game)list[1];
                }
            }
            Galaxy.SetGalaxyPhysicalDimensions(game.Galaxy.SectorWidth, game.Galaxy.SectorHeight);
            Galaxy.AssignGalaxyDataToStatic(game.Galaxy.ResourceSystem, game.Galaxy.PlanetaryFacilityDefinitions, game.Galaxy.ComponentDefinitions, game.Galaxy.FighterSpecifications, game.Galaxy.ResearchNodeDefinitions, game.Galaxy.Governments, game.Galaxy.RaceFamilies, game.Galaxy.Plagues);
            Galaxy.SetResearchRaceSpecialProjects(game.Galaxy.Races);
            Galaxy.SetResearchComponentMaxTechPoints(game.Galaxy.BaseTechCost);
            game.Galaxy.RebuildIndexes();
            game.Galaxy.IndependentEmpire.SetPirateRelationEmpires(game.Galaxy);
            game.Galaxy.IndependentEmpire.UpdateEmpireRefuellingLocations();
            foreach (Empire empire in game.Galaxy.Empires)
            {
                empire.SetDefaultsForLists();
                empire.ExtendLatestDesignsWithNewSubRoles();
                empire.SetPirateRelationEmpires(game.Galaxy);
                empire.EvaluateSystemLinks();
                empire.UpdateSystemFuelSourceStatus();
                empire.UpdateEmpireRefuellingLocations();
                empire.ReviewBuiltObjectWeaponsComponentValues();
                empire.ReviewUnpersistedColonyData();
            }
            foreach (Empire pirateEmpire in game.Galaxy.PirateEmpires)
            {
                pirateEmpire.SetDefaultsForLists();
                pirateEmpire.ExtendLatestDesignsWithNewSubRoles();
                pirateEmpire.SetPirateRelationEmpires(game.Galaxy);
                pirateEmpire.UpdateSystemFuelSourceStatus();
                pirateEmpire.UpdateEmpireRefuellingLocations();
                pirateEmpire.ReviewBuiltObjectWeaponsComponentValues();
                pirateEmpire.ReviewUnpersistedColonyData();
            }
            Cursor.Current = Cursors.Default;
            main_0._Game = game;
            main_0.string_2 = string_;
            main_0._Game.Galaxy.ApplicationStartupPath = Application.StartupPath;
            main_0._Game.Galaxy.CustomizationSetPath = main_0.GetCustomizationPath();
        }

        private void method_15(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                if (e.Error is SerializationException)
                {
                    _ = (SerializationException)e.Error;
                    string text = TextResolver.GetText("This is not a valid Distant Worlds game file");
                    MessageBox.Show(text, TextResolver.GetText("Cannot load file"), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    Cursor.Current = Cursors.Default;
                    method_9();
                    base.Enabled = true;
                    Show();
                    main_0.Visible = false;
                }
                else
                {
                    _ = e.Error;
                    string text2 = "Distant Worlds could not load this game.";
                    MessageBox.Show(text2, "Cannot load file", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    Cursor.Current = Cursors.Default;
                    method_9();
                    base.Enabled = true;
                    Show();
                    main_0.Visible = false;
                }
                return;
            }
            string currentFileName = string.Empty;
            Game game = null;
            if (e.Result is List<object>)
            {
                List<object> list = (List<object>)e.Result;
                if (list[0] is string)
                {
                    currentFileName = (string)list[0];
                }
                if (list[1] is Game)
                {
                    game = (Game)list[1];
                }
            }
            Galaxy.SetGalaxyPhysicalDimensions(game.Galaxy.SectorWidth, game.Galaxy.SectorHeight);
            Galaxy.AssignGalaxyDataToStatic(game.Galaxy.ResourceSystem, game.Galaxy.PlanetaryFacilityDefinitions, game.Galaxy.ComponentDefinitions, game.Galaxy.FighterSpecifications, game.Galaxy.ResearchNodeDefinitions, game.Galaxy.Governments, game.Galaxy.RaceFamilies, game.Galaxy.Plagues);
            game.Galaxy.RebuildIndexes();
            game.Galaxy.IndependentEmpire.SetPirateRelationEmpires(game.Galaxy);
            game.Galaxy.IndependentEmpire.UpdateEmpireRefuellingLocations();
            foreach (Empire empire in game.Galaxy.Empires)
            {
                empire.SetDefaultsForLists();
                empire.ExtendLatestDesignsWithNewSubRoles();
                empire.SetPirateRelationEmpires(game.Galaxy);
                empire.EvaluateSystemLinks();
                empire.UpdateSystemFuelSourceStatus();
                empire.UpdateEmpireRefuellingLocations();
                empire.ReviewBuiltObjectWeaponsComponentValues();
                empire.ReviewUnpersistedColonyData();
            }
            foreach (Empire pirateEmpire in game.Galaxy.PirateEmpires)
            {
                pirateEmpire.SetDefaultsForLists();
                pirateEmpire.ExtendLatestDesignsWithNewSubRoles();
                pirateEmpire.SetPirateRelationEmpires(game.Galaxy);
                pirateEmpire.UpdateSystemFuelSourceStatus();
                pirateEmpire.UpdateEmpireRefuellingLocations();
                pirateEmpire.ReviewBuiltObjectWeaponsComponentValues();
                pirateEmpire.ReviewUnpersistedColonyData();
            }
            Cursor.Current = Cursors.Default;
            main_0.Ignite(game, currentFileName);
            method_9();
            base.Enabled = true;
            main_0.Visible = true;
            main_0.ProcessMain(game.Galaxy.CurrentDateTime, game.Galaxy.CurrentStarDate, null);
            main_0.mainView.Refresh();
            Hide();
            main_0.Launch(launchFromLoad: true);
            Galaxy.SetResearchRaceSpecialProjects(raceList_1);
            Galaxy.SetResearchComponentMaxTechPoints(game.Galaxy.BaseTechCost);
            method_1(main_0.string_3);
            Show();
            main_0.Visible = false;
            game_0 = null;
        }

        private void gameStartBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker backgroundWorker_ = sender as BackgroundWorker;
            GalaxyShape galaxyShape_ = GalaxyShape.Elliptical;
            int int_ = 0;
            int int_2 = 0;
            bool bool_ = true;
            double double_ = 1.0;
            int int_3 = 500;
            double double_2 = 0.0;
            double double_3 = 0.0;
            int int_4 = 0;
            double double_4 = 1.0;
            double double_5 = 1.0;
            int int_5 = method_57(TextResolver.GetText("Starting"));
            double double_6 = 1.0;
            EmpireStart empireStart_ = null;
            EmpireStartList empireStartList_ = null;
            VictoryConditions victoryConditions_ = null;
            EmpireVictoryConditions empireVictoryConditions_ = null;
            EmpireVictoryConditions empireVictoryConditions_2 = null;
            bool bool_2 = false;
            bool bool_3 = true;
            GameStartResets gameStartResets_ = null;
            if (!(e.Argument is List<object>))
            {
                throw new ApplicationException("Invalid New Game worker event args");
            }
            List<object> list = (List<object>)e.Argument;
            if (list[0] is GalaxyShape)
            {
                galaxyShape_ = (GalaxyShape)list[0];
            }
            if (list[1] is int)
            {
                int_ = (int)list[1];
            }
            if (list[2] is int)
            {
                int_2 = (int)list[2];
            }
            if (list[3] is bool)
            {
                bool_ = (bool)list[3];
            }
            if (list[4] is double)
            {
                double_ = (double)list[4];
            }
            if (list[5] is int)
            {
                int_3 = (int)list[5];
            }
            if (list[6] is double)
            {
                double_2 = (double)list[6];
            }
            if (list[7] is double)
            {
                double_3 = (double)list[7];
            }
            if (list[8] is double)
            {
                double_4 = (double)list[8];
            }
            if (list[9] is int)
            {
                int_5 = (int)list[9];
            }
            if (list[10] is double)
            {
                double_6 = (double)list[10];
            }
            if (list[11] is EmpireStart)
            {
                empireStart_ = (EmpireStart)list[11];
            }
            if (list[12] is EmpireStartList)
            {
                empireStartList_ = (EmpireStartList)list[12];
            }
            if (list[13] is VictoryConditions)
            {
                victoryConditions_ = (VictoryConditions)list[13];
            }
            if (list[14] is EmpireVictoryConditions)
            {
                empireVictoryConditions_ = (EmpireVictoryConditions)list[14];
            }
            if (list[15] is EmpireVictoryConditions)
            {
                empireVictoryConditions_2 = (EmpireVictoryConditions)list[15];
            }
            if (list[16] is bool)
            {
                bool_2 = (bool)list[16];
            }
            if (list[17] is int)
            {
                int_4 = (int)list[17];
            }
            if (list[18] is double)
            {
                double_5 = (double)list[18];
            }
            if (list[19] is bool)
            {
                bool_3 = (bool)list[19];
            }
            if (list[20] is GameStartResets)
            {
                gameStartResets_ = (GameStartResets)list[20];
            }
            List<object> list2 = new List<object>();
            list2 = (List<object>)(e.Result = GetGame(backgroundWorker_, galaxyShape_, int_, int_2, bool_, double_, int_3, double_2, double_3, int_4, double_4, double_5, int_5, double_6, empireStart_, empireStartList_, victoryConditions_, empireVictoryConditions_, empireVictoryConditions_2, bool_2, bool_3, gameStartResets_));
        }

        private List<object> GetGame(BackgroundWorker backgroundWorker_0, GalaxyShape galaxyShape_0, int int_1, int int_2, bool bool_5, double double_1, int int_3, double double_2, double double_3, int int_4, double double_4, double double_5, int int_5, double double_6, EmpireStart empireStart_0, EmpireStartList empireStartList_0, VictoryConditions victoryConditions_0, EmpireVictoryConditions empireVictoryConditions_0, EmpireVictoryConditions empireVictoryConditions_1, bool bool_6, bool bool_7, GameStartResets gameStartResets_0)
        {
            if (!backgroundWorker_0.CancellationPending)
            {
                List<object> list = new List<object>();
                Thread.CurrentThread.Priority = ThreadPriority.AboveNormal;
                Game game = CreateGameFromSettings(galaxyShape_0, int_1, int_2, bool_5, double_1, int_3, double_2, double_3, int_4, double_4, double_5, int_5, double_6, empireStart_0, empireStartList_0, victoryConditions_0, empireVictoryConditions_0, empireVictoryConditions_1, bool_6, bool_7, gameStartResets_0);
                list.Add(BaconMain.OverrideGalaxySetup(this, game));
                Main._ExpModMain.FixAllDesignRepairTemplates(game, false);
                return list;
            }
            return null;
        }

        private void method_17(Panel panel_1)
        {
            if (Environment.ProcessorCount > 1)
            {
                bitmap_14 = PrecacheScaledBitmap(bitmap_0, 270, 270);
                panel_0 = panel_1;
                size_0 = picSaveLoadGalaxy.Size;
                float_0 = (float)Math.PI * 2f;
                timer_0.AutoReset = false;
                timer_0.Interval = 75.0;
                timer_0.Start();
            }
            else
            {
                picSaveLoadGalaxy.Image = bitmap_0;
            }
        }

        private void timer_0_Elapsed(object sender, ElapsedEventArgs e)
        {
            timer_0.Stop();
            if (panel_0 != null)
            {
                float_0 -= (float)Math.PI / 160f;
                Bitmap image = method_21(bitmap_14, float_0, bool_5: false);
                image = CropImageToSize(image, size_0);
                Invoke(delegate7_0, image);
                Application.DoEvents();
            }
            timer_0.Start();
        }

        private void method_18(Bitmap bitmap_15)
        {
            Image image = picSaveLoadGalaxy.Image;
            picSaveLoadGalaxy.SizeMode = PictureBoxSizeMode.CenterImage;
            picSaveLoadGalaxy.Image = bitmap_15;
            image?.Dispose();
        }

        private void method_19()
        {
            timer_0.Stop();
            panel_0 = null;
            picSaveLoadGalaxy.Image = null;
        }

        public Bitmap CropImageToSize(Bitmap image, Size size)
        {
            if (image.Width <= size.Width && image.Height <= size.Height)
            {
                return image;
            }
            int num = Math.Min(image.Width, size.Width);
            int num2 = Math.Min(image.Height, size.Height);
            Bitmap bitmap = new Bitmap(num, num2, PixelFormat.Format32bppPArgb);
            Graphics graphics = Graphics.FromImage(bitmap);
            graphics.CompositingQuality = CompositingQuality.HighSpeed;
            graphics.InterpolationMode = InterpolationMode.Low;
            graphics.SmoothingMode = SmoothingMode.None;
            float num3 = (float)(num - image.Width) / 2f;
            float num4 = (float)(num2 - image.Height) / 2f;
            PointF point = new PointF(num3, num4);
            graphics.DrawImage(image, point);
            return bitmap;
        }

        public Bitmap PrecacheScaledBitmap(Bitmap unscaledBitmap, double width, double height)
        {
            return PrecacheScaledBitmap(unscaledBitmap, (int)(width + 1.0), (int)(height + 1.0));
        }

        public Bitmap PrecacheScaledBitmap(Bitmap unscaledBitmap, int width, int height)
        {
            return PrecacheScaledBitmap(unscaledBitmap, width, height, InterpolationMode.HighQualityBilinear, CompositingQuality.HighQuality, SmoothingMode.AntiAlias);
        }

        public Bitmap PrecacheScaledBitmap(Bitmap unscaledBitmap, int width, int height, InterpolationMode interpolation, CompositingQuality compositing, SmoothingMode smoothing)
        {
            if (width < 1)
            {
                width = 1;
            }
            if (height < 1)
            {
                height = 1;
            }
            Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format32bppPArgb);
            Graphics graphics = Graphics.FromImage(bitmap);
            graphics.InterpolationMode = interpolation;
            graphics.CompositingQuality = compositing;
            graphics.SmoothingMode = smoothing;
            graphics.DrawImage(unscaledBitmap, new Rectangle(0, 0, width, height));
            graphics.Dispose();
            return bitmap;
        }

        private Bitmap method_20(Image image_0, float float_2)
        {
            return method_21(image_0, float_2, bool_5: false);
        }

        private Bitmap method_21(Image image_0, float float_2, bool bool_5)
        {
            if (image_0 == null)
            {
                throw new ArgumentNullException("image");
            }
            float num = image_0.Width;
            float num2 = image_0.Height;
            float_2 *= -1f;
            float_2 *= 57.29578f;
            float_2 %= 360f;
            if ((double)float_2 < 0.0)
            {
                float_2 += 360f;
            }
            PointF[] array = new PointF[4];
            array[1].X = num;
            array[2].X = num;
            array[2].Y = num2;
            array[3].Y = num2;
            Matrix matrix = new Matrix();
            matrix.Rotate(float_2);
            matrix.TransformPoints(array);
            double num3 = double.MinValue;
            double num4 = double.MinValue;
            double num5 = double.MaxValue;
            double num6 = double.MaxValue;
            PointF[] array2 = array;
            for (int i = 0; i < array2.Length; i++)
            {
                PointF pointF = array2[i];
                num3 = Math.Max(num3, pointF.X);
                num5 = Math.Min(num5, pointF.X);
                num4 = Math.Max(num4, pointF.Y);
                num6 = Math.Min(num6, pointF.Y);
            }
            double num7 = Math.Ceiling(num3 - num5);
            double num8 = Math.Ceiling(num4 - num6);
            Bitmap bitmap = new Bitmap((int)num7, (int)num8);
            using Graphics graphics = Graphics.FromImage(bitmap);
            if (bool_5)
            {
                graphics.CompositingQuality = CompositingQuality.HighQuality;
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = SmoothingMode.AntiAlias;
            }
            else
            {
                graphics.CompositingQuality = CompositingQuality.HighSpeed;
                graphics.InterpolationMode = InterpolationMode.Bilinear;
                graphics.SmoothingMode = SmoothingMode.HighSpeed;
            }
            PointF point = new PointF((float)(num7 / 2.0), (float)(num8 / 2.0));
            PointF point2 = new PointF(point.X - num / 2f, point.Y - num / 2f);
            matrix.Reset();
            matrix.RotateAt(float_2, point);
            graphics.Transform = matrix;
            graphics.DrawImage(image_0, point2);
            return bitmap;
        }

        private void oyxRtRyAwjg_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            base.Enabled = true;
            if (e.Error != null)
            {
                _ = e.Error;
                string text = "Could not start this game.";
                MessageBox.Show(text, "Cannot start game", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                Cursor.Current = Cursors.Default;
                method_9();
                base.Enabled = true;
                Show();
                main_0.Visible = false;
                game_0 = null;
                return;
            }
            Game game = null;
            if (e.Result is List<object>)
            {
                List<object> list = (List<object>)e.Result;
                if (list[0] is Game)
                {
                    game = (Game)list[0];
                }
            }
            game_0 = game;
            if (game == null && exception_0 != null)
            {
                string text2 = "There was an error while attempting to start a new game. ";
                text2 += "If you are using a theme, please revert to the default Distant Worlds theme and try again";
                text2 += "\n\nError Details:\n\n";
                text2 += exception_0.ToString();
                MessageBox.Show(text2, "Error while starting a new game", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }

        private void lnkLoadGame_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            try
            {
                BaconStart.LoadGame(this);
                method_149();
                new Game();
                string empty = string.Empty;
                bool flag = false;
                string text = Main.GetGameSavesFolderCreateIfNeeded();
                if (main_0 != null && main_0.gameOptions_0 != null && !string.IsNullOrEmpty(main_0.gameOptions_0.SaveGamePath))
                {
                    text = main_0.gameOptions_0.SaveGamePath;
                }
                if (!Directory.Exists(text))
                {
                    Directory.CreateDirectory(text);
                }
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.InitialDirectory = text;
                openFileDialog.Filter = TextResolver.GetText("Distant Worlds saved game files") + " (*.dwg)|*.dwg";
                openFileDialog.DefaultExt = "dwg";
                openFileDialog.Title = TextResolver.GetText("Load Distant Worlds game");
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    flag = true;
                }
                if (flag)
                {
                    Stream stream_;
                    if ((stream_ = openFileDialog.OpenFile()) != null)
                    {
                        method_140();
                        empty = openFileDialog.FileName;
                        if (main_0 != null && main_0.gameOptions_0 != null)
                        {
                            DirectoryInfo directoryInfo = Directory.GetParent(empty);
                            if (directoryInfo != null)
                            {
                                main_0.gameOptions_0.SaveGamePath = directoryInfo.FullName;
                            }
                        }
                        openFileDialog.Dispose();
                        method_22(stream_, empty, TextResolver.GetText("Loading the Galaxy..."));
                    }
                    else
                    {
                        flag = false;
                        openFileDialog.Dispose();
                    }
                }
                else
                {
                    openFileDialog.Dispose();
                }
                if (!flag)
                {
                    Application.UseWaitCursor = false;
                    method_9();
                }
                else
                {
                    method_10();
                    Application.UseWaitCursor = false;
                    method_23();
                }
            }
            catch (Exception ex)
            {
                Main.CrashDump(ex);
                throw;
            }
        }

        private void method_22(Stream stream_0, string string_2, string string_3)
        {
            method_8(string_3);
            Application.DoEvents();
            base.Enabled = false;
            Application.UseWaitCursor = true;
            List<object> list = new List<object>();
            list.Add(string_2);
            list.Add(stream_0);
            bool_0 = false;
            thread_0 = new Thread(method_11, 8400000);
            thread_0.Start(list);
            method_10();
            Application.UseWaitCursor = false;
        }

        private void method_23()
        {
            if (!bool_1)
            {
                if (!string.IsNullOrEmpty(main_0._Game.CustomizationSetName) && (string.IsNullOrEmpty(main_0.string_3) || main_0._Game.CustomizationSetName != main_0.string_3))
                {
                    main_0.method_66(main_0._Game.CustomizationSetName, bool_28: false);
                }
                else
                {
                    main_0.method_65(200);
                }
                main_0.method_56(Application.StartupPath + "\\images\\", main_0._Game.CustomizationSetName, main_0._Game.PlayerEmpire.DominantRace);
                main_0.Ignite();
                main_0.Visible = true;
                main_0.ProcessMain(main_0._Game.Galaxy.CurrentDateTime, main_0._Game.Galaxy.CurrentStarDate, null);
                main_0.mainView.Refresh();
                method_9();
                base.Enabled = true;
                Hide();
                main_0.Launch(launchFromLoad: true);
                Galaxy.SetResearchRaceSpecialProjects(raceList_1);
                if (main_0._Game != null && main_0.gameOptions_0 != null && main_0.gameOptions_0.StartGameOptions != null)
                {
                    Galaxy.SetResearchComponentMaxTechPoints(main_0.gameOptions_0.StartGameOptions.GalaxyResearchSpeed * 1000);
                }
                method_3(main_0.string_3);
                method_1(main_0.string_3);
                Show();
                main_0.Visible = false;
                game_0 = null;
            }
            bool_1 = false;
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            lnkExit_LinkClicked(this, null);
            base.OnClosing(e);
        }

        private void lnkExit_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_140();
            if (main_0.musicPlayer_0 != null && main_0.musicPlayer_1 != null)
            {
                main_0.musicPlayer_0.Stop();
                main_0.musicPlayer_1.Stop();
            }
            string filename = Main.GetGameFilesFolderCreateIfNeeded() + "automationPrefs";
            MessageBoxExManager.WriteSavedResponses(filename);
            if (main_0 != null)
            {
                main_0.method_257();
                main_0.method_255();
            }
            ToggleScreenSaverActive(active: true);
            if (!main_0.bool_2)
            {
                main_0.method_374();
            }
            Environment.Exit(-1);
        }

        private void method_24()
        {
            pnlQuickStart.Size = new Size(745, 470);
            pnlQuickStart.Location = new Point((base.Width - pnlQuickStart.Width) / 2, (base.Height - pnlQuickStart.Height) / 2);
            pnlQuickStart.DoLayout();
            pnlQuickStartDescription.Size = new Size(460, 350);
            pnlQuickStartDescription.Location = new Point(260, 10);
            lblQuickStartDescriptionTitle.Font = font_7;
            lblQuickStartDescriptionTitle.Location = new Point(10, 10);
            lblQuickStartDescriptionTitle.MaximumSize = new Size(440, 20);
            lblQuickStartDescriptionDetail.Font = font_3;
            lblQuickStartDescriptionDetail.Location = new Point(10, 40);
            lblQuickStartDescriptionDetail.MaximumSize = new Size(440, 290);
            lblQuickStartRace.Font = font_3;
            lblQuickStartRace.Location = new Point(10, 312);
            cmbQuickStartRace.Location = new Point(47, 305);
            cmbQuickStartRace.Size = new Size(135, 30);
            cmbQuickStartRace.ItemHeight = 30;
            cmbQuickStartRace.BindData(font_3, raceList_0, main_0.raceImageCache_0.GetRaceImages(), allowRandomRace: true);
            cmbQuickStartRace.SelectedIndex = 0;
            cmbQuickStartRace.BringToFront();
            lnkQuickStartRaceHelp.Location = new Point(185, 308);
            lnkQuickStartRaceHelp.MaximumSize = new Size(60, 70);
            lnkQuickStartRaceHelp.Text = TextResolver.GetText("About this Race") + "...";
            chkQuickStartDistantWorldsStoryEvents.Font = font_3;
            chkQuickStartDistantWorldsStoryEvents.Location = new Point(247, 302);
            chkQuickStartDistantWorldsStoryEvents.MaximumSize = new Size(210, 50);
            chkQuickStartDistantWorldsStoryEvents.CheckAlign = ContentAlignment.MiddleRight;
            chkQuickStartDistantWorldsStoryEvents.Text = TextResolver.GetText("Distant Worlds original storyline");
            chkQuickStartReturnOfTheShakturiStoryEvents.Font = font_3;
            chkQuickStartReturnOfTheShakturiStoryEvents.Location = new Point(250, 322);
            chkQuickStartReturnOfTheShakturiStoryEvents.MaximumSize = new Size(200, 50);
            chkQuickStartReturnOfTheShakturiStoryEvents.CheckAlign = ContentAlignment.MiddleRight;
            chkQuickStartReturnOfTheShakturiStoryEvents.Text = TextResolver.GetText("Return Of The Shakturi storyline");
            chkQuickStartDistantWorldsStoryEvents.Checked = true;
            chkQuickStartReturnOfTheShakturiStoryEvents.Checked = true;
            radioRandom.Location = new Point(10, 10);
            radioSmall.Location = new Point(10, 35);
            radioEpic.Location = new Point(10, 60);
            radioRingRace.Location = new Point(10, 85);
            radioConflict.Location = new Point(10, 110);
            radioExpandingSettlements.Location = new Point(10, 135);
            radioExpandingFromTheCore.Location = new Point(10, 160);
            radioFullyDevelopedSmall.Location = new Point(10, 185);
            radioFullyDevelopedStandard.Location = new Point(10, 210);
            radioFullyDevelopedLarge.Location = new Point(10, 235);
            radioGalacticRepublicSupremeRuler.Location = new Point(10, 260);
            radioGalacticRepublicWildFrontiers.Location = new Point(10, 285);
            radioSovereignTerritoriesRegionalRuler.Location = new Point(10, 310);
            radioSovereignTerritoriesMinorFaction.Location = new Point(10, 335);
            radioRandom.Font = font_3;
            radioSmall.Font = font_3;
            radioEpic.Font = font_3;
            radioRingRace.Font = font_3;
            radioConflict.Font = font_3;
            radioExpandingSettlements.Font = font_3;
            radioExpandingFromTheCore.Font = font_3;
            radioFullyDevelopedSmall.Font = font_3;
            radioFullyDevelopedStandard.Font = font_3;
            radioFullyDevelopedLarge.Font = font_3;
            radioGalacticRepublicSupremeRuler.Font = font_3;
            radioGalacticRepublicWildFrontiers.Font = font_3;
            radioSovereignTerritoriesRegionalRuler.Font = font_3;
            radioSovereignTerritoriesMinorFaction.Font = font_3;
            radioGalacticRepublicSupremeRuler.SendToBack();
            radioGalacticRepublicWildFrontiers.SendToBack();
            btnQuickStart.Size = new Size(280, 30);
            btnQuickStartCancel.Size = new Size(170, 30);
            btnQuickStartCancel.Location = new Point(260, 370);
            btnQuickStart.Location = new Point(440, 370);
            btnQuickStart.Font = font_7;
            btnQuickStartCancel.Font = font_7;
            pnlQuickStart.Visible = true;
            pnlQuickStart.BringToFront();
            radioRandom.Checked = true;
            radioRandom.Focus();
        }

        private void method_25()
        {
            pnlQuickStart.Visible = false;
        }

        private void method_26()
        {
            pnlThemes.Size = new Size(827, 681);
            pnlThemes.Location = new Point((base.Width - pnlThemes.Width) / 2, (base.Height - pnlThemes.Height) / 2);
            pnlThemes.DoLayout();
            lblCurrentTheme.Font = font_7;
            lblCurrentTheme.Location = new Point(10, 10);
            pnlThemeDetail.Size = new Size(550, 530);
            pnlThemeDetail.Location = new Point(250, 40);
            lblThemeTitle.Font = font_9;
            lblThemeTitle.ForeColor = Color.White;
            lblThemeTitle.Location = new Point(10, 10);
            lblThemeDescription.Font = font_5;
            lblThemeDescription.Location = new Point(10, 45);
            lblThemeDescription.MaximumSize = new Size(320, 480);
            picThemeImage.Size = new Size(200, 200);
            picThemeImage.Location = new Point(338, 45);
            lblThemeGalaxyMaps.Location = new Point(338, 255);
            lblThemeGalaxyMaps.Font = font_7;
            lblThemeGalaxyMaps.MaximumSize = new Size(200, 100);
            string text = main_0.gameOptions_0.CustomizationSetName;
            if (string.IsNullOrEmpty(text))
            {
                text = "(Default)";
            }
            lblCurrentTheme.Text = TextResolver.GetText("Current Theme") + ": " + text;
            method_28(text);
            pnlThemes.DoLayout();
            btnThemeSwitch.Font = font_7;
            btnThemeCancel.Font = font_7;
            btnThemeCancel.Size = new Size(200, 30);
            btnThemeCancel.Location = new Point(250, 580);
            btnThemeSwitch.Size = new Size(340, 30);
            btnThemeSwitch.Location = new Point(460, 580);
            pnlThemes.Visible = true;
            pnlThemes.BringToFront();
        }

        private void method_27()
        {
            pnlThemes.Visible = false;
        }

        private void method_28(string string_2)
        {
            string path = Application.StartupPath + "\\Customization\\";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string[] array = Directory.GetDirectories(path);
            if (array == null)
            {
                array = new string[0];
            }
            List<string> list = new List<string>();
            string[] array2 = array;
            foreach (string path2 in array2)
            {
                DirectoryInfo directoryInfo = new DirectoryInfo(path2);
                string name = directoryInfo.Name;
                list.Add(name);
            }
            list.Sort();
            List<string> list2 = new List<string>();
            list2.Add("(Default)");
            list2.AddRange(list);
            foreach (Control item in list_0)
            {
                if (item.Parent != null && item.Parent.Controls.Contains(item))
                {
                    item.Parent.Controls.Remove(item);
                }
                ((RadioButton)item).CheckedChanged -= method_29;
                item.Dispose();
            }
            list_0.Clear();
            for (int j = 0; j < list2.Count; j++)
            {
                RadioButton radioButton = new RadioButton();
                radioButton.Text = list2[j];
                radioButton.Font = new Font(font_3, FontStyle.Bold);
                radioButton.BackColor = Color.Transparent;
                radioButton.ForeColor = Color.FromArgb(170, 170, 170);
                radioButton.Location = new Point(10, 40 + j * 25);
                radioButton.Size = new Size(200, 25);
                radioButton.CheckedChanged += method_29;
                radioButton.Parent = pnlThemes;
                if (list2[j] == string_2)
                {
                    radioButton.Checked = true;
                }
                pnlThemes.Controls.Add(radioButton);
                list_0.Add(radioButton);
            }
        }

        private void method_29(object sender, EventArgs e)
        {
            if (!(sender is RadioButton))
            {
                return;
            }
            RadioButton radioButton = (RadioButton)sender;
            string text = radioButton.Text;
            string text2 = string.Empty;
            Bitmap image = null;
            bool enabled = true;
            if (text == "(Default)")
            {
                text2 = TextResolver.GetText("The default Distant Worlds theme, using the standard images, names and music.");
                image = bitmap_0;
                GalaxySummaryList galaxySummaryList = method_30(string.Empty);
                if (galaxySummaryList.Count > 0)
                {
                    lblThemeGalaxyMaps.Text = string.Format(TextResolver.GetText("This theme has X galaxy maps available to play"), galaxySummaryList.Count.ToString("0"));
                }
                else
                {
                    lblThemeGalaxyMaps.Text = string.Empty;
                }
                if (string.IsNullOrEmpty(main_0.gameOptions_0.CustomizationSetName))
                {
                    enabled = false;
                }
            }
            else
            {
                string text3 = Application.StartupPath + "\\Customization\\" + text + "\\";
                if (File.Exists(text3 + "about.txt"))
                {
                    text2 = File.ReadAllText(text3 + "about.txt");
                }
                if (File.Exists(text3 + "about.png"))
                {
                    image = (Bitmap)Image.FromFile(text3 + "about.png");
                }
                GalaxySummaryList galaxySummaryList2 = method_30(text);
                if (galaxySummaryList2.Count > 0)
                {
                    lblThemeGalaxyMaps.Text = string.Format(TextResolver.GetText("This theme has X galaxy maps available to play"), galaxySummaryList2.Count.ToString("0"));
                }
                else
                {
                    lblThemeGalaxyMaps.Text = string.Empty;
                }
                if (text == main_0.gameOptions_0.CustomizationSetName)
                {
                    enabled = false;
                }
            }
            btnThemeSwitch.Enabled = enabled;
            lblThemeTitle.Text = text;
            lblThemeDescription.Text = text2;
            picThemeImage.Image = image;
        }

        private GalaxySummaryList method_30(string string_2)
        {
            string folderPath = Application.StartupPath + "\\maps\\";
            if (!string.IsNullOrEmpty(string_2))
            {
                folderPath = Application.StartupPath + "\\Customization\\" + string_2 + "\\maps\\";
            }
            GalaxySummaryList galaxySummaryList = new GalaxySummaryList();
            galaxySummaryList.LoadFromFolder(folderPath);
            return galaxySummaryList;
        }

        private void method_31(string string_2)
        {
            pnlNewGame.SuspendLayout();
            pnlNewGame.pnlBody.SuspendLayout();
            pnlNewGame.Size = new Size(927, 768);
            pnlNewGame.Location = new Point((base.Width - pnlNewGame.Width) / 2, (base.Height - pnlNewGame.Height) / 2);
            pnlNewGame.DoLayout();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Playstyle");
            lblHelpTitle.Location = new Point(10, 7);
            lblHelpTitle.Font = font_6;
            lblHelpDescription.Location = new Point(175, 8);
            lblHelpDescription.TextAlign = ContentAlignment.TopLeft;
            lblHelpDescription.Font = font_3;
            lblHelpDescription.MaximumSize = new Size(720, 32);
            method_100("", "");
            Size size = new Size(900, 660);
            pnlStartNewGameGalaxyMaps.Size = size;
            pnlStartNewGameYourEmpireType.Size = size;
            pnlStartNewGameTheGalaxy.Size = size;
            pnlStartNewGameColonizationTerritory.Size = size;
            pnlStartNewGameVictoryConditions.Size = size;
            pnlStartNewGameOtherEmpires.Size = size;
            pnlStartNewGameYourEmpire.Size = size;
            pnlStartNewGameYourRace.Size = size;
            pnlStartNewGameJumpStart.Size = size;
            Point location = new Point(5, 40);
            pnlStartNewGameGalaxyMaps.Location = location;
            pnlStartNewGameYourEmpireType.Location = location;
            pnlStartNewGameTheGalaxy.Location = location;
            pnlStartNewGameColonizationTerritory.Location = location;
            pnlStartNewGameVictoryConditions.Location = location;
            pnlStartNewGameOtherEmpires.Location = location;
            pnlStartNewGameYourEmpire.Location = location;
            pnlStartNewGameYourRace.Location = location;
            pnlStartNewGameJumpStart.Location = location;
            string string_3 = "(" + TextResolver.GetText("Default") + ")";
            if (!string.IsNullOrEmpty(main_0.string_3))
            {
                string_3 = main_0.string_3;
            }
            method_33(string_3, string.Empty);
            method_41();
            method_37();
            method_34();
            method_42();
            method_39();
            method_43();
            method_44();
            method_36();
            if (main_0.gameOptions_0 == null)
            {
                main_0.method_260();
            }
            if (main_0.gameOptions_0.StartGameOptions == null)
            {
                main_0.gameOptions_0.StartGameOptions = main_0.method_259();
            }
            if (main_0.gameOptions_0.StartGameOptions.YourEmpireRace == 0)
            {
                int num = raceList_0.IndexOf("Human");
                if (num >= 0)
                {
                    main_0.gameOptions_0.StartGameOptions.YourEmpireRace = num + 1;
                }
            }
            method_196(main_0.gameOptions_0.StartGameOptions);
            if (galaxySummaryList_0.Count > 0)
            {
                method_32();
                pnlStartNewGameGalaxyMaps.Visible = true;
                pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Prebuilt Galaxies");
                ctlStartNewGameGalaxyMapsGalaxies.Focus();
                pnlStartNewGameGalaxyMaps.BringToFront();
            }
            else
            {
                pnlStartNewGameYourEmpireType.Visible = true;
                pnlStartNewGameYourEmpireType.BringToFront();
                method_100(TextResolver.GetText("Start New Game New Player Explanation Title UNIVERSE") + ":", TextResolver.GetText("Start New Game New Player Explanation Text UNIVERSE"));
            }
            pnlNewGame.pnlBody.ResumeLayout();
            pnlNewGame.ResumeLayout();
            pnlNewGame.Visible = true;
            pnlNewGame.BringToFront();
        }

        private void method_32()
        {
            if (galaxySummaryList_0 != null && galaxySummaryList_0.Count > 0)
            {
                ctlStartNewGameGalaxyMapsGalaxies.BindData(galaxySummaryList_0);
                pnlStartNewGameGalaxyMapsGalaxy.BindData(galaxySummaryList_0[0], font_9, font_3, font_7);
                string text = galaxySummaryList_0[0].Title;
                if (string.IsNullOrEmpty(text))
                {
                    text = galaxySummaryList_0[0].Filename;
                }
                lblStartNewGameGalaxyMapsAvailableFactions.Text = string.Format(TextResolver.GetText("StartNewGame GalaxyMaps AvailableEmpires"), text);
                ctlStartNewGameGalaxyMapsEmpires.BindData(galaxySummaryList_0[0].EmpireSummaries, raceList_1, main_0.raceImageCache_0);
                if (galaxySummaryList_0[0].EmpireSummaries.Count > 0)
                {
                    pnlStartNewGameGalaxyMapsEmpire.BindData(galaxySummaryList_0[0].EmpireSummaries[0], raceList_1, main_0.raceImageCache_0, font_9, font_3, font_7);
                }
            }
            else
            {
                ctlStartNewGameGalaxyMapsGalaxies.ClearData();
                pnlStartNewGameGalaxyMapsGalaxy.ClearData();
                ctlStartNewGameGalaxyMapsEmpires.ClearData();
                pnlStartNewGameGalaxyMapsEmpire.ClearData();
            }
        }

        private void method_33(string string_2, string string_3)
        {
            pnlStartNewGameGalaxyMaps.SuspendLayout();
            btnStartNewGameGalaxyMapsCustom.Size = new Size(300, 40);
            btnStartNewGameGalaxyMapsCustom.Location = new Point(pnlStartNewGameGalaxyMaps.Width - (btnStartNewGameGalaxyMapsCustom.Width + 10), 10);
            btnStartNewGameGalaxyMapsCustom.Text = TextResolver.GetText("StartNewGame GalaxyMaps CustomGame") + " >>";
            lblStartNewGameGalaxyMapsExplanation.Location = new Point(10, 10);
            lblStartNewGameGalaxyMapsExplanation.Font = font_4;
            lblStartNewGameGalaxyMapsExplanation.ForeColor = Color.Yellow;
            lblStartNewGameGalaxyMapsExplanation.MaximumSize = new Size(pnlStartNewGameGalaxyMaps.Width - (btnStartNewGameGalaxyMapsCustom.Width + 30), 35);
            lblStartNewGameGalaxyMapsExplanation.Text = TextResolver.GetText("StartNewGame GalaxyMaps Explanation");
            lblStartNewGameGalaxyMapsAvailableGalaxies.Location = new Point(10, 60);
            lblStartNewGameGalaxyMapsAvailableGalaxies.Font = font_7;
            lblStartNewGameGalaxyMapsAvailableGalaxies.Text = string.Format(TextResolver.GetText("StartNewGame GalaxyMaps AvailableGalaxies"), string_2);
            lblStartNewGameGalaxyMapsAvailableGalaxies.SendToBack();
            ctlStartNewGameGalaxyMapsGalaxies.Size = new Size(280, 200);
            ctlStartNewGameGalaxyMapsGalaxies.Location = new Point(10, 80);
            ctlStartNewGameGalaxyMapsGalaxies.Grid.Columns["Name"].Width = 280;
            pnlStartNewGameGalaxyMapsGalaxy.Size = new Size(pnlStartNewGameGalaxyMaps.Width - (ctlStartNewGameGalaxyMapsGalaxies.Width + 30), 200);
            pnlStartNewGameGalaxyMapsGalaxy.Location = new Point(300, 80);
            lblStartNewGameGalaxyMapsAvailableFactions.Location = new Point(10, 290);
            lblStartNewGameGalaxyMapsAvailableFactions.Font = font_7;
            lblStartNewGameGalaxyMapsAvailableFactions.Text = string.Format(TextResolver.GetText("StartNewGame GalaxyMaps AvailableEmpires"), string_3);
            lblStartNewGameGalaxyMapsAvailableFactions.SendToBack();
            ctlStartNewGameGalaxyMapsEmpires.Size = new Size(280, pnlStartNewGameGalaxyMaps.Height - 370);
            ctlStartNewGameGalaxyMapsEmpires.Location = new Point(10, 310);
            ctlStartNewGameGalaxyMapsEmpires.Grid.Columns["Race"].Width = 40;
            ctlStartNewGameGalaxyMapsEmpires.Grid.Columns["Name"].Width = 240;
            pnlStartNewGameGalaxyMapsEmpire.Size = new Size(pnlStartNewGameGalaxyMaps.Width - (ctlStartNewGameGalaxyMapsEmpires.Width + 30), ctlStartNewGameGalaxyMapsEmpires.Height);
            pnlStartNewGameGalaxyMapsEmpire.Location = new Point(ctlStartNewGameGalaxyMapsEmpires.Right + 10, ctlStartNewGameGalaxyMapsEmpires.Top);
            btnStartNewGameGalaxyMapsStart.Size = new Size(300, 40);
            btnStartNewGameGalaxyMapsStart.Location = new Point(pnlStartNewGameGalaxyMaps.Width - (btnStartNewGameGalaxyMapsStart.Width + 10), pnlStartNewGameGalaxyMaps.Height - (btnStartNewGameGalaxyMapsStart.Height + 10));
            btnStartNewGameGalaxyMapsStart.Text = TextResolver.GetText("StartNewGame GalaxyMaps StartGame") + " >>";
            btnStartNewGameGalaxyMapsStart.Visible = true;
            btnStartNewGameGalaxyMapsStart.BringToFront();
            pnlStartNewGameGalaxyMaps.ResumeLayout();
        }

        private void method_34()
        {
            pnlStartNewGameColonizationTerritory.SuspendLayout();
            tbarStartNewGameTheGalaxyColonyPrevalence.Setup();
            tbarStartNewGameTheGalaxyAlienLife.Setup();
            tbarStartNewGameTheGalaxyColonyPrevalence.LabelWidth = 90;
            tbarStartNewGameTheGalaxyAlienLife.LabelWidth = 90;
            tbarStartNewGameTheGalaxyColonyPrevalence.LinkWidth = 0;
            tbarStartNewGameTheGalaxyAlienLife.LinkWidth = 90;
            tbarStartNewGameTheGalaxyColonyPrevalence.Location = new Point(10, 10);
            tbarStartNewGameTheGalaxyAlienLife.Location = new Point(10, 80);
            tbarStartNewGameTheGalaxyColonyPrevalence.Size = new Size(880, 55);
            tbarStartNewGameTheGalaxyAlienLife.Size = new Size(880, 55);
            tbarStartNewGameTheGalaxyColonyPrevalence.SetLabels(new string[5]
            {
            TextResolver.GetText("Scarce"),
            TextResolver.GetText("Occasional"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Plentiful"),
            TextResolver.GetText("Abundant")
            });
            tbarStartNewGameTheGalaxyAlienLife.SetLabels(new string[5]
            {
            TextResolver.GetText("Rare"),
            TextResolver.GetText("Scattered"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Plentiful"),
            TextResolver.GetText("Teeming")
            });
            tbarStartNewGameTheGalaxyColonyPrevalence.LabelText = TextResolver.GetText("Colony Prevalence");
            tbarStartNewGameTheGalaxyAlienLife.LabelText = TextResolver.GetText("Independent Alien Life");
            tbarStartNewGameTheGalaxyAlienLife.LinkText = TextResolver.GetText("About Alien Life...");
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Font = font_3;
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Text = TextResolver.GetText("Colony Influence Range");
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeTitle.Location = new Point(10, 160);
            sldStartNewGameColonizationTerritoryColonyInfluenceRange.Size = new Size(680, 16);
            sldStartNewGameColonizationTerritoryColonyInfluenceRange.Location = new Point(150, 160);
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Location = new Point(840, 160);
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Font = font_3;
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Location = new Point(425, 180);
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.MaximumSize = new Size(450, 30);
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.MinimumSize = new Size(450, 30);
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Size = new Size(450, 30);
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.TextAlign = ContentAlignment.TopRight;
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Font = font_3;
            grpStartNewGameColonizationTerritoryColonizationRange.Font = font_3;
            grpStartNewGameColonizationTerritoryColonizationRange.Text = "          " + TextResolver.GetText("Enforce Colonization Range Limits");
            grpStartNewGameColonizationTerritoryColonizationRange.Size = new Size(880, 60);
            grpStartNewGameColonizationTerritoryColonizationRange.Location = new Point(10, 215);
            chkStartNewGameColonizationTerritoryEnforceColonizationRange.Location = new Point(21, 217);
            chkStartNewGameColonizationTerritoryEnforceColonizationRange.BringToFront();
            lblStartNewGameColonizationTerritoryColonizationRangeTitle.Font = font_3;
            lblStartNewGameColonizationTerritoryColonizationRangeTitle.Text = TextResolver.GetText("Colonization Range");
            lblStartNewGameColonizationTerritoryColonizationRangeTitle.Location = new Point(10, 25);
            sldStartNewGameColonizationTerritoryColonizationRange.Size = new Size(645, 16);
            sldStartNewGameColonizationTerritoryColonizationRange.Location = new Point(140, 25);
            lblStartNewGameColonizationTerritoryColonizationRangeValue.Location = new Point(795, 25);
            lblStartNewGameColonizationTerritoryColonizationRangeValue.Font = font_3;
            picStartNewGameColonizationTerritoryImage.Size = new Size(880, 253);
            picStartNewGameColonizationTerritoryImage.Location = new Point(10, 315);
            btnStartNewGameColonizationTerritoryPrevious.Font = font_7;
            btnStartNewGameColonizationTerritoryNext.Font = font_7;
            btnStartNewGameColonizationTerritoryPrevious.Size = new Size(300, 40);
            btnStartNewGameColonizationTerritoryNext.Size = new Size(300, 40);
            btnStartNewGameColonizationTerritoryPrevious.Location = new Point(10, pnlStartNewGameColonizationTerritory.Height - (btnStartNewGameColonizationTerritoryPrevious.Height + 10));
            btnStartNewGameColonizationTerritoryNext.Location = new Point(pnlStartNewGameColonizationTerritory.Width - (btnStartNewGameColonizationTerritoryNext.Width + 10), pnlStartNewGameColonizationTerritory.Height - (btnStartNewGameColonizationTerritoryNext.Height + 10));
            pnlStartNewGameColonizationTerritory.ResumeLayout();
        }

        private void method_35()
        {
            if (bool_2)
            {
                pnlJumpStartYourEmpireGovernment.Visible = false;
                lblJumpStartVictoryPiratePlaystyle.Visible = true;
                cmbJumpStartVictoryPiratePlayStyle.Visible = true;
                pnlJumpStartPiratePlaystyleDescriptionContainer.Visible = true;
                picJumpStartYourEmpirePiratePlaystyle.Visible = true;
            }
            else
            {
                pnlJumpStartYourEmpireGovernment.Visible = true;
                lblJumpStartVictoryPiratePlaystyle.Visible = false;
                cmbJumpStartVictoryPiratePlayStyle.Visible = false;
                pnlJumpStartPiratePlaystyleDescriptionContainer.Visible = false;
                picJumpStartYourEmpirePiratePlaystyle.Visible = false;
            }
        }

        private void method_36()
        {
            pnlJumpStartGalaxyShapeSize.Size = new Size(880, 275);
            pnlJumpStartGalaxyShapeSize.Location = new Point(10, 10);
            radJumpStartGalaxyShapeElliptical.Location = new Point(10, 10);
            radJumpStartGalaxyShapeSpiral.Location = new Point(10, 30);
            radJumpStartGalaxyShapeRing.Location = new Point(10, 50);
            radJumpStartGalaxyShapeIrregular.Location = new Point(10, 70);
            radJumpStartGalaxyShapeEvenClusters.Location = new Point(10, 90);
            radJumpStartGalaxyShapeVariedClusters.Location = new Point(10, 110);
            radJumpStartGalaxyShapeElliptical.Font = font_3;
            radJumpStartGalaxyShapeSpiral.Font = font_3;
            radJumpStartGalaxyShapeRing.Font = font_3;
            radJumpStartGalaxyShapeIrregular.Font = font_3;
            radJumpStartGalaxyShapeEvenClusters.Font = font_3;
            radJumpStartGalaxyShapeVariedClusters.Font = font_3;
            picJumpStartTheGalaxyPreview.Size = new Size(120, 120);
            picJumpStartTheGalaxyPreview.Location = new Point(125, 10);
            picJumpStartTheGalaxyPreview.SizeMode = PictureBoxSizeMode.Zoom;
            lblJumpStartGalaxyShapeTitle.Font = font_7;
            lblJumpStartGalaxyShapeTitle.Location = new Point(255, 7);
            lblJumpStartGalaxyShapeDescription.Location = new Point(255, 32);
            lblJumpStartGalaxyShapeDescription.MaximumSize = new Size(615, 168);
            tbarJumpStartTheGalaxyStarDensity.Setup();
            tbarJumpStartTheGalaxyStarDensity.LinkWidth = 0;
            tbarJumpStartTheGalaxyStarDensity.Location = new Point(10, 145);
            tbarJumpStartTheGalaxyStarDensity.Size = new Size(860, 55);
            string text = TextResolver.GetText("stars");
            tbarJumpStartTheGalaxyStarDensity.SetLabels(new string[6]
            {
            TextResolver.GetText("Dwarf") + "\n100 " + text,
            TextResolver.GetText("Tiny") + "\n250 " + text,
            TextResolver.GetText("Small") + "\n400 " + text,
            TextResolver.GetText("Standard") + "\n700 " + text,
            TextResolver.GetText("Large") + "\n1000 " + text,
            TextResolver.GetText("Huge") + "\n1400 " + text
            });
            tbarJumpStartTheGalaxyStarDensity.LabelText = TextResolver.GetText("Star\\nAmount");
            tbarJumpStartTheGalaxyDimensions.Setup();
            tbarJumpStartTheGalaxyDimensions.LinkWidth = 0;
            tbarJumpStartTheGalaxyDimensions.Location = new Point(10, 210);
            tbarJumpStartTheGalaxyDimensions.Size = new Size(860, 55);
            string text2 = TextResolver.GetText("sectors");
            tbarJumpStartTheGalaxyDimensions.SetLabels(new string[5]
            {
            TextResolver.GetText("Tiny") + "\n4x4 " + text2,
            TextResolver.GetText("Small") + "\n6x6 " + text2,
            TextResolver.GetText("Medium") + "\n8x8 " + text2,
            TextResolver.GetText("Large") + "\n10x10 " + text2,
            TextResolver.GetText("Huge") + "\n15x15 " + text2
            });
            tbarJumpStartTheGalaxyDimensions.LabelText = TextResolver.GetText("Physical\\nSize");
            pnlJumpStartYourEmpireRace.Size = new Size(480, 240);
            pnlJumpStartYourEmpireRace.Location = new Point(10, 295);
            lblJumpStartYourEmpireRaceTitle.Visible = false;
            cmbJumpStartYourEmpireRace.Size = new Size(160, 26);
            cmbJumpStartYourEmpireRace.ItemHeight = 26;
            cmbJumpStartYourEmpireRace.Location = new Point(15, 15);
            picJumpStartYourEmpireRace.Size = new Size(160, 160);
            picJumpStartYourEmpireRace.Location = new Point(15, 52);
            picJumpStartYourEmpireRace.SizeMode = PictureBoxSizeMode.Zoom;
            picJumpStartYourEmpireRace.BorderStyle = BorderStyle.None;
            lnkJumpStartYourEmpireRace.Location = new Point(15, 218);
            lnkJumpStartYourEmpireRace.Font = font_3;
            lblJumpStartYourEmpireRaceName.Location = new Point(185, 14);
            lblJumpStartYourEmpireRaceName.Visible = true;
            lblJumpStartYourEmpireRaceName.BringToFront();
            pnlJumpStartYourEmpireRaceAttributesContainer.Location = new Point(190, 51);
            pnlJumpStartYourEmpireRaceAttributesContainer.Size = new Size(280, 179);
            pnlJumpStartYourEmpireRaceAttributesContainer.AutoScroll = true;
            pnlJumpStartYourEmpireRaceAttributesContainer.SetAutoScrollMargin(0, 0);
            pnlJumpStartYourEmpireRaceAttributesContainer.AutoScrollPosition = new Point(0, 0);
            pnlJumpStartYourEmpireRaceAttributes.Location = new Point(0, 0);
            pnlJumpStartYourEmpireRaceAttributes.Size = new Size(260, 0);
            pnlJumpStartYourEmpireRaceAttributes.MaximumSize = new Size(260, 2000);
            pnlJumpStartYourEmpireRaceAttributes.MinimumSize = new Size(260, 205);
            pnlJumpStartYourEmpireRaceAttributes.AutoSize = true;
            pnlJumpStartYourEmpireGovernment.Size = new Size(390, 240);
            pnlJumpStartYourEmpireGovernment.Location = new Point(500, 295);
            lblJumpStartYourEmpireGovernmentTitle.Font = font_7;
            lblJumpStartYourEmpireRaceTitle.Font = font_7;
            lblJumpStartYourEmpireGovernmentName.Visible = false;
            lblJumpStartYourEmpireRaceName.Visible = false;
            cmbJumpStartYourEmpireGovernment.Size = new Size(155, 21);
            cmbJumpStartYourEmpireGovernment.Location = new Point(15, 35);
            cmbJumpStartYourEmpireGovernment.AllowNullItem = true;
            cmbJumpStartYourEmpireGovernment.NullItemText = "(" + TextResolver.GetText("Random") + ")";
            cmbJumpStartYourEmpireGovernment.Font = font_3;
            lblJumpStartYourEmpireGovernmentAttributes.Location = new Point(180, 37);
            lblJumpStartYourEmpireGovernmentAttributes.Font = font_3;
            lblJumpStartYourEmpireGovernmentAttributes.MaximumSize = new Size(200, 170);
            lnkJumpStartYourEmpireGovernment.Size = new Size(200, 21);
            lnkJumpStartYourEmpireGovernment.MaximumSize = new Size(200, 40);
            lnkJumpStartYourEmpireGovernment.Location = new Point(180, 200);
            lnkJumpStartYourEmpireGovernment.Font = font_3;
            cmbJumpStartYourEmpireRace.BindData(font_3, raceList_0, main_0.raceImageCache_0.GetRaceImages(), allowRandomRace: true);
            lblJumpStartVictoryPiratePlaystyle.Font = font_7;
            lblJumpStartVictoryPiratePlaystyle.Text = TextResolver.GetText("Pirate Playstyle");
            lblJumpStartVictoryPiratePlaystyle.Location = new Point(500, 298);
            cmbJumpStartVictoryPiratePlayStyle.Font = font_3;
            cmbJumpStartVictoryPiratePlayStyle.Size = new Size(160, 21);
            cmbJumpStartVictoryPiratePlayStyle.Location = new Point(730, 295);
            pnlJumpStartPiratePlaystyleDescriptionContainer.Size = new Size(220, 205);
            pnlJumpStartPiratePlaystyleDescriptionContainer.Location = new Point(500, 331);
            pnlJumpStartPiratePlaystyleDescriptionContainer.AutoScroll = true;
            pnlJumpStartPiratePlaystyleDescriptionContainer.SetAutoScrollMargin(0, 0);
            pnlJumpStartPiratePlaystyleDescriptionContainer.AutoScrollPosition = new Point(0, 0);
            lblJumpStartPiratePlaystyleDescription.Font = font_3;
            lblJumpStartPiratePlaystyleDescription.Location = new Point(0, 0);
            lblJumpStartPiratePlaystyleDescription.MaximumSize = new Size(200, 500);
            lblJumpStartPiratePlaystyleDescription.Size = new Size(200, 205);
            picJumpStartYourEmpirePiratePlaystyle.Size = new Size(160, 160);
            picJumpStartYourEmpirePiratePlaystyle.Location = new Point(730, 331);
            method_35();
            tbarJumpStartTheGalaxyDifficulty.Setup();
            tbarJumpStartTheGalaxyDifficulty.LabelWidth = 80;
            tbarJumpStartTheGalaxyDifficulty.LinkWidth = 0;
            tbarJumpStartTheGalaxyDifficulty.Location = new Point(10, 545);
            tbarJumpStartTheGalaxyDifficulty.Size = new Size(630, 55);
            tbarJumpStartTheGalaxyDifficulty.SetLabels(new string[5]
            {
            TextResolver.GetText("Easy"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Hard"),
            TextResolver.GetText("Very Hard"),
            TextResolver.GetText("Extreme")
            });
            chkJumpStartTheGalaxyDifficultyScaling.Location = new Point(650, 560);
            chkJumpStartTheGalaxyDifficultyScaling.Text = TextResolver.GetText("Difficulty scales as player nears victory");
            tbarJumpStartTheGalaxyDifficulty.LabelText = TextResolver.GetText("Difficulty");
            btnJumpStartTheGalaxyPrevious.Font = font_7;
            btnJumpStartTheGalaxyNext.Font = font_7;
            btnJumpStartTheGalaxyPrevious.Size = new Size(300, 40);
            btnJumpStartTheGalaxyNext.Size = new Size(300, 40);
            btnJumpStartTheGalaxyPrevious.Location = new Point(10, pnlStartNewGameJumpStart.Height - (btnJumpStartTheGalaxyPrevious.Height + 10));
            btnJumpStartTheGalaxyNext.Location = new Point(pnlStartNewGameJumpStart.Width - (btnJumpStartTheGalaxyNext.Width + 10), pnlStartNewGameJumpStart.Height - (btnJumpStartTheGalaxyNext.Height + 10));
        }

        private void method_37()
        {
            pnlStartNewGameTheGalaxy.SuspendLayout();
            pnlStartNewGameGalaxyShapeSize.Size = new Size(650, 345);
            pnlStartNewGameGalaxyShapeSize.Location = new Point(10, 10);
            radStartNewGameGalaxyShapeElliptical.Location = new Point(10, 10);
            radStartNewGameGalaxyShapeSpiral.Location = new Point(10, 30);
            radStartNewGameGalaxyShapeRing.Location = new Point(10, 50);
            radStartNewGameGalaxyShapeIrregular.Location = new Point(10, 70);
            radStartNewGameGalaxyShapeClustersEven.Location = new Point(10, 90);
            radStartNewGameGalaxyShapeClustersVaried.Location = new Point(10, 110);
            radStartNewGameGalaxyShapeElliptical.Font = font_3;
            radStartNewGameGalaxyShapeSpiral.Font = font_3;
            radStartNewGameGalaxyShapeRing.Font = font_3;
            radStartNewGameGalaxyShapeIrregular.Font = font_3;
            radStartNewGameGalaxyShapeClustersEven.Font = font_3;
            radStartNewGameGalaxyShapeClustersVaried.Font = font_3;
            picStartNewGameTheGalaxyPreview.Size = new Size(190, 190);
            picStartNewGameTheGalaxyPreview.Location = new Point(120, 10);
            picStartNewGameTheGalaxyPreview.SizeMode = PictureBoxSizeMode.Zoom;
            lblStartNewGameGalaxyShapeTitle.Font = font_7;
            lblStartNewGameGalaxyShapeTitle.Location = new Point(335, 10);
            lblStartNewGameGalaxyShapeDescription.Location = new Point(335, 35);
            lblStartNewGameGalaxyShapeDescription.MaximumSize = new Size(305, 235);
            tbarStartNewGameTheGalaxyStarDensity.Setup();
            tbarStartNewGameTheGalaxyStarDensity.LinkWidth = 0;
            tbarStartNewGameTheGalaxyStarDensity.Location = new Point(10, 215);
            tbarStartNewGameTheGalaxyStarDensity.Size = new Size(630, 55);
            string text = TextResolver.GetText("stars");
            BaconStart.method_37(this);
            tbarStartNewGameTheGalaxyStarDensity.LabelText = TextResolver.GetText("Star\\nAmount");
            tbarStartNewGameTheGalaxyDimensions.Setup();
            tbarStartNewGameTheGalaxyDimensions.LinkWidth = 0;
            tbarStartNewGameTheGalaxyDimensions.Location = new Point(10, 280);
            tbarStartNewGameTheGalaxyDimensions.Size = new Size(630, 55);
            string text2 = TextResolver.GetText("sectors");
            tbarStartNewGameTheGalaxyDimensions.SetLabels(new string[5]
            {
            TextResolver.GetText("Tiny") + "\n4x4 " + text2,
            TextResolver.GetText("Small") + "\n6x6 " + text2,
            TextResolver.GetText("Medium") + "\n8x8 " + text2,
            TextResolver.GetText("Large") + "\n10x10 " + text2,
            TextResolver.GetText("Huge") + "\n15x15 " + text2
            });
            tbarStartNewGameTheGalaxyDimensions.LabelText = TextResolver.GetText("Physical\\nSize");
            tbarStartNewGameTheGalaxyExpansion.Setup(2);
            tbarStartNewGameTheGalaxyAggression.Setup();
            tbarStartNewGameTheGalaxyDifficulty.Setup();
            tbarStartNewGameTheGalaxyResearchSpeed.Setup();
            tbarStartNewGameTheGalaxySpaceCreatures.Setup();
            tbarStartNewGameTheGalaxyPirates.Setup();
            tbarStartNewGameTheGalaxyPirateStrength.Setup();
            tbarStartNewGameTheGalaxyExpansion.LabelWidth = 80;
            tbarStartNewGameTheGalaxyDifficulty.LabelWidth = 80;
            tbarStartNewGameTheGalaxyAggression.LabelWidth = 80;
            tbarStartNewGameTheGalaxyPirateStrength.LabelWidth = 80;
            tbarStartNewGameTheGalaxyResearchSpeed.LabelWidth = 70;
            tbarStartNewGameTheGalaxySpaceCreatures.LabelWidth = 70;
            tbarStartNewGameTheGalaxyPirates.LabelWidth = 60;
            tbarStartNewGameTheGalaxyExpansion.LinkWidth = 0;
            tbarStartNewGameTheGalaxyAggression.LinkWidth = 0;
            tbarStartNewGameTheGalaxyDifficulty.LinkWidth = 0;
            tbarStartNewGameTheGalaxyPirateStrength.LinkWidth = 0;
            tbarStartNewGameTheGalaxyResearchSpeed.LinkWidth = 65;
            tbarStartNewGameTheGalaxySpaceCreatures.LinkWidth = 65;
            tbarStartNewGameTheGalaxyPirates.LinkWidth = 65;
            tbarStartNewGameTheGalaxyExpansion.Location = new Point(10, 370);
            tbarStartNewGameTheGalaxyAggression.Location = new Point(10, 430);
            tbarStartNewGameTheGalaxyDifficulty.Location = new Point(10, 490);
            tbarStartNewGameTheGalaxyResearchSpeed.Location = new Point(400, 370);
            tbarStartNewGameTheGalaxySpaceCreatures.Location = new Point(400, 430);
            tbarStartNewGameTheGalaxyPirates.Location = new Point(400, 490);
            tbarStartNewGameTheGalaxyPirateStrength.Location = new Point(400, 550);
            tbarStartNewGameTheGalaxyExpansion.Size = new Size(380, 55);
            tbarStartNewGameTheGalaxyDifficulty.Size = new Size(380, 55);
            tbarStartNewGameTheGalaxyAggression.Size = new Size(380, 55);
            numStartNewGameTheGalaxyResearchBaseTech.Location = new Point(838, 384);
            numStartNewGameTheGalaxyResearchBaseTech.Size = new Size(40, 23);
            numStartNewGameTheGalaxyResearchBaseTech.Minimum = 1m;
            numStartNewGameTheGalaxyResearchBaseTech.Maximum = 999m;
            numStartNewGameTheGalaxyResearchBaseTech.Enabled = true;
            numStartNewGameTheGalaxyResearchBaseTech.TextAlign = HorizontalAlignment.Right;
            lblStartNewGameTheGalaxyResearchBaseTechLabel.Location = new Point(878, 384);
            lblStartNewGameTheGalaxyResearchBaseTechLabel.Font = font_6;
            tbarStartNewGameTheGalaxyResearchSpeed.Size = new Size(433, 55);
            tbarStartNewGameTheGalaxySpaceCreatures.Size = new Size(490, 55);
            tbarStartNewGameTheGalaxyPirates.Size = new Size(403, 55);
            tbarStartNewGameTheGalaxyPirateStrength.Size = new Size(380, 55);
            lblStartNewGameTheGalaxyPirateProximityLabel.Text = TextResolver.GetText("Pirate Proximity");
            lblStartNewGameTheGalaxyPirateProximityLabel.MaximumSize = new Size(90, 21);
            lblStartNewGameTheGalaxyPirateProximityLabel.Location = new Point(805, 493);
            cmbStartNewGameTheGalaxyPirateProximity.Size = new Size(80, 21);
            cmbStartNewGameTheGalaxyPirateProximity.Location = new Point(807, 508);
            if (cmbStartNewGameTheGalaxyPirateProximity.Items == null || cmbStartNewGameTheGalaxyPirateProximity.Items.Count <= 0)
            {
                cmbStartNewGameTheGalaxyPirateProximity.Items.AddRange(new string[3]
                {
                TextResolver.GetText("Nearby"),
                TextResolver.GetText("Average"),
                TextResolver.GetText("Distant")
                });
            }
            cmbStartNewGameTheGalaxyPirateProximity.BringToFront();
            tbarStartNewGameTheGalaxyExpansion.SliderOffset = 2;
            tbarStartNewGameTheGalaxyExpansion.SetLabels(new string[6]
            {
            TextResolver.GetText("PreWarp"),
            TextResolver.GetText("Starting"),
            TextResolver.GetText("Young"),
            TextResolver.GetText("Expanding"),
            TextResolver.GetText("Mature"),
            TextResolver.GetText("Old")
            });
            tbarStartNewGameTheGalaxyAggression.SetLabels(new string[5]
            {
            TextResolver.GetText("Peaceful"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Restless"),
            TextResolver.GetText("Unstable"),
            TextResolver.GetText("Chaos")
            });
            tbarStartNewGameTheGalaxyDifficulty.SetLabels(new string[5]
            {
            TextResolver.GetText("Easy"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Hard"),
            TextResolver.GetText("Very Hard"),
            TextResolver.GetText("Extreme")
            });
            chkStartNewGameTheGalaxyDifficultyScaling.Location = new Point(10, 550);
            chkStartNewGameTheGalaxyDifficultyScaling.Text = TextResolver.GetText("Difficulty scales as player nears victory");
            chkStartNewGameTheGalaxyPiratesRespawn.Location = new Point(785, 550);
            chkStartNewGameTheGalaxyPiratesRespawn.AutoSize = false;
            chkStartNewGameTheGalaxyPiratesRespawn.Size = new Size(105, 60);
            chkStartNewGameTheGalaxyPiratesRespawn.Padding = new Padding(0);
            chkStartNewGameTheGalaxyPiratesRespawn.Text = TextResolver.GetText("Destroyed Pirates do not respawn");
            chkStartNewGameTheGalaxyPiratesRespawn.CheckAlign = ContentAlignment.MiddleRight;
            chkStartNewGameTheGalaxyPiratesRespawn.TextAlign = ContentAlignment.MiddleRight;
            tbarStartNewGameTheGalaxyResearchSpeed.SetLabels(new string[5]
            {
            TextResolver.GetText("Very Expensive"),
            TextResolver.GetText("Expensive"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Cheap"),
            TextResolver.GetText("Very Cheap")
            });
            tbarStartNewGameTheGalaxySpaceCreatures.SetLabels(new string[4]
            {
            TextResolver.GetText("None"),
            TextResolver.GetText("Few"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Many")
            });
            tbarStartNewGameTheGalaxyPirates.SetLabels(new string[6]
            {
            TextResolver.GetText("None"),
            TextResolver.GetText("Very Few"),
            TextResolver.GetText("Few"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Many"),
            TextResolver.GetText("Very Many")
            });
            tbarStartNewGameTheGalaxyPirateStrength.SetLabels(new string[4]
            {
            TextResolver.GetText("Very Weak"),
            TextResolver.GetText("Weak"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Strong")
            });
            tbarStartNewGameTheGalaxyExpansion.LabelText = TextResolver.GetText("Expansion");
            tbarStartNewGameTheGalaxyAggression.LabelText = TextResolver.GetText("Aggression");
            tbarStartNewGameTheGalaxyDifficulty.LabelText = TextResolver.GetText("Difficulty");
            tbarStartNewGameTheGalaxyResearchSpeed.LabelText = TextResolver.GetText("Research \\nCosts");
            tbarStartNewGameTheGalaxySpaceCreatures.LabelText = TextResolver.GetText("Space Creatures");
            tbarStartNewGameTheGalaxyPirates.LabelText = TextResolver.GetText("Pirates");
            tbarStartNewGameTheGalaxyPirateStrength.LabelText = TextResolver.GetText("Pirate Strength");
            tbarStartNewGameTheGalaxyResearchSpeed.LinkText = TextResolver.GetText("About Research...");
            tbarStartNewGameTheGalaxySpaceCreatures.LinkText = TextResolver.GetText("About Space Creatures...");
            tbarStartNewGameTheGalaxyPirates.LinkText = TextResolver.GetText("About Pirates...");
            picStartNewGameTheGalaxyImage.Size = new Size(220, 345);
            picStartNewGameTheGalaxyImage.Location = new Point(670, 10);
            picStartNewGameTheGalaxyImage.Visible = false;
            pnlStartNewGameTheGalaxyLoadExisting.Size = new Size(220, 345);
            pnlStartNewGameTheGalaxyLoadExisting.Location = new Point(670, 10);
            lblStartNewGameTheGalaxyLoadExistingTitle.Location = new Point(10, 10);
            lblStartNewGameTheGalaxyLoadExistingTitle.Font = font_7;
            lblStartNewGameTheGalaxyLoadExistingTitle.MaximumSize = new Size(200, 40);
            lblStartNewGameTheGalaxyLoadExistingTitle.Text = TextResolver.GetText("OR Load existing Galaxy as map");
            lblStartNewGameTheGalaxyLoadExistingFilepath.Location = new Point(10, 55);
            lblStartNewGameTheGalaxyLoadExistingFilepath.Font = font_3;
            lblStartNewGameTheGalaxyLoadExistingFilepath.MaximumSize = new Size(200, 102);
            lblStartNewGameTheGalaxyLoadExistingFilepath.Text = "(" + TextResolver.GetText("No Galaxy Map specified") + ")";
            lblStartNewGameTheGalaxyLoadExistingFilepath.BorderStyle = BorderStyle.FixedSingle;
            btnStartNewGameTheGalaxyLoadExistingBrowse.Size = new Size(98, 45);
            btnStartNewGameTheGalaxyLoadExistingBrowse.Location = new Point(10, 162);
            btnStartNewGameTheGalaxyLoadExistingBrowse.Text = TextResolver.GetText("Browse for Maps") + "...";
            btnStartNewGameTheGalaxyLoadExistingClear.Size = new Size(98, 45);
            btnStartNewGameTheGalaxyLoadExistingClear.Location = new Point(112, 162);
            btnStartNewGameTheGalaxyLoadExistingClear.Text = TextResolver.GetText("Clear Map");
            chkStartNewGameTheGalaxyLoadExistingResources.Location = new Point(10, 220);
            chkStartNewGameTheGalaxyLoadExistingResources.Font = font_3;
            chkStartNewGameTheGalaxyLoadExistingResources.Text = TextResolver.GetText("Regenerate Resources");
            chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Location = new Point(10, 240);
            chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Font = font_3;
            chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Text = TextResolver.GetText("Regenerate Scenery and Research bonuses");
            chkStartNewGameTheGalaxyLoadExistingCreatures.Location = new Point(10, 260);
            chkStartNewGameTheGalaxyLoadExistingCreatures.Font = font_3;
            chkStartNewGameTheGalaxyLoadExistingCreatures.Text = TextResolver.GetText("Regenerate Space Creatures");
            chkStartNewGameTheGalaxyLoadExistingRuins.Location = new Point(10, 280);
            chkStartNewGameTheGalaxyLoadExistingRuins.Font = font_3;
            chkStartNewGameTheGalaxyLoadExistingRuins.Text = TextResolver.GetText("Regenerate Ruins");
            chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Location = new Point(10, 300);
            chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Font = font_3;
            chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Text = TextResolver.GetText("Regenerate Special Locations");
            btnStartNewGameTheGalaxyPrevious.Font = font_7;
            btnStartNewGameTheGalaxyNext.Font = font_7;
            btnStartNewGameTheGalaxyPrevious.Size = new Size(300, 40);
            btnStartNewGameTheGalaxyNext.Size = new Size(300, 40);
            btnStartNewGameTheGalaxyPrevious.Location = new Point(10, pnlStartNewGameTheGalaxy.Height - (btnStartNewGameTheGalaxyPrevious.Height + 10));
            btnStartNewGameTheGalaxyNext.Location = new Point(pnlStartNewGameTheGalaxy.Width - (btnStartNewGameTheGalaxyNext.Width + 10), pnlStartNewGameTheGalaxy.Height - (btnStartNewGameTheGalaxyNext.Height + 10));
            pnlStartNewGameTheGalaxy.ResumeLayout();
        }

        private void method_38(bool bool_5, bool bool_6)
        {
            if (bool_5)
            {
                if (bool_6)
                {
                    tbarStartNewGameTheGalaxyExpansion.Value = 0;
                    tbarStartNewGameTheGalaxyPirates.Value = 4;
                    cmbStartNewGameTheGalaxyPirateProximity.SelectedIndex = 1;
                    tbarStartNewGameTheGalaxyColonyPrevalence.Value = 3;
                    tbarStartNewGameTheGalaxyAlienLife.Value = 3;
                    tbarStartNewGameYourEmpireTechLevel.Value = 1;
                    tbarStartNewGameTheGalaxyAggression.Value = 2;
                }
                else
                {
                    tbarStartNewGameTheGalaxyExpansion.Value = 1;
                    tbarStartNewGameTheGalaxyPirates.Value = 3;
                    cmbStartNewGameTheGalaxyPirateProximity.SelectedIndex = 1;
                    tbarStartNewGameTheGalaxyColonyPrevalence.Value = 2;
                    tbarStartNewGameTheGalaxyAlienLife.Value = 2;
                    tbarStartNewGameYourEmpireTechLevel.Value = 1;
                    tbarStartNewGameTheGalaxyAggression.Value = 1;
                }
            }
            else if (bool_6)
            {
                tbarStartNewGameTheGalaxyExpansion.Value = 0;
                tbarStartNewGameTheGalaxyPirates.Value = 4;
                cmbStartNewGameTheGalaxyPirateProximity.SelectedIndex = 0;
                tbarStartNewGameTheGalaxyColonyPrevalence.Value = 3;
                tbarStartNewGameTheGalaxyAlienLife.Value = 3;
                tbarStartNewGameYourEmpireTechLevel.Value = 0;
                tbarStartNewGameTheGalaxyAggression.Value = 2;
            }
            else
            {
                tbarStartNewGameTheGalaxyExpansion.Value = 1;
                tbarStartNewGameTheGalaxyPirates.Value = 3;
                cmbStartNewGameTheGalaxyPirateProximity.SelectedIndex = 1;
                tbarStartNewGameTheGalaxyColonyPrevalence.Value = 2;
                tbarStartNewGameTheGalaxyAlienLife.Value = 2;
                tbarStartNewGameYourEmpireTechLevel.Value = 1;
                tbarStartNewGameTheGalaxyAggression.Value = 1;
            }
        }

        private void method_39()
        {
            method_40(bool_5: true);
        }

        private void method_40(bool bool_5)
        {
            pnlStartNewGameYourEmpire.SuspendLayout();
            pnlStartNewGameYourEmpireDetails.Size = new Size(340, 110);
            pnlStartNewGameYourEmpireDetails.Location = new Point(10, 8);
            lblStartNewGameYourEmpireName.Font = font_6;
            lblStartNewGameYourEmpireName.Location = new Point(10, 10);
            lblStartNewGameYourEmpireName.MaximumSize = new Size(90, 35);
            txtYourEmpireName.Location = new Point(105, 9);
            txtYourEmpireName.Size = new Size(220, 23);
            lblStartNewGameYourEmpireMainColor.Location = new Point(10, 47);
            lblStartNewGameYourEmpireSecondaryColor.Location = new Point(10, 82);
            cmbPrimaryColor.Location = new Point(105, 41);
            cmbSecondaryColor.Location = new Point(105, 76);
            cmbFlagShape.Location = new Point(196, 41);
            cmbFlagShape.Size = new Size(128, 56);
            cmbFlagShape.DrawMode = DrawMode.OwnerDrawFixed;
            cmbFlagShape.ItemHeight = 63;
            cmbFlagShape.DropDownHeight = 700;
            pnlStartNewGameYourEmpireGalaxyLocation.Size = new Size(300, 110);
            pnlStartNewGameYourEmpireGalaxyLocation.Location = new Point(360, 8);
            lblStartNewGameYourEmpireGalaxyLocation.Location = new Point(10, 10);
            lblStartNewGameYourEmpireGalaxyLocation.Font = font_6;
            cmbYourEmpireStartLocation.Location = new Point(10, 35);
            cmbYourEmpireStartLocation.Size = new Size(160, 24);
            picStartNewGameYourEmpireGalaxyLocation.Size = new Size(98, 98);
            picStartNewGameYourEmpireGalaxyLocation.Location = new Point(180, 6);
            picStartNewGameYourEmpireGalaxyLocation.SizeMode = PictureBoxSizeMode.Zoom;
            pnlStartNewGameYourEmpireGovernment.Size = new Size(650, 285);
            lblStartNewGameYourEmpireGovernmentTitle.Font = font_7;
            lblStartNewGameYourEmpireRaceTitle.Font = font_7;
            lblStartNewGameYourEmpireGovernmentName.Visible = false;
            lblStartNewGameYourEmpireRaceName.Visible = false;
            cmbStartNewGameYourEmpireGovernment.Size = new Size(175, 21);
            cmbStartNewGameYourEmpireGovernment.Location = new Point(15, 35);
            cmbStartNewGameYourEmpireGovernment.AllowNullItem = true;
            cmbStartNewGameYourEmpireGovernment.NullItemText = "(" + TextResolver.GetText("Random") + ")";
            cmbStartNewGameYourEmpireGovernment.Font = font_3;
            lblStartNewGameYourEmpireGovernmentAttributes.Location = new Point(200, 37);
            lblStartNewGameYourEmpireGovernmentAttributes.Font = font_3;
            lblStartNewGameYourEmpireGovernmentAttributes.MaximumSize = new Size(430, 200);
            lnkStartNewGameYourEmpireGovernment.Size = new Size(360, 21);
            lnkStartNewGameYourEmpireGovernment.MaximumSize = new Size(360, 40);
            lnkStartNewGameYourEmpireGovernment.Location = new Point(200, 255);
            lnkStartNewGameYourEmpireGovernment.Font = font_3;
            if (bool_5)
            {
                cmbStartNewGameYourEmpireRace.BindData(font_3, raceList_0, main_0.raceImageCache_0.GetRaceImages(), allowRandomRace: true);
            }
            pnlStartNewGameYourEmpireGovernment.Location = new Point(10, 308);
            lblVictoryPiratePlaystyle.Font = font_7;
            lblVictoryPiratePlaystyle.Text = TextResolver.GetText("Pirate Playstyle");
            lblVictoryPiratePlaystyle.Location = new Point(10, 197);
            cmbVictoryPiratePlayStyle.Font = font_3;
            cmbVictoryPiratePlayStyle.Size = new Size(120, 21);
            cmbVictoryPiratePlayStyle.Location = new Point(140, 194);
            lblPiratePlaystyleDescription.Font = font_3;
            lblPiratePlaystyleDescription.Location = new Point(10, 230);
            lblPiratePlaystyleDescription.MaximumSize = new Size(340, 350);
            lblPiratePlaystyleDescription.Size = new Size(340, 350);
            picStartNewGameYourEmpirePiratePlaystyle.Size = new Size(300, 300);
            picStartNewGameYourEmpirePiratePlaystyle.Location = new Point(360, 230);
            method_101(PiratePlayStyle.Balanced, bool_5: false);
            if (bool_2)
            {
                pnlStartNewGameYourEmpireGovernment.Visible = false;
                tbarStartNewGameYourEmpireHomeSystem.Visible = false;
                tbarStartNewGameYourEmpireSize.Visible = false;
                tbarStartNewGameYourEmpireCorruption.Visible = false;
                tbarStartNewGameYourEmpireTechLevel.Location = new Point(10, 123);
                lblVictoryPiratePlaystyle.Visible = true;
                cmbVictoryPiratePlayStyle.Visible = true;
                lblPiratePlaystyleDescription.Visible = true;
                picStartNewGameYourEmpirePiratePlaystyle.Visible = true;
            }
            else
            {
                pnlStartNewGameYourEmpireGovernment.Visible = true;
                tbarStartNewGameYourEmpireHomeSystem.Visible = true;
                tbarStartNewGameYourEmpireSize.Visible = true;
                tbarStartNewGameYourEmpireCorruption.Visible = true;
                tbarStartNewGameYourEmpireTechLevel.Location = new Point(10, 213);
                lblVictoryPiratePlaystyle.Visible = false;
                cmbVictoryPiratePlayStyle.Visible = false;
                lblPiratePlaystyleDescription.Visible = false;
                picStartNewGameYourEmpirePiratePlaystyle.Visible = false;
            }
            tbarStartNewGameYourEmpireHomeSystem.Location = new Point(10, 123);
            tbarStartNewGameYourEmpireSize.Location = new Point(10, 168);
            tbarStartNewGameYourEmpireCorruption.Location = new Point(10, 258);
            tbarStartNewGameYourEmpireHomeSystem.Size = new Size(650, 42);
            tbarStartNewGameYourEmpireSize.Size = new Size(650, 42);
            tbarStartNewGameYourEmpireTechLevel.Size = new Size(650, 42);
            tbarStartNewGameYourEmpireCorruption.Size = new Size(650, 42);
            tbarStartNewGameYourEmpireHomeSystem.Setup();
            tbarStartNewGameYourEmpireSize.Setup();
            tbarStartNewGameYourEmpireTechLevel.Setup();
            tbarStartNewGameYourEmpireCorruption.Setup();
            tbarStartNewGameYourEmpireHomeSystem.LinkWidth = 0;
            tbarStartNewGameYourEmpireSize.LinkWidth = 0;
            tbarStartNewGameYourEmpireTechLevel.LinkWidth = 0;
            tbarStartNewGameYourEmpireCorruption.LinkWidth = 0;
            tbarStartNewGameYourEmpireHomeSystem.LinkText = string.Empty;
            tbarStartNewGameYourEmpireSize.LinkText = string.Empty;
            tbarStartNewGameYourEmpireTechLevel.LinkText = string.Empty;
            tbarStartNewGameYourEmpireCorruption.LinkText = string.Empty;
            tbarStartNewGameYourEmpireHomeSystem.SetLabels(new string[5]
            {
            TextResolver.GetText("Harsh"),
            TextResolver.GetText("Trying"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("Agreeable"),
            TextResolver.GetText("Excellent")
            });
            tbarStartNewGameYourEmpireSize.SetLabels(new string[6]
            {
            TextResolver.GetText("Random"),
            TextResolver.GetText("Starting"),
            TextResolver.GetText("Young"),
            TextResolver.GetText("Expanding"),
            TextResolver.GetText("Mature"),
            TextResolver.GetText("Old")
            });
            tbarStartNewGameYourEmpireTechLevel.SetLabels(new string[9]
            {
            TextResolver.GetText("PreWarp"),
            TextResolver.GetText("Normal"),
            string.Format(TextResolver.GetText("Level X"), "1"),
            string.Format(TextResolver.GetText("Level X"), "2"),
            string.Format(TextResolver.GetText("Level X"), "3"),
            string.Format(TextResolver.GetText("Level X"), "4"),
            string.Format(TextResolver.GetText("Level X"), "5"),
            string.Format(TextResolver.GetText("Level X"), "6"),
            string.Format(TextResolver.GetText("Level X"), "7")
            });
            tbarStartNewGameYourEmpireCorruption.SetLabels(new string[4]
            {
            TextResolver.GetText("Low"),
            TextResolver.GetText("Normal"),
            TextResolver.GetText("High"),
            TextResolver.GetText("Very High")
            });
            if (bool_5)
            {
                tbarStartNewGameYourEmpireHomeSystem.Value = 2;
                tbarStartNewGameYourEmpireCorruption.Value = 1;
            }
            picStartNewGameYourEmpireImage.Size = new Size(220, 585);
            picStartNewGameYourEmpireImage.Location = new Point(670, 8);
            picStartNewGameYourEmpireImage.SizeMode = PictureBoxSizeMode.Zoom;
            btnStartNewGameYourEmpirePrevious.Font = font_7;
            btnStartNewGameYourEmpireNext.Font = font_7;
            btnStartNewGameYourEmpirePrevious.Size = new Size(300, 40);
            btnStartNewGameYourEmpireNext.Size = new Size(300, 40);
            btnStartNewGameYourEmpirePrevious.Location = new Point(10, pnlStartNewGameYourEmpire.Height - (btnStartNewGameYourEmpirePrevious.Height + 10));
            btnStartNewGameYourEmpireNext.Location = new Point(pnlStartNewGameYourEmpire.Width - (btnStartNewGameYourEmpireNext.Width + 10), pnlStartNewGameYourEmpire.Height - (btnStartNewGameYourEmpireNext.Height + 10));
            pnlStartNewGameYourEmpire.ResumeLayout();
        }

        private void method_41()
        {
            pnlStartNewGameYourEmpireType.SuspendLayout();
            _ = (pnlStartNewGameYourEmpireType.Width - 876) / 2;
            int num = (pnlStartNewGameYourEmpireType.Height - 630) / 2;
            num -= 10;
            pnlStartNewGameIntroductoryBorder.Size = new Size(434, 104);
            pnlStartNewGameIntroductoryBorder.Location = new Point(233, 14);
            pnlStartNewGameIntroductoryBorder.BorderStyle = BorderStyle.None;
            pnlStartNewGameIntroductoryBorder.BorderWidth = 8;
            pnlStartNewGameIntroductoryBorder.CornerCurveRadius = 10;
            btnStartNewGameIntroductory.Size = new Size(420, 90);
            btnStartNewGameIntroductory.Location = new Point(7, 7);
            btnStartNewGameIntroductory.Font = font_9;
            toolTip.SetToolTip(btnStartNewGameIntroductory, TextResolver.GetText("Start New Game Description - Introductory Game"));
            Size size = new Size(140, 230);
            int num2 = 10;
            btnStartNewGameYourEmpireTypeTheAncientGalaxy.Size = size;
            btnStartNewGameYourEmpireTypeTheAncientGalaxy.Location = new Point(10, 140);
            btnStartNewGameYourEmpireTypeTheAncientGalaxy.Text = TextResolver.GetText("Start New Game - Ancient Galaxy") + ">>";
            btnStartNewGameYourEmpireTypeTheAncientGalaxy.Font = font_7;
            num2 = 10 + (size.Width + 8);
            btnStartNewGameYourEmpireTypePirateShadows.Size = size;
            btnStartNewGameYourEmpireTypePirateShadows.Location = new Point(num2, 140);
            btnStartNewGameYourEmpireTypePirateShadows.Text = TextResolver.GetText("Start New Game - Shadows Pirate") + ">>";
            btnStartNewGameYourEmpireTypePirateShadows.Font = font_7;
            num2 += size.Width + 8;
            btnStartNewGameYourEmpireTypeNormalShadows.Size = size;
            btnStartNewGameYourEmpireTypeNormalShadows.Location = new Point(num2, 140);
            btnStartNewGameYourEmpireTypeNormalShadows.Text = TextResolver.GetText("Start New Game - Shadows Standard") + ">>";
            btnStartNewGameYourEmpireTypeNormalShadows.Font = font_7;
            num2 += size.Width + 8;
            btnStartNewGameYourEmpireTypeClassicEra.Size = size;
            btnStartNewGameYourEmpireTypeClassicEra.Location = new Point(num2, 140);
            btnStartNewGameYourEmpireTypeClassicEra.Text = TextResolver.GetText("Start New Game - Classic Era") + ">>";
            btnStartNewGameYourEmpireTypeClassicEra.Font = font_7;
            num2 += size.Width + 8;
            btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Size = size;
            btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Location = new Point(num2, 140);
            btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Text = TextResolver.GetText("Start New Game - Return of the Shakturi") + ">>";
            btnStartNewGameYourEmpireTypeReturnOfTheShakturi.Font = font_7;
            num2 += size.Width + 8;
            btnStartNewGameYourEmpireTypeLegends.Size = size;
            btnStartNewGameYourEmpireTypeLegends.Location = new Point(num2, 140);
            btnStartNewGameYourEmpireTypeLegends.Text = TextResolver.GetText("Start New Game - Legends") + ">>";
            btnStartNewGameYourEmpireTypeLegends.Font = font_7;
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypeTheAncientGalaxy, TextResolver.GetText("Start New Game Description - Ancient Galaxy"));
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypePirateShadows, TextResolver.GetText("Start New Game Description - Shadows Pirate"));
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypeNormalShadows, TextResolver.GetText("Start New Game Description - Shadows Standard"));
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypeClassicEra, TextResolver.GetText("Start New Game Description - Classic Era"));
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypeReturnOfTheShakturi, TextResolver.GetText("Start New Game Description - Return of the Shakturi"));
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypeLegends, TextResolver.GetText("Start New Game Description - Legends"));
            picStartNewGameYourEmpireTypeTimeline.Size = new Size(880, 150);
            picStartNewGameYourEmpireTypeTimeline.Location = new Point(10, 370);
            btnStartNewGameYourEmpireTypeNormalClassic.Size = new Size(340, 100);
            btnStartNewGameYourEmpireTypeNormalClassic.Location = new Point(70, 540);
            btnStartNewGameYourEmpireTypeNormalClassic.Text = TextResolver.GetText("Start New Game - Custom Standard") + ">>";
            btnStartNewGameYourEmpireTypeNormalClassic.Font = font_7;
            btnStartNewGameYourEmpireTypePirateClassic.Size = new Size(340, 100);
            btnStartNewGameYourEmpireTypePirateClassic.Location = new Point(490, 540);
            btnStartNewGameYourEmpireTypePirateClassic.Text = TextResolver.GetText("Start New Game - Custom Pirate") + ">>";
            btnStartNewGameYourEmpireTypePirateClassic.Font = font_7;
            lblStartNewGameActiveTheme.TextAlign = ContentAlignment.MiddleCenter;
            using (Graphics graphics = lblStartNewGameActiveTheme.CreateGraphics())
            {
                int num3 = (900 - (int)graphics.MeasureString(lblStartNewGameActiveTheme.Text, font_6).Width) / 2;
                lblStartNewGameActiveTheme.Location = new Point(num3, 640);
            }
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypeNormalClassic, TextResolver.GetText("Start New Game Description - Custom Standard"));
            toolTip.SetToolTip(btnStartNewGameYourEmpireTypePirateClassic, TextResolver.GetText("Start New Game Description - Custom Pirate"));
            btnStartNewGameYourEmpireTypeQuickStarts.Visible = false;
            pnlStartNewGameYourEmpireType.ResumeLayout();
        }

        private void method_42()
        {
            pnlStartNewGameYourRace.SuspendLayout();
            pnlStartNewGameYourEmpireRace.Location = new Point(5, 5);
            pnlStartNewGameYourEmpireRace.Size = new Size(750, 595);
            lblStartNewGameYourEmpireRaceTitle.Visible = false;
            cmbStartNewGameYourEmpireRace.Size = new Size(300, 26);
            cmbStartNewGameYourEmpireRace.ItemHeight = 26;
            cmbStartNewGameYourEmpireRace.Location = new Point(15, 20);
            picStartNewGameYourEmpireRace.Size = new Size(300, 300);
            picStartNewGameYourEmpireRace.Location = new Point(15, 57);
            picStartNewGameYourEmpireRace.SizeMode = PictureBoxSizeMode.Zoom;
            picStartNewGameYourEmpireRace.BorderStyle = BorderStyle.None;
            lnkStartNewGameYourEmpireRace.Location = new Point(15, 365);
            lnkStartNewGameYourEmpireRace.Font = font_3;
            lblStartNewGameYourEmpireRaceName.Location = new Point(325, 20);
            lblStartNewGameYourEmpireRaceName.Visible = true;
            lblStartNewGameYourEmpireRaceName.BringToFront();
            pnlStartNewGameYourEmpireRaceAttributesContainer.Location = new Point(330, 57);
            pnlStartNewGameYourEmpireRaceAttributesContainer.Size = new Size(410, 525);
            pnlStartNewGameYourEmpireRaceAttributesContainer.AutoScroll = true;
            pnlStartNewGameYourEmpireRaceAttributesContainer.SetAutoScrollMargin(0, 0);
            pnlStartNewGameYourEmpireRaceAttributesContainer.AutoScrollPosition = new Point(0, 0);
            pnlStartNewGameYourEmpireRaceAttributes.Location = new Point(0, 0);
            pnlStartNewGameYourEmpireRaceAttributes.Size = new Size(390, 0);
            pnlStartNewGameYourEmpireRaceAttributes.MaximumSize = new Size(390, 2000);
            pnlStartNewGameYourEmpireRaceAttributes.MinimumSize = new Size(390, 205);
            pnlStartNewGameYourEmpireRaceAttributes.AutoSize = true;
            picStartNewGameYourRaceImage.Size = new Size(130, 595);
            picStartNewGameYourRaceImage.Location = new Point(760, 5);
            picStartNewGameYourRaceImage.SizeMode = PictureBoxSizeMode.Zoom;
            cmbStartNewGameYourEmpireRace.BindData(font_3, raceList_0, main_0.raceImageCache_0.GetRaceImages(), allowRandomRace: true);
            btnStartNewGameYourRacePrevious.Font = font_7;
            btnStartNewGameYourRaceNext.Font = font_7;
            btnStartNewGameYourRacePrevious.Size = new Size(300, 40);
            btnStartNewGameYourRaceNext.Size = new Size(300, 40);
            btnStartNewGameYourRacePrevious.Location = new Point(10, pnlStartNewGameYourRace.Height - (btnStartNewGameYourRacePrevious.Height + 10));
            btnStartNewGameYourRaceNext.Location = new Point(pnlStartNewGameYourRace.Width - (btnStartNewGameYourRaceNext.Width + 10), pnlStartNewGameYourRace.Height - (btnStartNewGameYourRaceNext.Height + 10));
            btnStartNewGameYourRaceNext.Visible = true;
            btnStartNewGameYourRaceNext.BringToFront();
            btnStartNewGameYourRacePrevious.Visible = true;
            btnStartNewGameYourRacePrevious.BringToFront();
            pnlStartNewGameYourRace.ResumeLayout();
        }

        private void method_43()
        {
            pnlStartNewGameOtherEmpires.SuspendLayout();
            pnlStartNewGameOtherEmpiresAutoGen.Size = new Size(350, 75);
            pnlStartNewGameOtherEmpiresAutoGen.Location = new Point(10, 10);
            using (Graphics graphics = CreateGraphics())
            {
                string text = TextResolver.GetText("Generate");
                string text2 = TextResolver.GetText("starting empires");
                SizeF sizeF = graphics.MeasureString(text, font_3);
                graphics.MeasureString(text2, font_3);
                numAutogenerateEmpiresAmount.Location = new Point(142, 41);
                Point location = new Point(Math.Max(0, 142 - ((int)sizeF.Width + 5)), 43);
                Point location2 = new Point(142 + numAutogenerateEmpiresAmount.Width + 5, 43);
                lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Location = location;
                lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Location = location2;
            }
            lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Font = font_3;
            lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Font = font_3;
            lblStartNewGameOtherEmpiresOR.Font = font_7;
            lblStartNewGameOtherEmpiresOR.Location = new Point(20, 95);
            lblStartNewGameOtherEmpiresOR.Text = TextResolver.GetText("OR specify the starting empires below...");
            pnlStartNewGameOtherEmpiresList.Size = new Size(882, 307);
            pnlStartNewGameOtherEmpiresList.Location = new Point(10, 125);
            chkOtherEmpiresAutogenerate.Location = new Point(10, 10);
            chkOtherEmpiresAutogenerate.Font = font_3;
            ctlStartingEmpiresList.Grid.Rows.Clear();
            ctlStartingEmpiresList.Location = new Point(10, 35);
            ctlStartingEmpiresList.Size = new Size(860, 260);
            ctlStartingEmpiresList.Grid.Columns["Name"].Width = 170;
            ctlStartingEmpiresList.Grid.Columns["Race"].Width = 110;
            ctlStartingEmpiresList.Grid.Columns["Government"].Width = 135;
            ctlStartingEmpiresList.Grid.Columns["Size"].Width = 80;
            ctlStartingEmpiresList.Grid.Columns["TechLevel"].Width = 110;
            ctlStartingEmpiresList.Grid.Columns["HomeSystem"].Width = 95;
            ctlStartingEmpiresList.Grid.Columns["Proximity"].Width = 110;
            ctlStartingEmpiresList.Grid.Columns["Remove"].Width = 30;
            ctlStartingEmpiresList.RemoveImage = bitmap_11;
            btnAddNewEmpire.Size = new Size(200, 25);
            btnAddNewEmpire.Location = new Point(670, 10);
            chkGalaxyNewEmpiresDuringGame.Location = new Point(10, 440);
            chkGalaxyNewEmpiresDuringGame.Font = font_3;
            chkGalaxyNewEmpiresDuringGame.Text = TextResolver.GetText("Allow independent alien colonies to start new empires during the game");
            picStartNewGameOtherEmpiresImageBottom.Size = new Size(880, 130);
            picStartNewGameOtherEmpiresImageBottom.Location = new Point(10, 470);
            picStartNewGameOtherEmpiresImageBottom.SizeMode = PictureBoxSizeMode.CenterImage;
            btnStartNewGameOtherEmpiresPrevious.Font = font_7;
            btnStartNewGameOtherEmpiresNext.Font = font_7;
            btnStartNewGameOtherEmpiresPrevious.Size = new Size(300, 40);
            btnStartNewGameOtherEmpiresNext.Size = new Size(300, 40);
            btnStartNewGameOtherEmpiresPrevious.Location = new Point(10, pnlStartNewGameOtherEmpires.Height - (btnStartNewGameOtherEmpiresPrevious.Height + 10));
            btnStartNewGameOtherEmpiresNext.Location = new Point(pnlStartNewGameOtherEmpires.Width - (btnStartNewGameOtherEmpiresNext.Width + 10), pnlStartNewGameOtherEmpires.Height - (btnStartNewGameOtherEmpiresNext.Height + 10));
            pnlStartNewGameOtherEmpires.ResumeLayout();
        }

        private void method_44()
        {
            pnlStartNewGameVictoryConditions.SuspendLayout();
            chkVictoryTerritory.Font = font_3;
            chkVictoryPopulation.Font = font_3;
            chkVictoryEconomy.Font = font_3;
            chkVictoryTimeLimit.Font = font_3;
            chkVictoryTimeStart.Font = font_3;
            chkVictoryEnableRaceSpecificConditions.Font = font_3;
            pnlStartNewGameVictoryConditionsGroup.Size = new Size(880, 155);
            pnlStartNewGameVictoryConditionsGroup.Location = new Point(10, 10);
            pnlStartNewGameVictoryConditionsGroup.BackColor = Color.FromArgb(80, 0, 40);
            chkVictoryTerritory.Location = new Point(355, 12);
            chkVictoryPopulation.Location = new Point(355, 37);
            chkVictoryEconomy.Location = new Point(355, 62);
            chkVictoryEnableRaceSpecificConditions.Location = new Point(355, 87);
            cmbVictoryThresholdPercentage.Size = new Size(60, 21);
            cmbVictoryThresholdPercentage.Location = new Point(355, 117);
            lblVictoryThresholdPercentage.Location = new Point(421, 119);
            lblVictoryThresholdPercentage.Font = font_7;
            numVictoryTerritoryPercent.Location = new Point(830, 12);
            numVictoryPopulationPercent.Location = new Point(830, 37);
            numVictoryEconomyPercent.Location = new Point(830, 62);
            lblVictorySandbox.Font = font_6;
            lblVictorySandbox.Location = new Point(8, 8);
            lblVictorySandbox.Size = new Size(339, 139);
            lblVictorySandbox.MaximumSize = new Size(339, 139);
            chkVictoryTimeStart.Location = new Point(365, 175);
            chkVictoryTimeLimit.Location = new Point(365, 200);
            numVictoryTimeStartYears.Location = new Point(840, 175);
            numVictoryTimeLimitYears.Location = new Point(840, 200);
            chkVictoryEconomy.AutoSize = true;
            chkVictoryEconomy.MaximumSize = new Size(550, 48);
            chkVictoryTerritory.Text = string.Format(TextResolver.GetText("TERRITORY control X"), "XX");
            chkVictoryPopulation.Text = string.Format(TextResolver.GetText("POPULATION control X"), "XX");
            chkVictoryEconomy.Text = string.Format(TextResolver.GetText("ECONOMY control X"), "XX");
            chkVictoryTimeLimit.Text = string.Format(TextResolver.GetText("TIME LIMIT X"), "XX");
            chkVictoryTimeStart.Text = string.Format(TextResolver.GetText("Victory Conditions X"), "XX");
            chkVictoryEnableRaceSpecificConditions.Text = TextResolver.GetText("Enable Race-specific Victory Conditions");
            lblVictoryThresholdPercentage.Text = TextResolver.GetText("Victory Threshold Percent");
            chkVictoryTimeLimit.BringToFront();
            chkVictoryTimeStart.BringToFront();
            chkVictoryEnableRaceSpecificConditions.BringToFront();
            chkVictoryEnableRaceSpecificEvents.BringToFront();
            cmbVictoryThresholdPercentage.BringToFront();
            chkStoryDistantWorlds.Font = font_3;
            chkStoryDistantWorlds.Location = new Point(20, 245);
            chkStoryDistantWorlds.CheckAlign = ContentAlignment.TopLeft;
            chkStoryReturnOfTheShakturi.Font = font_3;
            chkStoryReturnOfTheShakturi.Location = new Point(20, 270);
            chkStoryReturnOfTheShakturi.AutoSize = false;
            chkStoryReturnOfTheShakturi.MaximumSize = new Size(800, 21);
            chkStoryReturnOfTheShakturi.Size = new Size(800, 21);
            chkStoryReturnOfTheShakturi.CheckAlign = ContentAlignment.TopLeft;
            chkStoryReturnOfTheShakturi.TextAlign = ContentAlignment.MiddleLeft;
            chkStoryReturnOfTheShakturi.BringToFront();
            chkVictoryEnableDisasterEvents.Text = TextResolver.GetText("Enable Disasters and other events");
            chkVictoryEnableDisasterEvents.Font = font_3;
            chkVictoryEnableDisasterEvents.Location = new Point(20, 295);
            chkVictoryEnableDisasterEvents.AutoSize = false;
            chkVictoryEnableDisasterEvents.MaximumSize = new Size(800, 21);
            chkVictoryEnableDisasterEvents.Size = new Size(800, 21);
            chkVictoryEnableDisasterEvents.CheckAlign = ContentAlignment.TopLeft;
            chkVictoryEnableDisasterEvents.TextAlign = ContentAlignment.MiddleLeft;
            chkVictoryEnableDisasterEvents.BringToFront();
            chkVictoryEnableRaceSpecificEvents.Text = TextResolver.GetText("Enable Race-specific events");
            chkVictoryEnableRaceSpecificEvents.Font = font_3;
            chkVictoryEnableRaceSpecificEvents.Location = new Point(20, 320);
            chkVictoryEnableRaceSpecificEvents.AutoSize = false;
            chkVictoryEnableRaceSpecificEvents.MaximumSize = new Size(800, 21);
            chkVictoryEnableRaceSpecificEvents.Size = new Size(800, 21);
            chkVictoryEnableRaceSpecificEvents.CheckAlign = ContentAlignment.TopLeft;
            chkVictoryEnableRaceSpecificEvents.TextAlign = ContentAlignment.MiddleLeft;
            chkVictoryEnableRaceSpecificEvents.BringToFront();
            chkStoryShadows.Font = font_3;
            chkStoryShadows.Location = new Point(20, 345);
            chkStoryShadows.AutoSize = false;
            chkStoryShadows.MaximumSize = new Size(800, 21);
            chkStoryShadows.Size = new Size(800, 21);
            chkStoryShadows.CheckAlign = ContentAlignment.TopLeft;
            chkStoryShadows.TextAlign = ContentAlignment.MiddleLeft;
            chkStoryShadows.BringToFront();
            chkStartNewGameEnableTechTrading.Font = font_3;
            chkStartNewGameEnableTechTrading.Location = new Point(pnlStartNewGameVictoryConditions.Width - (chkStartNewGameEnableTechTrading.Width + 20), 320);
            chkStartNewGameEnableTechTrading.CheckAlign = ContentAlignment.TopRight;
            chkStartNewGameEnableTechTrading.BringToFront();
            chkStartNewGameEnableGiantKaltors.Font = font_3;
            chkStartNewGameEnableGiantKaltors.Location = new Point(pnlStartNewGameVictoryConditions.Width - (chkStartNewGameEnableGiantKaltors.Width + 20), 345);
            chkStartNewGameEnableGiantKaltors.CheckAlign = ContentAlignment.TopRight;
            chkStartNewGameEnableGiantKaltors.BringToFront();
            picStartNewGameVictoryConditionsImage.Size = new Size(870, 220);
            picStartNewGameVictoryConditionsImage.Location = new Point(15, 375);
            btnStartNewGameVictoryConditionsPrevious.Font = font_7;
            btnStartNewGameStart.Font = font_7;
            btnStartNewGameVictoryConditionsPrevious.Size = new Size(300, 40);
            btnStartNewGameStart.Size = new Size(300, 40);
            btnStartNewGameVictoryConditionsPrevious.Location = new Point(10, pnlStartNewGameVictoryConditions.Height - (btnStartNewGameVictoryConditionsPrevious.Height + 10));
            btnStartNewGameStart.Location = new Point(pnlStartNewGameVictoryConditions.Width - (btnStartNewGameStart.Width + 10), pnlStartNewGameVictoryConditions.Height - (btnStartNewGameStart.Height + 10));
            pnlStartNewGameVictoryConditions.ResumeLayout();
        }

        private void method_45(bool bool_5)
        {
            if (bool_5)
            {
                lblVictoryPiratePlaystyle.Visible = true;
                cmbVictoryPiratePlayStyle.Visible = true;
                chkStoryReturnOfTheShakturi.Checked = false;
                chkStoryReturnOfTheShakturi.Enabled = false;
                lblVictorySandbox.Text = TextResolver.GetText("Victory Conditions Explanation Pirate");
                chkVictoryEnableRaceSpecificConditions.Text = TextResolver.GetText("Enable Pirate-specific Victory Conditions");
            }
            else
            {
                lblVictoryPiratePlaystyle.Visible = false;
                cmbVictoryPiratePlayStyle.Visible = false;
                chkStoryReturnOfTheShakturi.Enabled = true;
                lblVictorySandbox.Text = TextResolver.GetText("Victory Conditions Explanation");
                chkVictoryEnableRaceSpecificConditions.Text = TextResolver.GetText("Enable Race-specific Victory Conditions");
            }
        }

        private void method_46()
        {
            pnlNewGame.Visible = false;
        }

        private void method_47(object sender, EventArgs e)
        {
            main_0.gameOptions_0.StartGameOptions = method_195();
            main_0.YxwyUefOyQ();
            main_0.method_257();
            method_46();
        }

        private Race method_48(Galaxy galaxy_0, string string_2, DistantWorlds.Types.EmpireList empireList_0, bool bool_5)
        {
            //Race race = null;
            if (string_2 == "(" + TextResolver.GetText("Random") + ")")
            {
                RaceList raceList = new RaceList();
                if (empireList_0 != null)
                {
                    for (int i = 0; i < empireList_0.Count; i++)
                    {
                        if (empireList_0[i].DominantRace != null && !raceList.Contains(empireList_0[i].DominantRace))
                        {
                            raceList.Add(empireList_0[i].DominantRace);
                        }
                    }
                }
                RaceList raceList2 = new RaceList();
                for (int j = 0; j < galaxy_0.Races.Count; j++)
                {
                    if (!galaxy_0.Races[j].Playable || raceList.Contains(galaxy_0.Races[j]))
                    {
                        continue;
                    }
                    if (!bool_5)
                    {
                        if (galaxy_0.Races[j].CanBeNormalEmpire)
                        {
                            raceList2.Add(galaxy_0.Races[j]);
                        }
                    }
                    else
                    {
                        raceList2.Add(galaxy_0.Races[j]);
                    }
                }
                if (raceList2.Count > 0)
                {
                    return raceList2[Galaxy.Rnd.Next(0, raceList2.Count)];
                }
                return galaxy_0.SelectRandomRace(0);
            }
            int index = method_103(galaxy_0, string_2);
            return galaxy_0.Races[index];
        }

        private double method_49(Galaxy galaxy_0, int int_1)
        {
            double num = (double)galaxy_0.StarCount / 700.0;
            double num2 = Galaxy.DetermineEmpireExpansion(Galaxy.Rnd, int_1);
            num2 *= num;
            return Math.Sqrt(num2) * galaxy_0.TypicalDistanceBetweenColoniesAtMaximumFill / 2.0;
        }

        private bool method_50(Galaxy galaxy_0, Habitat habitat_0)
        {
            bool result = false;
            for (int i = 0; i < galaxy_0.Systems[habitat_0.SystemIndex].Habitats.Count; i++)
            {
                Habitat habitat = galaxy_0.Systems[habitat_0.SystemIndex].Habitats[i];
                if (habitat.Population != null && habitat.Population.Count > 0 && habitat.Empire != null && habitat.Empire != galaxy_0.IndependentEmpire)
                {
                    result = true;
                    break;
                }
            }
            return result;
        }

        private Habitat method_51(Galaxy galaxy_0, Race race_0, string string_2, Habitat habitat_0, HabitatType habitatType_0, bool bool_5, int int_1, Sector sector_0)
        {
            Habitat habitat = null;
            bool flag = false;
            if (string_2 == "(" + TextResolver.GetText("Random") + ")")
            {
                double num = (double)Galaxy.SectorSize * 2.0;
                num = 0.75 * ((double)Galaxy.SizeX / (Math.Sqrt(int_1) - 1.0));
                int num2 = 0;
                while (!flag && num2 < 200)
                {
                    double double_ = Math.Min(1.0, (double)num2 / 100.0);
                    double double_2;
                    double double_3;
                    if (bool_5)
                    {
                        method_93(galaxy_0, 0.0, 1.0, out double_2, out double_3);
                    }
                    else if (num2 == 0)
                    {
                        method_84(galaxy_0, race_0, 0.0, 1.0, out double_2, out double_3, bool_5: false, double_);
                    }
                    else
                    {
                        method_84(galaxy_0, race_0, 0.0, 1.0, out double_2, out double_3, bool_5: true, double_);
                    }
                    habitat = galaxy_0.FindNearestUncolonizedHabitat(double_2, double_3, habitatType_0);
                    if (habitat != null)
                    {
                        GalaxyLocationList galaxyLocationList = galaxy_0.DetermineGalaxyLocationsAtPoint(habitat.Xpos, habitat.Ypos, GalaxyLocationType.NebulaCloud);
                        if (galaxyLocationList != null && galaxyLocationList.Count > 0)
                        {
                            habitat = null;
                            flag = false;
                        }
                        if (habitat != null)
                        {
                            Habitat habitat2 = galaxy_0.FindNearestColony(habitat.Xpos, habitat.Ypos, null, 0, includeIndependentColonies: false);
                            double num3 = 0.0;
                            if (habitat2 != null)
                            {
                                num3 = galaxy_0.CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                                if (num3 < num)
                                {
                                    habitat = null;
                                    flag = false;
                                }
                            }
                        }
                        if (habitat != null)
                        {
                            Habitat systemStar = Galaxy.DetermineHabitatSystemStar(habitat);
                            if (galaxy_0.Systems[systemStar].PlanetCount >= 4)
                            {
                                flag = true;
                            }
                        }
                        if (race_0 != null && habitat != null)
                        {
                            GalaxyLocation galaxyLocation = galaxy_0.DetermineRaceRegion(race_0);
                            if (galaxyLocation != null)
                            {
                                galaxyLocation.ResolveLocationCenter(out var x, out var y);
                                double num4 = galaxy_0.CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
                                double num5 = (double)galaxyLocation.Width * 0.4;
                                if (num4 > num5)
                                {
                                    habitat = null;
                                    flag = false;
                                }
                            }
                        }
                    }
                    num2++;
                }
                if (!flag && habitat == null)
                {
                    method_84(galaxy_0, race_0, 0.0, 1.0, out var double_4, out var double_5, bool_5: false, 0.0);
                    Habitat habitat3 = galaxy_0.FindNearestHabitat(double_4, double_5, HabitatType.MainSequence);
                    if (galaxy_0.Systems[habitat3].PlanetCount == 0 && habitat3.Name.Length <= 5)
                    {
                        galaxy_0.AssignSystemName(habitat3, 1);
                    }
                    galaxy_0.SetColonizableHabitatsInSystem(galaxy_0, habitat3, race_0, 1);
                    habitat = galaxy_0.FindNearestUncolonizedHabitat(habitat3.Xpos, habitat3.Ypos, habitatType_0);
                    if (habitat == null)
                    {
                        galaxy_0.SetColonizableHabitatsInSystem(galaxy_0, habitat3, race_0, 3);
                        habitat = galaxy_0.FindNearestUncolonizedHabitat(habitat3.Xpos, habitat3.Ypos, habitatType_0);
                    }
                }
            }
            else
            {
                int num6 = 0;
                double double_6 = 0.0;
                double double_7 = 0.0;
                double num7 = 0.7;
                double num8 = 0.0;
                double num9 = 0.0;
                double num10 = Galaxy.Rnd.NextDouble() * (double)Galaxy.SectorSize * 0.1;
                if (sector_0 != null)
                {
                    num8 = (double)sector_0.X * (double)Galaxy.SectorSize + (double)Galaxy.SectorSize * 0.5;
                    num9 = (double)sector_0.Y * (double)Galaxy.SectorSize + (double)Galaxy.SectorSize * 0.5;
                    double_6 = num8;
                    double_7 = num9;
                    num7 = 0.3;
                }
                while (!flag && num6 < 200)
                {
                    if (sector_0 != null)
                    {
                        double num11 = galaxy_0.SelectRandomHeading();
                        double num12 = num8 + Math.Cos(num11) * num10;
                        double num13 = num9 + Math.Sin(num11) * num10;
                        double num14 = num10;
                        while (!method_90(num12, num13))
                        {
                            num11 = galaxy_0.SelectRandomHeading();
                            num14 *= 0.9;
                            num12 = num8 + Math.Cos(num11) * num14;
                            num13 = num9 + Math.Sin(num11) * num14;
                        }
                        num10 *= 1.3;
                        double_6 = num12;
                        double_7 = num13;
                    }
                    else
                    {
                        double double_8 = galaxy_0.SelectRandomHeading();
                        double double_9 = method_52(galaxy_0, string_2);
                        method_92(galaxy_0, double_8, habitat_0.Xpos, habitat_0.Ypos, double_9, out double_6, out double_7);
                        while (!method_90(double_6, double_7))
                        {
                            double_8 = galaxy_0.SelectRandomHeading();
                            double_9 = method_52(galaxy_0, string_2);
                            method_92(galaxy_0, double_8, habitat_0.Xpos, habitat_0.Ypos, double_9, out double_6, out double_7);
                        }
                    }
                    List<HabitatType> list = new List<HabitatType>();
                    if (!list.Contains(habitatType_0))
                    {
                        list.Add(habitatType_0);
                    }
                    habitat = galaxy_0.FastFindNearestPlanetMoonOfTypesUnoccupiedSystem(double_6, double_7, null, list);
                    if (habitat != null)
                    {
                        Habitat habitat4 = Galaxy.DetermineHabitatSystemStar(habitat);
                        bool flag2;
                        if (!(flag2 = method_50(galaxy_0, habitat4)) && bool_5 && habitat_0 != null)
                        {
                            double num15 = (double)Galaxy.SectorSize * 0.5;
                            double num16 = galaxy_0.CalculateDistance(habitat_0.Xpos, habitat_0.Ypos, habitat.Xpos, habitat.Ypos);
                            if (num16 < num15)
                            {
                                flag2 = true;
                            }
                        }
                        Habitat habitat5 = galaxy_0.FindNearestColony(double_6, double_7, null, 0, includeIndependentColonies: false);
                        double num17 = (double)Galaxy.SectorSize * num7;
                        if (habitat5 != null)
                        {
                            double num18 = galaxy_0.CalculateDistance(double_6, double_7, habitat5.Xpos, habitat5.Ypos);
                            if (num18 < num17)
                            {
                                flag2 = true;
                            }
                        }
                        if (galaxy_0.Systems[habitat4].PlanetCount >= 3 && !flag2)
                        {
                            flag = true;
                        }
                    }
                    num6++;
                }
                if (!flag)
                {
                    double double_10 = galaxy_0.SelectRandomHeading();
                    double double_11 = method_52(galaxy_0, string_2);
                    method_92(galaxy_0, double_10, habitat_0.Xpos, habitat_0.Ypos, double_11, out double_6, out double_7);
                    while (!method_90(double_6, double_7))
                    {
                        double_10 = galaxy_0.SelectRandomHeading();
                        double_11 = method_52(galaxy_0, string_2);
                        method_92(galaxy_0, double_10, habitat_0.Xpos, habitat_0.Ypos, double_11, out double_6, out double_7);
                    }
                    List<HabitatType> list2 = new List<HabitatType>();
                    list2.Add(race_0.NativeHabitatType);
                    habitat = galaxy_0.FastFindNearestPlanetMoonOfTypesUnoccupiedSystem(double_6, double_7, null, list2);
                    if (habitat == null)
                    {
                        int index = Galaxy.Rnd.Next(0, galaxy_0.Systems.Count);
                        while (galaxy_0.Systems[index].SystemStar.Category != 0)
                        {
                            index = Galaxy.Rnd.Next(0, galaxy_0.Systems.Count);
                        }
                        Habitat systemStar2 = galaxy_0.Systems[index].SystemStar;
                        galaxy_0.SetColonizableHabitatsInSystem(galaxy_0, systemStar2, race_0, 1);
                        habitat = galaxy_0.FindNearestUncolonizedHabitat(galaxy_0.Systems[index].SystemStar.Xpos, galaxy_0.Systems[index].SystemStar.Ypos, race_0.NativeHabitatType);
                        if (habitat == null)
                        {
                            galaxy_0.SetColonizableHabitatsInSystem(galaxy_0, systemStar2, race_0, 3);
                            habitat = galaxy_0.FindNearestUncolonizedHabitat(systemStar2.Xpos, systemStar2.Ypos, race_0.NativeHabitatType);
                        }
                    }
                }
            }
            return habitat;
        }

        private double method_52(Galaxy galaxy_0, string string_2)
        {
            Sector sector_ = null;
            return method_53(galaxy_0, string_2, out sector_);
        }

        private double method_53(Galaxy galaxy_0, string string_2, out Sector sector_0)
        {
            sector_0 = null;
            string text = TextResolver.GetText("Sector");
            //double num = 0.0;
            double num2 = 0.05;
            double num3 = 1.0;
            if (string_2 == TextResolver.GetText("Random"))
            {
                num2 = 0.05;
                num3 = 1.0;
            }
            else if (string_2 == TextResolver.GetText("Same System"))
            {
                num2 = 0.0;
                num3 = (double)Galaxy.SizeX / 20000000.0 * 0.0024;
            }
            else if (string_2 == TextResolver.GetText("Nearby"))
            {
                num2 = 0.03;
                num3 = 0.11;
            }
            else if (string_2 == TextResolver.GetText("Average"))
            {
                num2 = 0.11;
                num3 = 0.4;
            }
            else if (string_2 == TextResolver.GetText("Distant"))
            {
                num2 = 0.4;
                num3 = 1.0;
            }
            else if (string_2 == TextResolver.GetText("Random - not too close"))
            {
                num2 = 0.1;
                num3 = 1.0;
            }
            else if (string_2.StartsWith(text))
            {
                string text2 = string_2.Substring(text.Length + 1, string_2.Length - (text.Length + 1));
                text2 = text2.Trim();
                if (text2.Length > 1)
                {
                    char c = text2[0];
                    int num4 = c - 65;
                    string s = text2.Substring(1, text2.Length - 1);
                    int result = 0;
                    if (int.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture, out result))
                    {
                        result--;
                        sector_0 = new Sector(num4, result);
                    }
                }
            }
            double num5 = (double)Galaxy.SizeX * (num3 - num2);
            double num6 = (double)Galaxy.SizeX * num2;
            return num6 + num5 * Galaxy.Rnd.NextDouble();
        }

        private double method_54(string string_2)
        {
            double result = 0.0;
            if (string_2 == "(" + TextResolver.GetText("Random") + ")")
            {
                Random random = new Random((int)DateTime.Now.Ticks);
                result = 1.0 + random.NextDouble() * 6.0;
            }
            else if (string_2 == TextResolver.GetText("PreWarp"))
            {
                result = 0.0;
            }
            else if (string_2 == TextResolver.GetText("Normal"))
            {
                result = 0.5;
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "1"))
            {
                result = 1.0;
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "2"))
            {
                result = 2.0;
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "3"))
            {
                result = 3.0;
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "4"))
            {
                result = 4.0;
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "5"))
            {
                result = 5.0;
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "6"))
            {
                result = 6.0;
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "7"))
            {
                result = 7.0;
            }
            return result;
        }

        private string method_55(double double_1)
        {
            string text = "(" + TextResolver.GetText("Random") + ")";
            if (double_1 < 0.0)
            {
                return "(" + TextResolver.GetText("Random") + ")";
            }
            if (double_1 == 0.0)
            {
                return TextResolver.GetText("PreWarp");
            }
            if (double_1 == 0.5)
            {
                return TextResolver.GetText("Starting");
            }
            if (double_1 > 0.5 && double_1 <= 1.0)
            {
                return string.Format(TextResolver.GetText("Level X"), "1");
            }
            if (double_1 > 1.0 && double_1 <= 2.0)
            {
                return string.Format(TextResolver.GetText("Level X"), "2");
            }
            if (double_1 > 2.0 && double_1 <= 3.0)
            {
                return string.Format(TextResolver.GetText("Level X"), "3");
            }
            if (double_1 > 3.0 && double_1 <= 4.0)
            {
                return string.Format(TextResolver.GetText("Level X"), "4");
            }
            if (double_1 > 4.0 && double_1 <= 5.0)
            {
                return string.Format(TextResolver.GetText("Level X"), "5");
            }
            if (double_1 > 5.0 && double_1 <= 6.0)
            {
                return string.Format(TextResolver.GetText("Level X"), "6");
            }
            return string.Format(TextResolver.GetText("Level X"), "7");
        }

        private string method_56(string string_2, Random random_0)
        {
            string result = TextResolver.GetText("Starting");
            int num = 0;
            if (string_2 == TextResolver.GetText("PreWarp"))
            {
                num = 0;
            }
            else
            {
                num = 0;
                if (string_2 == TextResolver.GetText("Starting"))
                {
                    num = 1;
                    //int num2 = 1;
                    goto IL_00e8;
                }
                if (string_2 == TextResolver.GetText("Young"))
                {
                    num = random_0.Next(1, 3);
                }
                else if (string_2 == TextResolver.GetText("Expanding"))
                {
                    num = random_0.Next(1, 4);
                }
                else if (string_2 == TextResolver.GetText("Mature"))
                {
                    num = random_0.Next(1, 5);
                }
                else if (string_2 == TextResolver.GetText("Old"))
                {
                    num = random_0.Next(1, 6);
                }
                switch (num)
                {
                    case 0:
                        break;
                    case 1:
                        goto IL_00e8;
                    case 2:
                        result = TextResolver.GetText("Young");
                        goto IL_0127;
                    case 3:
                        result = TextResolver.GetText("Expanding");
                        goto IL_0127;
                    case 4:
                        result = TextResolver.GetText("Mature");
                        goto IL_0127;
                    case 5:
                        result = TextResolver.GetText("Old");
                        goto IL_0127;
                    default:
                        goto IL_0127;
                }
            }
            result = TextResolver.GetText("PreWarp");
            goto IL_0127;
        IL_00e8:
            result = TextResolver.GetText("Starting");
            goto IL_0127;
        IL_0127:
            return result;
        }

        private int method_57(string string_2)
        {
            int result = 0;
            if (string_2 == "(" + TextResolver.GetText("Random") + ")")
            {
                Random random = new Random((int)DateTime.Now.Ticks);
                int num = random.Next(1, 6);
                result = num;
            }
            else if (string_2 == TextResolver.GetText("PreWarp"))
            {
                result = 0;
            }
            else if (string_2 == TextResolver.GetText("Starting"))
            {
                result = 1;
            }
            else if (string_2 == TextResolver.GetText("Young"))
            {
                result = 2;
            }
            else if (string_2 == TextResolver.GetText("Expanding"))
            {
                result = 3;
            }
            else if (string_2 == TextResolver.GetText("Mature"))
            {
                result = 4;
            }
            else if (string_2 == TextResolver.GetText("Old"))
            {
                result = 5;
            }
            else if (string_2 == TextResolver.GetText("Supersize"))
            {
                result = 6;
            }
            return result;
        }

        private string method_58(int int_1)
        {
            string result = string.Empty;
            switch (int_1)
            {
                case -1:
                    result = "(" + TextResolver.GetText("Random") + ")";
                    break;
                case 0:
                    result = TextResolver.GetText("PreWarp");
                    break;
                case 1:
                    result = TextResolver.GetText("Starting");
                    break;
                case 2:
                    result = TextResolver.GetText("Young");
                    break;
                case 3:
                    result = TextResolver.GetText("Expanding");
                    break;
                case 4:
                    result = TextResolver.GetText("Mature");
                    break;
                case 5:
                    result = TextResolver.GetText("Old");
                    break;
                case 6:
                    result = TextResolver.GetText("Supersize");
                    break;
            }
            return result;
        }

        private GalaxyShape method_59(string string_2)
        {
            GalaxyShape result = GalaxyShape.Elliptical;
            if (string_2 == TextResolver.GetText("Elliptical"))
            {
                result = GalaxyShape.Elliptical;
            }
            else if (string_2 == TextResolver.GetText("Spiral"))
            {
                result = GalaxyShape.Spiral;
            }
            else if (string_2 == TextResolver.GetText("Ring"))
            {
                result = GalaxyShape.Ring;
            }
            else if (string_2 == TextResolver.GetText("Irregular"))
            {
                result = GalaxyShape.Irregular;
            }
            else if (string_2 == TextResolver.GetText("Even Clusters"))
            {
                result = GalaxyShape.ClustersEven;
            }
            else if (string_2 == TextResolver.GetText("Varied Clusters"))
            {
                result = GalaxyShape.ClustersVaried;
            }
            return result;
        }

        private int method_60(int int_1)
        {
            return BaconStart.method_60(int_1);
        }

        private int method_61(int int_1, RaceList raceList_2)
        {
            return BaconStart.method_61(int_1, raceList_2);
        }

        private double method_62(int int_1)
        {
            double result = 0.0;
            switch (int_1)
            {
                case 0:
                    result = 0.0;
                    break;
                case 1:
                    result = 0.3;
                    break;
                case 2:
                    result = 0.6;
                    break;
                case 3:
                    result = 1.0;
                    break;
            }
            return result;
        }

        private double method_63(int int_1)
        {
            double result = 1.1;
            switch (int_1)
            {
                case 0:
                    result = 0.9;
                    break;
                case 1:
                    result = 1.1;
                    break;
                case 2:
                    result = 1.3;
                    break;
                case 3:
                    result = 1.5;
                    break;
            }
            return result;
        }

        private double method_64(int int_1)
        {
            double result = 0.75;
            switch (int_1)
            {
                case 0:
                    result = 0.35;
                    break;
                case 1:
                    result = 0.5;
                    break;
                case 2:
                    result = 0.65;
                    break;
                case 3:
                    result = 0.82;
                    break;
                case 4:
                    result = 1.0;
                    break;
            }
            return result;
        }

        private double method_65(int int_1)
        {
            double result = 1.0;
            switch (int_1)
            {
                case 0:
                    result = 0.7;
                    break;
                case 1:
                    result = 0.85;
                    break;
                case 2:
                    result = 1.0;
                    break;
                case 3:
                    result = 1.15;
                    break;
                case 4:
                    result = 1.3;
                    break;
            }
            return result;
        }

        private double method_66(int int_1)
        {
            double result = 0.0;
            switch (int_1)
            {
                case 0:
                    result = 0.0;
                    break;
                case 1:
                    result = 0.07;
                    break;
                case 2:
                    result = 0.2;
                    break;
                case 3:
                    result = 0.4;
                    break;
                case 4:
                    result = 0.7;
                    break;
                case 5:
                    result = 1.0;
                    break;
            }
            return result;
        }

        private int method_67(int int_1)
        {
            return BaconStart.OverrideLowIndependentLifeValue(int_1);
        }

        private double method_68(int int_1)
        {
            double result = 0.0;
            switch (int_1)
            {
                case 0:
                    result = 0.167;
                    break;
                case 1:
                    result = 0.3;
                    break;
                case 2:
                    result = 0.5;
                    break;
                case 3:
                    result = 0.875;
                    break;
                case 4:
                    result = 1.5;
                    break;
            }
            return result;
        }

        private Size method_69(int int_1)
        {
            Size result = new Size(10, 10);
            switch (int_1)
            {
                case 0:
                    result = new Size(4, 4);
                    break;
                case 1:
                    result = new Size(6, 6);
                    break;
                case 2:
                    result = new Size(8, 8);
                    break;
                case 3:
                    result = new Size(10, 10);
                    break;
                case 4:
                    result = new Size(15, 15);
                    break;
            }
            return result;
        }

        private double method_70(int int_1)
        {
            double result = 0.0;
            switch (int_1)
            {
                case 0:
                    result = 0.7;
                    break;
                case 1:
                    result = 0.9;
                    break;
                case 2:
                    result = 1.1;
                    break;
                case 3:
                    result = 1.4;
                    break;
                case 4:
                    result = 1.7;
                    break;
            }
            return result;
        }

        private double method_71(int int_1)
        {
            double result = 0.0;
            switch (int_1)
            {
                case 0:
                    result = 0.9;
                    break;
                case 1:
                    result = 1.1;
                    break;
                case 2:
                    result = 1.3;
                    break;
                case 3:
                    result = 1.5;
                    break;
                case 4:
                    result = 1.7;
                    break;
            }
            return result;
        }

        private string method_72()
        {
            string result = "(" + TextResolver.GetText("Random") + ")";
            int selectedGovernmentId = cmbStartNewGameYourEmpireGovernment.SelectedGovernmentId;
            if (selectedGovernmentId >= 0 && selectedGovernmentId < Galaxy.GovernmentsStatic.Count)
            {
                GovernmentAttributes governmentAttributes = Galaxy.GovernmentsStatic[selectedGovernmentId];
                if (governmentAttributes != null)
                {
                    result = governmentAttributes.Name;
                }
            }
            return result;
        }

        private string method_73()
        {
            string result = "(" + TextResolver.GetText("Random") + ")";
            int selectedGovernmentId = cmbJumpStartYourEmpireGovernment.SelectedGovernmentId;
            if (selectedGovernmentId >= 0 && selectedGovernmentId < Galaxy.GovernmentsStatic.Count)
            {
                GovernmentAttributes governmentAttributes = Galaxy.GovernmentsStatic[selectedGovernmentId];
                if (governmentAttributes != null)
                {
                    result = governmentAttributes.Name;
                }
            }
            return result;
        }

        private string ahrJhtHrDu()
        {
            string result = TextResolver.GetText("Normal");
            switch (tbarStartNewGameYourEmpireHomeSystem.Value)
            {
                case 0:
                    result = TextResolver.GetText("Harsh");
                    break;
                case 1:
                    result = TextResolver.GetText("Trying");
                    break;
                case 2:
                    result = TextResolver.GetText("Normal");
                    break;
                case 3:
                    result = TextResolver.GetText("Agreeable");
                    break;
                case 4:
                    result = TextResolver.GetText("Excellent");
                    break;
            }
            return result;
        }

        private string method_74()
        {
            string result = "(" + TextResolver.GetText("Random") + ")";
            switch (tbarStartNewGameYourEmpireSize.Value)
            {
                case 0:
                    result = "(" + TextResolver.GetText("Random") + ")";
                    break;
                case 1:
                    result = TextResolver.GetText("Starting");
                    break;
                case 2:
                    result = TextResolver.GetText("Young");
                    break;
                case 3:
                    result = TextResolver.GetText("Expanding");
                    break;
                case 4:
                    result = TextResolver.GetText("Mature");
                    break;
                case 5:
                    result = TextResolver.GetText("Old");
                    break;
            }
            return result;
        }

        private string method_75()
        {
            string result = TextResolver.GetText("Normal");
            switch (tbarStartNewGameYourEmpireTechLevel.Value)
            {
                case 0:
                    result = TextResolver.GetText("PreWarp");
                    break;
                case 1:
                    result = TextResolver.GetText("Normal");
                    break;
                case 2:
                    result = string.Format(TextResolver.GetText("Level X"), "1");
                    break;
                case 3:
                    result = string.Format(TextResolver.GetText("Level X"), "2");
                    break;
                case 4:
                    result = string.Format(TextResolver.GetText("Level X"), "3");
                    break;
                case 5:
                    result = string.Format(TextResolver.GetText("Level X"), "4");
                    break;
                case 6:
                    result = string.Format(TextResolver.GetText("Level X"), "5");
                    break;
                case 7:
                    result = string.Format(TextResolver.GetText("Level X"), "6");
                    break;
                case 8:
                    result = string.Format(TextResolver.GetText("Level X"), "7");
                    break;
            }
            return result;
        }

        private void method_76(Galaxy galaxy_0, Empire empire_0)
        {
            DateTime currentDateTime = galaxy_0.CurrentDateTime;
            long currentStarDate = galaxy_0.CurrentStarDate;
            for (int i = 0; i < empire_0.Colonies.Count; i++)
            {
                empire_0.Colonies[i].DoTasks(currentDateTime);
            }
            for (int j = 0; j < empire_0.BuiltObjects.Count; j++)
            {
                empire_0.BuiltObjects[j].DoTasks(currentDateTime, currentStarDate);
            }
            for (int k = 0; k < empire_0.PrivateBuiltObjects.Count; k++)
            {
                empire_0.PrivateBuiltObjects[k].DoTasks(currentDateTime, currentStarDate);
            }
        }

        private void method_77(Game game_1)
        {
            method_76(game_1.Galaxy, game_1.PlayerEmpire);
            main_0.Ignite(game_1, string.Empty);
            main_0.method_56(Application.StartupPath + "\\images\\", game_1.CustomizationSetName, game_1.PlayerEmpire.DominantRace);
            Cursor.Current = Cursors.Default;
            method_9();
            method_46();
            method_25();
            main_0.Location = base.Location;
            main_0.Visible = true;
            main_0.ProcessMain(game_1.Galaxy.CurrentDateTime, game_1.Galaxy.CurrentStarDate, null);
            main_0.mainView.Refresh();
            base.Enabled = true;
            Hide();
            if (!main_0.bool_7)
            {
                main_0.bool_8 = true;
            }
            main_0.Launch(launchFromLoad: false);
            Galaxy.SetResearchRaceSpecialProjects(raceList_1);
            Galaxy.SetResearchComponentMaxTechPoints(game_1.Galaxy.BaseTechCost);
            method_3(main_0.string_3);
            method_1(main_0.string_3);
            base.Location = main_0.Location;
            Show();
            main_0.Visible = false;
            game_0 = null;
        }

        private Galaxy method_78(Galaxy galaxy_0, ResourceSystem resourceSystem_1, int int_1, string string_2, string string_3, int int_2, double double_1, int int_3, double double_2, double double_3, int int_4, double double_4, double double_5, int int_5, double double_6, int int_6, bool bool_5, EmpireStartList empireStartList_0)
        {
            galaxy_0.ApplicationStartupPath = string_2;
            if (!string.IsNullOrEmpty(string_3))
            {
                galaxy_0.CustomizationSetPath = string_2 + "\\Customization\\" + string_3 + "\\";
            }
            galaxy_0.RandomSeed = int_2;
            galaxy_0.AssignGalaxyStaticDataToInstance();
            galaxy_0.ResourceSystem.Clear();
            galaxy_0.ResourceSystem.Initialize(resourceSystem_1);
            galaxy_0.DifficultyLevel = int_1;
            galaxy_0.Races = Galaxy.LoadRaces(string_2, string_3);
            galaxy_0.LoadAgentNames(string_2, string_3);
            Galaxy.SetRaceStartupCharacters(string_2, string_3, galaxy_0.Races);
            Galaxy.SetResearchCosts((int)double_1, Galaxy.ResearchNodeDefinitionsStatic);
            Galaxy.SetHyperDriveSpeeds(resourceSystem_1, double_5, (int)double_1, string_2, string_3);
            Galaxy.SetResearchRaceSpecialProjects(galaxy_0.Races);
            Galaxy.SetResearchComponentMaxTechPoints((int)double_1);
            galaxy_0.LifePrevalence = int_3;
            galaxy_0.CreaturePrevalence = double_2;
            galaxy_0.PiratePrevalence = double_3;
            galaxy_0.PirateProximity = int_4;
            galaxy_0.ColonyPrevalence = double_4;
            galaxy_0.ResearchSpeedModifier = 1.0;
            galaxy_0.BaseTechCost = (int)double_1;
            galaxy_0.HyperdriveSpeedMultiplier = double_5;
            galaxy_0.Age = int_5;
            galaxy_0.AggressionLevel = double_6;
            galaxy_0.MaximumEmpireAmount = int_6;
            galaxy_0.SpawnNewEmpires = bool_5;
            galaxy_0.LoadDesignNames(string_2, string_3);
            galaxy_0.RebuildIndexes();
            empireStartList_0.Update(galaxy_0.Races);
            int aggressiveRacesRequired = 0;
            if (double_6 >= 1.5)
            {
                aggressiveRacesRequired = 3;
            }
            else if (double_6 >= 1.3)
            {
                aggressiveRacesRequired = 2;
            }
            else if (double_6 >= 1.1)
            {
                aggressiveRacesRequired = 1;
            }
            galaxy_0.SetupAlienRacePopulations(empireStartList_0, aggressiveRacesRequired);
            galaxy_0.LifePrevalenceMultiplier = 0.8 * (Math.Sqrt(1400.0) / Math.Sqrt(galaxy_0.StarCount));
            galaxy_0.UpdateSystemInfo(null);
            galaxy_0.Orders.EnableIndexing();
            galaxy_0.GameSummary = galaxy_0.DetermineGameSummary();
            return galaxy_0;
        }

        private Galaxy method_79(Galaxy galaxy_0)
        {
            for (int i = 0; i < galaxy_0.Habitats.Count; i++)
            {
                Habitat habitat = galaxy_0.Habitats[i];
                if (habitat != null)
                {
                    Habitat sun = Galaxy.DetermineHabitatSystemStar(habitat);
                    galaxy_0.SelectPopulation(habitat, sun);
                }
            }
            return galaxy_0;
        }

        private Galaxy method_80(Galaxy galaxy_0, bool bool_5, bool bool_6, bool bool_7, bool bool_8, bool bool_9)
        {
            Empire[] array = galaxy_0.Empires.ToArray();
            foreach (Empire empire in array)
            {
                if (empire == null || empire == galaxy_0.IndependentEmpire)
                {
                    continue;
                }
                if (empire.Colonies != null)
                {
                    Habitat[] array2 = empire.Colonies.ToArray();
                    foreach (Habitat habitat in array2)
                    {
                        if (habitat != null && habitat.Owner == empire)
                        {
                            habitat.ClearColony(null, sendMessages: false, removeEmpireWhenNoColonies: false);
                        }
                    }
                }
                empire.CompleteTeardown(null, removeFromGalaxy: true, sendMessages: false);
            }
            Empire[] array3 = galaxy_0.PirateEmpires.ToArray();
            foreach (Empire empire2 in array3)
            {
                if (empire2 == null || empire2 == galaxy_0.IndependentEmpire)
                {
                    continue;
                }
                if (empire2.Colonies != null)
                {
                    Habitat[] array4 = empire2.Colonies.ToArray();
                    foreach (Habitat habitat2 in array4)
                    {
                        if (habitat2 != null && habitat2.Owner == empire2)
                        {
                            habitat2.ClearColony(null, sendMessages: false, removeEmpireWhenNoColonies: false);
                        }
                    }
                }
                empire2.CompleteTeardown(null, removeFromGalaxy: true, sendMessages: false);
            }
            galaxy_0.DefeatedEmpires.Clear();
            galaxy_0.ResetNextEmpireId();
            if (galaxy_0.IndependentEmpire != null)
            {
                if (galaxy_0.IndependentEmpire.Colonies != null)
                {
                    Habitat[] array5 = galaxy_0.IndependentEmpire.Colonies.ToArray();
                    foreach (Habitat habitat3 in array5)
                    {
                        if (habitat3 != null && habitat3.Owner == galaxy_0.IndependentEmpire)
                        {
                            habitat3.ClearColony(null, sendMessages: false, removeEmpireWhenNoColonies: false);
                        }
                    }
                }
                galaxy_0.IndependentColonies.Clear();
                galaxy_0.ClearRaceUsed();
                galaxy_0.IndependentCount = 0;
                BuiltObjectList builtObjectList = new BuiltObjectList();
                builtObjectList.AddRange(galaxy_0.IndependentEmpire.BuiltObjects);
                builtObjectList.AddRange(galaxy_0.IndependentEmpire.PrivateBuiltObjects);
                for (int n = 0; n < builtObjectList.Count; n++)
                {
                    builtObjectList[n]?.CompleteTeardown(galaxy_0, removeFromEmpire: true);
                }
                galaxy_0.IndependentEmpire.Research = new ResearchSystem();
                galaxy_0.IndependentEmpire.Research.TechTree = Galaxy.ResearchNodeDefinitionsStatic.ObtainTechTree(galaxy_0.IndependentEmpire.DominantRace);
                galaxy_0.IndependentEmpire.Research.TechTree = Galaxy.ResearchNodeDefinitionsStatic.SetTechTreeStartingDefaults(galaxy_0.IndependentEmpire.Research.TechTree, galaxy_0.IndependentEmpire.DominantRace, galaxy_0.IndependentEmpire.Policy);
                galaxy_0.IndependentEmpire.Research.Update(galaxy_0.IndependentEmpire.DominantRace);
                galaxy_0.IndependentEmpire.ReviewResearchAbilities();
                galaxy_0.IndependentEmpire.ReviewDesignsBuiltObjectsImprovedComponents();
                galaxy_0.IndependentEmpire.ReviewColonizationTypes();
                galaxy_0.IndependentEmpire.ReviewPopulationGrowthRates();
                int newSize = 0;
                galaxy_0.IndependentEmpire.ReviewMaximumConstructionSize(out newSize);
                galaxy_0.IndependentEmpire.ReviewCanBuildShipTypes();
                galaxy_0.IndependentEmpire.ReviewTroopTypes();
            }
            if (bool_5)
            {
                for (int num = 0; num < galaxy_0.Habitats.Count; num++)
                {
                    Habitat habitat4 = galaxy_0.Habitats[num];
                    if (habitat4 != null)
                    {
                        if (habitat4.Resources != null)
                        {
                            habitat4.Resources.Clear();
                        }
                        galaxy_0.SelectResources(habitat4);
                    }
                }
            }
            if (bool_6)
            {
                for (int num2 = 0; num2 < galaxy_0.Habitats.Count; num2++)
                {
                    Habitat habitat5 = galaxy_0.Habitats[num2];
                    if (habitat5 != null)
                    {
                        habitat5.ScenicFactor = 0f;
                        habitat5.ScenicFeature = string.Empty;
                        habitat5.ResearchBonus = 0;
                        habitat5.ResearchBonusIndustry = IndustryType.Undefined;
                        galaxy_0.SetScenicFactor(habitat5);
                        galaxy_0.SetResearchBonus(habitat5);
                    }
                }
            }
            if (bool_7)
            {
                for (int num3 = 0; num3 < galaxy_0.Creatures.Count; num3++)
                {
                    galaxy_0.Creatures[num3]?.CompleteTeardown();
                }
                for (int num4 = 0; num4 < galaxy_0.Habitats.Count; num4++)
                {
                    Habitat habitat6 = galaxy_0.Habitats[num4];
                    if (habitat6 != null)
                    {
                        galaxy_0.SelectCreatures(habitat6);
                    }
                }
                for (int num5 = 0; num5 < galaxy_0.Creatures.Count; num5++)
                {
                    Creature creature = galaxy_0.Creatures[num5];
                    if (creature != null && creature.ParentHabitat != null && !galaxy_0.Systems[creature.ParentHabitat.SystemIndex].Creatures.Contains(creature))
                    {
                        galaxy_0.Systems[creature.ParentHabitat.SystemIndex].Creatures.Add(creature);
                    }
                }
            }
            if (bool_8)
            {
                for (int num6 = 0; num6 < galaxy_0.RuinsHabitats.Count; num6++)
                {
                    Habitat habitat7 = galaxy_0.RuinsHabitats[num6];
                    if (habitat7 != null && habitat7.Ruin != null)
                    {
                        habitat7.Ruin = null;
                    }
                }
                galaxy_0.RuinsHabitats.Clear();
                galaxy_0.RuinCount = 0;
            }
            GalaxyLocationList galaxyLocationList = galaxy_0.GalaxyLocations.FindLocations(GalaxyLocationType.RaceRegion);
            for (int num7 = 0; num7 < galaxyLocationList.Count; num7++)
            {
                GalaxyLocation galaxyLocation = galaxyLocationList[num7];
                if (galaxyLocation != null)
                {
                    galaxy_0.GalaxyLocations.Remove(galaxyLocation);
                }
            }
            if (bool_9)
            {
                if (galaxy_0.StoryClueLocations != null && galaxy_0.StoryClueLocations.Count == 5)
                {
                    if (galaxy_0.StoryClueLocations[0] is Habitat)
                    {
                        Habitat habitat8 = (Habitat)galaxy_0.StoryClueLocations[0];
                        if (habitat8.Ruin != null)
                        {
                            habitat8.Ruin = null;
                            galaxy_0.RuinsHabitats.Remove(habitat8);
                            galaxy_0.RuinCount--;
                        }
                    }
                    if (galaxy_0.StoryClueLocations[1] is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)galaxy_0.StoryClueLocations[1];
                        builtObject.CompleteTeardown(galaxy_0, removeFromEmpire: true);
                    }
                    if (galaxy_0.StoryClueLocations[2] is BuiltObject)
                    {
                        BuiltObject builtObject2 = (BuiltObject)galaxy_0.StoryClueLocations[2];
                        builtObject2.CompleteTeardown(galaxy_0, removeFromEmpire: true);
                    }
                    if (galaxy_0.StoryClueLocations[3] is BuiltObject)
                    {
                        BuiltObject builtObject3 = (BuiltObject)galaxy_0.StoryClueLocations[3];
                        builtObject3.CompleteTeardown(galaxy_0, removeFromEmpire: true);
                    }
                    if (galaxy_0.StoryClueLocations[4] is BuiltObject)
                    {
                        BuiltObject builtObject4 = (BuiltObject)galaxy_0.StoryClueLocations[4];
                        builtObject4.CompleteTeardown(galaxy_0, removeFromEmpire: true);
                    }
                    galaxy_0.StoryClueLocations.Clear();
                    galaxy_0.StoryClueUsed.Clear();
                    galaxy_0.StorySecondaryClueUsed.Clear();
                }
                GalaxyLocationList galaxyLocationList2 = new GalaxyLocationList();
                for (int num8 = 0; num8 < galaxy_0.GalaxyLocations.Count; num8++)
                {
                    GalaxyLocation galaxyLocation2 = galaxy_0.GalaxyLocations[num8];
                    if (galaxyLocation2 == null)
                    {
                        continue;
                    }
                    GalaxyLocationType type = galaxyLocation2.Type;
                    if (type != GalaxyLocationType.DebrisField && type != GalaxyLocationType.PlanetDestroyer && type != GalaxyLocationType.RestrictedArea)
                    {
                        continue;
                    }
                    if (galaxyLocation2.RelatedBuiltObject != null)
                    {
                        galaxyLocation2.RelatedBuiltObject.CompleteTeardown(galaxy_0, removeFromEmpire: true);
                    }
                    if (galaxyLocation2.RelatedCreatures != null)
                    {
                        Creature[] array6 = galaxyLocation2.RelatedCreatures.ToArray();
                        for (int num9 = 0; num9 < array6.Length; num9++)
                        {
                            array6[num9].CompleteTeardown();
                        }
                    }
                    galaxyLocation2.RelatedRace = null;
                    galaxyLocationList2.Add(galaxyLocation2);
                }
                for (int num10 = 0; num10 < galaxyLocationList2.Count; num10++)
                {
                    galaxy_0.GalaxyLocations.Remove(galaxyLocationList2[num10]);
                }
            }
            galaxy_0.RebuildGalaxyLocationIndexes();
            return galaxy_0;
        }

        private Game method_81(string string_2, bool bool_5)
        {
            Game result = null;
            try
            {
                if (File.Exists(string_2))
                {
                    List<object> list = new List<object>();
                    using (FileStream stream_ = new FileStream(string_2, FileMode.Open, FileAccess.Read))
                    {
                        list = LoadFromFile(string_2, stream_, bool_5);
                    }
                    if (list != null)
                    {
                        List<object> list2 = list;
                        if (list2[0] is string)
                        {
                            _ = (string)list2[0];
                        }
                        if (list2[1] is Game)
                        {
                            result = (Game)list2[1];
                            return result;
                        }
                        return result;
                    }
                    return result;
                }
                return result;
            }
            catch (SerializationException)
            {
                string text = TextResolver.GetText("This is not a valid Distant Worlds game file");
                MessageBox.Show(text, TextResolver.GetText("Cannot load file"), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                bool_0 = true;
                method_12();
                return result;
            }
            catch (OutOfMemoryException)
            {
                string text2 = "There was not enough memory to load this Distant Worlds game. Please close all other open applications and try again.";
                text2 = text2 + "\n\nWorking Set: " + Environment.WorkingSet + " bytes";
                MessageBox.Show(text2, "Cannot load file", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                bool_0 = true;
                method_12();
                return result;
            }
            catch (Exception ex3)
            {
                string text3 = "Distant Worlds could not load this game.";
                text3 += "\n\nError:\n\n";
                text3 += ex3.ToString();
                text3 = text3 + "\n\nWorking Set: " + Environment.WorkingSet + " bytes";
                MessageBox.Show(text3, "Cannot load file", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                bool_0 = true;
                method_12();
                return result;
            }
        }

        private Game CreateGameFromSettings(GalaxyShape galaxyShape_0, int int_1, int int_2, bool bool_5, double double_1, int int_3, double double_2, double double_3, int int_4, double double_4, double double_5, int int_5, double double_6, EmpireStart empireStart_0, EmpireStartList empireStartList_0, VictoryConditions victoryConditions_0, EmpireVictoryConditions empireVictoryConditions_0, EmpireVictoryConditions empireVictoryConditions_1, bool bool_6, bool bool_7, GameStartResets gameStartResets_0)
        {
            try
            {
                long startStarDate = Galaxy.StartStarDate;
                startStarDate += int_5 * 30000000;
                int num = (int)DateTime.Now.Ticks;
                string empty = string.Empty;
                empty = main_0.string_3;
                List<Bitmap> list = new List<Bitmap>();
                list = ((!bool_2) ? Galaxy.FlagShapes : Galaxy.FlagShapesPirates);
                RaceList raceList = Galaxy.LoadRaces(Application.StartupPath, empty);
                raceList = raceList.ResolveNormalEmpireRaces();
                EmpireStartList empireStartList = new EmpireStartList();
                empireStartList.Add(empireStart_0);
                empireStartList.AddRange(empireStartList_0);
                empireStartList.Update(raceList);
                double difficultyLevel = empireStart_0.DifficultyLevel;
                Galaxy galaxy = null;
                bool flag = false;
                if (gameStartResets_0 != null && !string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath))
                {
                    bool bool_8 = true;
                    if (gameStartResets_0.ResetResources)
                    {
                        bool_8 = false;
                    }
                    Game game = method_81(gameStartResets_0.GalaxyFilepath, bool_8);
                    if (game == null || game.Galaxy == null)
                    {
                        return null;
                    }
                    galaxy = game.Galaxy;
                    Galaxy.SetGalaxyPhysicalDimensions(galaxy.SectorWidth, galaxy.SectorHeight);
                    galaxy = method_78(galaxy, resourceSystem_0, (int)difficultyLevel, Application.StartupPath, empty, num, double_4, int_3, double_2, double_3, int_4, double_1, double_5, int_5, double_6, int_2, bool_5, empireStartList);
                    galaxy = method_80(galaxy, gameStartResets_0.ResetResources, gameStartResets_0.ResetSceneryResearch, gameStartResets_0.ResetCreatures, gameStartResets_0.ResetRuins, gameStartResets_0.ResetSpecialLocationsAndAbandonedShips);
                    galaxy = method_79(galaxy);
                    galaxy.DelayedActions.Clear();
                    galaxy.GameEvents.ClearAndResetIdsToZero();
                    flag = true;
                }
                if (!flag)
                {
                    Galaxy.SetGalaxyPhysicalDimensions(empireStart_0.GalaxySectorX, empireStart_0.GalaxySectorY);
                    Galaxy.SetResearchCosts((int)double_4, Galaxy.ResearchNodeDefinitionsStatic);
                    Galaxy.SetHyperDriveSpeeds(resourceSystem_0, double_5, (int)double_4, Application.StartupPath, empty);
                    Galaxy.SetResearchRaceSpecialProjects(raceList_1);
                    Galaxy.SetResearchComponentMaxTechPoints((int)double_4);
                    galaxy = new Galaxy(num, galaxyShape_0, int_1, double_1, int_3, double_2, double_3, int_4, startStarDate, double_4, double_5, int_5, double_6, int_2, bool_5, empireStartList, Application.StartupPath, empty, main_0.bitmap_176, main_0.bitmap_205, difficultyLevel, empireStart_0.GalaxySectorX, empireStart_0.GalaxySectorY, resourceSystem_0, empireStart_0.AllowGiantKaltorGeneration);
                }
                galaxy.DifficultyLevelScalesAsPlayerApproachesVictory = empireStart_0.DifficultyScaling;
                galaxy.DestroyedPiratesDoNotRespawn = empireStart_0.DestroyedPiratesDoNotRespawn;
                galaxy.PirateShipMaintenanceFactor = empireStart_0.PirateShipMaintenanceFactor;
                galaxy.AllowTechTrading = empireStart_0.AllowTechTrading;
                galaxy.AllowRaceStartingCharacters = false;
                galaxy.StoryReturnOfTheShakturiEnabled = victoryConditions_0.EnableStoryEvents;
                galaxy.StoryDistantWorldsEnabled = bool_7;
                galaxy.GameDisasterEventsEnabled = victoryConditions_0.EnableDisasterEvents;
                galaxy.GameRaceSpecificEventsEnabled = victoryConditions_0.EnableRaceSpecificEvents;
                galaxy.GameRaceSpecificVictoryConditionsEnabled = victoryConditions_0.EnableRaceSpecificVictoryConditions;
                galaxy.StoryShadowsEnabled = victoryConditions_0.EnableStoryEventsShadows;
                galaxy.EmpireTerritoryColonyInfluenceRangeFactor = empireStart_0.EmpireTerritoryColonyInfluenceRangeFactor;
                galaxy.ColonizationRangeEnforceLimit = empireStart_0.ColonizationRangeEnforceLimit;
                galaxy.ColonizationRange = empireStart_0.ColonizationRange;
                galaxy.SubRoleNameSet = main_0.subRoleNameSet_0;
                galaxy.ColonyNames = main_0.list_1;
                galaxy.ColonyNameIndex = 0;
                galaxy.PirateFlagLarge = bitmap_12;
                galaxy.PirateFlagSmall = bitmap_13;
                Empire empire = galaxy.IndependentEmpire;
                if (!flag)
                {
                    empire = new Empire(galaxy, TextResolver.GetText("Independent"), isIndependentEmpire: true, null, null, null);
                    empire.StateMoney = 8.9884656743115785E+307;
                    empire.PrivateMoney = 8.9884656743115785E+307;
                    Bitmap bitmap = new Bitmap(100, 60, PixelFormat.Format32bppPArgb);
                    Graphics graphics = Graphics.FromImage(bitmap);
                    SolidBrush brush = new SolidBrush(Color.Transparent);
                    graphics.FillRectangle(brush, 0, 0, 100, 60);
                    empire.LargeFlagPicture = bitmap;
                    Bitmap bitmap2 = new Bitmap(12, 7, PixelFormat.Format32bppPArgb);
                    graphics = Graphics.FromImage(bitmap2);
                    brush = new SolidBrush(Color.Transparent);
                    graphics.FillRectangle(brush, 0, 0, 12, 7);
                    empire.SmallFlagPicture = bitmap2;
                    galaxy.IndependentEmpire = empire;
                }
                else if (empire.Research != null)
                {
                    empire.Research.Update(empire.DominantRace);
                }
                empire.GenerateDesignSpecifications(galaxy, null, isPirate: false, string.Empty);
                galaxy.SetNativeResourceCargoAndStartingStrategicCargoForAllIndependentHabitats();
                galaxy.SetEmpireForAllIndependentHabitats();
                galaxy.ReviewIndependentColonies();
                Race race = null;
                race = ((empireStart_0.RaceIndex < 0) ? method_48(galaxy, empireStart_0.Race, null, bool_2) : galaxy.Races[empireStart_0.RaceIndex]);
                int num2 = Galaxy.ResolveGovernmentId(empireStart_0.GovernmentStyle, race);
                GovernmentAttributes governmentAttributes = galaxy.Governments[num2];
                if (governmentAttributes.SpecialFunctionCode == 1 && empireStart_0.GovernmentStyle == "(" + TextResolver.GetText("Random") + ")" && race.PreferredStartingGovernmentId != num2)
                {
                    int num3 = 0;
                    while (governmentAttributes.SpecialFunctionCode == 1 && num3 < 10)
                    {
                        num2 = Galaxy.ResolveGovernmentId(empireStart_0.GovernmentStyle, race);
                        governmentAttributes = galaxy.Governments[num2];
                        num3++;
                    }
                }
                double homeSystemFactor = 0.0;
                HabitatType capitalHabitatType = HabitatType.Undefined;
                double expansion = 0.0;
                int designPictureFamilyIndex = race.DesignPictureFamilyIndex;
                if (empireStart_0.DesignPictureFamilyIndex >= 0)
                {
                    designPictureFamilyIndex = empireStart_0.DesignPictureFamilyIndex;
                }
                Empire empire2 = null;
                Habitat habitat = null;
                double xpos;
                double ypos;
                if (bool_2)
                {
                    Habitat habitat2 = null;
                    double double_7 = 0.0;
                    double double_8 = 0.0;
                    int num4 = 0;
                    double num5 = 0.0;
                    double num6 = 0.0;
                    byte resourceID = galaxy.ResourceSystem.FuelResources[0].ResourceID;
                    while (habitat2 == null)
                    {
                        switch (galaxyShape_0)
                        {
                            case GalaxyShape.Spiral:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_83(galaxy, race, 0.0, 1.0, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Deep Core"))
                                {
                                    method_93(galaxy, 0.0, 0.29, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Outer Core"))
                                {
                                    method_93(galaxy, 0.29, 0.48, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Far Regions"))
                                {
                                    method_93(galaxy, 0.48, 1.0, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                break;
                            case GalaxyShape.Elliptical:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_83(galaxy, race, 0.0, 1.0, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Deep Core"))
                                {
                                    method_93(galaxy, 0.0, 0.29, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Outer Core"))
                                {
                                    method_93(galaxy, 0.29, 0.48, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Inner Rim"))
                                {
                                    method_93(galaxy, 0.48, 0.86, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Outer Rim"))
                                {
                                    method_93(galaxy, 0.86, 1.0, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                break;
                            case GalaxyShape.Ring:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_83(galaxy, race, 0.0, 1.0, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Core"))
                                {
                                    method_93(galaxy, 0.0, 0.29, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Void"))
                                {
                                    method_93(galaxy, 0.29, 0.82, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Rim"))
                                {
                                    method_93(galaxy, 0.82, 1.0, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                break;
                            case GalaxyShape.Irregular:
                            case GalaxyShape.ClustersEven:
                            case GalaxyShape.ClustersVaried:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_83(galaxy, race, 0.0, 1.44, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Center"))
                                {
                                    method_93(galaxy, 0.0, 0.42, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Edge"))
                                {
                                    method_93(galaxy, 0.42, 1.44, out double_7, out double_8);
                                    habitat2 = galaxy.FindNearestHabitatWithResource(double_7 + num5, double_8 + num6, resourceID);
                                }
                                break;
                        }
                        GalaxyLocationList galaxyLocationList = galaxy.DetermineGalaxyLocationsAtPoint(habitat2.Xpos, habitat2.Ypos, GalaxyLocationType.NebulaCloud);
                        if (galaxyLocationList != null && galaxyLocationList.Count > 0)
                        {
                            habitat2 = null;
                        }
                        if (habitat2 != null)
                        {
                            for (int i = 0; i < galaxy.IndependentColonies.Count; i++)
                            {
                                Habitat habitat3 = galaxy.IndependentColonies[i];
                                if (habitat3 != null && habitat3.SystemIndex == habitat2.SystemIndex)
                                {
                                    habitat2 = null;
                                    break;
                                }
                            }
                        }
                        if (habitat2 != null && !galaxy.CheckNearIndependentColony(habitat2.Xpos, habitat2.Ypos, 2000000.0))
                        {
                            habitat2 = null;
                        }
                        num4++;
                        if (num4 > 50)
                        {
                            num4 = 0;
                            double num7 = 3000000.0;
                            num5 = num7 - Galaxy.Rnd.NextDouble() * num7 * 2.0;
                            num6 = num7 - Galaxy.Rnd.NextDouble() * num7 * 2.0;
                        }
                    }
                    designPictureFamilyIndex = race.DesignPictureFamilyIndexPirates;
                    if (empireStart_0.DesignPictureFamilyIndex >= 0)
                    {
                        designPictureFamilyIndex = empireStart_0.DesignPictureFamilyIndex;
                    }
                    galaxy.AllowRaceStartingCharacters = true;
                    galaxy.SelectRelativeHabitatSurfacePoint(habitat2, out var num8, out var num9);
                    empire2 = galaxy.GeneratePirateEmpire(habitat2, (int)num8, (int)num9, race, designPictureFamilyIndex, empireStart_0.TechLevel, empireStart_0.PiratePlayStyle, isPlayerEmpire: true, isSuperPirates: false);
                    if (!string.IsNullOrEmpty(empireStart_0.Name))
                    {
                        empire2.Name = empireStart_0.Name;
                    }
                    empire2.PiratePlayStyle = empireStart_0.PiratePlayStyle;
                    habitat = habitat2;
                    xpos = habitat2.Xpos;
                    ypos = habitat2.Ypos;
                    galaxy.AllowRaceStartingCharacters = false;
                    Habitat habitat4 = galaxy.FastFindNearestIndependentHabitat(xpos, ypos);
                    if (habitat4 != null && !empire2.CheckSystemExplored(habitat4.SystemIndex))
                    {
                        Habitat systemStar = Galaxy.DetermineHabitatSystemStar(habitat4);
                        empire2.SetSystemVisibility(systemStar, SystemVisibilityStatus.Explored);
                        empire2.ResourceMap.SetResourcesKnown(galaxy.Systems[systemStar].SystemStar, known: true);
                        for (int j = 0; j < galaxy.Systems[systemStar].Habitats.Count; j++)
                        {
                            empire2.ResourceMap.SetResourcesKnown(galaxy.Systems[systemStar].Habitats[j], known: true);
                        }
                    }
                }
                else
                {
                    homeSystemFactor = 0.0;
                    capitalHabitatType = HabitatType.Undefined;
                    Galaxy.ResolveHomeSystem(empireStart_0.HomeSystemFavourability, out capitalHabitatType, out homeSystemFactor);
                    capitalHabitatType = race.NativeHabitatType;
                    double double_9 = 0.0;
                    double double_10 = 0.0;
                    int num10 = 0;
                    double num11 = 0.0;
                    double num12 = 0.0;
                    while (habitat == null)
                    {
                        switch (galaxyShape_0)
                        {
                            case GalaxyShape.Spiral:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_84(galaxy, race, 0.0, 1.0, out double_9, out double_10, bool_5: true, 0.5);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Deep Core"))
                                {
                                    method_93(galaxy, 0.0, 0.29, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Outer Core"))
                                {
                                    method_93(galaxy, 0.29, 0.48, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Far Regions"))
                                {
                                    method_93(galaxy, 0.48, 1.0, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                break;
                            case GalaxyShape.Elliptical:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_84(galaxy, race, 0.0, 1.0, out double_9, out double_10, bool_5: true, 0.5);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Deep Core"))
                                {
                                    method_93(galaxy, 0.0, 0.29, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Outer Core"))
                                {
                                    method_93(galaxy, 0.29, 0.48, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Inner Rim"))
                                {
                                    method_93(galaxy, 0.48, 0.86, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Outer Rim"))
                                {
                                    method_93(galaxy, 0.86, 1.0, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                break;
                            case GalaxyShape.Ring:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_84(galaxy, race, 0.0, 1.0, out double_9, out double_10, bool_5: true, 0.5);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Core"))
                                {
                                    method_93(galaxy, 0.0, 0.29, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Void"))
                                {
                                    method_93(galaxy, 0.29, 0.82, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Rim"))
                                {
                                    method_93(galaxy, 0.82, 1.0, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                break;
                            case GalaxyShape.Irregular:
                            case GalaxyShape.ClustersEven:
                            case GalaxyShape.ClustersVaried:
                                if (empireStart_0.StartLocation == "(" + TextResolver.GetText("Random") + ")")
                                {
                                    method_84(galaxy, race, 0.0, 1.44, out double_9, out double_10, bool_5: true, 0.5);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Center"))
                                {
                                    method_93(galaxy, 0.0, 0.42, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                else if (empireStart_0.StartLocation == TextResolver.GetText("Edge"))
                                {
                                    method_93(galaxy, 0.42, 1.44, out double_9, out double_10);
                                    habitat = galaxy.FindNearestUncolonizedHabitat(double_9 + num11, double_10 + num12, capitalHabitatType);
                                }
                                break;
                        }
                        GalaxyLocationList galaxyLocationList2 = galaxy.DetermineGalaxyLocationsAtPoint(habitat.Xpos, habitat.Ypos, GalaxyLocationType.NebulaCloud);
                        if (galaxyLocationList2 != null && galaxyLocationList2.Count > 0)
                        {
                            habitat = null;
                        }
                        num10++;
                        if (num10 > 50)
                        {
                            double num13 = 3000000.0;
                            if ((double)num10 > 1000.0)
                            {
                                num13 = 5000000.0;
                            }
                            num11 = num13 - Galaxy.Rnd.NextDouble() * num13 * 2.0;
                            num12 = num13 - Galaxy.Rnd.NextDouble() * num13 * 2.0;
                        }
                    }
                    expansion = 0.0;
                    designPictureFamilyIndex = race.DesignPictureFamilyIndex;
                    if (empireStart_0.DesignPictureFamilyIndex >= 0)
                    {
                        designPictureFamilyIndex = empireStart_0.DesignPictureFamilyIndex;
                    }
                    empire2 = galaxy.GenerateEmpire(galaxy, isPlayerEmpire: true, empireStart_0.Name, habitat, race, designPictureFamilyIndex, num2, homeSystemFactor, empireStart_0.HomeSystemFavourability, empireStart_0.Age, empireStart_0.TechLevel, empireStart_0.CorruptionMultiplier, out expansion, main_0.gameOptions_0, victoryConditions_0);
                    if (empireStart_0.Age == 0)
                    {
                        galaxy.ClearIndependentColoniesFromSystem(habitat.SystemIndex);
                    }
                    galaxy.PlayerEmpire = empire2;
                    galaxy.SetEmpireDifficultyFactors(empire2);
                    xpos = habitat.Xpos;
                    ypos = habitat.Ypos;
                }
                galaxy.PlayerEmpire = empire2;
                if (empireStart_0.FlagShape >= 0)
                {
                    Color primaryColor = empireStart_0.PrimaryColor;
                    Color secondaryColor = empireStart_0.SecondaryColor;
                    empire2.MainColor = primaryColor;
                    empire2.SecondaryColor = secondaryColor;
                    Bitmap smallFlagPicture = null;
                    Bitmap largeFlagPicture = null;
                    empire2.FlagShape = Galaxy.GenerateEmpireFlag(primaryColor, secondaryColor, empireStart_0.FlagShape, list, ref smallFlagPicture, ref largeFlagPicture);
                    empire2.SmallFlagPicture = smallFlagPicture;
                    empire2.LargeFlagPicture = largeFlagPicture;
                    Bitmap bitmap3 = (empire2.MediumFlagPicture = GraphicsHelper.ScaleImage(largeFlagPicture, 35, 21, 1f, lowQuality: false));
                    if (bool_2)
                    {
                        using Graphics graphics2 = Graphics.FromImage(largeFlagPicture);
                        GraphicsHelper.SetGraphicsQualityToHigh(graphics2);
                        graphics2.DrawImage(srcRect: new Rectangle(0, 0, galaxy.PirateFlagLarge.Width, galaxy.PirateFlagLarge.Height), destRect: new Rectangle(2, 2, 35, 22), image: galaxy.PirateFlagLarge, srcUnit: GraphicsUnit.Pixel);
                    }
                }
                galaxy.UpdateSystemInfo(empire2);
                int num14 = 0;
                DistantWorlds.Types.EmpireList empireList = new DistantWorlds.Types.EmpireList();
                List<HabitatList> list2 = new List<HabitatList>();
                List<double> list3 = new List<double>();
                List<int> list4 = new List<int>();
                List<int> list5 = new List<int>();
                List<int> list6 = new List<int>();
                EmpireStartList empireStartList2 = new EmpireStartList();
                if (!bool_2)
                {
                    empireList.Add(empire2);
                    list3.Add(expansion);
                    list6.Add(empireStart_0.Age);
                    empireStartList2.Add(empireStart_0);
                }
                num14 = empireStartList_0.Count;
                if (empire2 != null && empire2.DominantRace != null)
                {
                    empireStartList_0.Update(raceList, empire2.DominantRace.Name);
                }
                else
                {
                    empireStartList_0.Update(raceList);
                }
                empireStartList2.AddRange(empireStartList_0);
                int num15 = 0;
                object lockObject = default(object);
                Game game2;
                while (true)
                {
                    if (num15 >= num14)
                    {
                        int num16 = 0;
                        foreach (double item5 in list3)
                        {
                            double num17 = item5;
                            num16 += (int)num17;
                        }
                        int allowableMaximumStartingColonies = galaxy.AllowableMaximumStartingColonies;
                        if (num16 > allowableMaximumStartingColonies)
                        {
                            double num18 = (double)allowableMaximumStartingColonies / (double)num16;
                            for (int k = 0; k < list3.Count; k++)
                            {
                                list3[k] *= num18;
                            }
                        }
                        num16 = 0;
                        foreach (double item6 in list3)
                        {
                            double num19 = item6;
                            int num20 = Math.Max(0, (int)num19 - 1);
                            list4.Add(num20);
                            list5.Add(num20);
                            num16 += num20;
                        }
                        List<HabitatType> list7 = new List<HabitatType>();
                        list7.Add(HabitatType.BarrenRock);
                        list7.Add(HabitatType.Ice);
                        list7.Add(HabitatType.Volcanic);
                        list7.Add(HabitatType.Desert);
                        List<int> list8 = new List<int>();
                        int num21 = 0;
                        while (num21 < num16)
                        {
                            for (int l = 0; l < empireList.Count; l++)
                            {
                                if (list4[l] > 0)
                                {
                                    list8.Add(empireList[l].EmpireId);
                                    list4[l]--;
                                    num21++;
                                }
                            }
                        }
                        List<double> list9 = new List<double>();
                        List<HabitatList> list10 = new List<HabitatList>();
                        for (int m = 0; m < empireList.Count; m++)
                        {
                            galaxy.UpdateSystemInfo(empire2);
                            Habitat capital = empireList[m].Capital;
                            list2.Add(new HabitatList());
                            list2[m].Add(capital);
                            list10.Add(new HabitatList());
                            list10[m].Add(Galaxy.DetermineHabitatSystemStar(capital));
                            double num22 = 0.0;
                            if (num16 > 0)
                            {
                                num22 = (double)list5[m] / (double)num16;
                            }
                            Math.Min(1.0, (double)num16 / (double)allowableMaximumStartingColonies);
                            double item = 1400000000.0 / (double)galaxy.StarCount + num22 * 1.0 * (double)Galaxy.SizeX;
                            list9.Add(item);
                        }
                        galaxy.EmpireTerritory.ReviewEmpireTerritory(galaxy);
                        for (int n = 0; n < list8.Count; n++)
                        {
                            Empire byEmpireId = empireList.GetByEmpireId(list8[n]);
                            int num23 = byEmpireId.EmpireId - 1;
                            if (bool_2)
                            {
                                num23--;
                            }
                            double num24 = list9[num23];
                            galaxy.UpdateSystemInfo(empire2);
                            Habitat habitat5 = null;
                            habitat5 = ((!bool_6) ? galaxy.FindNearestColonizableHabitatUnoccupiedSystem(byEmpireId.Capital.Xpos, byEmpireId.Capital.Ypos, byEmpireId) : galaxy.FindNearestColonizableHabitat(byEmpireId.Capital.Xpos, byEmpireId.Capital.Ypos, byEmpireId));
                            double num25 = double.MaxValue;
                            if (habitat5 != null)
                            {
                                num25 = galaxy.CalculateDistance(byEmpireId.Capital.Xpos, byEmpireId.Capital.Ypos, habitat5.Xpos, habitat5.Ypos);
                            }
                            if (num25 > num24)
                            {
                                int num26 = 0;
                                while (num25 > num24)
                                {
                                    habitat5 = null;
                                    int num27 = 0;
                                    while (habitat5 == null)
                                    {
                                        method_91(galaxy, galaxy.SelectRandomHeading(), byEmpireId.Capital.Xpos, byEmpireId.Capital.Ypos, num24, out var double_11, out var double_12);
                                        habitat5 = galaxy.FastFindNearestPlanetMoonOfTypesUnoccupiedSystem(double_11, double_12, byEmpireId, list7);
                                        if (habitat5 != null)
                                        {
                                            if (habitat5.Category == HabitatCategoryType.Moon && habitat5.Parent.Type != HabitatType.GasGiant)
                                            {
                                                habitat5 = null;
                                            }
                                            else if (habitat5.Category == HabitatCategoryType.Planet && (habitat5.OrbitDistance < 4500 || habitat5.OrbitDistance > 11000))
                                            {
                                                habitat5 = null;
                                            }
                                        }
                                        num27++;
                                        if (num27 > 50)
                                        {
                                            num24 *= 1.2;
                                            num27 = 0;
                                        }
                                    }
                                    num25 = galaxy.CalculateDistance(byEmpireId.Capital.Xpos, byEmpireId.Capital.Ypos, habitat5.Xpos, habitat5.Ypos);
                                    num26++;
                                    if (num26 > 50)
                                    {
                                        num24 *= 1.2;
                                        num26 = 0;
                                    }
                                }
                                HabitatType type = HabitatType.Undefined;
                                int pictureRef = 0;
                                int landscapePictureRef = 0;
                                int diameter = 0;
                                int minOrbitDistance = 0;
                                int maxOrbitDistance = 0;
                                List<HabitatType> list11 = byEmpireId.ColonizableHabitatTypesForEmpire(byEmpireId);
                                list11.Add(byEmpireId.DominantRace.NativeHabitatType);
                                int index = Galaxy.Rnd.Next(0, list11.Count);
                                switch (list11[index])
                                {
                                    case HabitatType.Volcanic:
                                        galaxy.SelectVolcanicPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                                        break;
                                    case HabitatType.Desert:
                                        galaxy.SelectDesertPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                                        break;
                                    case HabitatType.MarshySwamp:
                                        galaxy.SelectMarshySwampPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                                        break;
                                    case HabitatType.Continental:
                                        galaxy.SelectContinentalPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                                        break;
                                    case HabitatType.Ocean:
                                        galaxy.SelectOceanPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                                        break;
                                    default:
                                        galaxy.SelectDesertPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                                        break;
                                    case HabitatType.Ice:
                                        galaxy.SelectIcePlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                                        break;
                                }
                                habitat5.Type = type;
                                habitat5.Diameter = (short)diameter;
                                habitat5.PictureRef = (short)pictureRef;
                                habitat5.LandscapePictureRef = (short)landscapePictureRef;
                                habitat5.BaseQuality = galaxy.SelectHabitatQuality(habitat5, (float)galaxy.ColonyPrevalence);
                                habitat5.Resources.Clear();
                                galaxy.SelectResources(habitat5);
                            }
                            if (habitat5 != null)
                            {
                                Habitat item2 = Galaxy.DetermineHabitatSystemStar(habitat5);
                                if (!list10[num23].Contains(item2))
                                {
                                    list10[num23].Add(item2);
                                    list2[num23].Add(habitat5);
                                    galaxy.MakeHabitatIntoColony(galaxy, habitat5, byEmpireId, list6[num23], byEmpireId.DominantRace, 1.0, hasSpacePort: false);
                                }
                                else
                                {
                                    galaxy.MakeHabitatIntoColony(galaxy, habitat5, byEmpireId, list6[num23], byEmpireId.DominantRace, 1.0, hasSpacePort: false);
                                }
                                if (galaxy.IndependentColonies.Contains(habitat5))
                                {
                                    galaxy.IndependentColonies.Remove(habitat5);
                                }
                                Rectangle galaxySection = new Rectangle((int)habitat5.Xpos - 1600000, (int)habitat5.Ypos - 1600000, 3200000, 3200000);
                                galaxy.EmpireTerritory.ReviewEmpireTerritoryUpdate(galaxy, galaxySection);
                            }
                        }
                        galaxy.ReviewEmpireTerritoryCore(false);
                        galaxy.UpdateSystemInfo(empire2);
                        for (int num28 = 0; num28 < 20; num28++)
                        {
                            galaxy.ReviewResourcePrices();
                            galaxy.ReviewComponentPrices();
                        }
                        galaxy.ResetLastTouchTimes();
                        galaxy.DoTasks(gameFinished: false, empire2, null, null, null);
                        galaxy.DeferEventsForGameStart = true;
                        for (int num29 = 0; num29 < empireList.Count; num29++)
                        {
                            Empire empire3 = empireList[num29];
                            empire3.RecalculateEmpirePopulation();
                            empire3.CheckColoniesForBaseFacilities();
                            empire3.RecalculateEmpireCorruption();
                            empire3.RecalculateColonyTaxRevenues();
                            if (int_5 > 0)
                            {
                                empire3.LastLongTouch = galaxy.CurrentDateTime.Subtract(new TimeSpan(0, 0, (int)empire3.LongProcessingInterval + 1));
                                empire3.LastIntermediateTouch = empire3.LastLongTouch;
                                empire3.LastPeriodicTouch = empire3.LastLongTouch;
                                empire3.LastRegularTouch = empire3.LastLongTouch;
                                empire3.LastShortTouch = empire3.LastLongTouch;
                                empire3.LastHugeTouch = empire3.LastLongTouch;
                            }
                            empire3.PreWarpProgressEventOccurredSendPirateRaid = true;
                            if (empireStartList2[num29].TechLevel > 0.0)
                            {
                                empire3.PreWarpProgressEventOccurredSendPirateRaid = true;
                                empire3.PreWarpProgressEventOccurredExperienceFirstPirateRaid = true;
                                empire3.PreWarpProgressEventOccurredFirstContactPirateOrIndependent = true;
                                empire3.PreWarpProgressEventOccurredFirstContactNormalEmpire = true;
                                empire3.PreWarpProgressEventOccurredBuildFirstShip = true;
                                empire3.PreWarpProgressEventOccurredBuildFirstSpaceport = true;
                                empire3.PreWarpProgressEventOccurredBuildFirstMiningStation = true;
                                empire3.PreWarpProgressEventOccurredBuildFirstResearchStation = true;
                                empire3.PreWarpProgressEventOccurredDiscoverHyperspaceTech = true;
                                empire3.PreWarpProgressEventOccurredDiscoverColonizationTech = true;
                                empire3.PreWarpProgressEventOccurredFirstHyperjump = true;
                                empire3.PreWarpProgressEventOccurredEncounterFirstKaltor = true;
                                empire3.PreWarpProgressEventOccurredBuildFirstMilitaryShip = true;
                            }
                            if (empireStartList2[num29].TechLevel > 0.0)
                            {
                                int newSpacePortAmount = 1 + (int)((double)empire3.Colonies.Count / 4.5);
                                HabitatList habitatList = empire3.DetermineNewSpacePortLocations(empire3.Colonies, newSpacePortAmount, excludeColoniesWithEnemiesPresent: false);
                                galaxy.CreateSpacePorts(galaxy, empire3, habitatList);
                                foreach (Habitat item7 in habitatList)
                                {
                                    galaxy.SetColonyResources(galaxy, item7, empire3, hasSpacePort: true);
                                }
                            }
                            empire3.CheckColoniesForBaseFacilities();
                            Habitat habitat6 = galaxy.FindNearestHabitatUnoccupiedSystem(empire3.Capital.Xpos, empire3.Capital.Ypos, HabitatType.GasGiant);
                            if (habitat6 != null && habitat6.ResearchBonus <= 0 && habitat6.ResearchBonusIndustry == IndustryType.Undefined)
                            {
                                IndustryType industryType = IndustryType.Undefined;
                                if (empire3.Policy != null)
                                {
                                    industryType = empire3.Policy.ResearchIndustryFocus;
                                }
                                if (industryType == IndustryType.Undefined)
                                {
                                    industryType = (IndustryType)Galaxy.Rnd.Next(1, 4);
                                }
                                habitat6.ResearchBonusIndustry = industryType;
                                habitat6.ResearchBonus = (byte)Galaxy.Rnd.Next(10, 31);
                                galaxy.Systems[habitat6.SystemIndex].HasResearchBonus = true;
                            }
                            if (empireStartList2[num29].TechLevel == 0.0)
                            {
                                for (int num30 = 0; num30 < galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; num30++)
                                {
                                    ResourceDefinition resourceDefinition = galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance[num30];
                                    if (resourceDefinition == null || !resourceDefinition.IsImportantPreWarpResource)
                                    {
                                        continue;
                                    }
                                    ResourcePrevalence mostTerrestrialResourcePrevalance = resourceDefinition.GetMostTerrestrialResourcePrevalance();
                                    if (mostTerrestrialResourcePrevalance == null)
                                    {
                                        continue;
                                    }
                                    Habitat habitat7 = galaxy.FindNearestHabitat(empire3.Capital.Xpos, empire3.Capital.Ypos, mostTerrestrialResourcePrevalance.HabitatType);
                                    if (habitat7 == null)
                                    {
                                        continue;
                                    }
                                    Habitat habitat8 = Galaxy.DetermineHabitatSystemStar(habitat7);
                                    Habitat habitat9 = Galaxy.DetermineHabitatSystemStar(empire3.Capital);
                                    if (habitat8 != habitat9 && !mostTerrestrialResourcePrevalance.HabitatIsGasCloud)
                                    {
                                        if (mostTerrestrialResourcePrevalance.HabitatIsAsteroid)
                                        {
                                            habitat7 = galaxy.GenerateAsteroid(galaxy, habitat9, mostTerrestrialResourcePrevalance.HabitatType);
                                        }
                                        else
                                        {
                                            switch (mostTerrestrialResourcePrevalance.HabitatType)
                                            {
                                                case HabitatType.Volcanic:
                                                    habitat7 = galaxy.GenerateVolcanicPlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.Desert:
                                                    habitat7 = galaxy.GenerateDesertPlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.MarshySwamp:
                                                    habitat7 = galaxy.GenerateSwampPlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.Continental:
                                                    habitat7 = galaxy.GenerateContinentalPlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.Ocean:
                                                    habitat7 = galaxy.GenerateOceanPlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.BarrenRock:
                                                    habitat7 = galaxy.GenerateBarrenRockPlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.Ice:
                                                    habitat7 = galaxy.GenerateIcePlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.GasGiant:
                                                    habitat7 = galaxy.GenerateGasGiantPlanet(galaxy, habitat9);
                                                    break;
                                                case HabitatType.FrozenGasGiant:
                                                    habitat7 = galaxy.GenerateFrozenGasGiantPlanet(galaxy, habitat9);
                                                    break;
                                            }
                                        }
                                        if (habitat7 != null)
                                        {
                                            bool lockTaken = false;
                                            try
                                            {
                                                Monitor.Enter(lockObject = galaxy._LockObject, ref lockTaken);
                                                galaxy.AddHabitat(habitat7, habitat9);
                                            }
                                            finally
                                            {
                                                if (lockTaken)
                                                {
                                                    Monitor.Exit(lockObject);
                                                }
                                            }
                                            if (empireStartList2[num29].TechLevel == 0.0)
                                            {
                                                empire3.ResourceMap.SetResourcesKnown(habitat7, known: false);
                                            }
                                        }
                                    }
                                    if (habitat7 != null)
                                    {
                                        int num31 = Galaxy.Rnd.Next(150, 300);
                                        if (resourceDefinition.IsFuel)
                                        {
                                            num31 = Galaxy.Rnd.Next(400, 1000);
                                        }
                                        int num32 = habitat7.Resources.IndexOf(resourceDefinition.ResourceID, 0);
                                        if (num32 < 0)
                                        {
                                            habitat7.Resources.Add(new HabitatResource(resourceDefinition.ResourceID, num31));
                                        }
                                        else
                                        {
                                            habitat7.Resources[num32].Abundance = (short)num31;
                                        }
                                    }
                                }
                            }
                            if (empireStartList2[num29].TechLevel == 0.0)
                            {
                                ResearchNodeDefinition researchNodeDefinition = Galaxy.ResearchNodeDefinitionsStatic.FindNodeBySpecialFunctionCode(2);
                                if (researchNodeDefinition != null)
                                {
                                    HabitatList habitats = galaxy.Systems[empire3.Capital.SystemIndex].Habitats;
                                    double distance = 0.0;
                                    Habitat habitat10 = galaxy.FindPlanetMoonBeyondRangeOrFurthestNoRuins(empire3.Capital, habitats, 20000.0, out distance);
                                    if (habitat10 != null)
                                    {
                                        galaxy.SelectRuinsUnlockTech(habitat10, researchNodeDefinition.ResearchNodeId);
                                    }
                                    else
                                    {
                                        Habitat habitat11 = Galaxy.DetermineHabitatSystemStar(empire3.Capital);
                                        habitat10 = galaxy.GenerateBarrenRockPlanet(galaxy, habitat11);
                                        if (habitat10 != null)
                                        {
                                            bool lockTaken2 = false;
                                            try
                                            {
                                                Monitor.Enter(lockObject = galaxy._LockObject, ref lockTaken2);
                                                galaxy.AddHabitat(habitat10, habitat11);
                                            }
                                            finally
                                            {
                                                if (lockTaken2)
                                                {
                                                    Monitor.Exit(lockObject);
                                                }
                                            }
                                            empire3.ResourceMap.SetResourcesKnown(habitat10, known: false);
                                            galaxy.SelectRuinsUnlockTech(habitat10, researchNodeDefinition.ResearchNodeId);
                                        }
                                    }
                                }
                            }
                            empire3.DetermineResearchStationLocation(allowOccupiedSystems: false, mustHaveBuildableResearchStationDesign: true);
                            if (empireStartList2[num29].TechLevel > 0.0)
                            {
                                galaxy.CreateResearchStations(galaxy, empire3, bool_6);
                            }
                            bool_6 = false;
                            if (empireStartList2[num29].TechLevel > 0.0)
                            {
                                galaxy.CreateMiningStations(galaxy, empire3, bool_6);
                            }
                            galaxy.SetLuxuryResourcesAtColonies(galaxy, empire3);
                            empire3.InitiateConstruction = false;
                            for (int num33 = 0; num33 < 1; num33++)
                            {
                                empire3.ReviewTaxes();
                                empire3.RecalculateColonyTaxRevenues();
                            }
                            empire3.RecalculateEmpirePopulation();
                            foreach (Habitat colony in empire3.Colonies)
                            {
                                if (int_5 > 0)
                                {
                                    empire3.ProcessColonyTroops(colony, null, 0.0, 100.0, 100.0);
                                    empire3.ProcessColonyTroops(colony, null, 0.0, 300.0, 300.0);
                                    empire3.ProcessColonyTroops(colony, null, 0.0, 300.0, 300.0);
                                }
                                colony.RecalculateAnnualTaxRevenue();
                            }
                            empire3.ReviewTaxes();
                            foreach (Habitat colony2 in empire3.Colonies)
                            {
                                colony2.RecalculateAnnualTaxRevenue();
                            }
                            double num34 = (empire3.BuildFactor = 0.5 + Math.Min(0.2, (double)empire3.Colonies.Count / 20.0));
                            empire3.DoTasks();
                            empire3.BuildFactor = 1.0;
                            empire3.InitiateConstruction = true;
                            int seconds = Galaxy.Rnd.Next(1, (int)empire3.LongProcessingInterval);
                            empire3.LastLongTouch = galaxy.CurrentDateTime.Subtract(new TimeSpan(0, 0, seconds));
                            empire3.LastIntermediateTouch = empire3.LastLongTouch;
                            empire3.LastPeriodicTouch = empire3.LastLongTouch;
                            empire3.LastRegularTouch = empire3.LastLongTouch;
                            empire3.LastShortTouch = empire3.LastLongTouch;
                            empire3.LastHugeTouch = empire3.LastLongTouch;
                        }
                        if (main_0.gameOptions_0 != null)
                        {
                            empire2.AttackRangePatrol = main_0.gameOptions_0.AttackRangePatrol;
                            empire2.AttackRangeEscort = main_0.gameOptions_0.AttackRangeEscort;
                            empire2.AttackRangeOther = main_0.gameOptions_0.AttackRangeOther;
                            empire2.AttackRangeAttack = main_0.gameOptions_0.AttackRangeAttack;
                            empire2.AttackOvermatchFactor = main_0.gameOptions_0.AttackOverMatchFactor;
                            empire2.AttackRangePatrolManual = main_0.gameOptions_0.AttackRangePatrolManual;
                            empire2.AttackRangeEscortManual = main_0.gameOptions_0.AttackRangeEscortManual;
                            empire2.AttackRangeOtherManual = main_0.gameOptions_0.AttackRangeOtherManual;
                            empire2.AttackRangeAttackManual = main_0.gameOptions_0.AttackRangeAttackManual;
                        }
                        for (int num35 = 0; num35 < empireList.Count; num35++)
                        {
                            Empire empire4 = empireList[num35];
                            if (empireStartList2[num35].TechLevel > 0.0)
                            {
                                galaxy.CreateStateShips(galaxy, empire4);
                                galaxy.CreatePrivateShips(galaxy, empire4);
                                galaxy.FillShipsWithTroops(galaxy, empire4);
                                empire4.AssignMissionsToBuiltObjectList(empire4.BuiltObjects, atWar: false, null);
                                empire4.AssignMissionsToBuiltObjectList(empire4.PrivateBuiltObjects, atWar: false, null);
                            }
                        }
                        foreach (Empire item8 in empireList)
                        {
                            foreach (Empire item9 in empireList)
                            {
                                if (item9 == item8)
                                {
                                    continue;
                                }
                                for (int num36 = 0; num36 < galaxy.Systems.Count; num36++)
                                {
                                    SystemVisibilityStatus status = item9.SystemVisibility[galaxy.Systems[num36].SystemStar.SystemIndex].Status;
                                    SystemVisibilityStatus status2 = item8.SystemVisibility[galaxy.Systems[num36].SystemStar.SystemIndex].Status;
                                    bool flag2 = false;
                                    if ((status2 == SystemVisibilityStatus.Explored || status2 == SystemVisibilityStatus.Visible) && status == SystemVisibilityStatus.Visible)
                                    {
                                        flag2 = true;
                                    }
                                    if ((status == SystemVisibilityStatus.Explored || status == SystemVisibilityStatus.Visible) && (status2 == SystemVisibilityStatus.Explored || status2 == SystemVisibilityStatus.Visible) && Galaxy.Rnd.Next(0, 3) == 1)
                                    {
                                        flag2 = true;
                                    }
                                    if (!flag2)
                                    {
                                        continue;
                                    }
                                    DiplomaticRelation diplomaticRelation = item8.DiplomaticRelations[item9];
                                    if (diplomaticRelation == null)
                                    {
                                        diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, item8, item8, item9, tradeRestrictedResources: false);
                                        item8.DiplomaticRelations.Add(diplomaticRelation);
                                        diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, item8, item9, item8, tradeRestrictedResources: false);
                                        item9.DiplomaticRelations.Add(diplomaticRelation);
                                    }
                                    else if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
                                    {
                                        diplomaticRelation.Type = DiplomaticRelationType.None;
                                        DiplomaticRelation diplomaticRelation2 = item9.DiplomaticRelations[item8];
                                        if (diplomaticRelation2 == null)
                                        {
                                            diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.None, item8, item9, item8, tradeRestrictedResources: false);
                                            item9.DiplomaticRelations.Add(diplomaticRelation2);
                                        }
                                        else if (diplomaticRelation2.Type == DiplomaticRelationType.NotMet)
                                        {
                                            diplomaticRelation2.Type = DiplomaticRelationType.None;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        if (empire2.PirateEmpireBaseHabitat != null)
                        {
                            for (int num37 = 0; num37 < galaxy.Empires.Count; num37++)
                            {
                                Empire empire5 = galaxy.Empires[num37];
                                if (empire5 == null || !empire5.Active || empire5 == empire2)
                                {
                                    continue;
                                }
                                for (int num38 = 0; num38 < galaxy.Systems.Count; num38++)
                                {
                                    SystemInfo systemInfo = galaxy.Systems[num38];
                                    SystemVisibilityStatus status3 = empire5.SystemVisibility[systemInfo.SystemStar.SystemIndex].Status;
                                    SystemVisibilityStatus status4 = empire2.SystemVisibility[systemInfo.SystemStar.SystemIndex].Status;
                                    bool flag3 = false;
                                    if ((status4 == SystemVisibilityStatus.Explored || status4 == SystemVisibilityStatus.Visible) && status3 == SystemVisibilityStatus.Visible)
                                    {
                                        flag3 = true;
                                    }
                                    if ((status3 == SystemVisibilityStatus.Explored || status3 == SystemVisibilityStatus.Visible) && (status4 == SystemVisibilityStatus.Explored || status4 == SystemVisibilityStatus.Visible) && Galaxy.Rnd.Next(0, 3) == 1)
                                    {
                                        flag3 = true;
                                    }
                                    if (!flag3)
                                    {
                                        continue;
                                    }
                                    PirateRelation pirateRelation = empire2.ObtainPirateRelation(empire5);
                                    if (pirateRelation.Type == PirateRelationType.NotMet)
                                    {
                                        pirateRelation.Type = PirateRelationType.None;
                                        PirateRelation pirateRelation2 = empire5.ObtainPirateRelation(empire2);
                                        if (pirateRelation2.Type == PirateRelationType.NotMet)
                                        {
                                            pirateRelation2.Type = PirateRelationType.None;
                                        }
                                        if (empire2.PirateEmpireBaseHabitat != null && empire5.KnownPirateEmpires != null && !empire5.KnownPirateEmpires.Contains(empire2))
                                        {
                                            empire5.KnownPirateEmpires.Add(empire2);
                                        }
                                        if (empire5.PirateEmpireBaseHabitat != null && empire2.KnownPirateEmpires != null && !empire2.KnownPirateEmpires.Contains(empire5))
                                        {
                                            empire2.KnownPirateEmpires.Add(empire5);
                                        }
                                    }
                                    break;
                                }
                            }
                            empire2.ColonizationTargets = empire2.PirateReviewColoniesToControl();
                        }
                        galaxy.AllowRaceStartingCharacters = true;
                        for (int num39 = 0; num39 < empireList.Count; num39++)
                        {
                            if (empireList[num39].DominantRace != null)
                            {
                                empireList[num39].GenerateStartingCharacters();
                            }
                        }
                        galaxy.DoTasks(gameFinished: false, empire2, null, null, null);
                        galaxy.ReviewEmpireTerritoryCore(false);
                        galaxy.UpdateSystemInfo(empire2);
                        if (main_0 != null && empire2 != null)
                        {
                            Galaxy.ApplyDesignUpgradeGameOptionsToPolicies(main_0.gameOptions_0, empire2.Policy);
                        }
                        if (double_3 > 0.0 && int_4 == 0 && !bool_2)
                        {
                            Empire empire6 = galaxy.FindNearestPirateFaction(xpos, ypos, null, includeSuperPirates: true);
                            if (empire6 != null)
                            {
                                double num40 = galaxy.CalculateDistance(xpos, ypos, empire6.PirateEmpireBaseHabitat.Xpos, empire6.PirateEmpireBaseHabitat.Ypos);
                                if (num40 > (double)Galaxy.SectorSizeX)
                                {
                                    double num41 = xpos;
                                    double num42 = ypos;
                                    bool flag4 = false;
                                    int num43 = 0;
                                    while (!flag4 && num43 < 50)
                                    {
                                        num41 += 200000.0 - Galaxy.Rnd.NextDouble() * 400000.0;
                                        num42 += 200000.0 - Galaxy.Rnd.NextDouble() * 400000.0;
                                        byte resourceID2 = galaxy.ResourceSystem.FuelResources[0].ResourceID;
                                        Habitat habitat12 = galaxy.FindNearestHabitatWithResource(num41, num42, resourceID2);
                                        if (habitat12.BasesAtHabitat != null && habitat12.BasesAtHabitat.Count > 0)
                                        {
                                            for (int num44 = 0; num44 < habitat12.BasesAtHabitat.Count; num44++)
                                            {
                                                if (habitat12.BasesAtHabitat[num44].Empire != null && habitat12.BasesAtHabitat[num44].Empire != galaxy.IndependentEmpire && habitat12.BasesAtHabitat[num44].Empire.PirateEmpireBaseHabitat == null)
                                                {
                                                    habitat12 = null;
                                                    break;
                                                }
                                            }
                                        }
                                        if (habitat12 != null)
                                        {
                                            Habitat habitat13 = galaxy.FindNearestColony(habitat12.Xpos, habitat12.Ypos, null, 0, includeIndependentColonies: false);
                                            double num45 = galaxy.CalculateDistance(habitat13.Xpos, habitat13.Ypos, habitat12.Xpos, habitat12.Ypos);
                                            if (num45 > (double)Galaxy.MaxSolarSystemSize * 2.1 && habitat12 != null && habitat12.Category != 0 && galaxy.NextEmpireID < Galaxy.MaximumEmpireCount)
                                            {
                                                galaxy.SelectPopularDesignCandidates();
                                                galaxy.SelectRelativeHabitatSurfacePoint(habitat12, out var num46, out var num47);
                                                galaxy.GeneratePirateEmpire(habitat12, (int)num46, (int)num47, useRace: true);
                                                flag4 = true;
                                            }
                                        }
                                        num43++;
                                    }
                                }
                            }
                        }
                        if (gameStartResets_0 == null || string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath) || gameStartResets_0.ResetRuins)
                        {
                            foreach (Habitat habitat22 in galaxy.Habitats)
                            {
                                bool flag5 = true;
                                if (galaxy.Systems[habitat22.SystemIndex].DominantEmpire != null && galaxy.Systems[habitat22.SystemIndex].DominantEmpire.Empire != null)
                                {
                                    flag5 = false;
                                }
                                if (flag5)
                                {
                                    galaxy.SelectRuins(habitat22);
                                }
                            }
                        }
                        if (galaxy.Age > 0)
                        {
                            foreach (Habitat habitat23 in galaxy.Habitats)
                            {
                                if (habitat23.Ruin != null && habitat23.Ruin.Type != RuinType.UnlockResearchProject && galaxy.Systems[habitat23.SystemIndex].DominantEmpire != null && galaxy.Systems[habitat23.SystemIndex].DominantEmpire.Empire != null)
                                {
                                    habitat23.Ruin.ClearBonuses();
                                    if (galaxy.Systems[habitat23.SystemIndex].DominantEmpire.Empire == galaxy.PlayerEmpire)
                                    {
                                        habitat23.Ruin.PlayerEmpireEncountered = true;
                                    }
                                }
                            }
                        }
                        foreach (Empire empire9 in galaxy.Empires)
                        {
                            SystemInfo systemInfo2 = galaxy.Systems[empire9.Capital.SystemIndex];
                            if (systemInfo2.Creatures == null || systemInfo2.Creatures.Count <= 0)
                            {
                                continue;
                            }
                            CreatureList creatureList = new CreatureList();
                            foreach (Creature creature in systemInfo2.Creatures)
                            {
                                creatureList.Add(creature);
                            }
                            foreach (Creature item10 in creatureList)
                            {
                                item10.CompleteTeardown();
                            }
                        }
                        if (galaxy.Age == 0)
                        {
                            foreach (Empire empire10 in galaxy.Empires)
                            {
                                if (empire10.Capital == null)
                                {
                                    continue;
                                }
                                Habitat habitat14 = Galaxy.DetermineHabitatSystemStar(empire10.Capital);
                                double num48 = Galaxy.Rnd.Next(6000, 14000);
                                double num49 = Galaxy.Rnd.NextDouble() * Math.PI * 2.0;
                                double num50 = habitat14.Xpos + Math.Cos(num49) * num48;
                                double num51 = habitat14.Ypos + Math.Sin(num49) * num48;
                                HabitatList habitatList2 = galaxy.GenerateAsteroidField(Galaxy.Rnd.Next(80, 150), num50, num51, habitat14, orbitDirection: true, 2, (int)num48, 1.0, 1.0, HabitatType.BarrenRock);
                                bool lockTaken3 = false;
                                try
                                {
                                    Monitor.Enter(lockObject = galaxy._LockObject, ref lockTaken3);
                                    galaxy.AddAsteroidField(habitatList2, habitat14);
                                }
                                finally
                                {
                                    if (lockTaken3)
                                    {
                                        Monitor.Exit(lockObject);
                                    }
                                }
                                for (int num52 = 0; num52 < habitatList2.Count; num52++)
                                {
                                    empire10.ResourceMap.SetResourcesKnown(habitatList2[num52], known: false);
                                }
                                if (double_2 > 0.0)
                                {
                                    for (int num53 = 0; num53 < 2; num53++)
                                    {
                                        int index2 = Galaxy.Rnd.Next(0, habitatList2.Count);
                                        galaxy.GenerateCreatureAtHabitat(CreatureType.RockSpaceSlug, habitatList2[index2], lockLocation: true, 0, 0);
                                    }
                                }
                                int num54 = 0;
                                int num55 = 0;
                                SystemInfo systemInfo3 = galaxy.Systems[habitat14];
                                if (systemInfo3 != null && systemInfo3.Habitats != null)
                                {
                                    for (int num56 = 0; num56 < systemInfo3.Habitats.Count; num56++)
                                    {
                                        Habitat habitat15 = systemInfo3.Habitats[num56];
                                        if (habitat15 == null)
                                        {
                                            continue;
                                        }
                                        switch (habitat15.Type)
                                        {
                                            case HabitatType.BarrenRock:
                                                if (habitat15.Category == HabitatCategoryType.Planet && num55 <= 0)
                                                {
                                                    galaxy.SetScenicFactor(habitat15, definitelySet: true);
                                                    num55++;
                                                }
                                                break;
                                            case HabitatType.Volcanic:
                                            case HabitatType.Desert:
                                            case HabitatType.MarshySwamp:
                                            case HabitatType.Ocean:
                                            case HabitatType.Ice:
                                                if ((habitat15.Category == HabitatCategoryType.Planet || habitat15.Category == HabitatCategoryType.Moon) && num55 <= 0)
                                                {
                                                    galaxy.SetScenicFactor(habitat15, definitelySet: true);
                                                    num55++;
                                                }
                                                break;
                                            case HabitatType.FrozenGasGiant:
                                                if (num54 <= 0)
                                                {
                                                    galaxy.SetResearchBonus(habitat15, definitelySet: true);
                                                    num54++;
                                                }
                                                break;
                                        }
                                    }
                                }
                                Design design = empire10.GenerateDesignFromSpec(empire10.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate), 1.0);
                                design.PictureRef = ShipImageHelper.ResolveMinorShipImageIndex(design.SubRole, largeShips: false);
                                design.Components.RemoveAllByComponentCategory(ComponentCategoryType.HyperDrive);
                                design.ReDefine();
                                Habitat habitat16 = galaxy.FindNearestHabitat(empire10.Capital.Xpos, empire10.Capital.Ypos, HabitatType.FrozenGasGiant);
                                if (habitat16 == null || habitat16.SystemIndex != habitat14.SystemIndex)
                                {
                                    habitat16 = galaxy.FindNearestHabitat(empire10.Capital.Xpos, empire10.Capital.Ypos, HabitatType.GasGiant);
                                }
                                if (habitat16 != null && habitat16.SystemIndex == habitat14.SystemIndex)
                                {
                                    BuiltObject builtObject = galaxy.GenerateAbandonedBuiltObject(habitat16, design, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Prompt);
                                    builtObject.EncounterEventType = BuiltObjectEncounterEventType.Acquire;
                                    builtObject.EncounterDescription = TextResolver.GetText("PreWarp Abandoned Ship Encounter");
                                }
                                Design design2 = empire10.GenerateDesignFromSpec(empire10.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer), 3.0);
                                design2.Components.RemoveAllByComponentCategory(ComponentCategoryType.HyperDrive);
                                design2.ReDefine();
                                habitat16 = galaxy.FindNearestRuin(empire10.Capital.Xpos, empire10.Capital.Ypos);
                                if (habitat16 != null && habitat16.SystemIndex == habitat14.SystemIndex)
                                {
                                    BuiltObject builtObject2 = galaxy.GenerateAbandonedBuiltObject(habitat16, design2, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Prompt);
                                    galaxy.DamageBuiltObjectComponents(builtObject2, 0.5);
                                    builtObject2.EncounterEventType = BuiltObjectEncounterEventType.Acquire;
                                    switch (Galaxy.Rnd.Next(0, 3))
                                    {
                                        case 0:
                                            builtObject2.EncounterExplorationBonus = (short)Galaxy.Rnd.Next(3, 5);
                                            break;
                                        case 1:
                                            builtObject2.EncounterMoneyBonus = (int)(2000.0 + Galaxy.Rnd.NextDouble() * 2000.0);
                                            break;
                                        case 2:
                                            builtObject2.EncounterTechAdvanceCount = 1;
                                            break;
                                    }
                                }
                                Habitat habitat17 = systemInfo3.Habitats.GetFurthestHabitat(empire10.Capital.Xpos, empire10.Capital.Ypos, HabitatType.Volcanic, 4000.0);
                                if (habitat17 == null)
                                {
                                    habitat17 = systemInfo3.Habitats.GetFurthestHabitat(empire10.Capital.Xpos, empire10.Capital.Ypos, HabitatType.Desert, 4000.0);
                                    if (habitat17 == null)
                                    {
                                        habitat17 = systemInfo3.Habitats.GetFurthestHabitat(empire10.Capital.Xpos, empire10.Capital.Ypos, HabitatType.Ice, 4000.0);
                                        if (habitat17 == null || habitat17.Category == HabitatCategoryType.Asteroid)
                                        {
                                            habitat17 = systemInfo3.Habitats.GetFurthestHabitat(empire10.Capital.Xpos, empire10.Capital.Ypos, HabitatType.MarshySwamp, 4000.0);
                                            if (habitat17 == null)
                                            {
                                                habitat17 = systemInfo3.Habitats.GetFurthestHabitat(empire10.Capital.Xpos, empire10.Capital.Ypos, HabitatType.BarrenRock, 4000.0);
                                                if (habitat17 == null || habitat17.Category == HabitatCategoryType.Asteroid)
                                                {
                                                    habitat17 = null;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (habitat17 != null && habitat17.Ruin == null)
                                {
                                    galaxy.SelectRuins(habitat17, definitePlacement: true, assignCreatures: false, allowNegativeEffects: false, allowMapReveal: false);
                                }
                            }
                        }
                        if (empireStart_0.TechLevel != 0.0 && galaxy.StoryReturnOfTheShakturiEnabled)
                        {
                            double num57 = 0.0;
                            double num58 = 0.0;
                            galaxy.ObtainRandomGalaxyCoordinatesFromPoint(xpos, ypos, (double)Galaxy.SectorSize * 2.0, out num57, out num58);
                            Habitat habitat18 = galaxy.FindNearestHabitatUnoccupiedSystem(num57, num58, HabitatType.Continental);
                            if (habitat18 == null)
                            {
                                habitat18 = galaxy.FindNearestHabitatUnoccupiedSystem(num57, num58, HabitatType.MarshySwamp);
                            }
                            if (habitat18 == null)
                            {
                                habitat18 = galaxy.FindNearestHabitatUnoccupiedSystem(num57, num58, HabitatType.Desert);
                            }
                            if (habitat18 == null)
                            {
                                habitat18 = galaxy.FindNearestHabitatUnoccupiedSystem(num57, num58, HabitatType.Ocean);
                            }
                            if (habitat18 == null)
                            {
                                habitat18 = galaxy.FindNearestHabitatUnoccupiedSystem(num57, num58, HabitatType.Ice);
                            }
                            if (habitat18 == null)
                            {
                                habitat18 = galaxy.FindNearestHabitatUnoccupiedSystem(num57, num58, HabitatType.Volcanic);
                            }
                            if (habitat18 == null)
                            {
                                habitat18 = galaxy.FindNearestHabitatUnoccupiedSystem(num57, num58, HabitatType.BarrenRock);
                            }
                            if (habitat18.Population != null && habitat18.Population.Count > 0)
                            {
                                habitat18.Population.Clear();
                                habitat18.Population.RecalculateTotalAmount();
                            }
                            habitat18.Name = "Utopia";
                            galaxy.GenerateAncientHelpers(habitat18);
                        }
                        GalaxyLocationList galaxyLocationList3 = new GalaxyLocationList();
                        if (galaxy.StoryDistantWorldsEnabled && (gameStartResets_0 == null || string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath) || galaxy.StoryClueLocations == null || galaxy.StoryClueLocations.Count == 0 || gameStartResets_0.ResetSpecialLocationsAndAbandonedShips))
                        {
                            int num59 = 0;
                            double num60 = 0.0;
                            double num61 = 0.0;
                            galaxy.SelectRelativeParkingPoint(2000000.0, out num60, out num61);
                            num60 += xpos;
                            num61 += ypos;
                            Habitat habitat19 = null;
                            while (habitat19 == null && num59 < 50)
                            {
                                habitat19 = galaxy.FindLonelyHabitat(num60, num61, HabitatType.BarrenRock);
                                method_93(galaxy, 0.0, 1.0, out num60, out num61);
                                num59++;
                            }
                            if (habitat19 != null)
                            {
                                galaxy.SelectRuins(habitat19, definitePlacement: true, assignCreatures: false, allowNegativeEffects: false);
                                if (habitat19.Ruin != null)
                                {
                                    habitat19.Ruin.ClearBonuses();
                                    habitat19.Ruin.StoryClueLevel = 0;
                                }
                            }
                            galaxy.StoryClueLocations.Add(habitat19);
                            galaxy.FindLonelyDeepSpaceLocation(out num60, out num61);
                            DesignSpecification monitoringStationDesignSpec = galaxy.PlayerEmpire.GetMonitoringStationDesignSpec();
                            Design design3 = galaxy.PlayerEmpire.GenerateDesignFromSpec(monitoringStationDesignSpec, 4.0);
                            design3.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.FreedomAllianceFamily, design3.SubRole, aged: false);
                            BuiltObject item3 = galaxy.GenerateStoryAbandonedBuiltObject(num60, num61, design3, TextResolver.GetText("Signal Intercept Station") + " XL5");
                            galaxy.StoryClueLocations.Add(item3);
                            galaxy.FindLonelyNebulaLocation(out num60, out num61, GalaxyLocationEffectType.None);
                            DesignSpecification bySubRole = Galaxy.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.CapitalShip);
                            Design design4 = galaxy.PlayerEmpire.GenerateDesignFromSpec(bySubRole, 4.0);
                            design4.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.FreedomAllianceFamily, design4.SubRole, aged: false);
                            BuiltObject builtObject3 = galaxy.GenerateStoryAbandonedBuiltObject(num60, num61, design4, "Devastator");
                            string message = TextResolver.GetText("You have entered a restricted security zone. You must turn back and leave this area immediately.");
                            GalaxyLocation galaxyLocation = galaxy.GenerateRestrictedZone(string.Format(TextResolver.GetText("NAME Weapons Testing Range"), "Pozdac"), message, 3000.0, num60, num61, 3);
                            galaxyLocationList3.Add(galaxyLocation);
                            galaxy.StoryClueLocations.Add(builtObject3);
                            galaxyLocation.RelatedBuiltObject = builtObject3;
                            galaxy.FindLonelyNebulaLocation(out num60, out num61, GalaxyLocationEffectType.None);
                            Design design5 = galaxy.PlayerEmpire.GenerateResearchStationDesign(galaxy.CurrentStarDate, ComponentType.LabsWeaponsLab);
                            design5.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.FreedomAllianceFamily, design5.SubRole, aged: false);
                            BuiltObject builtObject4 = galaxy.GenerateStoryAbandonedBuiltObject(num60, num61, design5, string.Format(TextResolver.GetText("NAME Special Projects Outpost"), "Ecatur"));
                            string message2 = TextResolver.GetText("You have entered a high-security area used for secret research experiments. Leave now, while you still can!");
                            GalaxyLocation galaxyLocation2 = galaxy.GenerateRestrictedZone(TextResolver.GetText("Dead Zone"), message2, 3000.0, num60, num61, 1);
                            galaxyLocationList3.Add(galaxyLocation2);
                            galaxy.StoryClueLocations.Add(builtObject4);
                            galaxyLocation2.RelatedCreatures = galaxy.GenerateCreaturesAtLocation(CreatureType.Kaltor, 40, num60, num61, 600, 300);
                            galaxyLocation2.RelatedBuiltObject = builtObject4;
                            galaxy.FindLonelyNebulaLocation(out num60, out num61, GalaxyLocationEffectType.LightningDamage, GalaxyLocationEffectType.None);
                            DesignSpecification bySubRole2 = Galaxy.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.GasMiningStation);
                            Design design6 = galaxy.PlayerEmpire.GenerateDesignFromSpec(bySubRole2, 5.0);
                            design6 = galaxy.DesignPirateBase(design6, 5.0);
                            design6.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.FreedomAllianceFamily, design6.SubRole, aged: false);
                            BuiltObject item4 = galaxy.GenerateStoryAbandonedBuiltObject(num60, num61, design6, TextResolver.GetText("Scoundrels Refuge"));
                            galaxy.StoryClueLocations.Add(item4);
                            galaxy.StoryClueUsed.AddRange(new bool[5]);
                            galaxy.StorySecondaryClueUsed.AddRange(new bool[9]);
                            int num62 = Math.Max(1, galaxy.StarCount / 200);
                            for (int num63 = 0; num63 < num62; num63++)
                            {
                                galaxy.GenerateSpecialZoneWeaponsTestingRange();
                            }
                            int num64 = Math.Max(1, galaxy.StarCount / 200);
                            for (int num65 = 0; num65 < num64; num65++)
                            {
                                galaxy.GenerateSpecialZoneResearchFacility();
                            }
                            int num66 = Math.Max(1, galaxy.StarCount / 200);
                            for (int num67 = 0; num67 < num66; num67++)
                            {
                                galaxy.GenerateSpecialZoneSupplyDepot();
                            }
                        }
                        for (int num68 = 0; num68 < empireList.Count; num68++)
                        {
                            Empire empire7 = empireList[num68];
                            if (empire7 != null && empire7.DominantRace != null && empire7.DominantRace.KnownStartingGalacticHistoryLocations > 0)
                            {
                                galaxy.SetEmpireKnownGalacticHistoryLocations(empire7, empire7.DominantRace.KnownStartingGalacticHistoryLocations, empire7.Capital.Xpos, empire7.Capital.Ypos, galaxyLocationList3);
                            }
                        }
                        if (gameStartResets_0 == null || string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath) || gameStartResets_0.ResetResources)
                        {
                            galaxy.SetRestrictedResources();
                        }
                        if (gameStartResets_0 == null || string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath) || gameStartResets_0.ResetRuins)
                        {
                            galaxy.GenerateSilverMistRuins();
                        }
                        if (gameStartResets_0 == null || string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath) || gameStartResets_0.ResetRuins)
                        {
                            galaxy.GenerateSpecialBonusRuins();
                        }
                        if (gameStartResets_0 == null || string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath) || gameStartResets_0.ResetRuins)
                        {
                            int num69 = Math.Max(1, (int)((double)int_1 / 270.0));
                            int num70 = Math.Max(1, (int)((double)int_1 / 110.0));
                            int num71 = Math.Max(1, (int)((double)int_1 / 170.0));
                            int num72 = Math.Min(6, Math.Max(1, (int)((double)int_1 / 160.0)));
                            int num73 = Math.Max(1, (int)((double)int_1 / 140.0));
                            int num74 = Math.Max(1, Math.Min(2, (int)((double)int_1 / 350.0)));
                            int num75 = Math.Max(1, Math.Min(2, (int)((double)int_1 / 350.0)));
                            Habitat habitat20 = null;
                            bool flag6 = false;
                            for (int num76 = 0; num76 < num74; num76++)
                            {
                                while (!flag6)
                                {
                                    habitat20 = galaxy.FindLonelyHabitat(RuinType.Government, HabitatType.BarrenRock);
                                    flag6 = galaxy.SelectSpecialRuins(habitat20, EventMessageType.SpecialGovernmentType);
                                }
                                flag6 = false;
                                while (!flag6)
                                {
                                    habitat20 = galaxy.FindLonelyHabitat(RuinType.Government, HabitatType.BarrenRock);
                                    flag6 = galaxy.SelectSpecialRuins(habitat20, EventMessageType.SpecialGovernmentType);
                                }
                            }
                            flag6 = false;
                            for (int num77 = 0; num77 < num75; num77++)
                            {
                                while (!flag6)
                                {
                                    habitat20 = galaxy.FindLonelyHabitat(RuinType.Component, HabitatType.BarrenRock);
                                    flag6 = galaxy.SelectSpecialRuins(habitat20, EventMessageType.ExoticTechDiscovered);
                                }
                                flag6 = false;
                                while (!flag6)
                                {
                                    habitat20 = galaxy.FindLonelyHabitat(RuinType.Component, HabitatType.BarrenRock);
                                    flag6 = galaxy.SelectSpecialRuins(habitat20, EventMessageType.ExoticTechDiscovered);
                                }
                            }
                            flag6 = false;
                            for (int num78 = 0; num78 < num69; num78++)
                            {
                                habitat20 = galaxy.FindLonelyHabitatGalacticEdge(RuinType.Refugees, HabitatType.BarrenRock);
                                galaxy.SelectSpecialRuins(habitat20, EventMessageType.GalacticRefugees);
                            }
                            for (int num79 = 0; num79 < num70; num79++)
                            {
                                habitat20 = galaxy.FindLonelyHabitat(RuinType.LostBuiltObject);
                                galaxy.SelectSpecialRuins(habitat20, EventMessageType.LostBuiltObjectCoordinates);
                            }
                            for (int num80 = 0; num80 < num71; num80++)
                            {
                                habitat20 = galaxy.FindLonelyHabitat(RuinType.LostColony);
                                galaxy.SelectSpecialRuins(habitat20, EventMessageType.LostColonyCoordinates);
                            }
                            if (galaxy.StoryDistantWorldsEnabled)
                            {
                                for (int num81 = 0; num81 < num72; num81++)
                                {
                                    Race race2 = null;
                                    int specialValue = Galaxy.Rnd.Next(10, 14);
                                    switch (num81)
                                    {
                                        case 0:
                                            race2 = galaxy.Races["Human"];
                                            specialValue = Galaxy.Rnd.Next(10, 14);
                                            break;
                                        case 1:
                                            race2 = galaxy.Races["Boskara"];
                                            specialValue = Galaxy.Rnd.Next(10, 14) * -1;
                                            break;
                                        case 2:
                                            race2 = galaxy.Races["Kiadian"];
                                            specialValue = Galaxy.Rnd.Next(10, 14);
                                            break;
                                        case 3:
                                            race2 = galaxy.Races["Sluken"];
                                            specialValue = Galaxy.Rnd.Next(10, 14) * -1;
                                            break;
                                        case 4:
                                            race2 = galaxy.Races["Ackdarian"];
                                            specialValue = Galaxy.Rnd.Next(10, 14);
                                            break;
                                        case 5:
                                            race2 = galaxy.Races["Gizurean"];
                                            specialValue = Galaxy.Rnd.Next(10, 14) * -1;
                                            break;
                                    }
                                    if (race2 == null)
                                    {
                                        race2 = galaxy.SelectRandomRace(75);
                                    }
                                    habitat20 = galaxy.FindLonelyHabitat(RuinType.Origins, HabitatType.BarrenRock);
                                    galaxy.SelectSpecialRuins(habitat20, EventMessageType.OriginsDiscovery, race2, specialValue);
                                }
                            }
                            for (int num82 = 0; num82 < num73; num82++)
                            {
                                habitat20 = galaxy.FindLonelyHabitat(RuinType.NewPopulation, HabitatType.BarrenRock);
                                galaxy.SelectSpecialRuins(habitat20, EventMessageType.SleepersAwake);
                            }
                        }
                        GalaxyLocationList galaxyLocationList4 = galaxy.GalaxyLocations.FindLocations(GalaxyLocationType.DebrisField);
                        if (galaxy.StoryDistantWorldsEnabled && (gameStartResets_0 == null || string.IsNullOrEmpty(gameStartResets_0.GalaxyFilepath) || galaxyLocationList4.Count == 0 || gameStartResets_0.ResetSpecialLocationsAndAbandonedShips))
                        {
                            int num83 = 1;
                            int num84 = 1;
                            int num85 = 1;
                            if (int_1 >= 1400)
                            {
                                num83 = 3;
                                num84 = 5;
                                num85 = 3;
                            }
                            else if (int_1 >= 700)
                            {
                                num83 = 2;
                                num84 = 3;
                                num85 = 2;
                            }
                            else if (int_1 >= 400)
                            {
                                num83 = 1;
                                num84 = 3;
                                num85 = 1;
                            }
                            else
                            {
                                num83 = 0;
                                num84 = 2;
                                num85 = 1;
                            }
                            for (int num86 = 0; num86 < num83; num86++)
                            {
                                galaxy.GenerateDebrisFieldLarge();
                            }
                            for (int num87 = 0; num87 < num84; num87++)
                            {
                                galaxy.GenerateDebrisFieldSmall();
                            }
                            for (int num88 = 0; num88 < num85; num88++)
                            {
                                galaxy.GeneratePlanetDestroyer();
                            }
                        }
                        galaxy = method_87(galaxy);
                        galaxy = method_85(galaxy);
                        if (galaxy.StoryReturnOfTheShakturiEnabled)
                        {
                            method_86(galaxy);
                        }
                        galaxy.DeferEventsForGameStart = true;
                        game2 = new Game();
                        game2.Version = Application.ProductVersion;
                        if (empireStart_0.Age == 0)
                        {
                            bool_3 = true;
                        }
                        game2.PlayAsAPirate = bool_2;
                        game2.AgeOfShadows = bool_3;
                        galaxy.GlobalVictoryConditions = victoryConditions_0;
                        game2.Galaxy = galaxy;
                        game2.CustomizationSetName = empty;
                        game2.PlayerEmpire = empire2;
                        game2.PlayerEmpire.PlayableInScenario = true;
                        if (!bool_2 && bool_3 && victoryConditions_0.EnableStoryEventsShadows)
                        {
                            game2.PlayerEmpire.PreWarpProgressEventOccurredSendPirateRaid = false;
                        }
                        if (game2.PlayerEmpire.Capital != null)
                        {
                            game2.PlayerEmpire.Capital.DoTasks(galaxy.CurrentDateTime);
                        }
                        break;
                    }
                    race = ((empireStartList_0[num15].RaceIndex >= 0) ? galaxy.Races[empireStartList_0[num15].RaceIndex] : ((empireStartList_0[num15].ResolvedRace == null) ? method_48(galaxy, empireStartList_0[num15].Race, empireList, bool_5: false) : method_48(galaxy, empireStartList_0[num15].ResolvedRace.Name, empireList, bool_5: false)));
                    if (empireStartList_0[num15].GovernmentStyle == "(" + TextResolver.GetText("Random") + ")")
                    {
                        List<int> list12 = Empire.ResolveDefaultAllowableGovernmentTypes(race);
                        GovernmentAttributesList governmentAttributesList = Empire.DetermineMostSuitableGovermentTypes(race, list12);
                        if (governmentAttributesList != null && governmentAttributesList.Count > 0)
                        {
                            int index3 = Galaxy.Rnd.Next(0, governmentAttributesList.Count);
                            governmentAttributes = governmentAttributesList[index3];
                            if (governmentAttributes.SpecialFunctionCode == 1)
                            {
                                int num89 = 0;
                                while (governmentAttributes.SpecialFunctionCode == 1 && num89 < 10)
                                {
                                    num2 = Galaxy.ResolveGovernmentId(empireStart_0.GovernmentStyle, race);
                                    governmentAttributes = galaxy.Governments[num2];
                                    num89++;
                                }
                            }
                            if (race.PreferredStartingGovernmentId >= 0 && list12.Contains(race.PreferredStartingGovernmentId))
                            {
                                governmentAttributes = Galaxy.GovernmentsStatic[race.PreferredStartingGovernmentId];
                            }
                        }
                    }
                    else
                    {
                        governmentAttributes = Galaxy.GovernmentsStatic.GetByName(empireStartList_0[num15].GovernmentStyle);
                    }
                    num2 = governmentAttributes.GovernmentId;
                    Sector sector_ = null;
                    method_53(galaxy, empireStartList_0[num15].ProximityDistance, out sector_);
                    Galaxy.Rnd.NextDouble();
                    Galaxy.ResolveHomeSystem(empireStartList_0[num15].HomeSystemFavourability, out capitalHabitatType, out homeSystemFactor);
                    capitalHabitatType = race.NativeHabitatType;
                    Habitat habitat21 = method_51(galaxy, race, empireStartList_0[num15].ProximityDistance, habitat, capitalHabitatType, bool_2, num14 + 1, sector_);
                    if (habitat21 != null)
                    {
                        designPictureFamilyIndex = race.DesignPictureFamilyIndex;
                        if (empireStartList_0[num15].DesignPictureFamilyIndex >= 0)
                        {
                            designPictureFamilyIndex = empireStartList_0[num15].DesignPictureFamilyIndex;
                        }
                        double expansion2 = 0.0;
                        double actualTechLevel = 1.0;
                        string raceNameOverride = string.Empty;
                        if (race != null)
                        {
                            raceNameOverride = race.Name;
                        }
                        Empire empire8 = galaxy.GenerateEmpire(galaxy, isPlayerEmpire: false, empireStartList_0[num15].Name, habitat21, race, designPictureFamilyIndex, num2, homeSystemFactor, empireStartList_0[num15].HomeSystemFavourability, empireStartList_0[num15].Age, empireStartList_0[num15].TechLevel, empireStartList_0[num15].CorruptionMultiplier, out expansion2, main_0.gameOptions_0, victoryConditions_0, out actualTechLevel, raceNameOverride);
                        empireStartList_0[num15].TechLevel = actualTechLevel;
                        if (empireStartList2[num15].Age == 0)
                        {
                            galaxy.ClearIndependentColoniesFromSystem(habitat21.SystemIndex);
                        }
                        galaxy.SetEmpireDifficultyFactors(empire8);
                        if (empireStartList_0[num15].FlagShape >= 0)
                        {
                            Bitmap smallFlagPicture2 = null;
                            Bitmap largeFlagPicture2 = null;
                            empire8.FlagShape = Galaxy.GenerateEmpireFlag(empire8.MainColor, empire8.SecondaryColor, empireStartList_0[num15].FlagShape, list, ref smallFlagPicture2, ref largeFlagPicture2);
                            empire8.SmallFlagPicture = smallFlagPicture2;
                            empire8.LargeFlagPicture = largeFlagPicture2;
                            Bitmap bitmap4 = (empire8.MediumFlagPicture = GraphicsHelper.ScaleImage(largeFlagPicture2, 35, 21, 1f, lowQuality: false));
                        }
                        empireList.Add(empire8);
                        list3.Add(expansion2);
                        list6.Add(empireStartList_0[num15].Age);
                        num15++;
                        continue;
                    }
                    throw new ApplicationException("Could not locate capital!");
                }
                game2.ViewX = xpos;
                game2.ViewY = ypos;
                game2.ZoomFactor = 1.0;
                game2.GlobalVictoryConditions = victoryConditions_0;
                game2.PlayerVictoryConditionsToAchieve = empireVictoryConditions_0;
                game2.PlayerVictoryConditionsToPrevent = empireVictoryConditions_1;
                game2.AutoPauseWhenInPopupWindow = main_0.gameOptions_0.AutoPauseWhenInPopupWindow;
                game2.PlayerEmpire.ControlColonization = main_0.gameOptions_0.ControlColonizationDefault;
                game2.PlayerEmpire.ControlColonyTaxRates = main_0.gameOptions_0.ControlColonyTaxRatesDefault;
                game2.PlayerEmpire.ControlDesigns = main_0.gameOptions_0.ControlShipDesignDefault;
                game2.PlayerEmpire.ControlDiplomacyGifts = main_0.gameOptions_0.ControlDiplomaticGiftsDefault;
                game2.PlayerEmpire.ControlDiplomacyOffense = main_0.gameOptions_0.ControlWarTradeSanctionsDefault;
                game2.PlayerEmpire.ControlDiplomacyTreaties = main_0.gameOptions_0.ControlTreatyNegotiationDefault;
                game2.PlayerEmpire.ControlMilitaryAttacks = main_0.gameOptions_0.ControlAttacksOnEnemiesDefault;
                game2.PlayerEmpire.ControlMilitaryFleets = main_0.gameOptions_0.ControlFleetFormationDefault;
                game2.PlayerEmpire.ControlStateConstruction = main_0.gameOptions_0.ControlShipBuildingDefault;
                game2.PlayerEmpire.ControlTroopGeneration = main_0.gameOptions_0.ControlTroopRecruitmentDefault;
                game2.PlayerEmpire.ControlAgentAssignment = main_0.gameOptions_0.ControlAgentAssignmentDefault;
                game2.PlayerEmpire.ControlResearch = main_0.gameOptions_0.ControlResearchDefault;
                game2.PlayerEmpire.ControlColonyFacilities = main_0.gameOptions_0.ControlColonyFacilitiesDefault;
                game2.PlayerEmpire.ControlCharacterLocations = main_0.gameOptions_0.ControlCharacterLocationsDefault;
                game2.PlayerEmpire.ControlPopulationPolicy = main_0.gameOptions_0.ControlPopulationPolicyDefault;
                game2.PlayerEmpire.ControlOfferPirateMissions = main_0.gameOptions_0.ControlOfferPirateMissionsDefault;
                game2.PlayerEmpire.AttackOvermatchFactor = main_0.gameOptions_0.AttackOverMatchFactor;
                game2.PlayerEmpire.AttackRangePatrol = main_0.gameOptions_0.AttackRangePatrol;
                game2.PlayerEmpire.AttackRangeEscort = main_0.gameOptions_0.AttackRangeEscort;
                game2.PlayerEmpire.AttackRangeOther = main_0.gameOptions_0.AttackRangeOther;
                game2.PlayerEmpire.FleetAttackRefuelPortion = main_0.gameOptions_0.FleetAttackRefuelPortion;
                game2.PlayerEmpire.FleetAttackGatherPortion = main_0.gameOptions_0.FleetAttackGatherPortion;
                game2.PlayerEmpire.DiscoveryActionRuin = main_0.gameOptions_0.DiscoveryActionRuin;
                game2.PlayerEmpire.DiscoveryActionAbandonedShipBase = main_0.gameOptions_0.DiscoveryActionAbandonedShipBase;
                game2.PlayerEmpire.NewShipsAutomated = main_0.gameOptions_0.NewShipsAutomated;
                game2.DisplayMessageBuiltObjectBuilt = main_0.gameOptions_0.DisplayMessageBuiltObjectBuilt;
                game2.DisplayMessageColonyInvaded = main_0.gameOptions_0.DisplayMessageColonyInvaded;
                game2.DisplayMessageDiplomacyEmpireMetDestroyed = main_0.gameOptions_0.DisplayMessageDiplomacyEmpireMetDestroyed;
                game2.DisplayMessageDiplomacyGift = main_0.gameOptions_0.DisplayMessageDiplomacyGift;
                game2.DisplayMessageDiplomacyRequestWarning = main_0.gameOptions_0.DisplayMessageDiplomacyRequestWarning;
                game2.DisplayMessageDiplomacyTreaty = main_0.gameOptions_0.DisplayMessageDiplomacyTreaty;
                game2.DisplayMessageDiplomacyWarTradeSanctions = main_0.gameOptions_0.DisplayMessageDiplomacyWarTradeSanctions;
                game2.DisplayMessageNewColony = main_0.gameOptions_0.DisplayMessageNewColony;
                game2.DisplayMessageResearchNewComponent = main_0.gameOptions_0.DisplayMessageResearchNewComponent;
                game2.DisplayMessageIntelligenceMissions = main_0.gameOptions_0.DisplayMessageIntelligenceMissions;
                game2.DisplayMessageExploration = main_0.gameOptions_0.DisplayMessageExploration;
                game2.DisplayMessageShipMissionComplete = main_0.gameOptions_0.DisplayMessageShipMissionComplete;
                game2.DisplayMessageShipNeedsRefuelling = main_0.gameOptions_0.DisplayMessageShipNeedsRefuelling;
                game2.DisplayMessageConstructionResourceShortage = main_0.gameOptions_0.DisplayMessageConstructionResourceShortage;
                game2.DisplayPopupBuiltObjectBuilt = main_0.gameOptions_0.DisplayPopupBuiltObjectBuilt;
                game2.DisplayPopupColonyInvaded = main_0.gameOptions_0.DisplayPopupColonyInvaded;
                game2.DisplayPopupDiplomacyEmpireMetDestroyed = main_0.gameOptions_0.DisplayPopupDiplomacyEmpireMetDestroyed;
                game2.DisplayPopupDiplomacyGift = main_0.gameOptions_0.DisplayPopupDiplomacyGift;
                game2.DisplayPopupDiplomacyRequestWarning = main_0.gameOptions_0.DisplayPopupDiplomacyRequestWarning;
                game2.DisplayPopupDiplomacyTreaty = main_0.gameOptions_0.DisplayPopupDiplomacyTreaty;
                game2.DisplayPopupDiplomacyWarTradeSanctions = main_0.gameOptions_0.DisplayPopupDiplomacyWarTradeSanctions;
                game2.DisplayPopupNewColony = main_0.gameOptions_0.DisplayPopupNewColony;
                game2.DisplayPopupResearchNewComponent = main_0.gameOptions_0.DisplayPopupResearchNewComponent;
                game2.DisplayPopupIntelligenceMissions = main_0.gameOptions_0.DisplayPopupIntelligenceMissions;
                game2.DisplayPopupExploration = main_0.gameOptions_0.DisplayPopupExploration;
                game2.DisplayPopupShipMissionComplete = main_0.gameOptions_0.DisplayPopupShipMissionComplete;
                game2.DisplayPopupShipNeedsRefuelling = main_0.gameOptions_0.DisplayPopupShipNeedsRefuelling;
                game2.DisplayPopupConstructionResourceShortage = main_0.gameOptions_0.DisplayPopupConstructionResourceShortage;
                game2.DisplayMessageUnderAttackCivilianBases = main_0.gameOptions_0.DisplayMessageUnderAttackCivilianBases;
                game2.DisplayMessageUnderAttackCivilianShips = main_0.gameOptions_0.DisplayMessageUnderAttackCivilianShips;
                game2.DisplayMessageUnderAttackColoniesSpaceportsDefensiveBases = main_0.gameOptions_0.DisplayMessageUnderAttackColoniesSpaceportsDefensiveBases;
                game2.DisplayMessageUnderAttackColonyConstructionShips = main_0.gameOptions_0.DisplayMessageUnderAttackColonyConstructionShips;
                game2.DisplayMessageUnderAttackExplorationShips = main_0.gameOptions_0.DisplayMessageUnderAttackExplorationShips;
                game2.DisplayMessageUnderAttackMilitaryShips = main_0.gameOptions_0.DisplayMessageUnderAttackMilitaryShips;
                game2.DisplayMessageUnderAttackOtherStateBases = main_0.gameOptions_0.DisplayMessageUnderAttackOtherStateBases;
                game2.DisplayPopupUnderAttackCivilianBases = main_0.gameOptions_0.DisplayPopupUnderAttackCivilianBases;
                game2.DisplayPopupUnderAttackCivilianShips = main_0.gameOptions_0.DisplayPopupUnderAttackCivilianShips;
                game2.DisplayPopupUnderAttackColoniesSpaceportsDefensiveBases = main_0.gameOptions_0.DisplayPopupUnderAttackColoniesSpaceportsDefensiveBases;
                game2.DisplayPopupUnderAttackColonyConstructionShips = main_0.gameOptions_0.DisplayPopupUnderAttackColonyConstructionShips;
                game2.DisplayPopupUnderAttackExplorationShips = main_0.gameOptions_0.DisplayPopupUnderAttackExplorationShips;
                game2.DisplayPopupUnderAttackMilitaryShips = main_0.gameOptions_0.DisplayPopupUnderAttackMilitaryShips;
                game2.DisplayPopupUnderAttackOtherStateBases = main_0.gameOptions_0.DisplayPopupUnderAttackOtherStateBases;
                game2.MainViewScrollSpeed = main_0.gameOptions_0.MainViewScrollSpeed;
                game2.MainViewZoomSpeed = main_0.gameOptions_0.MainViewZoomSpeed;
                game2.MusicVolume = main_0.gameOptions_0.MusicVolume;
                game2.SoundEffectsVolume = main_0.gameOptions_0.SoundEffectsVolume;
                game2.StarFieldSize = main_0.gameOptions_0.StarFieldSize;
                game2.ShowSystemNebulae = main_0.gameOptions_0.ShowSystemNebulae;
                game2.MouseScrollWheelBehaviour = main_0.gameOptions_0.MouseScrollWheelBehaviour;
                return game2;
            }
            catch (Exception ex)
            {
                Exception ex2 = (exception_0 = ex);
            }
            return null;
        }

        private void method_83(Galaxy galaxy_0, Race race_0, double double_1, double double_2, out double double_3, out double double_4)
        {
            method_84(galaxy_0, race_0, double_1, double_2, out double_3, out double_4, bool_5: true, 1.0);
        }

        private void method_84(Galaxy galaxy_0, Race race_0, double double_1, double double_2, out double double_3, out double double_4, bool bool_5, double double_5)
        {
            GalaxyLocation galaxyLocation = galaxy_0.DetermineRaceRegion(race_0);
            if (galaxyLocation != null)
            {
                galaxy_0.CalculateGalaxyLocationMidPoint(galaxyLocation, out double_3, out double_4);
                double num = (double)galaxyLocation.Width / 2.0;
                num *= double_5;
                if (bool_5)
                {
                    double_3 += num * 2.0 * Galaxy.Rnd.NextDouble() - num;
                    double_4 += num * 2.0 * Galaxy.Rnd.NextDouble() - num;
                }
            }
            else
            {
                method_93(galaxy_0, double_1, double_2, out double_3, out double_4);
            }
        }

        private Galaxy method_85(Galaxy galaxy_0)
        {
            int num = galaxy_0.AsteroidFields.Count / 4;
            bool[] array = new bool[galaxy_0.AsteroidFields.Count];
            int num2 = 0;
            int num3 = 0;
            Design design = null;
            for (int i = 0; i < num; i++)
            {
                bool flag = false;
                Habitat habitat = null;
                int num4 = 0;
                while (!flag && num4 < 50)
                {
                    int num5 = Galaxy.Rnd.Next(0, galaxy_0.AsteroidFields.Count);
                    habitat = null;
                    flag = false;
                    if (!array[num5])
                    {
                        int index = Galaxy.Rnd.Next(0, galaxy_0.AsteroidFields[num5].Count);
                        habitat = galaxy_0.AsteroidFields[num5][index];
                        flag = true;
                        array[num5] = true;
                    }
                    num4++;
                }
                if (habitat == null)
                {
                    continue;
                }
                num2 = Galaxy.Rnd.Next(0, galaxy_0.Empires.Count);
                num3 = Galaxy.Rnd.Next(0, 4);
                string text = string.Empty;
                Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                BuiltObjectSubRole subRole;
                if (galaxy_0.Empires.Count <= 0)
                {
                    num3 = 3;
                    subRole = BuiltObjectSubRole.Undefined;
                    //int num6 = 3;
                }
                else
                {
                    subRole = BuiltObjectSubRole.Undefined;
                    switch (num3)
                    {
                        case 0:
                            design = galaxy_0.Empires[num2].Designs.FindNewest(BuiltObjectSubRole.Frigate);
                            subRole = BuiltObjectSubRole.Frigate;
                            if (design != null && design.WarpSpeed <= 0)
                            {
                                design = null;
                            }
                            text = galaxy_0.SelectRandomUniqueMilitaryShipName(null);
                            goto IL_028e;
                        case 1:
                            design = galaxy_0.Empires[num2].Designs.FindNewest(BuiltObjectSubRole.MiningStation);
                            subRole = BuiltObjectSubRole.MiningStation;
                            text = string.Format(TextResolver.GetText("NAME Mining Station"), habitat2.Name);
                            goto IL_028e;
                        case 2:
                            {
                                design = galaxy_0.Empires[num2].Designs.FindNewest(BuiltObjectSubRole.SmallSpacePort);
                                subRole = BuiltObjectSubRole.SmallSpacePort;
                                text = habitat2.Name + " ";
                                string[] array2 = new string[5]
                                {
                        TextResolver.GetText("Outpost"),
                        TextResolver.GetText("Depot"),
                        TextResolver.GetText("Station"),
                        TextResolver.GetText("Base"),
                        TextResolver.GetText("Facility")
                                };
                                string text2 = array2[Galaxy.Rnd.Next(0, array2.Length)];
                                text += text2;
                                goto IL_028e;
                            }
                        case 3:
                            break;
                        default:
                            goto IL_028e;
                    }
                }
                if (galaxy_0.PirateEmpires != null && galaxy_0.PirateEmpires.Count > 0)
                {
                    int index2 = Galaxy.Rnd.Next(0, galaxy_0.PirateEmpires.Count);
                    design = galaxy_0.PirateEmpires[index2].Designs.FindNewest(BuiltObjectSubRole.SmallSpacePort);
                    text = galaxy_0.GeneratePirateBaseName(null);
                }
                goto IL_028e;
            IL_028e:
                if (design == null)
                {
                    Empire empire = null;
                    for (int j = 0; j < galaxy_0.PirateEmpires.Count; j++)
                    {
                        if (galaxy_0.PirateEmpires[j] != galaxy_0.PlayerEmpire)
                        {
                            empire = galaxy_0.PirateEmpires[j];
                            break;
                        }
                    }
                    if (empire != null)
                    {
                        design = empire.GenerateDesignFromSpec(Galaxy.DesignSpecifications.GetBySubRole(subRole), 2.0);
                    }
                }
                bool flag2 = false;
                BuiltObjectEncounterAction encounterAction = BuiltObjectEncounterAction.Prompt;
                if (Galaxy.Rnd.Next(0, 2) == 1)
                {
                    flag2 = true;
                    encounterAction = BuiltObjectEncounterAction.Notify;
                }
                if (design == null)
                {
                    continue;
                }
                design = design.Clone();
                if (design.SubRole == BuiltObjectSubRole.SmallSpacePort || design.SubRole == BuiltObjectSubRole.MediumSpacePort || design.SubRole == BuiltObjectSubRole.LargeSpacePort)
                {
                    galaxy_0.AddCargoBaysToDesign(design, 10);
                }
                design.PictureRef = ShipImageHelper.ResolveMinorShipImageIndex(design.SubRole, largeShips: true);
                BuiltObject builtObject = galaxy_0.GenerateAbandonedBuiltObject(habitat, design, allowCreatures: true, !flag2, encounterAction);
                builtObject.IsAutoControlled = true;
                if (!string.IsNullOrEmpty(text))
                {
                    builtObject.Name = text;
                }
                if (flag2)
                {
                    int num7 = Galaxy.Rnd.Next(4, builtObject.Components.Count - 1);
                    for (int k = 0; k < num7; k++)
                    {
                        int index3 = Galaxy.Rnd.Next(0, builtObject.Components.Count);
                        builtObject.Components[index3].Status = ComponentStatus.Damaged;
                        builtObject.ReDefine();
                        builtObject.CurrentFuel = (double)builtObject.FuelCapacity * 0.2 + Galaxy.Rnd.NextDouble() * 0.7 * (double)builtObject.FuelCapacity;
                    }
                }
                if (Galaxy.Rnd.Next(0, 3) == 1)
                {
                    switch (Galaxy.Rnd.Next(0, 3))
                    {
                        case 0:
                            builtObject.EncounterExplorationBonus = (short)Galaxy.Rnd.Next(4, 9);
                            break;
                        case 1:
                            builtObject.EncounterMoneyBonus = Galaxy.Rnd.Next(5000, 15000);
                            break;
                        case 2:
                            builtObject.EncounterTechAdvanceCount = 1;
                            break;
                    }
                }
            }
            return galaxy_0;
        }

        private void method_86(Galaxy galaxy_0)
        {
            int num = (int)(Math.Sqrt(galaxy_0.StarCount) * 0.3);
            int num2 = 0;
            int num3 = 0;
            while (num2 < num && num3 < 5000)
            {
                method_93(galaxy_0, 0.0, 1.05, out var double_, out var double_2);
                Habitat habitat = galaxy_0.FindNearestColony(double_, double_2, null, 0, includeIndependentColonies: false);
                Habitat habitat2 = null;
                Design design = null;
                int num4 = Galaxy.Rnd.Next(0, 3);
                DesignSpecification designSpecification = null;
                switch (num4)
                {
                    case 0:
                        designSpecification = Galaxy.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate);
                        break;
                    case 1:
                        designSpecification = Galaxy.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer);
                        break;
                    case 2:
                        designSpecification = Galaxy.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser);
                        break;
                }
                if (designSpecification != null)
                {
                    design = galaxy_0.PlayerEmpire.GenerateDesignFromSpec(designSpecification, 7.0);
                    design.Empire = null;
                }
                habitat2 = galaxy_0.FindNearestHabitat(double_, double_2);
                habitat = galaxy_0.FindNearestColony(habitat2.Xpos, habitat2.Xpos, null, 0, includeIndependentColonies: false);
                double num5 = galaxy_0.CalculateDistance(habitat2.Xpos, habitat2.Ypos, habitat.Xpos, habitat.Ypos);
                if (num5 > (double)Galaxy.MaxSolarSystemSize * 2.1 && design != null)
                {
                    bool flag = true;
                    if (design.Role == BuiltObjectRole.Base)
                    {
                        BuiltObject builtObject = galaxy_0.FindNearestBuiltObject((int)habitat2.Xpos, (int)habitat2.Ypos, BuiltObjectRole.Base);
                        double num6 = galaxy_0.CalculateDistance(habitat2.Xpos, habitat2.Ypos, builtObject.Xpos, builtObject.Ypos);
                        if (num6 < 500.0)
                        {
                            flag = false;
                        }
                    }
                    if (flag)
                    {
                        design.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.ShakturiFamily, design.SubRole, aged: false);
                        BuiltObject builtObject2 = galaxy_0.GenerateAbandonedBuiltObject(habitat2, design, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Prompt);
                        builtObject2.EncounterDescription = TextResolver.GetText("Shakturi Ship Encounter");
                        num2++;
                    }
                }
                num3++;
            }
        }

        private Galaxy method_87(Galaxy galaxy_0)
        {
            int num = (int)(Math.Sqrt(galaxy_0.StarCount) * 0.7);
            int num2 = 0;
            int num3 = 0;
            while (num2 < num && num3 < 5000)
            {
                method_93(galaxy_0, 0.0, 1.05, out var double_, out var double_2);
                Habitat habitat = galaxy_0.FindNearestColony(double_, double_2, null, 0, includeIndependentColonies: false);
                Habitat habitat2 = null;
                Design design = null;
                int num4 = 0;
                int num5 = Galaxy.Rnd.Next(0, 4);
                BuiltObjectSubRole subRole = BuiltObjectSubRole.Undefined;
                Empire empire = null;
                if (galaxy_0.Empires.Count > 0)
                {
                    num4 = Galaxy.Rnd.Next(0, galaxy_0.Empires.Count);
                    empire = galaxy_0.Empires[num4];
                }
                else if (galaxy_0.PirateEmpires.Count > 0)
                {
                    num4 = Galaxy.Rnd.Next(0, galaxy_0.PirateEmpires.Count);
                    empire = galaxy_0.PirateEmpires[num4];
                }
                if (empire != null && empire.Designs != null)
                {
                    switch (num5)
                    {
                        case 0:
                            {
                                Resource resource = null;
                                if (Galaxy.Rnd.Next(0, 2) == 1)
                                {
                                    if (galaxy_0.ResourceSystem.MineralStrategicResources.Count > 0)
                                    {
                                        int index = Galaxy.Rnd.Next(0, galaxy_0.ResourceSystem.MineralStrategicResources.Count);
                                        resource = new Resource(galaxy_0.ResourceSystem.MineralStrategicResources[index].ResourceID);
                                        design = empire.Designs.FindNewest(BuiltObjectSubRole.MiningStation);
                                        subRole = BuiltObjectSubRole.MiningStation;
                                    }
                                }
                                else if (galaxy_0.ResourceSystem.GasStrategicResources.Count > 0)
                                {
                                    int index2 = Galaxy.Rnd.Next(0, galaxy_0.ResourceSystem.GasStrategicResources.Count);
                                    resource = new Resource(galaxy_0.ResourceSystem.GasStrategicResources[index2].ResourceID);
                                    design = empire.Designs.FindNewest(BuiltObjectSubRole.GasMiningStation);
                                    subRole = BuiltObjectSubRole.GasMiningStation;
                                }
                                if (resource != null)
                                {
                                    habitat2 = galaxy_0.FindNearestHabitatWithResource(double_, double_2, resource.ResourceID);
                                }
                                break;
                            }
                        case 1:
                            design = empire.Designs.FindNewest(BuiltObjectSubRole.ColonyShip);
                            if (design != null && design.WarpSpeed <= 0)
                            {
                                design = null;
                            }
                            subRole = BuiltObjectSubRole.ColonyShip;
                            habitat2 = galaxy_0.FindNearestHabitat(double_, double_2);
                            break;
                        case 2:
                            switch (Galaxy.Rnd.Next(0, 3))
                            {
                                case 0:
                                    design = empire.Designs.FindNewest(BuiltObjectSubRole.Destroyer);
                                    subRole = BuiltObjectSubRole.Destroyer;
                                    break;
                                case 1:
                                    design = empire.Designs.FindNewest(BuiltObjectSubRole.Cruiser);
                                    subRole = BuiltObjectSubRole.Cruiser;
                                    break;
                                case 2:
                                    design = empire.Designs.FindNewest(BuiltObjectSubRole.CapitalShip);
                                    subRole = BuiltObjectSubRole.CapitalShip;
                                    break;
                            }
                            if (design != null && design.WarpSpeed <= 0)
                            {
                                design = null;
                            }
                            habitat2 = galaxy_0.FindNearestHabitat(double_, double_2);
                            break;
                        case 3:
                            {
                                DesignSpecification monitoringStationDesignSpec = empire.GetMonitoringStationDesignSpec();
                                design = empire.GenerateDesignFromSpec(monitoringStationDesignSpec, 3.0);
                                subRole = BuiltObjectSubRole.MonitoringStation;
                                design.Name = TextResolver.GetText("Monitoring Station");
                                habitat2 = galaxy_0.FindNearestHabitat(double_, double_2);
                                break;
                            }
                    }
                }
                if (design == null)
                {
                    Empire empire2 = null;
                    for (int i = 0; i < galaxy_0.PirateEmpires.Count; i++)
                    {
                        if (galaxy_0.PirateEmpires[i] != galaxy_0.PlayerEmpire)
                        {
                            empire2 = galaxy_0.PirateEmpires[i];
                            break;
                        }
                    }
                    if (empire2 != null)
                    {
                        design = empire2.GenerateDesignFromSpec(Galaxy.DesignSpecifications.GetBySubRole(subRole), 2.0);
                    }
                }
                if (design != null && habitat2 != null)
                {
                    habitat = galaxy_0.FindNearestColony(habitat2.Xpos, habitat2.Xpos, null, 0, includeIndependentColonies: false);
                    if (habitat != null)
                    {
                        double num6 = galaxy_0.CalculateDistance(habitat2.Xpos, habitat2.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num6 > (double)Galaxy.MaxSolarSystemSize * 2.1)
                        {
                            bool flag = true;
                            if (design.Role == BuiltObjectRole.Base)
                            {
                                BuiltObject builtObject = galaxy_0.FindNearestBuiltObject((int)habitat2.Xpos, (int)habitat2.Ypos, BuiltObjectRole.Base);
                                if (builtObject != null)
                                {
                                    double num7 = galaxy_0.CalculateDistance(habitat2.Xpos, habitat2.Ypos, builtObject.Xpos, builtObject.Ypos);
                                    if (num7 < 500.0)
                                    {
                                        flag = false;
                                    }
                                }
                            }
                            if (flag)
                            {
                                design = design.Clone();
                                design.PictureRef = ShipImageHelper.ResolveMinorShipImageIndex(design.SubRole, largeShips: true);
                                galaxy_0.GenerateAbandonedBuiltObject(habitat2, design);
                                num2++;
                            }
                        }
                    }
                    else
                    {
                        num2++;
                    }
                }
                num3++;
            }
            return galaxy_0;
        }

        private HabitatList method_88(Galaxy galaxy_0, Empire empire_0, HabitatList habitatList_0)
        {
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = new HabitatList();
            habitatList.Add(empire_0.Capital);
            habitatList2.Add(Galaxy.DetermineHabitatSystemStar(empire_0.Capital));
            foreach (Habitat item2 in habitatList_0)
            {
                Habitat item = Galaxy.DetermineHabitatSystemStar(item2);
                if (!habitatList2.Contains(item))
                {
                    habitatList2.Add(item);
                }
            }
            foreach (Habitat item3 in habitatList2)
            {
                Habitat habitat = null;
                long num = 0L;
                foreach (Habitat item4 in habitatList_0)
                {
                    if (Galaxy.DetermineHabitatSystemStar(item4) == item3 && item4.MaximumPopulation > num)
                    {
                        habitat = item4;
                        num = item4.MaximumPopulation;
                    }
                }
                if (habitat != null)
                {
                    habitatList.Add(habitat);
                }
            }
            return habitatList;
        }

        private double method_89(int int_1)
        {
            double num = 0.0;
            Random random = new Random((int)DateTime.Now.Ticks);
            double num2 = 1.0;
            double num3 = 6.99;
            switch (int_1)
            {
                case 0:
                    num2 = 0.0;
                    num3 = 0.0;
                    break;
                case 1:
                    num2 = 0.5;
                    num3 = 0.5;
                    break;
                case 2:
                    num2 = 1.0;
                    num3 = 1.99;
                    break;
                case 3:
                    num2 = 1.0;
                    num3 = 2.99;
                    break;
                case 4:
                    num2 = 2.0;
                    num3 = 3.99;
                    break;
                case 5:
                    num2 = 3.0;
                    num3 = 4.99;
                    break;
                case 6:
                    num2 = 4.0;
                    num3 = 5.99;
                    break;
            }
            num = num2 + random.NextDouble() * (num3 - num2);
            if (int_1 == 1)
            {
                num = 0.5;
            }
            return num;
        }

        private bool method_90(double double_1, double double_2)
        {
            if (!(double_1 < 0.0) && double_2 >= 0.0)
            {
                if (!(double_1 > (double)Galaxy.SizeX) && double_2 <= (double)Galaxy.SizeY)
                {
                    return true;
                }
                return false;
            }
            return false;
        }

        private void method_91(Galaxy galaxy_0, double double_1, double double_2, double double_3, double double_4, out double double_5, out double double_6)
        {
            double num = Galaxy.Rnd.NextDouble() * double_4;
            double num2 = Math.Cos(double_1) * num;
            double num3 = Math.Sin(double_1) * num;
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num2 *= -1.0;
            }
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num3 *= -1.0;
            }
            double_5 = double_2 + num2;
            double_6 = double_3 + num3;
        }

        private void method_92(Galaxy galaxy_0, double double_1, double double_2, double double_3, double double_4, out double double_5, out double double_6)
        {
            double num = Math.Cos(double_1) * double_4;
            double num2 = Math.Sin(double_1) * double_4;
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num *= -1.0;
            }
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num2 *= -1.0;
            }
            double_5 = double_2 + num;
            double_6 = double_3 + num2;
        }

        private void method_93(Galaxy galaxy_0, double double_1, double double_2, out double double_3, out double double_4)
        {
            double num = (double)Galaxy.SizeX / 2.0;
            double num2 = (double)Galaxy.SizeY / 2.0;
            double num3 = (double)Galaxy.SizeX / 2.0;
            double num4 = num3 * double_1;
            double num5 = Galaxy.Rnd.NextDouble() * num3 * (double_2 - double_1);
            double num6 = num4 + num5;
            double num7 = Galaxy.Rnd.NextDouble() * Math.PI * 2.0;
            double num8 = Math.Cos(num7) * num6;
            double num9 = Math.Sin(num7) * num6;
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num8 *= -1.0;
            }
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num9 *= -1.0;
            }
            double_3 = num + num8;
            double_4 = num2 + num9;
        }

        private Bitmap method_94(string string_2)
        {
            Bitmap bitmap = null;
            if (string_2 == TextResolver.GetText("Elliptical"))
            {
                bitmap = bitmap_4;
            }
            else if (string_2 == TextResolver.GetText("Spiral"))
            {
                bitmap = bitmap_5;
            }
            else if (string_2 == TextResolver.GetText("Ring"))
            {
                bitmap = bitmap_6;
            }
            else if (string_2 == TextResolver.GetText("Irregular"))
            {
                bitmap = bitmap_7;
            }
            else if (string_2 == TextResolver.GetText("Even Clusters"))
            {
                bitmap = bitmap_8;
            }
            else if (string_2 == TextResolver.GetText("Varied Clusters"))
            {
                bitmap = bitmap_9;
            }
            Bitmap result = null;
            if (bitmap != null)
            {
                result = new Bitmap(bitmap);
            }
            return result;
        }

        private string method_95()
        {
            string result = string.Empty;
            if (cmbYourEmpireStartLocation.SelectedItem != null)
            {
                string text = cmbYourEmpireStartLocation.SelectedItem.ToString();
                result = ((!(text == "(" + TextResolver.GetText("Random") + ")")) ? text : TextResolver.GetText("random location"));
            }
            return result;
        }

        private void cmbYourEmpireStartLocation_SelectedIndexChanged(object sender, EventArgs e)
        {
            string text = cmbYourEmpireStartLocation.SelectedItem.ToString();
            double num = 0.0;
            double num2 = 0.0;
            if (text == TextResolver.GetText("Deep Core"))
            {
                num = 0.0;
                num2 = 0.29;
            }
            else if (text == TextResolver.GetText("Outer Core"))
            {
                num = 0.29;
                num2 = 0.19;
            }
            else if (text == TextResolver.GetText("Inner Rim"))
            {
                num = 0.48;
                num2 = 0.38;
            }
            else if (text == TextResolver.GetText("Outer Rim"))
            {
                num = 0.86;
                num2 = 0.14;
            }
            else if (text == TextResolver.GetText("Far Regions"))
            {
                num = 0.48;
                num2 = 0.52;
            }
            else if (text == TextResolver.GetText("Core"))
            {
                num = 0.0;
                num2 = 0.29;
            }
            else if (text == TextResolver.GetText("Void"))
            {
                num = 0.29;
                num2 = 0.53;
            }
            else if (text == TextResolver.GetText("Rim"))
            {
                num = 0.82;
                num2 = 0.18;
            }
            else if (text == TextResolver.GetText("Center"))
            {
                num = 0.0;
                num2 = 0.48;
            }
            else if (text == TextResolver.GetText("Edge"))
            {
                num = 0.48;
                num2 = 0.96;
            }
            else if (text == "(" + TextResolver.GetText("Random") + ")")
            {
                num = 0.0;
                num2 = ((radStartNewGameGalaxyShapeIrregular.Checked || radStartNewGameGalaxyShapeClustersEven.Checked || radStartNewGameGalaxyShapeClustersVaried.Checked) ? 1.44 : 1.0);
            }
            picStartNewGameYourEmpireGalaxyLocation.SizeMode = PictureBoxSizeMode.Zoom;
            picStartNewGameYourEmpireGalaxyLocation.Image = method_94(method_96());
            if (picStartNewGameYourEmpireGalaxyLocation.Image != null)
            {
                Graphics graphics = Graphics.FromImage(picStartNewGameYourEmpireGalaxyLocation.Image);
                graphics.SmoothingMode = SmoothingMode.AntiAlias;
                int num3 = (int)(num2 * (double)(picStartNewGameYourEmpireGalaxyLocation.Image.Width / 2));
                int num4 = (int)(num * (double)(picStartNewGameYourEmpireGalaxyLocation.Image.Width / 2));
                int num5 = picStartNewGameYourEmpireGalaxyLocation.Image.Width / 2 - (num4 + num3);
                int num6 = (num4 + num3) * 2;
                num5 += num3 / 2;
                num6 -= num3;
                Rectangle rect = new Rectangle(num5, num5, num6, num6);
                Pen pen = new Pen(solidBrush_0, num3);
                graphics.DrawArc(pen, rect, 0f, 360f);
            }
        }

        private string method_96()
        {
            string result = TextResolver.GetText("Elliptical");
            if (radStartNewGameGalaxyShapeIrregular.Checked)
            {
                result = TextResolver.GetText("Irregular");
            }
            else if (radStartNewGameGalaxyShapeElliptical.Checked)
            {
                result = TextResolver.GetText("Elliptical");
            }
            else if (radStartNewGameGalaxyShapeRing.Checked)
            {
                result = TextResolver.GetText("Ring");
            }
            else if (radStartNewGameGalaxyShapeSpiral.Checked)
            {
                result = TextResolver.GetText("Spiral");
            }
            else if (radStartNewGameGalaxyShapeClustersEven.Checked)
            {
                result = TextResolver.GetText("Even Clusters");
            }
            else if (radStartNewGameGalaxyShapeClustersVaried.Checked)
            {
                result = TextResolver.GetText("Varied Clusters");
            }
            return result;
        }

        private string method_97()
        {
            string result = TextResolver.GetText("Elliptical");
            if (radJumpStartGalaxyShapeIrregular.Checked)
            {
                result = TextResolver.GetText("Irregular");
            }
            else if (radJumpStartGalaxyShapeElliptical.Checked)
            {
                result = TextResolver.GetText("Elliptical");
            }
            else if (radJumpStartGalaxyShapeRing.Checked)
            {
                result = TextResolver.GetText("Ring");
            }
            else if (radJumpStartGalaxyShapeSpiral.Checked)
            {
                result = TextResolver.GetText("Spiral");
            }
            else if (radJumpStartGalaxyShapeEvenClusters.Checked)
            {
                result = TextResolver.GetText("Even Clusters");
            }
            else if (radJumpStartGalaxyShapeVariedClusters.Checked)
            {
                result = TextResolver.GetText("Varied Clusters");
            }
            return result;
        }

        private void cmbFlagShape_DrawItem(object sender, DrawItemEventArgs e)
        {
            e.DrawBackground();
            Bitmap smallFlagPicture = null;
            Bitmap largeFlagPicture = null;
            Color selectedColor = cmbPrimaryColor.SelectedColor;
            Color selectedColor2 = cmbSecondaryColor.SelectedColor;
            if (selectedColor == selectedColor2)
            {
                if (bool_2)
                {
                    Galaxy.GenerateEmpireFlag(Color.Gray, Color.White, e.Index, Galaxy.FlagShapesPirates, ref smallFlagPicture, ref largeFlagPicture);
                }
                else
                {
                    Galaxy.GenerateEmpireFlag(Color.Gray, Color.White, e.Index, Galaxy.FlagShapes, ref smallFlagPicture, ref largeFlagPicture);
                }
            }
            else if (bool_2)
            {
                Galaxy.GenerateEmpireFlag(selectedColor, selectedColor2, e.Index, Galaxy.FlagShapesPirates, ref smallFlagPicture, ref largeFlagPicture);
            }
            else
            {
                Galaxy.GenerateEmpireFlag(selectedColor, selectedColor2, e.Index, Galaxy.FlagShapes, ref smallFlagPicture, ref largeFlagPicture);
            }
            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
            e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            int num = e.Bounds.Height - 2;
            int num2 = (int)((double)num / 0.6);
            int num3 = (e.Bounds.Width - num2) / 2;
            int num4 = e.Bounds.Y + 1;
            Rectangle rect = new Rectangle(num3, num4, num2, num);
            e.Graphics.DrawImage(largeFlagPicture, rect);
            e.DrawFocusRectangle();
            largeFlagPicture.Dispose();
            smallFlagPicture.Dispose();
        }

        private void cmbFlagShape_MeasureItem(object sender, MeasureItemEventArgs e)
        {
            e.ItemHeight = 63;
        }

        private void method_98()
        {
            Color selectedColor = cmbPrimaryColor.SelectedColor;
            Color selectedColor2 = cmbSecondaryColor.SelectedColor;
            int selectedIndex = cmbFlagShape.SelectedIndex;
            Bitmap smallFlagPicture = null;
            Bitmap largeFlagPicture = null;
            if (bool_2)
            {
                Galaxy.GenerateEmpireFlag(selectedColor, selectedColor2, selectedIndex, Galaxy.FlagShapesPirates, ref smallFlagPicture, ref largeFlagPicture);
            }
            else
            {
                Galaxy.GenerateEmpireFlag(selectedColor, selectedColor2, selectedIndex, Galaxy.FlagShapes, ref smallFlagPicture, ref largeFlagPicture);
            }
        }

        private void method_99()
        {
            ctlStartingEmpiresList.Grid.Refresh();
            if (ctlStartingEmpiresList.Enabled)
            {
                ctlStartingEmpiresList.Grid.BackgroundColor = Color.FromArgb(48, 48, 64);
                foreach (DataGridViewRow item in (IEnumerable)ctlStartingEmpiresList.Grid.Rows)
                {
                    foreach (DataGridViewCell cell in item.Cells)
                    {
                        cell.Style = null;
                    }
                }
            }
            else
            {
                Color color = Color.FromArgb(60, 60, 80);
                Color color2 = Color.FromArgb(80, 80, 100);
                ctlStartingEmpiresList.Grid.BackgroundColor = color;
                foreach (DataGridViewRow item2 in (IEnumerable)ctlStartingEmpiresList.Grid.Rows)
                {
                    foreach (DataGridViewCell cell2 in item2.Cells)
                    {
                        cell2.Style.ForeColor = color;
                        cell2.Style.BackColor = color2;
                        cell2.Style.SelectionForeColor = color;
                        cell2.Style.SelectionBackColor = color2;
                    }
                }
            }
            ctlStartingEmpiresList.Grid.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders);
            ctlStartingEmpiresList.Grid.Refresh();
        }

        private void chkVictoryTimeLimit_CheckedChanged(object sender, EventArgs e)
        {
            if (chkVictoryTimeLimit.Checked)
            {
                numVictoryTimeLimitYears.Enabled = true;
            }
            else
            {
                numVictoryTimeLimitYears.Enabled = false;
            }
        }

        private void chkVictoryTimeStart_CheckedChanged(object sender, EventArgs e)
        {
            if (chkVictoryTimeStart.Checked)
            {
                numVictoryTimeStartYears.Enabled = true;
            }
            else
            {
                numVictoryTimeStartYears.Enabled = false;
            }
        }

        private void method_100(string string_2, string string_3)
        {
            lblHelpTitle.Text = string_2;
            lblHelpDescription.Text = string_3;
            lblHelpDescription.Location = new Point(lblHelpTitle.Width + 15, 8);
            lblHelpDescription.MaximumSize = new Size(900 - lblHelpDescription.Left, 32);
        }

        private void cmbYourEmpireStartLocation_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Start Location"), TextResolver.GetText("The approximate starting location of your empire within the galaxy"));
        }

        private void cmbFlagShape_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Flag"), TextResolver.GetText("The design of your empire's flag"));
        }

        private void chkStoryReturnOfTheShakturi_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Story Events"), TextResolver.GetText("Enables story events in the game"));
        }

        private void chkVictoryTerritory_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Territory"), TextResolver.GetText("Victory Condition Target: Control the specified percentage of all colonies in the galaxy"));
        }

        private void chkVictoryPopulation_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Population"), TextResolver.GetText("Victory Condition Target: Control the specified percentage of the galaxy's population"));
        }

        private void chkVictoryEconomy_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Economy"), TextResolver.GetText("Victory Condition Target: Your empire's private economy must generate the specified percentage of the galaxy's total income"));
        }

        private void chkVictoryTimeLimit_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Time Limit"), TextResolver.GetText("The game will finish after the specified number of years have passed"));
        }

        private void chkVictoryTimeStart_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Start Time"), TextResolver.GetText("Victory Conditions will not apply until the specified number of years have passed"));
        }

        private void nOoJoHmYfo(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Time Limit Years"), TextResolver.GetText("The winning empire will be determined after this many years have passed"));
        }

        private void numVictoryTimeStartYears_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Start Time Years"), TextResolver.GetText("Victory Conditions will not apply until this many years have passed"));
        }

        private void ijvJztcJac(object sender, EventArgs e)
        {
            if (bool_2)
            {
                method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Pirate-specific Conditions"), TextResolver.GetText("Enables Pirate-specific Victory Conditions in the game"));
            }
            else
            {
                method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Race-specific Conditions"), TextResolver.GetText("Enables Race-specific Victory Conditions in the game"));
            }
        }

        private void cmbVictoryPiratePlayStyle_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Pirate Playstyle"), TextResolver.GetText("Determines the play focus and pirate victory conditions for your pirate empire"));
        }

        private void cmbVictoryPiratePlayStyle_SelectedIndexChanged(object sender, EventArgs e)
        {
            PiratePlayStyle piratePlayStyle_ = PiratePlayStyle.Balanced;
            switch (cmbVictoryPiratePlayStyle.SelectedIndex)
            {
                case 0:
                    piratePlayStyle_ = PiratePlayStyle.Balanced;
                    break;
                case 1:
                    piratePlayStyle_ = PiratePlayStyle.Pirate;
                    break;
                case 2:
                    piratePlayStyle_ = PiratePlayStyle.Mercenary;
                    break;
                case 3:
                    piratePlayStyle_ = PiratePlayStyle.Smuggler;
                    break;
            }
            method_101(piratePlayStyle_, bool_5: false);
        }

        private void method_101(PiratePlayStyle piratePlayStyle_0, bool bool_5)
        {
            string text = string.Empty;
            List<string> list = new List<string>();
            List<double> factorValues = new List<double>();
            List<bool> modifiersAreBonuses = new List<bool>();
            switch (piratePlayStyle_0)
            {
                case PiratePlayStyle.Balanced:
                    text = TextResolver.GetText("Pirate Playstyle Description Balanced");
                    list = Galaxy.ResolvePirateFactionModifierDescriptions(PiratePlayStyle.Balanced, out factorValues, out modifiersAreBonuses);
                    break;
                case PiratePlayStyle.Pirate:
                    text = TextResolver.GetText("Pirate Playstyle Description Pirate");
                    list = Galaxy.ResolvePirateFactionModifierDescriptions(PiratePlayStyle.Pirate, out factorValues, out modifiersAreBonuses);
                    break;
                case PiratePlayStyle.Mercenary:
                    text = TextResolver.GetText("Pirate Playstyle Description Mercenary");
                    list = Galaxy.ResolvePirateFactionModifierDescriptions(PiratePlayStyle.Mercenary, out factorValues, out modifiersAreBonuses);
                    break;
                case PiratePlayStyle.Smuggler:
                    text = TextResolver.GetText("Pirate Playstyle Description Smuggler");
                    list = Galaxy.ResolvePirateFactionModifierDescriptions(PiratePlayStyle.Smuggler, out factorValues, out modifiersAreBonuses);
                    break;
            }
            if (list.Count > 0)
            {
                text += "\n";
                for (int i = 0; i < list.Count; i++)
                {
                    text = text + "\n" + list[i];
                }
            }
            if (bool_5)
            {
                lblJumpStartPiratePlaystyleDescription.Text = text;
            }
            else
            {
                lblPiratePlaystyleDescription.Text = text;
            }
            if (bool_5)
            {
                Bitmap bitmap = (Bitmap)picJumpStartYourEmpirePiratePlaystyle.Image;
                Bitmap image = main_0.method_119(null, cmbJumpStartYourEmpireRace.SelectedRace, picJumpStartYourEmpirePiratePlaystyle.Width, picJumpStartYourEmpirePiratePlaystyle.Height, main_0.bitmap_31, 6, bool_28: true, piratePlayStyle_0);
                picJumpStartYourEmpirePiratePlaystyle.Image = image;
                if (bitmap != null && bitmap.PixelFormat != 0)
                {
                    bitmap.Dispose();
                }
            }
            else
            {
                Bitmap bitmap2 = (Bitmap)picStartNewGameYourEmpirePiratePlaystyle.Image;
                Bitmap image2 = main_0.method_119(null, cmbStartNewGameYourEmpireRace.SelectedRace, picStartNewGameYourEmpirePiratePlaystyle.Width, picStartNewGameYourEmpirePiratePlaystyle.Height, main_0.bitmap_31, 6, bool_28: true, piratePlayStyle_0);
                picStartNewGameYourEmpirePiratePlaystyle.Image = image2;
                if (bitmap2 != null && bitmap2.PixelFormat != 0)
                {
                    bitmap2.Dispose();
                }
            }
        }

        private void chkVictoryEnableDisasterEvents_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Disaster Events"), TextResolver.GetText("Enables various random game events, such as disasters at colonies"));
        }

        private void chkStoryShadows_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Shadows Events"), TextResolver.GetText("Enables pre-warp game events, such as triggered pirate attacks and creature outbreaks"));
        }

        private void chkStartNewGameEnableTechTrading_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Tech Trading"), TextResolver.GetText("Enables tech trading between empires in the Diplomacy screen"));
        }

        private void chkStartNewGameEnableGiantKaltors_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Giant Kaltors"), TextResolver.GetText("Allow Giant Kaltors to exist in the galaxy at the start of the game. These can be disabled to support storylines without them"));
        }

        private void chkVictoryEnableRaceSpecificEvents_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Race-specific Events"), TextResolver.GetText("Enables Race-specific Events in the game"));
        }

        private void cmbVictoryThresholdPercentage_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Victory") + ": " + TextResolver.GetText("Victory Threshold Percentage"), TextResolver.GetText("Sets the percentage of Victory Conditions that must be fulfilled to win the game"));
        }

        private void tbarStartNewGameTheGalaxyDifficulty_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Difficulty"), TextResolver.GetText("Determines difficulty and aggression of gameplay"));
        }

        private void lnkPlayScenario_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_24();
        }

        private void lnkCheckForUpdates_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            string text = "http://www.codeforce.co.nz/dwuniverse_versioncheck.asp";
            text = text + "?version=" + Application.ProductVersion;
            Process.Start(text);
        }

        private void lnkCopyright_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            Process.Start("http://www.codeforce.co.nz/");
        }

        private void btnQuickStartCancel_Click(object sender, EventArgs e)
        {
            method_25();
        }

        private int method_102(RaceList raceList_2, string string_2)
        {
            int num = 0;
            while (true)
            {
                if (num < raceList_2.Count)
                {
                    if (raceList_2[num].Name.ToLower(CultureInfo.InvariantCulture) == string_2.ToLower(CultureInfo.InvariantCulture))
                    {
                        break;
                    }
                    num++;
                    continue;
                }
                return -1;
            }
            return num;
        }

        private int method_103(Galaxy galaxy_0, string string_2)
        {
            return method_102(galaxy_0.Races, string_2);
        }

        private void btnQuickStart_Click(object sender, EventArgs e)
        {
            method_140();
            bool_3 = false;
            bool_2 = false;
            string text = "(" + TextResolver.GetText("Random") + ")";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            int num = 0;
            int num2 = 0;
            bool flag = true;
            double num3 = 0.65;
            int num4 = 400;
            double num5 = 0.6;
            double num6 = 0.6;
            int num7 = 1;
            double num8 = meEawywtba(2);
            string string_ = TextResolver.GetText("Starting");
            double num9 = 1.1;
            EmpireStart empireStart = null;
            EmpireStartList empireStartList = null;
            VictoryConditions victoryConditions = null;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            string customizationSetName = string.Empty;
            if (main_0.gameOptions_0 != null)
            {
                customizationSetName = main_0.gameOptions_0.CustomizationSetName;
            }
            RaceList raceList = Galaxy.LoadRaces(Application.StartupPath, customizationSetName);
            raceList = raceList.ResolvePlayableRaces();
            string string_2 = text;
            Race selectedRace = cmbQuickStartRace.SelectedRace;
            if (selectedRace != null)
            {
                string_2 = selectedRace.Name;
            }
            Random random = new Random((int)DateTime.Now.Ticks);
            if (radioRandom.Checked)
            {
                num = random.Next(200, 700);
                num2 = 0;
                if (num <= 200)
                {
                    num2 = 12;
                    num3 = 0.82;
                }
                else if (num > 400)
                {
                    num2 = ((num <= 600) ? 18 : ((num > 800) ? 20 : 20));
                }
                else
                {
                    num2 = 15;
                    num3 = 0.74;
                }
                int num10 = random.Next(10, num2);
                string string_3 = method_58(method_57(text));
                string string_4 = method_55(method_54(text));
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, method_109(string_3, random), string_2, method_108(string_4, random), text, text, random);
                for (int i = 0; i < num10; i++)
                {
                    EmpireStart item3 = method_112(empireStart, empireStartList, method_109(string_3, random), method_108(string_4, random), random);
                    empireStartList.Add(item3);
                }
                num8 = meEawywtba(2);
                num9 = 0.9 + random.NextDouble() * 0.8;
                EmpireStartList empireStartList2 = new EmpireStartList();
                empireStartList2.Add(empireStart);
                empireStartList2.AddRange(empireStartList);
                victoryConditions = method_107(num2, empireStartList2, random);
                num4 = random.Next(100, 500);
                string_ = text;
            }
            else if (radioConflict.Checked)
            {
                num = 500;
                num2 = 20;
                num3 = 0.74;
                int num11 = random.Next(15, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Expanding"), string_2, string.Format(TextResolver.GetText("Level X"), "2"), text, text, random);
                empireStart.StartLocation = TextResolver.GetText("Outer Core");
                for (int j = 0; j < num11; j++)
                {
                    if (random.Next(0, 3) == 1)
                    {
                        EmpireStart item4 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "2"), random);
                        empireStartList.Add(item4);
                    }
                    else
                    {
                        EmpireStart item5 = method_113(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "2"), text, TextResolver.GetText("Nearby"), random);
                        empireStartList.Add(item5);
                    }
                }
                num8 = meEawywtba(1);
                num9 = 1.9;
                num6 = 1.0;
                victoryConditions = method_106(num2);
                num4 = random.Next(100, 500);
                string_ = TextResolver.GetText("Expanding");
                flag2 = true;
            }
            else if (radioRingRace.Checked)
            {
                num = 500;
                num2 = 20;
                num3 = 0.74;
                int num12 = random.Next(15, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Young"), string_2, string.Format(TextResolver.GetText("Level X"), "2"), TextResolver.GetText("Rim"), text, random);
                for (int k = 0; k < num12; k++)
                {
                    string string_5 = TextResolver.GetText("Rim");
                    if (random.Next(0, 10) == 1)
                    {
                        string_5 = TextResolver.GetText("Core");
                    }
                    EmpireStart item6 = method_113(empireStart, empireStartList, method_56(TextResolver.GetText("Young"), random), string.Format(TextResolver.GetText("Level X"), "2"), string_5, text, random);
                    empireStartList.Add(item6);
                }
                num8 = meEawywtba(2);
                num9 = 1.3;
                victoryConditions = method_106(num2);
                galaxyShape = GalaxyShape.Ring;
                num4 = random.Next(200, 500);
                string_ = TextResolver.GetText("Young");
            }
            else if (radioSmall.Checked)
            {
                num = 150;
                num2 = 15;
                num3 = 1.0;
                int num13 = random.Next(10, 15);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Expanding"), string_2, string.Format(TextResolver.GetText("Level X"), "2"), text, text, random);
                for (int l = 0; l < num13; l++)
                {
                    EmpireStart item7 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "2"), random);
                    empireStartList.Add(item7);
                }
                num8 = meEawywtba(2);
                num9 = 1.3;
                victoryConditions = method_106(num2);
                num4 = random.Next(200, 500);
                string_ = TextResolver.GetText("Expanding");
            }
            else if (radioExpandingFromTheCore.Checked)
            {
                num = 700;
                num2 = 20;
                int num14 = random.Next(15, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Expanding"), string_2, string.Format(TextResolver.GetText("Level X"), "2"), TextResolver.GetText("Deep Core"), text, random);
                for (int m = 0; m < num14; m++)
                {
                    EmpireStart item8 = method_113(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "2"), TextResolver.GetText("Deep Core"), TextResolver.GetText("Nearby"), random);
                    empireStartList.Add(item8);
                }
                num8 = meEawywtba(2);
                num9 = 1.1;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Expanding");
            }
            else if (radioExpandingSettlements.Checked)
            {
                num = 700;
                num2 = 20;
                int num15 = random.Next(15, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Mature"), string_2, string.Format(TextResolver.GetText("Level X"), "3"), text, text, random);
                for (int n = 0; n < num15; n++)
                {
                    EmpireStart item9 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Mature"), random), string.Format(TextResolver.GetText("Level X"), "3"), random);
                    empireStartList.Add(item9);
                }
                num8 = meEawywtba(2);
                num9 = 1.3;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Mature");
            }
            else if (radioFullyDevelopedSmall.Checked)
            {
                num = 400;
                num2 = 20;
                num3 = 0.74;
                int num16 = random.Next(16, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Old"), string_2, string.Format(TextResolver.GetText("Level X"), "4"), text, text, random);
                for (int num17 = 0; num17 < num16; num17++)
                {
                    EmpireStart item10 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Old"), random), string.Format(TextResolver.GetText("Level X"), "4"), random);
                    empireStartList.Add(item10);
                }
                num8 = meEawywtba(2);
                num9 = 1.1;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Old");
            }
            else if (radioFullyDevelopedStandard.Checked)
            {
                num = 700;
                num2 = 20;
                int num18 = random.Next(17, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Old"), string_2, string.Format(TextResolver.GetText("Level X"), "4"), text, text, random);
                for (int num19 = 0; num19 < num18; num19++)
                {
                    EmpireStart item11 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Old"), random), string.Format(TextResolver.GetText("Level X"), "4"), random);
                    empireStartList.Add(item11);
                }
                num8 = meEawywtba(2);
                num9 = 1.1;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Old");
            }
            else if (radioFullyDevelopedLarge.Checked)
            {
                num = 1000;
                num2 = 20;
                int num20 = random.Next(17, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Old"), string_2, string.Format(TextResolver.GetText("Level X"), "4"), text, text, random);
                for (int num21 = 0; num21 < num20; num21++)
                {
                    EmpireStart item12 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Old"), random), string.Format(TextResolver.GetText("Level X"), "4"), random);
                    empireStartList.Add(item12);
                }
                num8 = meEawywtba(2);
                num9 = 1.1;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Old");
            }
            else if (radioEpic.Checked)
            {
                num = 1000;
                num2 = 20;
                int num22 = random.Next(17, 20);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Starting"), string_2, TextResolver.GetText("Normal"), text, text, random);
                for (int num23 = 0; num23 < num22; num23++)
                {
                    EmpireStart item13 = method_112(empireStart, empireStartList, TextResolver.GetText("Starting"), TextResolver.GetText("Normal"), random);
                    empireStartList.Add(item13);
                }
                num8 = meEawywtba(1);
                num9 = 1.1;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Starting");
            }
            else if (radioSovereignTerritoriesRegionalRuler.Checked)
            {
                num = 700;
                num2 = 20;
                int num24 = random.Next(3, 5);
                int num25 = random.Next(12, 16);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Old"), string_2, string.Format(TextResolver.GetText("Level X"), "2"), text, text, random);
                for (int num26 = 0; num26 < num24; num26++)
                {
                    EmpireStart item14 = method_112(empireStart, empireStartList, TextResolver.GetText("Old"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                    empireStartList.Add(item14);
                }
                for (int num27 = 0; num27 < num25; num27++)
                {
                    EmpireStart item15 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "2"), random);
                    empireStartList.Add(item15);
                }
                num8 = meEawywtba(2);
                num9 = 1.1;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Expanding");
            }
            else if (radioSovereignTerritoriesMinorFaction.Checked)
            {
                num = 700;
                num2 = 20;
                int num28 = random.Next(4, 6);
                int num29 = random.Next(12, 15);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Expanding"), string_2, string.Format(TextResolver.GetText("Level X"), "2"), text, text, random);
                for (int num30 = 0; num30 < num28; num30++)
                {
                    EmpireStart item16 = method_112(empireStart, empireStartList, TextResolver.GetText("Old"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                    empireStartList.Add(item16);
                }
                for (int num31 = 0; num31 < num29; num31++)
                {
                    EmpireStart item17 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "2"), random);
                    empireStartList.Add(item17);
                }
                num8 = meEawywtba(2);
                num9 = 1.1;
                victoryConditions = method_106(num2);
                num4 = 400;
                string_ = TextResolver.GetText("Expanding");
            }
            else if (radioGalacticRepublicSupremeRuler.Checked)
            {
                num = 700;
                num2 = 20;
                int num32 = random.Next(12, 16);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Supersize"), string_2, string.Format(TextResolver.GetText("Level X"), "3"), text, text, random);
                empireStart.StartLocation = TextResolver.GetText("Deep Core");
                empireStart.GovernmentStyle = TextResolver.GetText("Republic");
                empireStart.Name = "Galactic Republic";
                for (int num33 = 0; num33 < num32; num33++)
                {
                    if (random.Next(0, 3) == 1)
                    {
                        EmpireStart empireStart2 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "3"), random);
                        empireStart2.StartLocation = TextResolver.GetText("Inner Rim");
                        empireStartList.Add(empireStart2);
                    }
                    else
                    {
                        EmpireStart empireStart3 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "3"), random);
                        empireStart3.StartLocation = TextResolver.GetText("Outer Rim");
                        empireStartList.Add(empireStart3);
                    }
                }
                num8 = meEawywtba(1);
                num9 = 1.1;
                victoryConditions = method_106(num32);
                victoryConditions.EconomyPercent = 95.0;
                victoryConditions.TerritoryPercent = 95.0;
                victoryConditions.PopulationPercent = 95.0;
                num4 = 400;
                string_ = TextResolver.GetText("Expanding");
            }
            else if (radioGalacticRepublicWildFrontiers.Checked)
            {
                num = 700;
                num2 = 20;
                int num34 = random.Next(11, 15);
                empireStartList = new EmpireStartList();
                empireStart = method_114(null, empireStartList, TextResolver.GetText("Expanding"), string_2, string.Format(TextResolver.GetText("Level X"), "3"), text, text, random);
                empireStart.StartLocation = TextResolver.GetText("Outer Rim");
                EmpireStart empireStart4 = method_112(empireStart, empireStartList, TextResolver.GetText("Supersize"), string.Format(TextResolver.GetText("Level X"), "3"), random);
                empireStart4.StartLocation = TextResolver.GetText("Deep Core");
                empireStart4.GovernmentStyle = TextResolver.GetText("Republic");
                empireStart4.Name = "Galactic Republic";
                empireStartList.Add(empireStart4);
                for (int num35 = 0; num35 < num34; num35++)
                {
                    if (random.Next(0, 3) == 1)
                    {
                        empireStart4 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "3"), random);
                        empireStart4.StartLocation = TextResolver.GetText("Inner Rim");
                        empireStartList.Add(empireStart4);
                    }
                    else
                    {
                        empireStart4 = method_112(empireStart, empireStartList, method_56(TextResolver.GetText("Expanding"), random), string.Format(TextResolver.GetText("Level X"), "3"), random);
                        empireStart4.StartLocation = TextResolver.GetText("Outer Rim");
                        empireStartList.Add(empireStart4);
                    }
                }
                num8 = meEawywtba(1);
                num9 = 1.1;
                victoryConditions = method_106(num34);
                victoryConditions.EconomyPercent = 95.0;
                victoryConditions.TerritoryPercent = 95.0;
                victoryConditions.PopulationPercent = 95.0;
                num4 = 400;
                string_ = TextResolver.GetText("Expanding");
            }
            if (!method_186(num))
            {
                string text2 = string.Format(TextResolver.GetText("Your computer does not have enough memory to play a Quick Start galaxy of this size"), "700", "2Gb");
                MessageBox.Show(text2, TextResolver.GetText("Not Enough Memory for this Galaxy Size"), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            victoryConditions.EnableStoryEvents = chkQuickStartReturnOfTheShakturiStoryEvents.Checked;
            victoryConditions.EnableDisasterEvents = true;
            victoryConditions.EnableRaceSpecificEvents = true;
            victoryConditions.EnableRaceSpecificVictoryConditions = true;
            empireStart.GalaxySectorX = 10;
            empireStart.GalaxySectorY = 10;
            string string_6 = string.Empty;
            if (selectedRace != null)
            {
                string_6 = selectedRace.Name;
            }
            empireStartList = method_104(empireStartList, raceList, num9, string_6);
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num);
            list.Add(num2);
            list.Add(flag);
            list.Add(num3);
            list.Add(num4);
            list.Add(num5);
            list.Add(num6);
            list.Add(num8);
            list.Add(method_57(string_));
            list.Add(num9);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(victoryConditions);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num7);
            list.Add(double_0);
            list.Add(chkQuickStartDistantWorldsStoryEvents.Checked);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private EmpireStartList method_104(EmpireStartList empireStartList_0, RaceList raceList_2, double double_1, string string_2)
        {
            RaceList raceList = method_105(raceList_2, 115, 90);
            if (raceList.Count > 1 && empireStartList_0.Count > 4)
            {
                empireStartList_0.Update(raceList_2, string_2);
                int num = 1;
                if (double_1 >= 1.1)
                {
                    num = 2;
                }
                else if (double_1 >= 1.5)
                {
                    num = 3;
                }
                int num2 = 0;
                for (int i = 0; i < 4; i++)
                {
                    if (raceList.Contains(empireStartList_0[i].ResolvedRace))
                    {
                        num2++;
                    }
                }
                if (num2 < num)
                {
                    for (int j = 0; j < 4; j++)
                    {
                        if (!raceList.Contains(empireStartList_0[j].ResolvedRace))
                        {
                            int num3 = -1;
                            for (int k = 4; k < empireStartList_0.Count; k++)
                            {
                                if (raceList.Contains(empireStartList_0[k].ResolvedRace))
                                {
                                    num3 = k;
                                    break;
                                }
                            }
                            if (num3 >= 0)
                            {
                                EmpireStart value = empireStartList_0[num3];
                                int age = empireStartList_0[num3].Age;
                                empireStartList_0[num3] = empireStartList_0[j];
                                empireStartList_0[j] = value;
                                empireStartList_0[num3].Age = empireStartList_0[j].Age;
                                empireStartList_0[j].Age = age;
                                num2++;
                            }
                        }
                        if (num2 >= num)
                        {
                            break;
                        }
                    }
                    empireStartList_0.Update(raceList_2);
                }
            }
            return empireStartList_0;
        }

        private RaceList method_105(RaceList raceList_2, int int_1, int int_2)
        {
            RaceList raceList = new RaceList();
            List<int> list = new List<int>();
            for (int i = 0; i < raceList_2.Count; i++)
            {
                list.Add(raceList_2[i].AggressionLevel);
            }
            Race[] array = raceList_2.ToArray();
            int[] keys = list.ToArray();
            Array.Sort(keys, array);
            Array.Reverse(array);
            for (int j = 0; j < array.Length; j++)
            {
                if (array[j].AggressionLevel >= int_1 && array[j].IntelligenceLevel >= int_2)
                {
                    raceList.Add(array[j]);
                }
            }
            return raceList;
        }

        public override string ToString()
        {
            return "Disabled";
        }

        private VictoryConditions method_106(int int_1)
        {
            return method_107(int_1, null, new Random());
        }

        private VictoryConditions method_107(int int_1, EmpireStartList empireStartList_0, Random random_0)
        {
            double num = 50.0;
            if (empireStartList_0 != null)
            {
                int num2 = 0;
                int num3 = 0;
                for (int i = 0; i < empireStartList_0.Count; i++)
                {
                    double num4 = Galaxy.DetermineEmpireExpansion(random_0, empireStartList_0[i].Age);
                    int num5 = (int)num4;
                    num2 += num5;
                    if (num5 > num3)
                    {
                        num3 = num5;
                    }
                }
                double num6 = (double)num3 / (double)num2;
                num = num6 * 1.7;
                num *= 100.0;
            }
            else
            {
                double num7 = 5.0;
                num = 100.0 / (double)int_1 * num7;
            }
            VictoryConditions victoryConditions = new VictoryConditions();
            victoryConditions.Economy = true;
            victoryConditions.EconomyPercent = num;
            victoryConditions.EconomyPercent = Math.Min(victoryConditions.EconomyPercent, 66.0);
            victoryConditions.EconomyPercent = Math.Max(victoryConditions.EconomyPercent, 15.0);
            victoryConditions.Territory = true;
            victoryConditions.TerritoryPercent = num;
            victoryConditions.TerritoryPercent = Math.Min(victoryConditions.TerritoryPercent, 66.0);
            victoryConditions.TerritoryPercent = Math.Max(victoryConditions.TerritoryPercent, 15.0);
            victoryConditions.Population = true;
            victoryConditions.PopulationPercent = num;
            victoryConditions.PopulationPercent = Math.Min(victoryConditions.PopulationPercent, 66.0);
            victoryConditions.PopulationPercent = Math.Max(victoryConditions.PopulationPercent, 15.0);
            victoryConditions.VictoryThresholdPercentage = 0.8;
            return victoryConditions;
        }

        private string method_108(string string_2, Random random_0)
        {
            string result = "(" + TextResolver.GetText("Random") + ")";
            //int num = 0;
            if (string_2 == TextResolver.GetText("PreWarp"))
            {
                result = TextResolver.GetText("PreWarp");
            }
            else if (string_2 == TextResolver.GetText("Starting"))
            {
                result = TextResolver.GetText("Starting");
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "1"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = TextResolver.GetText("Starting");
                        break;
                    case 1:
                        result = string.Format(TextResolver.GetText("Level X"), "1");
                        break;
                }
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "2"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = string.Format(TextResolver.GetText("Level X"), "1");
                        break;
                    case 1:
                        result = string.Format(TextResolver.GetText("Level X"), "2");
                        break;
                }
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "3"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = string.Format(TextResolver.GetText("Level X"), "2");
                        break;
                    case 1:
                        result = string.Format(TextResolver.GetText("Level X"), "3");
                        break;
                }
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "4"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = string.Format(TextResolver.GetText("Level X"), "3");
                        break;
                    case 1:
                        result = string.Format(TextResolver.GetText("Level X"), "4");
                        break;
                }
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "5"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = string.Format(TextResolver.GetText("Level X"), "4");
                        break;
                    case 1:
                        result = string.Format(TextResolver.GetText("Level X"), "5");
                        break;
                }
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "6"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = string.Format(TextResolver.GetText("Level X"), "5");
                        break;
                    case 1:
                        result = string.Format(TextResolver.GetText("Level X"), "6");
                        break;
                }
            }
            else if (string_2 == string.Format(TextResolver.GetText("Level X"), "7"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = string.Format(TextResolver.GetText("Level X"), "6");
                        break;
                    case 1:
                        result = string.Format(TextResolver.GetText("Level X"), "7");
                        break;
                }
            }
            return result;
        }

        private string method_109(string string_2, Random random_0)
        {
            string result = "(" + TextResolver.GetText("Random") + ")";
            //int num = 0;
            if (string_2 == TextResolver.GetText("PreWarp"))
            {
                result = TextResolver.GetText("PreWarp");
            }
            else if (string_2 == TextResolver.GetText("Starting"))
            {
                result = TextResolver.GetText("Starting");
            }
            else if (string_2 == TextResolver.GetText("Young"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = TextResolver.GetText("Starting");
                        break;
                    case 1:
                        result = TextResolver.GetText("Young");
                        break;
                }
            }
            else if (string_2 == TextResolver.GetText("Expanding"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = TextResolver.GetText("Young");
                        break;
                    case 1:
                        result = TextResolver.GetText("Expanding");
                        break;
                }
            }
            else if (string_2 == TextResolver.GetText("Mature"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = TextResolver.GetText("Expanding");
                        break;
                    case 1:
                        result = TextResolver.GetText("Mature");
                        break;
                }
            }
            else if (string_2 == TextResolver.GetText("Old"))
            {
                switch (random_0.Next(0, 2))
                {
                    case 0:
                        result = TextResolver.GetText("Mature");
                        break;
                    case 1:
                        result = TextResolver.GetText("Old");
                        break;
                }
            }
            else if (string_2 == TextResolver.GetText("Supersize"))
            {
                switch (random_0.Next(0, 3))
                {
                    case 0:
                        result = TextResolver.GetText("Mature");
                        break;
                    case 1:
                        result = TextResolver.GetText("Old");
                        break;
                    case 2:
                        result = TextResolver.GetText("Supersize");
                        break;
                }
            }
            return result;
        }

        private EmpireStart method_110(EmpireStart empireStart_0, EmpireStartList empireStartList_0, Random random_0)
        {
            return method_112(empireStart_0, empireStartList_0, "(" + TextResolver.GetText("Random") + ")", TextResolver.GetText("Basic"), random_0);
        }

        private EmpireStart method_111(EmpireStart empireStart_0, EmpireStartList empireStartList_0, Random random_0, string string_2)
        {
            return method_114(empireStart_0, empireStartList_0, "(" + TextResolver.GetText("Random") + ")", string_2, TextResolver.GetText("Basic"), "(" + TextResolver.GetText("Random") + ")", "(" + TextResolver.GetText("Random") + ")", random_0);
        }

        private EmpireStart method_112(EmpireStart empireStart_0, EmpireStartList empireStartList_0, string string_2, string string_3, Random random_0)
        {
            return method_113(empireStart_0, empireStartList_0, string_2, string_3, "(" + TextResolver.GetText("Random") + ")", "(" + TextResolver.GetText("Random") + ")", random_0);
        }

        private EmpireStart method_113(EmpireStart empireStart_0, EmpireStartList empireStartList_0, string string_2, string string_3, string string_4, string string_5, Random random_0)
        {
            return method_114(empireStart_0, empireStartList_0, string_2, "(" + TextResolver.GetText("Random") + ")", string_3, string_4, string_5, random_0);
        }

        private EmpireStart method_114(EmpireStart empireStart_0, EmpireStartList empireStartList_0, string string_2, string string_3, string string_4, string string_5, string string_6, Random random_0)
        {
            EmpireStart empireStart = new EmpireStart();
            empireStart.Age = method_57(string_2);
            empireStart.GovernmentStyle = "(" + TextResolver.GetText("Random") + ")";
            empireStart.HomeSystemFavourability = TextResolver.GetText("Normal");
            empireStart.Name = "";
            if (string_3 == "(" + TextResolver.GetText("Random") + ")")
            {
                EmpireStartList empireStartList = new EmpireStartList();
                if (empireStart_0 != null)
                {
                    empireStartList.Add(empireStart_0);
                }
                if (empireStartList != null && empireStartList.Count > 0)
                {
                    empireStartList.AddRange(empireStartList_0);
                }
                string_3 = method_115(random_0, empireStartList);
            }
            empireStart.Race = string_3;
            empireStart.StartLocation = string_5;
            empireStart.ProximityDistance = string_6;
            empireStart.TechLevel = method_54(string_4);
            return empireStart;
        }

        private string method_115(Random random_0, EmpireStartList empireStartList_0)
        {
            string result = "(" + TextResolver.GetText("Random") + ")";
            List<string> list = method_116(empireStartList_0);
            if (list.Count > 0)
            {
                result = list[random_0.Next(0, list.Count)];
            }
            return result;
        }

        private List<string> method_116(EmpireStartList empireStartList_0)
        {
            List<string> list = new List<string>();
            int num = 70;
            foreach (Race item in raceList_0)
            {
                if (item.IntelligenceLevel >= num && !method_117(empireStartList_0, item.Name))
                {
                    list.Add(item.Name);
                }
            }
            return list;
        }

        private bool method_117(EmpireStartList empireStartList_0, string string_2)
        {
            foreach (EmpireStart item in empireStartList_0)
            {
                if (item.Race.ToLower(CultureInfo.InvariantCulture) == string_2.ToLower(CultureInfo.InvariantCulture))
                {
                    return true;
                }
            }
            return false;
        }

        private void radioClassicEmpire_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = "Classic Empire";
            string text = "You are an all-powerful empire bringing fear and trepidation to every corner of the galaxy. \n\n";
            text += "A small band of rag-tag renegades opposes your benevolent rule and threatens the galactic order. ";
            text += "These snivelling rebels will soon be crushed...";
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioClassicRebels_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = "Classic Renegades";
            string text = "You lead an alliance of freedom-loving renegades fighting against a corrupt galactic empire. \n\n";
            text += "This evil empire spreads its blanket of darkness across the galaxy, intimidating everyone and crushing all resistance. \n\n";
            text += "You begin with a small collection of remote colonies and many potential allies who long to overthrow their oppressors...";
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioEpic_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Epic");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Large") + ", 1000 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 1 " + TextResolver.GetText("colony") + "\n\n";
            text += TextResolver.GetText("QuickStart Epic");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioRingRace_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Ring Race");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Small") + ", 500 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 1-2 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Ring Race");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioRandom_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("Random");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Random") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Random") + "\n\n";
            text += TextResolver.GetText("QuickStart Random");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioConflict_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Conflict");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Small") + ", 500 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 5-8 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Conflict");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void chkVictoryTerritory_CheckedChanged(object sender, EventArgs e)
        {
            numVictoryTerritoryPercent.Enabled = chkVictoryTerritory.Checked;
        }

        private void chkVictoryPopulation_CheckedChanged(object sender, EventArgs e)
        {
            numVictoryPopulationPercent.Enabled = chkVictoryPopulation.Checked;
        }

        private void chkVictoryEconomy_CheckedChanged(object sender, EventArgs e)
        {
            numVictoryEconomyPercent.Enabled = chkVictoryEconomy.Checked;
        }

        private void method_118(object sender, EventArgs e)
        {
            int num = method_61(tbarStartNewGameTheGalaxyStarDensity.Value, raceList_0);
            numAutogenerateEmpiresAmount.Maximum = num - 1;
            if (ctlStartingEmpiresList.Grid.Rows.Count >= num - 1)
            {
                btnAddNewEmpire.Enabled = false;
            }
            else
            {
                btnAddNewEmpire.Enabled = true;
            }
        }

        private void radioExpandingSettlements_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Expanding Settlements");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Standard") + ", 700 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 16-20 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Expanding Settlements");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioExpandingFromTheCore_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Expanding From The Core");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Standard") + ", 700 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 5-7 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Expanding from the Core");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioSmall_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Fast");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Tiny") + ", 150 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 5-7 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Fast");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioFullyDevelopedSmall_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Fully Developed - Small");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Small") + ", 400 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 30-50 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Fully Developed - Small");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioFullyDevelopedStandard_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Fully Developed - Standard");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Standard") + ", 700 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 30-50 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Fully Developed - Standard");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioFullyDevelopedLarge_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Fully Developed - Large");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Large") + ", 1000 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 30-50 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Fully Developed - Large");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioGalacticRepublicSupremeRuler_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Galactic Republic - Supreme Ruler");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Standard") + ", 700 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 100-150 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Galactic Republic - Supreme Ruler");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioGalacticRepublicWildFrontiers_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Galactic Republic - Wild Frontiers");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Standard") + ", 700 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 5-7 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Galactic Republic - Wild Frontiers");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioSovereignTerritoriesRegionalRuler_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Sovereign Territories - Regional Ruler");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Standard") + ", 700 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 40-60 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Sovereign Territories - Regional Ruler");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void radioSovereignTerritoriesMinorFaction_CheckedChanged(object sender, EventArgs e)
        {
            lblQuickStartDescriptionTitle.Text = TextResolver.GetText("QuickStart Title Sovereign Territories - Minor Faction");
            string text = TextResolver.GetText("Galaxy Size") + ": " + TextResolver.GetText("Standard") + ", 700 " + TextResolver.GetText("stars") + "\n";
            string text2 = text;
            text = text2 + TextResolver.GetText("Your Empire") + ": 5-7 " + TextResolver.GetText("colonies") + "\n\n";
            text += TextResolver.GetText("QuickStart Sovereign Territories - Minor Faction");
            lblQuickStartDescriptionDetail.Text = text;
        }

        private void lnkTutorial_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_119();
        }

        private void method_119()
        {
            FtIzCrmve5.Size = new Size(385, 481);
            FtIzCrmve5.Location = new Point((base.Width - FtIzCrmve5.Width) / 2, (base.Height - FtIzCrmve5.Height) / 2);
            FtIzCrmve5.DoLayout();
            lnkTutorialFindingYourWayAround.Location = new Point(35, 20);
            lnkTutorialFindingYourWayAround.Text = TextResolver.GetText("Finding Your Way Around");
            lnkTutorialFindingYourWayAround.Font = new Font(lnkTutorialFindingYourWayAround.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialEmpireAndColonies.Location = new Point(35, 58);
            lnkTutorialEmpireAndColonies.Text = TextResolver.GetText("Your Empire and Colonies");
            lnkTutorialEmpireAndColonies.Font = new Font(lnkTutorialEmpireAndColonies.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialShipsMissions.Location = new Point(35, 96);
            lnkTutorialShipsMissions.Text = TextResolver.GetText("Ships and Bases");
            lnkTutorialShipsMissions.Font = new Font(lnkTutorialShipsMissions.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialExpansionDiplomacy.Location = new Point(35, 134);
            lnkTutorialExpansionDiplomacy.Text = TextResolver.GetText("Expansion and Diplomacy");
            lnkTutorialExpansionDiplomacy.Font = new Font(lnkTutorialExpansionDiplomacy.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialResearchDesign.Location = new Point(35, 172);
            lnkTutorialResearchDesign.Text = TextResolver.GetText("Research, Ship Design and Construction");
            lnkTutorialResearchDesign.Font = new Font(lnkTutorialResearchDesign.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialFleetsTroops.Location = new Point(35, 210);
            lnkTutorialFleetsTroops.Text = TextResolver.GetText("Fleets, Troops and Intelligence missions");
            lnkTutorialFleetsTroops.Font = new Font(lnkTutorialFleetsTroops.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialDealingWithPirates.Location = new Point(35, 248);
            lnkTutorialDealingWithPirates.Text = TextResolver.GetText("Dealing with Pirates");
            lnkTutorialDealingWithPirates.Font = new Font(lnkTutorialDealingWithPirates.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialPlayAsPirate.Location = new Point(35, 286);
            lnkTutorialPlayAsPirate.Text = TextResolver.GetText("Play as a Pirate Faction");
            lnkTutorialPlayAsPirate.Font = new Font(lnkTutorialPlayAsPirate.Font.FontFamily, 15f, FontStyle.Bold);
            lnkTutorialPreWarpEmpire.Location = new Point(35, 324);
            lnkTutorialPreWarpEmpire.Text = TextResolver.GetText("Play as a PreWarp Empire");
            lnkTutorialPreWarpEmpire.Font = new Font(lnkTutorialPreWarpEmpire.Font.FontFamily, 15f, FontStyle.Bold);
            btnTutorialStartCancel.Size = new Size(100, 25);
            btnTutorialStartCancel.Location = new Point(260, 384);
            FtIzCrmve5.Visible = true;
            FtIzCrmve5.BringToFront();
        }

        private void method_120()
        {
            FtIzCrmve5.Visible = false;
            FtIzCrmve5.SendToBack();
        }

        private void lnkTutorialDealingWithPirates_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_123();
        }

        private void lnkTutorialPlayAsPirate_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_121();
        }

        private void lnkTutorialPreWarpEmpire_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_122();
        }

        private void method_121()
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "PlayAsPirate";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Starting"), TextResolver.GetText("Normal"), random);
            bool_2 = true;
            bool_3 = true;
            empireStart.PiratePlayStyle = PiratePlayStyle.Pirate;
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("PreWarp"), TextResolver.GetText("PreWarp"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.4;
            string string_ = TextResolver.GetText("PreWarp");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private void method_122()
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "PreWarpEmpire";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("PreWarp"), TextResolver.GetText("PreWarp"), random);
            bool_2 = false;
            bool_3 = true;
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("PreWarp"), TextResolver.GetText("PreWarp"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.2;
            string string_ = TextResolver.GetText("PreWarp");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private void method_123()
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "DealingWithPirates";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("PreWarp"), TextResolver.GetText("PreWarp"), random);
            bool_2 = false;
            bool_3 = true;
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("PreWarp"), TextResolver.GetText("PreWarp"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.4;
            string string_ = TextResolver.GetText("PreWarp");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private void lnkTutorialEmpireAndColonies_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "EmpireAndColonies";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Young"), string.Format(TextResolver.GetText("Level X"), "2"), random);
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.4;
            string string_ = TextResolver.GetText("Expanding");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private void lnkTutorialShipsMissions_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "ShipsAndBases";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Young"), string.Format(TextResolver.GetText("Level X"), "2"), random);
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.4;
            string string_ = TextResolver.GetText("Expanding");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private void lnkTutorialFindingYourWayAround_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "FindingYourWayAround";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Young"), string.Format(TextResolver.GetText("Level X"), "2"), random);
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.3;
            string string_ = TextResolver.GetText("Expanding");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private void lnkTutorialResearchDesign_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "ResearchDesign";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.3;
            string string_ = TextResolver.GetText("Expanding");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 == null)
            {
                return;
            }
            Habitat capital = game_0.PlayerEmpire.Capital;
            ShipGroup shipGroup = new ShipGroup(game_0.Galaxy);
            shipGroup.Name = string.Format(TextResolver.GetText("Nth Fleet"), game_0.PlayerEmpire.GetNextFleetNumberDescription());
            shipGroup.Empire = game_0.PlayerEmpire;
            shipGroup.GatherPoint = capital;
            Design design = game_0.PlayerEmpire.Designs.FindNewest(BuiltObjectSubRole.Frigate);
            Design design2 = game_0.PlayerEmpire.Designs.FindNewest(BuiltObjectSubRole.Destroyer);
            BuiltObjectList items = new BuiltObjectList();
            for (int j = 0; j < 5; j++)
            {
                double num11 = 0.0;
                double num12 = 0.0;
                design.BuildCount++;
                BuiltObject builtObject = game_0.PlayerEmpire.GenerateBuiltObjectFromDesign(design, game_0.Galaxy.GenerateBuiltObjectName(design), isState: true, capital.Xpos + 50.0, capital.Ypos + 100.0);
                builtObject.ParentHabitat = capital;
                builtObject.DateBuilt = game_0.Galaxy.CurrentStarDate;
                builtObject.DateRetrofit = game_0.Galaxy.CurrentStarDate;
                game_0.Galaxy.SelectRelativeParkingPoint(out num11, out num12);
                builtObject.ParentOffsetX = num11;
                builtObject.ParentOffsetY = num12;
                builtObject.Xpos = capital.Xpos + num11;
                builtObject.Ypos = capital.Ypos + num12;
                builtObject.Heading = game_0.Galaxy.SelectRandomHeading();
                builtObject.CurrentFuel = builtObject.FuelCapacity;
                builtObject.CurrentEnergy = builtObject.ReactorStorageCapacity;
                builtObject.CurrentShields = builtObject.ShieldsCapacity;
                shipGroup.AddShipToFleet(builtObject);
            }
            for (int k = 0; k < 3; k++)
            {
                double num13 = 0.0;
                double num14 = 0.0;
                design2.BuildCount++;
                BuiltObject builtObject2 = game_0.PlayerEmpire.GenerateBuiltObjectFromDesign(design2, game_0.Galaxy.GenerateBuiltObjectName(design2), isState: true, capital.Xpos + 50.0, capital.Ypos + 100.0);
                builtObject2.ParentHabitat = capital;
                builtObject2.DateBuilt = game_0.Galaxy.CurrentStarDate;
                builtObject2.DateRetrofit = game_0.Galaxy.CurrentStarDate;
                game_0.Galaxy.SelectRelativeParkingPoint(out num13, out num14);
                builtObject2.ParentOffsetX = num13;
                builtObject2.ParentOffsetY = num14;
                builtObject2.Xpos = capital.Xpos + num13;
                builtObject2.Ypos = capital.Ypos + num14;
                builtObject2.Heading = game_0.Galaxy.SelectRandomHeading();
                builtObject2.CurrentFuel = builtObject2.FuelCapacity;
                builtObject2.CurrentEnergy = builtObject2.ReactorStorageCapacity;
                builtObject2.CurrentShields = builtObject2.ShieldsCapacity;
                shipGroup.AddShipToFleet(builtObject2);
            }
            shipGroup.Ships.AddRange(items);
            shipGroup.Update();
            game_0.PlayerEmpire.ShipGroups.Add(shipGroup);
            for (int l = 0; l < 2; l++)
            {
                bool isRandomCharacter = false;
                game_0.PlayerEmpire.GenerateNewCharacter(CharacterRole.IntelligenceAgent, game_0.PlayerEmpire.Capital, out isRandomCharacter);
            }
            DiplomaticRelation diplomaticRelation = game_0.PlayerEmpire.DiplomaticRelations[game_0.Galaxy.Empires[1]];
            if (diplomaticRelation == null)
            {
                diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], tradeRestrictedResources: false);
                game_0.PlayerEmpire.DiplomaticRelations.Add(diplomaticRelation);
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], game_0.PlayerEmpire, tradeRestrictedResources: false);
                game_0.Galaxy.Empires[1].DiplomaticRelations.Add(diplomaticRelation2);
            }
            else if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
            {
                diplomaticRelation.Type = DiplomaticRelationType.None;
                DiplomaticRelation diplomaticRelation3 = game_0.Galaxy.Empires[1].DiplomaticRelations[game_0.PlayerEmpire];
                if (diplomaticRelation3 != null)
                {
                    diplomaticRelation3.Type = DiplomaticRelationType.None;
                }
                else
                {
                    diplomaticRelation3 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], game_0.PlayerEmpire, tradeRestrictedResources: false);
                    game_0.Galaxy.Empires[1].DiplomaticRelations.Add(diplomaticRelation3);
                }
            }
            diplomaticRelation = game_0.PlayerEmpire.DiplomaticRelations[game_0.Galaxy.Empires[2]];
            if (diplomaticRelation == null)
            {
                diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], tradeRestrictedResources: false);
                game_0.PlayerEmpire.DiplomaticRelations.Add(diplomaticRelation);
                DiplomaticRelation diplomaticRelation4 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], game_0.PlayerEmpire, tradeRestrictedResources: false);
                game_0.Galaxy.Empires[2].DiplomaticRelations.Add(diplomaticRelation4);
            }
            else if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
            {
                diplomaticRelation.Type = DiplomaticRelationType.None;
                DiplomaticRelation diplomaticRelation5 = game_0.Galaxy.Empires[2].DiplomaticRelations[game_0.PlayerEmpire];
                if (diplomaticRelation5 != null)
                {
                    diplomaticRelation5.Type = DiplomaticRelationType.None;
                }
                else
                {
                    diplomaticRelation5 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], game_0.PlayerEmpire, tradeRestrictedResources: false);
                    game_0.Galaxy.Empires[2].DiplomaticRelations.Add(diplomaticRelation5);
                }
            }
            method_77(game_0);
        }

        private void lnkTutorialFleetsTroops_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "FleetsTroops";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.3;
            string string_ = TextResolver.GetText("Expanding");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 == null)
            {
                return;
            }
            Habitat capital = game_0.PlayerEmpire.Capital;
            ShipGroup shipGroup = new ShipGroup(game_0.Galaxy);
            shipGroup.Name = string.Format(TextResolver.GetText("Nth Fleet"), game_0.PlayerEmpire.GetNextFleetNumberDescription());
            shipGroup.Empire = game_0.PlayerEmpire;
            shipGroup.GatherPoint = capital;
            Design design = game_0.PlayerEmpire.Designs.FindNewest(BuiltObjectSubRole.Frigate);
            Design design2 = game_0.PlayerEmpire.Designs.FindNewest(BuiltObjectSubRole.Destroyer);
            BuiltObjectList items = new BuiltObjectList();
            for (int j = 0; j < 5; j++)
            {
                double num11 = 0.0;
                double num12 = 0.0;
                design.BuildCount++;
                BuiltObject builtObject = game_0.PlayerEmpire.GenerateBuiltObjectFromDesign(design, game_0.Galaxy.GenerateBuiltObjectName(design), isState: true, capital.Xpos + 50.0, capital.Ypos + 100.0);
                builtObject.ParentHabitat = capital;
                builtObject.DateBuilt = game_0.Galaxy.CurrentStarDate;
                builtObject.DateRetrofit = game_0.Galaxy.CurrentStarDate;
                game_0.Galaxy.SelectRelativeParkingPoint(out num11, out num12);
                builtObject.ParentOffsetX = num11;
                builtObject.ParentOffsetY = num12;
                builtObject.Xpos = capital.Xpos + num11;
                builtObject.Ypos = capital.Ypos + num12;
                builtObject.Heading = game_0.Galaxy.SelectRandomHeading();
                builtObject.CurrentFuel = builtObject.FuelCapacity;
                builtObject.CurrentEnergy = builtObject.ReactorStorageCapacity;
                builtObject.CurrentShields = builtObject.ShieldsCapacity;
                shipGroup.AddShipToFleet(builtObject);
            }
            for (int k = 0; k < 3; k++)
            {
                double num13 = 0.0;
                double num14 = 0.0;
                design2.BuildCount++;
                BuiltObject builtObject2 = game_0.PlayerEmpire.GenerateBuiltObjectFromDesign(design2, game_0.Galaxy.GenerateBuiltObjectName(design2), isState: true, capital.Xpos + 50.0, capital.Ypos + 100.0);
                builtObject2.ParentHabitat = capital;
                builtObject2.DateBuilt = game_0.Galaxy.CurrentStarDate;
                builtObject2.DateRetrofit = game_0.Galaxy.CurrentStarDate;
                game_0.Galaxy.SelectRelativeParkingPoint(out num13, out num14);
                builtObject2.ParentOffsetX = num13;
                builtObject2.ParentOffsetY = num14;
                builtObject2.Xpos = capital.Xpos + num13;
                builtObject2.Ypos = capital.Ypos + num14;
                builtObject2.Heading = game_0.Galaxy.SelectRandomHeading();
                builtObject2.CurrentFuel = builtObject2.FuelCapacity;
                builtObject2.CurrentEnergy = builtObject2.ReactorStorageCapacity;
                builtObject2.CurrentShields = builtObject2.ShieldsCapacity;
                shipGroup.AddShipToFleet(builtObject2);
            }
            shipGroup.Ships.AddRange(items);
            shipGroup.Update();
            game_0.PlayerEmpire.ShipGroups.Add(shipGroup);
            for (int l = 0; l < 2; l++)
            {
                bool isRandomCharacter = false;
                game_0.PlayerEmpire.GenerateNewCharacter(CharacterRole.IntelligenceAgent, game_0.PlayerEmpire.Capital, out isRandomCharacter);
            }
            DiplomaticRelation diplomaticRelation = game_0.PlayerEmpire.DiplomaticRelations[game_0.Galaxy.Empires[1]];
            if (diplomaticRelation == null)
            {
                diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], tradeRestrictedResources: false);
                game_0.PlayerEmpire.DiplomaticRelations.Add(diplomaticRelation);
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], game_0.PlayerEmpire, tradeRestrictedResources: false);
                game_0.Galaxy.Empires[1].DiplomaticRelations.Add(diplomaticRelation2);
            }
            else if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
            {
                diplomaticRelation.Type = DiplomaticRelationType.None;
                DiplomaticRelation diplomaticRelation3 = game_0.Galaxy.Empires[1].DiplomaticRelations[game_0.PlayerEmpire];
                if (diplomaticRelation3 != null)
                {
                    diplomaticRelation3.Type = DiplomaticRelationType.None;
                }
                else
                {
                    diplomaticRelation3 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], game_0.PlayerEmpire, tradeRestrictedResources: false);
                    game_0.Galaxy.Empires[1].DiplomaticRelations.Add(diplomaticRelation3);
                }
            }
            diplomaticRelation = game_0.PlayerEmpire.DiplomaticRelations[game_0.Galaxy.Empires[2]];
            if (diplomaticRelation == null)
            {
                diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], tradeRestrictedResources: false);
                game_0.PlayerEmpire.DiplomaticRelations.Add(diplomaticRelation);
                DiplomaticRelation diplomaticRelation4 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], game_0.PlayerEmpire, tradeRestrictedResources: false);
                game_0.Galaxy.Empires[2].DiplomaticRelations.Add(diplomaticRelation4);
            }
            else if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
            {
                diplomaticRelation.Type = DiplomaticRelationType.None;
                DiplomaticRelation diplomaticRelation5 = game_0.Galaxy.Empires[2].DiplomaticRelations[game_0.PlayerEmpire];
                if (diplomaticRelation5 != null)
                {
                    diplomaticRelation5.Type = DiplomaticRelationType.None;
                }
                else
                {
                    diplomaticRelation5 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], game_0.PlayerEmpire, tradeRestrictedResources: false);
                    game_0.Galaxy.Empires[2].DiplomaticRelations.Add(diplomaticRelation5);
                }
            }
            method_77(game_0);
        }

        private void lnkTutorialExpansionDiplomacy_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_140();
            main_0.bool_7 = true;
            main_0.string_1 = "ExpansionDiplomacy";
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 0;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("Expanding"), string.Format(TextResolver.GetText("Level X"), "2"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions item4 = method_106(num3);
            double num7 = 1.0;
            int num8 = random.Next(200, 500);
            double num9 = 0.0;
            double num10 = 0.3;
            string string_ = TextResolver.GetText("Expanding");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(num8);
            list.Add(num9);
            list.Add(num10);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(item4);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_120();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 == null)
            {
                return;
            }
            Habitat capital = game_0.PlayerEmpire.Capital;
            ShipGroup shipGroup = new ShipGroup(game_0.Galaxy);
            shipGroup.Name = string.Format(TextResolver.GetText("Nth Fleet"), game_0.PlayerEmpire.GetNextFleetNumberDescription());
            shipGroup.Empire = game_0.PlayerEmpire;
            shipGroup.GatherPoint = capital;
            Design design = game_0.PlayerEmpire.Designs.FindNewest(BuiltObjectSubRole.Frigate);
            Design design2 = game_0.PlayerEmpire.Designs.FindNewest(BuiltObjectSubRole.Destroyer);
            BuiltObjectList items = new BuiltObjectList();
            for (int j = 0; j < 5; j++)
            {
                double num11 = 0.0;
                double num12 = 0.0;
                design.BuildCount++;
                BuiltObject builtObject = game_0.PlayerEmpire.GenerateBuiltObjectFromDesign(design, game_0.Galaxy.GenerateBuiltObjectName(design), isState: true, capital.Xpos + 50.0, capital.Ypos + 100.0);
                builtObject.ParentHabitat = capital;
                builtObject.DateBuilt = game_0.Galaxy.CurrentStarDate;
                builtObject.DateRetrofit = game_0.Galaxy.CurrentStarDate;
                game_0.Galaxy.SelectRelativeParkingPoint(out num11, out num12);
                builtObject.ParentOffsetX = num11;
                builtObject.ParentOffsetY = num12;
                builtObject.Xpos = capital.Xpos + num11;
                builtObject.Ypos = capital.Ypos + num12;
                builtObject.Heading = game_0.Galaxy.SelectRandomHeading();
                builtObject.CurrentFuel = builtObject.FuelCapacity;
                builtObject.CurrentEnergy = builtObject.ReactorStorageCapacity;
                builtObject.CurrentShields = builtObject.ShieldsCapacity;
                shipGroup.AddShipToFleet(builtObject);
            }
            for (int k = 0; k < 3; k++)
            {
                double num13 = 0.0;
                double num14 = 0.0;
                design2.BuildCount++;
                BuiltObject builtObject2 = game_0.PlayerEmpire.GenerateBuiltObjectFromDesign(design2, game_0.Galaxy.GenerateBuiltObjectName(design2), isState: true, capital.Xpos + 50.0, capital.Ypos + 100.0);
                builtObject2.ParentHabitat = capital;
                builtObject2.DateBuilt = game_0.Galaxy.CurrentStarDate;
                builtObject2.DateRetrofit = game_0.Galaxy.CurrentStarDate;
                game_0.Galaxy.SelectRelativeParkingPoint(out num13, out num14);
                builtObject2.ParentOffsetX = num13;
                builtObject2.ParentOffsetY = num14;
                builtObject2.Xpos = capital.Xpos + num13;
                builtObject2.Ypos = capital.Ypos + num14;
                builtObject2.Heading = game_0.Galaxy.SelectRandomHeading();
                builtObject2.CurrentFuel = builtObject2.FuelCapacity;
                builtObject2.CurrentEnergy = builtObject2.ReactorStorageCapacity;
                builtObject2.CurrentShields = builtObject2.ShieldsCapacity;
                shipGroup.AddShipToFleet(builtObject2);
            }
            shipGroup.Ships.AddRange(items);
            shipGroup.Update();
            game_0.PlayerEmpire.ShipGroups.Add(shipGroup);
            for (int l = 0; l < 2; l++)
            {
                bool isRandomCharacter = false;
                game_0.PlayerEmpire.GenerateNewCharacter(CharacterRole.IntelligenceAgent, game_0.PlayerEmpire.Capital, out isRandomCharacter);
            }
            DiplomaticRelation diplomaticRelation = game_0.PlayerEmpire.DiplomaticRelations[game_0.Galaxy.Empires[1]];
            if (diplomaticRelation == null)
            {
                diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], tradeRestrictedResources: false);
                game_0.PlayerEmpire.DiplomaticRelations.Add(diplomaticRelation);
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], game_0.PlayerEmpire, tradeRestrictedResources: false);
                game_0.Galaxy.Empires[1].DiplomaticRelations.Add(diplomaticRelation2);
            }
            else if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
            {
                diplomaticRelation.Type = DiplomaticRelationType.None;
                DiplomaticRelation diplomaticRelation3 = game_0.Galaxy.Empires[1].DiplomaticRelations[game_0.PlayerEmpire];
                if (diplomaticRelation3 != null)
                {
                    diplomaticRelation3.Type = DiplomaticRelationType.None;
                }
                else
                {
                    diplomaticRelation3 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[1], game_0.PlayerEmpire, tradeRestrictedResources: false);
                    game_0.Galaxy.Empires[1].DiplomaticRelations.Add(diplomaticRelation3);
                }
            }
            diplomaticRelation = game_0.PlayerEmpire.DiplomaticRelations[game_0.Galaxy.Empires[2]];
            if (diplomaticRelation == null)
            {
                diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], tradeRestrictedResources: false);
                game_0.PlayerEmpire.DiplomaticRelations.Add(diplomaticRelation);
                DiplomaticRelation diplomaticRelation4 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], game_0.PlayerEmpire, tradeRestrictedResources: false);
                game_0.Galaxy.Empires[2].DiplomaticRelations.Add(diplomaticRelation4);
            }
            else if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
            {
                diplomaticRelation.Type = DiplomaticRelationType.None;
                DiplomaticRelation diplomaticRelation5 = game_0.Galaxy.Empires[2].DiplomaticRelations[game_0.PlayerEmpire];
                if (diplomaticRelation5 != null)
                {
                    diplomaticRelation5.Type = DiplomaticRelationType.None;
                }
                else
                {
                    diplomaticRelation5 = new DiplomaticRelation(DiplomaticRelationType.None, game_0.PlayerEmpire, game_0.Galaxy.Empires[2], game_0.PlayerEmpire, tradeRestrictedResources: false);
                    game_0.Galaxy.Empires[2].DiplomaticRelations.Add(diplomaticRelation5);
                }
            }
            method_77(game_0);
        }

        private void btnTutorialStartCancel_Click(object sender, EventArgs e)
        {
            method_120();
        }

        private void method_124(object sender, MeasureItemEventArgs e)
        {
            e.ItemHeight = 19;
        }

        private void method_125(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Galaxy") + ": " + TextResolver.GetText("Creatures"), TextResolver.GetText("Space creatures are distributed throughout the galaxy at the start of the game"));
        }

        private void btnEncyclopediaBack_Click(object sender, EventArgs e)
        {
            if (int_0 > 0)
            {
                int_0--;
                method_129(encyclopediaItemList_1[int_0]);
            }
            method_126();
        }

        private void btnEncyclopediaForward_Click(object sender, EventArgs e)
        {
            if (int_0 < encyclopediaItemList_1.Count - 1)
            {
                int_0++;
                method_129(encyclopediaItemList_1[int_0]);
            }
            method_126();
        }

        private void btnEncyclopediaHome_Click(object sender, EventArgs e)
        {
            method_129(null);
        }

        private void method_126()
        {
            if (int_0 < encyclopediaItemList_1.Count - 1)
            {
                btnEncyclopediaForward.Enabled = true;
            }
            else
            {
                btnEncyclopediaForward.Enabled = false;
            }
            if (int_0 > 0)
            {
                btnEncyclopediaBack.Enabled = true;
            }
            else
            {
                btnEncyclopediaBack.Enabled = false;
            }
        }

        private void method_127(string string_2)
        {
            encyclopediaItemList_1.Clear();
            int_0 = -1;
            pnlEncyclopedia.Size = new Size(995, 730);
            pnlEncyclopedia.Location = new Point((base.Width - pnlEncyclopedia.Width) / 2, (base.Height - pnlEncyclopedia.Height) / 2);
            pnlEncyclopedia.DoLayout();
            btnEncyclopediaBack.Location = new Point(730, 10);
            btnEncyclopediaForward.Location = new Point(775, 10);
            btnEncyclopediaHome.Location = new Point(930, 10);
            webEncyclopediaContent.Size = new Size(705, 505);
            webEncyclopediaContent.Location = new Point(10, 10);
            pnlEncyclopediaTopics.Size = new Size(240, 579);
            pnlEncyclopediaTopics.Location = new Point(730, 48);
            pnlEncyclopediaTopics.BindData(encyclopediaItemList_0);
            pnlEncyclopediaRelatedItems.Size = new Size(705, 100);
            pnlEncyclopediaRelatedItems.Location = new Point(10, 527);
            pnlEncyclopediaRelatedItems.KickStart(this);
            chkEncyclopediaShowAtStart.Location = new Point(10, 638);
            if (main_0 != null && main_0.gameOptions_0 != null)
            {
                if (main_0.gameOptions_0.ShowEncyclopediaAtStart)
                {
                    chkEncyclopediaShowAtStart.Checked = true;
                }
                else
                {
                    chkEncyclopediaShowAtStart.Checked = false;
                }
            }
            EncyclopediaItem encyclopediaItem = encyclopediaItemList_0[string_2];
            if (encyclopediaItem != null)
            {
                encyclopediaItemList_1.Add(encyclopediaItem);
                int_0++;
            }
            method_129(encyclopediaItem);
            method_126();
            pnlEncyclopedia.Visible = true;
            pnlEncyclopedia.BringToFront();
        }

        private void method_128()
        {
            if (main_0 != null && main_0.gameOptions_0 != null)
            {
                main_0.gameOptions_0.ShowEncyclopediaAtStart = chkEncyclopediaShowAtStart.Checked;
            }
            pnlEncyclopedia.Visible = false;
            pnlEncyclopedia.SendToBack();
        }

        private void method_129(EncyclopediaItem encyclopediaItem_0)
        {
            encyclopediaItem_0 = method_130(encyclopediaItem_0);
            method_136(encyclopediaItem_0);
            method_137(encyclopediaItem_0);
        }

        private EncyclopediaItem method_130(EncyclopediaItem encyclopediaItem_0)
        {
            webEncyclopediaContent.AllowWebBrowserDrop = false;
            webEncyclopediaContent.ContextMenu = null;
            webEncyclopediaContent.ContextMenuStrip = null;
            webEncyclopediaContent.IsWebBrowserContextMenuEnabled = false;
            webEncyclopediaContent.WebBrowserShortcutsEnabled = false;
            if (encyclopediaItem_0 != null)
            {
                pnlEncyclopedia.HeaderTitle = TextResolver.GetText("Galactopedia") + ": " + encyclopediaItem_0.Title;
                string text = Application.StartupPath + "\\help\\";
                string text2 = string.Empty;
                if (!string.IsNullOrEmpty(main_0.string_3) && main_0.string_3.ToLower(CultureInfo.InvariantCulture) != "(default)")
                {
                    text2 = Application.StartupPath + "\\Customization\\" + main_0.string_3 + "\\help\\";
                }
                string text3 = text2 + encyclopediaItem_0.Filename;
                if (!File.Exists(text3))
                {
                    text3 = text + encyclopediaItem_0.Filename;
                    if (!File.Exists(text3))
                    {
                        text3 = text + "DE_" + encyclopediaItem_0.Filename;
                        if (!File.Exists(text3))
                        {
                            text3 = text + "FR_" + encyclopediaItem_0.Filename;
                            if (!File.Exists(text3))
                            {
                                text3 = text + "ES_" + encyclopediaItem_0.Filename;
                            }
                        }
                    }
                }
                if (File.Exists(text3))
                {
                    if (encyclopediaItem_0.Category == EncyclopediaCategory.Races && encyclopediaItem_0.Title != TextResolver.GetText("Alien Races"))
                    {
                        Race race_ = raceList_1[encyclopediaItem_0.Title];
                        string value = method_131(race_);
                        string text4 = File.ReadAllText(text3, Encoding.Default);
                        int num = text4.ToLower(CultureInfo.InvariantCulture).LastIndexOf("</body>");
                        if (num >= 0)
                        {
                            text4 = text4.Insert(num, value);
                        }
                        string value2 = "<meta http-equiv=3DContent-Type";
                        int num2 = text4.IndexOf(value2);
                        if (num2 >= 0)
                        {
                            int num3 = text4.IndexOf(">", num2 + 1);
                            if (num3 >= 0)
                            {
                                text4 = text4.Remove(num2, num3 - num2 + 1);
                            }
                        }
                        string text5 = "Nav.mht";
                        File.WriteAllText(Application.UserAppDataPath + "\\" + text5, text4, Encoding.Default);
                        webEncyclopediaContent.Refresh(WebBrowserRefreshOption.Completely);
                        webEncyclopediaContent.Navigate(Application.UserAppDataPath + "\\" + text5);
                        webEncyclopediaContent.Refresh(WebBrowserRefreshOption.Completely);
                        webEncyclopediaContent.Document.Encoding = "utf-8";
                    }
                    else if (encyclopediaItem_0.Category == EncyclopediaCategory.Resources && encyclopediaItem_0.Title == TextResolver.GetText("Resources Visual Index"))
                    {
                        string text6 = "href=3D" + '"' + "file:///";
                        string value3 = '"' + ">";
                        string text7 = Application.StartupPath + "\\Help";
                        string text8 = File.ReadAllText(text3, Encoding.Default);
                        int num4 = 0;
                        for (num4 = text8.IndexOf(text6, 0); num4 >= 0; num4 = text8.IndexOf(text6, num4 + 1))
                        {
                            int num5 = text8.IndexOf(value3, num4);
                            int num6 = text8.LastIndexOf("\\", num5);
                            string text9 = text8.Substring(num6, num5 - num6);
                            text8 = text8.Remove(num4, num5 - num4);
                            text8 = text8.Insert(num4, text6 + text7 + text9);
                        }
                        string value4 = "<meta http-equiv=3DContent-Type";
                        int num7 = text8.IndexOf(value4);
                        if (num7 >= 0)
                        {
                            int num8 = text8.IndexOf(">", num7 + 1);
                            if (num8 >= 0)
                            {
                                text8 = text8.Remove(num7, num8 - num7 + 1);
                            }
                        }
                        string text10 = "Nav.mht";
                        File.WriteAllText(Application.UserAppDataPath + text10, text8, Encoding.Default);
                        webEncyclopediaContent.Refresh(WebBrowserRefreshOption.Completely);
                        webEncyclopediaContent.Navigate(Application.UserAppDataPath + text10);
                        webEncyclopediaContent.Refresh(WebBrowserRefreshOption.Completely);
                        webEncyclopediaContent.Document.Encoding = "utf-8";
                    }
                    else
                    {
                        webEncyclopediaContent.Navigate(text3);
                    }
                }
                else
                {
                    string text11 = Application.StartupPath + "\\help\\default.mht";
                    if (!File.Exists(text11))
                    {
                        text11 = Application.StartupPath + "\\help\\DE_default.mht";
                        if (!File.Exists(text11))
                        {
                            text11 = Application.StartupPath + "\\help\\FR_default.mht";
                            if (!File.Exists(text11))
                            {
                                text11 = Application.StartupPath + "\\help\\ES_default.mht";
                            }
                        }
                    }
                    webEncyclopediaContent.Navigate(text11);
                }
            }
            else
            {
                bool flag = false;
                if (!string.IsNullOrEmpty(main_0.string_3))
                {
                    string title = string.Format(TextResolver.GetText("THEMENAME Theme"), main_0.string_3);
                    encyclopediaItem_0 = encyclopediaItemList_0[title];
                    if (encyclopediaItem_0 != null)
                    {
                        encyclopediaItem_0 = method_130(encyclopediaItem_0);
                        flag = true;
                    }
                }
                if (!flag)
                {
                    string text12 = Application.StartupPath + "\\help\\default.mht";
                    if (!File.Exists(text12))
                    {
                        text12 = Application.StartupPath + "\\help\\DE_default.mht";
                        if (!File.Exists(text12))
                        {
                            text12 = Application.StartupPath + "\\help\\FR_default.mht";
                            if (!File.Exists(text12))
                            {
                                text12 = Application.StartupPath + "\\help\\ES_default.mht";
                            }
                        }
                    }
                    webEncyclopediaContent.Navigate(text12);
                    pnlEncyclopedia.HeaderTitle = TextResolver.GetText("Galactopedia") + ": " + TextResolver.GetText("Introduction");
                }
            }
            pnlEncyclopedia.Invalidate();
            return encyclopediaItem_0;
        }

        private string method_131(Race race_0)
        {
            string text = string.Empty;
            if (race_0 != null)
            {
                RaceSummary raceSummary = Galaxy.GenerateRaceSummary(race_0);
                string text2 = "<span lang=3DEN-NZ style=3D'font-size:12.0pt;font-family:\"Verdana\",\"sans-serif\";mso-bidi-font-family:Verdana;color:#aaaaaa;mso-ansi-language:EN-NZ'>";
                string text3 = "</span>";
                for (int i = 0; i < raceSummary.Sections.Count; i++)
                {
                    RaceSummarySection raceSummarySection = raceSummary.Sections[i];
                    text += "<DIV class=3DSection1>";
                    if (!string.IsNullOrEmpty(raceSummarySection.Heading))
                    {
                        string text4 = text;
                        text = text4 + text2 + "<B>" + raceSummarySection.Heading + "</B>" + text3;
                    }
                    text += "<UL class=3DMsoNormal style=3D'margin-top:0cm' type=3Ddisc>";
                    for (int j = 0; j < raceSummarySection.Items.Count; j++)
                    {
                        text = text + "<LI style=3D'font-size:10.0pt;font-family:\"Verdana\",\"sans-serif\";color:#aaaaaa;mso-list:l1 level1 lfo4;tab-stops:list 10.0pt'>" + raceSummarySection.Items[j] + "</LI>";
                    }
                    text += "</UL>";
                    text += "</DIV>";
                }
            }
            return text;
        }

        private List<string> method_132(Race race_0)
        {
            List<string> list = new List<string>();
            string empty = string.Empty;
            empty = TextResolver.GetText("Default Reproduction Rate") + ": " + (race_0.ReproductiveRate - 1.0).ToString("#0%");
            list.Add(empty);
            string text = method_133(race_0.IntelligenceLevel);
            if (text == TextResolver.GetText("Slightly") && race_0.IntelligenceLevel >= 100)
            {
                text = TextResolver.GetText("Moderately");
            }
            empty = string.Format(arg1: (race_0.IntelligenceLevel < 100) ? TextResolver.GetText("Stupid") : TextResolver.GetText("Intelligent"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: text);
            empty = empty + " (" + (race_0.IntelligenceLevel - 100).ToString("+##0;-##0;0") + ")";
            list.Add(empty);
            text = method_133(race_0.AggressionLevel);
            empty = string.Format(arg1: (race_0.AggressionLevel < 100) ? TextResolver.GetText("Passive") : TextResolver.GetText("Aggressive"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: text);
            empty = empty + " (" + (race_0.AggressionLevel - 100).ToString("+##0;-##0;0") + ")";
            list.Add(empty);
            text = method_133(race_0.CautionLevel);
            empty = string.Format(arg1: (race_0.CautionLevel < 100) ? TextResolver.GetText("Reckless") : TextResolver.GetText("Cautious"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: text);
            empty = empty + " (" + (race_0.CautionLevel - 100).ToString("+##0;-##0;0") + ")";
            list.Add(empty);
            text = method_133(race_0.FriendlinessLevel);
            empty = string.Format(arg1: (race_0.FriendlinessLevel < 100) ? TextResolver.GetText("Unfriendly") : TextResolver.GetText("Friendly"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: text);
            empty = empty + " (" + (race_0.FriendlinessLevel - 100).ToString("+##0;-##0;0") + ")";
            list.Add(empty);
            text = method_133(race_0.LoyaltyLevel);
            empty = string.Format(arg1: (race_0.LoyaltyLevel < 100) ? TextResolver.GetText("Unreliable") : TextResolver.GetText("Dependable"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: text);
            empty = empty + " (" + (race_0.LoyaltyLevel - 100).ToString("+##0;-##0;0") + ")";
            list.Add(empty);
            return list;
        }

        private string method_133(int int_1)
        {
            string empty = string.Empty;
            int_1 -= 100;
            int_1 = Math.Abs(int_1);
            if (int_1 >= 30)
            {
                empty = TextResolver.GetText("Extremely");
            }
            else if (int_1 >= 17)
            {
                empty = TextResolver.GetText("Very");
            }
            else if (int_1 >= 6)
            {
                empty = TextResolver.GetText("Quite");
            }
            else if (int_1 < 6)
            {
                empty = TextResolver.GetText("Slightly");
            }
            return empty;
        }

        internal void method_134(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            object linkData = e.Link.LinkData;
            if (!(linkData is EncyclopediaItem))
            {
                return;
            }
            EncyclopediaItem encyclopediaItem = (EncyclopediaItem)linkData;
            method_129(encyclopediaItem);
            if (int_0 < encyclopediaItemList_1.Count - 1)
            {
                int_0++;
                encyclopediaItemList_1[int_0] = encyclopediaItem;
                if (int_0 < encyclopediaItemList_1.Count - 1)
                {
                    encyclopediaItemList_1.RemoveRange(int_0 + 1, encyclopediaItemList_1.Count - (int_0 + 1));
                }
            }
            else
            {
                encyclopediaItemList_1.Add(encyclopediaItem);
                int_0++;
            }
            method_126();
        }

        private void method_135(object sender, EncyclopediaItemChangedEventArgs e)
        {
            EncyclopediaItem item = e.Item;
            if (item == null)
            {
                return;
            }
            method_130(item);
            method_136(item);
            method_137(item);
            if (int_0 < encyclopediaItemList_1.Count - 1)
            {
                int_0++;
                encyclopediaItemList_1[int_0] = item;
                if (int_0 < encyclopediaItemList_1.Count - 1)
                {
                    encyclopediaItemList_1.RemoveRange(int_0 + 1, encyclopediaItemList_1.Count - (int_0 + 1));
                }
            }
            else
            {
                encyclopediaItemList_1.Add(item);
                int_0++;
            }
            method_126();
        }

        private void method_136(EncyclopediaItem encyclopediaItem_0)
        {
            if (encyclopediaItem_0 != null)
            {
                pnlEncyclopediaRelatedItems.Items = encyclopediaItem_0.RelatedItems;
            }
            else
            {
                pnlEncyclopediaRelatedItems.Items = null;
            }
        }

        private void method_137(EncyclopediaItem encyclopediaItem_0)
        {
            if (encyclopediaItem_0 != null)
            {
                pnlEncyclopediaTopics.OnEncyclopediaItemSelected -= method_135;
                pnlEncyclopediaTopics.SetSelectedItem(encyclopediaItem_0);
                pnlEncyclopediaTopics.OnEncyclopediaItemSelected += method_135;
            }
            else
            {
                pnlEncyclopediaTopics.OnEncyclopediaItemSelected -= method_135;
                pnlEncyclopediaTopics.SetSelectedItem(null);
                pnlEncyclopediaTopics.CollapseAll();
                pnlEncyclopediaTopics.OnEncyclopediaItemSelected += method_135;
            }
        }

        private void Start_KeyDown(object sender, KeyEventArgs e)
        {
            /*if (((Control)(object)mediaPlayer).Visible)
            {
                return;
            }*/
            if (pnlEncyclopedia.Visible && e.KeyCode != Keys.F1)
            {
                e.Handled = false;
                return;
            }
            Keys keyCode = e.KeyCode;
            if (keyCode == Keys.F1)
            {
                string empty = string.Empty;
                if (pnlNewGame.Visible)
                {
                    empty = TextResolver.GetText("Start New Game Screen");
                }
                else if (pnlQuickStart.Visible)
                {
                    empty = TextResolver.GetText("Quick Start Screen");
                }
                else if (pnlThemes.Visible)
                {
                    empty = TextResolver.GetText("Change Theme Screen");
                }
                else if (pnlGameOptionsAdvancedDisplaySettings.Visible)
                {
                    empty = TextResolver.GetText("Game Options - Advanced Display Settings Screen");
                }
                else if (pnlGameOptionsEmpireSettings.Visible)
                {
                    empty = TextResolver.GetText("Game Options - Your Empire Settings Screen");
                }
                else if (pnlGameOptions.Visible)
                {
                    empty = TextResolver.GetText("Game Options");
                }
                else if (pnlEncyclopedia.Visible)
                {
                    method_128();
                }
                else
                {
                    empty = string.Empty;
                }
                if (string.IsNullOrEmpty(empty))
                {
                    empty = TextResolver.GetText("Introduction");
                }
                method_127(empty);
            }
        }

        private void lnkGalactopedia_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_127("");
        }

        private void lnkAbout_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            if (!pnlAboutCredits.Visible)
            {
                method_138();
            }
        }

        private void method_138()
        {
            pnlAbout.Size = new Size(360, 530);
            pnlAbout.Location = new Point((base.Width - pnlAbout.Width) / 2, (base.Height - pnlAbout.Height) / 2);
            picAbout.Visible = false;
            upEzpZsgAK.Visible = false;
            lblAboutTitle.Visible = false;
            pnlAboutCredits.Size = new Size(330, base.Height);
            pnlAboutCredits.Location = new Point(base.Width - 350, 0);
            method_139();
            pnlAboutCredits.ScrollSpeed = 30.0;
            pnlAboutCredits.SetScrollPosition(0.0);
            pnlAboutCredits.StartScroll();
            Bitmap desktopImage = GetDesktopImage();
            Bitmap bitmap = new Bitmap(pnlAboutCredits.Width, pnlAboutCredits.Height, PixelFormat.Format32bppPArgb);
            using (Graphics graphics = Graphics.FromImage(bitmap))
            {
                graphics.Clear(Color.Black);
                Rectangle srcRect = new Rectangle(pnlAboutCredits.Location, pnlAboutCredits.Size);
                Rectangle destRect = new Rectangle(0, 0, pnlAboutCredits.Width, pnlAboutCredits.Height);
                graphics.DrawImage(desktopImage, destRect, srcRect, GraphicsUnit.Pixel);
            }
            pnlAboutCredits.BackgroundImage = bitmap;
            pnlAboutCredits.Parent = this;
            btnAboutClose.Parent = pnlAboutCredits;
            btnAboutClose.Font = font_7;
            btnAboutClose.Text = TextResolver.GetText("Close Credits");
            btnAboutClose.Size = new Size(300, 35);
            btnAboutClose.Location = new Point((pnlAboutCredits.Width - 300) / 2, pnlAboutCredits.Height - 55);
            btnAboutClose.Visible = true;
            pnlAboutCredits.BringToFront();
            pnlAboutCredits.Visible = true;
            btnAboutClose.BringToFront();
        }

        public static Bitmap GetDesktopImage()
        {
            IntPtr dC = User32.GetDC(User32.GetDesktopWindow());
            IntPtr intPtr = (IntPtr)Gdi32.CreateCompatibleDC((int)dC);
            SIZE sIZE = default(SIZE);
            sIZE.cx = User32.GetSystemMetrics(0);
            sIZE.cy = User32.GetSystemMetrics(1);
            IntPtr intPtr2 = (IntPtr)Gdi32.CreateCompatibleBitmap((int)dC, sIZE.cx, sIZE.cy);
            if (intPtr2 != IntPtr.Zero)
            {
                IntPtr intPtr3 = (IntPtr)Gdi32.SelectObject((int)intPtr, (int)intPtr2);
                Gdi32.BitBlt((int)intPtr, 0, 0, sIZE.cx, sIZE.cy, (int)dC, 0, 0, 13369376u);
                Gdi32.SelectObject((int)intPtr, (int)intPtr3);
                Gdi32.DeleteDC((int)intPtr);
                User32.ReleaseDC(User32.GetDesktopWindow(), dC);
                Bitmap result = Image.FromHbitmap(intPtr2);
                Gdi32.DeleteObject((int)intPtr2);
                GC.Collect();
                return result;
            }
            return null;
        }

        private void method_139()
        {
            pnlAboutCredits.ClearAll();
            pnlAboutCredits.DefaultFont = font_7;
            int num = base.Height / 20;
            for (int i = 0; i < num; i++)
            {
                pnlAboutCredits.AddSpacer();
            }
            pnlAboutCredits.AddImage(bitmap_1);
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Design && Development"));
            pnlAboutCredits.AddText("ELLIOT GIBBS");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Art Designer"));
            pnlAboutCredits.AddText("JASON BARISH");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Additional Artwork"));
            pnlAboutCredits.AddText("RICHARD EVANS");
            pnlAboutCredits.AddText("PETR JACH");
            pnlAboutCredits.AddText("MARTIN WOOD");
            pnlAboutCredits.AddText("MARC VON MARTIAL");
            pnlAboutCredits.AddText("ELLIOT GIBBS");
            pnlAboutCredits.AddText("THE LORDZ GAME STUDIO");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Concept Reviewer"));
            pnlAboutCredits.AddText("CHITOSE GIBBS");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Copyright Only") + " ©2014");
            pnlAboutCredits.AddText("CODEFORCE LIMITED");
            pnlAboutCredits.AddImage(bitmap_2);
            pnlAboutCredits.AddText("www.codeforce.co.nz");
            pnlAboutCredits.AddText(TextResolver.GetText("All rights reserved"));
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("With special thanks to"));
            pnlAboutCredits.AddText("Chitose, Natasha, Jessica and Benjamin");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText("SLITHERINE GROUP");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("PRODUCERS"));
            pnlAboutCredits.AddText("Erik Rutins");
            pnlAboutCredits.AddText("JD McNeil");
            pnlAboutCredits.AddText("Iain McNeil");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("ADDITIONAL DESIGN"));
            pnlAboutCredits.AddText("Erik Rutins");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("BOX ART"));
            pnlAboutCredits.AddText("Gunaars Miezis");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("BOX AND LOGO DESIGN"));
            pnlAboutCredits.AddText("Myriam Bell");
            pnlAboutCredits.AddText("Marc von Martial");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("MANUAL EDITING AND CONTENT"));
            pnlAboutCredits.AddText("Erik Rutins");
            pnlAboutCredits.AddText("Elliot Gibbs");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("MANUAL DESIGN AND LAYOUT"));
            pnlAboutCredits.AddText("Myriam Bell");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("GRAPHIC ARTISTS"));
            pnlAboutCredits.AddText("Richard Evans");
            pnlAboutCredits.AddText("Petr Jach");
            pnlAboutCredits.AddText("Marc von Martial");
            pnlAboutCredits.AddText("Martin Wood");
            pnlAboutCredits.AddText("The Lordz Game Studio");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("PUBLIC RELATIONS && MARKETING"));
            pnlAboutCredits.AddText("Marco Minoli");
            pnlAboutCredits.AddText("Filippo Chianetta");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("PRODUCTION ASSISTANTS"));
            pnlAboutCredits.AddText("Andrew Loveridge");
            pnlAboutCredits.AddText("Gerry Edwards");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("ADMINISTRATION"));
            pnlAboutCredits.AddText("Liz Stoltz");
            pnlAboutCredits.AddText("Dean Walker");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("BETA TEST COORDINATION"));
            pnlAboutCredits.AddText("Karlis Rutins");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("CUSTOMER SUPPORT STAFF"));
            pnlAboutCredits.AddText("Christian Bassani");
            pnlAboutCredits.AddText("Paulo Costa");
            pnlAboutCredits.AddText("Andrew Loveridge");
            pnlAboutCredits.AddText("Erik Rutins");
            pnlAboutCredits.AddText("Iain McNeil");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("FORUM ADMINISTRATION"));
            pnlAboutCredits.AddText("Erik Rutins");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("TECHNICAL DIRECTOR"));
            pnlAboutCredits.AddText("Phil Veale");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("WEB DATABASE DESIGN && DEVELOPMENT"));
            pnlAboutCredits.AddText("Andrea Nicola");
            pnlAboutCredits.AddText("Valery Vidershpan");
            pnlAboutCredits.AddText("Phil Veale");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("NETWORK AND SYSTEM ADMINISTRATOR"));
            pnlAboutCredits.AddText("Valery Vidershpan");
            pnlAboutCredits.AddText("Andrea Nicola");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("QUALITY ASSURANCE LEAD"));
            pnlAboutCredits.AddText("Erik Rutins");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("TESTING TEAM"));
            pnlAboutCredits.AddText("DISTANT WORLDS - UNIVERSE");
            pnlAboutCredits.AddText("A. S. Boles");
            pnlAboutCredits.AddText("Aldo Malago");
            pnlAboutCredits.AddText("Antiscamp");
            pnlAboutCredits.AddText("Apox");
            pnlAboutCredits.AddText("Arkblade");
            pnlAboutCredits.AddText("BigWolf");
            pnlAboutCredits.AddText("Bingeling");
            pnlAboutCredits.AddText("blackraider");
            pnlAboutCredits.AddText("Chet Guiles");
            pnlAboutCredits.AddText("clone61279");
            pnlAboutCredits.AddText("Doink9731");
            pnlAboutCredits.AddText("DumDum2002");
            pnlAboutCredits.AddText("Edward Sumrell");
            pnlAboutCredits.AddText("elanaagain");
            pnlAboutCredits.AddText("fireball60");
            pnlAboutCredits.AddText("General Patton");
            pnlAboutCredits.AddText("hadberz");
            pnlAboutCredits.AddText("Haree78");
            pnlAboutCredits.AddText("Iwbtone");
            pnlAboutCredits.AddText("Jeeves");
            pnlAboutCredits.AddText("KEBW1144");
            pnlAboutCredits.AddText("Kevin Richardson");
            pnlAboutCredits.AddText("Larry Monte");
            pnlAboutCredits.AddText("Litjan");
            pnlAboutCredits.AddText("Malevolence");
            pnlAboutCredits.AddText("Manuel Kraft");
            pnlAboutCredits.AddText("Michael 'nim8or' Lange");
            pnlAboutCredits.AddText("Paul 'Chop' Arnold");
            pnlAboutCredits.AddText("Petri Turunen");
            pnlAboutCredits.AddText("Phil Brutton");
            pnlAboutCredits.AddText("Robin Kraak");
            pnlAboutCredits.AddText("Sithuk");
            pnlAboutCredits.AddText("sventhebold");
            pnlAboutCredits.AddText("Wadym Zasko");
            pnlAboutCredits.AddText("Xmudder");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Font typefaces by"));
            pnlAboutCredits.AddText("LARABIE FONTS");
            pnlAboutCredits.AddText("www.larabiefonts.com");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Uses compression technology by"));
            pnlAboutCredits.AddText("DotNetZip");
            pnlAboutCredits.AddText("dotnetzip.codeplex.com");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Scientific and Technical Advisor"));
            pnlAboutCredits.AddText("WIKIPEDIA");
            pnlAboutCredits.AddText("www.wikipedia.org");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("Catering by"));
            pnlAboutCredits.AddText("EIFFEL EN EDEN");
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddImage(bitmap_0);
            pnlAboutCredits.AddSpacer();
            pnlAboutCredits.AddText(TextResolver.GetText("No Giant Kaltors were harmed in the making of this game"));
        }

        private void method_140()
        {
            pnlAboutCredits.StopScroll();
            pnlAboutCredits.ClearAll();
            pnlAbout.Visible = false;
            pnlAbout.SendToBack();
            pnlAboutCredits.Visible = false;
            menuCredits.Visible = true;
        }

        private void btnAboutClose_Click(object sender, EventArgs e)
        {
            method_140();
        }

        private void method_141(string[] string_2)
        {
            /*if (mediaPlayer.settings != null)
            {
                mediaPlayer.settings.autoStart = false;
            }
            ((Control)(object)mediaPlayer).Location = new Point(0, 0);
            ((Control)(object)mediaPlayer).Size = base.Size;
            IWMPPlaylist val = mediaPlayer.newPlaylist("", "");
            foreach (string text in string_2)
            {
                if (File.Exists(text))
                {
                    val.appendItem(mediaPlayer.newMedia(text));
                }
            }
            SetErrorMode(ErrorModes.SEM_FAILCRITICALERRORS);
            mediaPlayer.currentPlaylist = val;
            mediaPlayer.uiMode = "none";
            ((Control)(object)mediaPlayer).Visible = true;
            ((Control)(object)mediaPlayer).BringToFront();
            mediaPlayer.stretchToFit = true;
            mediaPlayer.settings.volume = 100;
            mediaPlayer.Ctlcontrols.currentPosition = 0.0;
            if (mediaPlayer.Ctlcontrols != null)
            {
                while (!mediaPlayer.Ctlcontrols.get_isAvailable("play"))
                {
                    Thread.Sleep(200);
                }
                mediaPlayer.Ctlcontrols.play();
            }*/
        }

        /*private void mediaPlayer_MediaError(object object_0, _WMPOCXEvents_MediaErrorEvent _WMPOCXEvents_MediaErrorEvent_0)
        {
            method_143();
        }*/

        private void method_142(bool bool_5)
        {
            lnkAbout.Enabled = bool_5;
            lnkCheckForUpdates.Enabled = bool_5;
            lnkCopyright.Enabled = bool_5;
            lnkExit.Enabled = bool_5;
            lnkGalactopedia.Enabled = bool_5;
            lnkLoadGame.Enabled = bool_5;
            lnkNewGame.Enabled = bool_5;
            lnkOptions.Enabled = bool_5;
            lnkPlayScenario.Enabled = bool_5;
            lnkTutorial.Enabled = bool_5;
            lnkThemes.Enabled = bool_5;
        }

        private void method_143()
        {
            //IL_0012: Unknown result type (might be due to invalid IL or missing references)
            //IL_001c: Expected O, but got Unknown
            //IL_0029: Unknown result type (might be due to invalid IL or missing references)
            //IL_0033: Expected O, but got Unknown
            Cursor.Show();
            //this.mediaPlayer.PlayStateChange -= new AxWMPLib._WMPOCXEvents_PlayStateChangeEventHandler(this.mediaPlayer_PlayStateChange);
            //this.mediaPlayer.MediaError -= new AxWMPLib._WMPOCXEvents_MediaErrorEventHandler(this.mediaPlayer_MediaError);
            //mediaPlayer.Ctlcontrols.stop();
            /*((Control)(object)mediaPlayer).Visible = false;
            ((Control)(object)mediaPlayer).SendToBack();*/
            SetErrorMode(ErrorModes.SYSTEM_DEFAULT);
            main_0.method_262(main_0.gameOptions_0);
            main_0.MusicPlayer.StartTheme();
            //((Control)(object)mediaPlayer).SendToBack();
            BringToFront();
            method_142(bool_5: true);
        }

        /*private void mediaPlayer_PlayStateChange(object object_0, _WMPOCXEvents_PlayStateChangeEvent _WMPOCXEvents_PlayStateChangeEvent_0)
        {
            switch (_WMPOCXEvents_PlayStateChangeEvent_0.newState)
            {
                case 1:
                case 2:
                case 8:
                    if (mediaPlayer.currentMedia != null && mediaPlayer.currentMedia.sourceURL == string_0[string_0.Length - 1])
                    {
                        method_143();
                    }
                    break;
                case 0:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                    break;
            }
        }*/

        /*private void mediaPlayer_ClickEvent(object object_0, _WMPOCXEvents_ClickEvent _WMPOCXEvents_ClickEvent_0)
        {
        }

        private void mediaPlayer_MouseDownEvent(object object_0, _WMPOCXEvents_MouseDownEvent _WMPOCXEvents_MouseDownEvent_0)
        {
            method_143();
        }*/

        /*private void method_144()
        {
            //IL_000d: Unknown result type (might be due to invalid IL or missing references)
            //IL_0017: Expected O, but got Unknown
            //IL_0024: Unknown result type (might be due to invalid IL or missing references)
            //IL_002e: Expected O, but got Unknown
            //IL_00fe: Unknown result type (might be due to invalid IL or missing references)
            //IL_0108: Expected O, but got Unknown
            //IL_0115: Unknown result type (might be due to invalid IL or missing references)
            //IL_011f: Expected O, but got Unknown
            this.mediaPlayer.PlayStateChange -= new AxWMPLib._WMPOCXEvents_PlayStateChangeEventHandler(this.mediaPlayer_PlayStateChange);
            this.mediaPlayer.MediaError -= new AxWMPLib._WMPOCXEvents_MediaErrorEventHandler(this.mediaPlayer_MediaError);
            try
            {
                if (mediaPlayer.currentMedia != null)
                {
                    mediaPlayer.Ctlcontrols.next();
                }
            }
            catch (Exception ex)
            {
                string text = "";
                try
                {
                    text = text + "Current position: " + mediaPlayer.Ctlcontrols.currentPosition + "\n";
                    text = text + "Current item duration: " + mediaPlayer.Ctlcontrols.currentItem.duration;
                    text = text + "Current media: " + mediaPlayer.currentMedia.sourceURL;
                }
                catch
                {
                }
                text += "\n\n";
                text += ex.ToString();
                MessageBox.Show(text, "Error while moving to next intro movie");
            }
            this.mediaPlayer.PlayStateChange += new AxWMPLib._WMPOCXEvents_PlayStateChangeEventHandler(this.mediaPlayer_PlayStateChange);
            this.mediaPlayer.MediaError += new AxWMPLib._WMPOCXEvents_MediaErrorEventHandler(this.mediaPlayer_MediaError);
        }

        private void mediaPlayer_KeyDownEvent(object object_0, _WMPOCXEvents_KeyDownEvent _WMPOCXEvents_KeyDownEvent_0)
        {
        }

        private void mediaPlayer_KeyPressEvent(object object_0, _WMPOCXEvents_KeyPressEvent _WMPOCXEvents_KeyPressEvent_0)
        {
        }

        private void mediaPlayer_MouseUpEvent(object object_0, _WMPOCXEvents_MouseUpEvent _WMPOCXEvents_MouseUpEvent_0)
        {
        }*/

        private void method_145(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Galaxy") + ": " + TextResolver.GetText("Pirates"), TextResolver.GetText("Pirates are distributed throughout the galaxy at the start of the game"));
        }

        private void method_146(string string_2)
        {
            lblMenuHints.BackColor = Color.FromArgb(208, 37, 35, 49);
            lblMenuHints.Font = font_8;
            lblMenuHints.ForeColor = Color.FromArgb(194, 194, 194);
            int num = (int)(250f * float_1);
            int num2 = (int)(350f * float_1);
            lblMenuHints.MaximumSize = new Size(num, num2);
            lblMenuHints.Text = string_2;
            lblMenuHints.Visible = true;
        }

        private void method_147()
        {
            lblMenuHints.Visible = false;
        }

        private void lnkNewGame_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Start New Game") + ":\n" + TextResolver.GetText("Click here to start a fully configurable game"));
        }

        private void lnkNewGame_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void lnkTutorial_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Tutorials") + ":\n" + TextResolver.GetText("Select one of the interactive tutorials to help you learn how to play Distant Worlds"));
        }

        private void lnkTutorial_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void lnkPlayScenario_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Quick Start") + ":\n" + TextResolver.GetText("Jump straight into a preconfigured game with no setup"));
        }

        private void lnkPlayScenario_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void lnkLoadGame_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Load Game") + ":\n" + TextResolver.GetText("Load a previously saved game"));
        }

        private void lnkLoadGame_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void menuGalactopedia_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Galactopedia") + ":\n" + TextResolver.GetText("Browse the built-in galactic encyclopedia"));
        }

        private void menuGalactopedia_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void menuCheckForUpdates_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Check For Updates") + ":\n" + string.Format(TextResolver.GetText("Visit CODEFORCE to check for updates to Distant Worlds"), "www.codeforce.co.nz"));
        }

        private void menuCheckForUpdates_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void menuCredits_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Credits") + ":\n" + TextResolver.GetText("Displays the credits for Distant Worlds"));
        }

        private void menuCredits_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void lnkExit_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Exit") + ":\n" + TextResolver.GetText("Exit Distant Worlds to the Windows desktop"));
        }

        private void lnkExit_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void lnkQuickStartRaceHelp_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            Race selectedRace = cmbQuickStartRace.SelectedRace;
            if (selectedRace != null)
            {
                method_127(selectedRace.Name);
            }
            else
            {
                method_127(TextResolver.GetText("Alien Races"));
            }
        }

        private void method_148(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            Race race = raceList_0[0];
            method_127(race.Name);
        }

        private void method_149()
        {
            SoundPlayer soundPlayer = new SoundPlayer();
            soundPlayer.SoundLocation = string_1;
            soundPlayer.Load();
            if (main_0.gameOptions_0.SoundEffectsVolume > 0.0)
            {
                soundPlayer.Play();
            }
        }

        private IntPtr method_150(string string_2)
        {
            if (privateFontCollection_0 == null)
            {
                privateFontCollection_0 = new PrivateFontCollection();
            }
            Stream manifestResourceStream = GetType().Assembly.GetManifestResourceStream(string_2);
            byte[] array = new byte[manifestResourceStream.Length];
            manifestResourceStream.Read(array, 0, (int)manifestResourceStream.Length);
            IntPtr zero = IntPtr.Zero;
            if (array == null)
            {
            }
            GCHandle gCHandle = GCHandle.Alloc(array, GCHandleType.Pinned);
            privateFontCollection_0.AddMemoryFont(gCHandle.AddrOfPinnedObject(), (int)manifestResourceStream.Length);
            int cnt = 0;
            zero = Gdi32.AddFontMemResourceEx(gCHandle.AddrOfPinnedObject(), (int)manifestResourceStream.Length, IntPtr.Zero, ref cnt);
            manifestResourceStream.Close();
            return zero;
        }

        Font IFontCache.GenerateFont(float pixelSize, bool isBold)
        {
            FontFamily family = privateFontCollection_0.Families[0];
            FontStyle style = FontStyle.Regular;
            if (isBold)
            {
                style = FontStyle.Bold;
            }
            return new Font(family, pixelSize, style, GraphicsUnit.Pixel);
        }

        private void method_151(Font font_11, Control control_0)
        {
            method_152(font_11, control_0, null);
        }

        private void method_152(Font font_11, Control control_0, Type type_0)
        {
            if (type_0 == null || control_0.GetType() == type_0)
            {
                control_0.Font = font_11;
            }
            if (control_0.Controls == null)
            {
                return;
            }
            foreach (Control control in control_0.Controls)
            {
                method_152(font_11, control, type_0);
            }
        }

        private void Start_FormClosed(object sender, FormClosedEventArgs e)
        {
            Gdi32.RemoveFontMemResourceEx(intptr_0);
            Gdi32.RemoveFontMemResourceEx(intptr_1);
        }

        private void pnlEncyclopedia_CloseButtonClicked(object sender, EventArgs e)
        {
            method_128();
        }

        private void pnlNewGame_CloseButtonClicked(object sender, EventArgs e)
        {
            switch (wjhRtsSwmsa)
            {
                case "CustomStandard":
                case "CustomPirate":
                    main_0.gameOptions_0.StartGameOptions = method_195();
                    break;
                default:
                    main_0.gameOptions_0.StartGameOptions = method_194();
                    break;
            }
            main_0.YxwyUefOyQ();
            main_0.method_257();
            method_46();
        }

        private void pnlQuickStart_CloseButtonClicked(object sender, EventArgs e)
        {
            method_25();
        }

        private void FtIzCrmve5_CloseButtonClicked(object sender, EventArgs e)
        {
            method_120();
        }

        private void method_153()
        {
            method_172();
            pnlGameOptions.Size = new Size(700, 696);
            pnlGameOptions.Location = new Point((base.Width - pnlGameOptions.Width) / 2, (base.Height - pnlGameOptions.Height) / 2);
            pnlGameOptions.DoLayout();
            lblOptionsMainViewScrollSpeed.Font = font_1;
            lblOptionsMainViewZoomSpeed.Font = font_1;
            lblOptionsMainViewStarFieldSize.Font = font_1;
            lblOptionsMainViewStarFieldSize.BringToFront();
            lblOptionsMainViewScrollSpeed.Location = new Point(lblOptionsMainViewScrollSpeed.Location.X, 24);
            lblOptionsMainViewZoomSpeed.Location = new Point(lblOptionsMainViewZoomSpeed.Location.X, 49);
            lblOptionsMainViewStarFieldSize.Location = new Point(lblOptionsMainViewStarFieldSize.Location.X, 74);
            sldOptionsMainViewScrollSpeed.Location = new Point(130, 26);
            sldOptionsMainViewZoomSpeed.Location = new Point(130, 51);
            sldOptionsMainViewStarFieldSize.Location = new Point(130, 76);
            sldOptionsMainViewScrollSpeed.Size = new Size(515, 16);
            sldOptionsMainViewZoomSpeed.Minimum = 1;
            sldOptionsMainViewZoomSpeed.Size = new Size(515, 16);
            sldOptionsMainViewStarFieldSize.Size = new Size(515, 16);
            btnGameOptionsAdvancedDisplaySettings.Location = new Point(395, 100);
            btnGameOptionsAdvancedDisplaySettings.Size = new Size(250, 26);
            grpOptionsControl.Font = font_7;
            grpOptionsDisplaySettings.Font = font_7;
            grpOptionsPopupMessages.Font = font_7;
            grpOptionsScrollingMessages.Font = font_7;
            grpOptionsVolume.Font = font_7;
            grpOptionsControl.Size = new Size(659, 291);
            grpOptionsDisplaySettings.Size = new Size(659, 134);
            grpOptionsVolume.Size = new Size(659, 74);
            grpOptionsScrollingMessages.Size = new Size(285, 230);
            grpOptionsPopupMessages.Size = new Size(285, 230);
            grpOptionsScrollingMessages.Location = new Point(12, 492);
            grpOptionsPopupMessages.Location = new Point(307, 492);
            grpOptionsDisplaySettings.Location = new Point(12, 7);
            grpOptionsVolume.Location = new Point(12, 147);
            grpOptionsControl.Location = new Point(12, 288);
            lblOptionsMusicVolume.Font = font_1;
            lblOptionsSoundEffectsVolume.Font = font_1;
            lblOptionsMusicVolume.Location = new Point(17, 22);
            lblOptionsSoundEffectsVolume.Location = new Point(17, 47);
            sldOptionsMusicVolume.Location = new Point(81, 24);
            sldOptionsMusicVolume.Size = new Size(568, 16);
            sldOptionsSoundEffectsVolume.Location = new Point(81, 49);
            sldOptionsSoundEffectsVolume.Size = new Size(568, 16);
            lblOptionsMouseScrollMode.Font = font_1;
            chkOptionsLoadedGamesPaused.Font = font_1;
            cmbOptionsMouseScrollWheelBehaviour.Font = font_1;
            chkOptionsAutoSave.Font = font_1;
            lblOptionsMouseScrollMode.Location = new Point(195, 246);
            cmbOptionsMouseScrollWheelBehaviour.Size = new Size(250, 21);
            cmbOptionsMouseScrollWheelBehaviour.Location = new Point(341, 242);
            grpOptionsAutoSave.Location = new Point(12, 228);
            grpOptionsAutoSave.Font = font_7;
            grpOptionsAutoSave.Size = new Size(180, 54);
            chkOptionsAutoSave.Text = string.Format(TextResolver.GetText("Every X minutes"), "              ");
            chkOptionsAutoSave.Location = new Point(7, 19);
            numOptionsAutoSaveMinutes.Location = new Point(72, 20);
            chkOptionsLoadedGamesPaused.Location = new Point(352, 228);
            chkOptionsLoadedGamesPaused.CheckAlign = ContentAlignment.MiddleRight;
            chkOptionsLoadedGamesPaused.TextAlign = ContentAlignment.MiddleRight;
            chkOptionsLoadedGamesPaused.Location = new Point(pnlGameOptions.Width - (chkOptionsLoadedGamesPaused.Width + 30), 228);
            lblOptionsMouseScrollMode.Location = new Point(223, 258);
            cmbOptionsMouseScrollWheelBehaviour.Size = new Size(240, 21);
            cmbOptionsMouseScrollWheelBehaviour.Location = new Point(chkOptionsLoadedGamesPaused.Location.X + chkOptionsLoadedGamesPaused.Width - cmbOptionsMouseScrollWheelBehaviour.Width, 254);
            cmbOptionsMouseScrollWheelBehaviour.BringToFront();
            lblOptionsAutomationMode.Font = font_1;
            lblOptionsControlAgentMissions.Font = font_1;
            lblOptionsControlAttacks.Font = font_1;
            lblOptionsControlColonization.Font = font_1;
            lblOptionsControlColonyFacilities.Font = font_1;
            lblOptionsControlConstruction.Font = font_1;
            lblOptionsControlDiplomacyGifts.Font = font_1;
            lblOptionsControlDiplomacyOffense.Font = font_1;
            lblOptionsControlDiplomacyTreaties.Font = font_1;
            lblOptionsControlOfferPirateMissions.Font = font_1;
            cmbOptionsControlAgentMissions.Font = font_1;
            cmbOptionsControlAttacks.Font = font_1;
            cmbOptionsControlColonization.Font = font_1;
            cmbOptionsControlColonyFacilities.Font = font_1;
            cmbOptionsControlConstruction.Font = font_1;
            cmbOptionsControlDiplomacyGifts.Font = font_1;
            cmbOptionsControlDiplomacyOffense.Font = font_1;
            cmbOptionsControlDiplomacyTreaties.Font = font_1;
            cmbOptionsControlOfferPirateMissions.Font = font_1;
            chkOptionsControlCharacterLocations.Font = font_1;
            chkOptionsControlColonyTaxRates.Font = font_1;
            chkOptionsControlDesigns.Font = font_1;
            chkOptionsControlFleets.Font = font_1;
            chkOptionsControlPopulationPolicy.Font = font_1;
            chkOptionsControlResearch.Font = font_1;
            chkOptionsControlTroops.Font = font_1;
            cmbOptionsAutomationMode.Font = font_1;
            pnlOptionsAutomationMode.Size = new Size(217, 41);
            pnlOptionsAutomationMode.Location = new Point(10, 21);
            pnlOptionsAutomationMode.BackColor = Color.FromArgb(128, 192, 0, 128);
            lblOptionsAutomationMode.Font = main_0.font_7;
            lblOptionsAutomationMode.Location = new Point(5, 9);
            cmbOptionsAutomationMode.Size = new Size(162, 24);
            cmbOptionsAutomationMode.Location = new Point(58, 25);
            lblOptionsControlColonization.Location = new Point(260, 23);
            lblOptionsControlConstruction.Location = new Point(259, 52);
            lblOptionsControlAgentMissions.Location = new Point(247, 81);
            lblOptionsControlAttacks.Location = new Point(202, 110);
            lblOptionsControlDiplomacyGifts.Location = new Point(207, 139);
            lblOptionsControlDiplomacyTreaties.Location = new Point(279, 168);
            lblOptionsControlDiplomacyOffense.Location = new Point(210, 197);
            lblOptionsControlColonyFacilities.Location = new Point(215, 226);
            lblOptionsControlOfferPirateMissions.Location = new Point(215, 255);
            Size size_ = new Size(236, 21);
            method_154(lblOptionsControlColonization, 191, size_);
            method_154(lblOptionsControlConstruction, 191, size_);
            method_154(lblOptionsControlAgentMissions, 186, new Size(241, 21));
            method_154(lblOptionsControlAttacks, 191, size_);
            method_154(lblOptionsControlDiplomacyGifts, 191, size_);
            method_154(lblOptionsControlDiplomacyTreaties, 191, size_);
            method_154(lblOptionsControlDiplomacyOffense, 191, size_);
            method_154(lblOptionsControlColonyFacilities, 191, size_);
            method_154(lblOptionsControlOfferPirateMissions, 191, size_);
            cmbOptionsControlColonization.Location = new Point(429, 19);
            cmbOptionsControlConstruction.Location = new Point(429, 48);
            cmbOptionsControlAgentMissions.Location = new Point(429, 77);
            cmbOptionsControlAttacks.Location = new Point(429, 106);
            cmbOptionsControlDiplomacyGifts.Location = new Point(429, 135);
            cmbOptionsControlDiplomacyTreaties.Location = new Point(429, 164);
            cmbOptionsControlDiplomacyOffense.Location = new Point(429, 193);
            cmbOptionsControlColonyFacilities.Location = new Point(429, 222);
            cmbOptionsControlOfferPirateMissions.Location = new Point(429, 251);
            cmbOptionsControlAgentMissions.Size = new Size(220, 24);
            cmbOptionsControlAttacks.Size = new Size(220, 24);
            cmbOptionsControlColonization.Size = new Size(220, 24);
            cmbOptionsControlConstruction.Size = new Size(220, 24);
            cmbOptionsControlDiplomacyGifts.Size = new Size(220, 24);
            cmbOptionsControlDiplomacyOffense.Size = new Size(220, 24);
            cmbOptionsControlDiplomacyTreaties.Size = new Size(220, 24);
            cmbOptionsControlColonyFacilities.Size = new Size(220, 24);
            cmbOptionsControlOfferPirateMissions.Size = new Size(220, 24);
            lblOptionsControlColonization.SendToBack();
            lblOptionsControlConstruction.SendToBack();
            lblOptionsControlAgentMissions.SendToBack();
            lblOptionsControlAttacks.SendToBack();
            lblOptionsControlDiplomacyGifts.SendToBack();
            lblOptionsControlDiplomacyTreaties.SendToBack();
            lblOptionsControlDiplomacyOffense.SendToBack();
            lblOptionsControlColonyFacilities.SendToBack();
            lblOptionsControlOfferPirateMissions.SendToBack();
            chkOptionsControlColonyTaxRates.Location = new Point(9, 73);
            chkOptionsControlColonyTaxRates.BringToFront();
            chkOptionsControlPopulationPolicy.Location = new Point(9, 96);
            chkOptionsControlPopulationPolicy.BringToFront();
            chkOptionsControlDesigns.Location = new Point(9, 119);
            chkOptionsControlDesigns.BringToFront();
            chkOptionsControlTroops.Location = new Point(9, 142);
            chkOptionsControlTroops.BringToFront();
            chkOptionsControlFleets.Location = new Point(9, 165);
            chkOptionsControlFleets.BringToFront();
            chkOptionsControlResearch.Location = new Point(9, 188);
            chkOptionsControlResearch.BringToFront();
            chkOptionsControlCharacterLocations.Location = new Point(9, 211);
            chkOptionsControlCharacterLocations.BringToFront();
            btnGameOptionsResetAutomationMessages.Text = TextResolver.GetText("Reset Warnings");
            btnGameOptionsResetAutomationMessages.Size = new Size(73, 40);
            btnGameOptionsResetAutomationMessages.Location = new Point(228, 20);
            btnGameOptionsEmpireSettings.Text = TextResolver.GetText("Empire Settings");
            btnGameOptionsEmpireSettings.Size = new Size(179, 35);
            btnGameOptionsEmpireSettings.Location = new Point(7, 250);
            btnGameOptionsShowMessages.Size = new Size(660, 35);
            btnGameOptionsShowMessages.Location = new Point(12, 589);
            pnlGameOptions.Visible = true;
            pnlGameOptions.BringToFront();
        }

        private void method_154(Label label_0, int int_1, Size size_1)
        {
            label_0.AutoSize = false;
            label_0.TextAlign = ContentAlignment.MiddleRight;
            label_0.Size = size_1;
            label_0.MaximumSize = size_1;
            label_0.Location = new Point(int_1, label_0.Location.Y);
        }

        private void cmbOptionsAutomationMode_SelectedIndexChanged(object sender, EventArgs e)
        {
            string text = cmbOptionsAutomationMode.Text;
            GameOptions gameOptions = null;
            if (text == TextResolver.GetText("Default"))
            {
                gameOptions = method_158();
            }
            else if (text == TextResolver.GetText("Expansion"))
            {
                gameOptions = method_159();
            }
            else if (text == TextResolver.GetText("War and Combat"))
            {
                gameOptions = method_160();
            }
            else if (text == TextResolver.GetText("Diplomacy"))
            {
                gameOptions = method_161();
            }
            else if (text == TextResolver.GetText("Spy Master"))
            {
                gameOptions = method_162();
            }
            else if (text == TextResolver.GetText("Expert") + " (" + TextResolver.GetText("none") + ")")
            {
                gameOptions = method_157();
            }
            else if (text == TextResolver.GetText("Rule in Absence") + " (" + TextResolver.GetText("full") + ")")
            {
                gameOptions = method_156();
            }
            if (gameOptions != null)
            {
                method_155(gameOptions);
            }
        }

        private void uwcbgxAbxH()
        {
            GameOptions other = method_156();
            GameOptions other2 = method_160();
            GameOptions other3 = method_158();
            GameOptions other4 = method_161();
            GameOptions other5 = method_159();
            GameOptions other6 = method_157();
            GameOptions other7 = method_162();
            GameOptions gameOptions = method_163();
            int selectedIndex = 0;
            if (gameOptions.CompareAutomationEquality(other3))
            {
                selectedIndex = 1;
            }
            else if (gameOptions.CompareAutomationEquality(other6))
            {
                selectedIndex = 2;
            }
            else if (gameOptions.CompareAutomationEquality(other))
            {
                selectedIndex = 3;
            }
            else if (gameOptions.CompareAutomationEquality(other5))
            {
                selectedIndex = 4;
            }
            else if (gameOptions.CompareAutomationEquality(other2))
            {
                selectedIndex = 5;
            }
            else if (gameOptions.CompareAutomationEquality(other4))
            {
                selectedIndex = 6;
            }
            else if (gameOptions.CompareAutomationEquality(other7))
            {
                selectedIndex = 7;
            }
            cmbOptionsAutomationMode.SelectedIndexChanged -= cmbOptionsAutomationMode_SelectedIndexChanged;
            cmbOptionsAutomationMode.SelectedIndex = selectedIndex;
            cmbOptionsAutomationMode.SelectedIndexChanged += cmbOptionsAutomationMode_SelectedIndexChanged;
        }

        private void chkOptionsControlColonyTaxRates_CheckedChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void chkOptionsControlPopulationPolicy_CheckedChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void chkOptionsControlDesigns_CheckedChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void chkOptionsControlTroops_CheckedChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void sOmbQcqjdd(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void chkOptionsControlCharacterLocations_CheckedChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlColonization_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlConstruction_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlAgentMissions_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlColonyFacilities_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlAttacks_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlDiplomacyGifts_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlDiplomacyTreaties_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlOfferPirateMissions_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void cmbOptionsControlDiplomacyOffense_SelectedIndexChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void chkOptionsControlResearch_CheckedChanged(object sender, EventArgs e)
        {
            uwcbgxAbxH();
        }

        private void btnGameOptionsResetAutomationMessages_Click(object sender, EventArgs e)
        {
            string string_ = TextResolver.GetText("Reenable All Automation Prompts");
            MessageBoxEx messageBoxEx = main_0.method_372(string_, TextResolver.GetText("Reset Automation Messages?"));
            if (messageBoxEx.Show(this).ToLower(CultureInfo.InvariantCulture) == "yes")
            {
                MessageBoxExManager.ResetAllSavedResponses();
                string filename = Main.GetGameFilesFolderCreateIfNeeded() + "automationPrefs";
                MessageBoxExManager.WriteSavedResponses(filename);
            }
        }

        private void method_155(GameOptions gameOptions_0)
        {
            cmbOptionsControlAttacks.SelectedIndexChanged -= cmbOptionsControlAttacks_SelectedIndexChanged;
            cmbOptionsControlColonization.SelectedIndexChanged -= cmbOptionsControlColonization_SelectedIndexChanged;
            chkOptionsControlColonyTaxRates.CheckedChanged -= chkOptionsControlColonyTaxRates_CheckedChanged;
            cmbOptionsControlConstruction.SelectedIndexChanged -= cmbOptionsControlConstruction_SelectedIndexChanged;
            chkOptionsControlDesigns.CheckedChanged -= chkOptionsControlDesigns_CheckedChanged;
            cmbOptionsControlDiplomacyGifts.SelectedIndexChanged -= cmbOptionsControlDiplomacyGifts_SelectedIndexChanged;
            cmbOptionsControlDiplomacyOffense.SelectedIndexChanged -= cmbOptionsControlDiplomacyOffense_SelectedIndexChanged;
            cmbOptionsControlDiplomacyTreaties.SelectedIndexChanged -= cmbOptionsControlDiplomacyTreaties_SelectedIndexChanged;
            chkOptionsControlFleets.CheckedChanged -= sOmbQcqjdd;
            chkOptionsControlTroops.CheckedChanged -= chkOptionsControlTroops_CheckedChanged;
            cmbOptionsControlAgentMissions.SelectedIndexChanged -= cmbOptionsControlAgentMissions_SelectedIndexChanged;
            chkOptionsControlResearch.CheckedChanged -= chkOptionsControlResearch_CheckedChanged;
            cmbOptionsControlColonyFacilities.SelectedIndexChanged -= cmbOptionsControlColonyFacilities_SelectedIndexChanged;
            chkOptionsControlPopulationPolicy.CheckedChanged -= chkOptionsControlPopulationPolicy_CheckedChanged;
            chkOptionsControlCharacterLocations.CheckedChanged -= chkOptionsControlCharacterLocations_CheckedChanged;
            cmbOptionsControlOfferPirateMissions.SelectedIndexChanged -= cmbOptionsControlOfferPirateMissions_SelectedIndexChanged;
            cmbOptionsControlAttacks.SelectedIndex = method_171(gameOptions_0.ControlAttacksOnEnemiesDefault);
            cmbOptionsControlColonization.SelectedIndex = method_171(gameOptions_0.ControlColonizationDefault);
            chkOptionsControlColonyTaxRates.Checked = gameOptions_0.ControlColonyTaxRatesDefault;
            cmbOptionsControlConstruction.SelectedIndex = method_171(gameOptions_0.ControlShipBuildingDefault);
            chkOptionsControlDesigns.Checked = gameOptions_0.ControlShipDesignDefault;
            cmbOptionsControlDiplomacyGifts.SelectedIndex = method_171(gameOptions_0.ControlDiplomaticGiftsDefault);
            cmbOptionsControlDiplomacyOffense.SelectedIndex = method_171(gameOptions_0.ControlWarTradeSanctionsDefault);
            cmbOptionsControlDiplomacyTreaties.SelectedIndex = method_171(gameOptions_0.ControlTreatyNegotiationDefault);
            chkOptionsControlFleets.Checked = gameOptions_0.ControlFleetFormationDefault;
            chkOptionsControlTroops.Checked = gameOptions_0.ControlTroopRecruitmentDefault;
            chkOptionsControlCharacterLocations.Checked = gameOptions_0.ControlCharacterLocationsDefault;
            cmbOptionsControlAgentMissions.SelectedIndex = method_171(gameOptions_0.ControlAgentAssignmentDefault);
            chkOptionsControlResearch.Checked = gameOptions_0.ControlResearchDefault;
            cmbOptionsControlColonyFacilities.SelectedIndex = method_171(gameOptions_0.ControlColonyFacilitiesDefault);
            chkOptionsControlPopulationPolicy.Checked = gameOptions_0.ControlPopulationPolicyDefault;
            cmbOptionsControlOfferPirateMissions.SelectedIndex = method_171(gameOptions_0.ControlOfferPirateMissionsDefault);
            cmbOptionsControlAttacks.SelectedIndexChanged += cmbOptionsControlAttacks_SelectedIndexChanged;
            cmbOptionsControlColonization.SelectedIndexChanged += cmbOptionsControlColonization_SelectedIndexChanged;
            chkOptionsControlColonyTaxRates.CheckedChanged += chkOptionsControlColonyTaxRates_CheckedChanged;
            cmbOptionsControlConstruction.SelectedIndexChanged += cmbOptionsControlConstruction_SelectedIndexChanged;
            chkOptionsControlDesigns.CheckedChanged += chkOptionsControlDesigns_CheckedChanged;
            cmbOptionsControlDiplomacyGifts.SelectedIndexChanged += cmbOptionsControlDiplomacyGifts_SelectedIndexChanged;
            cmbOptionsControlDiplomacyOffense.SelectedIndexChanged += cmbOptionsControlDiplomacyOffense_SelectedIndexChanged;
            cmbOptionsControlDiplomacyTreaties.SelectedIndexChanged += cmbOptionsControlDiplomacyTreaties_SelectedIndexChanged;
            chkOptionsControlFleets.CheckedChanged += sOmbQcqjdd;
            chkOptionsControlTroops.CheckedChanged += chkOptionsControlTroops_CheckedChanged;
            cmbOptionsControlAgentMissions.SelectedIndexChanged += cmbOptionsControlAgentMissions_SelectedIndexChanged;
            chkOptionsControlResearch.CheckedChanged += chkOptionsControlResearch_CheckedChanged;
            cmbOptionsControlColonyFacilities.SelectedIndexChanged += cmbOptionsControlColonyFacilities_SelectedIndexChanged;
            chkOptionsControlPopulationPolicy.CheckedChanged += chkOptionsControlPopulationPolicy_CheckedChanged;
            chkOptionsControlCharacterLocations.CheckedChanged += chkOptionsControlCharacterLocations_CheckedChanged;
            cmbOptionsControlOfferPirateMissions.SelectedIndexChanged += cmbOptionsControlOfferPirateMissions_SelectedIndexChanged;
        }

        private GameOptions method_156()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAttacksOnEnemiesDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonizationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonyTaxRatesDefault = true;
            gameOptions.ControlShipBuildingDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlShipDesignDefault = true;
            gameOptions.ControlDiplomaticGiftsDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlWarTradeSanctionsDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlTreatyNegotiationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlFleetFormationDefault = true;
            gameOptions.ControlTroopRecruitmentDefault = true;
            gameOptions.ControlAgentAssignmentDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlResearchDefault = true;
            gameOptions.ControlColonyFacilitiesDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlPopulationPolicyDefault = true;
            gameOptions.ControlCharacterLocationsDefault = true;
            gameOptions.ControlOfferPirateMissionsDefault = AutomationLevel.FullyAutomated;
            return gameOptions;
        }

        private GameOptions method_157()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAttacksOnEnemiesDefault = AutomationLevel.Manual;
            gameOptions.ControlColonizationDefault = AutomationLevel.Manual;
            gameOptions.ControlColonyTaxRatesDefault = false;
            gameOptions.ControlShipBuildingDefault = AutomationLevel.Manual;
            gameOptions.ControlShipDesignDefault = false;
            gameOptions.ControlDiplomaticGiftsDefault = AutomationLevel.Manual;
            gameOptions.ControlWarTradeSanctionsDefault = AutomationLevel.Manual;
            gameOptions.ControlTreatyNegotiationDefault = AutomationLevel.Manual;
            gameOptions.ControlFleetFormationDefault = false;
            gameOptions.ControlTroopRecruitmentDefault = false;
            gameOptions.ControlAgentAssignmentDefault = AutomationLevel.Manual;
            gameOptions.ControlResearchDefault = false;
            gameOptions.ControlColonyFacilitiesDefault = AutomationLevel.Manual;
            gameOptions.ControlPopulationPolicyDefault = false;
            gameOptions.ControlCharacterLocationsDefault = false;
            gameOptions.ControlOfferPirateMissionsDefault = AutomationLevel.Manual;
            return gameOptions;
        }

        private GameOptions method_158()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAgentAssignmentDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlAttacksOnEnemiesDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlColonizationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonyTaxRatesDefault = true;
            gameOptions.ControlDiplomaticGiftsDefault = AutomationLevel.Manual;
            gameOptions.ControlFleetFormationDefault = true;
            gameOptions.ControlShipBuildingDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlShipDesignDefault = true;
            gameOptions.ControlTreatyNegotiationDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlTroopRecruitmentDefault = true;
            gameOptions.ControlWarTradeSanctionsDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlResearchDefault = true;
            gameOptions.ControlColonyFacilitiesDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlPopulationPolicyDefault = false;
            gameOptions.ControlCharacterLocationsDefault = true;
            gameOptions.ControlOfferPirateMissionsDefault = AutomationLevel.SemiAutomated;
            return gameOptions;
        }

        private GameOptions method_159()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAttacksOnEnemiesDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonizationDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlColonyTaxRatesDefault = true;
            gameOptions.ControlShipBuildingDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlShipDesignDefault = true;
            gameOptions.ControlDiplomaticGiftsDefault = AutomationLevel.Manual;
            gameOptions.ControlWarTradeSanctionsDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlTreatyNegotiationDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlFleetFormationDefault = true;
            gameOptions.ControlTroopRecruitmentDefault = true;
            gameOptions.ControlAgentAssignmentDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlResearchDefault = true;
            gameOptions.ControlColonyFacilitiesDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlPopulationPolicyDefault = false;
            gameOptions.ControlCharacterLocationsDefault = true;
            gameOptions.ControlOfferPirateMissionsDefault = AutomationLevel.SemiAutomated;
            return gameOptions;
        }

        private GameOptions method_160()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAttacksOnEnemiesDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlColonizationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonyTaxRatesDefault = true;
            gameOptions.ControlShipBuildingDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlShipDesignDefault = true;
            gameOptions.ControlDiplomaticGiftsDefault = AutomationLevel.Manual;
            gameOptions.ControlWarTradeSanctionsDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlTreatyNegotiationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlFleetFormationDefault = true;
            gameOptions.ControlTroopRecruitmentDefault = true;
            gameOptions.ControlAgentAssignmentDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlResearchDefault = true;
            gameOptions.ControlColonyFacilitiesDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlPopulationPolicyDefault = true;
            gameOptions.ControlCharacterLocationsDefault = true;
            gameOptions.ControlOfferPirateMissionsDefault = AutomationLevel.SemiAutomated;
            return gameOptions;
        }

        private GameOptions method_161()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAttacksOnEnemiesDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlColonizationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonyTaxRatesDefault = true;
            gameOptions.ControlShipBuildingDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlShipDesignDefault = true;
            gameOptions.ControlDiplomaticGiftsDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlWarTradeSanctionsDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlTreatyNegotiationDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlFleetFormationDefault = true;
            gameOptions.ControlTroopRecruitmentDefault = true;
            gameOptions.ControlAgentAssignmentDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlResearchDefault = true;
            gameOptions.ControlColonyFacilitiesDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlPopulationPolicyDefault = false;
            gameOptions.ControlCharacterLocationsDefault = true;
            gameOptions.ControlOfferPirateMissionsDefault = AutomationLevel.SemiAutomated;
            return gameOptions;
        }

        private GameOptions method_162()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAttacksOnEnemiesDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonizationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlColonyTaxRatesDefault = true;
            gameOptions.ControlShipBuildingDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlShipDesignDefault = true;
            gameOptions.ControlDiplomaticGiftsDefault = AutomationLevel.Manual;
            gameOptions.ControlWarTradeSanctionsDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlTreatyNegotiationDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlFleetFormationDefault = true;
            gameOptions.ControlTroopRecruitmentDefault = true;
            gameOptions.ControlAgentAssignmentDefault = AutomationLevel.SemiAutomated;
            gameOptions.ControlResearchDefault = true;
            gameOptions.ControlColonyFacilitiesDefault = AutomationLevel.FullyAutomated;
            gameOptions.ControlPopulationPolicyDefault = true;
            gameOptions.ControlCharacterLocationsDefault = true;
            gameOptions.ControlOfferPirateMissionsDefault = AutomationLevel.SemiAutomated;
            return gameOptions;
        }

        private GameOptions method_163()
        {
            GameOptions gameOptions = new GameOptions();
            gameOptions.ControlAttacksOnEnemiesDefault = method_170(cmbOptionsControlAttacks.SelectedIndex);
            gameOptions.ControlColonizationDefault = method_170(cmbOptionsControlColonization.SelectedIndex);
            gameOptions.ControlColonyTaxRatesDefault = chkOptionsControlColonyTaxRates.Checked;
            gameOptions.ControlShipBuildingDefault = method_170(cmbOptionsControlConstruction.SelectedIndex);
            gameOptions.ControlShipDesignDefault = chkOptionsControlDesigns.Checked;
            gameOptions.ControlDiplomaticGiftsDefault = method_170(cmbOptionsControlDiplomacyGifts.SelectedIndex);
            gameOptions.ControlWarTradeSanctionsDefault = method_170(cmbOptionsControlDiplomacyOffense.SelectedIndex);
            gameOptions.ControlTreatyNegotiationDefault = method_170(cmbOptionsControlDiplomacyTreaties.SelectedIndex);
            gameOptions.ControlFleetFormationDefault = chkOptionsControlFleets.Checked;
            gameOptions.ControlTroopRecruitmentDefault = chkOptionsControlTroops.Checked;
            gameOptions.ControlAgentAssignmentDefault = method_170(cmbOptionsControlAgentMissions.SelectedIndex);
            gameOptions.ControlResearchDefault = chkOptionsControlResearch.Checked;
            gameOptions.ControlColonyFacilitiesDefault = method_170(cmbOptionsControlColonyFacilities.SelectedIndex);
            gameOptions.ControlPopulationPolicyDefault = chkOptionsControlPopulationPolicy.Checked;
            gameOptions.ControlCharacterLocationsDefault = chkOptionsControlCharacterLocations.Checked;
            gameOptions.ControlOfferPirateMissionsDefault = method_170(cmbOptionsControlOfferPirateMissions.SelectedIndex);
            return gameOptions;
        }

        private void method_164()
        {
            method_169();
            if (pnlGameOptionsAdvancedDisplaySettings.Visible)
            {
                method_185();
            }
            if (pnlGameOptionsEmpireSettings.Visible)
            {
                method_181();
            }
            if (pnlGameOptionsMessages.Visible)
            {
                method_183();
            }
            pnlGameOptions.SendToBack();
            pnlGameOptions.Visible = false;
        }

        private int method_165()
        {
            return cmbOptionsMouseScrollWheelBehaviour.SelectedIndex switch
            {
                -1 => 2,
                0 => 0,
                1 => 1,
                2 => 2,
                _ => 0,
            };
        }

        private void method_166(int int_1)
        {
            switch (int_1)
            {
                default:
                    cmbOptionsMouseScrollWheelBehaviour.SelectedIndex = 2;
                    break;
                case 0:
                    cmbOptionsMouseScrollWheelBehaviour.SelectedIndex = 0;
                    break;
                case 1:
                    cmbOptionsMouseScrollWheelBehaviour.SelectedIndex = 1;
                    break;
                case 2:
                    cmbOptionsMouseScrollWheelBehaviour.SelectedIndex = 2;
                    break;
            }
        }

        private void method_167()
        {
            main_0.gameOptions_0.DisplayMessageUnderAttackCivilianShips = chkOptionsScrollingMessageUnderAttackCivilianShips.Checked;
            main_0.gameOptions_0.DisplayMessageUnderAttackCivilianBases = chkOptionsScrollingMessageUnderAttackCivilianBases.Checked;
            main_0.gameOptions_0.DisplayMessageUnderAttackExplorationShips = chkOptionsScrollingMessageUnderAttackExplorationShips.Checked;
            main_0.gameOptions_0.DisplayMessageUnderAttackColonyConstructionShips = chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Checked;
            main_0.gameOptions_0.DisplayMessageUnderAttackMilitaryShips = chkOptionsScrollingMessageUnderAttackMilitaryShips.Checked;
            main_0.gameOptions_0.DisplayMessageUnderAttackOtherStateBases = chkOptionsScrollingMessageUnderAttackOtherStateBases.Checked;
            main_0.gameOptions_0.DisplayMessageUnderAttackColoniesSpaceportsDefensiveBases = chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Checked;
            main_0.gameOptions_0.DisplayMessageBuiltObjectBuilt = chkOptionsScrollingMessageNewShipBuilt.Checked;
            main_0.gameOptions_0.DisplayMessageColonyInvaded = chkOptionsScrollingMessageColonyGainLoss.Checked;
            main_0.gameOptions_0.DisplayMessageDiplomacyEmpireMetDestroyed = chkOptionsScrollingMessageEmpireMetDestroyed.Checked;
            main_0.gameOptions_0.DisplayMessageDiplomacyGift = chkOptionsScrollingMessageRequestWarning.Checked;
            main_0.gameOptions_0.DisplayMessageDiplomacyRequestWarning = chkOptionsScrollingMessageRequestWarning.Checked;
            main_0.gameOptions_0.DisplayMessageDiplomacyTreaty = chkOptionsScrollingMessageDiplomacyTreaties.Checked;
            main_0.gameOptions_0.DisplayMessageDiplomacyWarTradeSanctions = chkOptionsScrollingMessageWarTradeSanctions.Checked;
            main_0.gameOptions_0.DisplayMessageNewColony = chkOptionsScrollingMessageColonyGainLoss.Checked;
            main_0.gameOptions_0.DisplayMessageResearchNewComponent = chkOptionsScrollingMessageResearchBreakthrough.Checked;
            main_0.gameOptions_0.DisplayMessageIntelligenceMissions = chkOptionsScrollingMessageIntelligenceMissions.Checked;
            main_0.gameOptions_0.DisplayMessageExploration = chkOptionsScrollingMessageExploration.Checked;
            main_0.gameOptions_0.DisplayMessageShipMissionComplete = chkOptionsScrollingMessageShipMissionComplete.Checked;
            main_0.gameOptions_0.DisplayMessageShipNeedsRefuelling = chkOptionsScrollingMessageShipNeedsRefuelling.Checked;
            main_0.gameOptions_0.DisplayMessageConstructionResourceShortage = chkOptionsScrollingMessageConstructionResourceShortage.Checked;
            main_0.gameOptions_0.DisplayPopupUnderAttackCivilianShips = chkOptionsPopupMessageUnderAttackCivilianShips.Checked;
            main_0.gameOptions_0.DisplayPopupUnderAttackCivilianBases = chkOptionsPopupMessageUnderAttackCivilianBases.Checked;
            main_0.gameOptions_0.DisplayPopupUnderAttackExplorationShips = chkOptionsPopupMessageUnderAttackExplorationShips.Checked;
            main_0.gameOptions_0.DisplayPopupUnderAttackColonyConstructionShips = chkOptionsPopupMessageUnderAttackColonyConstructionShips.Checked;
            main_0.gameOptions_0.DisplayPopupUnderAttackMilitaryShips = chkOptionsPopupMessageUnderAttackMilitaryShips.Checked;
            main_0.gameOptions_0.DisplayPopupUnderAttackOtherStateBases = chkOptionsPopupMessageUnderAttackOtherStateBases.Checked;
            main_0.gameOptions_0.DisplayPopupUnderAttackColoniesSpaceportsDefensiveBases = chkOptionsPopupMessageUnderAttackColoniesSpaceports.Checked;
            main_0.gameOptions_0.DisplayPopupBuiltObjectBuilt = chkOptionsPopupMessageShipBuilt.Checked;
            main_0.gameOptions_0.DisplayPopupColonyInvaded = chkOptionsPopupMessageColonyGainLoss.Checked;
            main_0.gameOptions_0.DisplayPopupDiplomacyEmpireMetDestroyed = chkOptionsPopupMessageEmpireMetDestroyed.Checked;
            main_0.gameOptions_0.DisplayPopupDiplomacyGift = chkOptionsPopupMessageRequestWarning.Checked;
            main_0.gameOptions_0.DisplayPopupDiplomacyRequestWarning = chkOptionsPopupMessageRequestWarning.Checked;
            main_0.gameOptions_0.DisplayPopupDiplomacyTreaty = chkOptionsPopupMessageDiplomacyTreaties.Checked;
            main_0.gameOptions_0.DisplayPopupDiplomacyWarTradeSanctions = chkOptionsPopupMessageDiplomacyWarTradeSanctions.Checked;
            main_0.gameOptions_0.DisplayPopupNewColony = chkOptionsPopupMessageColonyGainLoss.Checked;
            main_0.gameOptions_0.DisplayPopupResearchNewComponent = chkOptionsPopupMessageResearchBreakthrough.Checked;
            main_0.gameOptions_0.DisplayPopupIntelligenceMissions = chkOptionsPopupMessageIntelligenceMissions.Checked;
            main_0.gameOptions_0.DisplayPopupExploration = chkOptionsPopupMessageExploration.Checked;
            main_0.gameOptions_0.DisplayPopupShipMissionComplete = chkOptionsPopupMessageShipMissionComplete.Checked;
            main_0.gameOptions_0.DisplayPopupShipNeedsRefuelling = chkOptionsPopupMessageShipNeedsRefuelling.Checked;
            main_0.gameOptions_0.DisplayPopupConstructionResourceShortage = chkOptionsPopupMessageConstructionResourceShortage.Checked;
        }

        private void method_168()
        {
            chkOptionsScrollingMessageUnderAttackCivilianShips.Checked = main_0.gameOptions_0.DisplayMessageUnderAttackCivilianShips;
            chkOptionsScrollingMessageUnderAttackCivilianBases.Checked = main_0.gameOptions_0.DisplayMessageUnderAttackCivilianBases;
            chkOptionsScrollingMessageUnderAttackExplorationShips.Checked = main_0.gameOptions_0.DisplayMessageUnderAttackExplorationShips;
            chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Checked = main_0.gameOptions_0.DisplayMessageUnderAttackColonyConstructionShips;
            chkOptionsScrollingMessageUnderAttackMilitaryShips.Checked = main_0.gameOptions_0.DisplayMessageUnderAttackMilitaryShips;
            chkOptionsScrollingMessageUnderAttackOtherStateBases.Checked = main_0.gameOptions_0.DisplayMessageUnderAttackOtherStateBases;
            chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Checked = main_0.gameOptions_0.DisplayMessageUnderAttackColoniesSpaceportsDefensiveBases;
            chkOptionsScrollingMessageNewShipBuilt.Checked = main_0.gameOptions_0.DisplayMessageBuiltObjectBuilt;
            chkOptionsScrollingMessageColonyGainLoss.Checked = main_0.gameOptions_0.DisplayMessageColonyInvaded;
            chkOptionsScrollingMessageEmpireMetDestroyed.Checked = main_0.gameOptions_0.DisplayMessageDiplomacyEmpireMetDestroyed;
            chkOptionsScrollingMessageRequestWarning.Checked = main_0.gameOptions_0.DisplayMessageDiplomacyRequestWarning;
            chkOptionsScrollingMessageDiplomacyTreaties.Checked = main_0.gameOptions_0.DisplayMessageDiplomacyTreaty;
            chkOptionsScrollingMessageWarTradeSanctions.Checked = main_0.gameOptions_0.DisplayMessageDiplomacyWarTradeSanctions;
            chkOptionsScrollingMessageResearchBreakthrough.Checked = main_0.gameOptions_0.DisplayMessageResearchNewComponent;
            chkOptionsScrollingMessageIntelligenceMissions.Checked = main_0.gameOptions_0.DisplayMessageIntelligenceMissions;
            chkOptionsScrollingMessageExploration.Checked = main_0.gameOptions_0.DisplayMessageExploration;
            chkOptionsScrollingMessageShipMissionComplete.Checked = main_0.gameOptions_0.DisplayMessageShipMissionComplete;
            chkOptionsScrollingMessageShipNeedsRefuelling.Checked = main_0.gameOptions_0.DisplayMessageShipNeedsRefuelling;
            chkOptionsScrollingMessageConstructionResourceShortage.Checked = main_0.gameOptions_0.DisplayMessageConstructionResourceShortage;
            chkOptionsPopupMessageShipBuilt.Checked = main_0.gameOptions_0.DisplayPopupBuiltObjectBuilt;
            chkOptionsPopupMessageColonyGainLoss.Checked = main_0.gameOptions_0.DisplayPopupColonyInvaded;
            chkOptionsPopupMessageEmpireMetDestroyed.Checked = main_0.gameOptions_0.DisplayPopupDiplomacyEmpireMetDestroyed;
            chkOptionsPopupMessageRequestWarning.Checked = main_0.gameOptions_0.DisplayPopupDiplomacyRequestWarning;
            chkOptionsPopupMessageDiplomacyTreaties.Checked = main_0.gameOptions_0.DisplayPopupDiplomacyTreaty;
            chkOptionsPopupMessageDiplomacyWarTradeSanctions.Checked = main_0.gameOptions_0.DisplayPopupDiplomacyWarTradeSanctions;
            chkOptionsPopupMessageResearchBreakthrough.Checked = main_0.gameOptions_0.DisplayPopupResearchNewComponent;
            chkOptionsPopupMessageIntelligenceMissions.Checked = main_0.gameOptions_0.DisplayPopupIntelligenceMissions;
            chkOptionsPopupMessageExploration.Checked = main_0.gameOptions_0.DisplayPopupExploration;
            chkOptionsPopupMessageShipMissionComplete.Checked = main_0.gameOptions_0.DisplayPopupShipMissionComplete;
            chkOptionsPopupMessageShipNeedsRefuelling.Checked = main_0.gameOptions_0.DisplayPopupShipNeedsRefuelling;
            chkOptionsPopupMessageConstructionResourceShortage.Checked = main_0.gameOptions_0.DisplayPopupConstructionResourceShortage;
            chkOptionsPopupMessageUnderAttackCivilianShips.Checked = main_0.gameOptions_0.DisplayPopupUnderAttackCivilianShips;
            chkOptionsPopupMessageUnderAttackCivilianBases.Checked = main_0.gameOptions_0.DisplayPopupUnderAttackCivilianBases;
            chkOptionsPopupMessageUnderAttackExplorationShips.Checked = main_0.gameOptions_0.DisplayPopupUnderAttackExplorationShips;
            chkOptionsPopupMessageUnderAttackColonyConstructionShips.Checked = main_0.gameOptions_0.DisplayPopupUnderAttackColonyConstructionShips;
            chkOptionsPopupMessageUnderAttackMilitaryShips.Checked = main_0.gameOptions_0.DisplayPopupUnderAttackMilitaryShips;
            chkOptionsPopupMessageUnderAttackOtherStateBases.Checked = main_0.gameOptions_0.DisplayPopupUnderAttackOtherStateBases;
            chkOptionsPopupMessageUnderAttackColoniesSpaceports.Checked = main_0.gameOptions_0.DisplayPopupUnderAttackColoniesSpaceportsDefensiveBases;
        }

        private void method_169()
        {
            main_0.gameOptions_0.AutoPauseWhenInPopupWindow = chkOptionsAutoPauseInPopup.Checked;
            main_0.gameOptions_0.MainViewScrollSpeed = sldOptionsMainViewScrollSpeed.Value;
            main_0.gameOptions_0.MainViewZoomSpeed = sldOptionsMainViewZoomSpeed.Value;
            if (main_0.gameOptions_0.StarFieldSize != sldOptionsMainViewStarFieldSize.Value)
            {
                main_0.gameOptions_0.StarFieldSize = sldOptionsMainViewStarFieldSize.Value;
                if (main_0.mainView.main_0 != null)
                {
                    main_0.mainView.method_14(main_0.gameOptions_0.StarFieldSize);
                }
            }
            main_0.gameOptions_0.ShowSystemNebulae = chkOptionsShowSystemNebulae.Checked;
            main_0.gameOptions_0.MusicVolume = (double)sldOptionsMusicVolume.Value / 100.0;
            main_0.gameOptions_0.SoundEffectsVolume = (double)sldOptionsSoundEffectsVolume.Value / 100.0;
            main_0.MusicPlayer.SetVolume(main_0.gameOptions_0.MusicVolume);
            main_0.EffectsPlayer.Volume = main_0.gameOptions_0.SoundEffectsVolume;
            GlassButton.Volume = main_0.gameOptions_0.SoundEffectsVolume;
            CloseButton.Volume = main_0.gameOptions_0.SoundEffectsVolume;
            ListViewBase.Volume = main_0.gameOptions_0.SoundEffectsVolume;
            HoverButton.Volume = main_0.gameOptions_0.SoundEffectsVolume;
            HoverMenuItem.Volume = main_0.gameOptions_0.SoundEffectsVolume;
            main_0.gameOptions_0.MouseScrollWheelBehaviour = method_165();
            main_0.gameOptions_0.LoadedGamesPaused = chkOptionsLoadedGamesPaused.Checked;
            if (chkOptionsAutoSave.Checked)
            {
                main_0.gameOptions_0.AutoSaveInterval = (int)numOptionsAutoSaveMinutes.Value;
            }
            else
            {
                main_0.gameOptions_0.AutoSaveInterval = 0;
            }
            main_0.gameOptions_0.ControlAttacksOnEnemiesDefault = method_170(cmbOptionsControlAttacks.SelectedIndex);
            main_0.gameOptions_0.ControlColonizationDefault = method_170(cmbOptionsControlColonization.SelectedIndex);
            main_0.gameOptions_0.ControlColonyTaxRatesDefault = chkOptionsControlColonyTaxRates.Checked;
            main_0.gameOptions_0.ControlShipBuildingDefault = method_170(cmbOptionsControlConstruction.SelectedIndex);
            main_0.gameOptions_0.ControlShipDesignDefault = chkOptionsControlDesigns.Checked;
            main_0.gameOptions_0.ControlDiplomaticGiftsDefault = method_170(cmbOptionsControlDiplomacyGifts.SelectedIndex);
            main_0.gameOptions_0.ControlWarTradeSanctionsDefault = method_170(cmbOptionsControlDiplomacyOffense.SelectedIndex);
            main_0.gameOptions_0.ControlTreatyNegotiationDefault = method_170(cmbOptionsControlDiplomacyTreaties.SelectedIndex);
            main_0.gameOptions_0.ControlFleetFormationDefault = chkOptionsControlFleets.Checked;
            main_0.gameOptions_0.ControlTroopRecruitmentDefault = chkOptionsControlTroops.Checked;
            main_0.gameOptions_0.ControlAgentAssignmentDefault = method_170(cmbOptionsControlAgentMissions.SelectedIndex);
            main_0.gameOptions_0.ControlResearchDefault = chkOptionsControlResearch.Checked;
            main_0.gameOptions_0.ControlColonyFacilitiesDefault = method_170(cmbOptionsControlColonyFacilities.SelectedIndex);
            main_0.gameOptions_0.ControlPopulationPolicyDefault = chkOptionsControlPopulationPolicy.Checked;
            main_0.gameOptions_0.ControlCharacterLocationsDefault = chkOptionsControlCharacterLocations.Checked;
            main_0.gameOptions_0.ControlOfferPirateMissionsDefault = method_170(cmbOptionsControlOfferPirateMissions.SelectedIndex);
            main_0.YxwyUefOyQ();
            main_0.method_257();
        }

        private AutomationLevel method_170(int int_1)
        {
            AutomationLevel result = AutomationLevel.Manual;
            switch (int_1)
            {
                case 0:
                    result = AutomationLevel.Manual;
                    break;
                case 1:
                    result = AutomationLevel.SemiAutomated;
                    break;
                case 2:
                    result = AutomationLevel.FullyAutomated;
                    break;
            }
            return result;
        }

        private int method_171(AutomationLevel automationLevel_0)
        {
            int result = 0;
            switch (automationLevel_0)
            {
                case AutomationLevel.Manual:
                    result = 0;
                    break;
                case AutomationLevel.SemiAutomated:
                    result = 1;
                    break;
                case AutomationLevel.FullyAutomated:
                    result = 2;
                    break;
            }
            return result;
        }

        private void method_172()
        {
            sldOptionsMainViewZoomSpeed.Minimum = 1;
            chkOptionsAutoPauseInPopup.Checked = main_0.gameOptions_0.AutoPauseWhenInPopupWindow;
            sldOptionsMainViewScrollSpeed.Value = main_0.gameOptions_0.MainViewScrollSpeed;
            sldOptionsMainViewStarFieldSize.Value = main_0.gameOptions_0.StarFieldSize;
            sldOptionsMainViewZoomSpeed.Value = main_0.gameOptions_0.MainViewZoomSpeed;
            chkOptionsShowSystemNebulae.Checked = main_0.gameOptions_0.ShowSystemNebulae;
            sldOptionsMusicVolume.Value = (int)(main_0.gameOptions_0.MusicVolume * 100.0);
            sldOptionsSoundEffectsVolume.Value = (int)(main_0.gameOptions_0.SoundEffectsVolume * 100.0);
            method_166(main_0.gameOptions_0.MouseScrollWheelBehaviour);
            chkOptionsLoadedGamesPaused.Checked = main_0.gameOptions_0.LoadedGamesPaused;
            if (main_0.gameOptions_0.AutoSaveInterval > 0)
            {
                chkOptionsAutoSave.Checked = true;
                numOptionsAutoSaveMinutes.Value = Math.Max(10, main_0.gameOptions_0.AutoSaveInterval);
                numOptionsAutoSaveMinutes.Enabled = true;
            }
            else
            {
                chkOptionsAutoSave.Checked = false;
                numOptionsAutoSaveMinutes.Enabled = false;
            }
            cmbOptionsControlAttacks.SelectedIndex = method_171(main_0.gameOptions_0.ControlAttacksOnEnemiesDefault);
            cmbOptionsControlColonization.SelectedIndex = method_171(main_0.gameOptions_0.ControlColonizationDefault);
            chkOptionsControlColonyTaxRates.Checked = main_0.gameOptions_0.ControlColonyTaxRatesDefault;
            cmbOptionsControlConstruction.SelectedIndex = method_171(main_0.gameOptions_0.ControlShipBuildingDefault);
            chkOptionsControlDesigns.Checked = main_0.gameOptions_0.ControlShipDesignDefault;
            cmbOptionsControlDiplomacyGifts.SelectedIndex = method_171(main_0.gameOptions_0.ControlDiplomaticGiftsDefault);
            cmbOptionsControlDiplomacyOffense.SelectedIndex = method_171(main_0.gameOptions_0.ControlWarTradeSanctionsDefault);
            cmbOptionsControlDiplomacyTreaties.SelectedIndex = method_171(main_0.gameOptions_0.ControlTreatyNegotiationDefault);
            chkOptionsControlFleets.Checked = main_0.gameOptions_0.ControlFleetFormationDefault;
            chkOptionsControlTroops.Checked = main_0.gameOptions_0.ControlTroopRecruitmentDefault;
            cmbOptionsControlAgentMissions.SelectedIndex = method_171(main_0.gameOptions_0.ControlAgentAssignmentDefault);
            chkOptionsControlResearch.Checked = main_0.gameOptions_0.ControlResearchDefault;
            cmbOptionsControlColonyFacilities.SelectedIndex = method_171(main_0.gameOptions_0.ControlColonyFacilitiesDefault);
            chkOptionsControlPopulationPolicy.Checked = main_0.gameOptions_0.ControlPopulationPolicyDefault;
            chkOptionsControlCharacterLocations.Checked = main_0.gameOptions_0.ControlCharacterLocationsDefault;
            cmbOptionsControlOfferPirateMissions.SelectedIndex = method_171(main_0.gameOptions_0.ControlOfferPirateMissionsDefault);
        }

        private void sldOptionsMusicVolume_Scroll(object sender, ScrollEventArgs e)
        {
            main_0.gameOptions_0.MusicVolume = (double)sldOptionsMusicVolume.Value / 100.0;
            main_0.MusicPlayer.SetVolume(main_0.gameOptions_0.MusicVolume);
        }

        private void sldOptionsSoundEffectsVolume_Scroll(object sender, ScrollEventArgs e)
        {
            main_0.gameOptions_0.SoundEffectsVolume = (double)sldOptionsSoundEffectsVolume.Value / 100.0;
            main_0.EffectsPlayer.Volume = main_0.gameOptions_0.SoundEffectsVolume;
        }

        private void pnlGameOptions_CloseButtonClicked(object sender, EventArgs e)
        {
            method_164();
        }

        private void lnkOptions_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            method_153();
        }

        private void lnkOptions_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Options") + ":\n" + TextResolver.GetText("Control display, sound and other game settings"));
        }

        private void lnkOptions_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void method_173(object sender, LinkLabelLinkClickedEventArgs e)
        {
            string name = TextResolver.GetText("Government Types");
            string text = "";
            if (text != "(" + TextResolver.GetText("Random") + ")")
            {
                GovernmentAttributes byName = Galaxy.GovernmentsStatic.GetByName(text);
                if (byName != null)
                {
                    name = byName.Name;
                }
            }
            method_127(name);
        }

        private void pnlGameOptionsEmpireSettings_CloseButtonClicked(object sender, EventArgs e)
        {
            method_181();
        }

        private void btnGameOptionsEmpireSettings_Click(object sender, EventArgs e)
        {
            method_174();
        }

        private void method_174()
        {
            pnlGameOptionsEmpireSettings.Size = new Size(500, 769);
            pnlGameOptionsEmpireSettings.Location = new Point((base.Width - pnlGameOptionsEmpireSettings.Width) / 2, (base.Height - pnlGameOptionsEmpireSettings.Height) / 2);
            pnlGameOptionsEmpireSettings.DoLayout();
            pnlGameOptionsEmpireSettings.HeaderTitle = TextResolver.GetText("Your Empire Settings");
            if (!grpGameOptionsDefaultEngagementStances.Font.Bold)
            {
                grpGameOptionsDefaultEngagementStances.Font = new Font(grpGameOptionsDefaultEngagementStances.Font.FontFamily, 19f, FontStyle.Bold, GraphicsUnit.Pixel);
            }
            grpGameOptionsDefaultEngagementStances.Size = new Size(465, 156);
            grpGameOptionsDefaultEngagementStances.Location = new Point(10, 10);
            lblGameOptionsEngagementStancePatrol.Font = font_1;
            lblGameOptionsEngagementStanceEscort.Font = font_1;
            lblGameOptionsEngagementStanceAttack.Font = font_1;
            lblGameOptionsEngagementStanceOther.Font = font_1;
            cmbGameOptionsEngagementStancePatrol.Font = font_1;
            cmbGameOptionsEngagementStanceEscort.Font = font_1;
            cmbGameOptionsEngagementStanceAttack.Font = font_1;
            cmbGameOptionsEngagementStanceOther.Font = font_1;
            lblGameOptionsEngagementStancePatrol.Location = new Point(10, 29);
            lblGameOptionsEngagementStanceEscort.Location = new Point(10, 60);
            lblGameOptionsEngagementStanceAttack.Location = new Point(10, 91);
            lblGameOptionsEngagementStanceOther.Location = new Point(10, 122);
            cmbGameOptionsEngagementStancePatrol.Size = new Size(230, 21);
            cmbGameOptionsEngagementStanceEscort.Size = new Size(230, 21);
            cmbGameOptionsEngagementStanceAttack.Size = new Size(230, 21);
            cmbGameOptionsEngagementStanceOther.Size = new Size(230, 21);
            cmbGameOptionsEngagementStancePatrol.Location = new Point(140, 25);
            cmbGameOptionsEngagementStanceEscort.Location = new Point(140, 56);
            cmbGameOptionsEngagementStanceAttack.Location = new Point(140, 87);
            cmbGameOptionsEngagementStanceOther.Location = new Point(140, 118);
            if (!grpGameOptionsDefaultEngagementStancesManual.Font.Bold)
            {
                grpGameOptionsDefaultEngagementStancesManual.Font = new Font(grpGameOptionsDefaultEngagementStancesManual.Font.FontFamily, 19f, FontStyle.Bold, GraphicsUnit.Pixel);
            }
            grpGameOptionsDefaultEngagementStancesManual.Size = new Size(465, 156);
            grpGameOptionsDefaultEngagementStancesManual.Location = new Point(10, 177);
            lblGameOptionsEngagementStancePatrolManual.Font = font_1;
            lblGameOptionsEngagementStanceEscortManual.Font = font_1;
            lblGameOptionsEngagementStanceAttackManual.Font = font_1;
            lblGameOptionsEngagementStanceOtherManual.Font = font_1;
            cmbGameOptionsEngagementStancePatrolManual.Font = font_1;
            cmbGameOptionsEngagementStanceEscortManual.Font = font_1;
            cmbGameOptionsEngagementStanceAttackManual.Font = font_1;
            cmbGameOptionsEngagementStanceOtherManual.Font = font_1;
            lblGameOptionsEngagementStancePatrolManual.Location = new Point(10, 29);
            lblGameOptionsEngagementStanceEscortManual.Location = new Point(10, 60);
            lblGameOptionsEngagementStanceAttackManual.Location = new Point(10, 91);
            lblGameOptionsEngagementStanceOtherManual.Location = new Point(10, 122);
            cmbGameOptionsEngagementStancePatrolManual.Size = new Size(230, 21);
            cmbGameOptionsEngagementStanceEscortManual.Size = new Size(230, 21);
            cmbGameOptionsEngagementStanceAttackManual.Size = new Size(230, 21);
            cmbGameOptionsEngagementStanceOtherManual.Size = new Size(230, 21);
            cmbGameOptionsEngagementStancePatrolManual.Location = new Point(140, 25);
            cmbGameOptionsEngagementStanceEscortManual.Location = new Point(140, 56);
            cmbGameOptionsEngagementStanceAttackManual.Location = new Point(140, 87);
            cmbGameOptionsEngagementStanceOtherManual.Location = new Point(140, 118);
            if (!grpGameOptionsFleetAttackSettings.Font.Bold)
            {
                grpGameOptionsFleetAttackSettings.Font = new Font(grpGameOptionsFleetAttackSettings.Font.FontFamily, 19f, FontStyle.Bold, GraphicsUnit.Pixel);
            }
            grpGameOptionsFleetAttackSettings.Size = new Size(465, 90);
            grpGameOptionsFleetAttackSettings.Location = new Point(10, 344);
            numGameOptionsFleetAttackRefuel.Location = new Point(10, 25);
            numGameOptionsFleetAttackGather.Location = new Point(10, 56);
            lblGameOptionsFleetAttackRefuel.Location = new Point(60, 27);
            lblGameOptionsFleetAttackRefuel.Font = font_1;
            lblGameOptionsFleetAttackGather.Location = new Point(60, 58);
            lblGameOptionsFleetAttackGather.Font = font_1;
            sldGameOptionsAttackOvermatch.Size = new Size(465, 62);
            sldGameOptionsAttackOvermatch.Font = font_1;
            sldGameOptionsAttackOvermatch.LabelWidth = 120;
            sldGameOptionsAttackOvermatch.Location = new Point(10, 458);
            sldGameOptionsAttackOvermatch.Setup();
            sldGameOptionsAttackOvermatch.SetLabels(new string[5] { "1:1", "1.5:1", "2:1", "3:1", "5:1" });
            sldGameOptionsAttackOvermatch.LinkWidth = 0;
            sldGameOptionsAttackOvermatch.Size = new Size(465, 62);
            chkOptionsAllowSameSystemAsOtherEmpires.CheckAlign = ContentAlignment.MiddleLeft;
            chkOptionsAllowSameSystemAsOtherEmpires.Location = new Point(10, 513);
            chkOptionsAllowSameSystemAsOtherEmpires.Visible = false;
            if (!grpGameOptionsDiscoveries.Font.Bold)
            {
                grpGameOptionsDiscoveries.Font = new Font(grpGameOptionsDefaultEngagementStances.Font.FontFamily, 19f, FontStyle.Bold, GraphicsUnit.Pixel);
            }
            grpGameOptionsDiscoveries.Size = new Size(465, 99);
            grpGameOptionsDiscoveries.Location = new Point(10, 537);
            lblGameOptionsEncounterRuins.Location = new Point(7, 23);
            lblGameOptionsEncounterRuins.Font = font_1;
            cmbGameOptionsEncounterRuins.Size = new Size(260, 21);
            cmbGameOptionsEncounterRuins.Font = font_1;
            cmbGameOptionsEncounterRuins.Location = new Point(198, 18);
            lblGameOptionsEncounterAbandonedShipOrBase.Location = new Point(7, 50);
            lblGameOptionsEncounterAbandonedShipOrBase.MaximumSize = new Size(188, 40);
            lblGameOptionsEncounterAbandonedShipOrBase.Font = font_1;
            cmbGameOptionsEncounterAbandonedShipOrBase.Size = new Size(260, 21);
            cmbGameOptionsEncounterAbandonedShipOrBase.Location = new Point(198, 58);
            cmbGameOptionsEncounterAbandonedShipOrBase.Font = font_1;
            chkOptionsNewShipsAutomated.Location = new Point(10, 645);
            chkOptionsNewShipsAutomated.Font = font_1;
            chkOptionsNewShipsAutomated.CheckAlign = ContentAlignment.TopLeft;
            chkOptionsSuppressAllPopups.Location = new Point(10, 670);
            chkOptionsSuppressAllPopups.BringToFront();
            chkOptionsSuppressAllPopups.Font = font_1;
            chkOptionsSuppressAllPopups.CheckAlign = ContentAlignment.TopLeft;
            method_175();
            pnlGameOptionsEmpireSettings.Visible = true;
            pnlGameOptionsEmpireSettings.BringToFront();
        }

        private void method_175()
        {
            if (main_0.gameOptions_0 == null)
            {
                return;
            }
            cmbGameOptionsEngagementStancePatrol.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangePatrol);
            cmbGameOptionsEngagementStanceEscort.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangeEscort);
            cmbGameOptionsEngagementStanceAttack.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangeAttack);
            cmbGameOptionsEngagementStanceOther.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangeOther);
            cmbGameOptionsEngagementStancePatrolManual.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangePatrolManual);
            cmbGameOptionsEngagementStanceEscortManual.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangeEscortManual);
            cmbGameOptionsEngagementStanceAttackManual.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangeAttackManual);
            cmbGameOptionsEngagementStanceOtherManual.SelectedIndex = method_180(main_0.gameOptions_0.AttackRangeOtherManual);
            sldGameOptionsAttackOvermatch.Value = method_178(main_0.gameOptions_0.AttackOverMatchFactor);
            numGameOptionsFleetAttackRefuel.Value = main_0.method_559(main_0.gameOptions_0.FleetAttackRefuelPortion);
            numGameOptionsFleetAttackGather.Value = main_0.method_559(main_0.gameOptions_0.FleetAttackGatherPortion);
            cmbGameOptionsEncounterRuins.SelectedIndex = main_0.gameOptions_0.DiscoveryActionRuin;
            cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex = main_0.gameOptions_0.DiscoveryActionAbandonedShipBase;
            chkOptionsNewShipsAutomated.Checked = main_0.gameOptions_0.NewShipsAutomated;
            chkOptionsSuppressAllPopups.Checked = main_0.gameOptions_0.SuppressAllPopups;
            if (chkOptionsSuppressAllPopups.Checked)
            {
                if (cmbGameOptionsEncounterRuins.SelectedIndex < 1)
                {
                    cmbGameOptionsEncounterRuins.SelectedIndex = Math.Max(1, main_0.gameOptions_0.DiscoveryActionRuin);
                }
                if (cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex < 1)
                {
                    cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex = Math.Max(1, main_0.gameOptions_0.DiscoveryActionAbandonedShipBase);
                }
            }
        }

        private void method_176()
        {
            if (main_0.gameOptions_0 != null)
            {
                main_0.gameOptions_0.AttackRangePatrol = method_179(cmbGameOptionsEngagementStancePatrol.SelectedIndex);
                main_0.gameOptions_0.AttackRangeEscort = method_179(cmbGameOptionsEngagementStanceEscort.SelectedIndex);
                main_0.gameOptions_0.AttackRangeAttack = method_179(cmbGameOptionsEngagementStanceAttack.SelectedIndex);
                main_0.gameOptions_0.AttackRangeOther = method_179(cmbGameOptionsEngagementStanceOther.SelectedIndex);
                main_0.gameOptions_0.AttackRangePatrolManual = method_179(cmbGameOptionsEngagementStancePatrolManual.SelectedIndex);
                main_0.gameOptions_0.AttackRangeEscortManual = method_179(cmbGameOptionsEngagementStanceEscortManual.SelectedIndex);
                main_0.gameOptions_0.AttackRangeAttackManual = method_179(cmbGameOptionsEngagementStanceAttackManual.SelectedIndex);
                main_0.gameOptions_0.AttackRangeOtherManual = method_179(cmbGameOptionsEngagementStanceOtherManual.SelectedIndex);
                main_0.gameOptions_0.AttackOverMatchFactor = method_177(sldGameOptionsAttackOvermatch.Value);
                main_0.gameOptions_0.FleetAttackRefuelPortion = main_0.method_560(numGameOptionsFleetAttackRefuel.Value);
                main_0.gameOptions_0.FleetAttackGatherPortion = main_0.method_560(numGameOptionsFleetAttackGather.Value);
                main_0.gameOptions_0.DiscoveryActionRuin = cmbGameOptionsEncounterRuins.SelectedIndex;
                main_0.gameOptions_0.DiscoveryActionAbandonedShipBase = cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex;
                main_0.gameOptions_0.NewShipsAutomated = chkOptionsNewShipsAutomated.Checked;
                main_0.gameOptions_0.SuppressAllPopups = chkOptionsSuppressAllPopups.Checked;
            }
        }

        private float method_177(int int_1)
        {
            float result = 2f;
            switch (int_1)
            {
                case 0:
                    result = 1f;
                    break;
                case 1:
                    result = 1.5f;
                    break;
                case 2:
                    result = 2f;
                    break;
                case 3:
                    result = 3f;
                    break;
                case 4:
                    result = 5f;
                    break;
            }
            return result;
        }

        private int method_178(float float_2)
        {
            int result = -1;
            if (float_2 == 1f)
            {
                result = 0;
            }
            else if (float_2 == 1.5f)
            {
                result = 1;
            }
            else if (float_2 == 2f)
            {
                result = 2;
            }
            else if (float_2 == 3f)
            {
                result = 3;
            }
            else if (float_2 == 5f)
            {
                result = 4;
            }
            return result;
        }

        private int method_179(int int_1)
        {
            int result = 0;
            switch (int_1)
            {
                case 0:
                    result = -1;
                    break;
                case 1:
                    result = 0;
                    break;
                case 2:
                    result = 2000;
                    break;
                case 3:
                    result = 48000;
                    break;
            }
            return result;
        }

        private int method_180(int int_1)
        {
            int result = -1;
            if (int_1 < 0)
            {
                result = 0;
            }
            else if (int_1 == 0)
            {
                result = 1;
            }
            else if (int_1 >= 0 && int_1 <= 2000)
            {
                result = 2;
            }
            else if (int_1 > 2000 && int_1 <= 48000)
            {
                result = 3;
            }
            return result;
        }

        private void method_181()
        {
            method_176();
            pnlGameOptionsEmpireSettings.SendToBack();
            pnlGameOptionsEmpireSettings.Visible = false;
        }

        private void btnGameOptionsShowMessages_Click(object sender, EventArgs e)
        {
            method_182();
        }

        private void pnlGameOptionsMessages_CloseButtonClicked(object sender, EventArgs e)
        {
            method_183();
        }

        private void method_182()
        {
            pnlGameOptionsMessages.Size = new Size(735, 502);
            pnlGameOptionsMessages.Location = new Point((base.Width - pnlGameOptionsMessages.Width) / 2, (base.Height - pnlGameOptionsMessages.Height) / 2);
            pnlGameOptionsMessages.DoLayout();
            grpOptionsPopupMessages.Visible = true;
            grpOptionsScrollingMessages.Visible = true;
            grpOptionsPopupMessages.Font = font_7;
            grpOptionsScrollingMessages.Font = font_7;
            grpOptionsPopupMessages.BringToFront();
            grpOptionsScrollingMessages.BringToFront();
            grpOptionsScrollingMessages.Location = new Point(12, 10);
            grpOptionsPopupMessages.Location = new Point(367, 10);
            grpOptionsScrollingMessages.Size = new Size(340, 412);
            grpOptionsPopupMessages.Size = new Size(340, 412);
            chkOptionsScrollingMessageNewShipBuilt.Font = font_1;
            chkOptionsScrollingMessageRequestWarning.Font = font_1;
            chkOptionsScrollingMessageDiplomacyTreaties.Font = font_1;
            chkOptionsScrollingMessageWarTradeSanctions.Font = font_1;
            chkOptionsScrollingMessageColonyGainLoss.Font = font_1;
            chkOptionsScrollingMessageEmpireMetDestroyed.Font = font_1;
            chkOptionsScrollingMessageResearchBreakthrough.Font = font_1;
            chkOptionsScrollingMessageIntelligenceMissions.Font = font_1;
            chkOptionsScrollingMessageExploration.Font = font_1;
            chkOptionsScrollingMessageShipMissionComplete.Font = font_1;
            chkOptionsScrollingMessageShipNeedsRefuelling.Font = font_1;
            chkOptionsScrollingMessageUnderAttackCivilianShips.Font = font_1;
            chkOptionsScrollingMessageUnderAttackCivilianBases.Font = font_1;
            chkOptionsScrollingMessageUnderAttackExplorationShips.Font = font_1;
            chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Font = font_1;
            chkOptionsScrollingMessageUnderAttackMilitaryShips.Font = font_1;
            chkOptionsScrollingMessageUnderAttackOtherStateBases.Font = font_1;
            chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Font = font_1;
            chkOptionsScrollingMessageConstructionResourceShortage.Font = font_1;
            chkOptionsScrollingMessageNewShipBuilt.Location = new Point(7, 22);
            chkOptionsScrollingMessageRequestWarning.Location = new Point(7, 42);
            chkOptionsScrollingMessageDiplomacyTreaties.Location = new Point(7, 62);
            chkOptionsScrollingMessageWarTradeSanctions.Location = new Point(7, 82);
            chkOptionsScrollingMessageColonyGainLoss.Location = new Point(7, 102);
            chkOptionsScrollingMessageEmpireMetDestroyed.Location = new Point(7, 122);
            chkOptionsScrollingMessageResearchBreakthrough.Location = new Point(7, 142);
            chkOptionsScrollingMessageIntelligenceMissions.Location = new Point(7, 162);
            chkOptionsScrollingMessageExploration.Location = new Point(7, 182);
            chkOptionsScrollingMessageShipMissionComplete.Location = new Point(7, 202);
            chkOptionsScrollingMessageShipNeedsRefuelling.Location = new Point(7, 222);
            chkOptionsScrollingMessageUnderAttackCivilianShips.Location = new Point(7, 242);
            chkOptionsScrollingMessageUnderAttackCivilianBases.Location = new Point(7, 262);
            chkOptionsScrollingMessageUnderAttackExplorationShips.Location = new Point(7, 282);
            chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Location = new Point(7, 302);
            chkOptionsScrollingMessageUnderAttackMilitaryShips.Location = new Point(7, 322);
            chkOptionsScrollingMessageUnderAttackOtherStateBases.Location = new Point(7, 342);
            chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Location = new Point(7, 362);
            chkOptionsScrollingMessageConstructionResourceShortage.Location = new Point(7, 382);
            chkOptionsPopupMessageShipBuilt.Font = font_1;
            chkOptionsPopupMessageRequestWarning.Font = font_1;
            chkOptionsPopupMessageDiplomacyTreaties.Font = font_1;
            chkOptionsPopupMessageDiplomacyWarTradeSanctions.Font = font_1;
            chkOptionsPopupMessageColonyGainLoss.Font = font_1;
            chkOptionsPopupMessageEmpireMetDestroyed.Font = font_1;
            chkOptionsPopupMessageResearchBreakthrough.Font = font_1;
            chkOptionsPopupMessageIntelligenceMissions.Font = font_1;
            chkOptionsPopupMessageExploration.Font = font_1;
            chkOptionsPopupMessageShipMissionComplete.Font = font_1;
            chkOptionsPopupMessageShipNeedsRefuelling.Font = font_1;
            chkOptionsPopupMessageUnderAttackCivilianShips.Font = font_1;
            chkOptionsPopupMessageUnderAttackCivilianBases.Font = font_1;
            chkOptionsPopupMessageUnderAttackExplorationShips.Font = font_1;
            chkOptionsPopupMessageUnderAttackColonyConstructionShips.Font = font_1;
            chkOptionsPopupMessageUnderAttackMilitaryShips.Font = font_1;
            chkOptionsPopupMessageUnderAttackOtherStateBases.Font = font_1;
            chkOptionsPopupMessageUnderAttackColoniesSpaceports.Font = font_1;
            chkOptionsPopupMessageConstructionResourceShortage.Font = font_1;
            chkOptionsPopupMessageShipBuilt.Location = new Point(7, 22);
            chkOptionsPopupMessageRequestWarning.Location = new Point(7, 42);
            chkOptionsPopupMessageDiplomacyTreaties.Location = new Point(7, 62);
            chkOptionsPopupMessageDiplomacyWarTradeSanctions.Location = new Point(7, 82);
            chkOptionsPopupMessageColonyGainLoss.Location = new Point(7, 102);
            chkOptionsPopupMessageEmpireMetDestroyed.Location = new Point(7, 122);
            chkOptionsPopupMessageResearchBreakthrough.Location = new Point(7, 142);
            chkOptionsPopupMessageIntelligenceMissions.Location = new Point(7, 162);
            chkOptionsPopupMessageExploration.Location = new Point(7, 182);
            chkOptionsPopupMessageShipMissionComplete.Location = new Point(7, 202);
            chkOptionsPopupMessageShipNeedsRefuelling.Location = new Point(7, 222);
            chkOptionsPopupMessageUnderAttackCivilianShips.Location = new Point(7, 242);
            chkOptionsPopupMessageUnderAttackCivilianBases.Location = new Point(7, 262);
            chkOptionsPopupMessageUnderAttackExplorationShips.Location = new Point(7, 282);
            chkOptionsPopupMessageUnderAttackColonyConstructionShips.Location = new Point(7, 302);
            chkOptionsPopupMessageUnderAttackMilitaryShips.Location = new Point(7, 322);
            chkOptionsPopupMessageUnderAttackOtherStateBases.Location = new Point(7, 342);
            chkOptionsPopupMessageUnderAttackColoniesSpaceports.Location = new Point(7, 362);
            chkOptionsPopupMessageConstructionResourceShortage.Location = new Point(7, 382);
            chkOptionsPopupMessageUnderAttackCivilianShips.BringToFront();
            chkOptionsPopupMessageUnderAttackCivilianBases.BringToFront();
            chkOptionsPopupMessageUnderAttackExplorationShips.BringToFront();
            chkOptionsPopupMessageUnderAttackColonyConstructionShips.BringToFront();
            chkOptionsPopupMessageUnderAttackMilitaryShips.BringToFront();
            chkOptionsPopupMessageUnderAttackOtherStateBases.BringToFront();
            chkOptionsPopupMessageUnderAttackColoniesSpaceports.BringToFront();
            chkOptionsPopupMessageConstructionResourceShortage.BringToFront();
            chkOptionsScrollingMessageUnderAttackCivilianShips.BringToFront();
            chkOptionsScrollingMessageUnderAttackCivilianBases.BringToFront();
            chkOptionsScrollingMessageUnderAttackExplorationShips.BringToFront();
            chkOptionsScrollingMessageUnderAttackColonyConstructionShips.BringToFront();
            chkOptionsScrollingMessageUnderAttackMilitaryShips.BringToFront();
            chkOptionsScrollingMessageUnderAttackOtherStateBases.BringToFront();
            chkOptionsScrollingMessageUnderAttackColoniesSpaceports.BringToFront();
            chkOptionsScrollingMessageConstructionResourceShortage.BringToFront();
            method_168();
            pnlGameOptionsMessages.Visible = true;
            pnlGameOptionsMessages.BringToFront();
        }

        private void method_183()
        {
            method_167();
            pnlGameOptionsMessages.SendToBack();
            pnlGameOptionsMessages.Visible = false;
        }

        private void method_184()
        {
            pnlGameOptionsAdvancedDisplaySettings.Size = new Size(440, 520);
            pnlGameOptionsAdvancedDisplaySettings.Location = new Point((base.Width - pnlGameOptionsAdvancedDisplaySettings.Width) / 2, (base.Height - pnlGameOptionsAdvancedDisplaySettings.Height) / 2);
            pnlGameOptionsAdvancedDisplaySettings.DoLayout();
            grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Size = new Size(400, 60);
            grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Font = font_7;
            lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Location = new Point(177, 22);
            numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Location = new Point(127, 23);
            lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Font = font_1;
            chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Font = font_1;
            chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Location = new Point(8, 22);
            chkOptionsShowSystemNebulae.Location = new Point(15, 87);
            chkOptionsShowSystemNebulae.Font = font_1;
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Font = font_1;
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Size = new Size(400, 52);
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Location = new Point(12, 115);
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LabelWidth = 160;
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Setup();
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LinkWidth = 0;
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LinkText = string.Empty;
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.SetLabels(new string[3]
            {
            TextResolver.GetText("Low"),
            TextResolver.GetText("Medium"),
            TextResolver.GetText("High")
            });
            grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Location = new Point(12, 184);
            grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Width = 400;
            grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Height = 231;
            grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Font = font_7;
            chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Font = font_1;
            chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Font = font_1;
            chkGameOptionsGalaxyDisplayAlwaysPirates.Font = font_1;
            chkGameOptionsGalaxyDisplayCivilianShips.Font = font_1;
            chkGameOptionsGalaxyDisplayColonyShips.Font = font_1;
            chkGameOptionsGalaxyDisplayConstructionShips.Font = font_1;
            chkGameOptionsGalaxyDisplayExplorationShips.Font = font_1;
            chkGameOptionsGalaxyDisplayFleets.Font = font_1;
            chkGameOptionsGalaxyDisplayMilitaryShips.Font = font_1;
            chkGameOptionsGalaxyDisplayOtherBases.Font = font_1;
            chkGameOptionsGalaxyDisplayResupplyShips.Font = font_1;
            chkGameOptionsGalaxyDisplaySpacePorts.Font = font_1;
            chkGameOptionsGalaxyDisplayFleets.Location = new Point(10, 22);
            chkGameOptionsGalaxyDisplayFleets.BringToFront();
            chkGameOptionsGalaxyDisplayResupplyShips.Location = new Point(10, 44);
            chkGameOptionsGalaxyDisplayResupplyShips.BringToFront();
            chkGameOptionsGalaxyDisplayMilitaryShips.Location = new Point(10, 66);
            chkGameOptionsGalaxyDisplayMilitaryShips.BringToFront();
            chkGameOptionsGalaxyDisplaySpacePorts.Location = new Point(10, 88);
            chkGameOptionsGalaxyDisplaySpacePorts.BringToFront();
            chkGameOptionsGalaxyDisplayOtherBases.Location = new Point(10, 110);
            chkGameOptionsGalaxyDisplayOtherBases.BringToFront();
            chkGameOptionsGalaxyDisplayExplorationShips.Location = new Point(180, 22);
            chkGameOptionsGalaxyDisplayExplorationShips.BringToFront();
            chkGameOptionsGalaxyDisplayColonyShips.Location = new Point(180, 44);
            chkGameOptionsGalaxyDisplayColonyShips.BringToFront();
            chkGameOptionsGalaxyDisplayConstructionShips.Location = new Point(180, 66);
            chkGameOptionsGalaxyDisplayConstructionShips.BringToFront();
            chkGameOptionsGalaxyDisplayCivilianShips.Location = new Point(180, 88);
            chkGameOptionsGalaxyDisplayCivilianShips.BringToFront();
            chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Location = new Point(10, 154);
            chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.BringToFront();
            chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Location = new Point(10, 176);
            chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.BringToFront();
            chkGameOptionsGalaxyDisplayAlwaysPirates.Location = new Point(10, 198);
            chkGameOptionsGalaxyDisplayAlwaysPirates.BringToFront();
            chkGameOptionsGalaxyDisplayCleanGalaxyView.Location = new Point(12, 425);
            chkGameOptionsGalaxyDisplayCleanGalaxyView.Font = font_1;
            if (main_0.gameOptions_0 != null)
            {
                chkOptionsShowSystemNebulae.Checked = main_0.gameOptions_0.ShowSystemNebulae;
                int systemNebulaeDetail = main_0.gameOptions_0.SystemNebulaeDetail;
                systemNebulaeDetail = Math.Max(0, Math.Min(2, systemNebulaeDetail));
                tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Value = systemNebulaeDetail;
                if (main_0.gameOptions_0.MaximumFramerate <= 0)
                {
                    chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Checked = true;
                    numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Enabled = false;
                }
                else
                {
                    chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Checked = false;
                    int maximumFramerate = main_0.gameOptions_0.MaximumFramerate;
                    maximumFramerate = Math.Max((int)numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Minimum, maximumFramerate);
                    maximumFramerate = Math.Min((int)numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Maximum, maximumFramerate);
                    numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Value = maximumFramerate;
                }
                chkGameOptionsGalaxyDisplayFleets.Checked = main_0.gameOptions_0.GalaxyViewDisplayFleets;
                chkGameOptionsGalaxyDisplayResupplyShips.Checked = main_0.gameOptions_0.GalaxyViewDisplayResupplyShips;
                chkGameOptionsGalaxyDisplayMilitaryShips.Checked = main_0.gameOptions_0.GalaxyViewDisplayMilitaryShips;
                chkGameOptionsGalaxyDisplaySpacePorts.Checked = main_0.gameOptions_0.GalaxyViewDisplaySpacePorts;
                chkGameOptionsGalaxyDisplayOtherBases.Checked = main_0.gameOptions_0.GalaxyViewDisplayOtherBases;
                chkGameOptionsGalaxyDisplayExplorationShips.Checked = main_0.gameOptions_0.GalaxyViewDisplayExplorationShips;
                chkGameOptionsGalaxyDisplayColonyShips.Checked = main_0.gameOptions_0.GalaxyViewDisplayColonyShips;
                chkGameOptionsGalaxyDisplayConstructionShips.Checked = main_0.gameOptions_0.GalaxyViewDisplayConstructionShips;
                chkGameOptionsGalaxyDisplayCivilianShips.Checked = main_0.gameOptions_0.GalaxyViewDisplayCivilianShips;
                chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Checked = main_0.gameOptions_0.GalaxyViewDisplayAlwaysEnemyFleets;
                chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Checked = main_0.gameOptions_0.GalaxyViewDisplayAlwaysEnemyMilitaryShips;
                chkGameOptionsGalaxyDisplayAlwaysPirates.Checked = main_0.gameOptions_0.GalaxyViewDisplayAlwaysPirates;
                chkGameOptionsGalaxyDisplayCleanGalaxyView.Checked = main_0.gameOptions_0.CleanGalaxyView;
            }
            pnlGameOptionsAdvancedDisplaySettings.Visible = true;
            pnlGameOptionsAdvancedDisplaySettings.BringToFront();
        }

        private void method_185()
        {
            if (main_0.gameOptions_0 != null)
            {
                main_0.gameOptions_0.ShowSystemNebulae = chkOptionsShowSystemNebulae.Checked;
                main_0.gameOptions_0.SystemNebulaeDetail = tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.Value;
                main_0.SastWuBaXc(main_0.gameOptions_0);
                if (chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Checked)
                {
                    main_0.gameOptions_0.MaximumFramerate = -1;
                }
                else
                {
                    main_0.gameOptions_0.MaximumFramerate = (int)numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Value;
                }
                main_0.gameOptions_0.GalaxyViewDisplayFleets = chkGameOptionsGalaxyDisplayFleets.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayResupplyShips = chkGameOptionsGalaxyDisplayResupplyShips.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayMilitaryShips = chkGameOptionsGalaxyDisplayMilitaryShips.Checked;
                main_0.gameOptions_0.GalaxyViewDisplaySpacePorts = chkGameOptionsGalaxyDisplaySpacePorts.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayOtherBases = chkGameOptionsGalaxyDisplayOtherBases.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayExplorationShips = chkGameOptionsGalaxyDisplayExplorationShips.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayColonyShips = chkGameOptionsGalaxyDisplayColonyShips.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayConstructionShips = chkGameOptionsGalaxyDisplayConstructionShips.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayCivilianShips = chkGameOptionsGalaxyDisplayCivilianShips.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayAlwaysEnemyFleets = chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayAlwaysEnemyMilitaryShips = chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Checked;
                main_0.gameOptions_0.GalaxyViewDisplayAlwaysPirates = chkGameOptionsGalaxyDisplayAlwaysPirates.Checked;
                main_0.gameOptions_0.CleanGalaxyView = chkGameOptionsGalaxyDisplayCleanGalaxyView.Checked;
            }
            pnlGameOptionsAdvancedDisplaySettings.SendToBack();
            pnlGameOptionsAdvancedDisplaySettings.Visible = false;
        }

        private void btnGameOptionsAdvancedDisplaySettings_Click(object sender, EventArgs e)
        {
            method_184();
        }

        private void pnlGameOptionsAdvancedDisplaySettings_CloseButtonClicked(object sender, EventArgs e)
        {
            method_185();
        }

        private void chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited_CheckedChanged(object sender, EventArgs e)
        {
            if (main_0.gameOptions_0 != null)
            {
                if (chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Checked)
                {
                    main_0.gameOptions_0.MaximumFramerate = -1;
                    numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Enabled = false;
                }
                else
                {
                    main_0.gameOptions_0.MaximumFramerate = (int)numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Value;
                    numGameOptionsAdvancedDisplaySettingsMaximumFramerate.Enabled = true;
                }
            }
        }

        private void btnStartNewGameColonizationTerritoryNext_Click(object sender, EventArgs e)
        {
            pnlStartNewGameColonizationTerritory.Visible = false;
            pnlStartNewGameYourRace.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Your Race");
            cmbStartNewGameYourEmpireRace.Focus();
            pnlStartNewGameYourRace.BringToFront();
        }

        private void btnStartNewGameColonizationTerritoryPrevious_Click(object sender, EventArgs e)
        {
            pnlStartNewGameColonizationTerritory.Visible = false;
            pnlStartNewGameTheGalaxy.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: The Galaxy");
            if (radStartNewGameGalaxyShapeElliptical.Checked)
            {
                radStartNewGameGalaxyShapeElliptical.Focus();
            }
            else if (radStartNewGameGalaxyShapeSpiral.Checked)
            {
                radStartNewGameGalaxyShapeSpiral.Focus();
            }
            else if (radStartNewGameGalaxyShapeRing.Checked)
            {
                radStartNewGameGalaxyShapeRing.Focus();
            }
            else if (radStartNewGameGalaxyShapeIrregular.Checked)
            {
                radStartNewGameGalaxyShapeIrregular.Focus();
            }
            else if (radStartNewGameGalaxyShapeClustersEven.Checked)
            {
                radStartNewGameGalaxyShapeClustersEven.Focus();
            }
            else if (radStartNewGameGalaxyShapeClustersVaried.Checked)
            {
                radStartNewGameGalaxyShapeClustersVaried.Focus();
            }
            pnlStartNewGameTheGalaxy.BringToFront();
        }

        private void btnStartNewGameYourRacePrevious_Click(object sender, EventArgs e)
        {
            pnlStartNewGameYourRace.Visible = false;
            pnlStartNewGameColonizationTerritory.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Colonization and Territory");
            method_187();
            tbarStartNewGameTheGalaxyColonyPrevalence.Focus();
            pnlStartNewGameColonizationTerritory.BringToFront();
        }

        private void btnStartNewGameYourRaceNext_Click(object sender, EventArgs e)
        {
            if (bool_2)
            {
                Race selectedRace = cmbStartNewGameYourEmpireRace.SelectedRace;
                PiratePlayStyle piratePlayStyle = method_193(cmbVictoryPiratePlayStyle.SelectedIndex);
                if (piratePlayStyle == PiratePlayStyle.Undefined && selectedRace != null)
                {
                    piratePlayStyle = selectedRace.DefaultPiratePlaystyle;
                }
                method_207(piratePlayStyle, bool_5: false);
                method_101(piratePlayStyle, bool_5: false);
            }
            pnlStartNewGameYourRace.Visible = false;
            pnlStartNewGameYourEmpire.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Your Empire");
            txtYourEmpireName.Focus();
            pnlStartNewGameYourEmpire.BringToFront();
        }

        private void btnStartNewGameOtherEmpiresNext_Click(object sender, EventArgs e)
        {
            if (tbarStartNewGameTheGalaxyExpansion.Value != 0)
            {
                chkStoryShadows.Checked = false;
                chkStoryShadows.Enabled = false;
            }
            else
            {
                chkStoryShadows.Enabled = true;
            }
            pnlStartNewGameOtherEmpires.Visible = false;
            pnlStartNewGameVictoryConditions.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Victory Conditions");
            chkVictoryTerritory.Focus();
            pnlStartNewGameVictoryConditions.BringToFront();
        }

        private void btnStartNewGameOtherEmpiresPrevious_Click(object sender, EventArgs e)
        {
            pnlStartNewGameOtherEmpires.Visible = false;
            pnlStartNewGameYourEmpire.Visible = true;
            if (bool_2)
            {
                pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Your Pirate Empire");
            }
            else
            {
                pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Your Empire");
            }
            txtYourEmpireName.Focus();
            pnlStartNewGameYourEmpire.BringToFront();
        }

        private bool method_186(int int_1)
        {
            if (int_1 > 700)
            {
                ComputerInfo computerInfo = new ComputerInfo();
                ulong totalPhysicalMemory = computerInfo.TotalPhysicalMemory;
                if (totalPhysicalMemory < 1992294400L)
                {
                    return false;
                }
            }
            return true;
        }

        private void btnStartNewGameTheGalaxyNext_Click(object sender, EventArgs e)
        {
            int int_ = method_60(tbarStartNewGameTheGalaxyStarDensity.Value);
            if (!method_186(int_))
            {
                string text = TextResolver.GetText("Your computer does not have enough memory to play a galaxy of this size");
                MessageBox.Show(text, TextResolver.GetText("Not Enough Memory for this Galaxy Size"), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            pnlStartNewGameTheGalaxy.Visible = false;
            pnlStartNewGameColonizationTerritory.Visible = true;
            method_187();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Colonization and Territory");
            tbarStartNewGameTheGalaxyColonyPrevalence.Focus();
            pnlStartNewGameColonizationTerritory.BringToFront();
        }

        private void method_187()
        {
            int int_ = method_60(tbarStartNewGameTheGalaxyStarDensity.Value);
            Size size = method_69(tbarStartNewGameTheGalaxyDimensions.Value);
            method_188(int_, size.Width, size.Height);
        }

        private void method_188(int int_1, int int_2, int int_3)
        {
            double num = method_189(int_1, int_2, int_3);
            string text = string.Format(TextResolver.GetText("Colony Influence Range Suggestion"), int_1, int_2, int_3, num.ToString("0%"));
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeSuggestion.Text = text;
        }

        private double method_189(int int_1, int int_2, int int_3)
        {
            double val = Math.Sqrt((double)(int_2 * int_3) / (double)int_1 * 7.0);
            return Math.Max(0.5, Math.Min(2.0, val));
        }

        private int method_190()
        {
            //int num = 0;
            return cmbStartNewGameTheGalaxyPirateProximity.SelectedIndex switch
            {
                0 => 0,
                1 => 1,
                2 => 2,
                _ => 0,
            };
        }

        private PiratePlayStyle method_191()
        {
            //PiratePlayStyle piratePlayStyle = PiratePlayStyle.Undefined;
            return cmbVictoryPiratePlayStyle.SelectedIndex switch
            {
                0 => PiratePlayStyle.Balanced,
                1 => PiratePlayStyle.Pirate,
                2 => PiratePlayStyle.Mercenary,
                3 => PiratePlayStyle.Smuggler,
                _ => PiratePlayStyle.Balanced,
            };
        }

        private PiratePlayStyle method_192()
        {
            //PiratePlayStyle piratePlayStyle = PiratePlayStyle.Undefined;
            return cmbJumpStartVictoryPiratePlayStyle.SelectedIndex switch
            {
                0 => PiratePlayStyle.Balanced,
                1 => PiratePlayStyle.Pirate,
                2 => PiratePlayStyle.Mercenary,
                3 => PiratePlayStyle.Smuggler,
                _ => PiratePlayStyle.Balanced,
            };
        }

        private PiratePlayStyle method_193(int int_1)
        {
            //PiratePlayStyle piratePlayStyle = PiratePlayStyle.Undefined;
            return int_1 switch
            {
                0 => PiratePlayStyle.Balanced,
                1 => PiratePlayStyle.Pirate,
                2 => PiratePlayStyle.Mercenary,
                3 => PiratePlayStyle.Smuggler,
                _ => PiratePlayStyle.Undefined,
            };
        }

        private StartGameOptions method_194()
        {
            StartGameOptions startGameOptions = method_195();
            startGameOptions.GalaxySize = tbarJumpStartTheGalaxyStarDensity.Value;
            startGameOptions.GalaxyDimensions = tbarJumpStartTheGalaxyDimensions.Value;
            startGameOptions.GalaxyDifficulty = tbarJumpStartTheGalaxyDifficulty.Value;
            startGameOptions.GalaxyDifficultyScaling = chkJumpStartTheGalaxyDifficultyScaling.Checked;
            startGameOptions.YourEmpireRace = cmbJumpStartYourEmpireRace.SelectedIndex;
            if (bool_2)
            {
                startGameOptions.PiratePlayStyle = (int)(method_192() - 1);
            }
            else
            {
                startGameOptions.YourEmpireGovernmentStyle = cmbJumpStartYourEmpireGovernment.SelectedGovernmentId;
            }
            if (radJumpStartGalaxyShapeElliptical.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Elliptical;
            }
            else if (radJumpStartGalaxyShapeIrregular.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Irregular;
            }
            else if (radJumpStartGalaxyShapeRing.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Ring;
            }
            else if (radJumpStartGalaxyShapeSpiral.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Spiral;
            }
            else if (radJumpStartGalaxyShapeEvenClusters.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.ClustersEven;
            }
            else if (radJumpStartGalaxyShapeVariedClusters.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.ClustersVaried;
            }
            return startGameOptions;
        }

        private StartGameOptions method_195()
        {
            StartGameOptions startGameOptions = new StartGameOptions();
            startGameOptions.GalaxyAggression = tbarStartNewGameTheGalaxyAggression.Value;
            startGameOptions.GalaxyHabitatQuality = tbarStartNewGameTheGalaxyColonyPrevalence.Value;
            startGameOptions.GalaxyAlienLifePrevalence = tbarStartNewGameTheGalaxyAlienLife.Value;
            startGameOptions.GalaxyExpansion = tbarStartNewGameTheGalaxyExpansion.Value;
            startGameOptions.GalaxyPirates = tbarStartNewGameTheGalaxyPirates.Value;
            startGameOptions.GalaxyPirateStrength = tbarStartNewGameTheGalaxyPirateStrength.Value;
            startGameOptions.GalaxyPirateProximity = method_190();
            startGameOptions.GalaxyResearchSpeed = (int)numStartNewGameTheGalaxyResearchBaseTech.Value;
            if (radStartNewGameGalaxyShapeElliptical.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Elliptical;
            }
            else if (radStartNewGameGalaxyShapeIrregular.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Irregular;
            }
            else if (radStartNewGameGalaxyShapeRing.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Ring;
            }
            else if (radStartNewGameGalaxyShapeSpiral.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.Spiral;
            }
            else if (radStartNewGameGalaxyShapeClustersEven.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.ClustersEven;
            }
            else if (radStartNewGameGalaxyShapeClustersVaried.Checked)
            {
                startGameOptions.GalaxyShape = GalaxyShape.ClustersVaried;
            }
            startGameOptions.GalaxySize = tbarStartNewGameTheGalaxyStarDensity.Value;
            startGameOptions.GalaxyDimensions = tbarStartNewGameTheGalaxyDimensions.Value;
            startGameOptions.GalaxySpaceCreatures = tbarStartNewGameTheGalaxySpaceCreatures.Value;
            startGameOptions.ColonizationInfluenceRangeFactor = (float)sldStartNewGameColonizationTerritoryColonyInfluenceRange.Value / 100f;
            startGameOptions.ColonizationRangeEnforceLimit = chkStartNewGameColonizationTerritoryEnforceColonizationRange.Checked;
            startGameOptions.ColonizationRange = (float)sldStartNewGameColonizationTerritoryColonizationRange.Value / 1000f;
            startGameOptions.YourEmpireExpansion = tbarStartNewGameYourEmpireSize.Value;
            startGameOptions.YourEmpireFlagShape = cmbFlagShape.SelectedIndex;
            startGameOptions.YourEmpireGalaxyStartLocation = cmbYourEmpireStartLocation.SelectedIndex;
            _ = raceList_0[0];
            if (cmbStartNewGameYourEmpireRace.SelectedRace != null)
            {
                _ = cmbStartNewGameYourEmpireRace.SelectedRace;
            }
            startGameOptions.YourEmpireGovernmentStyle = cmbStartNewGameYourEmpireGovernment.SelectedGovernmentId;
            startGameOptions.YourEmpireHomeSystem = tbarStartNewGameYourEmpireHomeSystem.Value;
            startGameOptions.YourEmpireMainColor = cmbPrimaryColor.SelectedIndex;
            startGameOptions.YourEmpireName = txtYourEmpireName.Text;
            startGameOptions.YourEmpireRace = cmbStartNewGameYourEmpireRace.SelectedIndex;
            startGameOptions.YourEmpireSecondaryColor = cmbSecondaryColor.SelectedIndex;
            startGameOptions.YourEmpireTechLevel = tbarStartNewGameYourEmpireTechLevel.Value;
            startGameOptions.YourEmpireCorruption = tbarStartNewGameYourEmpireCorruption.Value;
            string string_ = method_58(startGameOptions.GalaxyExpansion);
            string string_2 = method_55(method_89(startGameOptions.GalaxyExpansion));
            startGameOptions.OtherEmpires = method_199(string_, string_2);
            startGameOptions.OtherEmpiresAllowNewEmpiresFromIndependentColonies = chkGalaxyNewEmpiresDuringGame.Checked;
            startGameOptions.OtherEmpiresAutoGen = chkOtherEmpiresAutogenerate.Checked;
            startGameOptions.OtherEmpiresAutoGenAmount = (int)numAutogenerateEmpiresAmount.Value;
            startGameOptions.VictoryConditionsApplyWhen = chkVictoryTimeStart.Checked;
            startGameOptions.VictoryConditionsApplyWhenYears = (int)numVictoryTimeStartYears.Value;
            startGameOptions.VictoryConditionsEconomy = chkVictoryEconomy.Checked;
            startGameOptions.VictoryConditionsEconomyPercent = (int)numVictoryEconomyPercent.Value;
            startGameOptions.VictoryConditionsPopulation = chkVictoryPopulation.Checked;
            startGameOptions.VictoryConditionsPopulationPercent = (int)numVictoryPopulationPercent.Value;
            startGameOptions.VictoryConditionsTerritory = chkVictoryTerritory.Checked;
            startGameOptions.VictoryConditionsTerritoryPercent = (int)numVictoryTerritoryPercent.Value;
            startGameOptions.VictoryConditionsTimeLimit = chkVictoryTimeLimit.Checked;
            startGameOptions.VictoryConditionsTimeLimitYears = (int)numVictoryTimeLimitYears.Value;
            if (wjhRtsSwmsa == "CustomPirate")
            {
                startGameOptions.VictoryConditionsStoryEvents = main_0.gameOptions_0.StartGameOptions.VictoryConditionsStoryEvents;
            }
            else
            {
                startGameOptions.VictoryConditionsStoryEvents = chkStoryReturnOfTheShakturi.Checked;
            }
            startGameOptions.VictoryConditionsStoryEventsOriginal = chkStoryDistantWorlds.Checked;
            startGameOptions.PiratePlayStyle = (int)(method_191() - 1);
            startGameOptions.VictoryConditionsRaceSpecific = chkVictoryEnableRaceSpecificConditions.Checked;
            startGameOptions.VictoryConditionsDisasterEvents = chkVictoryEnableDisasterEvents.Checked;
            startGameOptions.GalaxyDifficulty = tbarStartNewGameTheGalaxyDifficulty.Value;
            startGameOptions.GalaxyDifficultyScaling = chkStartNewGameTheGalaxyDifficultyScaling.Checked;
            startGameOptions.DestroyedPiratesDoNotRespawn = chkStartNewGameTheGalaxyPiratesRespawn.Checked;
            startGameOptions.VictoryConditionsVictoryThresholdPercent = cmbVictoryThresholdPercentage.SelectedIndex;
            startGameOptions.VictoryConditionsRaceSpecificEvents = chkVictoryEnableRaceSpecificEvents.Checked;
            if ((wjhRtsSwmsa == "CustomStandard" || wjhRtsSwmsa == "CustomPirate") && tbarStartNewGameTheGalaxyExpansion.Value == 0)
            {
                startGameOptions.VictoryConditionsStoryEventsShadows = chkStoryShadows.Checked;
            }
            else
            {
                startGameOptions.VictoryConditionsStoryEventsShadows = main_0.gameOptions_0.StartGameOptions.VictoryConditionsStoryEventsShadows;
            }
            startGameOptions.AllowTechTrading = chkStartNewGameEnableTechTrading.Checked;
            startGameOptions.AllowGiantKaltorGeneration = chkStartNewGameEnableGiantKaltors.Checked;
            return startGameOptions;
        }

        private void method_196(StartGameOptions startGameOptions_0)
        {
            //bool_4 = false;
            tbarJumpStartTheGalaxyStarDensity.Value = startGameOptions_0.GalaxySize;
            tbarJumpStartTheGalaxyDimensions.Value = startGameOptions_0.GalaxyDimensions;
            tbarJumpStartTheGalaxyDifficulty.Value = startGameOptions_0.GalaxyDifficulty;
            chkJumpStartTheGalaxyDifficultyScaling.Checked = startGameOptions_0.GalaxyDifficultyScaling;
            if (startGameOptions_0.YourEmpireRace >= 0 && startGameOptions_0.YourEmpireRace < cmbJumpStartYourEmpireRace.Items.Count)
            {
                cmbJumpStartYourEmpireRace.SelectedIndex = startGameOptions_0.YourEmpireRace;
            }
            cmbJumpStartYourEmpireGovernment.SetSelectedGovernmentStyle(startGameOptions_0.YourEmpireGovernmentStyle);
            cmbJumpStartVictoryPiratePlayStyle.SelectedIndex = startGameOptions_0.PiratePlayStyle;
            tbarStartNewGameTheGalaxyAggression.Value = startGameOptions_0.GalaxyAggression;
            tbarStartNewGameTheGalaxyDifficulty.Value = startGameOptions_0.GalaxyDifficulty;
            chkStartNewGameTheGalaxyDifficultyScaling.Checked = startGameOptions_0.GalaxyDifficultyScaling;
            chkStartNewGameTheGalaxyPiratesRespawn.Checked = startGameOptions_0.DestroyedPiratesDoNotRespawn;
            tbarStartNewGameTheGalaxyColonyPrevalence.Value = startGameOptions_0.GalaxyHabitatQuality;
            tbarStartNewGameTheGalaxyAlienLife.Value = startGameOptions_0.GalaxyAlienLifePrevalence;
            tbarStartNewGameTheGalaxyExpansion.Value = startGameOptions_0.GalaxyExpansion;
            tbarStartNewGameTheGalaxyPirates.Value = startGameOptions_0.GalaxyPirates;
            tbarStartNewGameTheGalaxyPirateStrength.Value = startGameOptions_0.GalaxyPirateStrength;
            cmbStartNewGameTheGalaxyPirateProximity.SelectedIndex = startGameOptions_0.GalaxyPirateProximity;
            tbarStartNewGameTheGalaxyResearchSpeed.Value = method_209(startGameOptions_0.GalaxyResearchSpeed * 1000);
            numStartNewGameTheGalaxyResearchBaseTech.Value = startGameOptions_0.GalaxyResearchSpeed;
            switch (startGameOptions_0.GalaxyShape)
            {
                case GalaxyShape.Spiral:
                    radStartNewGameGalaxyShapeSpiral.Checked = true;
                    radJumpStartGalaxyShapeSpiral.Checked = true;
                    break;
                case GalaxyShape.Elliptical:
                    radStartNewGameGalaxyShapeElliptical.Checked = true;
                    radJumpStartGalaxyShapeElliptical.Checked = true;
                    break;
                case GalaxyShape.Irregular:
                    radStartNewGameGalaxyShapeIrregular.Checked = true;
                    radJumpStartGalaxyShapeIrregular.Checked = true;
                    break;
                case GalaxyShape.Ring:
                    radStartNewGameGalaxyShapeRing.Checked = true;
                    radJumpStartGalaxyShapeRing.Checked = true;
                    break;
                case GalaxyShape.ClustersEven:
                    radStartNewGameGalaxyShapeClustersEven.Checked = true;
                    radJumpStartGalaxyShapeEvenClusters.Checked = true;
                    break;
                case GalaxyShape.ClustersVaried:
                    radStartNewGameGalaxyShapeClustersVaried.Checked = true;
                    radJumpStartGalaxyShapeVariedClusters.Checked = true;
                    break;
            }
            tbarStartNewGameTheGalaxyDimensions.Value = startGameOptions_0.GalaxyDimensions;
            tbarStartNewGameTheGalaxyStarDensity.Value = startGameOptions_0.GalaxySize;
            tbarStartNewGameTheGalaxySpaceCreatures.Value = startGameOptions_0.GalaxySpaceCreatures;
            int val = (int)(startGameOptions_0.ColonizationInfluenceRangeFactor * 100f);
            sldStartNewGameColonizationTerritoryColonyInfluenceRange.Value = Math.Max(sldStartNewGameColonizationTerritoryColonyInfluenceRange.Minimum, Math.Min(sldStartNewGameColonizationTerritoryColonyInfluenceRange.Maximum, val));
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Text = sldStartNewGameColonizationTerritoryColonyInfluenceRange.Value + "%";
            chkStartNewGameColonizationTerritoryEnforceColonizationRange.Checked = startGameOptions_0.ColonizationRangeEnforceLimit;
            grpStartNewGameColonizationTerritoryColonizationRange.Enabled = startGameOptions_0.ColonizationRangeEnforceLimit;
            int val2 = (int)(startGameOptions_0.ColonizationRange * 1000f);
            sldStartNewGameColonizationTerritoryColonizationRange.Value = Math.Max(sldStartNewGameColonizationTerritoryColonizationRange.Minimum, Math.Min(sldStartNewGameColonizationTerritoryColonizationRange.Maximum, val2));
            lblStartNewGameColonizationTerritoryColonizationRangeValue.Text = ((float)sldStartNewGameColonizationTerritoryColonizationRange.Value / 1000f).ToString("#0.00") + "  " + TextResolver.GetText("sectors");
            tbarStartNewGameYourEmpireSize.Value = startGameOptions_0.YourEmpireExpansion;
            if (startGameOptions_0.YourEmpireFlagShape >= 0 && startGameOptions_0.YourEmpireFlagShape < cmbFlagShape.Items.Count)
            {
                cmbFlagShape.SelectedIndex = startGameOptions_0.YourEmpireFlagShape;
            }
            if (startGameOptions_0.YourEmpireGalaxyStartLocation >= 0 && startGameOptions_0.YourEmpireGalaxyStartLocation < cmbYourEmpireStartLocation.Items.Count)
            {
                cmbYourEmpireStartLocation.SelectedIndex = startGameOptions_0.YourEmpireGalaxyStartLocation;
            }
            tbarStartNewGameYourEmpireHomeSystem.Value = startGameOptions_0.YourEmpireHomeSystem;
            if (startGameOptions_0.YourEmpireMainColor >= 0 && startGameOptions_0.YourEmpireMainColor < cmbPrimaryColor.Items.Count)
            {
                cmbPrimaryColor.SelectedIndex = startGameOptions_0.YourEmpireMainColor;
            }
            txtYourEmpireName.Text = startGameOptions_0.YourEmpireName;
            if (startGameOptions_0.YourEmpireRace >= 0 && startGameOptions_0.YourEmpireRace < cmbStartNewGameYourEmpireRace.Items.Count)
            {
                cmbStartNewGameYourEmpireRace.SelectedIndex = startGameOptions_0.YourEmpireRace;
            }
            if (startGameOptions_0.YourEmpireSecondaryColor >= 0 && startGameOptions_0.YourEmpireSecondaryColor < cmbSecondaryColor.Items.Count)
            {
                cmbSecondaryColor.SelectedIndex = startGameOptions_0.YourEmpireSecondaryColor;
            }
            tbarStartNewGameYourEmpireTechLevel.Value = startGameOptions_0.YourEmpireTechLevel;
            tbarStartNewGameYourEmpireCorruption.Value = startGameOptions_0.YourEmpireCorruption;
            cmbStartNewGameYourEmpireGovernment.SetSelectedGovernmentStyle(startGameOptions_0.YourEmpireGovernmentStyle);
            method_198(startGameOptions_0.OtherEmpires);
            chkGalaxyNewEmpiresDuringGame.Checked = startGameOptions_0.OtherEmpiresAllowNewEmpiresFromIndependentColonies;
            chkOtherEmpiresAutogenerate.Checked = startGameOptions_0.OtherEmpiresAutoGen;
            numAutogenerateEmpiresAmount.Value = Math.Min((int)numAutogenerateEmpiresAmount.Maximum, startGameOptions_0.OtherEmpiresAutoGenAmount);
            method_197();
            chkVictoryTimeStart.Checked = startGameOptions_0.VictoryConditionsApplyWhen;
            numVictoryTimeStartYears.Value = startGameOptions_0.VictoryConditionsApplyWhenYears;
            chkVictoryEconomy.Checked = startGameOptions_0.VictoryConditionsEconomy;
            numVictoryEconomyPercent.Value = startGameOptions_0.VictoryConditionsEconomyPercent;
            chkVictoryPopulation.Checked = startGameOptions_0.VictoryConditionsPopulation;
            numVictoryPopulationPercent.Value = startGameOptions_0.VictoryConditionsPopulationPercent;
            chkVictoryTerritory.Checked = startGameOptions_0.VictoryConditionsTerritory;
            numVictoryTerritoryPercent.Value = startGameOptions_0.VictoryConditionsTerritoryPercent;
            chkVictoryTimeLimit.Checked = startGameOptions_0.VictoryConditionsTimeLimit;
            numVictoryTimeLimitYears.Value = startGameOptions_0.VictoryConditionsTimeLimitYears;
            chkStoryReturnOfTheShakturi.Checked = startGameOptions_0.VictoryConditionsStoryEvents;
            chkStoryDistantWorlds.Checked = startGameOptions_0.VictoryConditionsStoryEventsOriginal;
            chkStoryShadows.Checked = startGameOptions_0.VictoryConditionsStoryEventsShadows;
            chkStartNewGameEnableTechTrading.Checked = startGameOptions_0.AllowTechTrading;
            chkStartNewGameEnableGiantKaltors.Checked = startGameOptions_0.AllowGiantKaltorGeneration;
            cmbVictoryPiratePlayStyle.SelectedIndex = startGameOptions_0.PiratePlayStyle;
            chkVictoryEnableDisasterEvents.Checked = startGameOptions_0.VictoryConditionsDisasterEvents;
            chkVictoryEnableRaceSpecificConditions.Checked = startGameOptions_0.VictoryConditionsRaceSpecific;
            chkVictoryEnableRaceSpecificEvents.Checked = startGameOptions_0.VictoryConditionsRaceSpecificEvents;
            if (startGameOptions_0.VictoryConditionsVictoryThresholdPercent >= 0 && startGameOptions_0.VictoryConditionsVictoryThresholdPercent < cmbVictoryThresholdPercentage.Items.Count)
            {
                cmbVictoryThresholdPercentage.SelectedIndex = startGameOptions_0.VictoryConditionsVictoryThresholdPercent;
            }
            //bool_4 = true;
        }

        private void method_197()
        {
            if (chkOtherEmpiresAutogenerate.Checked)
            {
                ctlStartingEmpiresList.Enabled = false;
                method_99();
                btnAddNewEmpire.Enabled = false;
                numAutogenerateEmpiresAmount.Enabled = true;
            }
            else
            {
                numAutogenerateEmpiresAmount.Enabled = false;
                btnAddNewEmpire.Enabled = true;
                ctlStartingEmpiresList.Enabled = true;
                method_99();
            }
        }

        private void method_198(EmpireStartList empireStartList_0)
        {
            ctlStartingEmpiresList.Grid.Rows.Clear();
            foreach (EmpireStart item in empireStartList_0)
            {
                int index = ctlStartingEmpiresList.Grid.Rows.Add();
                ctlStartingEmpiresList.Grid.Rows[index].Cells["Name"].Value = item.Name;
                if (((DataGridViewComboBoxCell)ctlStartingEmpiresList.Grid.Rows[index].Cells["Government"]).Items.Contains(item.GovernmentStyle))
                {
                    ctlStartingEmpiresList.Grid.Rows[index].Cells["Government"].Value = item.GovernmentStyle;
                }
                else
                {
                    ctlStartingEmpiresList.Grid.Rows[index].Cells["Government"].Value = "(" + TextResolver.GetText("Random") + ")";
                }
                if (((DataGridViewComboBoxCell)ctlStartingEmpiresList.Grid.Rows[index].Cells["Proximity"]).Items.Contains(item.ProximityDistance))
                {
                    ctlStartingEmpiresList.Grid.Rows[index].Cells["Proximity"].Value = item.ProximityDistance;
                }
                else
                {
                    ctlStartingEmpiresList.Grid.Rows[index].Cells["Proximity"].Value = "(" + TextResolver.GetText("Random") + ")";
                }
                ctlStartingEmpiresList.Grid.Rows[index].Cells["HomeSystem"].Value = item.HomeSystemFavourability;
                ctlStartingEmpiresList.Grid.Rows[index].Cells["Size"].Value = method_58(item.Age);
                ctlStartingEmpiresList.Grid.Rows[index].Cells["TechLevel"].Value = method_55(item.TechLevel);
                DataGridViewComboBoxCell dataGridViewComboBoxCell = (DataGridViewComboBoxCell)ctlStartingEmpiresList.Grid.Rows[index].Cells["Race"];
                if (dataGridViewComboBoxCell.Items != null && dataGridViewComboBoxCell.Items.Count > 0 && dataGridViewComboBoxCell.Items.Contains(item.Race))
                {
                    ctlStartingEmpiresList.Grid.Rows[index].Cells["Race"].Value = item.Race;
                }
            }
        }

        private EmpireStartList method_199(string string_2, string string_3)
        {
            EmpireStartList empireStartList = new EmpireStartList();
            int count = ctlStartingEmpiresList.Grid.Rows.Count;
            for (int i = 0; i < count; i++)
            {
                EmpireStart empireStart = new EmpireStart();
                object obj = ctlStartingEmpiresList.Grid.Rows[i].Cells["Name"].Value;
                if (obj == null)
                {
                    obj = string.Empty;
                }
                empireStart.Name = obj.ToString();
                empireStart.GovernmentStyle = ctlStartingEmpiresList.Grid.Rows[i].Cells["Government"].Value.ToString();
                empireStart.ProximityDistance = ctlStartingEmpiresList.Grid.Rows[i].Cells["Proximity"].Value.ToString();
                empireStart.HomeSystemFavourability = ctlStartingEmpiresList.Grid.Rows[i].Cells["HomeSystem"].Value.ToString();
                string text = ctlStartingEmpiresList.Grid.Rows[i].Cells["Size"].Value.ToString();
                if (text.ToLower(CultureInfo.InvariantCulture) == "(" + TextResolver.GetText("random") + ")")
                {
                    empireStart.Age = -1;
                }
                else
                {
                    empireStart.Age = method_57(text);
                }
                string text2 = ctlStartingEmpiresList.Grid.Rows[i].Cells["TechLevel"].Value.ToString();
                if (text2.ToLower(CultureInfo.InvariantCulture) == "(" + TextResolver.GetText("random") + ")")
                {
                    empireStart.TechLevel = -1.0;
                }
                else
                {
                    if (text2 == TextResolver.GetText("Starting"))
                    {
                        text2 = TextResolver.GetText("Normal");
                    }
                    empireStart.TechLevel = method_54(text2);
                }
                empireStart.Race = ctlStartingEmpiresList.Grid.Rows[i].Cells["Race"].Value.ToString();
                empireStartList.Add(empireStart);
            }
            return empireStartList;
        }

        private EmpireStartList method_200(EmpireStartList empireStartList_0, int int_1, bool bool_5)
        {
            if (empireStartList_0 != null)
            {
                for (int i = 0; i < empireStartList_0.Count; i++)
                {
                    empireStartList_0[i].DifficultyLevel = method_201(int_1);
                }
            }
            return empireStartList_0;
        }

        private double method_201(int int_1)
        {
            double result = 1.0;
            switch (int_1)
            {
                case 0:
                    result = 0.7;
                    break;
                case 1:
                    result = 1.0;
                    break;
                case 2:
                    result = 1.25;
                    break;
                case 3:
                    result = 1.6;
                    break;
                case 4:
                    result = 2.0;
                    break;
            }
            return result;
        }

        private EmpireStart method_202(EmpireStart empireStart_0, int int_1, bool bool_5)
        {
            if (empireStart_0 != null)
            {
                switch (int_1)
                {
                    case 0:
                        if (bool_5)
                        {
                            empireStart_0.ColonyRevenueFactor = 1.4;
                        }
                        break;
                    case 1:
                        if (bool_5)
                        {
                            empireStart_0.ColonyRevenueFactor = 1.2;
                        }
                        break;
                    case 3:
                        if (!bool_5)
                        {
                            empireStart_0.ColonyRevenueFactor = 1.2;
                        }
                        break;
                    case 4:
                        if (!bool_5)
                        {
                            empireStart_0.ColonyRevenueFactor = 1.4;
                        }
                        break;
                }
            }
            return empireStart_0;
        }

        private void btnStartNewGameStart_Click(object sender, EventArgs e)
        {
            method_140();
            main_0.gameOptions_0.StartGameOptions = method_195();
            main_0.YxwyUefOyQ();
            main_0.method_257();
            method_46();
            Random random_ = new Random((int)DateTime.Now.Ticks);
            GalaxyShape galaxyShape = method_59(method_96());
            int num = method_60(tbarStartNewGameTheGalaxyStarDensity.Value);
            int num2 = method_61(tbarStartNewGameTheGalaxyStarDensity.Value, raceList_0);
            bool @checked = chkGalaxyNewEmpiresDuringGame.Checked;
            double num3 = method_64(tbarStartNewGameTheGalaxyColonyPrevalence.Value);
            int num4 = method_67(tbarStartNewGameTheGalaxyAlienLife.Value);
            double num5 = method_62(tbarStartNewGameTheGalaxySpaceCreatures.Value);
            double num6 = method_66(tbarStartNewGameTheGalaxyPirates.Value);
            int num7 = method_190();
            double num8 = (double)(numStartNewGameTheGalaxyResearchBaseTech.Value * 1000m);
            double num9 = method_71(tbarStartNewGameTheGalaxyAggression.Value);
            int value = tbarStartNewGameTheGalaxyExpansion.Value;
            string string_ = method_58(value);
            EmpireStart empireStart = new EmpireStart();
            empireStart.Name = txtYourEmpireName.Text;
            if (cmbStartNewGameYourEmpireRace.SelectedRace != null)
            {
                empireStart.Race = cmbStartNewGameYourEmpireRace.SelectedRace.Name;
            }
            else
            {
                empireStart.Race = "(" + TextResolver.GetText("Random") + ")";
            }
            empireStart.GovernmentStyle = method_72();
            empireStart.StartLocation = cmbYourEmpireStartLocation.SelectedItem.ToString();
            empireStart.HomeSystemFavourability = ahrJhtHrDu();
            string text = method_74();
            if (text == TextResolver.GetText("Starting") && value == 0)
            {
                text = TextResolver.GetText("PreWarp");
            }
            empireStart.Age = method_57(text);
            empireStart.TechLevel = method_54(method_75());
            empireStart.PrimaryColor = cmbPrimaryColor.SelectedColor;
            empireStart.SecondaryColor = cmbSecondaryColor.SelectedColor;
            empireStart.FlagShape = cmbFlagShape.SelectedIndex;
            empireStart.CorruptionMultiplier = method_63(tbarStartNewGameYourEmpireCorruption.Value);
            empireStart.PiratePlayStyle = method_191();
            switch (tbarStartNewGameTheGalaxyPirateStrength.Value)
            {
                case 0:
                    empireStart.PirateShipMaintenanceFactor = 1.0;
                    break;
                case 1:
                    empireStart.PirateShipMaintenanceFactor = 0.7;
                    break;
                case 2:
                    empireStart.PirateShipMaintenanceFactor = 0.4;
                    break;
                case 3:
                    empireStart.PirateShipMaintenanceFactor = 0.25;
                    break;
            }
            empireStart.AllowTechTrading = chkStartNewGameEnableTechTrading.Checked;
            empireStart.AllowGiantKaltorGeneration = chkStartNewGameEnableGiantKaltors.Checked;
            empireStart.DifficultyLevel = method_201(tbarStartNewGameTheGalaxyDifficulty.Value);
            empireStart.DifficultyScaling = chkStartNewGameTheGalaxyDifficultyScaling.Checked;
            empireStart.DestroyedPiratesDoNotRespawn = chkStartNewGameTheGalaxyPiratesRespawn.Checked;
            Size size = method_69(tbarStartNewGameTheGalaxyDimensions.Value);
            empireStart.GalaxySectorX = size.Width;
            empireStart.GalaxySectorY = size.Height;
            empireStart.EmpireTerritoryColonyInfluenceRangeFactor = (float)sldStartNewGameColonizationTerritoryColonyInfluenceRange.Value / 100f;
            empireStart.ColonizationRangeEnforceLimit = chkStartNewGameColonizationTerritoryEnforceColonizationRange.Checked;
            empireStart.ColonizationRange = (float)sldStartNewGameColonizationTerritoryColonizationRange.Value / 1000f * (float)Galaxy.SectorSize;
            EmpireStartList empireStartList = new EmpireStartList();
            if (chkOtherEmpiresAutogenerate.Checked)
            {
                int num10 = (int)numAutogenerateEmpiresAmount.Value;
                for (int i = 0; i < num10; i++)
                {
                    EmpireStart empireStart2 = new EmpireStart();
                    empireStart2.Name = string.Empty;
                    empireStart2.GovernmentStyle = "(" + TextResolver.GetText("Random") + ")";
                    empireStart2.ProximityDistance = "(" + TextResolver.GetText("Random") + ")";
                    empireStart2.HomeSystemFavourability = TextResolver.GetText("Normal");
                    string string_2 = method_109(string_, random_);
                    empireStart2.Age = method_57(string_2);
                    empireStart2.TechLevel = method_89(value);
                    empireStart2.Race = "(" + TextResolver.GetText("Random") + ")";
                    empireStartList.Add(empireStart2);
                }
            }
            else
            {
                string string_3 = method_55(method_89(value));
                empireStartList = method_199(string_, string_3);
            }
            empireStartList = method_200(empireStartList, tbarStartNewGameTheGalaxyDifficulty.Value, bool_5: false);
            long startStarDate = Galaxy.StartStarDate;
            startStarDate += value * 30000000;
            VictoryConditions victoryConditions = new VictoryConditions();
            victoryConditions.Economy = chkVictoryEconomy.Checked;
            if (victoryConditions.Economy)
            {
                victoryConditions.EconomyPercent = (double)numVictoryEconomyPercent.Value;
            }
            victoryConditions.Population = chkVictoryPopulation.Checked;
            if (victoryConditions.Population)
            {
                victoryConditions.PopulationPercent = (double)numVictoryPopulationPercent.Value;
            }
            victoryConditions.Territory = chkVictoryTerritory.Checked;
            if (victoryConditions.Territory)
            {
                victoryConditions.TerritoryPercent = (double)numVictoryTerritoryPercent.Value;
            }
            victoryConditions.TimeLimit = chkVictoryTimeLimit.Checked;
            victoryConditions.TimeLimitDate = startStarDate + (int)numVictoryTimeLimitYears.Value * Galaxy.RealSecondsInGalacticYear * 1000;
            if (chkVictoryTimeStart.Checked)
            {
                victoryConditions.StartDate = startStarDate + (int)numVictoryTimeStartYears.Value * Galaxy.RealSecondsInGalacticYear * 1000;
            }
            else
            {
                victoryConditions.StartDate = 0L;
            }
            victoryConditions.EnableStoryEvents = chkStoryReturnOfTheShakturi.Checked;
            victoryConditions.EnableDisasterEvents = chkVictoryEnableDisasterEvents.Checked;
            victoryConditions.EnableRaceSpecificEvents = chkVictoryEnableRaceSpecificEvents.Checked;
            victoryConditions.EnableRaceSpecificVictoryConditions = chkVictoryEnableRaceSpecificConditions.Checked;
            victoryConditions.VictoryThresholdPercentage = method_203(cmbVictoryThresholdPercentage.SelectedIndex);
            victoryConditions.EnableStoryEventsShadows = chkStoryShadows.Checked;
            string customizationSetName = string.Empty;
            if (main_0.gameOptions_0 != null)
            {
                customizationSetName = main_0.gameOptions_0.CustomizationSetName;
            }
            RaceList raceList = Galaxy.LoadRaces(Application.StartupPath, customizationSetName);
            raceList = raceList.ResolvePlayableRaces();
            string string_4 = string.Empty;
            if (cmbStartNewGameYourEmpireRace.SelectedRace != null)
            {
                string_4 = cmbStartNewGameYourEmpireRace.SelectedRace.Name;
            }
            if (chkOtherEmpiresAutogenerate.Checked)
            {
                empireStartList = method_104(empireStartList, raceList, num9, string_4);
            }
            GameStartResets gameStartResets = new GameStartResets();
            if (!string.IsNullOrEmpty(lblStartNewGameTheGalaxyLoadExistingFilepath.Text) && lblStartNewGameTheGalaxyLoadExistingFilepath.Text != "(" + TextResolver.GetText("No Galaxy Map specified") + ")")
            {
                string text2 = lblStartNewGameTheGalaxyLoadExistingFilepath.Text;
                if (File.Exists(text2))
                {
                    gameStartResets.GalaxyFilepath = text2;
                    gameStartResets.ResetResources = chkStartNewGameTheGalaxyLoadExistingResources.Checked;
                    gameStartResets.ResetSceneryResearch = chkStartNewGameTheGalaxyLoadExistingSceneryResearch.Checked;
                    gameStartResets.ResetCreatures = chkStartNewGameTheGalaxyLoadExistingCreatures.Checked;
                    gameStartResets.ResetRuins = chkStartNewGameTheGalaxyLoadExistingRuins.Checked;
                    gameStartResets.ResetSpecialLocationsAndAbandonedShips = chkStartNewGameTheGalaxyLoadExistingSpecialLocations.Checked;
                }
            }
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num);
            list.Add(num2);
            list.Add(@checked);
            list.Add(num3);
            list.Add(num4);
            list.Add(num5);
            list.Add(num6);
            list.Add(num8);
            list.Add(value);
            list.Add(num9);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(victoryConditions);
            list.Add(null);
            list.Add(null);
            list.Add(false);
            list.Add(num7);
            list.Add(double_0);
            list.Add(chkStoryDistantWorlds.Checked);
            list.Add(gameStartResets);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
                return;
            }
            Cursor.Current = Cursors.Default;
            method_9();
            method_46();
            method_25();
            base.Enabled = true;
            Show();
            main_0.Visible = false;
        }

        private double method_203(int int_1)
        {
            double result = 1.0;
            switch (int_1)
            {
                case 0:
                    result = 0.75;
                    break;
                case 1:
                    result = 0.8;
                    break;
                case 2:
                    result = 0.85;
                    break;
                case 3:
                    result = 0.9;
                    break;
                case 4:
                    result = 0.95;
                    break;
                case 5:
                    result = 1.0;
                    break;
            }
            return result;
        }

        private void method_204(bool bool_5)
        {
            cmbFlagShape.Items.Clear();
            if (bool_5)
            {
                List<string> list = new List<string>();
                for (int i = 0; i < Galaxy.FlagShapesPirates.Count; i++)
                {
                    list.Add(" ");
                }
                cmbFlagShape.Items.AddRange(list.ToArray());
            }
            else
            {
                List<string> list2 = new List<string>();
                for (int j = 0; j < Galaxy.FlagShapes.Count; j++)
                {
                    list2.Add(" ");
                }
                cmbFlagShape.Items.AddRange(list2.ToArray());
            }
            if (main_0.gameOptions_0 != null && main_0.gameOptions_0.StartGameOptions != null)
            {
                if (main_0.gameOptions_0.StartGameOptions.YourEmpireFlagShape >= 0 && main_0.gameOptions_0.StartGameOptions.YourEmpireFlagShape < cmbFlagShape.Items.Count)
                {
                    cmbFlagShape.SelectedIndex = main_0.gameOptions_0.StartGameOptions.YourEmpireFlagShape;
                }
                if (main_0.gameOptions_0.StartGameOptions.YourEmpireMainColor >= 0 && main_0.gameOptions_0.StartGameOptions.YourEmpireMainColor < cmbPrimaryColor.Items.Count)
                {
                    cmbPrimaryColor.SelectedIndex = main_0.gameOptions_0.StartGameOptions.YourEmpireMainColor;
                }
                if (main_0.gameOptions_0.StartGameOptions.YourEmpireSecondaryColor >= 0 && main_0.gameOptions_0.StartGameOptions.YourEmpireSecondaryColor < cmbSecondaryColor.Items.Count)
                {
                    cmbSecondaryColor.SelectedIndex = main_0.gameOptions_0.StartGameOptions.YourEmpireSecondaryColor;
                }
            }
            else if (cmbFlagShape.Items.Count > 0)
            {
                cmbFlagShape.SelectedIndex = 0;
            }
        }

        private void btnStartNewGameTheGalaxyPrevious_Click(object sender, EventArgs e)
        {
            pnlStartNewGameTheGalaxy.Visible = false;
            pnlStartNewGameYourEmpireType.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Playstyle");
            btnStartNewGameYourEmpireTypeNormalShadows.Focus();
            pnlStartNewGameYourEmpireType.BringToFront();
            lblHelpTitle.Text = string.Empty;
            lblHelpDescription.Text = string.Empty;
        }

        private void btnStartNewGameYourEmpirePrevious_Click(object sender, EventArgs e)
        {
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameYourRace.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Your Race");
            cmbStartNewGameYourEmpireRace.Focus();
            pnlStartNewGameYourRace.BringToFront();
        }

        private void btnStartNewGameYourEmpireNext_Click(object sender, EventArgs e)
        {
            pnlStartNewGameYourEmpire.Visible = false;
            pnlStartNewGameOtherEmpires.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Other Empires");
            method_197();
            int num = method_61(tbarStartNewGameTheGalaxyStarDensity.Value, raceList_0);
            numAutogenerateEmpiresAmount.Maximum = num - 1;
            if (ctlStartingEmpiresList.Grid.Rows.Count >= num - 1)
            {
                btnAddNewEmpire.Enabled = false;
            }
            else if (!chkOtherEmpiresAutogenerate.Checked)
            {
                btnAddNewEmpire.Enabled = true;
            }
            chkOtherEmpiresAutogenerate.Focus();
            pnlStartNewGameOtherEmpires.BringToFront();
        }

        private void btnStartNewGameVictoryConditionsPrevious_Click(object sender, EventArgs e)
        {
            pnlStartNewGameVictoryConditions.Visible = false;
            pnlStartNewGameOtherEmpires.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Other Empires");
            chkOtherEmpiresAutogenerate.Focus();
            pnlStartNewGameOtherEmpires.BringToFront();
        }

        private void method_205(string string_2)
        {
            List<string> list = new List<string>();
            lblStartNewGameGalaxyShapeTitle.Text = string.Format(TextResolver.GetText("SHAPE Galaxy"), string_2);
            string empty = string.Empty;
            if (string_2 == TextResolver.GetText("Elliptical"))
            {
                list.Add("(" + TextResolver.GetText("Random") + ")");
                list.Add(TextResolver.GetText("Deep Core"));
                list.Add(TextResolver.GetText("Outer Core"));
                list.Add(TextResolver.GetText("Inner Rim"));
                list.Add(TextResolver.GetText("Outer Rim"));
                picStartNewGameTheGalaxyPreview.Image = bitmap_4;
                empty = TextResolver.GetText("Elliptical galaxies have a classic spiral shape");
            }
            else if (string_2 == TextResolver.GetText("Spiral"))
            {
                list.Add("(" + TextResolver.GetText("Random") + ")");
                list.Add(TextResolver.GetText("Deep Core"));
                list.Add(TextResolver.GetText("Outer Core"));
                list.Add(TextResolver.GetText("Far Regions"));
                picStartNewGameTheGalaxyPreview.Image = bitmap_5;
                empty = TextResolver.GetText("Spiral galaxies have a distinctive shape");
            }
            else if (string_2 == TextResolver.GetText("Ring"))
            {
                list.Add("(" + TextResolver.GetText("Random") + ")");
                list.Add(TextResolver.GetText("Core"));
                list.Add(TextResolver.GetText("Void"));
                list.Add(TextResolver.GetText("Rim"));
                picStartNewGameTheGalaxyPreview.Image = bitmap_6;
                empty = TextResolver.GetText("Ring galaxies contain most of their stars");
            }
            else if (string_2 == TextResolver.GetText("Irregular"))
            {
                list.Add("(" + TextResolver.GetText("Random") + ")");
                list.Add(TextResolver.GetText("Center"));
                list.Add(TextResolver.GetText("Edge"));
                picStartNewGameTheGalaxyPreview.Image = bitmap_7;
                empty = TextResolver.GetText("Irregular galaxies have no fixed shape or structure");
            }
            else if (string_2 == TextResolver.GetText("Even Clusters"))
            {
                list.Add("(" + TextResolver.GetText("Random") + ")");
                list.Add(TextResolver.GetText("Center"));
                list.Add(TextResolver.GetText("Edge"));
                picStartNewGameTheGalaxyPreview.Image = bitmap_8;
                empty = TextResolver.GetText("Cluster galaxies have groups of stars clustered together");
            }
            else if (string_2 == TextResolver.GetText("Varied Clusters"))
            {
                list.Add("(" + TextResolver.GetText("Random") + ")");
                list.Add(TextResolver.GetText("Center"));
                list.Add(TextResolver.GetText("Edge"));
                picStartNewGameTheGalaxyPreview.Image = bitmap_9;
                empty = TextResolver.GetText("Cluster galaxies have groups of stars clustered together Varied");
            }
            lblStartNewGameGalaxyShapeDescription.Text = empty;
            bitmap_10 = (Bitmap)picStartNewGameTheGalaxyPreview.Image;
            cmbYourEmpireStartLocation.Items.Clear();
            cmbYourEmpireStartLocation.Items.AddRange(list.ToArray());
            cmbYourEmpireStartLocation.SelectedIndex = 0;
        }

        private void method_206(string string_2)
        {
            lblJumpStartGalaxyShapeTitle.Text = string.Format(TextResolver.GetText("SHAPE Galaxy"), string_2);
            string empty = string.Empty;
            if (string_2 == TextResolver.GetText("Elliptical"))
            {
                picJumpStartTheGalaxyPreview.Image = bitmap_4;
                empty = TextResolver.GetText("Elliptical galaxies have a classic spiral shape");
            }
            else if (string_2 == TextResolver.GetText("Spiral"))
            {
                picJumpStartTheGalaxyPreview.Image = bitmap_5;
                empty = TextResolver.GetText("Spiral galaxies have a distinctive shape");
            }
            else if (string_2 == TextResolver.GetText("Ring"))
            {
                picJumpStartTheGalaxyPreview.Image = bitmap_6;
                empty = TextResolver.GetText("Ring galaxies contain most of their stars");
            }
            else if (string_2 == TextResolver.GetText("Irregular"))
            {
                picJumpStartTheGalaxyPreview.Image = bitmap_7;
                empty = TextResolver.GetText("Irregular galaxies have no fixed shape or structure");
            }
            else if (string_2 == TextResolver.GetText("Even Clusters"))
            {
                picJumpStartTheGalaxyPreview.Image = bitmap_8;
                empty = TextResolver.GetText("Cluster galaxies have groups of stars clustered together");
            }
            else if (string_2 == TextResolver.GetText("Varied Clusters"))
            {
                picJumpStartTheGalaxyPreview.Image = bitmap_9;
                empty = TextResolver.GetText("Cluster galaxies have groups of stars clustered together Varied");
            }
            lblJumpStartGalaxyShapeDescription.Text = empty;
            bitmap_10 = (Bitmap)picJumpStartTheGalaxyPreview.Image;
        }

        private void tbarStartNewGameTheGalaxyAlienLife_LinkClicked(object sender, EventArgs e)
        {
            method_127(TextResolver.GetText("Independent planets and Traders"));
        }

        private void tbarStartNewGameTheGalaxyResearchSpeed_LinkClicked(object sender, EventArgs e)
        {
            method_127(TextResolver.GetText("Research"));
        }

        private void tbarStartNewGameTheGalaxySpaceCreatures_LinkClicked(object sender, EventArgs e)
        {
            method_127(TextResolver.GetText("Space Creatures"));
        }

        private void tbarStartNewGameTheGalaxyPirates_LinkClicked(object sender, EventArgs e)
        {
            method_127(TextResolver.GetText("Pirates"));
        }

        private void radStartNewGameGalaxyShapeElliptical_CheckedChanged(object sender, EventArgs e)
        {
            method_205(TextResolver.GetText("Elliptical"));
        }

        private void radStartNewGameGalaxyShapeSpiral_CheckedChanged(object sender, EventArgs e)
        {
            method_205(TextResolver.GetText("Spiral"));
        }

        private void radStartNewGameGalaxyShapeRing_CheckedChanged(object sender, EventArgs e)
        {
            method_205(TextResolver.GetText("Ring"));
        }

        private void radStartNewGameGalaxyShapeIrregular_CheckedChanged(object sender, EventArgs e)
        {
            method_205(TextResolver.GetText("Irregular"));
        }

        private void radStartNewGameGalaxyShapeClustersEven_CheckedChanged(object sender, EventArgs e)
        {
            method_205(TextResolver.GetText("Even Clusters"));
        }

        private void radStartNewGameGalaxyShapeClustersVaried_CheckedChanged(object sender, EventArgs e)
        {
            method_205(TextResolver.GetText("Varied Clusters"));
        }

        private void cmbStartNewGameYourEmpireRace_SelectedIndexChanged(object sender, EventArgs e)
        {
            string empty = string.Empty;
            Race selectedRace = cmbStartNewGameYourEmpireRace.SelectedRace;
            RaceSummary summary = null;
            if (selectedRace == null)
            {
                empty = "(" + TextResolver.GetText("Random") + ")";
                _ = "(" + TextResolver.GetText("Race randomly selected") + ")";
                lnkStartNewGameYourEmpireRace.Visible = false;
            }
            else
            {
                empty = selectedRace.Name;
                summary = Galaxy.GenerateRaceSummary(selectedRace);
                lnkStartNewGameYourEmpireRace.Visible = true;
            }
            IdyEbrKpy3(selectedRace, bool_5: false);
            if (bool_2)
            {
                if (selectedRace != null)
                {
                    method_207(selectedRace.DefaultPiratePlaystyle, bool_5: false);
                }
                else
                {
                    method_207(PiratePlayStyle.Balanced, bool_5: false);
                }
            }
            lblStartNewGameYourEmpireRaceTitle.Text = TextResolver.GetText("Your Race") + ": " + empty;
            lblStartNewGameYourEmpireRaceName.Visible = true;
            lblStartNewGameYourEmpireRaceName.Font = font_9;
            lblStartNewGameYourEmpireRaceName.Text = empty;
            Bitmap bitmap = (Bitmap)picStartNewGameYourEmpireRace.Image;
            Bitmap image = main_0.method_118(null, selectedRace, picStartNewGameYourEmpireRace.Width, picStartNewGameYourEmpireRace.Height, main_0.bitmap_31, 6, bool_28: false);
            picStartNewGameYourEmpireRace.Image = image;
            if (bitmap != null && bitmap.PixelFormat != 0)
            {
                bitmap.Dispose();
            }
            pnlStartNewGameYourEmpireRaceAttributes.BindData(summary, font_3, font_7);
            pnlStartNewGameYourEmpireRaceAttributesContainer.AutoScrollPosition = new Point(0, 0);
        }

        private void method_207(PiratePlayStyle piratePlayStyle_0, bool bool_5)
        {
            int selectedIndex = -1;
            switch (piratePlayStyle_0)
            {
                case PiratePlayStyle.Balanced:
                    selectedIndex = 0;
                    break;
                case PiratePlayStyle.Pirate:
                    selectedIndex = 1;
                    break;
                case PiratePlayStyle.Mercenary:
                    selectedIndex = 2;
                    break;
                case PiratePlayStyle.Smuggler:
                    selectedIndex = 3;
                    break;
            }
            if (bool_5)
            {
                cmbJumpStartVictoryPiratePlayStyle.SelectedIndex = selectedIndex;
            }
            else
            {
                cmbVictoryPiratePlayStyle.SelectedIndex = selectedIndex;
            }
        }

        private void IdyEbrKpy3(Race race_0, bool bool_5)
        {
            List<int> list = Empire.ResolveDefaultAllowableGovernmentTypes(race_0, forceIncludeSpecialTypesIfRaceAllows: true);
            if (bool_5)
            {
                cmbJumpStartYourEmpireGovernment.Ignite(list);
            }
            else
            {
                cmbStartNewGameYourEmpireGovernment.Ignite(list);
            }
            int selectedGovernmentStyle = -1;
            for (int i = 0; i < list.Count; i++)
            {
                GovernmentAttributes governmentAttributes = Galaxy.GovernmentsStatic[list[i]];
                if (governmentAttributes != null && race_0 != null && race_0.PreferredStartingGovernmentId == governmentAttributes.GovernmentId)
                {
                    selectedGovernmentStyle = governmentAttributes.GovernmentId;
                    break;
                }
            }
            if (bool_5)
            {
                cmbJumpStartYourEmpireGovernment.SetSelectedGovernmentStyle(selectedGovernmentStyle);
            }
            else
            {
                cmbStartNewGameYourEmpireGovernment.SetSelectedGovernmentStyle(selectedGovernmentStyle);
            }
        }

        private void method_208(int int_1, bool bool_5)
        {
            string text = string.Empty;
            string text2 = string.Empty;
            if (int_1 < 0)
            {
                text = "(" + TextResolver.GetText("Random") + ")";
                text2 = "(" + TextResolver.GetText("Government randomly selected") + ")";
            }
            else
            {
                GovernmentAttributes governmentAttributes = null;
                if (int_1 >= 0 && int_1 < Galaxy.GovernmentsStatic.Count)
                {
                    governmentAttributes = Galaxy.GovernmentsStatic[int_1];
                    text = governmentAttributes.Name;
                }
                if (governmentAttributes != null)
                {
                    text2 = text2 + TextResolver.GetText("Approval") + ": " + (governmentAttributes.ApprovalRating - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                    text2 += "\n";
                    text2 = text2 + TextResolver.GetText("Corruption") + ": " + (governmentAttributes.Corruption - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                    text2 += "\n";
                    text2 = text2 + TextResolver.GetText("Growth rate") + ": " + (governmentAttributes.PopulationGrowth - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                    text2 += "\n";
                    text2 = text2 + TextResolver.GetText("Research speed") + ": " + (governmentAttributes.ResearchSpeed - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                    text2 += "\n";
                    text2 = text2 + TextResolver.GetText("Colony Income") + ": " + (governmentAttributes.TradeBonus - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                    text2 += "\n";
                    text2 = text2 + TextResolver.GetText("Maintenance costs") + ": " + (governmentAttributes.MaintenanceCosts - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                    text2 += "\n";
                    text2 = text2 + TextResolver.GetText("Troop recruitment") + ": " + (governmentAttributes.TroopRecruitment - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                    text2 += "\n";
                    text2 = text2 + TextResolver.GetText("War weariness") + ": " + (governmentAttributes.WarWeariness - 1.0).ToString("+#0%;-#0%;" + TextResolver.GetText("Normal"));
                }
            }
            if (bool_5)
            {
                lblJumpStartYourEmpireGovernmentTitle.Text = TextResolver.GetText("Your Government") + ": " + text;
                lblJumpStartYourEmpireGovernmentAttributes.Text = text2;
            }
            else
            {
                lblStartNewGameYourEmpireGovernmentTitle.Text = TextResolver.GetText("Your Government") + ": " + text;
                lblStartNewGameYourEmpireGovernmentAttributes.Text = text2;
            }
        }

        private void cmbStartNewGameYourEmpireGovernment_SelectedIndexChanged(object sender, EventArgs e)
        {
            int selectedGovernmentId = cmbStartNewGameYourEmpireGovernment.SelectedGovernmentId;
            method_208(selectedGovernmentId, bool_5: false);
        }

        private void cmbStartNewGameYourEmpireGovernment_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void cmbPrimaryColor_SelectedIndexChanged(object sender, EventArgs e)
        {
            cmbFlagShape.Invalidate();
        }

        private void cmbSecondaryColor_SelectedIndexChanged(object sender, EventArgs e)
        {
            cmbFlagShape.Invalidate();
        }

        private void cTwaUmbdtf(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Race selectedRace = cmbStartNewGameYourEmpireRace.SelectedRace;
            if (selectedRace == null)
            {
                method_127(TextResolver.GetText("Alien Races"));
            }
            else
            {
                method_127(selectedRace.Name);
            }
        }

        private void lnkStartNewGameYourEmpireGovernment_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            int selectedGovernmentId = cmbStartNewGameYourEmpireGovernment.SelectedGovernmentId;
            GovernmentAttributes governmentAttributes = null;
            if (selectedGovernmentId >= 0 && selectedGovernmentId < Galaxy.GovernmentsStatic.Count)
            {
                governmentAttributes = Galaxy.GovernmentsStatic[selectedGovernmentId];
            }
            if (governmentAttributes == null)
            {
                method_127(TextResolver.GetText("Government Types"));
            }
            else
            {
                method_127(governmentAttributes.Name);
            }
        }

        private void chkOtherEmpiresAutogenerate_CheckedChanged(object sender, EventArgs e)
        {
            method_197();
        }

        private void btnAddNewEmpire_Click(object sender, EventArgs e)
        {
            int num = method_61(tbarStartNewGameTheGalaxyStarDensity.Value, raceList_0);
            if (ctlStartingEmpiresList.Grid.Rows.Count < num - 1)
            {
                ctlStartingEmpiresList.Grid.Rows.Add();
            }
        }

        private int method_209(int int_1)
        {
            //int num = 0;
            if (int_1 <= 30000)
            {
                return 4;
            }
            if (int_1 <= 60000)
            {
                return 3;
            }
            if (int_1 <= 120000)
            {
                return 2;
            }
            if (int_1 <= 240000)
            {
                return 1;
            }
            return 0;
        }

        private int meEawywtba(int int_1)
        {
            //int num = 120000;
            return int_1 switch
            {
                0 => 480000,
                1 => 240000,
                2 => 120000,
                3 => 60000,
                4 => 30000,
                _ => 120000,
            };
        }

        private void tbarStartNewGameTheGalaxyResearchSpeed_ValueChanged(object sender, EventArgs e)
        {
            int value = tbarStartNewGameTheGalaxyResearchSpeed.Value;
            int num = meEawywtba(value);
            numStartNewGameTheGalaxyResearchBaseTech.Minimum = 1m;
            numStartNewGameTheGalaxyResearchBaseTech.Maximum = 999m;
            numStartNewGameTheGalaxyResearchBaseTech.Value = num / 1000;
        }

        private void tbarStartNewGameYourEmpireTechLevel_ValueChanged(object sender, EventArgs e)
        {
            if (bool_2 && tbarStartNewGameYourEmpireTechLevel.Value == 0)
            {
                tbarStartNewGameYourEmpireTechLevel.Value = 1;
            }
        }

        private void tbarStartNewGameTheGalaxyStarDensity_ValueChanged(object sender, EventArgs e)
        {
            method_211(bool_5: false);
        }

        private void tbarStartNewGameTheGalaxyDimensions_ValueChanged(object sender, EventArgs e)
        {
            method_211(bool_5: false);
            method_210();
        }

        private void method_210()
        {
            Size size = method_69(tbarStartNewGameTheGalaxyDimensions.Value);
            ctlStartingEmpiresList.SetProximityValues(size.Width, size.Height);
            foreach (EmpireStart otherEmpire in main_0.gameOptions_0.StartGameOptions.OtherEmpires)
            {
                DataGridViewRow rowByEmpireName = ctlStartingEmpiresList.GetRowByEmpireName(otherEmpire.Name);
                if (rowByEmpireName != null)
                {
                    if (((DataGridViewComboBoxCell)rowByEmpireName.Cells["Proximity"]).Items.Contains(otherEmpire.ProximityDistance))
                    {
                        rowByEmpireName.Cells["Proximity"].Value = otherEmpire.ProximityDistance;
                    }
                    else
                    {
                        rowByEmpireName.Cells["Proximity"].Value = "(" + TextResolver.GetText("Random") + ")";
                    }
                }
            }
        }

        private void method_211(bool bool_5)
        {
        }

        private void txtYourEmpireName_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Name"), TextResolver.GetText("Type the name of your empire here"));
        }

        private void cmbPrimaryColor_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Main Color"), TextResolver.GetText("The primary color for your empire"));
        }

        private void cmbSecondaryColor_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Secondary Color"), TextResolver.GetText("The secondary color for your empire"));
        }

        private void cmbStartNewGameYourEmpireRace_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Race") + ": " + TextResolver.GetText("Race"), TextResolver.GetText("The dominant race at your empire's home colony"));
        }

        private void radStartNewGameGalaxyShapeElliptical_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radStartNewGameGalaxyShapeSpiral_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radStartNewGameGalaxyShapeRing_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radStartNewGameGalaxyShapeIrregular_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radStartNewGameGalaxyShapeClustersEven_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radStartNewGameGalaxyShapeClustersVaried_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void tbarStartNewGameTheGalaxyStarDensity_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Star Amount"), TextResolver.GetText("Determines how many stars are in the galaxy"));
        }

        private void tbarStartNewGameTheGalaxyDimensions_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Physical Size"), TextResolver.GetText("Determines the physical dimensions of the galaxy"));
        }

        private void sldStartNewGameColonizationTerritoryColonyInfluenceRange_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Colony Influence Range"), TextResolver.GetText("Controls the size of influence circles that are projected out from colonies. Colony influence determines your empire territory"));
        }

        private void chkStartNewGameColonizationTerritoryEnforceColonizationRange_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Enforce Colonization Range Limits"), TextResolver.GetText("Determines whether colonization range limits are applied"));
        }

        private void grpStartNewGameColonizationTerritoryColonizationRange_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Enforce Colonization Range Limits"), TextResolver.GetText("Determines whether colonization range limits are applied"));
        }

        private void sldStartNewGameColonizationTerritoryColonizationRange_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Colonization Range"), TextResolver.GetText("Specifies the maximum allowable distance of new colonies from one of your existing colonies"));
        }

        private void tbarStartNewGameTheGalaxyColonyPrevalence_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Colony Prevalence"), TextResolver.GetText("Influences the number of colonizable planets and moons in the galaxy"));
        }

        private void tbarStartNewGameTheGalaxyAlienLife_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Alien Life"), TextResolver.GetText("Independent alien populations are distributed throughout the galaxy"));
        }

        private void tbarStartNewGameTheGalaxyExpansion_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Expansion"), TextResolver.GetText("Determines how old and developed the entire galaxy is"));
        }

        private void chkStartNewGameTheGalaxyDifficultyScaling_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Difficulty Scaling"), TextResolver.GetText("Difficulty Scaling Description"));
        }

        private void chkStartNewGameTheGalaxyPiratesRespawn_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Destroyed Pirates do not respawn"), TextResolver.GetText("Destroyed Pirates do not respawn Description"));
        }

        private void tbarStartNewGameTheGalaxyAggression_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Aggression"), TextResolver.GetText("Determines how aggressive computer players are in the game"));
        }

        private void tbarStartNewGameTheGalaxyResearchSpeed_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Research Costs"), TextResolver.GetText("Determines how fast research occurs in the galaxy"));
        }

        private void numStartNewGameTheGalaxyResearchBaseTech_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Research Costs"), TextResolver.GetText("Determines how fast research occurs in the galaxy"));
        }

        private void RmWafgkJeh(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Space Creatures"), TextResolver.GetText("Determines how many space creatures are present in the galaxy"));
        }

        private void tbarStartNewGameTheGalaxyPirates_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Pirates"), TextResolver.GetText("Determines how many pirates are present in the galaxy"));
        }

        private void tbarStartNewGameTheGalaxyPirateStrength_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Pirate Strength"), TextResolver.GetText("Determines how strong pirates are and how fast they grow"));
        }

        private void method_212(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void method_213(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void method_214(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void method_215(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void method_216(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void method_217(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void method_218(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void tbarStartNewGameYourEmpireHomeSystem_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Home System"), TextResolver.GetText("The favorability of your home system"));
        }

        private void tbarStartNewGameYourEmpireSize_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Size"), TextResolver.GetText("Determines how many colonies you have and how well established your empire is"));
        }

        private void tbarStartNewGameYourEmpireTechLevel_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Tech Level"), TextResolver.GetText("Determines how advanced your research is"));
        }

        private void tbarStartNewGameYourEmpireCorruption_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Corruption"), TextResolver.GetText("Determines the level of corruption"));
        }

        private void chkOtherEmpiresAutogenerate_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Other Empires") + ": " + TextResolver.GetText("Auto-Generate"), TextResolver.GetText("When this is turned on the specified number of empires are automatically generated"));
        }

        private void numAutogenerateEmpiresAmount_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Other Empires") + ": " + TextResolver.GetText("Amount"), TextResolver.GetText("The number of starting empires to auto-generate"));
        }

        private void ctlStartingEmpiresList_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Other Empires") + ": " + TextResolver.GetText("List"), TextResolver.GetText("Here you can manually specify all of the starting empires in the galaxy"));
        }

        private void chkGalaxyNewEmpiresDuringGame_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("New Empires appear during game"), TextResolver.GetText("If this is turned on then independent alien populations can eventually become empires"));
        }

        private void lnkThemes_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            method_149();
            if (!pnlThemes.Visible)
            {
                method_26();
            }
        }

        private void lnkThemes_MouseEnter(object sender, EventArgs e)
        {
            method_146(TextResolver.GetText("Change Theme DESCRIPTION"));
        }

        private void lnkThemes_MouseLeave(object sender, EventArgs e)
        {
            method_147();
        }

        private void btnThemeCancel_Click(object sender, EventArgs e)
        {
            method_27();
        }

        private void btnThemeSwitch_Click(object sender, EventArgs e)
        {
            Application.UseWaitCursor = true;
            Cursor.Current = Cursors.WaitCursor;
            method_2(lblThemeTitle.Text, bool_5: true, bool_6: true);
            Application.UseWaitCursor = false;
            Cursor.Current = Cursors.Default;
            method_27();
        }

        private void pnlThemes_CloseButtonClicked(object sender, EventArgs e)
        {
            method_27();
        }

        private void chkOptionsAutoSave_CheckedChanged(object sender, EventArgs e)
        {
            if (chkOptionsAutoSave.Checked)
            {
                numOptionsAutoSaveMinutes.Enabled = true;
            }
            else
            {
                numOptionsAutoSaveMinutes.Enabled = false;
            }
        }

        public void SetControlLocalizedLabels()
        {
            lnkAbout.Text = TextResolver.GetText("Credits");
            lnkCheckForUpdates.Text = TextResolver.GetText("Check For Updates");
            lnkExit.Text = TextResolver.GetText("Exit");
            lnkGalactopedia.Text = TextResolver.GetText("Galactopedia");
            lnkLoadGame.Text = TextResolver.GetText("Load Game");
            lnkNewGame.Text = TextResolver.GetText("Start New Game");
            lnkOptions.Text = TextResolver.GetText("Options");
            lnkPlayScenario.Text = TextResolver.GetText("Quick Start");
            lnkQuickStartRaceHelp.Text = TextResolver.GetText("About this Race") + "...";
            lnkStartNewGameYourEmpireGovernment.Text = TextResolver.GetText("Read more about this Government type") + "...";
            lnkStartNewGameYourEmpireRace.Text = TextResolver.GetText("Read more about this race") + "...";
            lnkThemes.Text = TextResolver.GetText("Change Theme");
            lnkTutorial.Text = TextResolver.GetText("Tutorials");
            radioRandom.Text = TextResolver.GetText("Random");
            radioSmall.Text = TextResolver.GetText("QuickStart Title Fast");
            radioEpic.Text = TextResolver.GetText("QuickStart Title Epic");
            radioRingRace.Text = TextResolver.GetText("QuickStart Title Ring Race");
            radioConflict.Text = TextResolver.GetText("QuickStart Title Conflict");
            radioExpandingSettlements.Text = TextResolver.GetText("QuickStart Title Expanding Settlements");
            radioExpandingFromTheCore.Text = TextResolver.GetText("QuickStart Title Expanding From The Core");
            radioFullyDevelopedSmall.Text = TextResolver.GetText("QuickStart Title Fully Developed - Small");
            radioFullyDevelopedStandard.Text = TextResolver.GetText("QuickStart Title Fully Developed - Standard");
            radioFullyDevelopedLarge.Text = TextResolver.GetText("QuickStart Title Fully Developed - Large");
            radioGalacticRepublicSupremeRuler.Text = TextResolver.GetText("QuickStart Title Galactic Republic - Supreme Ruler");
            radioGalacticRepublicWildFrontiers.Text = TextResolver.GetText("QuickStart Title Galactic Republic - Wild Frontiers");
            radioSovereignTerritoriesRegionalRuler.Text = TextResolver.GetText("QuickStart Title Sovereign Territories - Regional Ruler");
            radioSovereignTerritoriesMinorFaction.Text = TextResolver.GetText("QuickStart Title Sovereign Territories - Minor Faction");
            radStartNewGameGalaxyShapeElliptical.Text = TextResolver.GetText("Elliptical");
            radStartNewGameGalaxyShapeIrregular.Text = TextResolver.GetText("Irregular");
            radStartNewGameGalaxyShapeRing.Text = TextResolver.GetText("Ring");
            radStartNewGameGalaxyShapeSpiral.Text = TextResolver.GetText("Spiral");
            radStartNewGameGalaxyShapeClustersEven.Text = TextResolver.GetText("Even Clusters");
            radStartNewGameGalaxyShapeClustersVaried.Text = TextResolver.GetText("Varied Clusters");
            chkOptionsControlResearch.Text = TextResolver.GetText("Research");
            lblOptionsControlColonyFacilities.Text = TextResolver.GetText("Colony Facility Building");
            cmbOptionsControlColonyFacilities.Items.Clear();
            cmbOptionsControlColonyFacilities.Items.AddRange(new string[3]
            {
            TextResolver.GetText("Control manually"),
            TextResolver.GetText("Suggest new colony facilities"),
            TextResolver.GetText("Fully automate")
            });
            lblOptionsControlOfferPirateMissions.Text = TextResolver.GetText("Offer Pirate Missions");
            cmbOptionsControlOfferPirateMissions.Items.Clear();
            cmbOptionsControlOfferPirateMissions.Items.AddRange(new string[3]
            {
            TextResolver.GetText("Control manually"),
            TextResolver.GetText("Suggest pirate missions"),
            TextResolver.GetText("Fully automate")
            });
            cmbStartNewGameTheGalaxyPirateProximity.Items.AddRange(new string[3]
            {
            TextResolver.GetText("Nearby"),
            TextResolver.GetText("Average"),
            TextResolver.GetText("Distant")
            });
            lblStartNewGameTheGalaxyPirateProximityLabel.Text = TextResolver.GetText("Pirate Proximity");
            chkOptionsLoadedGamesPaused.Text = TextResolver.GetText("Loaded games are paused");
            grpGameOptionsDiscoveries.Text = TextResolver.GetText("Discoveries");
            cmbGameOptionsEncounterAbandonedShipOrBase.Items.Clear();
            cmbGameOptionsEncounterAbandonedShipOrBase.Items.AddRange(new string[3]
            {
            TextResolver.GetText("Ask what to do"),
            TextResolver.GetText("Investigate - show all results"),
            TextResolver.GetText("Investigate - do not show results")
            });
            cmbGameOptionsEncounterRuins.Items.Clear();
            cmbGameOptionsEncounterRuins.Items.AddRange(new string[5]
            {
            TextResolver.GetText("Ask what to do"),
            TextResolver.GetText("Investigate - show all results"),
            TextResolver.GetText("Investigate - report discoveries"),
            TextResolver.GetText("Investigate - report major discoveries"),
            TextResolver.GetText("Investigate - do not show results")
            });
            lblGameOptionsEncounterAbandonedShipOrBase.Text = TextResolver.GetText("When encounter Abandoned Ship or Base");
            lblGameOptionsEncounterRuins.Text = TextResolver.GetText("When encounter Ruins");
            chkOptionsNewShipsAutomated.Text = TextResolver.GetText("Newly built ships are automated");
            chkOptionsSuppressAllPopups.Text = TextResolver.GetText("Suppress all pop-up screens");
            chkStoryReturnOfTheShakturi.Text = TextResolver.GetText("Enable Return Of The Shakturi story events and victory conditions");
            chkQuickStartReturnOfTheShakturiStoryEvents.Text = TextResolver.GetText("Return Of The Shakturi storyline");
            chkStoryShadows.Text = TextResolver.GetText("Enable Shadows story events");
            chkStoryDistantWorlds.Text = TextResolver.GetText("Enable original Distant Worlds story events");
            chkQuickStartDistantWorldsStoryEvents.Text = TextResolver.GetText("Distant Worlds original storyline");
            cmbVictoryPiratePlayStyle.Items.AddRange(new string[4]
            {
            Galaxy.ResolveDescription(PiratePlayStyle.Balanced),
            Galaxy.ResolveDescription(PiratePlayStyle.Pirate),
            Galaxy.ResolveDescription(PiratePlayStyle.Mercenary),
            Galaxy.ResolveDescription(PiratePlayStyle.Smuggler)
            });
            cmbJumpStartVictoryPiratePlayStyle.Items.AddRange(new string[4]
            {
            Galaxy.ResolveDescription(PiratePlayStyle.Balanced),
            Galaxy.ResolveDescription(PiratePlayStyle.Pirate),
            Galaxy.ResolveDescription(PiratePlayStyle.Mercenary),
            Galaxy.ResolveDescription(PiratePlayStyle.Smuggler)
            });
            chkStartNewGameEnableTechTrading.Text = TextResolver.GetText("Allow Tech Trading");
            chkStartNewGameEnableGiantKaltors.Text = TextResolver.GetText("Allow Giant Kaltors at game start");
            sldGameOptionsAttackOvermatch.LabelText = TextResolver.GetText("Attack Overmatch");
            tbarStartNewGameYourEmpireCorruption.LabelText = TextResolver.GetText("Corruption");
            tbarStartNewGameYourEmpireHomeSystem.LabelText = TextResolver.GetText("Home System");
            tbarStartNewGameYourEmpireSize.LabelText = TextResolver.GetText("Size");
            tbarStartNewGameYourEmpireTechLevel.LabelText = TextResolver.GetText("Tech Level");
            tbrGameOptionsAdvancedDisplaySettingsNebulaeDetail.LabelText = TextResolver.GetText("System Nebulae Detail");
            method_219(cmbGameOptionsEngagementStanceAttack);
            method_219(cmbGameOptionsEngagementStanceEscort);
            method_219(cmbGameOptionsEngagementStanceOther);
            method_219(cmbGameOptionsEngagementStancePatrol);
            method_219(cmbGameOptionsEngagementStanceAttackManual);
            method_219(cmbGameOptionsEngagementStanceEscortManual);
            method_219(cmbGameOptionsEngagementStanceOtherManual);
            method_219(cmbGameOptionsEngagementStancePatrolManual);
            cmbOptionsAutomationMode.Items.Clear();
            cmbOptionsAutomationMode.Items.AddRange(new string[8]
            {
            "(" + TextResolver.GetText("Custom") + ")",
            TextResolver.GetText("Default"),
            TextResolver.GetText("Expert") + " (" + TextResolver.GetText("none") + ")",
            TextResolver.GetText("Rule in Absence") + " (" + TextResolver.GetText("full") + ")",
            TextResolver.GetText("Expansion"),
            TextResolver.GetText("War and Combat"),
            TextResolver.GetText("Diplomacy"),
            TextResolver.GetText("Spy Master")
            });
            method_220(cmbOptionsControlAgentMissions, "Suggest offensive missions");
            method_220(cmbOptionsControlAttacks, "Suggest attack targets");
            method_220(cmbOptionsControlColonization, "Suggest new colonies");
            method_220(cmbOptionsControlConstruction, "Suggest new ships and bases");
            method_220(cmbOptionsControlDiplomacyGifts, "Suggest gifts to empires");
            method_220(cmbOptionsControlDiplomacyOffense, "Suggest war and trade sanctions");
            method_220(cmbOptionsControlDiplomacyTreaties, "Suggest new treaties");
            cmbOptionsMouseScrollWheelBehaviour.Items.Clear();
            cmbOptionsMouseScrollWheelBehaviour.Items.AddRange(new string[3]
            {
            TextResolver.GetText("No movement"),
            TextResolver.GetText("Move to selected item"),
            TextResolver.GetText("Move to mouse cursor location")
            });
            lblCopyright.Text = TextResolver.GetText("Copyright");
            lblGameOptionsAdvancedDisplaySettingsMaximumFramerateFPS.Text = TextResolver.GetText("fps");
            lblGameOptionsEngagementStanceAttack.Text = TextResolver.GetText("Attack/Bombard");
            lblGameOptionsEngagementStanceEscort.Text = TextResolver.GetText("Mission Escort");
            lblGameOptionsEngagementStanceOther.Text = TextResolver.GetText("Other");
            lblGameOptionsEngagementStancePatrol.Text = TextResolver.GetText("Mission Patrol");
            lblGameOptionsFleetAttackGather.Text = TextResolver.GetText("First assemble when this percentage of fleet dispersed");
            lblGameOptionsFleetAttackRefuel.Text = TextResolver.GetText("First assemble when this percentage of fleet need fuel");
            lblOptionsAutomationMode.Text = TextResolver.GetText("Mode");
            lblOptionsControlAgentMissions.Text = TextResolver.GetText("Intelligence Missions");
            lblOptionsControlAttacks.Text = TextResolver.GetText("Attacks Against Enemies");
            lblOptionsControlColonization.Text = TextResolver.GetText("Colonization");
            lblOptionsControlConstruction.Text = TextResolver.GetText("Ship Building");
            lblOptionsControlDiplomacyGifts.Text = TextResolver.GetText("Sending Diplomatic Gifts");
            lblOptionsControlDiplomacyOffense.Text = TextResolver.GetText("War and Trade Sanctions");
            lblOptionsControlDiplomacyTreaties.Text = TextResolver.GetText("Treaties");
            lblOptionsMainViewScrollSpeed.Text = TextResolver.GetText("Scroll Speed");
            lblOptionsMainViewStarFieldSize.Text = TextResolver.GetText("Star Density");
            lblOptionsMainViewZoomSpeed.Text = TextResolver.GetText("Zoom Speed");
            lblOptionsMouseScrollMode.Text = TextResolver.GetText("Mouse scroll-wheel behavior");
            lblOptionsMusicVolume.Text = TextResolver.GetText("Music");
            lblOptionsSoundEffectsVolume.Text = TextResolver.GetText("Effects");
            lblQuickStartRace.Text = TextResolver.GetText("Race");
            lblStartNewGameOtherEmpiresAutoGenNumberDescrip1.Text = TextResolver.GetText("Generate");
            lblStartNewGameOtherEmpiresAutoGenNumberDescrip2.Text = TextResolver.GetText("starting empires");
            lblStartNewGameOtherEmpiresOR.Text = TextResolver.GetText("OR specify the starting empires below");
            lblStartNewGameYourEmpireGalaxyLocation.Text = TextResolver.GetText("Galaxy Starting Location");
            lblStartNewGameYourEmpireGovernmentTitle.Text = TextResolver.GetText("Your Government");
            lblStartNewGameYourEmpireMainColor.Text = TextResolver.GetText("Main Color");
            lblStartNewGameYourEmpireName.Text = TextResolver.GetText("Empire Name");
            lblStartNewGameYourEmpireSecondaryColor.Text = TextResolver.GetText("Secondary Color");
            lblVersion.Text = TextResolver.GetText("Version");
            lblVictorySandbox.Text = TextResolver.GetText("Victory Conditions Explanation");
            btnAboutClose.Text = TextResolver.GetText("Close Credits");
            btnAddNewEmpire.Text = TextResolver.GetText("Add New Empire");
            btnGameOptionsAdvancedDisplaySettings.Text = TextResolver.GetText("Advanced Settings...");
            btnGameOptionsEmpireSettings.Text = TextResolver.GetText("Empire Settings");
            btnGameOptionsResetAutomationMessages.Text = TextResolver.GetText("Reset Warnings");
            btnQuickStart.Text = TextResolver.GetText("Start Game");
            btnQuickStartCancel.Text = TextResolver.GetText("Cancel");
            btnStartNewGameOtherEmpiresNext.Text = TextResolver.GetText("Next: Victory Conditions") + " >>";
            btnStartNewGameOtherEmpiresPrevious.Text = "<< " + TextResolver.GetText("Previous: Your Empire");
            btnStartNewGameStart.Text = TextResolver.GetText("Start the Game!");
            btnStartNewGameTheGalaxyNext.Text = TextResolver.GetText("Next: Colonization and Territory") + " >>";
            btnStartNewGameTheGalaxyPrevious.Text = "<< " + TextResolver.GetText("Previous: Playstyle");
            btnStartNewGameVictoryConditionsPrevious.Text = "<< " + TextResolver.GetText("Previous: Other Empires");
            btnStartNewGameYourEmpireNext.Text = TextResolver.GetText("Next: Other Empires") + " >>";
            btnStartNewGameYourEmpirePrevious.Text = "<< " + TextResolver.GetText("Previous: Your Race");
            btnStartNewGameYourRaceNext.Text = TextResolver.GetText("Next: Your Empire") + " >>";
            btnStartNewGameYourRacePrevious.Text = "<< " + TextResolver.GetText("Previous: Colonization and Territory");
            btnThemeCancel.Text = TextResolver.GetText("Cancel");
            btnThemeSwitch.Text = TextResolver.GetText("Switch Theme");
            btnTutorialStartCancel.Text = TextResolver.GetText("Cancel");
            chkEncyclopediaShowAtStart.Text = TextResolver.GetText("Show this screen at startup");
            chkGalaxyNewEmpiresDuringGame.Text = TextResolver.GetText("Allow new Empires to appear during the game");
            chkGameOptionsAdvancedDisplaySettingsMaximumFramerateUnlimited.Text = TextResolver.GetText("Unlimited");
            chkGameOptionsGalaxyDisplayAlwaysEnemyFleets.Text = TextResolver.GetText("Always show enemy Fleets");
            chkGameOptionsGalaxyDisplayAlwaysEnemyMilitaryShips.Text = TextResolver.GetText("Always show enemy Military ships");
            chkGameOptionsGalaxyDisplayAlwaysPirates.Text = TextResolver.GetText("Always show Pirates");
            chkGameOptionsGalaxyDisplayCivilianShips.Text = TextResolver.GetText("Civilian ships");
            chkGameOptionsGalaxyDisplayColonyShips.Text = TextResolver.GetText("Colony Ships");
            chkGameOptionsGalaxyDisplayConstructionShips.Text = TextResolver.GetText("Construction Ships");
            chkGameOptionsGalaxyDisplayExplorationShips.Text = TextResolver.GetText("Exploration Ships");
            chkGameOptionsGalaxyDisplayFleets.Text = TextResolver.GetText("Fleets");
            chkGameOptionsGalaxyDisplayMilitaryShips.Text = TextResolver.GetText("Military Ships");
            chkGameOptionsGalaxyDisplayOtherBases.Text = TextResolver.GetText("Other Bases");
            chkGameOptionsGalaxyDisplayResupplyShips.Text = TextResolver.GetText("Resupply Ships");
            chkGameOptionsGalaxyDisplaySpacePorts.Text = TextResolver.GetText("Space Ports");
            chkOptionsAllowSameSystemAsOtherEmpires.Text = TextResolver.GetText("Allow colonization and mining stations in other empires systems");
            chkOptionsAutoPauseInPopup.Text = TextResolver.GetText("Auto Pause in Game Screens");
            chkOptionsAutoSave.Text = TextResolver.GetText("Every (SPACER) minutes");
            chkOptionsControlColonyTaxRates.Text = TextResolver.GetText("Colony Tax Rates");
            chkOptionsControlCharacterLocations.Text = TextResolver.GetText("Character Locations");
            chkOptionsControlDesigns.Text = TextResolver.GetText("Ship Design");
            chkOptionsControlFleets.Text = TextResolver.GetText("Fleet Formation");
            chkOptionsControlTroops.Text = TextResolver.GetText("Troop Recruitment");
            chkOptionsControlPopulationPolicy.Text = TextResolver.GetText("Colony Population Policies");
            chkOptionsPopupMessageColonyGainLoss.Text = TextResolver.GetText("Colony Gain or Loss");
            chkOptionsPopupMessageDiplomacyTreaties.Text = TextResolver.GetText("Treaty offers");
            chkOptionsPopupMessageDiplomacyWarTradeSanctions.Text = TextResolver.GetText("War and Trade Sanctions");
            chkOptionsPopupMessageEmpireMetDestroyed.Text = TextResolver.GetText("Empire Discovery");
            chkOptionsPopupMessageExploration.Text = TextResolver.GetText("Exploration discoveries");
            chkOptionsPopupMessageIntelligenceMissions.Text = TextResolver.GetText("Intelligence Missions");
            chkOptionsPopupMessageRequestWarning.Text = TextResolver.GetText("Requests, Warnings and Gifts");
            chkOptionsPopupMessageResearchBreakthrough.Text = TextResolver.GetText("Research Breakthrough");
            chkOptionsPopupMessageShipBuilt.Text = TextResolver.GetText("New Ship Built");
            chkOptionsPopupMessageShipMissionComplete.Text = TextResolver.GetText("Ship Mission Complete");
            chkOptionsPopupMessageShipNeedsRefuelling.Text = TextResolver.GetText("Ship Needs Refuelling or Repair");
            chkOptionsPopupMessageConstructionResourceShortage.Text = TextResolver.GetText("Construction Resource Shortage");
            chkOptionsScrollingMessageColonyGainLoss.Text = TextResolver.GetText("Colony Gain or Loss");
            chkOptionsScrollingMessageDiplomacyTreaties.Text = TextResolver.GetText("Treaty offers");
            chkOptionsScrollingMessageEmpireMetDestroyed.Text = TextResolver.GetText("Empire Discovery");
            chkOptionsScrollingMessageExploration.Text = TextResolver.GetText("Exploration discoveries");
            chkOptionsScrollingMessageIntelligenceMissions.Text = TextResolver.GetText("Intelligence Missions");
            chkOptionsScrollingMessageNewShipBuilt.Text = TextResolver.GetText("New Ship Built");
            chkOptionsScrollingMessageRequestWarning.Text = TextResolver.GetText("Requests, Warnings and Gifts");
            chkOptionsScrollingMessageResearchBreakthrough.Text = TextResolver.GetText("Research Breakthrough");
            chkOptionsScrollingMessageShipMissionComplete.Text = TextResolver.GetText("Ship Mission Complete");
            chkOptionsScrollingMessageShipNeedsRefuelling.Text = TextResolver.GetText("Ship Needs Refuelling or Repair");
            chkOptionsScrollingMessageUnderAttackCivilianShips.Text = TextResolver.GetText("Under Attack");
            chkOptionsScrollingMessageWarTradeSanctions.Text = TextResolver.GetText("War and Trade Sanctions");
            chkOptionsScrollingMessageConstructionResourceShortage.Text = TextResolver.GetText("Construction Resource Shortage");
            chkOptionsShowSystemNebulae.Text = TextResolver.GetText("Display nebulae clouds in systems");
            chkOtherEmpiresAutogenerate.Text = TextResolver.GetText("Auto-Generate Starting Empires");
            chkOptionsPopupMessageUnderAttackCivilianBases.Text = TextResolver.GetText("Under Attack - Civilian Bases");
            chkOptionsPopupMessageUnderAttackCivilianShips.Text = TextResolver.GetText("Under Attack - Civilian Ships");
            chkOptionsPopupMessageUnderAttackColoniesSpaceports.Text = TextResolver.GetText("Under Attack - Colonies && Spaceports");
            chkOptionsPopupMessageUnderAttackColonyConstructionShips.Text = TextResolver.GetText("Under Attack - Colony && Construction Ships");
            chkOptionsPopupMessageUnderAttackExplorationShips.Text = TextResolver.GetText("Under Attack - Exploration Ships");
            chkOptionsPopupMessageUnderAttackMilitaryShips.Text = TextResolver.GetText("Under Attack - Military Ships");
            chkOptionsPopupMessageUnderAttackOtherStateBases.Text = TextResolver.GetText("Under Attack - Research, Monitoring, Resorts");
            chkOptionsScrollingMessageUnderAttackCivilianBases.Text = TextResolver.GetText("Under Attack - Civilian Bases");
            chkOptionsScrollingMessageUnderAttackCivilianShips.Text = TextResolver.GetText("Under Attack - Civilian Ships");
            chkOptionsScrollingMessageUnderAttackColoniesSpaceports.Text = TextResolver.GetText("Under Attack - Colonies && Spaceports");
            chkOptionsScrollingMessageUnderAttackColonyConstructionShips.Text = TextResolver.GetText("Under Attack - Colony && Construction Ships");
            chkOptionsScrollingMessageUnderAttackExplorationShips.Text = TextResolver.GetText("Under Attack - Exploration Ships");
            chkOptionsScrollingMessageUnderAttackMilitaryShips.Text = TextResolver.GetText("Under Attack - Military Ships");
            chkOptionsScrollingMessageUnderAttackOtherStateBases.Text = TextResolver.GetText("Under Attack - Research, Monitoring, Resorts");
            pnlGameOptionsMessages.HeaderTitle = TextResolver.GetText("Message Settings");
            btnGameOptionsShowMessages.Text = TextResolver.GetText("Show Message Settings");
            pnlGameOptions.HeaderTitle = TextResolver.GetText("Options");
            pnlGameOptionsAdvancedDisplaySettings.HeaderTitle = TextResolver.GetText("Advanced Display Settings");
            pnlGameOptionsEmpireSettings.HeaderTitle = TextResolver.GetText("Other Empire Settings");
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game");
            pnlQuickStart.HeaderTitle = TextResolver.GetText("Quick Start");
            pnlThemes.HeaderTitle = TextResolver.GetText("Change Theme");
            FtIzCrmve5.HeaderTitle = TextResolver.GetText("Tutorials");
            grpGameOptionsAdvancedDisplaySettingsGalaxyIcons.Text = TextResolver.GetText("Galaxy View - Ship Display");
            grpGameOptionsAdvancedDisplaySettingsMaximumFramerate.Text = TextResolver.GetText("Maximum Framerate");
            grpGameOptionsDefaultEngagementStances.Text = TextResolver.GetText("Default Engagement Stances - Auto");
            grpGameOptionsDefaultEngagementStancesManual.Text = TextResolver.GetText("Default Engagement Stances - Manual");
            grpGameOptionsFleetAttackSettings.Text = TextResolver.GetText("Fleet Attack Settings");
            grpOptionsAutoSave.Text = TextResolver.GetText("Auto Save");
            grpOptionsControl.Text = TextResolver.GetText("Automation");
            grpOptionsDisplaySettings.Text = TextResolver.GetText("Display Settings");
            grpOptionsPopupMessages.Text = TextResolver.GetText("Popup Messages");
            grpOptionsScrollingMessages.Text = TextResolver.GetText("Scrolling Messages");
            grpOptionsVolume.Text = TextResolver.GetText("Sound Volume");
        }

        private void method_219(ComboBox comboBox_0)
        {
            comboBox_0.Items.Clear();
            comboBox_0.Items.AddRange(new string[4]
            {
            TextResolver.GetText("No default stance"),
            TextResolver.GetText("Engage when attacked"),
            TextResolver.GetText("Engage nearby targets"),
            TextResolver.GetText("Engage system targets")
            });
        }

        private void method_220(ComboBox comboBox_0, string string_2)
        {
            comboBox_0.Items.Clear();
            comboBox_0.Items.Add(TextResolver.GetText("Control manually"));
            comboBox_0.Items.Add(TextResolver.GetText(string_2));
            comboBox_0.Items.Add(TextResolver.GetText("Fully automate"));
        }

        private void pnlStartNewGameYourEmpireRaceAttributes_Enter(object sender, EventArgs e)
        {
            pnlStartNewGameYourEmpireRaceAttributesContainer.Focus();
        }

        private void pnlStartNewGameYourEmpireRaceAttributes_MouseEnter(object sender, EventArgs e)
        {
            pnlStartNewGameYourEmpireRaceAttributesContainer.Focus();
        }

        private void sldStartNewGameColonizationTerritoryColonyInfluenceRange_Scroll(object sender, ScrollEventArgs e)
        {
            lblStartNewGameColonizationTerritoryColonyInfluenceRangeValue.Text = sldStartNewGameColonizationTerritoryColonyInfluenceRange.Value + "%";
        }

        private void chkStartNewGameColonizationTerritoryEnforceColonizationRange_CheckedChanged(object sender, EventArgs e)
        {
            grpStartNewGameColonizationTerritoryColonizationRange.Enabled = chkStartNewGameColonizationTerritoryEnforceColonizationRange.Checked;
        }

        private void sldStartNewGameColonizationTerritoryColonizationRange_Scroll(object sender, ScrollEventArgs e)
        {
            lblStartNewGameColonizationTerritoryColonizationRangeValue.Text = ((float)sldStartNewGameColonizationTerritoryColonizationRange.Value / 1000f).ToString("#0.00") + "  " + TextResolver.GetText("sectors");
        }

        private void chkVictoryEnableRaceSpecificConditions_CheckedChanged(object sender, EventArgs e)
        {
            cmbVictoryPiratePlayStyle.Enabled = chkVictoryEnableRaceSpecificConditions.Checked;
        }

        private void chkOptionsSuppressAllPopups_CheckedChanged(object sender, EventArgs e)
        {
            if (chkOptionsSuppressAllPopups.Checked)
            {
                if (cmbGameOptionsEncounterRuins.SelectedIndex < 1)
                {
                    cmbGameOptionsEncounterRuins.SelectedIndex = Math.Max(1, main_0.gameOptions_0.DiscoveryActionRuin);
                }
                if (cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex < 1)
                {
                    cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex = Math.Max(1, main_0.gameOptions_0.DiscoveryActionAbandonedShipBase);
                }
            }
        }

        private void cmbGameOptionsEncounterAbandonedShipOrBase_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (chkOptionsSuppressAllPopups.Checked)
            {
                cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndexChanged -= cmbGameOptionsEncounterAbandonedShipOrBase_SelectedIndexChanged;
                if (cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex < 1)
                {
                    cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndex = Math.Max(1, main_0.gameOptions_0.DiscoveryActionAbandonedShipBase);
                }
                cmbGameOptionsEncounterAbandonedShipOrBase.SelectedIndexChanged += cmbGameOptionsEncounterAbandonedShipOrBase_SelectedIndexChanged;
            }
        }

        private void cmbGameOptionsEncounterRuins_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (chkOptionsSuppressAllPopups.Checked)
            {
                cmbGameOptionsEncounterRuins.SelectedIndexChanged -= cmbGameOptionsEncounterRuins_SelectedIndexChanged;
                if (cmbGameOptionsEncounterRuins.SelectedIndex < 1)
                {
                    cmbGameOptionsEncounterRuins.SelectedIndex = Math.Max(1, main_0.gameOptions_0.DiscoveryActionRuin);
                }
                cmbGameOptionsEncounterRuins.SelectedIndexChanged += cmbGameOptionsEncounterRuins_SelectedIndexChanged;
            }
        }

        private void btnStartNewGameGalaxyMapsCustom_Click(object sender, EventArgs e)
        {
            pnlStartNewGameGalaxyMaps.Visible = false;
            pnlStartNewGameGalaxyMaps.SendToBack();
            pnlStartNewGameYourEmpireType.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Playstyle");
            btnStartNewGameYourEmpireTypeNormalShadows.Focus();
            pnlStartNewGameYourEmpireType.BringToFront();
            lblHelpTitle.Text = string.Empty;
            lblHelpDescription.Text = string.Empty;
        }

        private void method_221(GalaxySummary galaxySummary_0, EmpireSummary empireSummary_0)
        {
            using FileStream stream_ = new FileStream(galaxySummary_0.Filepath, FileMode.Open, FileAccess.Read);
            method_22(stream_, galaxySummary_0.Filename, TextResolver.GetText("Starting Prebuilt Galaxy") + "...");
            method_10();
            if (empireSummary_0 == null && galaxySummary_0.EmpireSummaries != null && galaxySummary_0.EmpireSummaries.Count > 0)
            {
                empireSummary_0 = galaxySummary_0.EmpireSummaries[0];
            }
            if (empireSummary_0 == null)
            {
                return;
            }
            double viewX = 0.0;
            double viewY = 0.0;
            Empire empireById = main_0._Game.Galaxy.GetEmpireById(empireSummary_0.EmpireId);
            if (empireById != null)
            {
                main_0._Game.PlayerEmpire = empireById;
                main_0._Game.Galaxy.PlayerEmpire = empireById;
                if (empireById.PirateEmpireBaseHabitat != null)
                {
                    if (empireById.SpacePorts != null && empireById.SpacePorts.Count > 0)
                    {
                        viewX = empireById.SpacePorts[0].Xpos;
                        viewY = empireById.SpacePorts[0].Ypos;
                    }
                    else
                    {
                        viewX = empireById.PirateEmpireBaseHabitat.Xpos;
                        viewY = empireById.PirateEmpireBaseHabitat.Ypos;
                    }
                }
                else if (empireById.Capital != null)
                {
                    viewX = empireById.Capital.Xpos;
                    viewY = empireById.Capital.Ypos;
                }
            }
            main_0._Game.ViewX = viewX;
            main_0._Game.ViewY = viewY;
            main_0._Game.ZoomFactor = 1.0;
            for (int i = 0; i < main_0._Game.Galaxy.Empires.Count; i++)
            {
                Empire empire = main_0._Game.Galaxy.Empires[i];
                if (empire != null)
                {
                    if (empire == main_0._Game.PlayerEmpire)
                    {
                        empire.SetAutomationSettings(main_0.gameOptions_0);
                    }
                    else
                    {
                        empire.SetAutomationSettingsFullyAutomated();
                    }
                }
            }
            for (int j = 0; j < main_0._Game.Galaxy.PirateEmpires.Count; j++)
            {
                Empire empire2 = main_0._Game.Galaxy.PirateEmpires[j];
                if (empire2 != null)
                {
                    if (empire2 == main_0._Game.PlayerEmpire)
                    {
                        empire2.SetAutomationSettings(main_0.gameOptions_0);
                    }
                    else
                    {
                        empire2.SetAutomationSettingsFullyAutomated();
                    }
                }
            }
            Application.UseWaitCursor = false;
            method_77(main_0._Game);
        }

        private void btnStartNewGameGalaxyMapsStart_Click(object sender, EventArgs e)
        {
            GalaxySummary selectedGalaxySummary = ctlStartNewGameGalaxyMapsGalaxies.SelectedGalaxySummary;
            EmpireSummary selectedEmpireSummary = ctlStartNewGameGalaxyMapsEmpires.SelectedEmpireSummary;
            if (selectedGalaxySummary != null && !string.IsNullOrEmpty(selectedGalaxySummary.Filename) && !string.IsNullOrEmpty(selectedGalaxySummary.Filepath) && selectedEmpireSummary != null)
            {
                method_221(selectedGalaxySummary, selectedEmpireSummary);
            }
        }

        private void ctlStartNewGameGalaxyMapsGalaxies_SelectionChanged(object sender, EventArgs e)
        {
            GalaxySummary selectedGalaxySummary = ctlStartNewGameGalaxyMapsGalaxies.SelectedGalaxySummary;
            if (selectedGalaxySummary != null)
            {
                string text = selectedGalaxySummary.Title;
                if (string.IsNullOrEmpty(text))
                {
                    text = selectedGalaxySummary.Filename;
                }
                lblStartNewGameGalaxyMapsAvailableFactions.Text = string.Format(TextResolver.GetText("StartNewGame GalaxyMaps AvailableEmpires"), text);
                pnlStartNewGameGalaxyMapsGalaxy.BindData(selectedGalaxySummary, font_9, font_3, font_7);
                ctlStartNewGameGalaxyMapsEmpires.BindData(selectedGalaxySummary.EmpireSummaries, raceList_1, main_0.raceImageCache_0);
                if (selectedGalaxySummary.EmpireSummaries != null && selectedGalaxySummary.EmpireSummaries.Count > 0)
                {
                    pnlStartNewGameGalaxyMapsEmpire.BindData(selectedGalaxySummary.EmpireSummaries[0], raceList_1, main_0.raceImageCache_0, font_9, font_3, font_7);
                }
                else
                {
                    pnlStartNewGameGalaxyMapsEmpire.ClearData();
                }
            }
            else
            {
                lblStartNewGameGalaxyMapsAvailableFactions.Text = string.Format(TextResolver.GetText("StartNewGame GalaxyMaps AvailableEmpires"), string.Empty);
                pnlStartNewGameGalaxyMapsGalaxy.ClearData();
                ctlStartNewGameGalaxyMapsEmpires.ClearData();
            }
        }

        private void ctlStartNewGameGalaxyMapsEmpires_SelectionChanged(object sender, EventArgs e)
        {
            EmpireSummary selectedEmpireSummary = ctlStartNewGameGalaxyMapsEmpires.SelectedEmpireSummary;
            if (selectedEmpireSummary != null)
            {
                pnlStartNewGameGalaxyMapsEmpire.BindData(selectedEmpireSummary, raceList_1, main_0.raceImageCache_0, font_9, font_3, font_7);
            }
            else
            {
                pnlStartNewGameGalaxyMapsEmpire.ClearData();
            }
        }

        private void ctlStartNewGameGalaxyMapsGalaxies_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Prebuilt Galaxies") + ": " + TextResolver.GetText("Galaxies"), TextResolver.GetText("Select a galaxy to play"));
        }

        private void ctlStartNewGameGalaxyMapsEmpires_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Prebuilt Galaxies") + ": " + TextResolver.GetText("Factions"), TextResolver.GetText("Select a faction to play"));
        }

        private void btnStartNewGameTheGalaxyLoadExistingBrowse_Click(object sender, EventArgs e)
        {
            string value = string.Empty;
            string text = Application.StartupPath + "\\maps\\";
            if (!string.IsNullOrEmpty(main_0.string_3))
            {
                text = Application.StartupPath + "\\Customization\\" + main_0.string_3 + "\\maps\\";
                if (!Directory.Exists(text))
                {
                    text = Application.StartupPath + "\\maps\\";
                }
            }
            if (!Directory.Exists(text))
            {
                text = Main.GetGameSavesFolderCreateIfNeeded();
            }
            if (Directory.Exists(text))
            {
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.InitialDirectory = text;
                openFileDialog.Filter = TextResolver.GetText("Distant Worlds saved game files") + " (*.dwg)|*.dwg";
                openFileDialog.DefaultExt = "dwg";
                openFileDialog.Title = TextResolver.GetText("Select Distant Worlds game as map");
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    value = openFileDialog.FileName;
                }
                openFileDialog.Dispose();
            }
            if (!string.IsNullOrEmpty(value))
            {
                lblStartNewGameTheGalaxyLoadExistingFilepath.Text = value;
            }
            else
            {
                lblStartNewGameTheGalaxyLoadExistingFilepath.Text = "(" + TextResolver.GetText("No Galaxy Map specified") + ")";
            }
        }

        private void btnStartNewGameTheGalaxyLoadExistingClear_Click(object sender, EventArgs e)
        {
            lblStartNewGameTheGalaxyLoadExistingFilepath.Text = "(" + TextResolver.GetText("No Galaxy Map specified") + ")";
        }

        private void btnStartNewGameTheGalaxyLoadExistingBrowse_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Browse for Maps"), TextResolver.GetText("Browse for an existing saved game to use as a galaxy map in your new game"));
        }

        private void btnStartNewGameTheGalaxyLoadExistingClear_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Clear Map"), TextResolver.GetText("Clear saved game as galaxy map and instead use settings at left to generate a new galaxy"));
        }

        private void chkStartNewGameTheGalaxyLoadExistingResources_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Regenerate Resources"), TextResolver.GetText("Clear existing resources from the map and regenerate new resources when starting your new game"));
        }

        private void chkStartNewGameTheGalaxyLoadExistingSceneryResearch_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Regenerate Scenery and Research bonuses"), TextResolver.GetText("Clear existing Scenery and Research bonuses from the map and regenerate new bonuses when starting your new game"));
        }

        private void chkStartNewGameTheGalaxyLoadExistingCreatures_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Regenerate Space Creatures"), TextResolver.GetText("Clear existing Space Creatures from the map and regenerate new Space Creatures when starting your new game"));
        }

        private void IfEoxFyIkN(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Regenerate Ruins"), TextResolver.GetText("Clear existing Ruins from the map and regenerate new Ruins when starting your new game"));
        }

        private void BrXoYtPsoA(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Regenerate Special Locations"), TextResolver.GetText("Clear existing Special Locations from the map and regenerate new Special Locations when starting your new game"));
        }

        private void radJumpStartGalaxyShapeElliptical_CheckedChanged(object sender, EventArgs e)
        {
            method_206(TextResolver.GetText("Elliptical"));
        }

        private void radJumpStartGalaxyShapeSpiral_CheckedChanged(object sender, EventArgs e)
        {
            method_206(TextResolver.GetText("Spiral"));
        }

        private void radJumpStartGalaxyShapeRing_CheckedChanged(object sender, EventArgs e)
        {
            method_206(TextResolver.GetText("Ring"));
        }

        private void radJumpStartGalaxyShapeIrregular_CheckedChanged(object sender, EventArgs e)
        {
            method_206(TextResolver.GetText("Irregular"));
        }

        private void radJumpStartGalaxyShapeEvenClusters_CheckedChanged(object sender, EventArgs e)
        {
            method_206(TextResolver.GetText("Even Clusters"));
        }

        private void radJumpStartGalaxyShapeVariedClusters_CheckedChanged(object sender, EventArgs e)
        {
            method_206(TextResolver.GetText("Varied Clusters"));
        }

        private void radJumpStartGalaxyShapeElliptical_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radJumpStartGalaxyShapeSpiral_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radJumpStartGalaxyShapeRing_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radJumpStartGalaxyShapeIrregular_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radJumpStartGalaxyShapeEvenClusters_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void radJumpStartGalaxyShapeVariedClusters_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Shape"), TextResolver.GetText("Determines the layout and distribution of stars within the galaxy"));
        }

        private void tbarJumpStartTheGalaxyDimensions_ValueChanged(object sender, EventArgs e)
        {
            method_211(bool_5: true);
        }

        private void tbarJumpStartTheGalaxyDimensions_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Physical Size"), TextResolver.GetText("Determines the physical dimensions of the galaxy"));
        }

        private void muloBoAqMA(object sender, EventArgs e)
        {
            method_211(bool_5: true);
        }

        private void tbarJumpStartTheGalaxyStarDensity_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Star Amount"), TextResolver.GetText("Determines how many stars are in the galaxy"));
        }

        private void tbarJumpStartTheGalaxyDifficulty_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Difficulty"), TextResolver.GetText("Determines difficulty and aggression of gameplay"));
        }

        private void chkJumpStartTheGalaxyDifficultyScaling_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("The Galaxy") + ": " + TextResolver.GetText("Difficulty Scaling"), TextResolver.GetText("Difficulty Scaling Description"));
        }

        private void cmbJumpStartYourEmpireRace_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Race") + ": " + TextResolver.GetText("Race"), TextResolver.GetText("The dominant race at your empire's home colony"));
        }

        private void lnkJumpStartYourEmpireRace_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Race selectedRace = cmbJumpStartYourEmpireRace.SelectedRace;
            if (selectedRace == null)
            {
                method_127(TextResolver.GetText("Alien Races"));
            }
            else
            {
                method_127(selectedRace.Name);
            }
        }

        private void cmbJumpStartYourEmpireGovernment_SelectedIndexChanged(object sender, EventArgs e)
        {
            int selectedGovernmentId = cmbJumpStartYourEmpireGovernment.SelectedGovernmentId;
            method_208(selectedGovernmentId, bool_5: true);
        }

        private void cmbJumpStartYourEmpireGovernment_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Government"), TextResolver.GetText("The form of government that your empire follows"));
        }

        private void lnkJumpStartYourEmpireGovernment_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            int selectedGovernmentId = cmbJumpStartYourEmpireGovernment.SelectedGovernmentId;
            GovernmentAttributes governmentAttributes = null;
            if (selectedGovernmentId >= 0 && selectedGovernmentId < Galaxy.GovernmentsStatic.Count)
            {
                governmentAttributes = Galaxy.GovernmentsStatic[selectedGovernmentId];
            }
            if (governmentAttributes == null)
            {
                method_127(TextResolver.GetText("Government Types"));
            }
            else
            {
                method_127(governmentAttributes.Name);
            }
        }

        private void cmbJumpStartYourEmpireRace_SelectedIndexChanged(object sender, EventArgs e)
        {
            string empty = string.Empty;
            Race selectedRace = cmbJumpStartYourEmpireRace.SelectedRace;
            RaceSummary summary = null;
            if (selectedRace == null)
            {
                empty = "(" + TextResolver.GetText("Random") + ")";
                _ = "(" + TextResolver.GetText("Race randomly selected") + ")";
                lnkJumpStartYourEmpireRace.Visible = false;
            }
            else
            {
                empty = selectedRace.Name;
                summary = Galaxy.GenerateRaceSummary(selectedRace);
                lnkJumpStartYourEmpireRace.Visible = true;
            }
            IdyEbrKpy3(selectedRace, bool_5: true);
            if (selectedRace != null && selectedRace.DefaultPiratePlaystyle != 0)
            {
                method_207(selectedRace.DefaultPiratePlaystyle, bool_5: true);
                method_101(selectedRace.DefaultPiratePlaystyle, bool_5: true);
            }
            else
            {
                method_207(PiratePlayStyle.Balanced, bool_5: true);
                method_101(PiratePlayStyle.Balanced, bool_5: true);
            }
            lblJumpStartYourEmpireRaceTitle.Text = TextResolver.GetText("Your Race") + ": " + empty;
            lblJumpStartYourEmpireRaceName.Visible = true;
            lblJumpStartYourEmpireRaceName.Font = font_9;
            lblJumpStartYourEmpireRaceName.Text = empty;
            Bitmap bitmap = (Bitmap)picJumpStartYourEmpireRace.Image;
            Bitmap image = main_0.method_118(null, selectedRace, picJumpStartYourEmpireRace.Width, picJumpStartYourEmpireRace.Height, main_0.bitmap_31, 6, bool_28: false);
            picJumpStartYourEmpireRace.Image = image;
            if (bitmap != null && bitmap.PixelFormat != 0)
            {
                bitmap.Dispose();
            }
            pnlJumpStartYourEmpireRaceAttributes.BindData(summary, font_3, font_7);
            pnlJumpStartYourEmpireRaceAttributesContainer.AutoScrollPosition = new Point(0, 0);
        }

        private void cmbJumpStartVictoryPiratePlayStyle_SelectedIndexChanged(object sender, EventArgs e)
        {
            PiratePlayStyle piratePlayStyle_ = PiratePlayStyle.Balanced;
            switch (cmbJumpStartVictoryPiratePlayStyle.SelectedIndex)
            {
                case 0:
                    piratePlayStyle_ = PiratePlayStyle.Balanced;
                    break;
                case 1:
                    piratePlayStyle_ = PiratePlayStyle.Pirate;
                    break;
                case 2:
                    piratePlayStyle_ = PiratePlayStyle.Mercenary;
                    break;
                case 3:
                    piratePlayStyle_ = PiratePlayStyle.Smuggler;
                    break;
            }
            method_101(piratePlayStyle_, bool_5: true);
        }

        private void cmbJumpStartVictoryPiratePlayStyle_Enter(object sender, EventArgs e)
        {
            method_100(TextResolver.GetText("Your Empire") + ": " + TextResolver.GetText("Pirate Playstyle"), TextResolver.GetText("Determines the play focus and pirate victory conditions for your pirate empire"));
        }

        private void btnStartNewGameYourEmpireTypeNormalClassic_Click(object sender, EventArgs e)
        {
            wjhRtsSwmsa = "CustomStandard";
            bool_2 = false;
            bool_3 = false;
            method_45(bool_2);
            method_40(bool_5: false);
            cmbPrimaryColor.Ignite(allowWhite: false, allowBlack: false, useDarkerPalette: false, Color.Empty);
            method_204(bool_2);
            method_222(main_0.gameOptions_0.StartGameOptions);
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameTheGalaxy.Visible = true;
            pnlStartNewGameTheGalaxy.BringToFront();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: The Galaxy");
            if (radStartNewGameGalaxyShapeElliptical.Checked)
            {
                radStartNewGameGalaxyShapeElliptical.Focus();
            }
            else if (radStartNewGameGalaxyShapeSpiral.Checked)
            {
                radStartNewGameGalaxyShapeSpiral.Focus();
            }
            else if (radStartNewGameGalaxyShapeRing.Checked)
            {
                radStartNewGameGalaxyShapeRing.Focus();
            }
            else if (radStartNewGameGalaxyShapeIrregular.Checked)
            {
                radStartNewGameGalaxyShapeIrregular.Focus();
            }
            else if (radStartNewGameGalaxyShapeClustersEven.Checked)
            {
                radStartNewGameGalaxyShapeClustersEven.Focus();
            }
            else if (radStartNewGameGalaxyShapeClustersVaried.Checked)
            {
                radStartNewGameGalaxyShapeClustersVaried.Focus();
            }
        }

        private void nVkoJxpyvO(object sender, EventArgs e)
        {
            wjhRtsSwmsa = "CustomPirate";
            bool_2 = true;
            bool_3 = false;
            method_45(bool_2);
            method_40(bool_5: false);
            cmbPrimaryColor.Ignite(allowWhite: false, allowBlack: true, useDarkerPalette: true, Color.Empty);
            method_204(bool_2);
            method_222(main_0.gameOptions_0.StartGameOptions);
            if (bool_2 && tbarStartNewGameYourEmpireTechLevel.Value == 0)
            {
                tbarStartNewGameYourEmpireTechLevel.Value = 1;
            }
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameTheGalaxy.Visible = true;
            pnlStartNewGameTheGalaxy.BringToFront();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: The Galaxy");
            if (radStartNewGameGalaxyShapeElliptical.Checked)
            {
                radStartNewGameGalaxyShapeElliptical.Focus();
            }
            else if (radStartNewGameGalaxyShapeSpiral.Checked)
            {
                radStartNewGameGalaxyShapeSpiral.Focus();
            }
            else if (radStartNewGameGalaxyShapeRing.Checked)
            {
                radStartNewGameGalaxyShapeRing.Focus();
            }
            else if (radStartNewGameGalaxyShapeIrregular.Checked)
            {
                radStartNewGameGalaxyShapeIrregular.Focus();
            }
            else if (radStartNewGameGalaxyShapeClustersEven.Checked)
            {
                radStartNewGameGalaxyShapeClustersEven.Focus();
            }
            else if (radStartNewGameGalaxyShapeClustersVaried.Checked)
            {
                radStartNewGameGalaxyShapeClustersVaried.Focus();
            }
        }

        private void btnStartNewGameYourEmpireTypeNormalShadows_Click(object sender, EventArgs e)
        {
            wjhRtsSwmsa = "ShadowsStandard";
            bool_2 = false;
            bool_3 = true;
            method_35();
            cmbPrimaryColor.Ignite(allowWhite: false, allowBlack: false, useDarkerPalette: false, Color.Empty);
            method_204(bool_2);
            method_222(main_0.gameOptions_0.StartGameOptions);
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameJumpStart.Visible = true;
            pnlStartNewGameJumpStart.BringToFront();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Galaxy, Race, Government, Difficulty");
            if (radJumpStartGalaxyShapeElliptical.Checked)
            {
                radJumpStartGalaxyShapeElliptical.Focus();
            }
            else if (radJumpStartGalaxyShapeSpiral.Checked)
            {
                radJumpStartGalaxyShapeSpiral.Focus();
            }
            else if (radJumpStartGalaxyShapeRing.Checked)
            {
                radJumpStartGalaxyShapeRing.Focus();
            }
            else if (radJumpStartGalaxyShapeIrregular.Checked)
            {
                radJumpStartGalaxyShapeIrregular.Focus();
            }
            else if (radJumpStartGalaxyShapeEvenClusters.Checked)
            {
                radJumpStartGalaxyShapeEvenClusters.Focus();
            }
            else if (radJumpStartGalaxyShapeVariedClusters.Checked)
            {
                radJumpStartGalaxyShapeVariedClusters.Focus();
            }
        }

        private void method_222(StartGameOptions startGameOptions_0)
        {
            tbarJumpStartTheGalaxyStarDensity.Value = startGameOptions_0.GalaxySize;
            tbarJumpStartTheGalaxyDimensions.Value = startGameOptions_0.GalaxyDimensions;
            tbarJumpStartTheGalaxyDifficulty.Value = startGameOptions_0.GalaxyDifficulty;
            chkJumpStartTheGalaxyDifficultyScaling.Checked = startGameOptions_0.GalaxyDifficultyScaling;
            if (startGameOptions_0.YourEmpireRace >= 0 && startGameOptions_0.YourEmpireRace < cmbJumpStartYourEmpireRace.Items.Count)
            {
                cmbJumpStartYourEmpireRace.SelectedIndex = startGameOptions_0.YourEmpireRace;
            }
            cmbJumpStartYourEmpireGovernment.SetSelectedGovernmentStyle(startGameOptions_0.YourEmpireGovernmentStyle);
            cmbJumpStartVictoryPiratePlayStyle.SelectedIndex = startGameOptions_0.PiratePlayStyle;
            tbarStartNewGameTheGalaxyStarDensity.Value = startGameOptions_0.GalaxySize;
            tbarStartNewGameTheGalaxyDimensions.Value = startGameOptions_0.GalaxyDimensions;
            tbarStartNewGameTheGalaxyDifficulty.Value = startGameOptions_0.GalaxyDifficulty;
            chkStartNewGameTheGalaxyDifficultyScaling.Checked = startGameOptions_0.GalaxyDifficultyScaling;
            if (startGameOptions_0.YourEmpireRace >= 0 && startGameOptions_0.YourEmpireRace < cmbStartNewGameYourEmpireRace.Items.Count)
            {
                cmbStartNewGameYourEmpireRace.SelectedIndex = startGameOptions_0.YourEmpireRace;
            }
            cmbStartNewGameYourEmpireGovernment.SetSelectedGovernmentStyle(startGameOptions_0.YourEmpireGovernmentStyle);
            cmbVictoryPiratePlayStyle.SelectedIndex = startGameOptions_0.PiratePlayStyle;
        }

        private void btnStartNewGameYourEmpireTypePirateShadows_Click(object sender, EventArgs e)
        {
            wjhRtsSwmsa = "ShadowsPirate";
            bool_2 = true;
            bool_3 = true;
            method_35();
            cmbPrimaryColor.Ignite(allowWhite: false, allowBlack: false, useDarkerPalette: false, Color.Empty);
            method_204(bool_2);
            method_222(main_0.gameOptions_0.StartGameOptions);
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameJumpStart.Visible = true;
            pnlStartNewGameJumpStart.BringToFront();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Galaxy, Race, Government, Difficulty");
            if (radJumpStartGalaxyShapeElliptical.Checked)
            {
                radJumpStartGalaxyShapeElliptical.Focus();
            }
            else if (radJumpStartGalaxyShapeSpiral.Checked)
            {
                radJumpStartGalaxyShapeSpiral.Focus();
            }
            else if (radJumpStartGalaxyShapeRing.Checked)
            {
                radJumpStartGalaxyShapeRing.Focus();
            }
            else if (radJumpStartGalaxyShapeIrregular.Checked)
            {
                radJumpStartGalaxyShapeIrregular.Focus();
            }
            else if (radJumpStartGalaxyShapeEvenClusters.Checked)
            {
                radJumpStartGalaxyShapeEvenClusters.Focus();
            }
            else if (radJumpStartGalaxyShapeVariedClusters.Checked)
            {
                radJumpStartGalaxyShapeVariedClusters.Focus();
            }
        }

        private void btnStartNewGameIntroductory_Click(object sender, EventArgs e)
        {
            bool_2 = false;
            bool_3 = false;
            GalaxyShape galaxyShape = GalaxyShape.Elliptical;
            bool flag = true;
            EmpireVictoryConditions item = null;
            EmpireVictoryConditions item2 = null;
            bool flag2 = false;
            int num = 1;
            Random random = new Random((int)DateTime.Now.Ticks);
            int num2 = 700;
            int num3 = 20;
            int num4 = random.Next(15, 20);
            EmpireStartList empireStartList = new EmpireStartList();
            EmpireStart empireStart = method_112(null, empireStartList, TextResolver.GetText("Starting"), TextResolver.GetText("Normal"), random);
            empireStart.HomeSystemFavourability = TextResolver.GetText("Agreeable");
            empireStart.DifficultyLevel = method_201(0);
            for (int i = 0; i < num4; i++)
            {
                EmpireStart item3 = method_112(empireStart, empireStartList, TextResolver.GetText("Starting"), TextResolver.GetText("Normal"), random);
                empireStartList.Add(item3);
            }
            double num5 = meEawywtba(2);
            double num6 = 1.1;
            VictoryConditions victoryConditions = method_106(num3);
            victoryConditions.EnableStoryEvents = true;
            victoryConditions.EnableRaceSpecificEvents = true;
            victoryConditions.EnableRaceSpecificVictoryConditions = true;
            double num7 = 1.0;
            double num8 = 0.3;
            double num9 = 0.2;
            string string_ = TextResolver.GetText("Starting");
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num2);
            list.Add(num3);
            list.Add(flag);
            list.Add(num7);
            list.Add(700);
            list.Add(num8);
            list.Add(num9);
            list.Add(num5);
            list.Add(method_57(string_));
            list.Add(num6);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(victoryConditions);
            list.Add(item);
            list.Add(item2);
            list.Add(flag2);
            list.Add(num);
            list.Add(double_0);
            list.Add(true);
            list.Add(null);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            method_46();
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
            }
        }

        private void btnStartNewGameYourEmpireTypeClassicEra_Click(object sender, EventArgs e)
        {
            wjhRtsSwmsa = "ClassicEra";
            bool_2 = false;
            bool_3 = false;
            method_35();
            cmbPrimaryColor.Ignite(allowWhite: false, allowBlack: false, useDarkerPalette: false, Color.Empty);
            method_204(bool_2);
            method_222(main_0.gameOptions_0.StartGameOptions);
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameJumpStart.Visible = true;
            pnlStartNewGameJumpStart.BringToFront();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Galaxy, Race, Government, Difficulty");
            if (radJumpStartGalaxyShapeElliptical.Checked)
            {
                radJumpStartGalaxyShapeElliptical.Focus();
            }
            else if (radJumpStartGalaxyShapeSpiral.Checked)
            {
                radJumpStartGalaxyShapeSpiral.Focus();
            }
            else if (radJumpStartGalaxyShapeRing.Checked)
            {
                radJumpStartGalaxyShapeRing.Focus();
            }
            else if (radJumpStartGalaxyShapeIrregular.Checked)
            {
                radJumpStartGalaxyShapeIrregular.Focus();
            }
            else if (radJumpStartGalaxyShapeEvenClusters.Checked)
            {
                radJumpStartGalaxyShapeEvenClusters.Focus();
            }
            else if (radJumpStartGalaxyShapeVariedClusters.Checked)
            {
                radJumpStartGalaxyShapeVariedClusters.Focus();
            }
        }

        private void btnStartNewGameYourEmpireTypeReturnOfTheShakturi_Click(object sender, EventArgs e)
        {
            wjhRtsSwmsa = "ReturnOfTheShakturi";
            bool_2 = false;
            bool_3 = false;
            method_35();
            cmbPrimaryColor.Ignite(allowWhite: false, allowBlack: false, useDarkerPalette: false, Color.Empty);
            method_204(bool_2);
            method_222(main_0.gameOptions_0.StartGameOptions);
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameJumpStart.Visible = true;
            pnlStartNewGameJumpStart.BringToFront();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Galaxy, Race, Government, Difficulty");
            if (radJumpStartGalaxyShapeElliptical.Checked)
            {
                radJumpStartGalaxyShapeElliptical.Focus();
            }
            else if (radJumpStartGalaxyShapeSpiral.Checked)
            {
                radJumpStartGalaxyShapeSpiral.Focus();
            }
            else if (radJumpStartGalaxyShapeRing.Checked)
            {
                radJumpStartGalaxyShapeRing.Focus();
            }
            else if (radJumpStartGalaxyShapeIrregular.Checked)
            {
                radJumpStartGalaxyShapeIrregular.Focus();
            }
            else if (radJumpStartGalaxyShapeEvenClusters.Checked)
            {
                radJumpStartGalaxyShapeEvenClusters.Focus();
            }
            else if (radJumpStartGalaxyShapeVariedClusters.Checked)
            {
                radJumpStartGalaxyShapeVariedClusters.Focus();
            }
        }

        private void btnStartNewGameYourEmpireTypeLegends_Click(object sender, EventArgs e)
        {
            wjhRtsSwmsa = "Legends";
            bool_2 = false;
            bool_3 = false;
            method_35();
            cmbPrimaryColor.Ignite(allowWhite: false, allowBlack: false, useDarkerPalette: false, Color.Empty);
            method_204(bool_2);
            method_222(main_0.gameOptions_0.StartGameOptions);
            pnlStartNewGameYourEmpireType.Visible = false;
            pnlStartNewGameJumpStart.Visible = true;
            pnlStartNewGameJumpStart.BringToFront();
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Galaxy, Race, Government, Difficulty");
            if (radJumpStartGalaxyShapeElliptical.Checked)
            {
                radJumpStartGalaxyShapeElliptical.Focus();
            }
            else if (radJumpStartGalaxyShapeSpiral.Checked)
            {
                radJumpStartGalaxyShapeSpiral.Focus();
            }
            else if (radJumpStartGalaxyShapeRing.Checked)
            {
                radJumpStartGalaxyShapeRing.Focus();
            }
            else if (radJumpStartGalaxyShapeIrregular.Checked)
            {
                radJumpStartGalaxyShapeIrregular.Focus();
            }
            else if (radJumpStartGalaxyShapeEvenClusters.Checked)
            {
                radJumpStartGalaxyShapeEvenClusters.Focus();
            }
            else if (radJumpStartGalaxyShapeVariedClusters.Checked)
            {
                radJumpStartGalaxyShapeVariedClusters.Focus();
            }
        }

        private void method_223(object object_0)
        {
            if (object_0 is object[])
            {
                object[] array = (object[])object_0;
                if (array.Length == 3)
                {
                    string string_ = (string)array[0];
                    bool bool_ = (bool)array[1];
                    bool bool_2 = (bool)array[2];
                    bool_0 = false;
                    method_2(string_, bool_, bool_2);
                    bool_0 = true;
                }
            }
        }

        private void btnStartNewGameYourEmpireTypeTheAncientGalaxy_Click(object sender, EventArgs e)
        {
            if (main_0.string_3 != "The Ancient Galaxy")
            {
                base.Enabled = false;
                Application.UseWaitCursor = true;
                Thread thread = new Thread(method_223);
                thread.Start(new object[3] { "The Ancient Galaxy", true, true });
                Application.DoEvents();
                method_8(TextResolver.GetText("Switching to The Ancient Galaxy theme"));
                Application.DoEvents();
                method_10();
            }
            if (galaxySummaryList_0 != null && galaxySummaryList_0.Count > 0)
            {
                method_221(galaxySummaryList_0[0], null);
            }
        }

        private void btnJumpStartTheGalaxyPrevious_Click(object sender, EventArgs e)
        {
            pnlStartNewGameJumpStart.Visible = false;
            pnlStartNewGameYourEmpireType.Visible = true;
            pnlNewGame.HeaderTitle = TextResolver.GetText("Start a New Game: Playstyle");
            btnStartNewGameYourEmpireTypeNormalShadows.Focus();
            pnlStartNewGameYourEmpireType.BringToFront();
            lblHelpTitle.Text = string.Empty;
            lblHelpDescription.Text = string.Empty;
        }

        private void btnJumpStartTheGalaxyNext_Click(object sender, EventArgs e)
        {
            main_0.gameOptions_0.StartGameOptions = method_194();
            main_0.YxwyUefOyQ();
            main_0.method_257();
            method_46();
            Random random_ = new Random((int)DateTime.Now.Ticks);
            GalaxyShape galaxyShape = method_59(method_97());
            int num = method_60(tbarJumpStartTheGalaxyStarDensity.Value);
            int num2 = method_61(tbarJumpStartTheGalaxyStarDensity.Value, raceList_0);
            bool flag = true;
            double num3 = method_64(2);
            int num4 = method_67(2);
            double num5 = method_62(2);
            double num6 = method_66(3);
            int num7 = 1;
            double num8 = 120000.0;
            double num9 = method_71(1);
            int num10 = 1;
            if (bool_3)
            {
                num10 = 0;
            }
            string string_ = method_58(num10);
            EmpireStart empireStart = new EmpireStart();
            empireStart.Name = string.Empty;
            Race selectedRace = cmbJumpStartYourEmpireRace.SelectedRace;
            if (selectedRace != null)
            {
                empireStart.Race = selectedRace.Name;
            }
            else
            {
                empireStart.Race = "(" + TextResolver.GetText("Random") + ")";
            }
            empireStart.GovernmentStyle = method_73();
            empireStart.StartLocation = cmbYourEmpireStartLocation.SelectedItem.ToString();
            empireStart.HomeSystemFavourability = TextResolver.GetText("Normal");
            string text = TextResolver.GetText("Starting");
            if (text == TextResolver.GetText("Starting") && num10 == 0)
            {
                text = TextResolver.GetText("PreWarp");
            }
            empireStart.Age = method_57(text);
            empireStart.TechLevel = method_54(TextResolver.GetText("Normal"));
            if (bool_3 && !bool_2)
            {
                empireStart.TechLevel = method_54(TextResolver.GetText("PreWarp"));
            }
            if (selectedRace != null)
            {
                empireStart.PrimaryColor = selectedRace.DefaultMainColor;
                empireStart.SecondaryColor = selectedRace.DefaultSecondaryColor;
                empireStart.FlagShape = selectedRace.DefaultFlagShape;
            }
            empireStart.CorruptionMultiplier = method_63(1);
            empireStart.PiratePlayStyle = method_192();
            empireStart.PirateShipMaintenanceFactor = 0.4;
            empireStart.AllowTechTrading = true;
            empireStart.AllowGiantKaltorGeneration = true;
            empireStart.DifficultyLevel = method_201(tbarJumpStartTheGalaxyDifficulty.Value);
            empireStart.DifficultyScaling = chkJumpStartTheGalaxyDifficultyScaling.Checked;
            empireStart.DestroyedPiratesDoNotRespawn = false;
            Size size = method_69(tbarJumpStartTheGalaxyDimensions.Value);
            empireStart.GalaxySectorX = size.Width;
            empireStart.GalaxySectorY = size.Height;
            float num11 = (empireStart.EmpireTerritoryColonyInfluenceRangeFactor = (float)method_189(num, size.Width, size.Height));
            empireStart.ColonizationRangeEnforceLimit = true;
            empireStart.ColonizationRange = 2f * (float)Galaxy.SectorSize;
            EmpireStartList empireStartList = new EmpireStartList();
            int num12 = num2;
            for (int i = 0; i < num12; i++)
            {
                EmpireStart empireStart2 = new EmpireStart();
                empireStart2.Name = string.Empty;
                empireStart2.GovernmentStyle = "(" + TextResolver.GetText("Random") + ")";
                empireStart2.ProximityDistance = "(" + TextResolver.GetText("Random") + ")";
                empireStart2.HomeSystemFavourability = TextResolver.GetText("Normal");
                string string_2 = method_109(string_, random_);
                empireStart2.Age = method_57(string_2);
                empireStart2.TechLevel = method_89(num10);
                empireStart2.Race = "(" + TextResolver.GetText("Random") + ")";
                empireStartList.Add(empireStart2);
            }
            empireStartList = method_200(empireStartList, tbarJumpStartTheGalaxyDifficulty.Value, bool_5: false);
            long startStarDate = Galaxy.StartStarDate;
            startStarDate += num10 * 30000000;
            VictoryConditions victoryConditions = new VictoryConditions();
            victoryConditions.Economy = true;
            victoryConditions.EconomyPercent = 33.0;
            victoryConditions.Population = true;
            victoryConditions.PopulationPercent = 33.0;
            victoryConditions.Territory = true;
            victoryConditions.TerritoryPercent = 33.0;
            victoryConditions.TimeLimit = false;
            victoryConditions.TimeLimitDate = 0L;
            victoryConditions.StartDate = startStarDate + 10 * Galaxy.RealSecondsInGalacticYear * 1000;
            victoryConditions.VictoryThresholdPercentage = 0.8;
            bool flag2 = false;
            switch (wjhRtsSwmsa)
            {
                case "Legends":
                    victoryConditions.EnableStoryEventsShadows = false;
                    flag2 = true;
                    victoryConditions.EnableStoryEvents = true;
                    victoryConditions.EnableDisasterEvents = true;
                    victoryConditions.EnableRaceSpecificEvents = true;
                    victoryConditions.EnableRaceSpecificVictoryConditions = true;
                    break;
                case "ReturnOfTheShakturi":
                    victoryConditions.EnableStoryEventsShadows = false;
                    flag2 = true;
                    victoryConditions.EnableStoryEvents = true;
                    victoryConditions.EnableDisasterEvents = false;
                    victoryConditions.EnableRaceSpecificEvents = false;
                    victoryConditions.EnableRaceSpecificVictoryConditions = false;
                    break;
                case "ClassicEra":
                    victoryConditions.EnableStoryEventsShadows = false;
                    flag2 = true;
                    victoryConditions.EnableStoryEvents = false;
                    victoryConditions.EnableDisasterEvents = false;
                    victoryConditions.EnableRaceSpecificEvents = false;
                    victoryConditions.EnableRaceSpecificVictoryConditions = false;
                    break;
                case "ShadowsPirate":
                    victoryConditions.EnableStoryEventsShadows = true;
                    flag2 = false;
                    victoryConditions.EnableStoryEvents = false;
                    victoryConditions.EnableDisasterEvents = true;
                    victoryConditions.EnableRaceSpecificEvents = true;
                    victoryConditions.EnableRaceSpecificVictoryConditions = true;
                    num6 = method_66(4);
                    num7 = 1;
                    num3 = method_64(3);
                    num4 = method_67(3);
                    num9 = method_71(2);
                    break;
                case "ShadowsStandard":
                    victoryConditions.EnableStoryEventsShadows = true;
                    flag2 = false;
                    victoryConditions.EnableStoryEvents = true;
                    victoryConditions.EnableDisasterEvents = true;
                    victoryConditions.EnableRaceSpecificEvents = true;
                    victoryConditions.EnableRaceSpecificVictoryConditions = true;
                    num6 = method_66(4);
                    num7 = 0;
                    num3 = method_64(3);
                    num4 = method_67(3);
                    num9 = method_71(2);
                    break;
            }
            string customizationSetName = string.Empty;
            if (main_0.gameOptions_0 != null)
            {
                customizationSetName = main_0.gameOptions_0.CustomizationSetName;
            }
            RaceList raceList = Galaxy.LoadRaces(Application.StartupPath, customizationSetName);
            raceList = raceList.ResolvePlayableRaces();
            string string_3 = string.Empty;
            if (selectedRace != null)
            {
                string_3 = selectedRace.Name;
            }
            empireStartList = method_104(empireStartList, raceList, num9, string_3);
            GameStartResets item = new GameStartResets();
            List<object> list = new List<object>();
            list.Add(galaxyShape);
            list.Add(num);
            list.Add(num2);
            list.Add(flag);
            list.Add(num3);
            list.Add(num4);
            list.Add(num5);
            list.Add(num6);
            list.Add(num8);
            list.Add(num10);
            list.Add(num9);
            list.Add(empireStart);
            list.Add(empireStartList);
            list.Add(victoryConditions);
            list.Add(null);
            list.Add(null);
            list.Add(false);
            list.Add(num7);
            list.Add(double_0);
            list.Add(flag2);
            list.Add(item);
            method_8(TextResolver.GetText("Creating new Galaxy..."));
            base.Enabled = false;
            Cursor.Current = Cursors.WaitCursor;
            Application.DoEvents();
            oyxRtRyAwjg.RunWorkerAsync(list);
            Cursor.Current = Cursors.WaitCursor;
            while (oyxRtRyAwjg.IsBusy)
            {
                Application.DoEvents();
                Cursor.Current = Cursors.WaitCursor;
                Thread.Sleep(30);
            }
            Cursor.Current = Cursors.Default;
            if (game_0 != null)
            {
                method_77(game_0);
                return;
            }
            Cursor.Current = Cursors.Default;
            method_9();
            method_46();
            method_25();
            base.Enabled = true;
            Show();
            main_0.Visible = false;
        }

        private void menuTutorials_Click(object sender, EventArgs e)
        {
            method_119();
        }

        private void menuStartNewGame_Click(object sender, EventArgs e)
        {
            method_31("");
        }

        private void menuLoadGame_Click(object sender, EventArgs e)
        {
            try
            {
                new Game();
                string empty = string.Empty;
                bool flag = false;
                string text = Main.GetGameSavesFolderCreateIfNeeded();
                if (main_0 != null && main_0.gameOptions_0 != null && !string.IsNullOrEmpty(main_0.gameOptions_0.SaveGamePath))
                {
                    text = main_0.gameOptions_0.SaveGamePath;
                }
                if (!Directory.Exists(text))
                {
                    Directory.CreateDirectory(text);
                }
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.InitialDirectory = text;
                openFileDialog.Filter = TextResolver.GetText("Distant Worlds saved game files") + " (*.dwg)|*.dwg";
                openFileDialog.DefaultExt = "dwg";
                openFileDialog.Title = TextResolver.GetText("Load Distant Worlds game");
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    flag = true;
                }
                if (flag)
                {
                    Stream stream_;
                    if ((stream_ = openFileDialog.OpenFile()) != null)
                    {
                        method_140();
                        empty = openFileDialog.FileName;
                        if (main_0 != null && main_0.gameOptions_0 != null)
                        {
                            DirectoryInfo directoryInfo = Directory.GetParent(empty);
                            if (directoryInfo != null)
                            {
                                main_0.gameOptions_0.SaveGamePath = directoryInfo.FullName;
                            }
                        }
                        openFileDialog.Dispose();
                        method_22(stream_, empty, TextResolver.GetText("Loading the Galaxy..."));
                    }
                    else
                    {
                        flag = false;
                        openFileDialog.Dispose();
                    }
                }
                else
                {
                    openFileDialog.Dispose();
                }
                if (!flag)
                {
                    Application.UseWaitCursor = false;
                    method_9();
                }
                else
                {
                    method_10();
                    Application.UseWaitCursor = false;
                    method_23();
                }
            }
            catch (Exception ex)
            {
                Main.CrashDump(ex);
                throw;
            }
        }

        private void menuOptions_Click(object sender, EventArgs e)
        {
            method_153();
        }

        private void menuChangeTheme_Click(object sender, EventArgs e)
        {
            if (!pnlThemes.Visible)
            {
                method_26();
            }
        }

        private void menuExit_Click(object sender, EventArgs e)
        {
            method_140();
            if (main_0.musicPlayer_0 != null && main_0.musicPlayer_1 != null)
            {
                main_0.musicPlayer_0.Stop();
                main_0.musicPlayer_1.Stop();
            }
            string filename = Main.GetGameFilesFolderCreateIfNeeded() + "automationPrefs";
            MessageBoxExManager.WriteSavedResponses(filename);
            if (main_0 != null)
            {
                main_0.method_257();
                main_0.method_255();
            }
            ToggleScreenSaverActive(active: true);
            if (!main_0.bool_2)
            {
                main_0.method_374();
            }
            Environment.Exit(-1);
        }

        private void Start_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = PointToScreen(e.Location);
            method_224(point_);
        }

        private void method_224(Point point_0)
        {
            bool stateChanged = false;
            Point parentScreenLocation = menuGroup.PointToScreen(menuGroup.Location);
            menuGroup.CheckHoverState(point_0, parentScreenLocation, out stateChanged);
            if (stateChanged)
            {
                menuGroup.Invalidate();
            }
            menuGalactopedia.CheckHoverState(PointToClient(MouseHelper.GetCursorPosition()), pnlTopLeftCorner.Location);
            menuCheckForUpdates.CheckHoverState(PointToClient(MouseHelper.GetCursorPosition()), pnlBottomLeftCorner.Location);
            menuCredits.CheckHoverState(PointToClient(MouseHelper.GetCursorPosition()), new Point(0, 0));
        }

        private void menuGroup_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuGroup.PointToScreen(e.Location);
            method_224(point_);
        }

        private void pnlButtons_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = pnlButtons.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuTutorials_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuTutorials.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuStartNewGame_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuStartNewGame.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuLoadGame_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuLoadGame.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuOptions_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuOptions.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuChangeTheme_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuChangeTheme.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuExit_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuExit.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuGalactopedia_Click(object sender, EventArgs e)
        {
            method_127("");
        }

        private void menuCheckForUpdates_Click(object sender, EventArgs e)
        {
            string text = "http://www.codeforce.co.nz/dwuniverse_versioncheck.asp";
            text = text + "?version=" + Application.ProductVersion;
            Process.Start(text);
        }

        private void menuCredits_Click(object sender, EventArgs e)
        {
            menuCredits.Visible = false;
            Update();
            if (!pnlAboutCredits.Visible)
            {
                method_138();
            }
        }

        private void menuGalactopedia_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuGalactopedia.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuCheckForUpdates_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuCheckForUpdates.PointToScreen(e.Location);
            method_224(point_);
        }

        private void menuCredits_MouseMove(object sender, MouseEventArgs e)
        {
            Point point_ = menuCredits.PointToScreen(e.Location);
            method_224(point_);
        }
    }
}
