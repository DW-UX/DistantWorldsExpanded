// Decompiled with JetBrains decompiler
// Type: DistantWorlds.Types.Empire
// Assembly: DistantWorlds.Types, Version=1.9.5.12, Culture=neutral, PublicKeyToken=null
// MVID: C87DBA0E-BD3A-46BA-A8F0-EE9F5E5721E2
// Assembly location: H:\7\DistantWorlds.Types.dll

using BaconDistantWorlds;

using DistantWorlds.Types.Properties;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;

namespace DistantWorlds.Types
{
    [Serializable]
    public class Empire : IComparable<Empire>
    {
        public object _LockObject = new object();

        public Galaxy _Galaxy;

        private bool _Active;

        private int _EmpireId;

        private IMessageRecipient _MessageRecipient;

        private IAutomationAuthorizer _AutomationAuthorizer;

        private AutomationResponse _AutomationResponse;

        private IEventMessageRecipient _EventMessageRecipient;

        public string Description = string.Empty;

        public bool PlayableInScenario;

        public DesignList _Designs;

        private DesignList _ForeignDesigns;

        private Design _MonitoringStationCurrentDesign;

        private Design _WeaponsResearchStation;

        private Design _EnergyResearchStation;

        private Design _HighTechResearchStation;

        [OptionalField]
        private Design _DefenseBaseDesign;

        public DesignList _LatestDesigns;

        [NonSerialized]
        public double BuildFactor = 1.0;

        [OptionalField]
        public bool Reclusive;

        [OptionalField]
        public double CorruptionMultiplier = 1.0;

        [OptionalField]
        public double Corruption;

        public double ColonyRevenueDivisor = Galaxy.ColonyRevenueDivisor;

        private IntelligenceMissionList _IntelligenceMissions;

        private BuiltObjectList _Outlaws;

        private DiplomaticRelationList _ProposedDiplomaticRelations;

        private EmpireMessageList _Messages;

        private EmpireMessageList _MessageHistory = new EmpireMessageList();

        private int _MaximumHistoryMessages = 1000;

        private object _MessageHistoryLock = new object();

        private ResearchSystem _Research = new ResearchSystem();

        private GalaxyResourceMap _ResourceMap = new GalaxyResourceMap();

        private HabitatList _SystemsVisible = new HabitatList();

        private EmpireCounters _Counters;

        [OptionalField]
        public AchievementList Achievements = new AchievementList();

        private PirateEconomy _PirateEconomy;

        public RaceEventType RaceEventType;

        public long RaceEventEndDate;

        [NonSerialized]
        public object RaceEventData;

        private bool _EncounteredSilverMistCreature;

        private DistressSignalList _DistressSignals;

        [NonSerialized]
        private HabitatList _DangerousHabitats = new HabitatList();

        [NonSerialized]
        private HabitatPrioritizationList _ColonizationTargets = new HabitatPrioritizationList();

        [NonSerialized]
        private HabitatPrioritizationList _ResourceTargets = new HabitatPrioritizationList();

        [NonSerialized]
        private HabitatPrioritizationList _EmpireResourceTargets = new HabitatPrioritizationList();

        private HabitatPrioritizationList _IndependentColonyTargets = new HabitatPrioritizationList();

        private ResourceList _UnavailableLuxuryResources = new ResourceList();

        [OptionalField]
        private ResourceList _SelfSuppliedLuxuryResources = new ResourceList();

        [NonSerialized]
        private HabitatPrioritizationList _DesiredForeignColonies = new HabitatPrioritizationList();

        [NonSerialized]
        private EmpireList _EmpiresWithDesiredColonies = new EmpireList();

        private EmpireList _EmpiresToAttack = new EmpireList();

        private EmpireList _EmpiresViewable = new EmpireList();

        private List<long> _EmpiresViewableExpiry = new List<long>();

        private EmpireList _EmpiresSharedVisibility = new EmpireList();

        public SystemVisibilityList SystemVisibility = new SystemVisibilityList();

        private int _SystemExploredCount = 1;

        private int _ExplorationShipCount = 1;

        private BuiltObjectList _ResourceExtractors;

        private BuiltObjectList _Manufacturers;

        private BuiltObjectList _ConstructionYards;

        public BuiltObjectList SpacePorts;

        private BuiltObjectList _ConstructionShips;

        private BuiltObjectList _PlanetDestroyers;

        private BuiltObjectList _ResortBases;

        private BuiltObjectList _ResupplyShips;

        private BuiltObject _SystemScout;

        [OptionalField]
        private BuiltObjectList _SystemScouts = new BuiltObjectList();

        private ForceStructureProjectionList _StateForceStructureProjections;

        private ForceStructureProjectionList _PrivateForceStructureProjections;

        private double _ShortProcessingInterval = 3.0;

        private double _RegularProcessingInterval = 10.0;

        private double _PeriodicProcessingInterval = 30.0;

        private double _IntermediateProcessingInterval = 60.0;

        private double _LongProcessingInterval = 120.0;

        private double _HugeProcessingInterval = 240.0;

        private DateTime _LastShortTouch;

        private DateTime _LastRegularTouch;

        private DateTime _LastPeriodicTouch;

        private DateTime _LastIntermediateTouch;

        private DateTime _LastLongTouch;

        private DateTime _LastHugeTouch;

        private DeclinedTaskList _DeclinedTasks = new DeclinedTaskList();

        public int DiscoveryActionRuin;

        public int DiscoveryActionAbandonedShipBase;

        public bool NewShipsAutomated = true;

        public bool CanColonizeContinental;

        public bool CanColonizeMarshySwamp;

        public bool CanColonizeDesert;

        public bool CanColonizeOcean;

        public bool CanColonizeIce;

        public bool CanColonizeVolcanic;

        public float ColonyGrowthRateContinental = 1f;

        public float ColonyGrowthRateMarshySwamp = 1f;

        public float ColonyGrowthRateDesert = 1f;

        public float ColonyGrowthRateOcean = 1f;

        public float ColonyGrowthRateIce = 1f;

        public float ColonyGrowthRateVolcanic = 1f;

        private double _SpecialBonusResearchEnergy;

        private double _SpecialBonusResearchHighTech;

        private double _SpecialBonusResearchWeapons;

        private double _SpecialBonusWealth;

        private double _SpecialBonusHappiness;

        private double _SpecialBonusDiplomacy;

        private double _SpecialBonusPopulationGrowth;

        private Ruin _SpecialBonusResearchEnergyRuin;

        private Ruin _SpecialBonusResearchHighTechRuin;

        private Ruin _SpecialBonusResearchWeaponsRuin;

        private Ruin _SpecialBonusWealthRuin;

        private Ruin _SpecialBonusHappinessRuin;

        private Ruin _SpecialBonusDiplomacyRuin;

        private PlanetaryFacility _SpecialBonusResearchEnergyWonder;

        private PlanetaryFacility _SpecialBonusResearchHighTechWonder;

        private PlanetaryFacility _SpecialBonusResearchWeaponsWonder;

        private PlanetaryFacility _SpecialBonusWealthWonder;

        private PlanetaryFacility _SpecialBonusHappinessWonder;

        private PlanetaryFacility _SpecialBonusPopulationGrowthWonder;

        [NonSerialized]
        private HabitatList _MonitoringHabitats = new HabitatList();

        [NonSerialized]
        private List<Point> _MonitoringPoints = new List<Point>();

        [NonSerialized]
        private HabitatList _ResearchHabitats = new HabitatList();

        [NonSerialized]
        private PrioritizedTargetList _ResortHabitats = new PrioritizedTargetList();

        [NonSerialized]
        private StellarObjectList _RefuellingLocations = new StellarObjectList();

        [NonSerialized]
        private StellarObjectList _RefuellingLocationsMilitaryOnly = new StellarObjectList();

        [OptionalField]
        public int EmpireSplitCount;

        [OptionalField]
        public bool HaveDefeatedAncientGuardians;

        [OptionalField]
        public bool HaveDefeatedShakturi;

        [OptionalField]
        public int DefeatedLegendaryPiratesCount;

        [OptionalField]
        public HabitatList ColoniesNeedingTroops = new HabitatList();

        private HabitatList _PenalColonies = new HabitatList();

        [NonSerialized]
        private PrioritizedTargetList _ResettleSources = new PrioritizedTargetList();

        [NonSerialized]
        private PrioritizedTargetList _MigrationSources = new PrioritizedTargetList();

        [NonSerialized]
        private PrioritizedTargetList _MigrationDestinations = new PrioritizedTargetList();

        [NonSerialized]
        private PrioritizedTargetList _TourismSources = new PrioritizedTargetList();

        [NonSerialized]
        private PrioritizedTargetList _TourismDestinations = new PrioritizedTargetList();

        [NonSerialized]
        private PrioritizedTargetList _ResortBaseBuildLocations = new PrioritizedTargetList();

        public BuiltObjectList DisputedBases = new BuiltObjectList();

        private EmpireList _RecentAttackingEmpires = new EmpireList();

        private EmpireList _RecentSpyingEmpires = new EmpireList();

        private GalaxyLocationList _KnownGalaxyLocations = new GalaxyLocationList();

        private List<Point> _LocationHints = new List<Point>();

        public object LocationHintLock = new object();

        private bool _InitiateConstruction = true;

        public Character VictoryLoseLeader;

        public Habitat VictoryLoseHomeworld;

        public float VictoryBonus;

        [OptionalField]
        public long LastDisasterDate = long.MinValue;

        [OptionalField]
        public long LastLeaderChangeDate = long.MinValue;

        private string _Name;

        private int _Score;

        private double _StateMoney;

        private double _PrivateMoney;

        private int _IntelligenceSpending;

        private int _CounterEspionageSpending;

        private int _CounterSabotageSpending;

        public int AttackRangePatrol = 48000;

        public int AttackRangeEscort = 2000;

        public int AttackRangeOther = 48000;

        [OptionalField]
        public int AttackRangeAttack = 2000;

        public float AttackOvermatchFactor = 2f;

        [OptionalField]
        public float FleetAttackRefuelPortion = 0.3f;

        [OptionalField]
        public float FleetAttackGatherPortion = 0.3f;

        [OptionalField]
        public int AttackRangePatrolManual = -1;

        [OptionalField]
        public int AttackRangeEscortManual = -1;

        [OptionalField]
        public int AttackRangeOtherManual = -1;

        [OptionalField]
        public int AttackRangeAttackManual = -1;

        private double _ShipMaintenanceSavings;

        private double _ResourceExtractionBonus;

        private double _ResearchBonus;

        private double _EspionageBonus;

        private double _TradeBonus;

        private double _RelativeEmpireSize;

        [OptionalField]
        public PlanetaryFacilityBuildDateList TrackedWonders = new PlanetaryFacilityBuildDateList();

        public double DifficultyLevel = 1.0;

        public double ColonyCorruptionFactor = Galaxy.ColonyCorruptionFactorDefault;

        public double ResearchRate = Galaxy.ResearchRateDefault;

        public double PopulationGrowthRate = Galaxy.PopulationGrowthRateDefault;

        public double MiningRate = Galaxy.MiningRateDefault;

        public double TargettingFactor = Galaxy.TargettingFactorDefault;

        public double CountermeasuresFactor = Galaxy.CountermeasuresFactorDefault;

        public double ColonyShipBuildSpeedRate = Galaxy.ColonyShipBuildSpeedRateDefault;

        public double WarWearinessFactor = Galaxy.WarWearinessFactorDefault;

        public double ColonyIncomeFactor = Galaxy.ColonyIncomeFactorDefault;

        [OptionalField]
        public double SmugglingIncomeFactor = 1.0;

        [OptionalField]
        public double RaidStrengthFactor = 1.0;

        [OptionalField]
        public double RaidBonusFactor = 1.0;

        [OptionalField]
        public double ShipMaintenancePrivateFactor = 1.0;

        [OptionalField]
        public double ShipMaintenanceStateFactor = 1.0;

        [OptionalField]
        public double ResearchWeaponsFactor = 1.0;

        [OptionalField]
        public double ResearchEnergyFactor = 1.0;

        [OptionalField]
        public double ResearchHighTechFactor = 1.0;

        [OptionalField]
        public double PlanetaryFacilityEliminationFactor = 1.0;

        [OptionalField]
        public double LootingFactor = 1.0;

        [OptionalField]
        public double PlanetaryFacilityBuildFactor = 1.0;

        [OptionalField]
        public double PlanetaryWonderBuildFactor = 1.0;

        [OptionalField]
        public double DifficultyLevelModifier;

        public PiratePlayStyle PiratePlayStyle;

        private Race _ShipMaintenanceSavingsRace;

        private Race _ResourceExtractionBonusRace;

        private Race _ResearchBonusRace;

        private Race _EspionageBonusRace;

        private Race _TradeBonusRace;

        [OptionalField]
        private int _EmpireOrderCount;

        private BuiltObjectList _KnownPirateBases = new BuiltObjectList();

        private EmpireList _KnownPirateEmpires = new EmpireList();

        private Habitat _PirateEmpireBaseHabitat;

        private EmpireActivityList _PirateMissions = new EmpireActivityList();

        public bool PirateEmpireSuperPirates;

        public List<int> PirateInfluenceSystemIds = new List<int>();

        public PirateRelationList PirateRelations = new PirateRelationList();

        private int _GovernmentId;

        private GovernmentAttributes _GovernmentAttributes;

        private List<int> _AllowableGovernmentTypes;

        private double _EconomyEfficiency = 1.0;

        private double _TaxRate;

        private Race _DominantRace;

        private int _DesignPictureFamilyIndex;

        private long _TotalPopulation;

        private Habitat _Capital;

        public HabitatList Capitals = new HabitatList();

        public HabitatList CapitalSystemStars = new HabitatList();

        public Habitat HomeWorld;

        public Habitat TargetHabitat;

        public Habitat DefendHabitat;

        private TroopList _Troops;

        private string _TroopDescription;

        private int _TroopPictureRef;

        private int _TroopCount;

        private Empire _TopCompetitor;

        private bool _ControlDesigns;

        private bool _ControlTroopGeneration;

        private bool _ControlMilitaryFleets;

        private bool _ControlColonyDevelopment;

        private bool _ControlColonyTaxRates;

        private bool _ControlColonyStockLevels;

        private bool _ControlResearch;

        private bool _ControlPopulationPolicy;

        [OptionalField]
        private bool _ControlCharacterLocations = true;

        private AutomationLevel _ControlColonization;

        private AutomationLevel _ControlStateConstruction;

        private AutomationLevel _ControlMilitaryAttacks;

        private AutomationLevel _ControlDiplomacyGifts;

        private AutomationLevel _ControlDiplomacyTreaties;

        private AutomationLevel _ControlDiplomacyOffense;

        private AutomationLevel _ControlAgentAssignment;

        private AutomationLevel _ControlColonyFacilities;

        [OptionalField]
        private AutomationLevel _ControlOfferPirateMissions = AutomationLevel.FullyAutomated;

        public EmpirePolicy Policy = new EmpirePolicy();

        [OptionalField]
        public bool AutoRefuelStateShips = true;

        private int _FleetIdentity;

        private double _CivilityRating;

        private double _WarWeariness;

        private Empire _ParentEmpire;

        private bool _LetOthersProvideFreight;

        private Color _MainColor;

        private Color _SecondaryColor;

        private int _FlagShape;

        private Bitmap _LargeFlagPicture;

        private Bitmap _SmallFlagPicture;

        private int _DesignNamesIndex;

        private int[] _DesignNamesUsage = new int[36];

        private string _SmallFreighterPrefix;

        private string _MediumFreighterPrefix;

        private string _LargeFreighterPrefix;

        private string _MiningShipPrefix;

        private string _GasMiningShipPrefix;

        private string _EscortPrefix;

        private string _FrigatePrefix;

        private string _DestroyerPrefix;

        private string _CruiserPrefix;

        private string _CapitalShipPrefix;

        private string _TroopTransportPrefix;

        private int _SmallFreighterCurrentModelNumber = 1000;

        private int _MediumFreighterCurrentModelNumber = 1000;

        private int _LargeFreighterCurrentModelNumber = 1000;

        private int _MiningShipCurrentModelNumber = 1000;

        private int _GasMiningShipCurrentModelNumber = 1000;

        private int _ResortBaseCurrentModelNumber;

        [OptionalField]
        private int _EnergyResearchStationCurrentModelNumber;

        [OptionalField]
        private int _WeaponsResearchStationCurrentModelNumber;

        [OptionalField]
        private int _HighTechResearchStationCurrentModelNumber;

        [OptionalField]
        private int _MonitoringStationCurrentModelNumber;

        [OptionalField]
        private int _DefensiveBaseCurrentModelNumber;

        private int _SmallSpacePortCurrentModelNumber;

        private int _MediumSpacePortCurrentModelNumber;

        private int _LargeSpacePortCurrentModelNumber;

        private int _MiningStationCurrentModelNumber;

        private int _GasMiningStationCurrentModelNumber;

        private int _ConstructionShipCurrentModelNumber;

        private int _ExplorationShipCurrentModelNumber;

        private int _PassengerShipCurrentModelNumber;

        private int _ColonyShipCurrentModelNumber;

        private int _EscortCurrentModelNumber;

        private int _FrigateCurrentModelNumber;

        private int _DestroyerCurrentModelNumber;

        private int _CruiserCurrentModelNumber;

        private int _CapitalShipCurrentModelNumber;

        private int _TroopTransportCurrentModelNumber;

        private int _ResupplyShipCurrentModelNumber;

        private int _CarrierCurrentModelNumber;

        private string _SmallFreighterName;

        private string _MediumFreighterName;

        private string _LargeFreighterName;

        private string _MiningShipName;

        private string _GasMiningShipName;

        private Number[] _RomanNumbers = new Number[13]
        {
        new Number(1000, "M"),
        new Number(900, "CM"),
        new Number(500, "D"),
        new Number(400, "CD"),
        new Number(100, "C"),
        new Number(90, "XC"),
        new Number(50, "L"),
        new Number(40, "XL"),
        new Number(10, "X"),
        new Number(9, "IX"),
        new Number(5, "V"),
        new Number(4, "IV"),
        new Number(1, "I")
        };

        [NonSerialized]
        private StringBuilder _StringBuilder = new StringBuilder();

        [OptionalField]
        public DesignSpecification PlanetDestroyerDesignSpecification;

        public DesignSpecificationList _DesignSpecifications = new DesignSpecificationList();

        public EmpireEvaluationList EmpireEvaluations = new EmpireEvaluationList();

        [OptionalField]
        private bool _ReviewDesignsAndRetrofit;

        [OptionalField]
        private bool _ReviewDesignsAndRetrofitImportantBreakthrough;

        private int _TaskSkipCount;

        [NonSerialized]
        public volatile bool FuelSystemsUpdating;

        [NonSerialized]
        public List<FuelSourceSystemList> FuelSystemsSources = new List<FuelSourceSystemList>();

        private int _BaseMaximumConstructionSize = 160;

        public bool TroopCanRecruitInfantry;

        public bool TroopCanRecruitArmored;

        public bool TroopCanRecruitArtillery;

        public bool TroopCanRecruitSpecialForces;

        public float TroopAttackStrengthBonusFactorInfantry = 1f;

        public float TroopAttackStrengthBonusFactorArmored = 1f;

        public float TroopAttackStrengthBonusFactorArtillery = 1f;

        public float TroopAttackStrengthBonusFactorSpecialForces = 1f;

        public float TroopDefendStrengthBonusFactorInfantry = 1f;

        public float TroopDefendStrengthBonusFactorArmored = 1f;

        public float TroopDefendStrengthBonusFactorSpecialForces = 1f;

        [OptionalField]
        public float TroopPlanetaryDefenseInterceptBonusFactor = 1f;

        public float TroopMaintenanceFactor = 1f;

        public float BoardingAttackFactor = 1f;

        public float BoardingDefenseFactor = 1f;

        private bool _CanBuildCarriers;

        private bool _CanBuildResupplyShips;

        public float ResearchBonusWeapons;

        public BuiltObject ResearchBonusWeaponsStation;

        public float ResearchBonusEnergy;

        public BuiltObject ResearchBonusEnergyStation;

        public float ResearchBonusHighTech;

        public BuiltObject ResearchBonusHighTechStation;

        [OptionalField]
        private double _TaxResistanceRate = 1.05;

        [OptionalField]
        private long _TaxResistanceThreshold = 4000000000L;

        private long _LastResortIncomeAddDate;

        private double _ThisYearsResortIncome;

        [OptionalField]
        private List<double> _VariableIncome = new List<double>();

        [OptionalField]
        private long _LastVariableIncomeUpdate;

        [OptionalField]
        private bool _UseAveragedVariableIncome;

        [OptionalField]
        private long _DateOfLastStateFuelCost;

        [OptionalField]
        private double _ThisYearsStateFuelCosts;

        [OptionalField]
        private double _ThisYearsPrivateFuelCosts;

        [OptionalField]
        private long _DateOfLastPrivateFuelCost;

        [OptionalField]
        public bool PreWarpProgressEventOccurredSendPirateRaid;

        [OptionalField]
        public bool PreWarpProgressEventOccurredExperienceFirstPirateRaid;

        public bool PreWarpProgressEventOccurredFirstContactPirateOrIndependent;

        public bool PreWarpProgressEventOccurredFirstContactNormalEmpire;

        public bool PreWarpProgressEventOccurredBuildFirstShip;

        public bool PreWarpProgressEventOccurredBuildFirstSpaceport;

        public bool PreWarpProgressEventOccurredBuildFirstMiningStation;

        public bool PreWarpProgressEventOccurredBuildFirstResearchStation;

        public bool PreWarpProgressEventOccurredDiscoverHyperspaceTech;

        public bool PreWarpProgressEventOccurredDiscoverColonizationTech;

        public bool PreWarpProgressEventOccurredFirstHyperjump;

        public bool PreWarpProgressEventOccurredEncounterFirstKaltor;

        [OptionalField]
        public bool PreWarpProgressEventOccurredBuildFirstMilitaryShip;

        [OptionalField]
        public bool PirateExtortionOfferMade;

        public bool[] _ComponentsAvailable = new bool[Enum.GetValues(typeof(BuiltObjectSubRole)).Length];

        public BuiltObjectList PrivateBuiltObjects = new BuiltObjectList();

        public BuiltObjectList BuiltObjects = new BuiltObjectList();

        public BuiltObjectList LongRangeScanners = new BuiltObjectList();

        public BuiltObjectList ResearchFacilities = new BuiltObjectList();

        public BuiltObjectList RefuellingDepots = new BuiltObjectList();

        public BuiltObjectList MiningStations = new BuiltObjectList();

        public BuiltObjectList Freighters = new BuiltObjectList();

        public CharacterList AvailableCharacters = new CharacterList();

        public CharacterList Characters = new CharacterList();

        public Character Leader;

        private double _LeaderChangeInfluence;

        public DiplomaticRelationList DiplomaticRelations = new DiplomaticRelationList();

        [OptionalField]
        public Bitmap MediumFlagPicture;

        public HabitatList Colonies = new HabitatList();

        public ShipGroupList ShipGroups = new ShipGroupList();

        public FleetAttackList IncomingEnemyFleetsAndPlanetDestroyers = new FleetAttackList();

        public DateTime LastXaraktorVirusDeploy = DateTime.MinValue;

        internal Galaxy Galaxy => _Galaxy;

        public bool Active => _Active;

        public int EmpireId => _EmpireId;

        public Design DefenseBaseDesign => _DefenseBaseDesign;

        public Design WeaponsResearchStation => _WeaponsResearchStation;

        public Design EnergyResearchStation => _EnergyResearchStation;

        public Design HighTechResearchStation => _HighTechResearchStation;

        public EmpireCounters Counters => _Counters;

        public PirateEconomy PirateEconomy => _PirateEconomy;

        public bool EncounteredSilverMistCreature
        {
            get
            {
                return _EncounteredSilverMistCreature;
            }
            set
            {
                _EncounteredSilverMistCreature = value;
            }
        }

        public EmpireList EmpiresSharedVisibility => _EmpiresSharedVisibility;

        public ResourceList SelfSuppliedLuxuryResources => _SelfSuppliedLuxuryResources;

        public HabitatPrioritizationList EmpireResourceTargets
        {
            get
            {
                return _EmpireResourceTargets;
            }
            set
            {
                _EmpireResourceTargets = value;
            }
        }

        public HabitatPrioritizationList DesiredForeignColonies
        {
            get
            {
                return _DesiredForeignColonies;
            }
            set
            {
                _DesiredForeignColonies = value;
            }
        }

        public EmpireList EmpiresViewable => _EmpiresViewable;

        public List<long> EmpiresViewableExpiry => _EmpiresViewableExpiry;

        public HabitatList SystemsVisible => _SystemsVisible;

        public DeclinedTaskList DeclinedTasks => _DeclinedTasks;

        public PlanetaryFacility SpecialBonusResearchEnergyWonder => _SpecialBonusResearchEnergyWonder;

        public PlanetaryFacility SpecialBonusResearchHighTechWonder => _SpecialBonusResearchHighTechWonder;

        public PlanetaryFacility SpecialBonusResearchWeaponsWonder => _SpecialBonusResearchWeaponsWonder;

        public PlanetaryFacility SpecialBonusWealthWonder => _SpecialBonusWealthWonder;

        public PlanetaryFacility SpecialBonusHappinessWonder => _SpecialBonusHappinessWonder;

        public PlanetaryFacility SpecialBonusPopulationGrowthWonder => _SpecialBonusPopulationGrowthWonder;

        public Ruin SpecialBonusResearchEnergyRuin => _SpecialBonusResearchEnergyRuin;

        public Ruin SpecialBonusResearchHighTechRuin => _SpecialBonusResearchHighTechRuin;

        public Ruin SpecialBonusResearchWeaponsRuin => _SpecialBonusResearchWeaponsRuin;

        public Ruin SpecialBonusWealthRuin => _SpecialBonusWealthRuin;

        public Ruin SpecialBonusHappinessRuin => _SpecialBonusHappinessRuin;

        public Ruin SpecialBonusDiplomacyRuin => _SpecialBonusDiplomacyRuin;

        public double SpecialBonusResearchEnergy => _SpecialBonusResearchEnergy;

        public double SpecialBonusResearchHighTech => _SpecialBonusResearchHighTech;

        public double SpecialBonusResearchWeapons => _SpecialBonusResearchWeapons;

        public double SpecialBonusWealth => _SpecialBonusWealth;

        public double SpecialBonusHappiness => _SpecialBonusHappiness;

        public double SpecialBonusDiplomacy => _SpecialBonusDiplomacy;

        public double SpecialBonusPopulationGrowth => _SpecialBonusPopulationGrowth;

        public PrioritizedTargetList ResortHabitats => _ResortHabitats;

        public HabitatList PenalColonies => _PenalColonies;

        public PrioritizedTargetList ResettleSources => _ResettleSources;

        public PrioritizedTargetList MigrationSources => _MigrationSources;

        public PrioritizedTargetList MigrationDestinations => _MigrationDestinations;

        public PrioritizedTargetList TourismSources => _TourismSources;

        public PrioritizedTargetList TourismDestinations => _TourismDestinations;

        public PrioritizedTargetList ResortBaseBuildLocations => _ResortBaseBuildLocations;

        public HabitatList ResearchHabitats => _ResearchHabitats;

        public EmpireList RecentAttackingEmpires
        {
            get
            {
                return _RecentAttackingEmpires;
            }
            set
            {
                _RecentAttackingEmpires = value;
            }
        }

        public EmpireList RecentSpyingEmpires
        {
            get
            {
                return _RecentSpyingEmpires;
            }
            set
            {
                _RecentSpyingEmpires = value;
            }
        }

        public GalaxyLocationList KnownGalaxyLocations => _KnownGalaxyLocations;

        public List<Point> LocationHints => _LocationHints;

        public double RelativeEmpireSize => _RelativeEmpireSize;

        public double ShipMaintenanceSavings => _ShipMaintenanceSavings;

        public double ResourceExtractionBonus => _ResourceExtractionBonus * BaconEmpire.MultiplyResourceExtractionBonus(this);

        public double ResearchBonus => _ResearchBonus;

        public double EspionageBonus => _EspionageBonus;

        public double TradeBonus => _TradeBonus;

        public Race ResearchBonusRace => _ResearchBonusRace;

        public EmpireList KnownPirateEmpires => _KnownPirateEmpires;

        public BuiltObjectList KnownPirateBases => _KnownPirateBases;

        public EmpireActivityList PirateMissions
        {
            get
            {
                return _PirateMissions;
            }
            set
            {
                _PirateMissions = value;
            }
        }

        public Habitat PirateEmpireBaseHabitat
        {
            get
            {
                return _PirateEmpireBaseHabitat;
            }
            set
            {
                _PirateEmpireBaseHabitat = value;
            }
        }

        public double EconomyEfficiency => _EconomyEfficiency;

        public int DesignPictureFamilyIndex
        {
            get
            {
                return _DesignPictureFamilyIndex;
            }
            set
            {
                _DesignPictureFamilyIndex = value;
            }
        }

        public List<int> AllowableGovernmentTypes => _AllowableGovernmentTypes;

        public Design MonitoringStationCurrentDesign => _MonitoringStationCurrentDesign;

        public AutomationLevel ControlAgentAssignment
        {
            get
            {
                return _ControlAgentAssignment;
            }
            set
            {
                _ControlAgentAssignment = value;
            }
        }

        public AutomationLevel ControlColonization
        {
            get
            {
                return _ControlColonization;
            }
            set
            {
                _ControlColonization = value;
            }
        }

        public bool ControlDesigns
        {
            get
            {
                return _ControlDesigns;
            }
            set
            {
                _ControlDesigns = value;
            }
        }

        public AutomationLevel ControlStateConstruction
        {
            get
            {
                return _ControlStateConstruction;
            }
            set
            {
                _ControlStateConstruction = value;
            }
        }

        public bool ControlTroopGeneration
        {
            get
            {
                return _ControlTroopGeneration;
            }
            set
            {
                _ControlTroopGeneration = value;
            }
        }

        public bool ControlCharacterLocations
        {
            get
            {
                return _ControlCharacterLocations;
            }
            set
            {
                _ControlCharacterLocations = value;
            }
        }

        public AutomationLevel ControlMilitaryAttacks
        {
            get
            {
                return _ControlMilitaryAttacks;
            }
            set
            {
                _ControlMilitaryAttacks = value;
            }
        }

        public bool ControlMilitaryFleets
        {
            get
            {
                return _ControlMilitaryFleets;
            }
            set
            {
                _ControlMilitaryFleets = value;
            }
        }

        public bool ControlColonyDevelopment
        {
            get
            {
                return _ControlColonyDevelopment;
            }
            set
            {
                _ControlColonyDevelopment = value;
            }
        }

        public bool ControlColonyTaxRates
        {
            get
            {
                return _ControlColonyTaxRates;
            }
            set
            {
                _ControlColonyTaxRates = value;
            }
        }

        public bool ControlColonyStockLevels
        {
            get
            {
                return _ControlColonyStockLevels;
            }
            set
            {
                _ControlColonyStockLevels = value;
            }
        }

        public AutomationLevel ControlDiplomacyGifts
        {
            get
            {
                return _ControlDiplomacyGifts;
            }
            set
            {
                _ControlDiplomacyGifts = value;
            }
        }

        public AutomationLevel ControlDiplomacyTreaties
        {
            get
            {
                return _ControlDiplomacyTreaties;
            }
            set
            {
                _ControlDiplomacyTreaties = value;
            }
        }

        public AutomationLevel ControlDiplomacyOffense
        {
            get
            {
                return _ControlDiplomacyOffense;
            }
            set
            {
                _ControlDiplomacyOffense = value;
            }
        }

        public bool ControlResearch
        {
            get
            {
                return _ControlResearch;
            }
            set
            {
                _ControlResearch = value;
            }
        }

        public bool ControlPopulationPolicy
        {
            get
            {
                return _ControlPopulationPolicy;
            }
            set
            {
                _ControlPopulationPolicy = value;
            }
        }

        public AutomationLevel ControlColonyFacilities
        {
            get
            {
                return _ControlColonyFacilities;
            }
            set
            {
                _ControlColonyFacilities = value;
            }
        }

        public AutomationLevel ControlOfferPirateMissions
        {
            get
            {
                return _ControlOfferPirateMissions;
            }
            set
            {
                _ControlOfferPirateMissions = value;
            }
        }

        public double LongProcessingInterval => _LongProcessingInterval;

        public double PeriodicProcessingInterval => _PeriodicProcessingInterval;

        public DateTime LastShortTouch
        {
            get
            {
                return _LastShortTouch;
            }
            set
            {
                _LastShortTouch = value;
            }
        }

        public DateTime LastRegularTouch
        {
            get
            {
                return _LastRegularTouch;
            }
            set
            {
                _LastRegularTouch = value;
            }
        }

        public DateTime LastPeriodicTouch
        {
            get
            {
                return _LastPeriodicTouch;
            }
            set
            {
                _LastPeriodicTouch = value;
            }
        }

        public DateTime LastIntermediateTouch
        {
            get
            {
                return _LastIntermediateTouch;
            }
            set
            {
                _LastIntermediateTouch = value;
            }
        }

        public DateTime LastLongTouch
        {
            get
            {
                return _LastLongTouch;
            }
            set
            {
                _LastLongTouch = value;
            }
        }

        public DateTime LastHugeTouch
        {
            get
            {
                return _LastHugeTouch;
            }
            set
            {
                _LastHugeTouch = value;
            }
        }

        public HabitatList MonitoringHabitats => _MonitoringHabitats;

        public List<Point> MonitoringPoints => _MonitoringPoints;

        public HabitatPrioritizationList ResourceTargets
        {
            get
            {
                return _ResourceTargets;
            }
            set
            {
                _ResourceTargets = value;
            }
        }

        public ForceStructureProjectionList StateForceStructureProjections => _StateForceStructureProjections;

        public ForceStructureProjectionList PrivateForceStructureProjections => _PrivateForceStructureProjections;

        public double WarWeariness
        {
            get
            {
                double num = 1.0;
                if (Leader != null)
                {
                    num = 1.0 + (double)Leader.WarWeariness / 100.0;
                }
                return _WarWeariness / num;
            }
        }

        public double WarWearinessRaw
        {
            get
            {
                return _WarWeariness;
            }
            set
            {
                _WarWeariness = value;
            }
        }

        public double CivilityRating
        {
            get
            {
                return _CivilityRating;
            }
            set
            {
                _CivilityRating = value;
                if (_CivilityRating > 30.0)
                {
                    _CivilityRating = 30.0;
                }
                if (_CivilityRating < -100.0)
                {
                    _CivilityRating = -100.0;
                }
            }
        }

        public double CivilityRatingApprovalRaw
        {
            get
            {
                double num = 0.0;
                if (this != _Galaxy.IndependentEmpire)
                {
                    num = CivilityRating / 5.0;
                }
                if (GovernmentAttributes != null && num < 0.0)
                {
                    num *= GovernmentAttributes.ConcernForOwnReputation;
                }
                return num;
            }
        }

        public bool InitiateConstruction
        {
            get
            {
                return _InitiateConstruction;
            }
            set
            {
                _InitiateConstruction = value;
            }
        }

        public IMessageRecipient MessageRecipient
        {
            get
            {
                return _MessageRecipient;
            }
            set
            {
                _MessageRecipient = value;
            }
        }

        public IAutomationAuthorizer AutomationAuthorizer
        {
            get
            {
                return _AutomationAuthorizer;
            }
            set
            {
                _AutomationAuthorizer = value;
            }
        }

        public AutomationResponse AutomationResponse
        {
            get
            {
                return _AutomationResponse;
            }
            set
            {
                _AutomationResponse = value;
            }
        }

        public IEventMessageRecipient EventMessageRecipient
        {
            get
            {
                return _EventMessageRecipient;
            }
            set
            {
                _EventMessageRecipient = value;
            }
        }

        public HabitatPrioritizationList ColonizationTargets
        {
            get
            {
                return _ColonizationTargets;
            }
            set
            {
                _ColonizationTargets = value;
            }
        }

        public HabitatList DangerousHabitats => _DangerousHabitats;

        public DesignSpecificationList DesignSpecifications => _DesignSpecifications;

        public int TotalColonyStrategicValue
        {
            get
            {
                int num = 0;
                if (Colonies != null)
                {
                    for (int i = 0; i < Colonies.Count; i++)
                    {
                        Habitat habitat = Colonies[i];
                        num += habitat.StrategicValue;
                    }
                }
                return num;
            }
        }

        public EmpireList EmpiresToAttack => _EmpiresToAttack;

        public int MilitaryPotencyCapped
        {
            get
            {
                int num = 0;
                int val = 300;
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    num += Math.Min(BuiltObjects[i].FirepowerRaw, val);
                }
                return num;
            }
        }

        public int MilitaryPotency
        {
            get
            {
                int num = 0;
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject != null)
                    {
                        num += builtObject.CalculateOverallStrengthFactorWithoutShields();
                    }
                }
                return num;
            }
        }

        public int WeightedMilitaryPotency
        {
            get
            {
                int num = MilitaryPotency;
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        num -= diplomaticRelation.OtherEmpire.MilitaryPotency;
                    }
                    if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact)
                    {
                        num += diplomaticRelation.OtherEmpire.MilitaryPotency;
                    }
                    if (diplomaticRelation.Type == DiplomaticRelationType.Protectorate && diplomaticRelation.Initiator != this)
                    {
                        num += diplomaticRelation.ThisEmpire.MilitaryPotency;
                    }
                }
                if (num < 1)
                {
                    num = 1;
                }
                return num;
            }
        }

        public double PrivateAnnualRevenueUnadjusted
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat != null && habitat.Empire == this && (PirateEmpireBaseHabitat == null || !habitat.CheckColonyRevenueFromPirateControl(this)))
                    {
                        num += habitat.AnnualRevenue;
                    }
                }
                return num;
            }
        }

        public double PrivateAnnualRevenue
        {
            get
            {
                double num = PrivateAnnualRevenueUnadjusted;
                long totalPopulation = TotalPopulation;
                if (totalPopulation > Galaxy.RevenueDropoffPopulationThreshholdMin)
                {
                    long num2 = totalPopulation - Galaxy.RevenueDropoffPopulationThreshholdMin;
                    long num3 = Math.Min(num2, Galaxy.RevenueDropoffPopulationThreshholdMax - Galaxy.RevenueDropoffPopulationThreshholdMin);
                    double num4 = (double)num3 / (double)(Galaxy.RevenueDropoffPopulationThreshholdMax - Galaxy.RevenueDropoffPopulationThreshholdMin);
                    double num5 = num4 * Galaxy.RevenueDropoffRate;
                    double num6 = (double)num2 / (double)totalPopulation * num5;
                    if (GovernmentAttributes != null)
                    {
                        num6 *= GovernmentAttributes.Corruption;
                    }
                    double num7 = num * num6;
                    num -= num7;
                }
                if (num < 0.0)
                {
                    num = 0.0;
                }
                return num;
            }
        }

        public double AnnualTaxRevenue
        {
            get
            {
                double num = 0.0;
                long num2 = 0L;
                if (Colonies != null)
                {
                    for (int i = 0; i < Colonies.Count; i++)
                    {
                        Habitat habitat = Colonies[i];
                        if (habitat == null || habitat.Empire != this || (PirateEmpireBaseHabitat != null && habitat.CheckColonyRevenueFromPirateControl(this)) || habitat.Population == null)
                        {
                            continue;
                        }
                        num2 += habitat.Population.TotalAmount;
                        if (!habitat.Rebelling)
                        {
                            if (double.IsNaN(habitat.AnnualRevenue))
                            {
                                habitat.RecalculateAnnualTaxRevenue();
                            }
                            num += habitat.AnnualTaxRevenue;
                        }
                    }
                }
                if (num2 > Galaxy.RevenueDropoffPopulationThreshholdMin)
                {
                    long num3 = num2 - Galaxy.RevenueDropoffPopulationThreshholdMin;
                    long num4 = Math.Min(num3, Galaxy.RevenueDropoffPopulationThreshholdMax - Galaxy.RevenueDropoffPopulationThreshholdMin);
                    double num5 = (double)num4 / (double)(Galaxy.RevenueDropoffPopulationThreshholdMax - Galaxy.RevenueDropoffPopulationThreshholdMin);
                    double num6 = num5 * Galaxy.RevenueDropoffRate;
                    double num7 = (double)num3 / (double)num2 * num6;
                    if (GovernmentAttributes != null)
                    {
                        num7 *= GovernmentAttributes.Corruption;
                    }
                    double num8 = num * num7;
                    num -= num8;
                }
                if (num < 0.0)
                {
                    num = 0.0;
                }
                return num;
            }
        }

        public EmpireMessageList Messages
        {
            get
            {
                return _Messages;
            }
            set
            {
                _Messages = value;
            }
        }

        public EmpireMessageList MessageHistory
        {
            get
            {
                return _MessageHistory;
            }
            set
            {
                _MessageHistory = value;
            }
        }

        public double AnnualFacilityMaintenance
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat != null && habitat.Owner == this && habitat.Facilities != null)
                    {
                        num += habitat.Facilities.CalculateAnnualMaintenance();
                    }
                }
                return num;
            }
        }

        public double AnnualSubjugationTribute
        {
            get
            {
                double num = 0.0;
                double num2 = AnnualTaxRevenue + ThisYearsForeignTradeBonuses + ThisYearsSpacePortIncome;
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion && diplomaticRelation.Initiator != this)
                    {
                        double num3 = num2 * Galaxy.SubjugationTributePercentage;
                        num += num3;
                    }
                }
                return num;
            }
        }

        public double AnnualPirateProtection
        {
            get
            {
                double num = 0.0;
                if (PirateRelations != null)
                {
                    for (int i = 0; i < PirateRelations.Count; i++)
                    {
                        PirateRelation pirateRelation = PirateRelations[i];
                        if (pirateRelation != null && pirateRelation.Type == PirateRelationType.Protection && pirateRelation.OtherEmpire != null)
                        {
                            PirateRelation pirateRelation2 = pirateRelation.OtherEmpire.ObtainPirateRelation(this);
                            if (pirateRelation2 != null)
                            {
                                num += pirateRelation2.MonthlyProtectionFeeToThisEmpire * 12.0;
                            }
                        }
                    }
                }
                return num;
            }
        }

        public double ColonyApprovalAverage
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    num += habitat.EmpireApprovalRating;
                }
                return num / (double)Colonies.Count;
            }
        }

        public bool CanBuildCarriers => _CanBuildCarriers;

        public bool CanBuildResupplyShips => _CanBuildResupplyShips;

        public double AnnualResearchPotential
        {
            get
            {
                if (PirateEmpireBaseHabitat != null)
                {
                    double num = 0.0;
                    if (BuiltObjects.Count > 0)
                    {
                        num = Math.Sqrt(BuiltObjects.Count) * 10000.0;
                    }
                    if (ResearchFacilities != null && ResearchFacilities.Count > 0)
                    {
                        double num2 = 0.0;
                        for (int i = 0; i < ResearchFacilities.Count; i++)
                        {
                            BuiltObject builtObject = ResearchFacilities[i];
                            if (builtObject != null && !builtObject.HasBeenDestroyed && (builtObject.SubRole == BuiltObjectSubRole.WeaponsResearchStation || builtObject.SubRole == BuiltObjectSubRole.EnergyResearchStation || builtObject.SubRole == BuiltObjectSubRole.HighTechResearchStation))
                            {
                                num2 += 0.5 * (double)(builtObject.ResearchEnergy + builtObject.ResearchHighTech + builtObject.ResearchWeapons);
                            }
                        }
                        num += num2;
                    }
                    double num3 = CalculatePirateResearchBonusFromFacilities();
                    num *= num3;
                    num *= _EconomyEfficiency;
                    if (Characters != null && Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.UltraGenius))
                    {
                        num *= 1.2;
                    }
                    return num * ResearchRate;
                }
                double num4 = Math.Sqrt(Math.Sqrt((double)TotalPopulation / 1000.0)) * 10000.0;
                num4 *= _EconomyEfficiency;
                if (Characters != null && Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.UltraGenius))
                {
                    num4 *= 1.2;
                }
                return num4 * ResearchRate;
            }
        }

        public double ResearchEnergyPotential
        {
            get
            {
                double num = 0.0;
                BuiltObjectList builtObjectList = new BuiltObjectList();
                builtObjectList.AddRange(BuiltObjects);
                builtObjectList.AddRange(PrivateBuiltObjects);
                foreach (BuiltObject item in builtObjectList)
                {
                    if (item != null && item.IsResearchLab)
                    {
                        num += (double)item.ResearchEnergy;
                    }
                }
                double val = Math.Max(12000.0, (double)(_TotalPopulation / 1000000) * 3.0);
                num = Math.Max(val, num);
                return num * ResearchEnergyFactor;
            }
        }

        public double ResearchHighTechPotential
        {
            get
            {
                double num = 0.0;
                BuiltObjectList builtObjectList = new BuiltObjectList();
                builtObjectList.AddRange(BuiltObjects);
                builtObjectList.AddRange(PrivateBuiltObjects);
                foreach (BuiltObject item in builtObjectList)
                {
                    if (item != null && item.IsResearchLab)
                    {
                        num += (double)item.ResearchHighTech;
                    }
                }
                double val = Math.Max(12000.0, (double)(_TotalPopulation / 1000000) * 3.0);
                num = Math.Max(val, num);
                return num * ResearchHighTechFactor;
            }
        }

        public double ResearchWeaponsPotential
        {
            get
            {
                double num = 0.0;
                BuiltObjectList builtObjectList = new BuiltObjectList();
                builtObjectList.AddRange(BuiltObjects);
                builtObjectList.AddRange(PrivateBuiltObjects);
                foreach (BuiltObject item in builtObjectList)
                {
                    if (item != null && item.IsResearchLab)
                    {
                        num += (double)item.ResearchWeapons;
                    }
                }
                double val = Math.Max(12000.0, (double)(_TotalPopulation / 1000000) * 3.0);
                num = Math.Max(val, num);
                return num * ResearchWeaponsFactor;
            }
        }

        public double ResearchWeaponsOutput
        {
            get
            {
                double researchWeaponsTotal = ResearchWeaponsTotal;
                double num = CalculateResearchOutputBonuses(IndustryType.Weapon);
                return researchWeaponsTotal * num;
            }
        }

        public double ResearchEnergyOutput
        {
            get
            {
                double researchEnergyTotal = ResearchEnergyTotal;
                double num = CalculateResearchOutputBonuses(IndustryType.Energy);
                return researchEnergyTotal * num;
            }
        }

        public double ResearchHighTechOutput
        {
            get
            {
                double researchHighTechTotal = ResearchHighTechTotal;
                double num = CalculateResearchOutputBonuses(IndustryType.HighTech);
                return researchHighTechTotal * num;
            }
        }

        public double ResearchEnergyTotal
        {
            get
            {
                double researchEnergy = 0.0;
                double researchWeapons = 0.0;
                double researchHighTech = 0.0;
                CalculateResearchTotal(out researchEnergy, out researchHighTech, out researchWeapons);
                return researchEnergy;
            }
        }

        public double ResearchHighTechTotal
        {
            get
            {
                double researchEnergy = 0.0;
                double researchWeapons = 0.0;
                double researchHighTech = 0.0;
                CalculateResearchTotal(out researchEnergy, out researchHighTech, out researchWeapons);
                return researchHighTech;
            }
        }

        public double ResearchWeaponsTotal
        {
            get
            {
                double researchEnergy = 0.0;
                double researchWeapons = 0.0;
                double researchHighTech = 0.0;
                CalculateResearchTotal(out researchEnergy, out researchHighTech, out researchWeapons);
                return researchWeapons;
            }
        }

        private double AcceptableAnnualMaintenanceProportionOfIncome => Galaxy.SpendingShipPercentage / ((double)DominantRace.CautionLevel / 100.0);

        public double AnnualStateMaintenance
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    num += (double)builtObject.AnnualSupportCost;
                }
                double num2 = num * _ShipMaintenanceSavings;
                return num - num2;
            }
        }

        public double AnnualStateMaintenanceExcludingUnderConstruction => BaconEmpire.AnnualStateMaintenanceExcludingUnderConstruction(this);

        private double AnnualStateMaintenanceWithoutRetirees
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (!builtObject.RetireForNextMission && (builtObject.Mission == null || (builtObject.Mission != null && builtObject.Mission.Type != BuiltObjectMissionType.Retire)))
                    {
                        num += (double)builtObject.AnnualSupportCost;
                    }
                }
                double num2 = num * _ShipMaintenanceSavings;
                return num - num2;
            }
        }

        public double AnnualTroopMaintenance
        {
            get
            {
                double num = 0.0;
                double num2 = 1.0;
                if (Leader != null)
                {
                    num2 *= 1.0 + (double)Leader.TroopMaintenance / 100.0;
                }
                for (int i = 0; i < _Troops.Count; i++)
                {
                    Troop troop = _Troops[i];
                    if (troop == null || troop.Type == TroopType.PirateRaider || troop.BeingRecruited)
                    {
                        continue;
                    }
                    double num3 = Galaxy.TroopAnnualMaintenance * (double)troop.MaintenanceMultiplier * (double)TroopMaintenanceFactor;
                    if (GovernmentAttributes != null)
                    {
                        num3 *= GovernmentAttributes.MaintenanceCosts;
                    }
                    num3 /= num2;
                    if (troop.Colony != null)
                    {
                        if (troop.Colony.Characters != null && troop.Colony.Characters.Count > 0)
                        {
                            int highestSkillLevelExcludeLeaders = troop.Colony.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopMaintenance);
                            double num4 = 1.0 + (double)highestSkillLevelExcludeLeaders / 100.0;
                            num3 /= num4;
                        }
                    }
                    else if (troop.BuiltObject != null && troop.BuiltObject.Characters != null && troop.BuiltObject.Characters.Count > 0)
                    {
                        int highestSkillLevel = troop.BuiltObject.Characters.GetHighestSkillLevel(CharacterSkillType.TroopMaintenance);
                        double num5 = 1.0 + (double)highestSkillLevel / 100.0;
                        num3 /= num5;
                    }
                    num += num3;
                }
                return num;
            }
        }

        public double AnnualTroopMaintenanceIncludeRecruiting
        {
            get
            {
                double num = 0.0;
                double num2 = 1.0;
                if (Leader != null)
                {
                    num2 *= 1.0 + (double)Leader.TroopMaintenance / 100.0;
                }
                for (int i = 0; i < _Troops.Count; i++)
                {
                    Troop troop = _Troops[i];
                    if (troop == null)
                    {
                        continue;
                    }
                    double num3 = Galaxy.TroopAnnualMaintenance * (double)troop.MaintenanceMultiplier * (double)TroopMaintenanceFactor;
                    if (GovernmentAttributes != null)
                    {
                        num3 *= GovernmentAttributes.MaintenanceCosts;
                    }
                    num3 /= num2;
                    if (troop.Colony != null)
                    {
                        if (troop.Colony.Characters != null && troop.Colony.Characters.Count > 0)
                        {
                            int highestSkillLevelExcludeLeaders = troop.Colony.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopMaintenance);
                            double num4 = 1.0 + (double)highestSkillLevelExcludeLeaders / 100.0;
                            num3 /= num4;
                        }
                    }
                    else if (troop.BuiltObject != null && troop.BuiltObject.Characters != null && troop.BuiltObject.Characters.Count > 0)
                    {
                        int highestSkillLevel = troop.BuiltObject.Characters.GetHighestSkillLevel(CharacterSkillType.TroopMaintenance);
                        double num5 = 1.0 + (double)highestSkillLevel / 100.0;
                        num3 /= num5;
                    }
                    num += num3;
                }
                return num;
            }
        }

        public double AnnualAgentMaintenance => 0.0;

        public double AnnualPrivateMaintenance
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < PrivateBuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = PrivateBuiltObjects[i];
                    num += (double)builtObject.AnnualSupportCost;
                }
                double num2 = num * _ShipMaintenanceSavings;
                return num - num2;
            }
        }

        public double AnnualPrivateMaintenanceExcludingUnderConstruction
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < PrivateBuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = PrivateBuiltObjects[i];
                    if (builtObject.UnbuiltComponentCount <= 0)
                    {
                        num += (double)builtObject.AnnualSupportCost;
                    }
                }
                double num2 = num * _ShipMaintenanceSavings;
                return num - num2;
            }
        }

        private double AnnualPrivateMaintenanceWithoutRetirees
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < PrivateBuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = PrivateBuiltObjects[i];
                    if (!builtObject.RetireForNextMission && (builtObject.Mission == null || (builtObject.Mission != null && builtObject.Mission.Type != BuiltObjectMissionType.Retire)))
                    {
                        num += (double)builtObject.AnnualSupportCost;
                    }
                }
                double num2 = num * _ShipMaintenanceSavings;
                return num - num2;
            }
        }

        public int DesiredIntelligenceAgentAmount
        {
            get
            {
                int num = 0;
                int maximumAgentCount = MaximumAgentCount;
                double num2 = (double)DominantRace.AggressionLevel / 100.0;
                double num3 = (double)DominantRace.IntelligenceLevel / 100.0;
                int num4 = (int)(TotalPopulation / 3000000000L);
                num = (int)((double)num4 * 0.75 * num2 * num3 * num3);
                if (CheckAtWar())
                {
                    num = (int)((double)num * 1.6);
                }
                return Math.Min(maximumAgentCount, num);
            }
        }

        public double MinimumIntelligenceAgentSpending => 0.0;

        private double MinimumTroopSpending
        {
            get
            {
                double num = 0.0;
                double num2 = CalculateAccurateAnnualIncome();
                double num3 = num2 * Galaxy.SpendingTroopPercentage;
                if (num3 < Galaxy.TroopAnnualMaintenance)
                {
                    num3 = 0.0;
                }
                double val = AnnualTroopMaintenance * 1.05;
                return Math.Min(val, num3);
            }
        }

        public double MinimumShipSpending
        {
            get
            {
                double num = CalculateAccurateAnnualIncome();
                return num * Galaxy.SpendingShipPercentage;
            }
        }

        public double TaxResistanceRate => _TaxResistanceRate;

        public long TaxResistanceThreshold => _TaxResistanceThreshold;

        public long TotalPopulation => _TotalPopulation;

        public int MaximumAgentCount
        {
            get
            {
                if (PirateEmpireBaseHabitat == null)
                {
                    int val = Colonies.Count / 3;
                    val = Math.Max(2, val);
                    if (DominantRace != null && !DominantRace.Expanding)
                    {
                        val = 6;
                    }
                    val = Math.Min(6, val);
                    if (DominantRace != null)
                    {
                        val += DominantRace.IntelligenceAgentAdditional;
                    }
                    return val;
                }
                int val2 = (int)(Math.Sqrt(BuiltObjects.Count) + 1.0);
                val2 = Math.Max(1, val2);
                if (DominantRace != null && !DominantRace.Expanding)
                {
                    val2 = 6;
                }
                val2 = Math.Min(6, val2);
                if (DominantRace != null)
                {
                    val2 += DominantRace.IntelligenceAgentAdditional;
                }
                return val2;
            }
        }

        public double ThisYearsForeignTradeBonuses
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    double annualTradeBonus = diplomaticRelation.AnnualTradeBonus;
                    num += annualTradeBonus;
                }
                return num;
            }
        }

        public double ThisYearsResortIncome
        {
            get
            {
                long currentStarDate = _Galaxy.CurrentStarDate;
                long num = currentStarDate % (Galaxy.RealSecondsInGalacticYear * 1000);
                long num2 = currentStarDate - num;
                if (_LastResortIncomeAddDate < num2)
                {
                    _ThisYearsResortIncome = 0.0;
                }
                return _ThisYearsResortIncome;
            }
        }

        public double ThisYearsSpacePortIncome
        {
            get
            {
                double num = 0.0;
                long currentStarDate = _Galaxy.CurrentStarDate;
                long num2 = currentStarDate % (Galaxy.RealSecondsInGalacticYear * 1000);
                long num3 = currentStarDate - num2;
                if (SpacePorts != null)
                {
                    for (int i = 0; i < SpacePorts.Count; i++)
                    {
                        BuiltObject builtObject = SpacePorts[i];
                        if (builtObject == null)
                        {
                            continue;
                        }
                        if (!_UseAveragedVariableIncome && builtObject.DateOfLastIncome < num3)
                        {
                            if (builtObject.CurrentYearsIncome < (double)(builtObject.AnnualSupportCost * 2))
                            {
                                builtObject.ConsecutiveUnprofitableYears++;
                            }
                            builtObject.CurrentYearsIncome = 0.0;
                        }
                        num += builtObject.CurrentYearsIncome;
                    }
                }
                if (MiningStations != null)
                {
                    for (int j = 0; j < MiningStations.Count; j++)
                    {
                        BuiltObject builtObject2 = MiningStations[j];
                        if (builtObject2 == null)
                        {
                            continue;
                        }
                        if (!_UseAveragedVariableIncome && builtObject2.DateOfLastIncome < num3)
                        {
                            if (builtObject2.CurrentYearsIncome < (double)(builtObject2.AnnualSupportCost * 2))
                            {
                                builtObject2.ConsecutiveUnprofitableYears++;
                            }
                            builtObject2.CurrentYearsIncome = 0.0;
                        }
                        num += builtObject2.CurrentYearsIncome;
                    }
                }
                return num;
            }
        }

        public double ThisYearsStateFuelCosts => _ThisYearsStateFuelCosts;

        public double ThisYearsPrivateFuelCosts => _ThisYearsPrivateFuelCosts;

        public long NextAllowableLeaderChangeDate
        {
            get
            {
                double val = 1.0;
                if (_GovernmentAttributes != null)
                {
                    val = _GovernmentAttributes.LeaderReplacementLikeliness;
                }
                double num = 3.0 * (1.0 / Math.Max(0.001, val));
                return LastLeaderChangeDate + (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * num);
            }
        }

        public int FleetMaximumCount
        {
            get
            {
                int num = Galaxy.FleetMaximumCount;
                if (BuiltObjects != null)
                {
                    num = Math.Min(100, Math.Max(num, BuiltObjects.Count / 10));
                }
                return num;
            }
        }

        public DistressSignalList DistressSignals
        {
            get
            {
                return _DistressSignals;
            }
            set
            {
                _DistressSignals = value;
            }
        }

        public Habitat Capital
        {
            get
            {
                return _Capital;
            }
            set
            {
                _Capital = value;
            }
        }

        public GalaxyResourceMap ResourceMap
        {
            get
            {
                return _ResourceMap;
            }
            set
            {
                _ResourceMap = value;
            }
        }

        public string TroopDescription
        {
            get
            {
                return _TroopDescription;
            }
            set
            {
                _TroopDescription = value;
            }
        }

        public TroopList Troops
        {
            get
            {
                return _Troops;
            }
            set
            {
                _Troops = value;
            }
        }

        public int TroopPictureRef
        {
            get
            {
                return _TroopPictureRef;
            }
            set
            {
                _TroopPictureRef = value;
            }
        }

        public ResearchSystem Research
        {
            get
            {
                return _Research;
            }
            set
            {
                _Research = value;
            }
        }

        public DesignList Designs
        {
            get
            {
                return _Designs;
            }
            set
            {
                _Designs = value;
            }
        }

        public DesignList LatestDesigns
        {
            get
            {
                return _LatestDesigns;
            }
            set
            {
                _LatestDesigns = value;
            }
        }

        public DesignList ForeignDesigns
        {
            get
            {
                return _ForeignDesigns;
            }
            set
            {
                _ForeignDesigns = value;
            }
        }

        public BuiltObjectList ResourceExtractors
        {
            get
            {
                return _ResourceExtractors;
            }
            set
            {
                _ResourceExtractors = value;
            }
        }

        public BuiltObjectList Manufacturers
        {
            get
            {
                return _Manufacturers;
            }
            set
            {
                _Manufacturers = value;
            }
        }

        public BuiltObjectList ConstructionYards
        {
            get
            {
                return _ConstructionYards;
            }
            set
            {
                _ConstructionYards = value;
            }
        }

        public BuiltObjectList ResortBases
        {
            get
            {
                return _ResortBases;
            }
            set
            {
                _ResortBases = value;
            }
        }

        public BuiltObjectList ResupplyShips
        {
            get
            {
                return _ResupplyShips;
            }
            set
            {
                _ResupplyShips = value;
            }
        }

        public BuiltObjectList PlanetDestroyers
        {
            get
            {
                return _PlanetDestroyers;
            }
            set
            {
                _PlanetDestroyers = value;
            }
        }

        public BuiltObjectList ConstructionShips
        {
            get
            {
                return _ConstructionShips;
            }
            set
            {
                _ConstructionShips = value;
            }
        }

        public double LeaderChangeInfluence => _LeaderChangeInfluence;

        public IntelligenceMissionList IntelligenceMissions
        {
            get
            {
                return _IntelligenceMissions;
            }
            set
            {
                _IntelligenceMissions = value;
            }
        }

        public BuiltObjectList Outlaws
        {
            get
            {
                return _Outlaws;
            }
            set
            {
                _Outlaws = value;
            }
        }

        public DiplomaticRelationList ProposedDiplomaticRelations
        {
            get
            {
                return _ProposedDiplomaticRelations;
            }
            set
            {
                _ProposedDiplomaticRelations = value;
            }
        }

        public Color MainColor
        {
            get
            {
                return _MainColor;
            }
            set
            {
                _MainColor = value;
            }
        }

        public Color SecondaryColor
        {
            get
            {
                return _SecondaryColor;
            }
            set
            {
                _SecondaryColor = value;
            }
        }

        public int FlagShape
        {
            get
            {
                return _FlagShape;
            }
            set
            {
                _FlagShape = value;
            }
        }

        public Bitmap SmallFlagPicture
        {
            get
            {
                return _SmallFlagPicture;
            }
            set
            {
                _SmallFlagPicture = value;
            }
        }

        public Bitmap LargeFlagPicture
        {
            get
            {
                return _LargeFlagPicture;
            }
            set
            {
                _LargeFlagPicture = value;
            }
        }

        public Race DominantRace
        {
            get
            {
                return _DominantRace;
            }
            set
            {
                _DominantRace = value;
                if (_DominantRace != null)
                {
                    _DesignPictureFamilyIndex = _DominantRace.DesignPictureFamilyIndex;
                }
            }
        }

        public double TaxRate => _TaxRate;

        public Empire ParentEmpire
        {
            get
            {
                return _ParentEmpire;
            }
            set
            {
                _ParentEmpire = value;
            }
        }

        public bool LetOthersProvideFreight
        {
            get
            {
                return _LetOthersProvideFreight;
            }
            set
            {
                _LetOthersProvideFreight = value;
            }
        }

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                _Name = value;
            }
        }

        public int Score
        {
            get
            {
                return _Score;
            }
            set
            {
                _Score = value;
            }
        }

        public double StateMoney
        {
            get
            {
                return _StateMoney;
            }
            set
            {
                _StateMoney = value;
            }
        }

        public double PrivateMoney
        {
            get
            {
                return _PrivateMoney;
            }
            set
            {
                _PrivateMoney = value;
            }
        }

        public int IntelligenceSpending
        {
            get
            {
                return _IntelligenceSpending;
            }
            set
            {
                _IntelligenceSpending = value;
            }
        }

        public int CounterEspionageSpending
        {
            get
            {
                return _CounterEspionageSpending;
            }
            set
            {
                _CounterEspionageSpending = value;
            }
        }

        public int CounterSabotageSpending
        {
            get
            {
                return _CounterSabotageSpending;
            }
            set
            {
                _CounterSabotageSpending = value;
            }
        }

        public int GovernmentId
        {
            get
            {
                return _GovernmentId;
            }
            set
            {
                _GovernmentId = value;
            }
        }

        public GovernmentAttributes GovernmentAttributes => _GovernmentAttributes;

        public void AddLocationHint(Point location)
        {
            lock (LocationHintLock)
            {
                Rectangle rectangle = new Rectangle(location.X - Galaxy.MaxSolarSystemSize, location.Y - Galaxy.MaxSolarSystemSize, Galaxy.MaxSolarSystemSize * 2, Galaxy.MaxSolarSystemSize * 2);
                foreach (Point locationHint in LocationHints)
                {
                    if (rectangle.Contains(locationHint))
                    {
                        return;
                    }
                }
                LocationHints.Add(location);
            }
        }

        public void SetPirateFactionModifiers(PiratePlayStyle piratePlayStyle)
        {
            BaconEmpire.SetPirateFactionModifiers(this, piratePlayStyle);
        }

        public List<string> ResolveEmpireAbilityBonusDescriptions()
        {
            RaceList bonusRaces = new RaceList();
            return ResolveEmpireAbilityBonusDescriptions(includeDominantRaceInDescriptions: false, out bonusRaces);
        }

        public List<string> ResolveEmpireAbilityBonusDescriptions(bool includeDominantRaceInDescriptions, out RaceList bonusRaces)
        {
            List<string> list = new List<string>();
            bonusRaces = new RaceList();
            if (_ShipMaintenanceSavings > 0.0)
            {
                string text = Galaxy.ResolveEmpireAbilityBonusDescriptionShipMaintenance(_ShipMaintenanceSavings);
                if (includeDominantRaceInDescriptions || _ShipMaintenanceSavingsRace != DominantRace)
                {
                    text = text + " (" + string.Format(TextResolver.GetText("BONUS from RACE"), _ShipMaintenanceSavingsRace.Name) + ")";
                }
                list.Add(text);
                bonusRaces.Add(_ShipMaintenanceSavingsRace);
            }
            if (_ResourceExtractionBonus > 0.0)
            {
                string text2 = Galaxy.ResolveEmpireAbilityBonusDescriptionResourceExtraction(_ResourceExtractionBonus);
                if (includeDominantRaceInDescriptions || _ResourceExtractionBonusRace != DominantRace)
                {
                    text2 = text2 + " (" + string.Format(TextResolver.GetText("BONUS from RACE"), _ResourceExtractionBonusRace.Name) + ")";
                }
                list.Add(text2);
                bonusRaces.Add(_ResourceExtractionBonusRace);
            }
            if (_ResearchBonus > 0.0)
            {
                string text3 = Galaxy.ResolveEmpireAbilityBonusDescriptionResearch(_ResearchBonus);
                if (includeDominantRaceInDescriptions || _ResearchBonusRace != DominantRace)
                {
                    text3 = text3 + " (" + string.Format(TextResolver.GetText("BONUS from RACE"), _ResearchBonusRace.Name) + ")";
                }
                list.Add(text3);
                bonusRaces.Add(_ResearchBonusRace);
            }
            if (_EspionageBonus > 0.0)
            {
                string text4 = Galaxy.ResolveEmpireAbilityBonusDescriptionEspionage(_EspionageBonus);
                if (includeDominantRaceInDescriptions || _EspionageBonusRace != DominantRace)
                {
                    text4 = text4 + " (" + string.Format(TextResolver.GetText("BONUS from RACE"), _EspionageBonusRace.Name) + ")";
                }
                list.Add(text4);
                bonusRaces.Add(_EspionageBonusRace);
            }
            if (_TradeBonus > 0.0)
            {
                string text5 = Galaxy.ResolveEmpireAbilityBonusDescriptionTrade(_TradeBonus);
                if (includeDominantRaceInDescriptions || _TradeBonusRace != DominantRace)
                {
                    text5 = text5 + " (" + string.Format(TextResolver.GetText("BONUS from RACE"), _TradeBonusRace.Name) + ")";
                }
                list.Add(text5);
                bonusRaces.Add(_TradeBonusRace);
            }
            return list;
        }

        public List<string> ReviewEmpireAbilityBonuses()
        {
            RaceList newAbilityRaces = new RaceList();
            Race raceChanged = null;
            return ReviewEmpireAbilityBonuses(out newAbilityRaces, out raceChanged);
        }

        public List<string> ReviewEmpireAbilityBonuses(out RaceList newAbilityRaces, out Race raceChanged)
        {
            newAbilityRaces = new RaceList();
            raceChanged = null;
            if (this == _Galaxy.IndependentEmpire)
            {
                return new List<string>();
            }
            double num = 0.0;
            double num2 = 0.0;
            double num3 = 0.0;
            double num4 = 0.0;
            double num5 = 0.0;
            Race race = null;
            Race race2 = null;
            Race race3 = null;
            Race race4 = null;
            Race race5 = null;
            RaceList raceList = new RaceList();
            List<double> list = new List<double>();
            raceList.Add(DominantRace);
            list.Add(0.0);
            double num6 = 0.0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                for (int j = 0; j < habitat.Population.Count; j++)
                {
                    Population population = habitat.Population[j];
                    int num7 = raceList.IndexOf(population.Race);
                    if (num7 >= 0)
                    {
                        list[num7] += (double)population.Amount / 1000000.0;
                    }
                    else
                    {
                        raceList.Add(population.Race);
                        list.Add((double)population.Amount / 1000000.0);
                    }
                    num6 += (double)population.Amount / 1000000.0;
                }
            }
            for (int k = 0; k < raceList.Count; k++)
            {
                double val = 0.0;
                if (list[k] >= 10.0)
                {
                    val = list[k] / (num6 / 5.0);
                    val = Math.Max(0.1, val);
                }
                else if (list[k] > 0.0)
                {
                    val = 0.0;
                }
                val = Math.Min(1.0, val);
                double num8 = (double)raceList[k].ShipMaintenanceSavings / 100.0;
                double num9 = (double)raceList[k].ResourceExtractionBonus / 100.0;
                double num10 = (double)raceList[k].ResearchBonus / 100.0;
                double num11 = (double)raceList[k].EspionageBonus / 100.0;
                double num12 = (double)raceList[k].TradeBonus / 100.0;
                if (num8 * val > num)
                {
                    num = num8 * val;
                    race = raceList[k];
                }
                if (num9 * val > num2)
                {
                    num2 = num9 * val;
                    race2 = raceList[k];
                }
                if (num10 * val > num3)
                {
                    num3 = num10 * val;
                    race3 = raceList[k];
                }
                if (num11 * val > num4)
                {
                    num4 = num11 * val;
                    race4 = raceList[k];
                }
                if (num12 * val > num5)
                {
                    num5 = num12 * val;
                    race5 = raceList[k];
                }
            }
            List<string> list2 = new List<string>();
            if (num > _ShipMaintenanceSavings)
            {
                if (race != _ShipMaintenanceSavingsRace)
                {
                    raceChanged = race;
                }
                _ShipMaintenanceSavings = num;
                _ShipMaintenanceSavingsRace = race;
                list2.Add(Galaxy.ResolveEmpireAbilityBonusDescriptionShipMaintenance(num));
                newAbilityRaces.Add(race);
            }
            else if (num <= 0.0)
            {
                _ShipMaintenanceSavings = 0.0;
                _ShipMaintenanceSavingsRace = null;
            }
            if (num2 > _ResourceExtractionBonus)
            {
                if (race2 != _ResourceExtractionBonusRace)
                {
                    raceChanged = race2;
                }
                _ResourceExtractionBonus = num2;
                _ResourceExtractionBonusRace = race2;
                list2.Add(Galaxy.ResolveEmpireAbilityBonusDescriptionResourceExtraction(num2));
                newAbilityRaces.Add(race2);
            }
            else if (num2 <= 0.0)
            {
                _ResourceExtractionBonus = 0.0;
                _ResourceExtractionBonusRace = null;
            }
            if (num3 > _ResearchBonus)
            {
                if (race3 != _ResearchBonusRace)
                {
                    raceChanged = race3;
                }
                _ResearchBonus = num3;
                _ResearchBonusRace = race3;
                list2.Add(Galaxy.ResolveEmpireAbilityBonusDescriptionResearch(num3));
                newAbilityRaces.Add(race3);
            }
            else if (num3 <= 0.0)
            {
                _ResearchBonus = 0.0;
                _ResearchBonusRace = null;
            }
            if (num4 > _EspionageBonus)
            {
                if (race4 != _EspionageBonusRace)
                {
                    raceChanged = race4;
                }
                _EspionageBonus = num4;
                _EspionageBonusRace = race4;
                list2.Add(Galaxy.ResolveEmpireAbilityBonusDescriptionEspionage(num4));
                newAbilityRaces.Add(race4);
            }
            else if (num4 <= 0.0)
            {
                _EspionageBonus = 0.0;
                _EspionageBonusRace = null;
            }
            if (num5 > _TradeBonus)
            {
                if (race5 != _TradeBonusRace)
                {
                    raceChanged = race5;
                }
                _TradeBonus = num5;
                _TradeBonusRace = race5;
                list2.Add(Galaxy.ResolveEmpireAbilityBonusDescriptionTrade(num5));
                newAbilityRaces.Add(race5);
            }
            else if (num5 <= 0.0)
            {
                _TradeBonus = 0.0;
                _TradeBonusRace = null;
            }
            return list2;
        }

        public void RefreshAllowableGovernmentTypes()
        {
            if (PirateEmpireBaseHabitat == null)
            {
                _AllowableGovernmentTypes = ResolveDefaultAllowableGovernmentTypes(DominantRace, forceIncludeSpecialTypesIfRaceAllows: true);
            }
        }

        public string GetNextFleetNumberDescription()
        {
            _FleetIdentity++;
            string text = _FleetIdentity.ToString();
            switch (text.Substring(text.Length - 1, 1))
            {
                case "0":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    text += "th";
                    break;
                case "1":
                    text = ((_FleetIdentity % 100 != 11) ? (text + "st") : (text + "th"));
                    break;
                case "2":
                    text = ((_FleetIdentity % 100 != 12) ? (text + "nd") : (text + "th"));
                    break;
                case "3":
                    text = ((_FleetIdentity % 100 != 13) ? (text + "rd") : (text + "th"));
                    break;
            }
            return text;
        }

        public double CalculateRacialReputationConcern(Race race)
        {
            double result = 1.0;
            if (race != null)
            {
                result = (double)race.AggressionLevel / (double)race.FriendlinessLevel;
                result = result * result * result * result * result;
                result = Math.Max(1.0, result);
            }
            return result;
        }

        private string GetNewProperDesignName(BuiltObjectSubRole subRole)
        {
            string text = string.Empty;
            if (_DesignNamesUsage.Length < _Galaxy.DesignNames[_DesignNamesIndex].Length)
            {
                _DesignNamesUsage = new int[_Galaxy.DesignNames[_DesignNamesIndex].Length];
            }
            int num = 0;
            int[] designNamesUsage = _DesignNamesUsage;
            foreach (int num2 in designNamesUsage)
            {
                if (num2 > num)
                {
                    num = num2;
                }
            }
            bool flag = false;
            int[] designNamesUsage2 = _DesignNamesUsage;
            foreach (int num3 in designNamesUsage2)
            {
                if (num3 < num)
                {
                    flag = true;
                    break;
                }
            }
            if (!flag)
            {
                num++;
            }
            int num4 = 0;
            while (string.IsNullOrEmpty(text) && num4 < 50)
            {
                int num5 = Galaxy.Rnd.Next(0, _Galaxy.DesignNames[_DesignNamesIndex].Length);
                if (_DesignNamesUsage[num5] < num)
                {
                    text = _Galaxy.DesignNames[_DesignNamesIndex][num5];
                    _DesignNamesUsage[num5]++;
                }
                num4++;
            }
            if (string.IsNullOrEmpty(text))
            {
                Galaxy.SetRandom(new Random((int)DateTime.Now.Ticks));
                num4 = 0;
                while (string.IsNullOrEmpty(text) && num4 < 50)
                {
                    int num6 = Galaxy.Rnd.Next(0, _Galaxy.DesignNames[_DesignNamesIndex].Length);
                    if (_DesignNamesUsage[num6] < num)
                    {
                        text = _Galaxy.DesignNames[_DesignNamesIndex][num6];
                        _DesignNamesUsage[num6]++;
                    }
                    num4++;
                }
            }
            if (string.IsNullOrEmpty(text))
            {
                text = Galaxy.ResolveDescription(subRole);
            }
            return text;
        }

        private string RomanNumeral(int number)
        {
            if (number > 10000 || number < 0)
            {
                return "[.]";
            }
            if (_StringBuilder == null)
            {
                _StringBuilder = new StringBuilder();
            }
            _StringBuilder.Clear();
            int num = 0;
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(number > 0, 100, ref iterationCount))
            {
                int value = _RomanNumbers[num].Value;
                if (number >= value)
                {
                    number -= value;
                    _StringBuilder.Append(_RomanNumbers[num].Rep);
                }
                else
                {
                    num++;
                }
            }
            return _StringBuilder.ToString();
        }

        public string GenerateDesignName(BuiltObjectSubRole subRole, Design previousDesign)
        {
            string text = string.Empty;
            int num = 0;
            bool flag = false;
            if (previousDesign == null)
            {
                flag = true;
            }
            else
            {
                Component component = Research.EvaluateDesiredComponent(ComponentCategoryType.Reactor, ShipDesignFocus.Balanced);
                foreach (Component component2 in previousDesign.Components)
                {
                    if (component2.Category == ComponentCategoryType.Reactor && component2.ComponentID != component.ComponentID)
                    {
                        flag = true;
                        break;
                    }
                }
            }
            switch (subRole)
            {
                case BuiltObjectSubRole.Escort:
                    if (string.IsNullOrEmpty(_EscortPrefix))
                    {
                        _EscortPrefix = GetNewProperDesignName(BuiltObjectSubRole.Escort);
                    }
                    _EscortCurrentModelNumber++;
                    if (flag)
                    {
                        _EscortPrefix = GetNewProperDesignName(BuiltObjectSubRole.Escort);
                        _EscortCurrentModelNumber = 1;
                    }
                    text = _EscortPrefix;
                    if (_EscortCurrentModelNumber > 1)
                    {
                        text = text + " " + RomanNumeral(_EscortCurrentModelNumber);
                    }
                    break;
                case BuiltObjectSubRole.Frigate:
                    if (string.IsNullOrEmpty(_FrigatePrefix))
                    {
                        _FrigatePrefix = GetNewProperDesignName(BuiltObjectSubRole.Frigate);
                    }
                    _FrigateCurrentModelNumber++;
                    if (flag)
                    {
                        _FrigatePrefix = GetNewProperDesignName(BuiltObjectSubRole.Frigate);
                        _FrigateCurrentModelNumber = 1;
                    }
                    text = _FrigatePrefix;
                    if (_FrigateCurrentModelNumber > 1)
                    {
                        text = text + " " + RomanNumeral(_FrigateCurrentModelNumber);
                    }
                    break;
                case BuiltObjectSubRole.Destroyer:
                    if (string.IsNullOrEmpty(_DestroyerPrefix))
                    {
                        _DestroyerPrefix = GetNewProperDesignName(BuiltObjectSubRole.Destroyer);
                    }
                    _DestroyerCurrentModelNumber++;
                    if (flag)
                    {
                        _DestroyerPrefix = GetNewProperDesignName(BuiltObjectSubRole.Destroyer);
                        _DestroyerCurrentModelNumber = 1;
                    }
                    text = _DestroyerPrefix;
                    if (_DestroyerCurrentModelNumber > 1)
                    {
                        text = text + " " + RomanNumeral(_DestroyerCurrentModelNumber);
                    }
                    break;
                case BuiltObjectSubRole.Cruiser:
                    if (string.IsNullOrEmpty(_CruiserPrefix))
                    {
                        _CruiserPrefix = GetNewProperDesignName(BuiltObjectSubRole.Cruiser);
                    }
                    _CruiserCurrentModelNumber++;
                    if (flag)
                    {
                        _CruiserPrefix = GetNewProperDesignName(BuiltObjectSubRole.Cruiser);
                        _CruiserCurrentModelNumber = 1;
                    }
                    text = _CruiserPrefix;
                    if (_CruiserCurrentModelNumber > 1)
                    {
                        text = text + " " + RomanNumeral(_CruiserCurrentModelNumber);
                    }
                    break;
                case BuiltObjectSubRole.CapitalShip:
                    if (string.IsNullOrEmpty(_CapitalShipPrefix))
                    {
                        _CapitalShipPrefix = GetNewProperDesignName(BuiltObjectSubRole.CapitalShip);
                    }
                    _CapitalShipCurrentModelNumber++;
                    if (flag)
                    {
                        _CapitalShipPrefix = GetNewProperDesignName(BuiltObjectSubRole.CapitalShip);
                        _CapitalShipCurrentModelNumber = 1;
                    }
                    text = _CapitalShipPrefix;
                    if (_CapitalShipCurrentModelNumber > 1)
                    {
                        text = text + " " + RomanNumeral(_CapitalShipCurrentModelNumber);
                    }
                    break;
                case BuiltObjectSubRole.TroopTransport:
                    if (string.IsNullOrEmpty(_TroopTransportPrefix))
                    {
                        _TroopTransportPrefix = GetNewProperDesignName(BuiltObjectSubRole.TroopTransport);
                    }
                    _TroopTransportCurrentModelNumber++;
                    if (flag)
                    {
                        _TroopTransportPrefix = GetNewProperDesignName(BuiltObjectSubRole.TroopTransport);
                        _TroopTransportCurrentModelNumber = 1;
                    }
                    text = _TroopTransportPrefix;
                    if (_TroopTransportCurrentModelNumber > 1)
                    {
                        text = text + " " + RomanNumeral(_TroopTransportCurrentModelNumber);
                    }
                    break;
                case BuiltObjectSubRole.Carrier:
                    _CarrierCurrentModelNumber++;
                    text = "CX-" + _CarrierCurrentModelNumber + " " + TextResolver.GetText("Ship SubRole Carrier");
                    break;
                case BuiltObjectSubRole.ResupplyShip:
                    {
                        string[] array = new string[4]
                        {
                TextResolver.GetText("Ship SubRole ResupplyShip"),
                TextResolver.GetText("Mothership"),
                TextResolver.GetText("Refuelling Base"),
                TextResolver.GetText("Fleet Supply Ship")
                        };
                        string text2 = array[Galaxy.Rnd.Next(0, array.Length)];
                        _ResupplyShipCurrentModelNumber++;
                        text = "RS-" + _ResupplyShipCurrentModelNumber + " " + text2;
                        break;
                    }
                case BuiltObjectSubRole.SmallFreighter:
                    {
                        string[] array = new string[6]
                        {
                TextResolver.GetText("Light Transport"),
                TextResolver.GetText("Light Trader"),
                TextResolver.GetText("Light Hauler"),
                TextResolver.GetText("Light Freighter"),
                TextResolver.GetText("Cargo Shuttle"),
                TextResolver.GetText("Merchant Freighter")
                        };
                        if (string.IsNullOrEmpty(_SmallFreighterPrefix))
                        {
                            _SmallFreighterPrefix = GenerateDesignNamePrefix();
                        }
                        num = Galaxy.Rnd.Next(1, 4);
                        _SmallFreighterCurrentModelNumber += num * 100;
                        if (flag)
                        {
                            _SmallFreighterPrefix = GenerateDesignNamePrefix();
                            _SmallFreighterName = array[Galaxy.Rnd.Next(0, array.Length)];
                            _SmallFreighterCurrentModelNumber = 1000;
                        }
                        text = _SmallFreighterPrefix + _SmallFreighterCurrentModelNumber + " " + _SmallFreighterName;
                        break;
                    }
                case BuiltObjectSubRole.MediumFreighter:
                    {
                        string[] array = new string[6]
                        {
                TextResolver.GetText("Medium Transport"),
                TextResolver.GetText("Cargo Freighter"),
                TextResolver.GetText("Cargo Hauler"),
                TextResolver.GetText("Ship SubRole MediumFreighter"),
                TextResolver.GetText("Cargo Ferry"),
                TextResolver.GetText("Freight Hauler")
                        };
                        if (string.IsNullOrEmpty(_MediumFreighterPrefix))
                        {
                            _MediumFreighterPrefix = GenerateDesignNamePrefix();
                        }
                        num = Galaxy.Rnd.Next(1, 4);
                        _MediumFreighterCurrentModelNumber += num * 100;
                        if (flag)
                        {
                            _MediumFreighterPrefix = GenerateDesignNamePrefix();
                            _MediumFreighterName = array[Galaxy.Rnd.Next(0, array.Length)];
                            _MediumFreighterCurrentModelNumber = 1000;
                        }
                        text = _MediumFreighterPrefix + _MediumFreighterCurrentModelNumber + " " + _MediumFreighterName;
                        break;
                    }
                case BuiltObjectSubRole.LargeFreighter:
                    {
                        string[] array = new string[7]
                        {
                TextResolver.GetText("Super Hauler"),
                TextResolver.GetText("Cargo Carrier"),
                TextResolver.GetText("Heavy Freighter"),
                TextResolver.GetText("Cargo Barge"),
                TextResolver.GetText("Bulk Freighter"),
                TextResolver.GetText("Heavy Lifter"),
                TextResolver.GetText("Bulk Transport")
                        };
                        if (string.IsNullOrEmpty(_LargeFreighterPrefix))
                        {
                            _LargeFreighterPrefix = GenerateDesignNamePrefix();
                        }
                        num = Galaxy.Rnd.Next(1, 4);
                        _LargeFreighterCurrentModelNumber += num * 100;
                        if (flag)
                        {
                            _LargeFreighterPrefix = GenerateDesignNamePrefix();
                            _LargeFreighterName = array[Galaxy.Rnd.Next(0, array.Length)];
                            _LargeFreighterCurrentModelNumber = 1000;
                        }
                        text = _LargeFreighterPrefix + _LargeFreighterCurrentModelNumber + " " + _LargeFreighterName;
                        break;
                    }
                case BuiltObjectSubRole.GasMiningShip:
                    {
                        string[] array = new string[5]
                        {
                TextResolver.GetText("Gas Prospector"),
                TextResolver.GetText("Ship SubRole GasMiningShip"),
                TextResolver.GetText("Gas Miner"),
                TextResolver.GetText("Gas Hauler"),
                TextResolver.GetText("Gas Tanker")
                        };
                        if (string.IsNullOrEmpty(_GasMiningShipPrefix))
                        {
                            _GasMiningShipPrefix = GenerateDesignNamePrefix();
                        }
                        num = Galaxy.Rnd.Next(1, 4);
                        _GasMiningShipCurrentModelNumber += num * 100;
                        if (flag)
                        {
                            _GasMiningShipPrefix = GenerateDesignNamePrefix();
                            _GasMiningShipName = array[Galaxy.Rnd.Next(0, array.Length)];
                            _GasMiningShipCurrentModelNumber = 1000;
                        }
                        text = _GasMiningShipPrefix + _GasMiningShipCurrentModelNumber + " " + _GasMiningShipName;
                        break;
                    }
                case BuiltObjectSubRole.MiningShip:
                    {
                        string[] array = new string[5]
                        {
                TextResolver.GetText("Ore Prospector"),
                TextResolver.GetText("Ore Hauler"),
                TextResolver.GetText("Miner"),
                TextResolver.GetText("Ship SubRole MiningShip"),
                TextResolver.GetText("Mineral Miner")
                        };
                        if (string.IsNullOrEmpty(_MiningShipPrefix))
                        {
                            _MiningShipPrefix = GenerateDesignNamePrefix();
                        }
                        num = Galaxy.Rnd.Next(1, 4);
                        _MiningShipCurrentModelNumber += num * 100;
                        if (flag)
                        {
                            _MiningShipPrefix = GenerateDesignNamePrefix();
                            _MiningShipName = array[Galaxy.Rnd.Next(0, array.Length)];
                            _MiningShipCurrentModelNumber = 1000;
                        }
                        text = _MiningShipPrefix + _MiningShipCurrentModelNumber + " " + _MiningShipName;
                        break;
                    }
                case BuiltObjectSubRole.ResortBase:
                    _ResortBaseCurrentModelNumber++;
                    text = "RB-" + _ResortBaseCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.WeaponsResearchStation:
                    _WeaponsResearchStationCurrentModelNumber++;
                    text = "WRS-" + _WeaponsResearchStationCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.EnergyResearchStation:
                    _EnergyResearchStationCurrentModelNumber++;
                    text = "ERS-" + _EnergyResearchStationCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.HighTechResearchStation:
                    _HighTechResearchStationCurrentModelNumber++;
                    text = "HTRS-" + _HighTechResearchStationCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.MonitoringStation:
                    _MonitoringStationCurrentModelNumber++;
                    text = "MON-" + _MonitoringStationCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.DefensiveBase:
                    _DefensiveBaseCurrentModelNumber++;
                    text = "DFB-" + _DefensiveBaseCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.SmallSpacePort:
                    _SmallSpacePortCurrentModelNumber++;
                    text = "SSP-" + _SmallSpacePortCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.MediumSpacePort:
                    _MediumSpacePortCurrentModelNumber++;
                    text = "MSP-" + _MediumSpacePortCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.LargeSpacePort:
                    _LargeSpacePortCurrentModelNumber++;
                    text = "LSP-" + _LargeSpacePortCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.MiningStation:
                    _MiningStationCurrentModelNumber++;
                    text = "MS-" + _MiningStationCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.GasMiningStation:
                    _GasMiningStationCurrentModelNumber++;
                    text = "GMS-" + _GasMiningStationCurrentModelNumber;
                    break;
                case BuiltObjectSubRole.ConstructionShip:
                    {
                        string[] array = new string[4]
                        {
                TextResolver.GetText("Ship SubRole ConstructionShip"),
                TextResolver.GetText("Constructor"),
                TextResolver.GetText("Ship Yard"),
                TextResolver.GetText("Space Dock")
                        };
                        string text2 = array[Galaxy.Rnd.Next(0, array.Length)];
                        _ConstructionShipCurrentModelNumber++;
                        text = "CST-" + _ConstructionShipCurrentModelNumber + " " + text2;
                        break;
                    }
                case BuiltObjectSubRole.PassengerShip:
                    {
                        string[] array = new string[6]
                        {
                TextResolver.GetText("Ship SubRole PassengerShip"),
                TextResolver.GetText("Space Liner"),
                TextResolver.GetText("Commuter"),
                TextResolver.GetText("Traveller"),
                TextResolver.GetText("Tourist"),
                TextResolver.GetText("Migrant")
                        };
                        string text2 = array[Galaxy.Rnd.Next(0, array.Length)];
                        _PassengerShipCurrentModelNumber++;
                        text = "PS-" + _PassengerShipCurrentModelNumber + " " + text2;
                        break;
                    }
                case BuiltObjectSubRole.ExplorationShip:
                    {
                        string[] array = new string[6]
                        {
                TextResolver.GetText("Scout"),
                TextResolver.GetText("Surveyor"),
                TextResolver.GetText("Pathfinder"),
                TextResolver.GetText("Explorer"),
                TextResolver.GetText("Traveller"),
                TextResolver.GetText("Navigator")
                        };
                        string text2 = array[Galaxy.Rnd.Next(0, array.Length)];
                        _ExplorationShipCurrentModelNumber++;
                        text = "EX-" + _ExplorationShipCurrentModelNumber + " " + text2;
                        break;
                    }
                case BuiltObjectSubRole.ColonyShip:
                    {
                        string[] array = new string[4]
                        {
                TextResolver.GetText("Colonizer"),
                TextResolver.GetText("Settler"),
                TextResolver.GetText("World Founder"),
                TextResolver.GetText("Ship SubRole ColonyShip")
                        };
                        string text2 = array[Galaxy.Rnd.Next(0, array.Length)];
                        _ColonyShipCurrentModelNumber++;
                        text = "CLN-" + _ColonyShipCurrentModelNumber + " " + text2;
                        break;
                    }
                case BuiltObjectSubRole.GenericBase:
                    text = TextResolver.GetText("Ship SubRole GenericBase");
                    break;
            }
            return text;
        }

        private string GenerateDesignNamePrefix()
        {
            return ((char)Galaxy.Rnd.Next(65, 91)).ToString() + (char)Galaxy.Rnd.Next(65, 91);
        }

        public Habitat SelectBestCandidateForCapital()
        {
            Habitat result = null;
            int num = 0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat.StrategicValue > num)
                {
                    result = habitat;
                    num = habitat.StrategicValue;
                }
            }
            return result;
        }

        public void SetPirateRelationEmpires(Galaxy galaxy)
        {
            if (PirateRelations != null)
            {
                PirateRelations.FixupEmpires(galaxy);
            }
        }

        public void SetAutomationSettings(GameOptions gameOptions)
        {
            ControlColonization = gameOptions.ControlColonizationDefault;
            ControlColonyTaxRates = gameOptions.ControlColonyTaxRatesDefault;
            ControlDesigns = gameOptions.ControlShipDesignDefault;
            ControlDiplomacyGifts = gameOptions.ControlDiplomaticGiftsDefault;
            ControlDiplomacyOffense = gameOptions.ControlWarTradeSanctionsDefault;
            ControlDiplomacyTreaties = gameOptions.ControlTreatyNegotiationDefault;
            ControlMilitaryAttacks = gameOptions.ControlAttacksOnEnemiesDefault;
            ControlMilitaryFleets = gameOptions.ControlFleetFormationDefault;
            ControlStateConstruction = gameOptions.ControlShipBuildingDefault;
            ControlTroopGeneration = gameOptions.ControlTroopRecruitmentDefault;
            ControlAgentAssignment = gameOptions.ControlAgentAssignmentDefault;
            ControlResearch = gameOptions.ControlResearchDefault;
            ControlColonyFacilities = gameOptions.ControlColonyFacilitiesDefault;
            ControlCharacterLocations = gameOptions.ControlCharacterLocationsDefault;
            ControlPopulationPolicy = gameOptions.ControlPopulationPolicyDefault;
            ControlOfferPirateMissions = gameOptions.ControlOfferPirateMissionsDefault;
            AttackOvermatchFactor = gameOptions.AttackOverMatchFactor;
            AttackRangePatrol = gameOptions.AttackRangePatrol;
            AttackRangeEscort = gameOptions.AttackRangeEscort;
            AttackRangeOther = gameOptions.AttackRangeOther;
            AttackRangeAttack = gameOptions.AttackRangeAttack;
            FleetAttackRefuelPortion = gameOptions.FleetAttackRefuelPortion;
            FleetAttackGatherPortion = gameOptions.FleetAttackGatherPortion;
            DiscoveryActionRuin = gameOptions.DiscoveryActionRuin;
            DiscoveryActionAbandonedShipBase = gameOptions.DiscoveryActionAbandonedShipBase;
            NewShipsAutomated = gameOptions.NewShipsAutomated;
        }

        public void SetAutomationSettingsFullyAutomated()
        {
            ControlColonization = AutomationLevel.FullyAutomated;
            ControlColonyTaxRates = true;
            ControlDesigns = true;
            ControlDiplomacyGifts = AutomationLevel.FullyAutomated;
            ControlDiplomacyOffense = AutomationLevel.FullyAutomated;
            ControlDiplomacyTreaties = AutomationLevel.FullyAutomated;
            ControlMilitaryAttacks = AutomationLevel.FullyAutomated;
            ControlMilitaryFleets = true;
            ControlStateConstruction = AutomationLevel.FullyAutomated;
            ControlTroopGeneration = true;
            ControlAgentAssignment = AutomationLevel.FullyAutomated;
            ControlResearch = true;
            ControlColonyFacilities = AutomationLevel.FullyAutomated;
            ControlCharacterLocations = true;
            ControlPopulationPolicy = true;
            ControlOfferPirateMissions = AutomationLevel.FullyAutomated;
            AttackOvermatchFactor = 2f;
            AttackRangePatrol = 48000;
            AttackRangeEscort = 2000;
            AttackRangeOther = 48000;
            AttackRangeAttack = 2000;
            FleetAttackRefuelPortion = 0.3f;
            FleetAttackGatherPortion = 0.3f;
            DiscoveryActionRuin = 0;
            DiscoveryActionAbandonedShipBase = 0;
            NewShipsAutomated = true;
        }

        public void SetDefaultsForLists()
        {
            _ColonizationTargets = new HabitatPrioritizationList();
            _ResourceTargets = new HabitatPrioritizationList();
            _EmpireResourceTargets = new HabitatPrioritizationList();
            _DesiredForeignColonies = new HabitatPrioritizationList();
            _EmpiresWithDesiredColonies = new EmpireList();
            _MonitoringHabitats = new HabitatList();
            _MonitoringPoints = new List<Point>();
            _ResearchHabitats = new HabitatList();
            _ResortHabitats = new PrioritizedTargetList();
            _MigrationSources = new PrioritizedTargetList();
            _MigrationDestinations = new PrioritizedTargetList();
            _TourismSources = new PrioritizedTargetList();
            _TourismDestinations = new PrioritizedTargetList();
            _ResortBaseBuildLocations = new PrioritizedTargetList();
            _RefuellingLocations = new StellarObjectList();
            _RefuellingLocationsMilitaryOnly = new StellarObjectList();
            if (SmugglingIncomeFactor == 0.0)
            {
                SmugglingIncomeFactor = 1.0;
            }
            if (RaidStrengthFactor == 0.0)
            {
                RaidStrengthFactor = 1.0;
            }
            if (RaidBonusFactor == 0.0)
            {
                RaidBonusFactor = 1.0;
            }
            if (ShipMaintenancePrivateFactor == 0.0)
            {
                ShipMaintenancePrivateFactor = 1.0;
            }
            if (ShipMaintenanceStateFactor == 0.0)
            {
                ShipMaintenanceStateFactor = 1.0;
            }
            if (ResearchWeaponsFactor == 0.0)
            {
                ResearchWeaponsFactor = 1.0;
            }
            if (ResearchEnergyFactor == 0.0)
            {
                ResearchEnergyFactor = 1.0;
            }
            if (ResearchHighTechFactor == 0.0)
            {
                ResearchHighTechFactor = 1.0;
            }
            if (PlanetaryFacilityEliminationFactor == 0.0)
            {
                PlanetaryFacilityEliminationFactor = 1.0;
            }
            if (LootingFactor == 0.0)
            {
                LootingFactor = 1.0;
            }
            if (PlanetaryFacilityBuildFactor == 0.0)
            {
                PlanetaryFacilityBuildFactor = 1.0;
            }
            if (PlanetaryWonderBuildFactor == 0.0)
            {
                PlanetaryWonderBuildFactor = 1.0;
            }
        }

        public Empire(Galaxy galaxy, string name, Habitat capital, Race dominantRace, int governmentId, double corruptionMultiplier, EmpirePolicy policy)
            : this(galaxy, name, capital, dominantRace, governmentId, corruptionMultiplier, policy, isPlayerEmpire: false)
        {
        }

        public Empire(Galaxy galaxy, string name, Habitat capital, Race dominantRace, int governmentId, double corruptionMultiplier, EmpirePolicy policy, bool isPlayerEmpire)
        {
            _Galaxy = galaxy;
            _Active = true;
            _EmpireId = _Galaxy.GetNextEmpireID();
            _Counters = new EmpireCounters(this);
            _PirateEconomy = new PirateEconomy(galaxy.CurrentStarDate);
            _ResourceMap.InitializeFlags(_Galaxy.Habitats.Count, _Galaxy);
            _Name = name;
            _Capital = capital;
            HomeWorld = _Capital;
            _DominantRace = dominantRace;
            CorruptionMultiplier = corruptionMultiplier;
            if (isPlayerEmpire && galaxy.ColonyNames != null && galaxy.ColonyNames.Count > galaxy.ColonyNameIndex)
            {
                string name2 = galaxy.ColonyNames[galaxy.ColonyNameIndex];
                galaxy.ColonyNameIndex++;
                capital.Name = name2;
            }
            LastDisasterDate = galaxy.CurrentStarDate;
            if (_DominantRace != null)
            {
                Policy.ResearchDesignOverallFocus = _DominantRace.ShipDesignFocus;
                Policy.ResearchDesignTechFocus1 = _DominantRace.TechFocus1;
                Policy.ResearchDesignTechFocus2 = _DominantRace.TechFocus2;
                Policy.ResearchDesignTechFocusType1 = _DominantRace.TechFocusType1;
                Policy.ResearchDesignTechFocusType2 = _DominantRace.TechFocusType2;
                if (!_DominantRace.Expanding)
                {
                    Reclusive = true;
                }
            }
            if (policy != null)
            {
                Policy = policy;
            }
            _AllowableGovernmentTypes = ResolveDefaultAllowableGovernmentTypes(_DominantRace, forceIncludeSpecialTypesIfRaceAllows: true);
            ChangeGovernment(governmentId);
            _DesignNamesIndex = _DominantRace.DesignNameIndex;
            if (string.IsNullOrEmpty(name))
            {
                _Name = GenerateEmpireName(governmentId);
            }
            BuiltObjects = new BuiltObjectList();
            ShipGroups = new ShipGroupList();
            Designs = new DesignList();
            LatestDesigns = new DesignList();
            Array values = Enum.GetValues(typeof(BuiltObjectSubRole));
            for (int i = 0; i < values.Length; i++)
            {
                LatestDesigns.Add(null);
            }
            ForeignDesigns = new DesignList();
            Characters = new CharacterList();
            Troops = new TroopList();
            IntelligenceMissions = new IntelligenceMissionList();
            Outlaws = new BuiltObjectList();
            DiplomaticRelations = new DiplomaticRelationList();
            _ProposedDiplomaticRelations = new DiplomaticRelationList();
            _ProposedDiplomaticRelations.InvertEmpireIndexing = true;
            Colonies = new HabitatList();
            ConstructionYards = new BuiltObjectList();
            DistressSignals = new DistressSignalList();
            Manufacturers = new BuiltObjectList();
            PrivateBuiltObjects = new BuiltObjectList();
            RefuellingDepots = new BuiltObjectList();
            ResourceExtractors = new BuiltObjectList();
            SpacePorts = new BuiltObjectList();
            MiningStations = new BuiltObjectList();
            Freighters = new BuiltObjectList();
            ConstructionShips = new BuiltObjectList();
            LongRangeScanners = new BuiltObjectList();
            ResearchFacilities = new BuiltObjectList();
            ResortBases = new BuiltObjectList();
            ResupplyShips = new BuiltObjectList();
            PlanetDestroyers = new BuiltObjectList();
            Messages = new EmpireMessageList();
            EmpireEvaluations = new EmpireEvaluationList();
            SystemVisibility = new SystemVisibilityList();
            for (int j = 0; j < _Galaxy.Systems.Count; j++)
            {
                SystemVisibility item = new SystemVisibility
                {
                    Status = SystemVisibilityStatus.Unexplored,
                    SystemStar = _Galaxy.Systems[j].SystemStar
                };
                SystemVisibility.Add(item);
            }
            ControlColonization = AutomationLevel.FullyAutomated;
            ControlColonyDevelopment = true;
            ControlColonyStockLevels = true;
            ControlColonyTaxRates = true;
            ControlDesigns = true;
            ControlDiplomacyGifts = AutomationLevel.FullyAutomated;
            ControlDiplomacyOffense = AutomationLevel.FullyAutomated;
            ControlDiplomacyTreaties = AutomationLevel.FullyAutomated;
            ControlMilitaryAttacks = AutomationLevel.FullyAutomated;
            ControlMilitaryFleets = true;
            ControlStateConstruction = AutomationLevel.FullyAutomated;
            ControlTroopGeneration = true;
            ControlAgentAssignment = AutomationLevel.FullyAutomated;
            ControlResearch = true;
            ControlColonyFacilities = AutomationLevel.FullyAutomated;
            ControlPopulationPolicy = true;
            ControlCharacterLocations = true;
            ControlOfferPirateMissions = AutomationLevel.FullyAutomated;
            SelectEmpireColors(isPirateFaction: false, out _MainColor, out _SecondaryColor);
            if (_DominantRace != null)
            {
                FlagShape = Galaxy.GenerateEmpireFlag(_MainColor, _SecondaryColor, _DominantRace.DefaultFlagShape, Galaxy.FlagShapes, ref _SmallFlagPicture, ref _LargeFlagPicture);
            }
            else
            {
                FlagShape = Galaxy.GenerateEmpireFlag(_MainColor, _SecondaryColor, -1, Galaxy.FlagShapes, ref _SmallFlagPicture, ref _LargeFlagPicture);
            }
            Habitat habitat = null;
            for (int k = 0; k < Galaxy.IndexMaxX; k++)
            {
                for (int l = 0; l < Galaxy.IndexMaxY; l++)
                {
                    HabitatList habitatList = galaxy.HabitatIndex[k][l];
                    for (int m = 0; m < habitatList.Count; m++)
                    {
                        if (habitatList[m] == _Capital)
                        {
                            if (_Capital.Category == HabitatCategoryType.Asteroid || _Capital.Category == HabitatCategoryType.Planet)
                            {
                                habitat = _Capital.Parent;
                                k = Galaxy.IndexMaxX;
                                l = Galaxy.IndexMaxY;
                                break;
                            }
                            if (_Capital.Category == HabitatCategoryType.Moon)
                            {
                                habitat = _Capital.Parent.Parent;
                                k = Galaxy.IndexMaxX;
                                l = Galaxy.IndexMaxY;
                                break;
                            }
                        }
                    }
                }
            }
            for (int n = 0; n < _Galaxy.Habitats.Count; n++)
            {
                Habitat habitat2 = _Galaxy.Habitats[n];
                bool known = false;
                if (habitat2.Category == HabitatCategoryType.Star)
                {
                    known = true;
                }
                if (habitat != null && (habitat2.Parent == habitat || (habitat2.Parent != null && habitat2.Parent.Parent == habitat)))
                {
                    known = true;
                    SystemVisibility[habitat2.SystemIndex].Status = SystemVisibilityStatus.Visible;
                }
                _ResourceMap.SetResourcesKnown(_Galaxy.Habitats[n], known);
            }
            if (_Capital != null)
            {
                if (_Capital.Troops == null)
                {
                    _Capital.Troops = new TroopList();
                }
                _TroopDescription = _DominantRace.TroopName;
                _TroopPictureRef = _DominantRace.PictureRef;
                _Capital.SetDevelopmentLevel(10);
            }
            _LastLongTouch = galaxy.CurrentDateTime.Subtract(new TimeSpan(0, 0, (int)_LongProcessingInterval + 1));
            _LastIntermediateTouch = _LastLongTouch;
            _LastPeriodicTouch = _LastLongTouch;
            _LastRegularTouch = _LastLongTouch;
            _LastShortTouch = _LastLongTouch;
            if (capital != null)
            {
                CargoList cargoList = new CargoList();
                if (capital.Cargo != null)
                {
                    foreach (Cargo item2 in capital.Cargo)
                    {
                        if (item2.EmpireId == _Galaxy.IndependentEmpire.EmpireId)
                        {
                            cargoList.Add(item2);
                        }
                    }
                    foreach (Cargo item3 in cargoList)
                    {
                        capital.Cargo.Remove(item3);
                        Cargo cargo = null;
                        if (item3.CommodityIsComponent)
                        {
                            cargo = new Cargo(item3.Component, item3.Amount, this, item3.Reserved);
                        }
                        else if (item3.CommodityIsResource)
                        {
                            cargo = new Cargo(item3.Resource, item3.Amount, this, item3.Reserved);
                        }
                        if (cargo != null)
                        {
                            capital.Cargo.Add(cargo);
                        }
                    }
                }
                SetStartupColonyResourceCargo(Capital);
            }
            _StateMoney = 30000.0;
            _PrivateMoney = 100000.0;
            _Research = new ResearchSystem();
            _Research.TechTree = Galaxy.ResearchNodeDefinitionsStatic.ObtainTechTree(dominantRace);
            _Research.TechTree = Galaxy.ResearchNodeDefinitionsStatic.SetTechTreeStartingDefaults(_Research.TechTree, dominantRace, policy);
            Research.Update(DominantRace);
            ReviewResearchAbilities();
            ReviewDesignsBuiltObjectsImprovedComponents();
            ReviewColonizationTypes();
            ReviewPopulationGrowthRates();
            int newSize = 0;
            ReviewMaximumConstructionSize(out newSize);
            ReviewCanBuildShipTypes();
            ReviewTroopTypes();
            LastLeaderChangeDate = _Galaxy.CurrentStarDate;
        }

        public int SetStartupColonyResourceCargo(Habitat colony)
        {
            int val = 1 + (int)(colony.Population.TotalAmount / 250000000);
            val = Math.Min(10, val);
            double num = Galaxy.ColonyAnnualResourceConsumptionRate * ((double)colony.Population.TotalAmount / 15.0);
            if (num < 1.0)
            {
                num = 1.0;
            }
            else if (num > 5.0)
            {
                num = 5.0;
            }
            Cargo cargo = null;
            if (colony.Cargo == null)
            {
                colony.Cargo = new CargoList();
            }
            for (int i = 0; i < _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null && resourceDefinition.ColonyManufacturingLevel <= 0)
                {
                    cargo = new Cargo(new Resource(resourceDefinition.ResourceID), (int)((double)(resourceDefinition.RelativeImportance * 6000f) * num), this);
                    colony.Cargo.Add(cargo);
                }
            }
            for (int j = 0; j < 4; j++)
            {
                int index = Galaxy.Rnd.Next(0, _Galaxy.ResourceSystem.LuxuryResources.Count);
                ResourceDefinition resourceDefinition2 = _Galaxy.ResourceSystem.LuxuryResources[index];
                if (resourceDefinition2 != null && resourceDefinition2.SuperLuxuryBonusAmount <= 0 && resourceDefinition2.ColonyManufacturingLevel <= 0)
                {
                    cargo = new Cargo(new Resource(resourceDefinition2.ResourceID), 600, this);
                    colony.Cargo.Add(cargo);
                }
            }
            long num2 = Math.Max(500000000L, colony.Population.TotalAmount);
            int num3 = (int)(Galaxy.ColonyAnnualLuxuryResourceConsumptionRate * (double)num2 * 5.0);
            num3 = Math.Max(num3 * 3, Galaxy.MinimumLuxuryResourceReorderAmount);
            num3 = Math.Max(400, num3);
            num3 = (int)((double)num3 * 1.5);
            for (int k = 0; k < val; k++)
            {
                Resource resource = _Galaxy.SelectRandomLuxuryResource();
                int num4 = colony.Cargo.IndexOf(resource, this);
                int num5 = 0;
                while (num4 >= 0 && num5 < 10)
                {
                    resource = _Galaxy.SelectRandomLuxuryResource();
                    num4 = colony.Cargo.IndexOf(resource, this);
                    num5++;
                }
                if (num4 >= 0)
                {
                    resource = _Galaxy.SelectRandomLuxuryResource();
                }
                cargo = new Cargo(new Resource(resource.ResourceID), num3, this);
                colony.Cargo.Add(cargo);
            }
            return val;
        }

        public static List<int> ResolveRaceSpecificGovernmentTypes(Race dominantRace)
        {
            List<int> list = new List<int>();
            if (dominantRace.SpecialGovernmentId >= 0)
            {
                list.Add(dominantRace.SpecialGovernmentId);
            }
            return list;
        }

        public static List<int> ResolveDefaultAllowableGovernmentTypes(Race dominantRace)
        {
            return ResolveDefaultAllowableGovernmentTypes(dominantRace, forceIncludeSpecialTypesIfRaceAllows: false);
        }

        public static List<int> ResolveDefaultAllowableGovernmentTypes(Race dominantRace, bool forceIncludeSpecialTypesIfRaceAllows)
        {
            List<int> list = new List<int>();
            for (int i = 0; i < Galaxy.GovernmentsStatic.Count; i++)
            {
                GovernmentAttributes governmentAttributes = Galaxy.GovernmentsStatic[i];
                if (governmentAttributes == null)
                {
                    continue;
                }
                bool flag = true;
                if (dominantRace != null && dominantRace.DisallowedGovernmentIds.Contains(governmentAttributes.GovernmentId))
                {
                    flag = false;
                }
                if (!flag)
                {
                    continue;
                }
                switch (governmentAttributes.Availability)
                {
                    case 0:
                        list.Add(governmentAttributes.GovernmentId);
                        break;
                    case 1:
                        if (dominantRace != null && dominantRace.SpecialGovernmentId == governmentAttributes.GovernmentId)
                        {
                            list.Add(governmentAttributes.GovernmentId);
                        }
                        break;
                    case 2:
                        if (dominantRace != null && (forceIncludeSpecialTypesIfRaceAllows || dominantRace.Name == "Mechanoid") && dominantRace.SpecialGovernmentId == governmentAttributes.GovernmentId)
                        {
                            list.Add(governmentAttributes.GovernmentId);
                        }
                        else if (dominantRace != null && dominantRace.SpecialGovernmentId == governmentAttributes.GovernmentId)
                        {
                            list.Add(governmentAttributes.GovernmentId);
                        }
                        break;
                    case 3:
                        if (dominantRace != null && (forceIncludeSpecialTypesIfRaceAllows || dominantRace.Name == "Shakturi") && dominantRace.SpecialGovernmentId == governmentAttributes.GovernmentId)
                        {
                            list.Add(governmentAttributes.GovernmentId);
                        }
                        else if (dominantRace != null && dominantRace.SpecialGovernmentId == governmentAttributes.GovernmentId)
                        {
                            list.Add(governmentAttributes.GovernmentId);
                        }
                        break;
                }
            }
            return list;
        }

        public void GenerateDesignSpecifications(Galaxy galaxy, Race dominantRace, bool isPirate, string raceNameOverride)
        {
            _DesignSpecifications.Clear();
            PlanetDestroyerDesignSpecification = null;
            if (!isPirate)
            {
                PlanetDestroyerDesignSpecification = DesignSpecification.LoadFromFile(galaxy.ApplicationStartupPath, galaxy.CustomizationSetPath, "PlanetDestroyer", BuiltObjectSubRole.CapitalShip, isMobile: true, dominantRace, isPirate, standAlone: true, raceNameOverride);
            }
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "CapitalShip", BuiltObjectSubRole.CapitalShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "Carrier", BuiltObjectSubRole.Carrier, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "ColonyShip", BuiltObjectSubRole.ColonyShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "ConstructionShip", BuiltObjectSubRole.ConstructionShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "Cruiser", BuiltObjectSubRole.Cruiser, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "DefensiveBase", BuiltObjectSubRole.DefensiveBase, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "Destroyer", BuiltObjectSubRole.Destroyer, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "EnergyResearchStation", BuiltObjectSubRole.EnergyResearchStation, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "Escort", BuiltObjectSubRole.Escort, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "ExplorationShip", BuiltObjectSubRole.ExplorationShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "Frigate", BuiltObjectSubRole.Frigate, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "GasMiningShip", BuiltObjectSubRole.GasMiningShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "GasMiningStation", BuiltObjectSubRole.GasMiningStation, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "HighTechResearchStation", BuiltObjectSubRole.HighTechResearchStation, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "LargeFreighter", BuiltObjectSubRole.LargeFreighter, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "LargeSpacePort", BuiltObjectSubRole.LargeSpacePort, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "MediumFreighter", BuiltObjectSubRole.MediumFreighter, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "MediumSpacePort", BuiltObjectSubRole.MediumSpacePort, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "MiningShip", BuiltObjectSubRole.MiningShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "MiningStation", BuiltObjectSubRole.MiningStation, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "MonitoringStation", BuiltObjectSubRole.MonitoringStation, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "PassengerShip", BuiltObjectSubRole.PassengerShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "ResortBase", BuiltObjectSubRole.ResortBase, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "ResupplyShip", BuiltObjectSubRole.ResupplyShip, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "SmallFreighter", BuiltObjectSubRole.SmallFreighter, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "SmallSpacePort", BuiltObjectSubRole.SmallSpacePort, isMobile: false, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "TroopTransport", BuiltObjectSubRole.TroopTransport, isMobile: true, dominantRace, isPirate, raceNameOverride));
            _DesignSpecifications.Add(DesignSpecification.LoadFromFile(galaxy, "WeaponsResearchStation", BuiltObjectSubRole.WeaponsResearchStation, isMobile: false, dominantRace, isPirate, raceNameOverride));
        }

        public Empire(Galaxy galaxy, string name, bool isIndependentEmpire, Habitat homeHabitat, Race dominantRace, EmpirePolicy policy)
        {
            _Galaxy = galaxy;
            _Active = true;
            if (isIndependentEmpire)
            {
                _EmpireId = 0;
            }
            else
            {
                _EmpireId = _Galaxy.GetNextEmpireID();
            }
            _Counters = new EmpireCounters(this);
            _PirateEconomy = new PirateEconomy(galaxy.CurrentStarDate);
            _ResourceMap.InitializeFlags(_Galaxy.Habitats.Count, _Galaxy);
            _Name = name;
            _DominantRace = dominantRace;
            LastDisasterDate = galaxy.CurrentStarDate;
            if (policy != null && !isIndependentEmpire)
            {
                Policy = policy;
            }
            if (string.IsNullOrEmpty(name))
            {
                _Name = TextResolver.GetText("Independent");
            }
            _AllowableGovernmentTypes = ResolveDefaultAllowableGovernmentTypes(dominantRace, forceIncludeSpecialTypesIfRaceAllows: true);
            BuiltObjects = new BuiltObjectList();
            ShipGroups = new ShipGroupList();
            Designs = new DesignList();
            LatestDesigns = new DesignList();
            Array values = Enum.GetValues(typeof(BuiltObjectSubRole));
            for (int i = 0; i < values.Length; i++)
            {
                LatestDesigns.Add(null);
            }
            ForeignDesigns = new DesignList();
            Characters = new CharacterList();
            Troops = new TroopList();
            IntelligenceMissions = new IntelligenceMissionList();
            Outlaws = new BuiltObjectList();
            DiplomaticRelations = new DiplomaticRelationList();
            _ProposedDiplomaticRelations = new DiplomaticRelationList();
            _ProposedDiplomaticRelations.InvertEmpireIndexing = true;
            Colonies = new HabitatList();
            ConstructionYards = new BuiltObjectList();
            DistressSignals = new DistressSignalList();
            Manufacturers = new BuiltObjectList();
            PrivateBuiltObjects = new BuiltObjectList();
            RefuellingDepots = new BuiltObjectList();
            ResourceExtractors = new BuiltObjectList();
            SpacePorts = new BuiltObjectList();
            MiningStations = new BuiltObjectList();
            Freighters = new BuiltObjectList();
            ConstructionShips = new BuiltObjectList();
            LongRangeScanners = new BuiltObjectList();
            ResearchFacilities = new BuiltObjectList();
            ResortBases = new BuiltObjectList();
            ResupplyShips = new BuiltObjectList();
            PlanetDestroyers = new BuiltObjectList();
            Messages = new EmpireMessageList();
            EmpireEvaluations = new EmpireEvaluationList();
            SystemVisibility = new SystemVisibilityList();
            for (int j = 0; j < _Galaxy.Systems.Count; j++)
            {
                SystemVisibility item = new SystemVisibility
                {
                    Status = SystemVisibilityStatus.Unexplored,
                    SystemStar = _Galaxy.Systems[j].SystemStar
                };
                SystemVisibility.Add(item);
            }
            ControlColonization = AutomationLevel.FullyAutomated;
            ControlColonyDevelopment = true;
            ControlColonyStockLevels = true;
            ControlColonyTaxRates = true;
            ControlDesigns = true;
            ControlDiplomacyGifts = AutomationLevel.FullyAutomated;
            ControlDiplomacyOffense = AutomationLevel.FullyAutomated;
            ControlDiplomacyTreaties = AutomationLevel.FullyAutomated;
            ControlMilitaryAttacks = AutomationLevel.FullyAutomated;
            ControlMilitaryFleets = true;
            ControlStateConstruction = AutomationLevel.FullyAutomated;
            ControlTroopGeneration = true;
            ControlAgentAssignment = AutomationLevel.FullyAutomated;
            ControlResearch = true;
            ControlPopulationPolicy = true;
            ControlColonyFacilities = AutomationLevel.FullyAutomated;
            ControlCharacterLocations = true;
            ControlOfferPirateMissions = AutomationLevel.FullyAutomated;
            SelectEmpireColors(isPirateFaction: false, out _MainColor, out _SecondaryColor);
            if (isIndependentEmpire)
            {
                _MainColor = Color.FromArgb(96, 96, 96);
                _SecondaryColor = Color.FromArgb(96, 96, 96);
            }
            FlagShape = Galaxy.GenerateEmpireFlag(_MainColor, _SecondaryColor, -1, Galaxy.FlagShapes, ref _SmallFlagPicture, ref _LargeFlagPicture);
            if (homeHabitat != null)
            {
                _ResourceMap.SetResourcesKnown(galaxy.Systems[homeHabitat.SystemIndex].SystemStar, known: true);
                for (int k = 0; k > galaxy.Systems[homeHabitat.SystemIndex].Habitats.Count; k++)
                {
                    _ResourceMap.SetResourcesKnown(galaxy.Systems[homeHabitat.SystemIndex].Habitats[k], known: true);
                }
                int num = (int)(2.0 * Math.Sqrt(galaxy.StarCount));
                for (int l = 0; l < num; l++)
                {
                    Habitat habitat = galaxy.FastFindNearestUnexploredSystem(homeHabitat.Xpos, homeHabitat.Ypos, this);
                    if (habitat != null)
                    {
                        SystemVisibility[habitat.SystemIndex].Status = SystemVisibilityStatus.Explored;
                        _ResourceMap.SetResourcesKnown(galaxy.Systems[habitat].SystemStar, known: true);
                        for (int m = 0; m < galaxy.Systems[habitat].Habitats.Count; m++)
                        {
                            _ResourceMap.SetResourcesKnown(galaxy.Systems[habitat].Habitats[m], known: true);
                        }
                    }
                }
            }
            else
            {
                for (int n = 0; n < _Galaxy.Habitats.Count; n++)
                {
                    _ResourceMap.SetResourcesKnown(_Galaxy.Habitats[n], known: true);
                }
                for (int num2 = 0; num2 < SystemVisibility.Count; num2++)
                {
                    SystemVisibility[num2].Status = SystemVisibilityStatus.Visible;
                }
            }
            if (galaxy.Age > 0)
            {
                for (int num3 = 0; num3 < galaxy.Empires.Count; num3++)
                {
                    Empire empire = galaxy.Empires[num3];
                    if (empire == null || !empire.Active || empire == this)
                    {
                        continue;
                    }
                    for (int num4 = 0; num4 < galaxy.Systems.Count; num4++)
                    {
                        SystemInfo systemInfo = galaxy.Systems[num4];
                        SystemVisibilityStatus status = empire.SystemVisibility[systemInfo.SystemStar.SystemIndex].Status;
                        SystemVisibilityStatus status2 = SystemVisibility[systemInfo.SystemStar.SystemIndex].Status;
                        bool flag = false;
                        if ((status2 == SystemVisibilityStatus.Explored || status2 == SystemVisibilityStatus.Visible) && status == SystemVisibilityStatus.Visible)
                        {
                            flag = true;
                        }
                        if ((status == SystemVisibilityStatus.Explored || status == SystemVisibilityStatus.Visible) && (status2 == SystemVisibilityStatus.Explored || status2 == SystemVisibilityStatus.Visible) && Galaxy.Rnd.Next(0, 3) == 1)
                        {
                            flag = true;
                        }
                        if (!flag)
                        {
                            continue;
                        }
                        PirateRelation pirateRelation = ObtainPirateRelation(empire);
                        if (pirateRelation.Type == PirateRelationType.NotMet)
                        {
                            ChangePirateRelation(empire, PirateRelationType.None, galaxy.CurrentStarDate);
                            if (PirateEmpireBaseHabitat != null && empire.KnownPirateEmpires != null && !empire.KnownPirateEmpires.Contains(this))
                            {
                                empire.KnownPirateEmpires.Add(this);
                            }
                            if (empire.PirateEmpireBaseHabitat != null && KnownPirateEmpires != null && !KnownPirateEmpires.Contains(empire))
                            {
                                KnownPirateEmpires.Add(empire);
                            }
                        }
                        break;
                    }
                }
            }
            _LastLongTouch = galaxy.CurrentDateTime.Subtract(new TimeSpan(0, 0, (int)_LongProcessingInterval + 1));
            _LastIntermediateTouch = _LastLongTouch;
            _LastPeriodicTouch = _LastLongTouch;
            _LastRegularTouch = _LastLongTouch;
            _LastShortTouch = _LastLongTouch;
            _StateMoney = 30000.0;
            _PrivateMoney = 100000.0;
            _Research = new ResearchSystem();
            _Research.TechTree = Galaxy.ResearchNodeDefinitionsStatic.ObtainTechTree(dominantRace);
            _Research.TechTree = Galaxy.ResearchNodeDefinitionsStatic.SetTechTreeStartingDefaults(_Research.TechTree, dominantRace, policy);
            Research.Update(DominantRace);
            ReviewResearchAbilities();
            ReviewDesignsBuiltObjectsImprovedComponents();
            ReviewColonizationTypes();
            ReviewPopulationGrowthRates();
            int newSize = 0;
            ReviewMaximumConstructionSize(out newSize);
            ReviewCanBuildShipTypes();
            ReviewTroopTypes();
        }

        public BuiltObject GenerateBuiltObjectFromDesign(Design design, string name, bool isState, double x, double y)
        {
            BuiltObject builtObject = new BuiltObject(design, name, _Galaxy);
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                builtObject.Components[i].Status = ComponentStatus.Normal;
            }
            builtObject.BuiltObjectID = _Galaxy.GetNextBuiltObjectID();
            builtObject.Empire = this;
            builtObject.Xpos = x;
            builtObject.Ypos = y;
            if (design.SubRole == BuiltObjectSubRole.ColonyShip)
            {
                builtObject.NativeRace = _Galaxy.SelectRandomRace(Galaxy.HabitatToEmpireMinimumIntelligence);
            }
            builtObject.ReDefine();
            builtObject.CurrentFuel = builtObject.FuelCapacity;
            if (isState)
            {
                builtObject.Owner = this;
                BuiltObjects.Add(builtObject);
            }
            else
            {
                PrivateBuiltObjects.Add(builtObject);
            }
            _Galaxy.BuiltObjects.Add(builtObject);
            int x2 = (int)x / Galaxy.IndexSize;
            int y2 = (int)y / Galaxy.IndexSize;
            Galaxy.CorrectIndexCoords(ref x2, ref y2);
            _Galaxy.BuiltObjectIndex[x2][y2].Add(builtObject);
            Habitat habitat = _Galaxy.FastFindNearestSystem(builtObject.Xpos, builtObject.Ypos);
            if (habitat != null)
            {
                double num = _Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, habitat.Xpos, habitat.Ypos);
                if (num < (double)Galaxy.MaxSolarSystemSize + 500.0)
                {
                    builtObject.NearestSystemStar = habitat;
                }
            }
            builtObject.ReDefine();
            return builtObject;
        }

        public void SelectEmpireColors(bool isPirateFaction, out Color mainColor, out Color secondaryColor)
        {
            bool flag = false;
            mainColor = Color.Empty;
            secondaryColor = Color.Empty;
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(!flag, 200, ref iterationCount))
            {
                int unusedColorKey = 0;
                Color color = Color.Empty;
                if (DominantRace != null)
                {
                    color = ((!isPirateFaction) ? DominantRace.DefaultMainColor : DominantRace.DefaultMainColorPirates);
                }
                if (DominantRace != null && !_Galaxy.CheckEmpireColorUsed(isPirateFaction, color))
                {
                    mainColor = color;
                    secondaryColor = DominantRace.DefaultSecondaryColor;
                }
                else
                {
                    mainColor = _Galaxy.SelectUnusedMainColor(isPirateFaction, out unusedColorKey);
                    if (unusedColorKey < 0)
                    {
                        if (isPirateFaction)
                        {
                            secondaryColor = Color.FromArgb(254, 254, 254);
                        }
                        else
                        {
                            secondaryColor = Galaxy.SelectColorFromKey(Galaxy.Rnd.Next(0, 23));
                        }
                    }
                    else
                    {
                        secondaryColor = Galaxy.SelectColorFromKey(Galaxy.SelectComplementaryColorKey(unusedColorKey));
                    }
                }
                if (isPirateFaction)
                {
                    secondaryColor = Galaxy.DetermineSecondaryColor(mainColor);
                }
                flag = true;
                if (isPirateFaction)
                {
                    for (int i = 0; i < _Galaxy.PirateEmpires.Count; i++)
                    {
                        Empire empire = _Galaxy.PirateEmpires[i];
                        if (empire.MainColor.ToArgb() == mainColor.ToArgb() && empire.SecondaryColor.ToArgb() == secondaryColor.ToArgb())
                        {
                            flag = false;
                            break;
                        }
                        if (mainColor.ToArgb() == secondaryColor.ToArgb())
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                else
                {
                    for (int j = 0; j < _Galaxy.Empires.Count; j++)
                    {
                        Empire empire2 = _Galaxy.Empires[j];
                        if (empire2.MainColor.ToArgb() == mainColor.ToArgb() && empire2.SecondaryColor.ToArgb() == secondaryColor.ToArgb())
                        {
                            flag = false;
                            break;
                        }
                        if (mainColor.ToArgb() == secondaryColor.ToArgb())
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                if (mainColor == secondaryColor)
                {
                    flag = false;
                }
            }
        }

        private bool CheckEmpireNameInUse(string empireName)
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire.Name == empireName)
                {
                    return true;
                }
            }
            return false;
        }

        private string GenerateEmpireName(int governmentId)
        {
            string text = string.Empty;
            GovernmentAttributes governmentAttributes = null;
            if (governmentId >= 0 && governmentId < _Galaxy.Governments.Count)
            {
                governmentAttributes = _Galaxy.Governments[governmentId];
            }
            string text2 = string.Empty;
            string empty = string.Empty;
            string empty2 = string.Empty;
            bool flag = true;
            int num = 0;
            while (flag && num < 50)
            {
                text = string.Empty;
                if ((Galaxy.Rnd.Next(0, 2) == 1 && _DominantRace.Name.ToLower(CultureInfo.InvariantCulture) != "human") || _Capital == null)
                {
                    empty = _DominantRace.Name;
                }
                else
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar(_Capital);
                    empty = habitat.Name;
                }
                List<string> list = new List<string>();
                List<string> list2 = new List<string>();
                if (governmentAttributes != null)
                {
                    list = governmentAttributes.EmpireNameAdjectives;
                    list2 = governmentAttributes.EmpireNameNouns;
                }
                if (list.Count == 0)
                {
                    List<string> list3 = new List<string>();
                    list3.Add("United");
                    list3.Add("Combined");
                    list3.Add("Imperial");
                    list3.Add("Great");
                    list3.Add("Grand");
                    list = list3;
                }
                if (list2.Count == 0)
                {
                    List<string> list4 = new List<string>();
                    list4.Add("Empire");
                    list4.Add("Alliance");
                    list4.Add("Group");
                    list4.Add("Dominion");
                    list4.Add("Territory");
                    list4.Add("Nation");
                    list4.Add("Realm");
                    list4.Add("Federation");
                    list4.Add("Authority");
                    list4.Add("Enclave");
                    list4.Add("Confederacy");
                    list4.Add("Coalition");
                    list4.Add("Domain");
                    list2 = list4;
                }
                empty2 = list2[Galaxy.Rnd.Next(0, list2.Count)];
                string text3 = empty + " " + empty2;
                if (Galaxy.Rnd.Next(0, 4) == 1 && text3.Length < 18 && list.Count > 0)
                {
                    text2 = list[Galaxy.Rnd.Next(0, list.Count)];
                }
                if (!string.IsNullOrEmpty(text2))
                {
                    text = text + text2 + " ";
                }
                text = text + empty + " ";
                text += empty2;
                flag = CheckEmpireNameInUse(text);
                num++;
            }
            return text;
        }

        private string GenerateEmpireName()
        {
            int num = 0;
            string empty = string.Empty;
            string text = string.Empty;
            string text2 = string.Empty;
            string text3 = string.Empty;
            while (true)
            {
                num++;
                empty = ((Galaxy.Rnd.Next(0, 2) != 1 && !(DominantRace.Name == "Human")) ? DominantRace.Name : ((_Capital != null && (_Capital.Category == HabitatCategoryType.Planet || _Capital.Category == HabitatCategoryType.Asteroid)) ? _Capital.Parent.Name : ((_Capital == null || _Capital.Category != HabitatCategoryType.Moon) ? DominantRace.Name : _Capital.Parent.Parent.Name)));
                int num2 = Galaxy.Rnd.Next(0, 62);
                if (num2 >= 0 && num2 <= 11)
                {
                    text = "Empire";
                }
                if (num2 >= 12 && num2 <= 21)
                {
                    text = "Republic";
                }
                if (num2 >= 22 && num2 <= 30)
                {
                    text = "Alliance";
                }
                if (num2 >= 31 && num2 <= 37)
                {
                    text = "Union";
                }
                if (num2 >= 38 && num2 <= 42)
                {
                    text = "Collective";
                }
                if (num2 >= 43 && num2 <= 46)
                {
                    text = "Group";
                }
                if (num2 >= 47 && num2 <= 51)
                {
                    text = "Dominion";
                }
                if (num2 >= 52 && num2 <= 56)
                {
                    text = "Territory";
                }
                if (num2 >= 57 && num2 <= 58)
                {
                    text = "Kingdom";
                }
                if (num2 >= 59 && num2 <= 59)
                {
                    text = "Cooperative";
                }
                if (num2 >= 60 && num2 <= 60)
                {
                    text = "Nation";
                }
                if (num2 >= 61 && num2 <= 61)
                {
                    text = "Realm";
                }
                if (Galaxy.Rnd.Next(0, 2) == 1)
                {
                    int num3 = Galaxy.Rnd.Next(0, 36);
                    if (num3 >= 0 && num3 <= 9)
                    {
                        text2 = "United";
                    }
                    if (num3 >= 10 && num3 <= 16)
                    {
                        text2 = "Great";
                    }
                    if (num3 >= 17 && num3 <= 21)
                    {
                        text2 = "Grand";
                    }
                    if (num3 >= 22 && num3 <= 27)
                    {
                        text2 = "Imperial";
                    }
                    if (num3 >= 28 && num3 <= 32)
                    {
                        text2 = "Royal";
                    }
                    if (num3 >= 33 && num3 <= 35)
                    {
                        text2 = "Combined";
                    }
                }
                if (text2 != string.Empty)
                {
                    text3 = text3 + text2 + " ";
                }
                text3 = text3 + empty + " ";
                text3 += text;
                if (IsEmpireNameInUse(text3))
                {
                    int x = (int)_Capital.Xpos / Galaxy.SectorSize;
                    int y = (int)_Capital.Ypos / Galaxy.SectorSize;
                    Galaxy.CorrectSectorCoords(ref x, ref y);
                    text3 = ((x <= 3 || x >= 8 || y <= 3 || y >= 8) ? ("Outer " + empty + " " + text) : ("Central " + empty + " " + text));
                    if (IsEmpireNameInUse(text3))
                    {
                        text3 = "New " + empty + " " + text;
                        if (IsEmpireNameInUse(text3) && num < 10)
                        {
                            text2 = string.Empty;
                            empty = string.Empty;
                            text = string.Empty;
                            text3 = string.Empty;
                            continue;
                        }
                    }
                }
                if (text3.Length <= 26 || num >= 10)
                {
                    break;
                }
                text2 = string.Empty;
                empty = string.Empty;
                text = string.Empty;
                text3 = string.Empty;
            }
            return text3;
        }

        private bool IsEmpireNameInUse(string name)
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire.Name == name)
                {
                    return true;
                }
            }
            return false;
        }

        public void AddHistoryMessage(EmpireMessage message)
        {
            lock (_MessageHistoryLock)
            {
                if (!_MessageHistory.Contains(message))
                {
                    _MessageHistory.Add(message);
                }
            }
        }

        public void RemoveOldHistoryMessages()
        {
            lock (_MessageHistoryLock)
            {
                if (_MessageHistory.Count <= _MaximumHistoryMessages)
                {
                    return;
                }
                _MessageHistory.Sort();
                _MessageHistory.Reverse();
                EmpireMessageList empireMessageList = new EmpireMessageList();
                for (int i = _MaximumHistoryMessages; i < _MessageHistory.Count; i++)
                {
                    if (_MessageHistory[i].MessageType != EmpireMessageType.GalacticHistory)
                    {
                        empireMessageList.Add(_MessageHistory[i]);
                    }
                }
                for (int j = 0; j < empireMessageList.Count; j++)
                {
                    _MessageHistory.Remove(empireMessageList[j]);
                }
            }
        }

        private void ExertCulturalInfluence()
        {
            HabitatList habitatList = DetermineEmpireSystems(this);
            for (int i = 0; i < habitatList.Count; i++)
            {
                Habitat habitat = habitatList[i];
                int num = 0;
                for (int j = 0; j < Colonies.Count; j++)
                {
                    Habitat habitat2 = Colonies[j];
                    switch (habitat2.Category)
                    {
                        case HabitatCategoryType.Planet:
                        case HabitatCategoryType.Asteroid:
                            if (habitat2.Parent == habitat)
                            {
                                num += habitat2.StrategicValue;
                            }
                            break;
                        case HabitatCategoryType.Moon:
                            if (habitat2.Parent.Parent == habitat)
                            {
                                num += habitat2.StrategicValue;
                            }
                            break;
                        default:
                            if (habitat2 == habitat)
                            {
                                num += habitat2.StrategicValue;
                            }
                            break;
                    }
                }
                EmpireList empireList = new EmpireList();
                List<int> list = new List<int>();
                HabitatList habitats = _Galaxy.Systems[habitat.SystemIndex].Habitats;
                for (int k = 0; k < habitats.Count; k++)
                {
                    Habitat habitat3 = habitats[k];
                    if (habitat3.Empire == null || habitat3.Empire == this)
                    {
                        continue;
                    }
                    if (!empireList.Contains(habitat3.Empire))
                    {
                        empireList.Add(habitat3.Empire);
                        list.Add(habitat3.StrategicValue);
                        continue;
                    }
                    int num2 = empireList.IndexOf(habitat3.Empire);
                    if (num2 >= 0)
                    {
                        list[num2] += habitat3.StrategicValue;
                    }
                }
                int num3 = 0;
                foreach (int item in list)
                {
                    num3 += item;
                }
                for (int l = 0; l < habitats.Count; l++)
                {
                    Habitat habitat4 = habitats[l];
                    if (habitat4.Empire != null && habitat4.Empire == this)
                    {
                        double num4 = (double)habitat4.StrategicValue / ((double)num3 / 5.0);
                        if (num4 < 1.0)
                        {
                            habitat4.CulturalDistressFactor = (float)((1.0 - num4) * 30.0);
                        }
                        else
                        {
                            habitat4.CulturalDistressFactor = 0f;
                        }
                    }
                    else
                    {
                        if (habitat4.Empire == null || habitat4.Empire == this || !habitat4.Rebelling)
                        {
                            continue;
                        }
                        int num5 = empireList.IndexOf(habitat4.Empire);
                        if (num5 < 0)
                        {
                            continue;
                        }
                        double num6 = 1.0;
                        if (empireList[num5].DominantRace != null)
                        {
                            num6 = Math.Pow((double)empireList[num5].DominantRace.LoyaltyLevel / 100.0, 2.0);
                            num6 += habitat4.EmpireApprovalRating / 100.0;
                        }
                        double num7 = 1.0 - CivilityRating / 100.0;
                        int num8 = 0;
                        if (habitat4.Troops != null && habitat4.Troops.Count > 0 && habitat4.Troops.TotalDefendStrength > 0 && habitat4.Population != null && habitat4.Population.TotalAmount > 0)
                        {
                            int num9 = (int)(Math.Sqrt(habitat4.Population.TotalAmount) / 10.0);
                            if (num9 > 0)
                            {
                                num8 = Troops.TotalDefendStrength / num9;
                            }
                        }
                        double num10 = (double)list[num5] / ((double)num / 10.0);
                        num10 *= num6;
                        num10 *= num7;
                        if (num8 >= 40 || !(Galaxy.Rnd.NextDouble() > num10))
                        {
                            continue;
                        }
                        TakeOwnershipOfColony(habitat4, this);
                        habitat4.CulturalDistressFactor = 0f;
                        string text = string.Format(TextResolver.GetText("There has been a revolution on X"), habitat4.Name);
                        string text2 = " - " + TextResolver.GetText("the inhabitants have switched allegiance and joined us!");
                        SendMessageToEmpire(this, EmpireMessageType.ColonyGained, habitat4, text + text2);
                        text2 = " - " + string.Format(TextResolver.GetText("the inhabitants have treacherously betrayed us and joined the X"), Name);
                        empireList[num5].SendMessageToEmpire(empireList[num5], EmpireMessageType.ColonyLost, habitat4, text + text2);
                        if (habitat4.Population == null || habitat4.Population.DominantRace == null)
                        {
                            continue;
                        }
                        RaceList newAbilityRaces = new RaceList();
                        Race raceChanged = null;
                        List<string> list2 = ReviewEmpireAbilityBonuses(out newAbilityRaces, out raceChanged);
                        if (list2.Count <= 0 || raceChanged == null)
                        {
                            continue;
                        }
                        string text3 = string.Format(TextResolver.GetText("The recent revolt PLANETTYPE NAME RACE"), Galaxy.ResolveDescription(habitat4.Category).ToLower(CultureInfo.InvariantCulture), habitat4.Name, raceChanged.Name);
                        text3 += ":\n";
                        foreach (string item2 in list2)
                        {
                            text3 = text3 + "\n" + item2;
                        }
                        string text4 = TextResolver.GetText("New Ability for our Empire");
                        SendEventMessageToEmpire(EventMessageType.NewEmpireRaceAbility, text4, text3, raceChanged, habitat4);
                    }
                }
            }
        }

        public void CompleteTeardown(Empire conqueror)
        {
            CompleteTeardown(conqueror, removeFromGalaxy: true, sendMessages: true);
        }

        public void CompleteTeardown(Empire conqueror, bool removeFromGalaxy, bool sendMessages)
        {
            short matchingGameEventIdEmpireEliminated = _Galaxy.GetMatchingGameEventIdEmpireEliminated(this, conqueror);
            _Galaxy.CheckTriggerEvent(matchingGameEventIdEmpireEliminated, this, EventTriggerType.EmpireEliminated, this);
            if (conqueror != null && conqueror.Counters != null)
            {
                conqueror.Counters.ProcessEmpireElimination(this, _Galaxy, conqueror);
            }
            _Active = false;
            SendNewsBroadcast(EventMessageType.Undefined, this, DisasterEventType.Undefined, warStartEnd: false, wonderBegun: false, EmpireMessageType.EmpireDefeated, conqueror);
            EmpireList empireList = new EmpireList();
            empireList.Add(_Galaxy.IndependentEmpire);
            empireList.AddRange(_Galaxy.Empires);
            empireList.AddRange(_Galaxy.PirateEmpires);
            for (int i = 0; i < empireList.Count; i++)
            {
                Empire empire = empireList[i];
                if (empire == null || empire == this)
                {
                    continue;
                }
                if (PirateEmpireBaseHabitat == null && empire.PirateEmpireBaseHabitat == null)
                {
                    DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(this);
                    if (diplomaticRelation != null)
                    {
                        if (sendMessages && conqueror != null)
                        {
                            switch (diplomaticRelation.Type)
                            {
                                case DiplomaticRelationType.TradeSanctions:
                                case DiplomaticRelationType.War:
                                case DiplomaticRelationType.Truce:
                                    if (conqueror != empire && conqueror != _Galaxy.IndependentEmpire)
                                    {
                                        conqueror.SendMessageToEmpire(empire, EmpireMessageType.EmpireDefeated, this, string.Format(TextResolver.GetText("We have wiped out your enemy, the X"), Name));
                                    }
                                    break;
                                case DiplomaticRelationType.MutualDefensePact:
                                case DiplomaticRelationType.Protectorate:
                                    if (conqueror != empire && conqueror != _Galaxy.IndependentEmpire)
                                    {
                                        conqueror.SendMessageToEmpire(empire, EmpireMessageType.EmpireDefeated, this, string.Format(TextResolver.GetText("We have wiped out your allies, the X"), Name));
                                    }
                                    break;
                                case DiplomaticRelationType.SubjugatedDominion:
                                    if (diplomaticRelation.Initiator == this)
                                    {
                                        if (conqueror != empire && conqueror != _Galaxy.IndependentEmpire)
                                        {
                                            conqueror.SendMessageToEmpire(empire, EmpireMessageType.EmpireDefeated, this, string.Format(TextResolver.GetText("We have liberated you from the X"), Name));
                                        }
                                    }
                                    else if (conqueror != empire && conqueror != _Galaxy.IndependentEmpire)
                                    {
                                        conqueror.SendMessageToEmpire(empire, EmpireMessageType.EmpireDefeated, this, string.Format(TextResolver.GetText("We have eliminated your slaves, the X"), Name));
                                    }
                                    break;
                                case DiplomaticRelationType.None:
                                case DiplomaticRelationType.FreeTradeAgreement:
                                    if (conqueror != empire && conqueror != _Galaxy.IndependentEmpire)
                                    {
                                        conqueror.SendMessageToEmpire(empire, EmpireMessageType.EmpireDefeated, this, string.Format(TextResolver.GetText("We have wiped out the X"), Name));
                                    }
                                    break;
                            }
                        }
                        if (diplomaticRelation.Type != 0)
                        {
                            empire.Counters.ProcessRelationChange(diplomaticRelation, this, DiplomaticRelationType.None, _Galaxy.CurrentStarDate);
                        }
                        empire.DiplomaticRelations.Remove(diplomaticRelation);
                    }
                    if (empire.EmpireEvaluations != null)
                    {
                        EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(this);
                        if (empireEvaluation != null)
                        {
                            empire.EmpireEvaluations.Remove(empireEvaluation);
                        }
                    }
                    if (empire.PirateRelations != null)
                    {
                        PirateRelation pirateRelation = empire.ObtainPirateRelation(this);
                        if (pirateRelation != null)
                        {
                            empire.PirateRelations.Remove(pirateRelation);
                        }
                    }
                }
                else if (empire.PirateRelations != null)
                {
                    PirateRelation pirateRelation2 = empire.ObtainPirateRelation(this);
                    if (pirateRelation2 != null)
                    {
                        empire.PirateRelations.Remove(pirateRelation2);
                    }
                }
                if (empire.EmpiresSharedVisibility != null && empire.EmpiresSharedVisibility.Contains(this))
                {
                    empire.EmpiresSharedVisibility.Remove(this);
                }
                if (empire.Characters != null && empire.Characters.Count > 0)
                {
                    foreach (Character character2 in empire.Characters)
                    {
                        if (character2 == null)
                        {
                            continue;
                        }
                        IntelligenceMission mission = character2.Mission;
                        if (mission != null && mission.Type != 0 && mission.TargetEmpire == this)
                        {
                            if (mission.Type == IntelligenceMissionType.DeepCover && mission.Outcome == IntelligenceMissionOutcome.SucceedNotDetect)
                            {
                                character2.Mission = null;
                            }
                            else
                            {
                                character2.Mission = null;
                            }
                        }
                    }
                }
                if (empire.EmpiresViewable != null)
                {
                    for (int num = empire.EmpiresViewable.IndexOf(this); num >= 0; num = empire.EmpiresViewable.IndexOf(this))
                    {
                        empire.EmpiresViewable.RemoveAt(num);
                        empire.EmpiresViewableExpiry.RemoveAt(num);
                    }
                }
                empire.CancelBlockades(this);
                empire.CancelAttacksAgainstEmpire(this);
                if (empire.PirateMissions != null)
                {
                    int iterationCount = 0;
                    while (Galaxy.ConditionCheckLimit(empire.PirateMissions.Contains(this), 1000, ref iterationCount))
                    {
                        int num2 = empire.PirateMissions.IndexOf(this);
                        if (num2 >= 0)
                        {
                            empire.PirateMissions.RemoveAt(num2);
                        }
                    }
                }
                if (empire.KnownPirateEmpires != null && empire.KnownPirateEmpires.Contains(this))
                {
                    empire.KnownPirateEmpires.Remove(this);
                }
            }
            _Galaxy.ClearPirateColonyFacilities(this, conqueror);
            if (ShipGroups != null)
            {
                ShipGroupList shipGroupList = new ShipGroupList();
                shipGroupList.AddRange(ShipGroups);
                for (int j = 0; j < shipGroupList.Count; j++)
                {
                    ShipGroup shipGroup = shipGroupList[j];
                    if (shipGroup == null)
                    {
                        continue;
                    }
                    BuiltObjectList builtObjectList = new BuiltObjectList();
                    if (shipGroup.Ships != null)
                    {
                        builtObjectList.AddRange(shipGroup.Ships);
                        for (int k = 0; k < builtObjectList.Count; k++)
                        {
                            BuiltObject builtObject = builtObjectList[k];
                            builtObject.LeaveShipGroup();
                        }
                        shipGroup.Ships.Clear();
                    }
                    shipGroup.Empire = null;
                    shipGroup.GatherPoint = null;
                    shipGroup.LeadShip = null;
                    shipGroup.Mission = null;
                    shipGroup.AttackPoint = null;
                }
                ShipGroups.Clear();
            }
            if (conqueror != null && conqueror != _Galaxy.IndependentEmpire)
            {
                BuiltObjectList builtObjectList2 = new BuiltObjectList();
                if (PrivateBuiltObjects != null)
                {
                    builtObjectList2.AddRange(PrivateBuiltObjects);
                    for (int l = 0; l < builtObjectList2.Count; l++)
                    {
                        BuiltObject builtObject2 = builtObjectList2[l];
                        if (builtObject2 == null)
                        {
                            continue;
                        }
                        TakeOwnershipOfCargo(builtObject2.Cargo, this, conqueror);
                        if (builtObject2.Empire != conqueror)
                        {
                            if (builtObject2.Mission != null)
                            {
                                builtObject2.ClearPreviousMissionRequirements();
                                builtObject2.SubsequentMissions.Clear();
                            }
                            TakeOwnershipOfBuiltObject(builtObject2, conqueror, setDesignAsObsolete: true);
                        }
                    }
                    PrivateBuiltObjects.Clear();
                }
                builtObjectList2.Clear();
                if (BuiltObjects != null)
                {
                    builtObjectList2.AddRange(BuiltObjects);
                    for (int m = 0; m < builtObjectList2.Count; m++)
                    {
                        BuiltObject builtObject3 = builtObjectList2[m];
                        if (builtObject3 == null)
                        {
                            continue;
                        }
                        TakeOwnershipOfCargo(builtObject3.Cargo, this, conqueror);
                        if (builtObject3.Empire != conqueror)
                        {
                            if (builtObject3.Mission != null)
                            {
                                builtObject3.ClearPreviousMissionRequirements();
                                builtObject3.SubsequentMissions.Clear();
                            }
                            TakeOwnershipOfBuiltObject(builtObject3, conqueror, setDesignAsObsolete: true);
                        }
                    }
                    BuiltObjects.Clear();
                }
            }
            else
            {
                BuiltObjectList builtObjectList3 = new BuiltObjectList();
                if (PrivateBuiltObjects != null)
                {
                    builtObjectList3.AddRange(PrivateBuiltObjects);
                    for (int n = 0; n < builtObjectList3.Count; n++)
                    {
                        BuiltObject builtObject4 = builtObjectList3[n];
                        if (builtObject4 != null)
                        {
                            builtObject4.CompleteTeardown(_Galaxy, removeFromEmpire: false);
                            _Galaxy.BuiltObjects.Remove(builtObject4);
                        }
                    }
                    PrivateBuiltObjects.Clear();
                }
                builtObjectList3.Clear();
                if (BuiltObjects != null)
                {
                    builtObjectList3.AddRange(BuiltObjects);
                    for (int num3 = 0; num3 < builtObjectList3.Count; num3++)
                    {
                        BuiltObject builtObject5 = builtObjectList3[num3];
                        if (builtObject5 != null)
                        {
                            builtObject5.CompleteTeardown(_Galaxy, removeFromEmpire: false);
                            _Galaxy.BuiltObjects.Remove(builtObject5);
                        }
                    }
                    BuiltObjects.Clear();
                }
            }
            if (ShipGroups != null)
            {
                ShipGroups.Clear();
            }
            BlockadeList blockadesForEmpire = _Galaxy.Blockades.GetBlockadesForEmpire(this);
            if (blockadesForEmpire != null)
            {
                foreach (Blockade item in blockadesForEmpire)
                {
                    if (item != null)
                    {
                        if (item.TargetIsColony)
                        {
                            CancelBlockade(item.Colony);
                        }
                        else
                        {
                            CancelBlockade(item.BuiltObject);
                        }
                    }
                }
            }
            if (_ResourceMap != null)
            {
                _ResourceMap._ResourcesKnown = null;
                _ResourceMap = null;
            }
            if (Troops != null)
            {
                for (int num4 = 0; num4 < Troops.Count; num4++)
                {
                    Troop troop = Troops[num4];
                    if (troop == null)
                    {
                        continue;
                    }
                    if (conqueror != null && conqueror.Counters != null)
                    {
                        conqueror.Counters.ProcessTroopDestruction(troop);
                    }
                    if (troop.BuiltObject != null)
                    {
                        if (troop.BuiltObject.Troops != null)
                        {
                            troop.BuiltObject.Troops.Remove(troop);
                        }
                        troop.BuiltObject = null;
                    }
                    if (troop.Colony != null)
                    {
                        if (troop.Colony.Troops != null)
                        {
                            troop.Colony.Troops.Remove(troop);
                        }
                        if (troop.Colony.TroopsToRecruit != null)
                        {
                            troop.Colony.TroopsToRecruit.Remove(troop);
                        }
                        if (troop.Colony.InvadingTroops != null)
                        {
                            troop.Colony.InvadingTroops.Remove(troop);
                        }
                        troop.Colony = null;
                    }
                    troop.Empire = null;
                }
                Troops.Clear();
            }
            if (Characters != null)
            {
                Character[] array = ListHelper.ToArrayThreadSafe(Characters);
                foreach (Character character in array)
                {
                    if (character != null)
                    {
                        if (conqueror != null && conqueror.Counters != null)
                        {
                            conqueror.Counters.ProcessCharacterDeath(character);
                        }
                        character.Kill(_Galaxy);
                    }
                }
            }
            if (Outlaws != null)
            {
                Outlaws.Clear();
            }
            ResearchBonusWeaponsStation = null;
            ResearchBonusEnergyStation = null;
            ResearchBonusHighTechStation = null;
            if (EmpireEvaluations != null)
            {
                for (int num6 = 0; num6 < EmpireEvaluations.Count; num6++)
                {
                    EmpireEvaluations[num6]?.Clear();
                }
                EmpireEvaluations.Clear();
            }
            if (PirateRelations != null)
            {
                PirateRelations.Clear();
            }
            if (_ColonizationTargets != null)
            {
                for (int num7 = 0; num7 < ColonizationTargets.Count; num7++)
                {
                    ColonizationTargets[num7]?.Clear();
                }
                _ColonizationTargets.Clear();
            }
            if (_ResourceTargets != null)
            {
                for (int num8 = 0; num8 < _ResourceTargets.Count; num8++)
                {
                    _ResourceTargets[num8]?.Clear();
                }
                _ResourceTargets.Clear();
            }
            if (_DesiredForeignColonies != null)
            {
                for (int num9 = 0; num9 < _DesiredForeignColonies.Count; num9++)
                {
                    _DesiredForeignColonies[num9]?.Clear();
                }
                _DesiredForeignColonies.Clear();
            }
            if (_EmpiresWithDesiredColonies != null)
            {
                _EmpiresWithDesiredColonies.Clear();
            }
            if (_EmpiresToAttack != null)
            {
                _EmpiresToAttack.Clear();
            }
            if (!removeFromGalaxy)
            {
                return;
            }
            if (_Galaxy.Empires.Contains(this))
            {
                _Galaxy.Empires.Remove(this);
                if (!_Galaxy.DefeatedEmpires.Contains(this))
                {
                    _Galaxy.DefeatedEmpires.Add(this);
                }
            }
            if (_Galaxy.PirateEmpires.Contains(this))
            {
                _Galaxy.PirateEmpires.Remove(this);
            }
        }

        public void MakeHabitatIntoColony(Habitat habitat, Empire empire, Race race, long newPopulationAmount)
        {
            if (habitat == null)
            {
                return;
            }
            TakeOwnershipOfColony(habitat, empire);
            habitat.IsRefuellingDepot = true;
            Population population = new Population(race, newPopulationAmount);
            if (habitat.Population == null)
            {
                habitat.Population = new PopulationList();
            }
            habitat.Population.Add(population);
            habitat.Population.RecalculateTotalAmount();
            if (empire != null)
            {
                if (empire != _Galaxy.IndependentEmpire && empire == _Galaxy.PlayerEmpire && _Galaxy != null && _Galaxy.ColonyNames != null && _Galaxy.ColonyNames.Count > _Galaxy.ColonyNameIndex)
                {
                    string name = _Galaxy.ColonyNames[_Galaxy.ColonyNameIndex];
                    _Galaxy.ColonyNameIndex++;
                    habitat.Name = name;
                }
                empire.SetColonyTaxRate(habitat, atWar: false);
                if (habitat.Cargo == null)
                {
                    habitat.Cargo = new CargoList();
                }
                int amount = 2000;
                for (int i = 0; i < _Galaxy.ResourceSystem.FuelResources.Count; i++)
                {
                    ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.FuelResources[i];
                    Cargo cargo = new Cargo(new Resource(resourceDefinition.ResourceID), amount, empire);
                    habitat.Cargo.Add(cargo);
                }
            }
        }

        public void TakeOwnershipOfColony(Habitat colony, Empire newEmpire)
        {
            TakeOwnershipOfColony(colony, newEmpire, destroyAllBuiltObjectsAndTroopsAtColony: false);
        }

        public void TakeOwnershipOfColony(Habitat colony, Empire newEmpire, bool destroyAllBuiltObjectsAndTroopsAtColony)
        {
            TakeOwnershipOfColony(colony, newEmpire, destroyAllBuiltObjectsAndTroopsAtColony, destroyAllBuiltObjectsAndTroopsAtColony);
        }

        public void TakeOwnershipOfColony(Habitat colony, Empire newEmpire, bool destroyBases, bool destroyTroops)
        {
            Empire empire = colony.Empire;
            _Galaxy.CheckTriggerEvent(colony.GameEventId, newEmpire, EventTriggerType.Capture, null);
            bool flag = false;
            if (colony.Empire != null)
            {
                if (colony.Empire.Capital == colony)
                {
                    flag = true;
                }
                if (colony.Empire.Colonies.Contains(colony))
                {
                    colony.Empire.Colonies.Remove(colony);
                }
            }
            if (colony.Cargo == null)
            {
                colony.Cargo = new CargoList();
            }
            if (colony.Troops == null)
            {
                colony.Troops = new TroopList();
            }
            if (colony.TroopsToRecruit == null)
            {
                colony.TroopsToRecruit = new TroopList();
            }
            if (colony.InvadingTroops == null)
            {
                colony.InvadingTroops = new TroopList();
            }
            if (colony.Characters == null)
            {
                colony.Characters = new CharacterList();
            }
            if (colony.InvadingCharacters == null)
            {
                colony.InvadingCharacters = new CharacterList();
            }
            if (colony.Facilities == null)
            {
                colony.Facilities = new PlanetaryFacilityList();
            }
            if (colony.ConstructionQueue == null)
            {
                colony.ConstructionQueue = new ConstructionQueue(colony, _Galaxy);
            }
            else
            {
                colony.ConstructionQueue.ReviewConstructionSpeed();
            }
            if (colony.ManufacturingQueue == null)
            {
                colony.ManufacturingQueue = new ManufacturingQueue(colony, _Galaxy);
            }
            if (colony.DockingBays == null)
            {
                colony.DockingBays = new DockingBayList();
                int num = 20;
                for (int i = 0; i < num; i++)
                {
                    BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                    DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, 100);
                    colony.DockingBays.Add(item);
                }
            }
            if (colony.DockingBayWaitQueue == null)
            {
                colony.DockingBayWaitQueue = new BuiltObjectList();
            }
            _Galaxy.ClearFleetHomeBases(colony);
            colony.Owner = newEmpire;
            colony.Empire = newEmpire;
            if (colony.Troops != null)
            {
                for (int j = 0; j < colony.Troops.Count; j++)
                {
                    Troop troop = colony.Troops[j];
                    if (troop.Empire != null && troop.Empire.Troops != null)
                    {
                        troop.Empire.Troops.Remove(troop);
                    }
                    if (!destroyTroops && newEmpire != null && newEmpire.Troops != null)
                    {
                        troop.Empire = newEmpire;
                        newEmpire.Troops.Add(troop);
                    }
                }
                if (destroyTroops || newEmpire == null)
                {
                    colony.Troops.Clear();
                }
            }
            if (colony.TroopsToRecruit != null)
            {
                for (int k = 0; k < colony.TroopsToRecruit.Count; k++)
                {
                    Troop troop2 = colony.TroopsToRecruit[k];
                    if (troop2.Empire != null && troop2.Empire.Troops != null && troop2.Empire.Troops.Contains(troop2))
                    {
                        troop2.Empire.Troops.Remove(troop2);
                    }
                    if (!destroyTroops && newEmpire != null)
                    {
                        troop2.Empire = newEmpire;
                    }
                }
                if (destroyTroops || newEmpire == null)
                {
                    colony.TroopsToRecruit.Clear();
                }
            }
            if (colony.Characters != null)
            {
                Character[] array = ListHelper.ToArrayThreadSafe(colony.Characters);
                for (int l = 0; l < array.Length; l++)
                {
                    array[l].CompleteEmpireChange(newEmpire);
                }
            }
            if (newEmpire != null)
            {
                newEmpire.CancelBlockade(colony);
                newEmpire.CancelAttacks(colony);
                newEmpire.CancelAllShipAttacks(colony, alsoCancelAttackForBases: false);
                newEmpire.CancelUnloadTroops(colony);
                newEmpire.CancelAllShipUnloadTroops(colony);
                newEmpire.CancelAllShipAttacksNonEnemies(colony);
                _Galaxy.CheckCancelIntelligenceMissionsWithTarget(colony);
                newEmpire.CancelAllCharacterTransfers(colony);
            }
            _Galaxy.ReevaluateMissionsAgainstHabitat(colony, newEmpire);
            if (empire != null)
            {
                if (flag)
                {
                    Habitat habitat2 = (empire.Capital = empire.SelectBestCandidateForCapital());
                    empire.RecalculateColonyDistancesFromCapital();
                }
                if (empire.Colonies.Count <= 0 && empire != _Galaxy.IndependentEmpire)
                {
                    if (empire.PirateEmpireBaseHabitat != null)
                    {
                        if (_Galaxy.CheckPirateEmpireTerminated(empire))
                        {
                            _Galaxy.EliminatePirateFaction(empire, newEmpire);
                        }
                    }
                    else if (newEmpire != null)
                    {
                        newEmpire.SendMessageToEmpire(empire, EmpireMessageType.EmpireDefeated, empire, TextResolver.GetText("You have been defeated!"));
                        empire.CompleteTeardown(newEmpire);
                    }
                    else
                    {
                        empire.SendMessageToEmpire(empire, EmpireMessageType.EmpireDefeated, empire, TextResolver.GetText("You have been defeated!"));
                        empire.CompleteTeardown(null);
                    }
                }
            }
            if (newEmpire != null)
            {
                colony.IsRefuellingDepot = true;
                TakeOwnershipOfCargo(colony.Cargo, empire, newEmpire);
                TakeOwnershipOfOrders(colony, empire, newEmpire);
                colony.RestrictedResourcesPresent = false;
                newEmpire.ReviewSpecialBonusesRuinsWonders();
                if (newEmpire.Capital == null)
                {
                    newEmpire.Capital = colony;
                }
                if (!newEmpire.Colonies.Contains(colony))
                {
                    newEmpire.Colonies.Add(colony);
                }
                colony.RecalculateDistanceFactor();
                newEmpire.SetColonyTaxRate(colony, atWar: false);
                if (newEmpire.Policy != null)
                {
                    colony.ColonyPopulationPolicy = newEmpire.Policy.NewColonyPopulationPolicyAllRaces;
                    colony.ColonyPopulationPolicyRaceFamily = newEmpire.Policy.NewColonyPopulationPolicyYourRaceFamily;
                }
            }
            else
            {
                colony.IsRefuellingDepot = false;
                OrderList orders = _Galaxy.Orders.GetOrders(colony);
                foreach (Order item2 in orders)
                {
                    if (item2.AmountStillToArrive > 0)
                    {
                        for (int m = 0; m < item2.Contracts.Count; m++)
                        {
                            Contract contract = item2.Contracts[m];
                            if (contract.Freighter != null && contract.Freighter.Mission != null && contract.Freighter.Mission.Type == BuiltObjectMissionType.Transport && contract.Freighter.Mission.SecondaryTargetHabitat == item2.RequestingColony)
                            {
                                contract.Freighter.ClearPreviousMissionRequirements();
                            }
                        }
                    }
                    _Galaxy.Orders.Remove(item2);
                }
            }
            colony.RecalculateDevelopmentLevelBaseline();
            colony.RecalculateAnnualTaxRevenue();
            bool empireHasWarptech = CheckEmpireHasHyperDriveTech(this);
            colony.RecalculateColonyInfluenceRadius(empireHasWarptech);
            BuiltObject builtObject = _Galaxy.DetermineMiningStationAtHabitat(colony);
            if (builtObject != null && builtObject.SubRole != BuiltObjectSubRole.SmallSpacePort && builtObject.SubRole != BuiltObjectSubRole.MediumSpacePort && builtObject.SubRole != BuiltObjectSubRole.LargeSpacePort)
            {
                builtObject.CompleteTeardown(_Galaxy);
            }
            for (int n = 0; n < colony.BasesAtHabitat.Count; n++)
            {
                BuiltObject builtObject2 = colony.BasesAtHabitat[n];
                if (builtObject2.SubRole == BuiltObjectSubRole.GenericBase || builtObject2.SubRole == BuiltObjectSubRole.EnergyResearchStation || builtObject2.SubRole == BuiltObjectSubRole.WeaponsResearchStation || builtObject2.SubRole == BuiltObjectSubRole.HighTechResearchStation || builtObject2.SubRole == BuiltObjectSubRole.MonitoringStation || builtObject2.SubRole == BuiltObjectSubRole.ResortBase || builtObject2.SubRole == BuiltObjectSubRole.DefensiveBase)
                {
                    if (destroyBases)
                    {
                        builtObject2.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                    }
                    else
                    {
                        TakeOwnershipOfBuiltObject(builtObject2, newEmpire, setDesignAsObsolete: true);
                    }
                }
            }
            if (empire != null)
            {
                List<BuiltObjectRole> list = new List<BuiltObjectRole>();
                list.Add(BuiltObjectRole.Base);
                BuiltObjectList builtObjectsByRole = empire.BuiltObjects.GetBuiltObjectsByRole(list);
                BuiltObjectList builtObjectsByRole2 = empire.PrivateBuiltObjects.GetBuiltObjectsByRole(list);
                for (int num2 = 0; num2 < builtObjectsByRole.Count; num2++)
                {
                    BuiltObject builtObject3 = builtObjectsByRole[num2];
                    if (builtObject3.ParentHabitat == colony || builtObject3.BuiltAt == colony || builtObject3.DockedAt == colony)
                    {
                        if (destroyBases)
                        {
                            builtObject3.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                        }
                        else
                        {
                            TakeOwnershipOfBuiltObject(builtObject3, newEmpire, setDesignAsObsolete: true);
                        }
                    }
                }
                for (int num3 = 0; num3 < builtObjectsByRole2.Count; num3++)
                {
                    BuiltObject builtObject4 = builtObjectsByRole2[num3];
                    if (builtObject4.ParentHabitat == colony || builtObject4.BuiltAt == colony || builtObject4.DockedAt == colony)
                    {
                        if (destroyBases)
                        {
                            builtObject4.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                        }
                        else
                        {
                            TakeOwnershipOfBuiltObject(builtObject4, newEmpire, setDesignAsObsolete: true);
                        }
                    }
                }
            }
            if (colony.ConstructionQueue != null && colony.ConstructionQueue.ConstructionYards.Count > 0)
            {
                for (int num4 = 0; num4 < colony.ConstructionQueue.ConstructionYards.Count; num4++)
                {
                    ConstructionYard constructionYard = colony.ConstructionQueue.ConstructionYards[num4];
                    if (constructionYard.ShipUnderConstruction != null && constructionYard.ShipUnderConstruction.Empire == empire)
                    {
                        if (destroyBases)
                        {
                            constructionYard.ShipUnderConstruction.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                        }
                        else
                        {
                            TakeOwnershipOfBuiltObject(constructionYard.ShipUnderConstruction, newEmpire, setDesignAsObsolete: true);
                        }
                    }
                }
                if (colony.ConstructionQueue.ConstructionWaitQueue != null)
                {
                    BuiltObjectList builtObjectList = new BuiltObjectList();
                    builtObjectList.AddRange(colony.ConstructionQueue.ConstructionWaitQueue);
                    for (int num5 = 0; num5 < builtObjectList.Count; num5++)
                    {
                        BuiltObject builtObject5 = builtObjectList[num5];
                        if (destroyBases)
                        {
                            builtObject5.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                        }
                        else
                        {
                            TakeOwnershipOfBuiltObject(builtObject5, newEmpire, setDesignAsObsolete: true);
                        }
                    }
                    if (destroyBases)
                    {
                        colony.ConstructionQueue.ConstructionWaitQueue.Clear();
                    }
                }
            }
            _Galaxy.CancelPirateMissionsForTarget(colony, EmpireActivityType.Smuggle);
            _Galaxy.CancelPirateMissionsForTarget(colony, EmpireActivityType.Attack);
            ResolveSystemVisibility(colony.Xpos, colony.Ypos, null, null);
            if (ResourceMap != null)
            {
                ResourceMap.SetResourcesKnown(colony, known: true);
            }
            colony.StopRebelling();
            colony.CalculateWarWithOurRace();
            colony.CulturalDistressFactor = 0f;
            SystemInfo other = _Galaxy.DetermineSystemInfo(_Galaxy.Systems[colony.SystemIndex], null, null, null);
            _Galaxy.Systems[colony.SystemIndex].CopyFromOther(other);
            if (empire != null)
            {
                empire.ReviewSpecialBonusesRuinsWonders();
                empire.EvaluateSystemLinks();
            }
            newEmpire?.EvaluateSystemLinks();
        }

        public void TakeOwnershipOfOrders(Habitat colony, Empire oldEmpire, Empire newEmpire)
        {
            OrderList orderList = new OrderList();
            if (colony != null)
            {
                OrderList orders = _Galaxy.Orders.GetOrders(colony);
                orderList.AddRange(orders);
            }
            TakeOwnershipOfOrders(orderList, oldEmpire, newEmpire);
        }

        public void TakeOwnershipOfOrders(BuiltObject spacePort, Empire oldEmpire, Empire newEmpire)
        {
            OrderList orderList = new OrderList();
            if (spacePort != null)
            {
                OrderList orders = _Galaxy.Orders.GetOrders(spacePort);
                orderList.AddRange(orders);
            }
            TakeOwnershipOfOrders(orderList, oldEmpire, newEmpire);
        }

        private void TakeOwnershipOfOrders(OrderList orders, Empire oldEmpire, Empire newEmpire)
        {
            for (int i = 0; i < orders.Count; i++)
            {
                Order order = orders[i];
                if (order.Contracts == null || order.Contracts.Count <= 0)
                {
                    continue;
                }
                for (int j = 0; j < order.Contracts.Count; j++)
                {
                    Contract contract = order.Contracts[j];
                    if (contract.Freighter == null || contract.Freighter.Cargo == null || contract.Freighter.HasBeenDestroyed)
                    {
                        continue;
                    }
                    if (order.CommodityComponent != null)
                    {
                        Cargo cargo = contract.Freighter.Cargo.GetCargo(order.CommodityComponent, oldEmpire);
                        if (cargo != null && cargo.Amount >= contract.AmountToFulfill)
                        {
                            Cargo cargo2 = new Cargo(order.CommodityComponent, contract.AmountToFulfill, newEmpire);
                            if (cargo.Amount == contract.AmountToFulfill)
                            {
                                contract.Freighter.Cargo.Remove(cargo);
                            }
                            else
                            {
                                cargo.Amount -= contract.AmountToFulfill;
                            }
                            contract.Freighter.Cargo.Add(cargo2);
                        }
                    }
                    else
                    {
                        if (order.CommodityResource == null)
                        {
                            continue;
                        }
                        Cargo cargo3 = contract.Freighter.Cargo.GetCargo(order.CommodityResource, oldEmpire);
                        if (cargo3 != null && cargo3.Amount >= contract.AmountToFulfill)
                        {
                            Cargo cargo4 = new Cargo(order.CommodityResource, contract.AmountToFulfill, newEmpire);
                            if (cargo3.Amount == contract.AmountToFulfill)
                            {
                                contract.Freighter.Cargo.Remove(cargo3);
                            }
                            else
                            {
                                cargo3.Amount -= contract.AmountToFulfill;
                            }
                            contract.Freighter.Cargo.Add(cargo4);
                        }
                    }
                }
            }
        }

        public void TakeOwnershipOfCargo(CargoList cargoList, Empire oldEmpire, Empire newEmpire)
        {
            if (cargoList == null)
            {
                return;
            }
            int num = -1;
            if (oldEmpire != null)
            {
                num = oldEmpire.EmpireId;
            }
            CargoList cargoList2 = new CargoList();
            CargoList cargoList3 = new CargoList();
            for (int i = 0; i < cargoList.Count; i++)
            {
                Cargo cargo = cargoList[i];
                if (cargo != null && (cargo.EmpireId == num || cargo.EmpireId < 0 || cargo.EmpireId == _Galaxy.IndependentEmpire.EmpireId))
                {
                    Cargo cargo2 = null;
                    if (cargo.CommodityIsComponent)
                    {
                        cargo2 = new Cargo(cargo.Component, cargo.Amount, newEmpire, cargo.Reserved);
                    }
                    else if (cargo.CommodityIsResource)
                    {
                        cargo2 = new Cargo(cargo.Resource, cargo.Amount, newEmpire, cargo.Reserved);
                    }
                    cargoList2.Add(cargo2);
                    cargoList3.Add(cargo);
                }
            }
            for (int j = 0; j < cargoList3.Count; j++)
            {
                cargoList.Remove(cargoList3[j]);
            }
            foreach (Cargo item in cargoList2)
            {
                cargoList.Add(item);
            }
        }

        public void DestroyUnreservedCargoOfEmpire(CargoList cargoList, Empire empire)
        {
            BaconEmpire.DestroyUnreservedCargoOfEmpire(cargoList, empire);
        }

        public void TakeOwnershipOfBuiltObject(BuiltObject builtObject, Empire newEmpire)
        {
            TakeOwnershipOfBuiltObject(builtObject, newEmpire, setDesignAsObsolete: false);
        }

        public void TakeOwnershipOfBuiltObject(BuiltObject builtObject, Empire newEmpire, bool setDesignAsObsolete)
        {
            TakeOwnershipOfBuiltObject(builtObject, newEmpire, setDesignAsObsolete, removeFromFleet: true);
        }

        public void TakeOwnershipOfBuiltObject(BuiltObject builtObject, Empire newEmpire, bool setDesignAsObsolete, bool removeFromFleet)
        {
            BaconEmpire.TakePossessionOfBuiltObject(this, builtObject, newEmpire);
            Empire actualEmpire = builtObject.ActualEmpire;
            _Galaxy.CheckTriggerEvent(builtObject.GameEventId, newEmpire, EventTriggerType.Capture, null);
            if (removeFromFleet && builtObject.ShipGroup != null)
            {
                builtObject.LeaveShipGroup();
            }
            if (actualEmpire != null)
            {
                int num = actualEmpire.SpacePorts.IndexOf(builtObject);
                if (num >= 0)
                {
                    actualEmpire.SpacePorts.RemoveAt(num);
                }
                int num2 = actualEmpire.ConstructionYards.IndexOf(builtObject);
                if (num2 >= 0)
                {
                    actualEmpire.ConstructionYards.RemoveAt(num2);
                }
                int num3 = actualEmpire.MiningStations.IndexOf(builtObject);
                if (num3 >= 0)
                {
                    actualEmpire.MiningStations.RemoveAt(num3);
                }
                int num4 = actualEmpire.BuiltObjects.IndexOf(builtObject);
                if (num4 >= 0)
                {
                    actualEmpire.BuiltObjects.RemoveAt(num4);
                }
                int num5 = actualEmpire.PrivateBuiltObjects.IndexOf(builtObject);
                if (num5 >= 0)
                {
                    actualEmpire.PrivateBuiltObjects.RemoveAt(num5);
                }
                int num6 = actualEmpire.ResourceExtractors.IndexOf(builtObject);
                if (num6 >= 0)
                {
                    actualEmpire.ResourceExtractors.RemoveAt(num6);
                }
                int num7 = actualEmpire.Manufacturers.IndexOf(builtObject);
                if (num7 >= 0)
                {
                    actualEmpire.Manufacturers.RemoveAt(num7);
                }
                int num8 = actualEmpire.LongRangeScanners.IndexOf(builtObject);
                if (num8 >= 0)
                {
                    actualEmpire.LongRangeScanners.RemoveAt(num8);
                }
                int num9 = actualEmpire.ResearchFacilities.IndexOf(builtObject);
                if (num9 >= 0)
                {
                    actualEmpire.ResearchFacilities.RemoveAt(num9);
                }
                int num10 = actualEmpire.ResortBases.IndexOf(builtObject);
                if (num10 >= 0)
                {
                    actualEmpire.ResortBases.RemoveAt(num10);
                }
                int num11 = actualEmpire.PlanetDestroyers.IndexOf(builtObject);
                if (num11 >= 0)
                {
                    actualEmpire.PlanetDestroyers.RemoveAt(num11);
                }
                int num12 = actualEmpire.RefuellingDepots.IndexOf(builtObject);
                if (num12 >= 0)
                {
                    actualEmpire.RefuellingDepots.RemoveAt(num12);
                }
                int num13 = actualEmpire.Freighters.IndexOf(builtObject);
                if (num13 >= 0)
                {
                    actualEmpire.Freighters.RemoveAt(num13);
                }
                int num14 = actualEmpire.ConstructionShips.IndexOf(builtObject);
                if (num14 >= 0)
                {
                    actualEmpire.ConstructionShips.RemoveAt(num14);
                }
                int num15 = actualEmpire.Outlaws.IndexOf(builtObject);
                if (num15 >= 0)
                {
                    actualEmpire.Outlaws.RemoveAt(num15);
                }
            }
            else if (_Galaxy.AbandonedBuiltObjects.Contains(builtObject))
            {
                _Galaxy.AbandonedBuiltObjects.Remove(builtObject);
            }
            builtObject.Empire = newEmpire;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != null && empire.Outlaws != null && empire.Outlaws.Contains(builtObject))
                {
                    empire.Outlaws.Remove(builtObject);
                }
            }
            for (int j = 0; j < _Galaxy.PirateEmpires.Count; j++)
            {
                Empire empire2 = _Galaxy.PirateEmpires[j];
                if (empire2 != null && empire2.Outlaws != null && empire2.Outlaws.Contains(builtObject))
                {
                    empire2.Outlaws.Remove(builtObject);
                }
            }
            if (actualEmpire != null && actualEmpire.PirateEmpireBaseHabitat != null && (newEmpire == null || newEmpire.PirateEmpireBaseHabitat == null) && builtObject.Role == BuiltObjectRole.Base)
            {
                for (int k = 0; k < _Galaxy.Empires.Count; k++)
                {
                    Empire empire3 = _Galaxy.Empires[k];
                    if (empire3.KnownPirateBases.Contains(builtObject))
                    {
                        empire3.KnownPirateBases.Remove(builtObject);
                    }
                }
            }
            if (newEmpire != null)
            {
                ClearAttackersFromEmpire(builtObject, newEmpire);
                builtObject.Attackers.Clear();
                builtObject.CurrentTarget = null;
                if (builtObject.Mission != null)
                {
                    builtObject.Mission.Clear();
                }
                builtObject.RevertMission = null;
                builtObject.SubsequentMissions.Clear();
                newEmpire.CancelAllShipAttacksNonEnemies(builtObject);
                _Galaxy.CheckCancelIntelligenceMissionsWithTarget(builtObject);
                if (actualEmpire != null)
                {
                    if (builtObject.Owner == actualEmpire)
                    {
                        builtObject.Owner = newEmpire;
                        newEmpire.BuiltObjects.Add(builtObject);
                    }
                    else
                    {
                        builtObject.Owner = null;
                        newEmpire.PrivateBuiltObjects.Add(builtObject);
                    }
                }
                else
                {
                    switch (builtObject.SubRole)
                    {
                        case BuiltObjectSubRole.Escort:
                        case BuiltObjectSubRole.Frigate:
                        case BuiltObjectSubRole.Destroyer:
                        case BuiltObjectSubRole.Cruiser:
                        case BuiltObjectSubRole.CapitalShip:
                        case BuiltObjectSubRole.TroopTransport:
                        case BuiltObjectSubRole.Carrier:
                        case BuiltObjectSubRole.ResupplyShip:
                        case BuiltObjectSubRole.ExplorationShip:
                        case BuiltObjectSubRole.ColonyShip:
                        case BuiltObjectSubRole.ConstructionShip:
                        case BuiltObjectSubRole.SmallSpacePort:
                        case BuiltObjectSubRole.MediumSpacePort:
                        case BuiltObjectSubRole.LargeSpacePort:
                        case BuiltObjectSubRole.ResortBase:
                        case BuiltObjectSubRole.GenericBase:
                        case BuiltObjectSubRole.EnergyResearchStation:
                        case BuiltObjectSubRole.WeaponsResearchStation:
                        case BuiltObjectSubRole.HighTechResearchStation:
                        case BuiltObjectSubRole.MonitoringStation:
                        case BuiltObjectSubRole.DefensiveBase:
                            builtObject.Owner = newEmpire;
                            newEmpire.BuiltObjects.Add(builtObject);
                            break;
                        case BuiltObjectSubRole.SmallFreighter:
                        case BuiltObjectSubRole.MediumFreighter:
                        case BuiltObjectSubRole.LargeFreighter:
                        case BuiltObjectSubRole.GasMiningShip:
                        case BuiltObjectSubRole.MiningShip:
                        case BuiltObjectSubRole.GasMiningStation:
                        case BuiltObjectSubRole.MiningStation:
                            builtObject.Owner = null;
                            newEmpire.PrivateBuiltObjects.Add(builtObject);
                            break;
                    }
                }
                Design design = builtObject.Design.Clone();
                design.Empire = newEmpire;
                Design design2 = null;
                for (int l = 0; l < newEmpire.Designs.Count; l++)
                {
                    Design design3 = newEmpire.Designs[l];
                    if (design3.IsEquivalent(design) && design3.Name == design.Name)
                    {
                        design2 = design3;
                        break;
                    }
                }
                if (design2 == null)
                {
                    design.BuildCount = 1;
                    if (setDesignAsObsolete)
                    {
                        design.IsObsolete = true;
                    }
                    if (design.Stance == BuiltObjectStance.AttackUnallied)
                    {
                        design.Stance = BuiltObjectStance.AttackEnemies;
                    }
                    newEmpire.Designs.Add(design);
                    builtObject.Design = design;
                }
                else
                {
                    design2.BuildCount++;
                    if (design2.Stance == BuiltObjectStance.AttackUnallied)
                    {
                        design2.Stance = BuiltObjectStance.AttackEnemies;
                    }
                    builtObject.Design = design2;
                }
                if (newEmpire.PirateEmpireBaseHabitat == null)
                {
                    builtObject.PirateEmpireId = 0;
                }
                else
                {
                    builtObject.PirateEmpireId = (byte)newEmpire.EmpireId;
                    switch (builtObject.SubRole)
                    {
                        case BuiltObjectSubRole.SmallFreighter:
                        case BuiltObjectSubRole.MediumFreighter:
                        case BuiltObjectSubRole.LargeFreighter:
                        case BuiltObjectSubRole.PassengerShip:
                        case BuiltObjectSubRole.GasMiningShip:
                        case BuiltObjectSubRole.MiningShip:
                            builtObject.Empire = _Galaxy.IndependentEmpire;
                            if (!_Galaxy.IndependentEmpire.PrivateBuiltObjects.Contains(builtObject))
                            {
                                _Galaxy.IndependentEmpire.PrivateBuiltObjects.Add(builtObject);
                            }
                            if (newEmpire.PrivateBuiltObjects != null && !newEmpire.PrivateBuiltObjects.Contains(builtObject))
                            {
                                newEmpire.PrivateBuiltObjects.Add(builtObject);
                            }
                            if (newEmpire.BuiltObjects != null && newEmpire.BuiltObjects.Contains(builtObject))
                            {
                                newEmpire.BuiltObjects.Remove(builtObject);
                            }
                            break;
                    }
                }
            }
            else
            {
                builtObject.PlayerEmpireEncounterAction = BuiltObjectEncounterAction.Prompt;
                builtObject.ClearPreviousMissionRequirements();
                builtObject.Owner = null;
                builtObject.Empire = null;
                builtObject.PirateEmpireId = 0;
            }
            builtObject.ReDefine();
            if (builtObject.Fighters != null && builtObject.Fighters.Count > 0)
            {
                if (newEmpire == null)
                {
                    Fighter[] array = ListHelper.ToArrayThreadSafe(builtObject.Fighters);
                    for (int m = 0; m < array.Length; m++)
                    {
                        array[m].CompleteTeardown(_Galaxy);
                    }
                }
                else
                {
                    for (int n = 0; n < builtObject.Fighters.Count; n++)
                    {
                        builtObject.Fighters[n].Empire = newEmpire;
                        builtObject.Fighters[n].Owner = newEmpire;
                    }
                }
            }
            if (builtObject.Characters != null && builtObject.Characters.Count > 0)
            {
                Character[] array2 = ListHelper.ToArrayThreadSafe(builtObject.Characters);
                foreach (Character character in array2)
                {
                    character.Kill(_Galaxy);
                }
            }
            if (builtObject.Troops != null && builtObject.Troops.Count > 0)
            {
                if (newEmpire == _Galaxy.IndependentEmpire || newEmpire == null)
                {
                    for (int num17 = 0; num17 < builtObject.Troops.Count; num17++)
                    {
                        Troop troop = builtObject.Troops[num17];
                        actualEmpire?.Troops.Remove(troop);
                        troop.Empire = null;
                        troop.Colony = null;
                        troop.BuiltObject = null;
                    }
                    builtObject.Troops.Clear();
                }
                else
                {
                    for (int num18 = 0; num18 < builtObject.Troops.Count; num18++)
                    {
                        Troop troop2 = builtObject.Troops[num18];
                        actualEmpire?.Troops.Remove(troop2);
                        troop2.Empire = newEmpire;
                        newEmpire.Troops.Add(troop2);
                    }
                }
            }
            if (builtObject.TroopCapacity > 0 && newEmpire != null && newEmpire.Policy != null)
            {
                builtObject.SetTroopLoadoutsFromPolicy(newEmpire.Policy);
            }
            if (newEmpire != null)
            {
                DestroyUnreservedCargoOfEmpire(builtObject.Cargo, actualEmpire);
                TakeOwnershipOfCargo(builtObject.Cargo, actualEmpire, newEmpire);
            }
            if (actualEmpire != null)
            {
                if (newEmpire != null)
                {
                    TakeOwnershipOfOrders(builtObject, actualEmpire, newEmpire);
                }
                else
                {
                    if (builtObject.ContractsToFulfill != null && builtObject.ContractsToFulfill.Count > 0)
                    {
                        builtObject.CheckCancelContracts();
                    }
                    OrderList orders = _Galaxy.Orders.GetOrders(builtObject);
                    if (orders.Count > 0)
                    {
                        lock (_Galaxy.Orders._LockObject)
                        {
                            foreach (Order item in orders)
                            {
                                _Galaxy.Orders.Remove(item);
                            }
                        }
                    }
                    if (builtObject.Cargo != null)
                    {
                        builtObject.Cargo.Clear();
                    }
                }
            }
            if (builtObject.ConstructionQueue != null && builtObject.ConstructionQueue.ConstructionYards.Count > 0)
            {
                for (int num19 = 0; num19 < builtObject.ConstructionQueue.ConstructionYards.Count; num19++)
                {
                    ConstructionYard constructionYard = builtObject.ConstructionQueue.ConstructionYards[num19];
                    if (constructionYard.ShipUnderConstruction != null && constructionYard.ShipUnderConstruction.Empire == actualEmpire)
                    {
                        TakeOwnershipOfBuiltObject(constructionYard.ShipUnderConstruction, newEmpire, setDesignAsObsolete);
                    }
                }
                if (builtObject.ConstructionQueue.ConstructionWaitQueue != null)
                {
                    for (int num20 = 0; num20 < builtObject.ConstructionQueue.ConstructionWaitQueue.Count; num20++)
                    {
                        BuiltObject builtObject2 = builtObject.ConstructionQueue.ConstructionWaitQueue[num20];
                        TakeOwnershipOfBuiltObject(builtObject2, newEmpire, setDesignAsObsolete);
                    }
                }
            }
            actualEmpire?.ResolveSystemVisibility(builtObject.Xpos, builtObject.Ypos, null, null);
            newEmpire?.ResolveSystemVisibility(builtObject.Xpos, builtObject.Ypos, null, null);
            builtObject.IsAutoControlled = true;
        }

        public void ClearFleetHomeBases(StellarObject currentBase)
        {
            if (ShipGroups == null || currentBase == null)
            {
                return;
            }
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup == null || shipGroup.GatherPoint == null)
                {
                    continue;
                }
                bool flag = false;
                if (currentBase is Habitat)
                {
                    Habitat habitat = (Habitat)currentBase;
                    if (shipGroup.GatherPoint is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)shipGroup.GatherPoint;
                        if (builtObject.ParentHabitat != null && builtObject.ParentHabitat == habitat)
                        {
                            flag = true;
                        }
                    }
                    else if (shipGroup.GatherPoint is Habitat)
                    {
                        Habitat habitat2 = (Habitat)shipGroup.GatherPoint;
                        if (habitat2 == habitat)
                        {
                            flag = true;
                        }
                    }
                }
                else if (currentBase is BuiltObject)
                {
                    BuiltObject builtObject2 = (BuiltObject)currentBase;
                    if (shipGroup.GatherPoint is BuiltObject)
                    {
                        BuiltObject builtObject3 = (BuiltObject)shipGroup.GatherPoint;
                        if (builtObject3 != null && builtObject3 == builtObject2)
                        {
                            flag = true;
                        }
                    }
                    else if (shipGroup.GatherPoint is Habitat)
                    {
                        Habitat habitat3 = (Habitat)shipGroup.GatherPoint;
                        if (builtObject2.ParentHabitat != null && builtObject2.ParentHabitat == habitat3)
                        {
                            flag = true;
                        }
                    }
                }
                if (flag)
                {
                    StellarObject stellarObject = SelectFleetBase(shipGroup);
                    if (stellarObject != shipGroup.GatherPoint)
                    {
                        shipGroup.GatherPoint = stellarObject;
                    }
                    else
                    {
                        shipGroup.GatherPoint = null;
                    }
                }
            }
        }

        public void RecalculateColonyInfluenceRadiuses(bool empireHasWarptech)
        {
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Colonies[i]?.RecalculateColonyInfluenceRadius(empireHasWarptech);
                }
            }
        }

        private void CheckKnownPirateBases()
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            for (int i = 0; i < KnownPirateBases.Count; i++)
            {
                BuiltObject builtObject = KnownPirateBases[i];
                if (!_Galaxy.PirateEmpires.Contains(builtObject.Empire) || builtObject.Empire == null || builtObject.Empire == _Galaxy.IndependentEmpire)
                {
                    builtObjectList.Add(builtObject);
                }
            }
            foreach (BuiltObject item in builtObjectList)
            {
                KnownPirateBases.Remove(item);
            }
        }

        private void ProcessSubjugationTribute(double timePassed)
        {
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion && diplomaticRelation.Initiator != this)
                {
                    double num = AnnualTaxRevenue + ThisYearsForeignTradeBonuses + ThisYearsSpacePortIncome;
                    double num2 = num * Galaxy.SubjugationTributePercentage;
                    double num3 = timePassed / (double)Galaxy.RealSecondsInGalacticYear;
                    double num4 = num2 * num3;
                    diplomaticRelation.Initiator.StateMoney += num4;
                    StateMoney -= num4;
                }
            }
        }

        public double CalculateAnnualSubjugationTributeIncome()
        {
            double num = 0.0;
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion && diplomaticRelation.Initiator == this)
                {
                    Empire otherEmpire = diplomaticRelation.OtherEmpire;
                    double num2 = otherEmpire.AnnualTaxRevenue + otherEmpire.ThisYearsForeignTradeBonuses + otherEmpire.ThisYearsSpacePortIncome;
                    num += num2 * Galaxy.SubjugationTributePercentage;
                }
            }
            return num;
        }

        private void ProcessTradeBonuses(double timePassed)
        {
            double num = timePassed / (double)Galaxy.RealSecondsInGalacticYear;
            double num2 = Galaxy.TradeBonusAnnualIncrease * num;
            long currentStarDate = _Galaxy.CurrentStarDate;
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                diplomaticRelation.AgeTradeValues(currentStarDate);
                double num3 = 0.0;
                switch (diplomaticRelation.Type)
                {
                    case DiplomaticRelationType.FreeTradeAgreement:
                        diplomaticRelation.TradeBonus += num2;
                        diplomaticRelation.TradeBonus = Math.Min(diplomaticRelation.TradeBonus, Galaxy.TradeBonusMaximumFreeTrade);
                        num3 = diplomaticRelation.AnnualTradeBonus * num;
                        break;
                    case DiplomaticRelationType.MutualDefensePact:
                    case DiplomaticRelationType.Protectorate:
                        diplomaticRelation.TradeBonus += num2;
                        diplomaticRelation.TradeBonus = Math.Min(diplomaticRelation.TradeBonus, Galaxy.TradeBonusMaximumMutualDefense);
                        num3 = diplomaticRelation.AnnualTradeBonus * num;
                        break;
                    default:
                        diplomaticRelation.TradeBonus = 0.0;
                        break;
                }
                StateMoney += num3;
            }
        }

        private void MergeGalaxyMapsForSharedVisibilityEmpires()
        {
            for (int i = 0; i < _EmpiresSharedVisibility.Count; i++)
            {
                Empire empire = _EmpiresSharedVisibility[i];
                if (empire.Active)
                {
                    _Galaxy.MergeGalaxyMap(empire, this);
                }
            }
        }

        private void MergeKnownPirateBasesForSharedVisibilityEmpires()
        {
            for (int i = 0; i < _EmpiresSharedVisibility.Count; i++)
            {
                Empire empire = _EmpiresSharedVisibility[i];
                if (!empire.Active)
                {
                    continue;
                }
                for (int j = 0; j < empire.KnownPirateBases.Count; j++)
                {
                    BuiltObject builtObject = empire.KnownPirateBases[j];
                    if (!_KnownPirateBases.Contains(builtObject) && !builtObject.HasBeenDestroyed)
                    {
                        _KnownPirateBases.Add(builtObject);
                    }
                }
            }
        }

        private void InitiateEmpireSplit(double splinterPortion)
        {
            bool declareWar = false;
            if (Galaxy.Rnd.Next(0, 4) > 0)
            {
                declareWar = true;
            }
            InitiateEmpireSplit(splinterPortion, declareWar);
        }

        public void InitiateEmpireSplit(double splinterPortion, bool declareWar)
        {
            HabitatList coloniesLost = new HabitatList();
            Empire empire = SplinterEmpire(this, splinterPortion, out coloniesLost);
            if (empire == null)
            {
                return;
            }
            if (PirateEmpireBaseHabitat == null)
            {
                if (declareWar)
                {
                    EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(empire);
                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - 40.0;
                    DeclareWar(empire);
                }
                else
                {
                    EmpireEvaluation empireEvaluation2 = ObtainEmpireEvaluation(empire);
                    empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw - 10.0;
                }
            }
            string text = "";
            string text2 = "";
            if (declareWar)
            {
                text2 = string.Format(TextResolver.GetText("Civil War in the EMPIRE"), Name);
                text = text + string.Format(TextResolver.GetText("A civil war is underway in the OTHEREMPIRE"), Name) + "\n\n";
            }
            else
            {
                text2 = string.Format(TextResolver.GetText("Revolution in the EMPIRE"), Name);
                text = text + string.Format(TextResolver.GetText("A split has occurred in the OTHEREMPIRE"), Name) + "\n\n";
            }
            text += string.Format(TextResolver.GetText("Empire Split Detail COLONYCOUNT EMPIRE NEWEMPIRE"), coloniesLost.Count.ToString(), Name, empire.Name);
            string text3 = TextResolver.GetText("Revolution!");
            string text4 = string.Format(TextResolver.GetText("Your Empire Split Detail COLONYCOUNT NEWEMPIRE"), coloniesLost.Count.ToString(), empire.Name);
            if (declareWar)
            {
                text3 = TextResolver.GetText("Civil War!");
                text4 = text4 + "\n\n" + TextResolver.GetText("We are now at war with these traitors");
            }
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire2 = _Galaxy.Empires[i];
                if (empire2 == this)
                {
                    empire2.SendEventMessageToEmpire(EventMessageType.EmpireSplits, text3, text4, empire, empire.Capital);
                }
                else
                {
                    if (empire2 == empire)
                    {
                        continue;
                    }
                    bool flag = false;
                    if (PirateEmpireBaseHabitat != null)
                    {
                        DiplomaticRelation diplomaticRelation = empire2.ObtainDiplomaticRelation(this);
                        if (diplomaticRelation.Type != 0)
                        {
                            flag = true;
                        }
                    }
                    else
                    {
                        PirateRelation pirateRelation = empire2.ObtainPirateRelation(this);
                        if (pirateRelation.Type != 0)
                        {
                            flag = true;
                        }
                    }
                    if (flag)
                    {
                        empire2.SendEventMessageToEmpire(EventMessageType.EmpireSplits, text2, text, empire, empire.Capital);
                    }
                }
            }
            for (int j = 0; j < _Galaxy.PirateEmpires.Count; j++)
            {
                Empire empire3 = _Galaxy.PirateEmpires[j];
                if (empire3 == this)
                {
                    empire3.SendEventMessageToEmpire(EventMessageType.EmpireSplits, text3, text4, empire, empire.Capital);
                }
                else if (empire3 != empire)
                {
                    bool flag2 = false;
                    PirateRelation pirateRelation2 = empire3.ObtainPirateRelation(this);
                    if (pirateRelation2.Type != 0)
                    {
                        flag2 = true;
                    }
                    if (flag2)
                    {
                        empire3.SendEventMessageToEmpire(EventMessageType.EmpireSplits, text2, text, empire, empire.Capital);
                    }
                }
            }
            LastDisasterDate = _Galaxy.CurrentStarDate;
        }

        private void RandomEventPirateControlledColonyGivesShip()
        {
            if (PirateEmpireBaseHabitat == null)
            {
                return;
            }
            Habitat habitat = null;
            if (Colonies.Count > 0)
            {
                habitat = Colonies[Galaxy.Rnd.Next(0, Colonies.Count)];
            }
            if (habitat == null || !habitat.GetPirateControl().CheckFactionHasControl(this))
            {
                return;
            }
            Design design = null;
            switch (Galaxy.Rnd.Next(0, 5))
            {
                case 0:
                    design = LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.SmallFreighter, this);
                    break;
                case 1:
                    design = LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.MediumFreighter, this);
                    break;
                case 2:
                    design = LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Escort, this);
                    break;
                case 3:
                    design = LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Frigate, this);
                    break;
                case 4:
                    design = LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.ConstructionShip, this);
                    break;
            }
            if (design == null)
            {
                return;
            }
            BuiltObject builtObject = GenerateNewBuiltObject(design, habitat);
            if (builtObject == null)
            {
                return;
            }
            Character character = null;
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                bool isRandomCharacter = false;
                character = GenerateNewCharacter(CharacterRole.ShipCaptain, builtObject, activate: true, out isRandomCharacter);
            }
            object additionalData = builtObject;
            string empty = string.Empty;
            string empty2 = string.Empty;
            if (character != null)
            {
                additionalData = character;
                switch (design.Role)
                {
                    case BuiltObjectRole.Freight:
                        empty = TextResolver.GetText("Smuggler Joins Us");
                        empty2 = string.Format(TextResolver.GetText("Pirate Event New Freighter With Captain"), character.Name, builtObject.Name, habitat.Name);
                        character.AddTrait(CharacterTraitType.Smuggler, starting: true, _Galaxy);
                        break;
                    case BuiltObjectRole.Military:
                        builtObject.Name = _Galaxy.SelectRandomUniqueMilitaryShipName();
                        empty = TextResolver.GetText("Bounty Hunter Joins Us");
                        empty2 = string.Format(TextResolver.GetText("Pirate Event New Military Ship With Captain"), character.Name, builtObject.Name, habitat.Name);
                        character.AddTrait(CharacterTraitType.BountyHunter, starting: true, _Galaxy);
                        break;
                    default:
                        empty = TextResolver.GetText("Ship Captain Joins Us");
                        empty2 = string.Format(TextResolver.GetText("Pirate Event New Ship With Captain"), character.Name, builtObject.Name, habitat.Name);
                        break;
                }
            }
            else
            {
                switch (design.Role)
                {
                    case BuiltObjectRole.Freight:
                        empty = TextResolver.GetText("Smuggling Ship Acquired");
                        empty2 = string.Format(TextResolver.GetText("Pirate Event New Freighter"), builtObject.Name, habitat.Name);
                        break;
                    case BuiltObjectRole.Military:
                        builtObject.Name = _Galaxy.SelectRandomUniqueMilitaryShipName();
                        empty = TextResolver.GetText("Military Ship Acquired");
                        empty2 = string.Format(TextResolver.GetText("Pirate Event New Military Ship"), habitat.Name, builtObject.Name);
                        break;
                    default:
                        empty = TextResolver.GetText("Ship Acquired");
                        empty2 = string.Format(TextResolver.GetText("Pirate Event New Ship"), habitat.Name, builtObject.Name);
                        break;
                }
            }
            SendEventMessageToEmpire(EventMessageType.FreeSuperShip, empty, empty2, additionalData, builtObject);
        }

        public void RandomEventRareResourceIntercepted()
        {
            bool flag = false;
            byte resource = byte.MaxValue;
            Empire empire = null;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire2 = _Galaxy.Empires[i];
                if (empire2 != this && !empire2.Reclusive && empire2.CheckEmpireSuppliesRestrictedResources(out resource))
                {
                    flag = true;
                    empire = empire2;
                    break;
                }
            }
            if (flag && resource != byte.MaxValue && empire != null && empire.Capital != null)
            {
                BuiltObject spaceport = _Galaxy.FastFindNearestSpacePort(empire.Capital.Xpos, empire.Capital.Ypos, this);
                RandomEventRareResourceIntercepted(new Resource(resource), spaceport, empire);
            }
        }

        public void RandomEventRareResourceIntercepted(Resource resource, BuiltObject spaceport, Empire supplyingEmpire)
        {
            if (spaceport == null)
            {
                return;
            }
            spaceport.Cargo.Add(new Cargo(resource, 200, this));
            string empty = string.Empty;
            string text = string.Format(arg1: (spaceport.NearestSystemStar == null) ? Capital.Name : spaceport.NearestSystemStar.Name, format: TextResolver.GetText("Intercept Resource RESOURCE SYSTEM SPACEPORT"), arg0: resource.Name, arg2: spaceport.Name);
            bool flag = false;
            if (supplyingEmpire != null)
            {
                if (PirateEmpireBaseHabitat == null)
                {
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(supplyingEmpire);
                    if (diplomaticRelation.Type != 0)
                    {
                        flag = true;
                    }
                }
                else
                {
                    PirateRelation pirateRelation = ObtainPirateRelation(supplyingEmpire);
                    if (pirateRelation.Type != 0)
                    {
                        flag = true;
                    }
                }
            }
            if (!flag)
            {
                text = text + "\n\n" + string.Format(TextResolver.GetText("Intercept Resource unclear origin"), resource.Name);
            }
            SendEventMessageToEmpire(EventMessageType.RareResourceIntercepted, TextResolver.GetText("Rare Resource Intercepted"), text, resource, spaceport);
        }

        private void RandomEventUncoverKnownLocations()
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == this || empire == null)
                {
                    continue;
                }
                bool flag = false;
                if (empire.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                {
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                    if (diplomaticRelation.Type != 0)
                    {
                        flag = true;
                    }
                }
                else
                {
                    PirateRelation pirateRelation = ObtainPirateRelation(empire);
                    if (pirateRelation.Type != 0)
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    continue;
                }
                GalaxyLocationList galaxyLocationList = empire.KnownGalaxyLocations.FindLocations(GalaxyLocationType.PlanetDestroyer);
                if (galaxyLocationList != null && galaxyLocationList.Count > 0)
                {
                    for (int j = 0; j < empire.BuiltObjects.Count; j++)
                    {
                        BuiltObject builtObject = empire.BuiltObjects[j];
                        if (builtObject.SubRole != BuiltObjectSubRole.ConstructionShip || builtObject.Mission == null || (builtObject.Mission.Type != BuiltObjectMissionType.Build && builtObject.Mission.Type != BuiltObjectMissionType.BuildRepair))
                        {
                            continue;
                        }
                        foreach (GalaxyLocation item in galaxyLocationList)
                        {
                            if (KnownGalaxyLocations.Contains(item) || builtObject.Mission.TargetBuiltObject != item.RelatedBuiltObject)
                            {
                                continue;
                            }
                            BuiltObject relatedBuiltObject = item.RelatedBuiltObject;
                            string text = string.Empty;
                            BuiltObject builtObject2 = _Galaxy.FastFindNearestLongRangeScanner((int)item.Xpos, (int)item.Ypos, this);
                            if (builtObject2 == null)
                            {
                                builtObject2 = _Galaxy.FindNearestBuiltObject((int)item.Xpos, (int)item.Ypos, this, BuiltObjectSubRole.ExplorationShip, fullyFunctional: true);
                                if (builtObject2 != null)
                                {
                                    text = string.Format(TextResolver.GetText("Communications Intercept SHIPNAME EMPIRE"), builtObject2.Name, empire.Name) + ".\n\n";
                                }
                            }
                            else
                            {
                                text = string.Format(TextResolver.GetText("Communications Intercept MONITORINGSTATION EMPIRE"), builtObject2.Name, empire.Name) + ".\n\n";
                            }
                            if (builtObject2 == null)
                            {
                                continue;
                            }
                            string message = text + string.Format(TextResolver.GetText("Communications Intercept Planet Destroyer"), relatedBuiltObject.NearestSystemStar.Name, Galaxy.ResolveSectorDescription(Galaxy.ResolveSector(relatedBuiltObject.Xpos, relatedBuiltObject.Ypos)), empire.Name);
                            KnownGalaxyLocations.Add(item);
                            AddLocationHint(new Point((int)item.Xpos + (int)item.Width / 2, (int)item.Ypos + (int)item.Height / 2));
                            object[] additionalData = new object[2] { empire, item };
                            SendEventMessageToEmpire(EventMessageType.UncoverPlanetDestroyerConstruction, TextResolver.GetText("Secret Construction Project Revealed"), message, additionalData, relatedBuiltObject);
                            if (this == _Galaxy.PlayerEmpire)
                            {
                                return;
                            }
                            bool flag2 = false;
                            if (PirateEmpireBaseHabitat == null && empire.PirateEmpireBaseHabitat == null)
                            {
                                DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(empire);
                                if (diplomaticRelation2.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation2.Type == DiplomaticRelationType.Protectorate || diplomaticRelation2.Type == DiplomaticRelationType.FreeTradeAgreement)
                                {
                                    flag2 = true;
                                }
                            }
                            else
                            {
                                PirateRelation pirateRelation2 = ObtainPirateRelation(empire);
                                if (pirateRelation2.Type == PirateRelationType.Protection)
                                {
                                    flag2 = true;
                                }
                            }
                            if (!flag2)
                            {
                                double num = (double)MilitaryPotency / (double)empire.MilitaryPotency;
                                double num2 = 0.3 * ((double)DominantRace.CautionLevel / 100.0);
                                if (num > num2)
                                {
                                    ExposePlanetDestroyerConstruction(empire, item, this);
                                }
                            }
                            return;
                        }
                    }
                }
                galaxyLocationList = empire.KnownGalaxyLocations.FindLocations(GalaxyLocationType.DebrisField);
                if (galaxyLocationList != null && galaxyLocationList.Count > 0)
                {
                    foreach (GalaxyLocation item2 in galaxyLocationList)
                    {
                        if (KnownGalaxyLocations.Contains(item2))
                        {
                            continue;
                        }
                        string text2 = string.Empty;
                        BuiltObject builtObject3 = _Galaxy.FastFindNearestLongRangeScanner((int)item2.Xpos, (int)item2.Ypos, this);
                        if (builtObject3 == null)
                        {
                            builtObject3 = _Galaxy.FindNearestBuiltObject((int)item2.Xpos, (int)item2.Ypos, this, BuiltObjectSubRole.ExplorationShip, fullyFunctional: true);
                            if (builtObject3 != null)
                            {
                                text2 = string.Format(TextResolver.GetText("Communications Intercept SHIPNAME EMPIRE"), builtObject3.Name, empire.Name) + ".\n\n";
                            }
                        }
                        else
                        {
                            text2 = string.Format(TextResolver.GetText("Communications Intercept MONITORINGSTATION EMPIRE"), builtObject3.Name, empire.Name) + ".\n\n";
                        }
                        if (builtObject3 != null)
                        {
                            Habitat habitat = _Galaxy.FastFindNearestSystem(item2.Xpos, item2.Ypos);
                            string message2 = text2 + string.Format(TextResolver.GetText("Communications Intercept Debris Field"), empire.Name, habitat.Name, Galaxy.ResolveSectorDescription(Galaxy.ResolveSector(item2.Xpos, item2.Ypos)));
                            KnownGalaxyLocations.Add(item2);
                            Point point = new Point((int)item2.Xpos + (int)item2.Width / 2, (int)item2.Ypos + (int)item2.Height / 2);
                            AddLocationHint(point);
                            SendEventMessageToEmpire(EventMessageType.UncoverKnownLocation, TextResolver.GetText("Debris Field Revealed"), message2, item2, point);
                            return;
                        }
                    }
                }
                galaxyLocationList = empire.KnownGalaxyLocations.FindLocations(GalaxyLocationType.RestrictedArea);
                if (galaxyLocationList == null || galaxyLocationList.Count <= 0)
                {
                    continue;
                }
                foreach (GalaxyLocation item3 in galaxyLocationList)
                {
                    if (KnownGalaxyLocations.Contains(item3))
                    {
                        continue;
                    }
                    string text3 = string.Empty;
                    BuiltObject builtObject4 = _Galaxy.FastFindNearestLongRangeScanner((int)item3.Xpos, (int)item3.Ypos, this);
                    if (builtObject4 == null)
                    {
                        builtObject4 = _Galaxy.FindNearestBuiltObject((int)item3.Xpos, (int)item3.Ypos, this, BuiltObjectSubRole.ExplorationShip, fullyFunctional: true);
                        if (builtObject4 != null)
                        {
                            text3 = string.Format(TextResolver.GetText("Communications Intercept SHIPNAME EMPIRE"), builtObject4.Name, empire.Name) + ".\n\n";
                        }
                    }
                    else
                    {
                        text3 = string.Format(TextResolver.GetText("Communications Intercept MONITORINGSTATION EMPIRE"), builtObject4.Name, empire.Name) + ".\n\n";
                    }
                    if (builtObject4 != null)
                    {
                        Habitat habitat2 = _Galaxy.FastFindNearestSystem(item3.Xpos, item3.Ypos);
                        string message3 = text3 + string.Format(TextResolver.GetText("Communications Intercept Restricted Area"), empire.Name, habitat2.Name, Galaxy.ResolveSectorDescription(Galaxy.ResolveSector(item3.Xpos, item3.Ypos)));
                        KnownGalaxyLocations.Add(item3);
                        Point point2 = new Point((int)item3.Xpos + (int)item3.Width / 2, (int)item3.Ypos + (int)item3.Height / 2);
                        AddLocationHint(point2);
                        SendEventMessageToEmpire(EventMessageType.UncoverKnownLocation, TextResolver.GetText("Restricted Area Revealed"), message3, item3, point2);
                        return;
                    }
                }
            }
        }

        public void ExposePlanetDestroyerConstruction(Empire planetDestroyerBuilder, GalaxyLocation planetDestroyerLocation, Empire exposer)
        {
            if (planetDestroyerBuilder.PirateEmpireBaseHabitat != null)
            {
                return;
            }
            Habitat habitat = _Galaxy.FastFindNearestSystem(planetDestroyerLocation.Xpos, planetDestroyerLocation.Ypos);
            string description = string.Format(TextResolver.GetText("Warning Planet Destroyer Construction"), planetDestroyerBuilder.Name, habitat.Name, Galaxy.ResolveSectorDescription(Galaxy.ResolveSector(habitat.Xpos, habitat.Ypos)));
            if (exposer.PirateEmpireBaseHabitat == null)
            {
                for (int i = 0; i < exposer.DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = exposer.DiplomaticRelations[i];
                    if (diplomaticRelation.Type != 0 && diplomaticRelation.OtherEmpire != planetDestroyerBuilder)
                    {
                        EmpireEvaluation empireEvaluation = diplomaticRelation.OtherEmpire.ObtainEmpireEvaluation(planetDestroyerBuilder);
                        empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - 12.0;
                        if (!diplomaticRelation.OtherEmpire.KnownGalaxyLocations.Contains(planetDestroyerLocation))
                        {
                            diplomaticRelation.OtherEmpire.KnownGalaxyLocations.Add(planetDestroyerLocation);
                        }
                        exposer.SendMessageToEmpire(diplomaticRelation.OtherEmpire, EmpireMessageType.GeneralWarning, planetDestroyerLocation.RelatedBuiltObject, description);
                    }
                }
            }
            else
            {
                for (int j = 0; j < exposer.PirateRelations.Count; j++)
                {
                    PirateRelation pirateRelation = exposer.PirateRelations[j];
                    if (pirateRelation.Type != 0 && pirateRelation.OtherEmpire != planetDestroyerBuilder && pirateRelation.OtherEmpire.PirateEmpireBaseHabitat == null)
                    {
                        EmpireEvaluation empireEvaluation2 = pirateRelation.OtherEmpire.ObtainEmpireEvaluation(planetDestroyerBuilder);
                        empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw - 12.0;
                        if (!pirateRelation.OtherEmpire.KnownGalaxyLocations.Contains(planetDestroyerLocation))
                        {
                            pirateRelation.OtherEmpire.KnownGalaxyLocations.Add(planetDestroyerLocation);
                        }
                        exposer.SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.GeneralWarning, planetDestroyerLocation.RelatedBuiltObject, description);
                    }
                }
            }
            planetDestroyerBuilder.CivilityRating -= 7.0;
            if (exposer.PirateEmpireBaseHabitat == null)
            {
                EmpireEvaluation empireEvaluation3 = planetDestroyerBuilder.ObtainEmpireEvaluation(exposer);
                empireEvaluation3.IncidentEvaluation = empireEvaluation3.IncidentEvaluationRaw - 20.0;
            }
            else
            {
                planetDestroyerBuilder.ChangePirateEvaluation(exposer, -20f, PirateRelationEvaluationType.DetectedIntelligenceMissions);
            }
        }

        private void RandomEventUncoverPirateAttackFunding()
        {
            for (int i = 0; i < _Galaxy.PirateEmpires.Count; i++)
            {
                Empire empire = _Galaxy.PirateEmpires[i];
                if (!KnownPirateEmpires.Contains(empire))
                {
                    continue;
                }
                EmpireActivityList empireActivityList = empire.PirateMissions.ResolveActivitiesByType(EmpireActivityType.Attack);
                if (empireActivityList == null || empireActivityList.Count <= 0)
                {
                    continue;
                }
                for (int j = 0; j < empireActivityList.Count; j++)
                {
                    EmpireActivity empireActivity = empireActivityList[j];
                    if (empireActivity.RequestingEmpire == this || empireActivity.AssignedEmpire != empire)
                    {
                        continue;
                    }
                    if (empireActivity.TargetEmpire == this)
                    {
                        string message = string.Format(TextResolver.GetText("Uncover Pirate Attack Funding Against Us"), empireActivity.RequestingEmpire.Name, empire.Name);
                        SendEventMessageToEmpire(EventMessageType.UncoverPirateAttackFundingYourEmpire, TextResolver.GetText("Pirates secretly funded to attack us"), message, empireActivity, null);
                        EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(empireActivity.RequestingEmpire);
                        empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - 15.0;
                        empireActivity.RequestingEmpire.CivilityRating -= 3.0;
                        if (this != _Galaxy.PlayerEmpire)
                        {
                            string description = string.Format(TextResolver.GetText("Uncover Pirate Attack Funding Against Us Threaten"), empire.Name);
                            SendMessageToEmpire(empireActivity.RequestingEmpire, EmpireMessageType.GeneralWarning, null, description);
                        }
                        return;
                    }
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empireActivity.TargetEmpire);
                    DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(empireActivity.RequestingEmpire);
                    if (diplomaticRelation.Type != 0 && diplomaticRelation2.Type != 0)
                    {
                        string message2 = string.Format(TextResolver.GetText("Uncover Pirate Attack Funding Against Other"), empireActivity.RequestingEmpire.Name, empire.Name, empireActivity.TargetEmpire.Name);
                        SendEventMessageToEmpire(EventMessageType.UncoverPirateAttackFundingAnotherEmpire, TextResolver.GetText("Pirates secretly funded to attack empire"), message2, empireActivity, null);
                        return;
                    }
                }
            }
        }

        public void EmpireEventRogueFleetDefects()
        {
            Empire empireToDefectTo = null;
            double num = double.MaxValue;
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.OtherEmpire == this)
                {
                    continue;
                }
                double num2 = 1.0;
                num2 = diplomaticRelation.Type switch
                {
                    DiplomaticRelationType.War => 2.0,
                    DiplomaticRelationType.TradeSanctions => 1.5,
                    DiplomaticRelationType.None => 1.2,
                    _ => 1.0,
                };
                if (diplomaticRelation.OtherEmpire.CivilityRating >= -5.0)
                {
                    double d = diplomaticRelation.OtherEmpire.CivilityRating + 6.0;
                    num2 *= Math.Sqrt(Math.Sqrt(d));
                    double num3 = _Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, diplomaticRelation.OtherEmpire.Capital.Xpos, diplomaticRelation.OtherEmpire.Capital.Ypos);
                    num3 /= num2;
                    if (num3 < num)
                    {
                        empireToDefectTo = diplomaticRelation.OtherEmpire;
                        num = num3;
                    }
                }
            }
            EmpireEventRogueFleetDefects(empireToDefectTo);
        }

        public ShipGroup EmpireEventRogueFleetDefects(Empire empireToDefectTo)
        {
            ShipGroup result = null;
            if (ShipGroups.Count > 1)
            {
                if (empireToDefectTo != null)
                {
                    ShipGroup shipGroup = null;
                    double num = double.MaxValue;
                    for (int i = 0; i < ShipGroups.Count; i++)
                    {
                        ShipGroup shipGroup2 = ShipGroups[i];
                        double num2 = _Galaxy.CalculateDistance(empireToDefectTo.Capital.Xpos, empireToDefectTo.Capital.Ypos, shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos);
                        if (num2 < num)
                        {
                            shipGroup = shipGroup2;
                            num = num2;
                        }
                    }
                    if (shipGroup != null)
                    {
                        result = shipGroup;
                        empireToDefectTo.DefectFleet(shipGroup, empireToDefectTo);
                    }
                }
                LastDisasterDate = _Galaxy.CurrentStarDate;
            }
            return result;
        }

        public void DefectFleet(ShipGroup fleet, Empire newEmpire)
        {
            EmpireEvaluation empireEvaluation = fleet.Empire.ObtainEmpireEvaluation(newEmpire);
            empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - 25.0;
            string message = string.Format(TextResolver.GetText("Rogue Fleet Defects Detail"), fleet.Name, newEmpire.Name);
            string text = TextResolver.GetText("Rogue Fleet Defects!");
            fleet.Empire.SendEventMessageToEmpire(EventMessageType.RogueFleetDefectsFromUs, text, message, newEmpire, fleet.LeadShip);
            if (fleet.Empire != _Galaxy.PlayerEmpire)
            {
                string description = string.Format(TextResolver.GetText("Rogue Fleet Defects Warning"), fleet.Name);
                fleet.Empire.SendMessageToEmpire(newEmpire, EmpireMessageType.GeneralWarning, fleet, description);
            }
            fleet.SubsequentMissions.Clear();
            fleet.ForceCompleteMission();
            fleet.Empire.ShipGroups.Remove(fleet);
            for (int i = 0; i < fleet.Ships.Count; i++)
            {
                BuiltObject builtObject = fleet.Ships[i];
                newEmpire.TakeOwnershipOfBuiltObject(builtObject, newEmpire, setDesignAsObsolete: true, removeFromFleet: false);
            }
            if (!newEmpire.ShipGroups.Contains(fleet))
            {
                newEmpire.ShipGroups.Add(fleet);
                newEmpire.ShipGroups.Sort();
            }
            fleet.Empire = newEmpire;
            fleet.GatherPoint = newEmpire.SelectFleetBase(fleet);
        }

        private void PirateReviewRandomEvents()
        {
            if (Galaxy.Rnd.Next(0, 7) == 1)
            {
                RandomEventUncoverPirateAttackFunding();
                return;
            }
            int maxValue = Math.Max(5, 8 - Colonies.Count);
            if (Galaxy.Rnd.Next(0, maxValue) == 1)
            {
                RandomEventPirateControlledColonyGivesShip();
                return;
            }
            double num = CalculateRelativeEmpireSize();
            if (num < 1.0)
            {
                if (Galaxy.Rnd.Next(0, 7) == 1)
                {
                    RandomEventUncoverKnownLocations();
                }
                else if (Galaxy.Rnd.Next(0, 10) == 1)
                {
                    RandomEventRareResourceIntercepted();
                }
            }
        }

        private void ReviewRandomEvents()
        {
            if (Galaxy.Rnd.Next(0, 10) == 1)
            {
                RandomEventUncoverPirateAttackFunding();
                return;
            }
            if (Galaxy.Rnd.Next(0, 20) == 1)
            {
                RandomEventRestrictedZoneRevealed();
                return;
            }
            double num = (CalculateRelativeEmpireSize() + CalculateRelativeEmpireMilitaryStrength()) / 2.0;
            if (num < 1.0)
            {
                if (Galaxy.Rnd.Next(0, 10) == 1)
                {
                    RandomEventUncoverKnownLocations();
                }
                else if (Galaxy.Rnd.Next(0, 20) == 1)
                {
                    RandomEventRareResourceIntercepted();
                }
                else if (Galaxy.Rnd.Next(0, 20) == 1 && _Galaxy.GameDisasterEventsEnabled)
                {
                    EmpireEventColonyResourceAppearance();
                }
            }
        }

        private void RandomEventRestrictedZoneRevealed()
        {
        }

        private void EmpireEventPlague()
        {
            int index = Galaxy.Rnd.Next(0, Colonies.Count);
            Habitat colony = Colonies[index];
            EmpireEventPlague(colony);
        }

        public void EmpireEventPlague(Habitat colony)
        {
            if (colony == null || colony.Population == null || colony.Population.Count <= 0 || colony.HasBeenDestroyed)
            {
                return;
            }
            if (RaceEventType == RaceEventType.PredictiveHistory || (DominantRace.RaceEvents.ContainsEventType(RaceEventType.LuckyAvertColonyDisaster) && Galaxy.Rnd.Next(0, 2) == 1))
            {
                Habitat habitat = Galaxy.DetermineHabitatSystemStar(colony);
                string title = TextResolver.GetText("Avert Disaster") + "!";
                string message = string.Format(TextResolver.GetText("Avert Plague Description"), colony.Name, habitat.Name);
                SendEventMessageToEmpire(EventMessageType.RaceEvent, title, message, RaceEventType.LuckyAvertColonyDisaster, colony);
            }
            else
            {
                Plague plague = null;
                int num = 0;
                for (int i = 0; i < _Galaxy.Plagues.Count; i++)
                {
                    num += _Galaxy.Plagues[i].NaturalOccurrenceLevel;
                }
                if (num > 0)
                {
                    int num2 = Galaxy.Rnd.Next(0, num);
                    int num3 = 0;
                    for (int j = 0; j < _Galaxy.Plagues.Count; j++)
                    {
                        Plague plague2 = _Galaxy.Plagues[j];
                        if (plague2 != null)
                        {
                            int num4 = num3;
                            int num5 = num3 + plague2.NaturalOccurrenceLevel;
                            if (num2 >= num4 && num2 < num5)
                            {
                                plague = plague2;
                                break;
                            }
                            num3 += plague2.NaturalOccurrenceLevel;
                        }
                    }
                }
                if (plague != null)
                {
                    colony.PlagueId = plague.PlagueId;
                    colony.PlagueTimeRemaining = plague.Duration + (float)((Galaxy.Rnd.NextDouble() - 0.5) * ((double)plague.Duration * 0.3));
                    if (colony.Population != null)
                    {
                        for (int k = 0; k < colony.Population.Count; k++)
                        {
                            Population population = colony.Population[k];
                            if (population != null)
                            {
                                population.GrowthRate = 1f;
                            }
                        }
                    }
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(colony);
                    string description = plague.Description;
                    string title2 = TextResolver.GetText("Colony Disaster Plague") + "!";
                    string text = string.Format(TextResolver.GetText("Colony Disaster Plague Description"), plague.Name, colony.Name, habitat2.Name, description);
                    text = text + "\n\n" + TextResolver.GetText("Plague Warn Spread") + "...";
                    SendEventMessageToEmpire(EventMessageType.DisasterEvent, title2, text, DisasterEventType.Plague, colony);
                    SendNewsBroadcast(EventMessageType.DisasterEvent, colony, DisasterEventType.Plague, warStartEnd: false, wonderBegun: false);
                }
            }
            LastDisasterDate = _Galaxy.CurrentStarDate;
        }

        private void EmpireEventColonyResourceDepletion()
        {
            int index = Galaxy.Rnd.Next(0, Colonies.Count);
            Habitat habitat = Colonies[index];
            if (habitat != null && habitat.Resources != null && habitat.Resources.Count > 0 && !habitat.HasBeenDestroyed)
            {
                int num = 0;
                while (habitat.DoingTasks && num < 100)
                {
                    Thread.Sleep(1);
                    num++;
                }
                if (!habitat.DoingTasks)
                {
                    int index2 = Galaxy.Rnd.Next(0, habitat.Resources.Count);
                    Resource resource = new Resource(habitat.Resources[index2].ResourceID);
                    EmpireEventColonyResourceDepletion(habitat, resource, this, _Galaxy);
                }
            }
        }

        public static void EmpireEventColonyResourceDepletion(Habitat habitat, Resource resource, Empire empire, Galaxy galaxy)
        {
            if (habitat == null || habitat.Resources == null || habitat.Resources.Count <= 0 || habitat.HasBeenDestroyed)
            {
                return;
            }
            if (!habitat.DoingTasks)
            {
                int num = habitat.Resources.IndexOf(resource.ResourceID, 0);
                if (num >= 0)
                {
                    habitat.Resources.RemoveAt(num);
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                    string title = string.Format(TextResolver.GetText("Resource Depletion"), resource.Name) + "!";
                    string message = string.Format(TextResolver.GetText("Resource Depletion Description"), resource.Name, habitat.Name, habitat2.Name);
                    empire?.SendEventMessageToEmpire(EventMessageType.ResourceDepletion, title, message, resource, habitat);
                }
            }
            if (empire != null)
            {
                empire.LastDisasterDate = galaxy.CurrentStarDate;
            }
        }

        private void EmpireEventColonyResourceAppearance()
        {
            if (Colonies.Count <= 0)
            {
                return;
            }
            int num = Galaxy.Rnd.Next(0, Colonies.Count);
            if (num < 0 || num >= Colonies.Count)
            {
                return;
            }
            Habitat habitat = Colonies[num];
            if (habitat == null || habitat.Resources == null || habitat.Resources.Count >= 5 || habitat.HasBeenDestroyed)
            {
                return;
            }
            int num2 = 0;
            while (habitat.DoingTasks && num2 < 100)
            {
                Thread.Sleep(1);
                num2++;
            }
            if (!habitat.DoingTasks)
            {
                List<byte> list = Galaxy.ResolveValidResourcesForHabitatTypeExcludeManufactured(habitat.Type, allowSuperLuxuryResources: false);
                num2 = 0;
                int index = Galaxy.Rnd.Next(0, list.Count);
                int num3 = habitat.Resources.IndexOf(list[index], 0);
                while (num3 >= 0 && num2 < 20)
                {
                    index = Galaxy.Rnd.Next(0, list.Count);
                    num3 = habitat.Resources.IndexOf(list[index], 0);
                    num2++;
                }
                if (num3 < 0)
                {
                    Resource resource = new Resource(list[index]);
                    EmpireEventColonyResourceAppearance(habitat, resource, this);
                }
            }
        }

        public static void EmpireEventColonyResourceAppearance(Habitat habitat, Resource resource, Empire empire)
        {
            if (resource == null || habitat == null)
            {
                return;
            }
            if (habitat.Resources == null)
            {
                habitat.Resources = new HabitatResourceList();
            }
            if (habitat.Resources == null || habitat.Resources.Count >= 5 || habitat.HasBeenDestroyed)
            {
                return;
            }
            int num = 0;
            while (habitat.DoingTasks && num < 100)
            {
                Thread.Sleep(1);
                num++;
            }
            if (!habitat.DoingTasks)
            {
                int num2 = habitat.Resources.IndexOf(resource.ResourceID, 0);
                if (num2 < 0)
                {
                    habitat.Resources.Add(new HabitatResource(resource.ResourceID, Galaxy.Rnd.Next(300, 700)));
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                    string title = string.Format(TextResolver.GetText("Resource Appearance"), resource.Name) + "!";
                    string message = string.Format(TextResolver.GetText("Resource Appearance Description"), resource.Name, habitat.Name, habitat2.Name);
                    empire?.SendEventMessageToEmpire(EventMessageType.ResourceAppearance, title, message, resource, habitat);
                }
            }
        }

        private void EmpireEventEconomicCrisis()
        {
            double num = StateMoney * (0.4 + Galaxy.Rnd.NextDouble() * 0.2);
            StateMoney -= num;
            string title = TextResolver.GetText("Empire Disaster Economic Crisis") + "!";
            string message = string.Format(TextResolver.GetText("Empire Disaster Economic Crisis Description"), num.ToString("###,###,###,##0"));
            SendEventMessageToEmpire(EventMessageType.DisasterEvent, title, message, DisasterEventType.EconomicCrisis, null);
            SendNewsBroadcast(EventMessageType.DisasterEvent, null, DisasterEventType.EconomicCrisis, warStartEnd: false, wonderBegun: false);
            LastDisasterDate = _Galaxy.CurrentStarDate;
        }

        private void EmpireEventColonyNaturalDisaster()
        {
            int index = Galaxy.Rnd.Next(0, Colonies.Count);
            Habitat habitat = Colonies[index];
            if (habitat != null && !habitat.HasBeenDestroyed)
            {
                if (RaceEventType == RaceEventType.PredictiveHistory || (DominantRace.RaceEvents.ContainsEventType(RaceEventType.LuckyAvertColonyDisaster) && Galaxy.Rnd.Next(0, 2) == 1))
                {
                    //DisasterEventType disasterEventType = DisasterEventType.Undefined;
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                    string arg = Galaxy.ResolveDescription(habitat.Type switch
                    {
                        HabitatType.Continental => DisasterEventType.Earthquake,
                        HabitatType.MarshySwamp => DisasterEventType.Sinkhole,
                        HabitatType.Ocean => DisasterEventType.Tsunami,
                        HabitatType.Desert => DisasterEventType.Sandstorm,
                        HabitatType.Ice => DisasterEventType.Blizzard,
                        HabitatType.Volcanic => DisasterEventType.Eruption,
                        _ => DisasterEventType.Earthquake,
                    });
                    string title = TextResolver.GetText("Avert Disaster") + "!";
                    string message = string.Format(TextResolver.GetText("Avert Disaster Description"), arg, habitat.Name, habitat2.Name);
                    SendEventMessageToEmpire(EventMessageType.RaceEvent, title, message, RaceEventType.LuckyAvertColonyDisaster, habitat);
                }
                else
                {
                    EmpireEventColonyNaturalDisaster(habitat);
                }
                LastDisasterDate = _Galaxy.CurrentStarDate;
            }
        }

        public void EmpireEventColonyNaturalDisaster(Habitat colony)
        {
            float num = (float)(0.2 + Galaxy.Rnd.NextDouble() * 0.1);
            colony.Damage += num;
            colony.Damage = Math.Min(1f, colony.Damage);
            colony.RecalculateQuality();
            int num2 = Galaxy.Rnd.Next(12, 21);
            int developmentLevel = Math.Max(0, colony.GetDevelopmentLevel() - num2);
            colony.SetDevelopmentLevel(developmentLevel);
            _Galaxy.DoCharacterEvent(CharacterEventType.ColonyDevelopmentDecrease, colony, colony.Characters, includeLeader: true, colony.Empire);
            if (colony.Population != null && colony.Population.Count > 0 && colony.Population.TotalAmount > 0)
            {
                long num3 = (long)((double)colony.Population[0].Amount * (0.15 + Galaxy.Rnd.NextDouble() * 0.08));
                colony.Population[0].Amount -= num3;
                colony.Population.RecalculateTotalAmount();
            }
            string empty = string.Empty;
            string empty2 = string.Empty;
            DisasterEventType disasterEventType = DisasterEventType.Undefined;
            Habitat habitat = Galaxy.DetermineHabitatSystemStar(colony);
            switch (colony.Type)
            {
                case HabitatType.Continental:
                    disasterEventType = DisasterEventType.Earthquake;
                    empty = TextResolver.GetText("Colony Disaster Earthquake") + "!";
                    empty2 = string.Format(TextResolver.GetText("Colony Disaster Earthquake Description"), colony.Name, habitat.Name);
                    break;
                case HabitatType.MarshySwamp:
                    disasterEventType = DisasterEventType.Sinkhole;
                    empty = TextResolver.GetText("Colony Disaster Sinkhole") + "!";
                    empty2 = string.Format(TextResolver.GetText("Colony Disaster Sinkhole Description"), colony.Name, habitat.Name);
                    break;
                case HabitatType.Ocean:
                    disasterEventType = DisasterEventType.Tsunami;
                    empty = TextResolver.GetText("Colony Disaster Tsunami") + "!";
                    empty2 = string.Format(TextResolver.GetText("Colony Disaster Tsunami Description"), colony.Name, habitat.Name);
                    break;
                case HabitatType.Desert:
                    disasterEventType = DisasterEventType.Sandstorm;
                    empty = TextResolver.GetText("Colony Disaster Sandstorm") + "!";
                    empty2 = string.Format(TextResolver.GetText("Colony Disaster Sandstorm Description"), colony.Name, habitat.Name);
                    break;
                case HabitatType.Ice:
                    disasterEventType = DisasterEventType.Blizzard;
                    empty = TextResolver.GetText("Colony Disaster Blizzard") + "!";
                    empty2 = string.Format(TextResolver.GetText("Colony Disaster Blizzard Description"), colony.Name, habitat.Name);
                    break;
                case HabitatType.Volcanic:
                    disasterEventType = DisasterEventType.Eruption;
                    empty = TextResolver.GetText("Colony Disaster Eruption") + "!";
                    empty2 = string.Format(TextResolver.GetText("Colony Disaster Eruption Description"), colony.Name, habitat.Name);
                    break;
                default:
                    disasterEventType = DisasterEventType.Earthquake;
                    empty = TextResolver.GetText("Colony Disaster Earthquake") + "!";
                    empty2 = string.Format(TextResolver.GetText("Colony Disaster Earthquake Description"), colony.Name, habitat.Name);
                    break;
            }
            SendEventMessageToEmpire(EventMessageType.DisasterEvent, empty, empty2, disasterEventType, colony);
            SendNewsBroadcast(EventMessageType.DisasterEvent, colony, disasterEventType, warStartEnd: false, wonderBegun: false);
            LastDisasterDate = _Galaxy.CurrentStarDate;
        }

        private void ResetRaceEvents()
        {
            if (RaceEventEndDate <= 0 || _Galaxy.CurrentStarDate <= RaceEventEndDate)
            {
                return;
            }
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat == null || habitat.HasBeenDestroyed)
                {
                    continue;
                }
                if (habitat.RaceEventType != 0)
                {
                    switch (habitat.RaceEventType)
                    {
                        case RaceEventType.AntiXenoRiotsExterminate:
                            habitat.ColonyPopulationPolicy = Policy.NewColonyPopulationPolicyAllRaces;
                            habitat.ColonyPopulationPolicyRaceFamily = Policy.NewColonyPopulationPolicyYourRaceFamily;
                            break;
                        case RaceEventType.DeathCultExterminate:
                            habitat.ColonyPopulationPolicy = Policy.NewColonyPopulationPolicyAllRaces;
                            habitat.ColonyPopulationPolicyRaceFamily = Policy.NewColonyPopulationPolicyYourRaceFamily;
                            break;
                        case RaceEventType.XenophobiaNoAssimilate:
                            habitat.ColonyPopulationPolicy = Policy.NewColonyPopulationPolicyAllRaces;
                            habitat.ColonyPopulationPolicyRaceFamily = Policy.NewColonyPopulationPolicyYourRaceFamily;
                            break;
                    }
                }
                habitat.RaceEventType = RaceEventType.Undefined;
            }
            RaceEventType = RaceEventType.Undefined;
            RaceEventEndDate = 0L;
        }

        private void DoRaceEvent(Race race)
        {
            if (race == null || race.RaceEvents == null || race.RaceEvents.Count <= 0)
            {
                return;
            }
            int index = Galaxy.Rnd.Next(0, race.RaceEvents.Count);
            RaceEvent raceEvent = race.RaceEvents[index];
            if (raceEvent != null)
            {
                double num = Galaxy.Rnd.NextDouble();
                num *= 20.0;
                if (num < raceEvent.Frequency)
                {
                    InitiateRaceEvent(race, raceEvent);
                }
            }
        }

        private void InitiateRaceEvent(Race race, RaceEvent raceEvent)
        {
            if (race == null || raceEvent == null)
            {
                return;
            }
            string title = string.Empty;
            string text = string.Empty;
            StellarObject stellarObject = null;
            HabitatList habitatList = null;
            Habitat habitat = null;
            int num = 0;
            ResearchNode researchNode = null;
            long currentStarDate = _Galaxy.CurrentStarDate;
            long raceEventEndDate = currentStarDate + Galaxy.RealSecondsInGalacticYear * 1000;
            long raceEventEndDate2 = currentStarDate + Galaxy.RealSecondsInGalacticYear * 1000 / 12;
            switch (raceEvent.Type)
            {
                case RaceEventType.AntiXenoRiotsExterminate:
                    if (Colonies != null)
                    {
                        habitat = Colonies[Galaxy.Rnd.Next(0, Colonies.Count)];
                        if (habitat != null)
                        {
                            Habitat habitat4 = Galaxy.DetermineHabitatSystemStar(habitat);
                            habitat.ColonyPopulationPolicy = ColonyPopulationPolicy.Exterminate;
                            habitat.ColonyPopulationPolicyRaceFamily = ColonyPopulationPolicy.Enslave;
                            habitat.RaceEventType = RaceEventType.AntiXenoRiotsExterminate;
                            RaceEventEndDate = raceEventEndDate2;
                            stellarObject = habitat;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description AntiXenoRiotsExterminate"), habitat.Name, habitat4.Name);
                        }
                    }
                    break;
                case RaceEventType.CannibalismPopulationShrinks:
                    if (race.ChangePeriodActive && Colonies != null)
                    {
                        Habitat habitat2 = Colonies[Galaxy.Rnd.Next(0, Colonies.Count)];
                        if (habitat2 != null && habitat2.Population != null && habitat2.Population.Count > 0)
                        {
                            long amount = habitat2.Population[0].Amount;
                            int maxValue = (int)Math.Min(20000000L, habitat2.Population[0].Amount / 50);
                            amount = amount / 50 + Galaxy.Rnd.Next(0, maxValue);
                            habitat2.Population[0].Amount -= amount;
                            habitat2.Population.RecalculateTotalAmount();
                            stellarObject = habitat2;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description CannibalismPopulationShrinks"), habitat2.Name);
                        }
                    }
                    break;
                case RaceEventType.CreativeReengineeringFreeCrashResearch:
                    if (Research != null && Research.ResearchQueueHighTech != null && Research.ResearchQueueHighTech.Count > 0)
                    {
                        researchNode = Research.ResearchQueueHighTech[0];
                        if (researchNode != null && !researchNode.IsRushing && researchNode.Progress < researchNode.Cost * 0.6f)
                        {
                            researchNode.IsRushing = true;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description CreativeReengineeringFreeCrashResearch"), researchNode.Name);
                        }
                    }
                    break;
                case RaceEventType.DeathCultExterminate:
                    if (Colonies != null)
                    {
                        habitat = Colonies.GetRandomHabitatPopulationAnotherRace(_Galaxy, DominantRace);
                        if (habitat != null && habitat.ColonyPopulationPolicy != ColonyPopulationPolicy.Exterminate && habitat.ColonyPopulationPolicyRaceFamily != ColonyPopulationPolicy.Exterminate)
                        {
                            habitat.ColonyPopulationPolicyRaceFamily = ColonyPopulationPolicy.Exterminate;
                            habitat.ColonyPopulationPolicy = ColonyPopulationPolicy.Exterminate;
                            habitat.RaceEventType = RaceEventType.DeathCultExterminate;
                            RaceEventType = RaceEventType.DeathCultExterminate;
                            RaceEventEndDate = raceEventEndDate;
                            stellarObject = habitat;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description DeathCultExterminate"), habitat.Name, DominantRace.Name);
                        }
                    }
                    break;
                case RaceEventType.DestinyCharacterTraits:
                    {
                        if (Characters == null || Characters.Count <= 0)
                        {
                            break;
                        }
                        Character character5 = Characters[Galaxy.Rnd.Next(0, Characters.Count)];
                        if (character5 == null || !character5.Active || !character5.BonusesKnown)
                        {
                            break;
                        }
                        CharacterTraitType characterTraitType3 = CharacterTraitType.Undefined;
                        List<CharacterTraitType> list5 = Character.DetermineValidTraitsForRole(character5.Role, includeStartingTraits: false, includeHighlyNegativeTraits: false);
                        if (list5.Count > 0)
                        {
                            int num6 = 0;
                            while (characterTraitType3 == CharacterTraitType.Undefined && num6 < 20)
                            {
                                characterTraitType3 = list5[Galaxy.Rnd.Next(0, list5.Count)];
                                if (!character5.CheckNewTraitValid(characterTraitType3))
                                {
                                    characterTraitType3 = CharacterTraitType.Undefined;
                                }
                                num6++;
                            }
                        }
                        if (characterTraitType3 != 0 && character5.AddTrait(characterTraitType3, starting: false, _Galaxy))
                        {
                            stellarObject = character5.Location;
                            RaceEventData = character5;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description DestinyCharacterTraits"), Galaxy.ResolveDescription(character5.Role).ToLower(CultureInfo.InvariantCulture), character5.Name, Galaxy.ResolveDescription(characterTraitType3));
                        }
                        break;
                    }
                case RaceEventType.ForcedRetirementLeaderReplaced:
                    {
                        if (Characters == null)
                        {
                            break;
                        }
                        CharacterList charactersByRole2 = Characters.GetCharactersByRole(CharacterRole.Leader);
                        if (charactersByRole2.Count > 0 && _Galaxy.CurrentStarDate > NextAllowableLeaderChangeDate)
                        {
                            Character character6 = GenerateNewCharacter(CharacterRole.Leader, Capital);
                            string text3 = string.Empty;
                            if (charactersByRole2[0].Location != null)
                            {
                                text3 = charactersByRole2[0].Location.Name;
                            }
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            RaceEventData = charactersByRole2[0];
                            text = string.Format(TextResolver.GetText("Race Event Description ForcedRetirementLeaderReplaced"), Galaxy.ResolveDescription(charactersByRole2[0].Role).ToLower(CultureInfo.InvariantCulture), charactersByRole2[0].Name, text3, character6.Name);
                            charactersByRole2[0].Kill(_Galaxy);
                            stellarObject = Capital;
                            Leader = character6;
                            LastLeaderChangeDate = _Galaxy.CurrentStarDate;
                            break;
                        }
                        CharacterList charactersByRole3 = Characters.GetCharactersByRole(CharacterRole.ColonyGovernor);
                        if (charactersByRole3.Count > 0)
                        {
                            stellarObject = charactersByRole3[0].Location;
                            string text4 = string.Empty;
                            if (stellarObject != null)
                            {
                                text4 = stellarObject.Name;
                            }
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            Character character7 = GenerateNewCharacter(CharacterRole.ColonyGovernor, stellarObject);
                            text = string.Format(TextResolver.GetText("Race Event Description ForcedRetirementLeaderReplaced"), Galaxy.ResolveDescription(charactersByRole3[0].Role).ToLower(CultureInfo.InvariantCulture), charactersByRole3[0].Name, text4, character7.Name);
                            charactersByRole3[0].Kill(_Galaxy);
                        }
                        break;
                    }
                case RaceEventType.FriendsInManyPlacesRevealTerritory:
                    {
                        if (ResortBases == null || ResortBases.Count <= 0)
                        {
                            break;
                        }
                        bool flag = false;
                        for (int m = 0; m < ResortBases.Count; m++)
                        {
                            if (Galaxy.Rnd.Next(0, 3) == 1)
                            {
                                switch (Galaxy.Rnd.Next(0, 3))
                                {
                                    case 0:
                                    case 1:
                                        {
                                            EmpireList empireList2 = DetermineEmpiresKnown();
                                            if (empireList2.Count > 0)
                                            {
                                                num = Galaxy.Rnd.Next(0, empireList2.Count);
                                                BuiltObject builtObject3 = null;
                                                if (empireList2[num].Capital != null)
                                                {
                                                    builtObject3 = FindNearestResortBase(empireList2[num].Capital.Xpos, empireList2[num].Capital.Ypos);
                                                }
                                                _Galaxy.GiveTerritoryMap(empireList2[num], this);
                                                stellarObject = builtObject3;
                                                string arg4 = string.Empty;
                                                if (builtObject3 != null)
                                                {
                                                    arg4 = builtObject3.Name;
                                                }
                                                flag = true;
                                                title = Galaxy.ResolveDescription(raceEvent.Type);
                                                text = string.Format(TextResolver.GetText("Race Event Description FriendsInManyPlacesRevealTerritory"), arg4, empireList2[num].Name);
                                            }
                                            break;
                                        }
                                    case 2:
                                        {
                                            EmpireList empireList = DetermineEmpiresNotKnown();
                                            if (empireList.Count <= 0)
                                            {
                                                break;
                                            }
                                            num = Galaxy.Rnd.Next(0, empireList.Count);
                                            Empire empire = empireList[num];
                                            if (empire != null && empire.Active)
                                            {
                                                BuiltObject builtObject2 = null;
                                                if (empire.Capital != null)
                                                {
                                                    builtObject2 = FindNearestResortBase(empire.Capital.Xpos, empire.Capital.Ypos);
                                                }
                                                _Galaxy.DoEmpireEncounter(this, empire, builtObject2);
                                                stellarObject = builtObject2;
                                                string arg3 = string.Empty;
                                                if (builtObject2 != null)
                                                {
                                                    arg3 = builtObject2.Name;
                                                }
                                                flag = true;
                                                title = Galaxy.ResolveDescription(raceEvent.Type);
                                                text = string.Format(TextResolver.GetText("Race Event Description FriendsInManyPlacesNewEmpire"), arg3, empire.Name);
                                            }
                                            break;
                                        }
                                }
                            }
                            if (flag)
                            {
                                break;
                            }
                        }
                        break;
                    }
                case RaceEventType.GrandPerformanceDiplomacyBonus:
                    {
                        EmpireList empireList3 = DetermineEmpiresNotAtWarWithNoAmbassador();
                        if (empireList3 == null || empireList3.Count <= 0)
                        {
                            break;
                        }
                        num = Galaxy.Rnd.Next(0, empireList3.Count);
                        Empire empire2 = empireList3[num];
                        if (empire2 != null)
                        {
                            EmpireEvaluation empireEvaluation2 = ObtainEmpireEvaluation(empire2);
                            if (empireEvaluation2 != null)
                            {
                                empireEvaluation2.DiplomacyFactor *= 1.1;
                                RaceEventType = RaceEventType.GrandPerformanceDiplomacyBonus;
                                RaceEventEndDate = raceEventEndDate;
                                title = Galaxy.ResolveDescription(raceEvent.Type);
                                text = string.Format(TextResolver.GetText("Race Event Description GrandPerformanceDiplomacyBonus"), race.Name, empire2.Name);
                            }
                        }
                        break;
                    }
                case RaceEventType.GreatHuntStrongTroops:
                    if (Capital != null)
                    {
                        Capital.RaceEventType = RaceEventType.GreatHuntStrongTroops;
                        RaceEventEndDate = raceEventEndDate;
                        stellarObject = Capital;
                        title = Galaxy.ResolveDescription(raceEvent.Type);
                        text = string.Format(TextResolver.GetText("Race Event Description GreatHuntStrongTroops"), Capital.Name);
                    }
                    break;
                case RaceEventType.HistoricalKnowledgeUncoverHiddenLocation:
                    {
                        GalaxyLocationList galaxyLocationList = _Galaxy.GalaxyLocations.FindLocations(GalaxyLocationType.RestrictedArea);
                        if (galaxyLocationList == null || galaxyLocationList.Count <= 0 || KnownGalaxyLocations == null)
                        {
                            break;
                        }
                        int num3 = 0;
                        GalaxyLocation galaxyLocation = null;
                        while (galaxyLocation == null && num3 < 50)
                        {
                            num = Galaxy.Rnd.Next(0, galaxyLocationList.Count);
                            if (!KnownGalaxyLocations.Contains(galaxyLocationList[num]))
                            {
                                galaxyLocation = galaxyLocationList[num];
                            }
                            num3++;
                        }
                        if (galaxyLocation != null)
                        {
                            KnownGalaxyLocations.Add(galaxyLocation);
                            if (galaxyLocation.RelatedBuiltObject != null)
                            {
                                stellarObject = galaxyLocation.RelatedBuiltObject;
                            }
                            string arg = Galaxy.ResolveSectorDescription(galaxyLocation.Xpos, galaxyLocation.Ypos);
                            string arg2 = galaxyLocation.Xpos.ToString("0,K") + ", " + galaxyLocation.Ypos.ToString("0,K");
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description HistoricalKnowledgeUncoverHiddenLocation"), galaxyLocation.Name, arg, arg2);
                        }
                        break;
                    }
                case RaceEventType.IsolationistsResetFirstContactPenalty:
                    if (EmpireEvaluations != null)
                    {
                        for (int j = 0; j < EmpireEvaluations.Count; j++)
                        {
                            EmpireEvaluation empireEvaluation = EmpireEvaluations[j];
                            if (empireEvaluation != null)
                            {
                                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empireEvaluation.Empire);
                                if (diplomaticRelation != null && diplomaticRelation.Type != 0)
                                {
                                    empireEvaluation.FirstContactPenalty = EmpireEvaluation.FirstContactPenaltyStartAmount * _Galaxy.AggressionLevel;
                                }
                            }
                        }
                    }
                    title = Galaxy.ResolveDescription(raceEvent.Type);
                    text = TextResolver.GetText("Race Event Description IsolationistsResetFirstContactPenalty");
                    break;
                case RaceEventType.MetamorphosisCharacterChange:
                    {
                        if (!race.ChangePeriodActive || Characters == null || Characters.Count <= 0)
                        {
                            break;
                        }
                        Character character3 = Characters[Galaxy.Rnd.Next(0, Characters.Count)];
                        if (character3 == null || !character3.Active)
                        {
                            break;
                        }
                        stellarObject = character3.Location;
                        string text2 = string.Empty;
                        if (character3.Location != null)
                        {
                            text2 = character3.Location.Name;
                        }
                        title = Galaxy.ResolveDescription(raceEvent.Type);
                        if (character3.Traits != null && character3.Traits.Count > 0 && Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            CharacterTraitType characterTraitType = character3.Traits[Galaxy.Rnd.Next(0, character3.Traits.Count)];
                            if (character3.RemoveTrait(characterTraitType))
                            {
                                text = string.Format(TextResolver.GetText("Race Event Description MetamorphosisCharacterChange LoseTrait"), character3.Name, Galaxy.ResolveDescription(character3.Role), text2, Galaxy.ResolveDescription(characterTraitType));
                            }
                            break;
                        }
                        CharacterTraitType characterTraitType2 = CharacterTraitType.Undefined;
                        List<CharacterTraitType> list2 = Character.DetermineValidTraitsForRole(character3.Role, includeStartingTraits: false, includeHighlyNegativeTraits: false);
                        if (list2.Count > 0)
                        {
                            int num4 = 0;
                            while (characterTraitType2 == CharacterTraitType.Undefined && num4 < 20)
                            {
                                characterTraitType2 = list2[Galaxy.Rnd.Next(0, list2.Count)];
                                if (!character3.CheckNewTraitValid(characterTraitType2))
                                {
                                    characterTraitType2 = CharacterTraitType.Undefined;
                                }
                                num4++;
                            }
                        }
                        if (characterTraitType2 != 0 && character3.AddTrait(characterTraitType2, starting: false, _Galaxy))
                        {
                            text = string.Format(TextResolver.GetText("Race Event Description MetamorphosisCharacterChange NewTrait"), character3.Name, Galaxy.ResolveDescription(character3.Role), text2, Galaxy.ResolveDescription(characterTraitType2));
                        }
                        break;
                    }
                case RaceEventType.NaturalHarmonyColonyQualityIncreased:
                    if (Colonies != null)
                    {
                        habitat = Colonies.GetRandomHabitatPopulationBelowThreshold(_Galaxy, long.MaxValue, HabitatType.Continental);
                        if (habitat != null && habitat.BaseQuality < 1f)
                        {
                            Habitat habitat3 = Galaxy.DetermineHabitatSystemStar(habitat);
                            habitat.BaseQuality += 0.01f;
                            stellarObject = habitat;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description NaturalHarmonyColonyQualityIncreased"), Galaxy.ResolveDescription(habitat.Type).ToLower(CultureInfo.InvariantCulture), habitat.Name, habitat3.Name);
                        }
                    }
                    break;
                case RaceEventType.NepthysWineVintage:
                    {
                        Resource resource = new Resource(_Galaxy.ResourceSystem.Resources.GetByName("Nepthys Wine").ResourceID);
                        if (resource != null && Colonies != null)
                        {
                            habitatList = Colonies.GetHabitatsWithResource(resource.ResourceID);
                            for (int n = 0; n < habitatList.Count; n++)
                            {
                                habitatList[n].RaceEventType = RaceEventType.NepthysWineVintage;
                            }
                            RaceEventEndDate = raceEventEndDate;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = TextResolver.GetText("Race Event Description NepthysWineVintage");
                        }
                        break;
                    }
                case RaceEventType.PredictiveHistory:
                    RaceEventType = RaceEventType.PredictiveHistory;
                    RaceEventEndDate = raceEventEndDate;
                    title = Galaxy.ResolveDescription(raceEvent.Type);
                    text = TextResolver.GetText("Race Event Description PredictiveHistory");
                    break;
                case RaceEventType.ScientificBreakthroughResearchProgress:
                    if (Research == null || Research.ResearchQueueEnergy == null || Research.ResearchQueueHighTech == null || Research.ResearchQueueWeapons == null)
                    {
                        break;
                    }
                    switch (Galaxy.Rnd.Next(0, 3))
                    {
                        case 0:
                            if (Research.ResearchQueueWeapons.Count > 0)
                            {
                                researchNode = Research.ResearchQueueWeapons[0];
                            }
                            break;
                        case 1:
                            if (Research.ResearchQueueEnergy.Count > 0)
                            {
                                researchNode = Research.ResearchQueueEnergy[0];
                            }
                            break;
                        case 2:
                            if (Research.ResearchQueueHighTech.Count > 0)
                            {
                                researchNode = Research.ResearchQueueHighTech[0];
                            }
                            break;
                    }
                    if (researchNode != null)
                    {
                        researchNode.Progress += researchNode.Cost * 0.1f;
                        if (researchNode.Progress >= researchNode.Cost)
                        {
                            researchNode.Progress = researchNode.Cost - 1f;
                        }
                        title = Galaxy.ResolveDescription(raceEvent.Type);
                        text = string.Format(TextResolver.GetText("Race Event Description ScientificBreakthroughResearchProgress"), researchNode.Name);
                    }
                    break;
                case RaceEventType.SecurityConcernsCharacterReplaced:
                    {
                        if (Characters == null || Characters.Count <= 0)
                        {
                            break;
                        }
                        CharacterList characterList = new CharacterList();
                        characterList.AddRange(Characters);
                        if (characterList.Count <= 0)
                        {
                            break;
                        }
                        List<CharacterTraitType> list = new List<CharacterTraitType>();
                        list.Add(CharacterTraitType.Drunk);
                        list.Add(CharacterTraitType.Addict);
                        list.Add(CharacterTraitType.Corrupt);
                        list.Add(CharacterTraitType.ForeignSpy);
                        list.Add(CharacterTraitType.DoubleAgent);
                        list.Add(CharacterTraitType.IntelligenceAddict);
                        list.Add(CharacterTraitType.IntelligenceCorrupt);
                        list.Add(CharacterTraitType.Lazy);
                        List<CharacterTraitType> traits = list;
                        CharacterList charactersWithTraits = characterList.GetCharactersWithTraits(traits);
                        Character character = null;
                        character = ((charactersWithTraits.Count <= 0) ? characterList[Galaxy.Rnd.Next(0, characterList.Count)] : charactersWithTraits[Galaxy.Rnd.Next(0, charactersWithTraits.Count)]);
                        if (character != null && character.Active && (character.Role != CharacterRole.Leader || _Galaxy.CurrentStarDate > NextAllowableLeaderChangeDate))
                        {
                            Character character2 = GenerateNewCharacter(CharacterRole.IntelligenceAgent, Capital);
                            stellarObject = Capital;
                            RaceEventData = character;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description SecurityConcernsCharacterReplaced"), Galaxy.ResolveDescription(character.Role).ToLower(CultureInfo.InvariantCulture), character.Name, character2.Name);
                            if (character.Role == CharacterRole.Leader)
                            {
                                LastLeaderChangeDate = _Galaxy.CurrentStarDate;
                            }
                            character.Kill(_Galaxy);
                        }
                        break;
                    }
                case RaceEventType.ShakturiArtifactWeaponResearch:
                    if (Research != null)
                    {
                        ResearchNodeList researchNodeList = Research.ResolveNextProjects(_Galaxy, DominantRace, IndustryType.Weapon);
                        if (researchNodeList != null && researchNodeList.Count > 0)
                        {
                            num = Galaxy.Rnd.Next(0, researchNodeList.Count);
                            researchNodeList[num].Progress += (researchNodeList[num].Cost - researchNodeList[num].Progress) / 2f;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description ShakturiArtifactWeaponResearch"), researchNodeList[num].Name);
                        }
                    }
                    break;
                case RaceEventType.SuppressedKnowledgeLoseResearch:
                    if (Research == null || Research.ResearchQueueEnergy == null || Research.ResearchQueueHighTech == null || Research.ResearchQueueWeapons == null)
                    {
                        break;
                    }
                    switch (Galaxy.Rnd.Next(0, 3))
                    {
                        case 0:
                            if (Research.ResearchQueueWeapons.Count > 0)
                            {
                                researchNode = Research.ResearchQueueWeapons[0];
                            }
                            break;
                        case 1:
                            if (Research.ResearchQueueEnergy.Count > 0)
                            {
                                researchNode = Research.ResearchQueueEnergy[0];
                            }
                            break;
                        case 2:
                            if (Research.ResearchQueueHighTech.Count > 0)
                            {
                                researchNode = Research.ResearchQueueHighTech[0];
                            }
                            break;
                    }
                    if (researchNode != null)
                    {
                        researchNode.Progress /= 2f;
                        title = Galaxy.ResolveDescription(raceEvent.Type);
                        text = string.Format(TextResolver.GetText("Race Event Description SuppressedKnowledgeLoseResearch"), researchNode.Name);
                    }
                    break;
                case RaceEventType.SupremeWarriorNewGeneral:
                    {
                        if (Characters == null || Capital == null || Colonies == null)
                        {
                            break;
                        }
                        CharacterList charactersByRole = Characters.GetCharactersByRole(CharacterRole.TroopGeneral);
                        if (charactersByRole.Count < Colonies.Count / 3)
                        {
                            Character character4 = GenerateNewCharacter(CharacterRole.TroopGeneral, Capital);
                            List<CharacterTraitType> list3 = new List<CharacterTraitType>();
                            list3.Add(CharacterTraitType.InspiringPresence);
                            list3.Add(CharacterTraitType.GoodTactician);
                            list3.Add(CharacterTraitType.Energetic);
                            list3.Add(CharacterTraitType.StrongGroundAttacker);
                            list3.Add(CharacterTraitType.StrongGroundDefender);
                            list3.Add(CharacterTraitType.ToughDiscipline);
                            list3.Add(CharacterTraitType.GoodGroundLogistician);
                            list3.Add(CharacterTraitType.NaturalGroundLeader);
                            list3.Add(CharacterTraitType.GoodRecruiter);
                            List<CharacterTraitType> list4 = list3;
                            int num5 = Math.Min(3, list4.Count);
                            for (int l = 0; l < num5; l++)
                            {
                                CharacterTraitType trait = list4[Galaxy.Rnd.Next(0, list4.Count)];
                                character4.AddTrait(trait, starting: true, null);
                            }
                            stellarObject = character4.Location;
                            RaceEventData = character4;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description SupremeWarriorNewGeneral"), character4.Name);
                        }
                        break;
                    }
                case RaceEventType.SwarmsFullTroopTransport:
                    {
                        if (!race.ChangePeriodActive || Capital == null)
                        {
                            break;
                        }
                        BuiltObject builtObject = GenerateNewShip(BuiltObjectSubRole.TroopTransport, Capital);
                        if (builtObject == null)
                        {
                            break;
                        }
                        int num2 = builtObject.TroopCapacity / 100;
                        for (int k = 0; k < num2; k++)
                        {
                            Troop troop = Capital.GenerateNewTroop();
                            if (troop != null)
                            {
                                troop.Colony.Troops.Remove(troop);
                                troop.Readiness = 100f;
                                troop.BuiltObject = builtObject;
                                troop.BuiltObject.Troops.Add(troop);
                                if (!Troops.Contains(troop))
                                {
                                    Troops.Add(troop);
                                }
                            }
                        }
                        stellarObject = builtObject;
                        title = Galaxy.ResolveDescription(raceEvent.Type);
                        text = string.Format(TextResolver.GetText("Race Event Description SwarmsFullTroopTransport"), Capital.Name);
                        break;
                    }
                case RaceEventType.TodashGalacticChampionships:
                    RaceEventType = RaceEventType.TodashGalacticChampionships;
                    RaceEventEndDate = raceEventEndDate;
                    SetRaceEventForAllColonies(RaceEventType.TodashGalacticChampionships);
                    title = Galaxy.ResolveDescription(raceEvent.Type);
                    text = string.Format(TextResolver.GetText("Race Event Description TodashGalacticChampionships"), Capital.Name);
                    break;
                case RaceEventType.UnderwaterLeviathan:
                    if (Colonies != null)
                    {
                        habitat = Colonies.GetRandomHabitatPopulationBelowThreshold(_Galaxy, 100000000L, HabitatType.Ocean);
                        if (habitat != null && habitat.Population != null && habitat.Population.Count > 0)
                        {
                            long amount2 = habitat.Population[0].Amount;
                            amount2 = amount2 / 6 + Galaxy.Rnd.Next(0, (int)(amount2 / 6));
                            habitat.Population[0].Amount -= amount2;
                            habitat.Population.RecalculateTotalAmount();
                            habitat.Damage += 0.05f + (float)(Galaxy.Rnd.NextDouble() * 0.05);
                            stellarObject = habitat;
                            title = Galaxy.ResolveDescription(raceEvent.Type);
                            text = string.Format(TextResolver.GetText("Race Event Description UnderwaterLeviathan"), habitat.Name);
                        }
                    }
                    break;
                case RaceEventType.WarriorWaveTroopRecruitment:
                    SetRaceEventForAllColonies(RaceEventType.WarriorWaveTroopRecruitment);
                    RaceEventEndDate = raceEventEndDate;
                    title = Galaxy.ResolveDescription(raceEvent.Type);
                    text = TextResolver.GetText("Race Event Description WarriorWaveTroopRecruitment");
                    break;
                case RaceEventType.XenophobiaNoAssimilate:
                    {
                        if (Colonies == null)
                        {
                            break;
                        }
                        RaceEventType = RaceEventType.XenophobiaNoAssimilate;
                        RaceEventEndDate = raceEventEndDate;
                        for (int i = 0; i < Colonies.Count; i++)
                        {
                            Colonies[i].RaceEventType = RaceEventType.XenophobiaNoAssimilate;
                            if (Colonies[i].ColonyPopulationPolicy == ColonyPopulationPolicy.Assimilate)
                            {
                                Colonies[i].ColonyPopulationPolicy = ColonyPopulationPolicy.DoNotAccept;
                            }
                            if (Colonies[i].ColonyPopulationPolicyRaceFamily == ColonyPopulationPolicy.Assimilate)
                            {
                                Colonies[i].ColonyPopulationPolicyRaceFamily = ColonyPopulationPolicy.DoNotAccept;
                            }
                        }
                        title = Galaxy.ResolveDescription(raceEvent.Type);
                        text = TextResolver.GetText("Race Event Description XenophobiaNoAssimilate");
                        break;
                    }
            }
            if (!string.IsNullOrEmpty(text))
            {
                SendEventMessageToEmpire(EventMessageType.RaceEvent, title, text, raceEvent.Type, stellarObject);
            }
        }

        private void SetRaceEventForAllColonies(RaceEventType raceEventType)
        {
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Colonies[i].RaceEventType = raceEventType;
                }
            }
        }

        private void ReviewEmpireEvents()
        {
            if (DominantRace == _Galaxy.ShakturiActualRace)
            {
                return;
            }
            if (_Galaxy.GameRaceSpecificEventsEnabled && RaceEventEndDate < _Galaxy.CurrentStarDate)
            {
                DoRaceEvent(DominantRace);
            }
            double num = (CalculateRelativeEmpireSize() + CalculateRelativeEmpireMilitaryStrength()) / 2.0;
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num2 = LastDisasterDate + Galaxy.RealSecondsInGalacticYear * 1000 * 4;
            if (num > 2.5 && Colonies.Count > 5 && currentStarDate > num2)
            {
                double colonyApprovalAverage = ColonyApprovalAverage;
                double num3 = 1.0;
                if (DominantRace != null)
                {
                    num3 = CalculateRacialReputationConcern(DominantRace);
                }
                double num4 = CivilityRating / 2.0 / num3;
                double num5 = num4 + colonyApprovalAverage;
                if (GovernmentAttributes != null)
                {
                    num5 += 5.0 * (GovernmentAttributes.Stability - 1.0);
                }
                if (num5 < -3.0 && Galaxy.Rnd.Next(0, 5) == 1)
                {
                    double splinterPortion = 0.2 + Galaxy.Rnd.NextDouble() * 0.25;
                    InitiateEmpireSplit(splinterPortion);
                    return;
                }
                if (num5 < 0.0 && Galaxy.Rnd.Next(0, 5) == 1)
                {
                    EmpireEventRogueFleetDefects();
                    return;
                }
            }
            if (num > 1.0 && Colonies.Count > 5 && _Galaxy.GameDisasterEventsEnabled && currentStarDate > num2)
            {
                if (Galaxy.Rnd.Next(0, 20) == 1)
                {
                    EmpireEventPlague();
                    return;
                }
                if (Galaxy.Rnd.Next(0, 15) == 1)
                {
                    EmpireEventColonyNaturalDisaster();
                    return;
                }
                if (Galaxy.Rnd.Next(0, 15) == 1)
                {
                    EmpireEventColonyResourceDepletion();
                    return;
                }
                if (StateMoney > 0.0)
                {
                    double num6 = StateMoney / _Galaxy.TotalStateMoneyInGalaxy * (double)_Galaxy.Empires.Count;
                    if (num6 > 4.0 && Galaxy.Rnd.Next(0, 15) == 1)
                    {
                        EmpireEventEconomicCrisis();
                        return;
                    }
                }
            }
            if (Galaxy.Rnd.Next(0, 20) == 1 && _Galaxy.GameDisasterEventsEnabled)
            {
                EmpireEventColonyResourceAppearance();
            }
        }

        private Empire SplinterEmpire(Empire sourceEmpire, double splinterPortion, out HabitatList coloniesLost)
        {
            Empire empire = null;
            coloniesLost = new HabitatList();
            if (_Galaxy.NextEmpireID < Galaxy.MaximumEmpireCount)
            {
                int num = Math.Max(1, (int)(splinterPortion * (double)sourceEmpire.Colonies.Count));
                double x = 0.0;
                double y = 0.0;
                double num2 = 0.0;
                int iterationCount = 0;
                while (Galaxy.ConditionCheckLimit(num2 < (double)Galaxy.SectorSize * 4.5, 50, ref iterationCount))
                {
                    _Galaxy.ObtainRandomGalaxyCoordinates(out x, out y);
                    num2 = _Galaxy.CalculateDistance(y, y, sourceEmpire.Capital.Xpos, sourceEmpire.Capital.Ypos);
                }
                Habitat habitat = _Galaxy.FastFindNearestColony((int)x, (int)y, sourceEmpire, 20000, sourceEmpire.Capital);
                if (habitat != null)
                {
                    EmpireSplitCount++;
                    Race dominantRace = sourceEmpire.DominantRace;
                    List<int> allowableGovernmentTypes = ResolveDefaultAllowableGovernmentTypes(dominantRace);
                    int governmentId = SelectSuitableGovernment(dominantRace, -1, allowableGovernmentTypes);
                    int developmentLevel = habitat.GetDevelopmentLevel();
                    EmpirePolicy policy = _Galaxy.LoadEmpirePolicy(dominantRace, isPirate: false);
                    empire = new Empire(_Galaxy, "", habitat, dominantRace, governmentId, 1.0, policy);
                    empire.TakeOwnershipOfColony(habitat, empire, destroyAllBuiltObjectsAndTroopsAtColony: false);
                    coloniesLost.Add(habitat);
                    habitat.SetDevelopmentLevel(developmentLevel);
                    if (num > 1)
                    {
                        double colonyApprovalAverage = ColonyApprovalAverage;
                        colonyApprovalAverage = ((!(colonyApprovalAverage < 0.0)) ? (colonyApprovalAverage * 2.0) : (colonyApprovalAverage / 2.0));
                        for (int i = 0; i < num - 1; i++)
                        {
                            Habitat habitat2 = _Galaxy.FastFindNearestColonyBelowApproval((int)habitat.Xpos, (int)habitat.Ypos, sourceEmpire, colonyApprovalAverage);
                            if (habitat2 != null)
                            {
                                empire.TakeOwnershipOfColony(habitat2, empire, destroyAllBuiltObjectsAndTroopsAtColony: false);
                                coloniesLost.Add(habitat2);
                            }
                        }
                    }
                    empire.RecalculateEmpirePopulation();
                    PopulationList populationList = new PopulationList();
                    for (int j = 0; j < coloniesLost.Count; j++)
                    {
                        for (int k = 0; k < coloniesLost[j].Population.Count; k++)
                        {
                            populationList.Add(coloniesLost[j].Population[k]);
                        }
                    }
                    populationList.RecalculateTotalAmount();
                    if (populationList.DominantRace != dominantRace)
                    {
                        Race dominantRace2 = populationList.DominantRace;
                        allowableGovernmentTypes = ResolveDefaultAllowableGovernmentTypes(dominantRace2);
                        int governmentId2 = SelectSuitableGovernment(dominantRace2, -1, allowableGovernmentTypes);
                        empire.DominantRace = dominantRace2;
                        empire.ChangeGovernment(governmentId2);
                        empire.Name = GenerateEmpireName(governmentId2);
                    }
                    empire.GenerateDesignSpecifications(_Galaxy, empire.DominantRace, isPirate: false, empire.DominantRace.Name);
                    empire.Research = sourceEmpire.Research.Clone(sourceEmpire.DominantRace);
                    _Galaxy.MergeGalaxyMap(sourceEmpire, empire);
                    DiplomaticRelation diplomaticRelation = sourceEmpire.ObtainDiplomaticRelation(empire);
                    diplomaticRelation.Type = DiplomaticRelationType.None;
                    diplomaticRelation = empire.ObtainDiplomaticRelation(sourceEmpire);
                    diplomaticRelation.Type = DiplomaticRelationType.None;
                    foreach (DiplomaticRelation diplomaticRelation4 in sourceEmpire.DiplomaticRelations)
                    {
                        if (diplomaticRelation4.Type != 0)
                        {
                            DiplomaticRelation diplomaticRelation2 = empire.ObtainDiplomaticRelation(diplomaticRelation4.OtherEmpire);
                            diplomaticRelation2.Type = DiplomaticRelationType.None;
                            DiplomaticRelation diplomaticRelation3 = diplomaticRelation4.OtherEmpire.ObtainDiplomaticRelation(empire);
                            diplomaticRelation3.Type = DiplomaticRelationType.None;
                        }
                    }
                    double num3 = splinterPortion * 0.7;
                    BuiltObjectList builtObjectList = new BuiltObjectList();
                    builtObjectList.AddRange(sourceEmpire.PrivateBuiltObjects);
                    foreach (BuiltObject item in builtObjectList)
                    {
                        if (ConsiderTakeoverOfBuiltObject(item, sourceEmpire, empire, num3))
                        {
                            empire.TakeOwnershipOfBuiltObject(item, empire, setDesignAsObsolete: true);
                        }
                    }
                    BuiltObjectList builtObjectList2 = new BuiltObjectList();
                    builtObjectList2.AddRange(sourceEmpire.BuiltObjects);
                    foreach (BuiltObject item2 in builtObjectList2)
                    {
                        if (ConsiderTakeoverOfBuiltObject(item2, sourceEmpire, empire, num3))
                        {
                            empire.TakeOwnershipOfBuiltObject(item2, empire, setDesignAsObsolete: true);
                        }
                    }
                    ShipGroupList shipGroupList = new ShipGroupList();
                    foreach (ShipGroup shipGroup in sourceEmpire.ShipGroups)
                    {
                        if ((shipGroup.GatherPoint == null || shipGroup.GatherPoint.Empire != empire) && !(Galaxy.Rnd.NextDouble() < num3))
                        {
                            continue;
                        }
                        shipGroupList.Add(shipGroup);
                        empire.ShipGroups.Add(shipGroup);
                        empire.ShipGroups.Sort();
                        foreach (BuiltObject ship in shipGroup.Ships)
                        {
                            empire.TakeOwnershipOfBuiltObject(ship, empire, setDesignAsObsolete: true);
                        }
                    }
                    foreach (ShipGroup item3 in shipGroupList)
                    {
                        sourceEmpire.ShipGroups.Remove(item3);
                    }
                    _Galaxy.Empires.Add(empire);
                }
            }
            return empire;
        }

        private bool ConsiderTakeoverOfBuiltObject(BuiltObject builtObject, Empire sourceEmpire, Empire newEmpire, double chance)
        {
            bool flag = false;
            if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == newEmpire)
            {
                flag = true;
            }
            if (builtObject.ParentBuiltObject != null && builtObject.ParentBuiltObject.Empire == newEmpire)
            {
                flag = true;
            }
            BuiltObjectMission mission = builtObject.Mission;
            if (mission != null)
            {
                switch (mission.Type)
                {
                    case BuiltObjectMissionType.Patrol:
                    case BuiltObjectMissionType.Escort:
                    case BuiltObjectMissionType.Retire:
                    case BuiltObjectMissionType.Retrofit:
                    case BuiltObjectMissionType.Hold:
                    case BuiltObjectMissionType.MoveAndWait:
                    case BuiltObjectMissionType.Refuel:
                    case BuiltObjectMissionType.LoadTroops:
                    case BuiltObjectMissionType.UnloadTroops:
                    case BuiltObjectMissionType.Repair:
                    case BuiltObjectMissionType.Move:
                        if (mission.TargetBuiltObject != null && mission.TargetBuiltObject.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        if (mission.TargetHabitat != null && mission.TargetHabitat.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        break;
                    case BuiltObjectMissionType.Transport:
                        if (mission.TargetBuiltObject != null && mission.TargetBuiltObject.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        if (mission.SecondaryTargetBuiltObject != null && mission.SecondaryTargetBuiltObject.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        if (mission.TargetHabitat != null && mission.TargetHabitat.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        if (mission.SecondaryTargetHabitat != null && mission.SecondaryTargetHabitat.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        break;
                    case BuiltObjectMissionType.WaitAndAttack:
                    case BuiltObjectMissionType.WaitAndBombard:
                        if (mission.SecondaryTargetBuiltObject != null && mission.SecondaryTargetBuiltObject.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        if (mission.SecondaryTargetHabitat != null && mission.SecondaryTargetHabitat.Empire == newEmpire)
                        {
                            flag = true;
                        }
                        break;
                }
            }
            if (!flag && builtObject.Role == BuiltObjectRole.Base)
            {
                double num = double.MaxValue;
                double num2 = double.MaxValue;
                Habitat habitat = _Galaxy.FastFindNearestColony((int)builtObject.Xpos, (int)builtObject.Ypos, sourceEmpire, 0);
                if (habitat != null)
                {
                    num = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                }
                Habitat habitat2 = _Galaxy.FastFindNearestColony((int)builtObject.Xpos, (int)builtObject.Ypos, newEmpire, 0);
                if (habitat2 != null)
                {
                    num2 = _Galaxy.CalculateDistance(habitat2.Xpos, habitat2.Ypos, builtObject.Xpos, builtObject.Ypos);
                }
                if (num2 < num)
                {
                    flag = true;
                }
            }
            if (!flag && builtObject.Role != BuiltObjectRole.Base && Galaxy.Rnd.NextDouble() < chance)
            {
                flag = true;
            }
            if (builtObject.ShipGroup != null)
            {
                flag = false;
            }
            return flag;
        }

        public HabitatPrioritizationList PirateReviewColoniesToControl()
        {
            HabitatPrioritizationList coloniesToControl = new HabitatPrioritizationList();
            HabitatList controlledColonies = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && !habitat.HasBeenDestroyed && habitat.Empire == this && !controlledColonies.Contains(habitat))
                {
                    controlledColonies.Add(habitat);
                }
            }
            if (PirateEmpireBaseHabitat != null)
            {
                double xpos = PirateEmpireBaseHabitat.Xpos;
                double ypos = PirateEmpireBaseHabitat.Ypos;
                for (int j = 0; j < _Galaxy.IndependentColonies.Count; j++)
                {
                    Habitat colony = _Galaxy.IndependentColonies[j];
                    PirateCheckControlColony(colony, xpos, ypos, ref coloniesToControl, ref controlledColonies);
                }
                for (int k = 0; k < _Galaxy.Empires.Count; k++)
                {
                    Empire empire = _Galaxy.Empires[k];
                    if (empire != null && empire.Active && empire.Colonies != null)
                    {
                        for (int l = 0; l < empire.Colonies.Count; l++)
                        {
                            Habitat colony2 = empire.Colonies[l];
                            PirateCheckControlColony(colony2, xpos, ypos, ref coloniesToControl, ref controlledColonies);
                        }
                    }
                }
                coloniesToControl.Sort();
                coloniesToControl.Reverse();
                Colonies = controlledColonies;
            }
            return coloniesToControl;
        }

        private void PirateCheckControlColony(Habitat colony, double pirateEmpireX, double pirateEmpireY, ref HabitatPrioritizationList coloniesToControl, ref HabitatList controlledColonies)
        {
            if (colony == null || colony.HasBeenDestroyed || colony.Population == null || colony.Population.TotalAmount <= 0 || (colony.Empire != null && colony.Empire.Reclusive))
            {
                return;
            }
            PirateColonyControl byFaction = colony.GetPirateControl().GetByFaction(this);
            if (colony.Empire == this || byFaction != null)
            {
                if (!controlledColonies.Contains(colony))
                {
                    controlledColonies.Add(colony);
                }
            }
            else
            {
                if (!CheckSystemExplored(colony.SystemIndex))
                {
                    return;
                }
                bool flag = false;
                double num = 0.0;
                if (colony.Empire == _Galaxy.IndependentEmpire)
                {
                    flag = true;
                }
                else if (colony.Empire != null && colony.Population != null && colony.Population.TotalAmount < 2000000000)
                {
                    num = colony.CurrentDefensiveForceAssigned;
                    flag = true;
                }
                if (!flag)
                {
                    return;
                }
                double num2 = _Galaxy.CalculateDistance(pirateEmpireX, pirateEmpireY, colony.Xpos, colony.Ypos);
                double num3 = (double)Galaxy.SizeX * 0.25;
                if (PiratePlayStyle == PiratePlayStyle.Balanced)
                {
                    num3 *= 1.4;
                }
                if (num2 < num3)
                {
                    double num4 = Math.Sqrt(num3 - num2) * ((double)colony.Population.TotalAmount / 1000.0);
                    if (num > 0.0)
                    {
                        num4 /= Math.Sqrt(num);
                    }
                    num4 = Math.Min(num4, 2147483647.0);
                    HabitatPrioritization item = new HabitatPrioritization(colony, (int)num4);
                    coloniesToControl.Add(item);
                }
            }
        }

        private void RespondToIncomingEnemyFleetsAndPlanetDestroyers()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            FleetAttackList fleetAttackList = new FleetAttackList();
            if (IncomingEnemyFleetsAndPlanetDestroyers.Count > 0)
            {
                IncomingEnemyFleetsAndPlanetDestroyers.Sort();
                for (int i = 0; i < IncomingEnemyFleetsAndPlanetDestroyers.Count; i++)
                {
                    FleetAttack fleetAttack = IncomingEnemyFleetsAndPlanetDestroyers[i];
                    if (fleetAttack.PlanetDestroyer != null)
                    {
                        if (fleetAttack.PlanetDestroyer.Mission == null || (fleetAttack.PlanetDestroyer.Mission.Type != BuiltObjectMissionType.Attack && fleetAttack.PlanetDestroyer.Mission.Type != BuiltObjectMissionType.WaitAndAttack && fleetAttack.PlanetDestroyer.Mission.Type != BuiltObjectMissionType.Bombard && fleetAttack.PlanetDestroyer.Mission.Type != BuiltObjectMissionType.WaitAndBombard))
                        {
                            fleetAttackList.Add(fleetAttack);
                            continue;
                        }
                        Empire empire = BuiltObjectMission.ResolveMissionTargetEmpire(fleetAttack.PlanetDestroyer.Mission);
                        if (empire != this)
                        {
                            bool flag = true;
                            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                            if ((diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation.Type == DiplomaticRelationType.Protectorate && diplomaticRelation.Initiator == this)) && fleetAttack.PlanetDestroyer != null && fleetAttack.PlanetDestroyer.Mission != null && _Galaxy.GlobalVictoryConditions != null)
                            {
                                if (_Galaxy.GlobalVictoryConditions.DefendHabitat != null && _Galaxy.GlobalVictoryConditions.DefendHabitat == fleetAttack.PlanetDestroyer.Mission.Target)
                                {
                                    flag = false;
                                }
                                if (_Galaxy.GlobalVictoryConditions.TargetHabitat != null && _Galaxy.GlobalVictoryConditions.TargetHabitat == fleetAttack.PlanetDestroyer.Mission.Target)
                                {
                                    flag = false;
                                }
                            }
                            if (flag)
                            {
                                fleetAttackList.Add(fleetAttack);
                                continue;
                            }
                        }
                        Point point = fleetAttack.PlanetDestroyer.Mission.ResolveTargetCoordinates(fleetAttack.PlanetDestroyer.Mission);
                        int num = 0;
                        BuiltObjectList ships = new BuiltObjectList();
                        num = _Galaxy.DetermineBuiltObjectStrengthAtLocation(point.X, point.Y, this, 0, includeAllies: false, out ships);
                        ShipGroupList shipGroupList = ShipGroups.DetermineFleetsTravellingToLocation(point.X, point.Y, 2000.0);
                        num += shipGroupList.CountTotalOverallStrengthFactor();
                        long num2 = fleetAttack.PlanetDestroyer.CalculateTimeToArrivalAtDestination();
                        long starDate = currentStarDate + num2 + 20000;
                        int num3 = 10000;
                        if (num >= num3)
                        {
                            continue;
                        }
                        ShipGroup shipGroup = IdentifyNearestAvailableFleet(point.X, point.Y, mustBeAutomated: true, mustBeWithinFuelRange: true, 0.0, 48000.0);
                        if (shipGroup != null)
                        {
                            StellarObject stellarObject = fleetAttack.PlanetDestroyer.Mission.ResolveMissionTargetHabitatIfPossible();
                            if (stellarObject == null)
                            {
                                shipGroup.AssignMission(BuiltObjectMissionType.MoveAndWait, null, null, null, null, point.X, point.Y, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            }
                            else
                            {
                                shipGroup.AssignMission(BuiltObjectMissionType.MoveAndWait, stellarObject, null, null, null, -2000000001.0, -2000000001.0, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            }
                            shipGroup.AllowImmediateThreatEvaluation = true;
                            shipGroup.AttackRangeSquared = (float)AttackRangeAttack * (float)AttackRangeAttack;
                            StellarObject stellarObject3 = (shipGroup.GatherPoint = FindNearestRefuellingPoint(point.X, point.Y, shipGroup.LeadShip.FuelType, 4));
                        }
                    }
                    else
                    {
                        if (fleetAttack.Fleet == null)
                        {
                            continue;
                        }
                        if (fleetAttack.Fleet.Mission == null || (fleetAttack.Fleet.Mission.Type != BuiltObjectMissionType.Attack && fleetAttack.Fleet.Mission.Type != BuiltObjectMissionType.WaitAndAttack && fleetAttack.Fleet.Mission.Type != BuiltObjectMissionType.Bombard && fleetAttack.Fleet.Mission.Type != BuiltObjectMissionType.WaitAndBombard))
                        {
                            fleetAttackList.Add(fleetAttack);
                            continue;
                        }
                        Empire empire2 = BuiltObjectMission.ResolveMissionTargetEmpire(fleetAttack.Fleet.Mission);
                        if (empire2 != this)
                        {
                            fleetAttackList.Add(fleetAttack);
                            continue;
                        }
                        Point point2 = fleetAttack.Fleet.Mission.ResolveTargetCoordinates(fleetAttack.Fleet.Mission);
                        int num4 = 0;
                        BuiltObjectList ships2 = new BuiltObjectList();
                        num4 = _Galaxy.DetermineBuiltObjectStrengthAtLocation(point2.X, point2.Y, this, 0, includeAllies: false, out ships2);
                        ShipGroupList shipGroupList2 = ShipGroups.DetermineFleetsTravellingToLocation(point2.X, point2.Y, 2000.0);
                        num4 += shipGroupList2.CountTotalOverallStrengthFactor();
                        long num5 = fleetAttack.Fleet.CalculateTimeToArrivalAtDestination();
                        long starDate2 = currentStarDate + num5 + 20000;
                        int num6 = (int)((double)fleetAttack.Fleet.TotalOverallStrengthFactor * 1.3);
                        if (num4 >= num6)
                        {
                            continue;
                        }
                        ShipGroup shipGroup2 = IdentifyNearestAvailableFleet(point2.X, point2.Y, mustBeAutomated: true, mustBeWithinFuelRange: true, 0.0, 48000.0);
                        if (shipGroup2 != null)
                        {
                            StellarObject stellarObject4 = fleetAttack.Fleet.Mission.ResolveMissionTargetHabitatIfPossible();
                            if (stellarObject4 == null)
                            {
                                shipGroup2.AssignMission(BuiltObjectMissionType.MoveAndWait, null, null, null, null, point2.X, point2.Y, starDate2, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            }
                            else
                            {
                                shipGroup2.AssignMission(BuiltObjectMissionType.MoveAndWait, stellarObject4, null, null, null, 2000000001.0, -2000000001.0, starDate2, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            }
                            shipGroup2.AllowImmediateThreatEvaluation = true;
                            shipGroup2.AttackRangeSquared = (float)AttackRangeAttack * (float)AttackRangeAttack;
                            StellarObject stellarObject6 = (shipGroup2.GatherPoint = FindNearestRefuellingPoint(point2.X, point2.Y, shipGroup2.LeadShip.FuelType, 4));
                        }
                    }
                }
            }
            for (int j = 0; j < fleetAttackList.Count; j++)
            {
                IncomingEnemyFleetsAndPlanetDestroyers.Remove(fleetAttackList[j]);
            }
        }

        public void RemoveDefeatedEmpireRelations()
        {
            DiplomaticRelationList diplomaticRelationList = new DiplomaticRelationList();
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (!diplomaticRelation.OtherEmpire.Active)
                    {
                        diplomaticRelationList.Add(diplomaticRelation);
                    }
                }
            }
            for (int j = 0; j < diplomaticRelationList.Count; j++)
            {
                DiplomaticRelations.Remove(diplomaticRelationList[j]);
            }
            EmpireEvaluationList empireEvaluationList = new EmpireEvaluationList();
            if (EmpireEvaluations != null)
            {
                for (int k = 0; k < EmpireEvaluations.Count; k++)
                {
                    EmpireEvaluation empireEvaluation = EmpireEvaluations[k];
                    if (!empireEvaluation.Empire.Active)
                    {
                        empireEvaluationList.Add(empireEvaluation);
                    }
                }
            }
            for (int l = 0; l < empireEvaluationList.Count; l++)
            {
                EmpireEvaluations.Remove(empireEvaluationList[l]);
            }
            PirateRelationList pirateRelationList = new PirateRelationList();
            if (PirateRelations != null)
            {
                for (int m = 0; m < PirateRelations.Count; m++)
                {
                    PirateRelation pirateRelation = PirateRelations[m];
                    if (pirateRelation != null && pirateRelation.OtherEmpire != null && !pirateRelation.OtherEmpire.Active)
                    {
                        pirateRelationList.AddRaw(pirateRelation);
                    }
                }
            }
            for (int n = 0; n < pirateRelationList.Count; n++)
            {
                PirateRelations.Remove(pirateRelationList[n]);
            }
        }

        public bool CheckDesignResourcesAtConstructionYard(Design design, StellarObject constructionYard, out ResourceList deficientResources)
        {
            deficientResources = new ResourceList();
            if (design != null && design.Components != null && constructionYard != null && constructionYard.Cargo != null)
            {
                ComponentResourceList componentResourceList = ResolveResourcesFromComponents(design.Components);
                for (int i = 0; i < componentResourceList.Count; i++)
                {
                    Cargo cargo = constructionYard.Cargo.GetCargo(componentResourceList[i], this);
                    if (cargo != null)
                    {
                        if (cargo.Available < componentResourceList[i].Quantity)
                        {
                            deficientResources.Add(componentResourceList[i]);
                        }
                    }
                    else
                    {
                        deficientResources.Add(componentResourceList[i]);
                    }
                }
                if (deficientResources.Count > 0)
                {
                    return false;
                }
            }
            return true;
        }

        private void ReviewDesignsAndRetrofit()
        {
            if (_ReviewDesignsAndRetrofit)
            {
                if (_ControlDesigns)
                {
                    CreateNewDesigns(_Galaxy.CurrentStarDate);
                }
                long privateRetrofitAge = Galaxy.RealSecondsInGalacticYear * 1000 * 2;
                if (_ReviewDesignsAndRetrofitImportantBreakthrough)
                {
                    privateRetrofitAge = 0L;
                }
                RetrofitBuiltObjects(0L, privateRetrofitAge, breakthroughInitiated: true);
                _ReviewDesignsAndRetrofit = false;
                _ReviewDesignsAndRetrofitImportantBreakthrough = false;
            }
        }

        public void ResetLastTouchTimesToMinimum()
        {
            _LastHugeTouch = (_LastLongTouch = (_LastIntermediateTouch = (_LastPeriodicTouch = (_LastRegularTouch = (_LastShortTouch = DateTime.MinValue)))));
        }

        public void DoTasks()
        {
            if (PirateEmpireBaseHabitat != null)
            {
                DoTasksPirates();
            }
            else
            {
                if (!Active)
                {
                    return;
                }
                DateTime currentDateTime = _Galaxy.CurrentDateTime;
                double num = (double)currentDateTime.Subtract(_LastShortTouch).Ticks / 10000000.0;
                currentDateTime.Subtract(_LastShortTouch);
                double num2 = (double)currentDateTime.Subtract(_LastRegularTouch).Ticks / 10000000.0;
                currentDateTime.Subtract(_LastRegularTouch);
                double num3 = (double)currentDateTime.Subtract(_LastPeriodicTouch).Ticks / 10000000.0;
                currentDateTime.Subtract(_LastPeriodicTouch);
                double num4 = (double)currentDateTime.Subtract(_LastIntermediateTouch).Ticks / 10000000.0;
                currentDateTime.Subtract(_LastIntermediateTouch);
                double num5 = (double)currentDateTime.Subtract(_LastLongTouch).Ticks / 10000000.0;
                TimeSpan timePassedSpan = currentDateTime.Subtract(_LastLongTouch);
                double num6 = (double)currentDateTime.Subtract(_LastHugeTouch).Ticks / 10000000.0;
                currentDateTime.Subtract(_LastHugeTouch);
                if (num < 0.0)
                {
                    _LastShortTouch = currentDateTime;
                }
                if (num2 < 0.0)
                {
                    _LastRegularTouch = currentDateTime;
                }
                if (num3 < 0.0)
                {
                    _LastPeriodicTouch = currentDateTime;
                }
                if (num4 < 0.0)
                {
                    _LastIntermediateTouch = currentDateTime;
                }
                if (num5 < 0.0)
                {
                    _LastLongTouch = currentDateTime;
                }
                if (num6 < 0.0)
                {
                    _LastHugeTouch = currentDateTime;
                }
                if (num >= _ShortProcessingInterval)
                {
                    _LastShortTouch = currentDateTime;
                }
                if (num2 >= _RegularProcessingInterval)
                {
                    _LastRegularTouch = currentDateTime;
                }
                if (num3 >= _PeriodicProcessingInterval)
                {
                    _LastPeriodicTouch = currentDateTime;
                }
                if (num4 >= _IntermediateProcessingInterval)
                {
                    _LastIntermediateTouch = currentDateTime;
                }
                if (num5 >= _LongProcessingInterval)
                {
                    _LastLongTouch = currentDateTime;
                }
                if (num6 >= _HugeProcessingInterval)
                {
                    _LastHugeTouch = currentDateTime;
                }
                bool flag = true;
                if (DominantRace != null)
                {
                    flag = DominantRace.Expanding;
                }
                if (num >= _ShortProcessingInterval)
                {
                    RespondToIncomingEnemyFleetsAndPlanetDestroyers();
                    for (int i = 0; i < ShipGroups.Count; i++)
                    {
                        ShipGroup shipGroup = ShipGroups[i];
                        shipGroup.DoTasks(currentDateTime);
                    }
                    ProcessCharacters(num);
                }
                if (num2 >= _RegularProcessingInterval)
                {
                    ProcessDistressSignals();
                    ClearOutOldDistressSignals();
                    ClearExpiredViewableEmpires();
                    ReviewDesignsAndRetrofit();
                    UpdateEmpireRefuellingLocations();
                }
                if (num3 >= _PeriodicProcessingInterval)
                {
                    _RelativeEmpireSize = CalculateRelativeEmpireSize();
                    CheckReviewSpecialPirateEvents();
                    CheckSendPirateRaid();
                    RemoveDefeatedEmpireRelations();
                    ProcessMessages();
                    ConsiderTreatyProposals();
                    EvaluateColonyVariables(_Galaxy, num3);
                    RecruitAttackTroops();
                    RecalculateEmpireCorruption();
                    if (_ControlColonyTaxRates)
                    {
                        ReviewTaxes();
                    }
                    RecalculateColonyTaxRevenues();
                    if (_ControlMilitaryAttacks != 0)
                    {
                        IdentifyMilitaryObjectives();
                    }
                    if (_ControlMilitaryFleets)
                    {
                        MaintainShipGroups();
                        UpdateFleetLeadShips();
                        ReviewFleetPostures();
                    }
                    CancelInactiveBlockades();
                    ReviewPirateDefendMissions(_Galaxy.CurrentStarDate);
                    ReviewPirateSmugglingMissions(_Galaxy.CurrentStarDate);
                    CheckMarketOrders();
                    AssignShipMissions();
                    if (_ControlAgentAssignment != 0)
                    {
                        AssignSpecialMissions();
                    }
                    PerformIntelligenceMissions();
                    PerformResearch(num3, allowResearchEvents: true);
                    EvaluateSystemLinks();
                }
                if (num4 >= _IntermediateProcessingInterval)
                {
                    if (_ControlMilitaryFleets)
                    {
                        TaskShipGroups();
                    }
                    ReviewFleetAdmiralBonuses();
                    TaskResupplyShips();
                    ReviewResearchStationBonuses();
                    if (flag)
                    {
                        ReviewIndependentColonyTargets();
                    }
                    ProcessTradeBonuses(num4);
                    ReviewColonyPopulationPolicy(num4);
                    UpdateSystemExplorationStatus();
                    CheckKnownPirateBases();
                    double privateAnnualRevenue = PrivateAnnualRevenue;
                    double num7 = privateAnnualRevenue * (num4 / (double)Galaxy.RealSecondsInGalacticYear);
                    if (double.IsNaN(num7))
                    {
                        num7 = 0.0;
                    }
                    Counters.ProcessColonyRevenue(num7);
                    _PrivateMoney += num7;
                    double annualTaxRevenue = AnnualTaxRevenue;
                    double val = annualTaxRevenue * (num4 / (double)Galaxy.RealSecondsInGalacticYear);
                    val = Math.Max(0.0, val);
                    if (double.IsNaN(val))
                    {
                        val = 0.0;
                    }
                    _StateMoney += val;
                    _PrivateMoney -= val;
                    if (double.IsNaN(_StateMoney))
                    {
                        _StateMoney = 0.0;
                    }
                    if (double.IsNaN(_PrivateMoney))
                    {
                        _PrivateMoney = 0.0;
                    }
                    ProcessSubjugationTribute(num4);
                    if (_StateMoney < 0.0)
                    {
                        _Galaxy.DoCharacterEventLeader(CharacterEventType.CashNegative, null, this);
                    }
                    else
                    {
                        _Galaxy.DoCharacterEventLeader(CharacterEventType.CashPositive, null, this);
                    }
                    if (this != _Galaxy.IndependentEmpire && DominantRace != null)
                    {
                        CheckForCharacterAppearance();
                    }
                    ReviewCharacterLeaderChange(num4);
                    ProcessLeaderChangeInfluence(num4);
                    ReviewCharacterBonusesKnown();
                    ReviewCharacterTraits();
                    ReviewDemoralizingCharacters();
                    ReviewCharacterLocations();
                    if (_ControlDesigns)
                    {
                        CreateNewDesigns(_Galaxy.CurrentStarDate);
                    }
                    ReviewSystemThreats();
                    _ColonizationTargets = IdentifyColonizationTargets(_Galaxy);
                    if (flag)
                    {
                        InvadeUnwillingColonizationTargets(_Galaxy);
                    }
                    _ResourceTargets = IdentifyResourceCentres(_Galaxy);
                    _EmpireResourceTargets = PrioritizeEmpireResourceNeeds();
                    IdentifyUnavailableLuxuryResources();
                    if (this == _Galaxy.PlayerEmpire)
                    {
                        UpdateSystemRefuellingStatus();
                        CheckForStrandedShips();
                    }
                    UpdateSystemFuelSourceStatus();
                    UpdateAchievements();
                }
                if (num5 >= _LongProcessingInterval)
                {
                    MergeGalaxyMapsForSharedVisibilityEmpires();
                    MergeKnownPirateBasesForSharedVisibilityEmpires();
                    if (flag)
                    {
                        CheckTemptingTargets();
                    }
                    ReviewColonyWonders();
                    ReviewColonyFacilities();
                    RefreshColonyFacilityInfo();
                    if (flag)
                    {
                        SendAvailableFleetsToGuardStrategicLocations();
                    }
                    ReviewEmpireAbilityBonuses();
                    ReviewGovernmentEffects(num5);
                    CheckChangeGovernment();
                    RecalculateColonyTaxRevenues();
                    ClearInvalidDiplomaticRelations();
                    EvaluatePoliticalSituation(timePassedSpan);
                    ReviewDiplomaticStrategies();
                    ReviewDiplomaticSituations();
                    ReviewPirateRelations(_Galaxy.CurrentStarDate, num5);
                    if (CheckHaveMetPirates(this))
                    {
                        MakeAttackOffersToPirates(_Galaxy.CurrentStarDate);
                        MakeDefendOffersToPirates(_Galaxy.CurrentStarDate);
                        MakeSmugglingOffersToPirates(_Galaxy.CurrentStarDate);
                    }
                    ReviewRestrictedResourceTrading();
                    ReviewSpecialBonusesRuinsWonders();
                    ReviewMigrationTourism();
                    DoCrashResearch();
                    if (!Reclusive)
                    {
                        TradeItems();
                    }
                    if (_ControlTroopGeneration)
                    {
                        DisbandExcessTroops();
                    }
                    if (_ControlMilitaryAttacks != 0 && !Reclusive)
                    {
                        DetermineRandomAttacks();
                    }
                    ProjectForceStructure();
                    ProjectPrivateForceStructure();
                    PayMaintenanceForBuiltObjects(num5);
                    PayForTroops(num5);
                    PayForPlanetaryFacilities(num5);
                    RetireOldBuiltObjects();
                    if (_InitiateConstruction)
                    {
                        ReviewLatestDesigns();
                        DirectConstruction();
                        DirectPrivateConstruction();
                    }
                    ExertCulturalInfluence();
                    ClearOldDistressSignals();
                    ClearExpiredDeclinedTasks();
                    DetermineMonitoringStationLocation();
                    DetermineResearchStationLocation(allowOccupiedSystems: false, mustHaveBuildableResearchStationDesign: true);
                }
                if (num6 >= _HugeProcessingInterval)
                {
                    CleanupInvalidShips();
                    ReviewEmpireEndsAllWars(_Galaxy.CurrentStarDate);
                    BuildDefensiveBases();
                    CheckColoniesForPirateFacilitiesAndAttack();
                    ShakturiSendConvoy();
                    CheckOfferStoryHint();
                    ResetRaceEvents();
                    ReviewRandomEvents();
                    ReviewEmpireEvents();
                    CheckSendShipConvoysViaGateway(num6);
                    MaintainBaseResourceLevels();
                    if (!Reclusive)
                    {
                        ReviewEnemyHelpEnlistment();
                    }
                    ReviewDisputedTerritory();
                }
            }
        }

        public bool CoordinateFleetAttacksWithAllies(ShipGroup fleet)
        {
            if (this != _Galaxy.PlayerEmpire && _ControlMilitaryAttacks == AutomationLevel.FullyAutomated && fleet != null && fleet.Ships != null && fleet.Ships.Count >= 10 && fleet.Posture == FleetPosture.Attack && fleet.LeadShip != null && fleet.LeadShip.IsAutoControlled)
            {
                DetermineFriendsAndEnemies(this, out var _, out var closeFriends, out var _, out var severeEnemies);
                if (closeFriends.Count > 0 && severeEnemies.Count > 0)
                {
                    for (int i = 0; i < closeFriends.Count; i++)
                    {
                        Empire empire = closeFriends[i];
                        if (empire != null && empire.ShipGroups != null && empire.ShipGroups.Count > 0 && CoordinateFleetAttacksWithAllies(fleet, empire, severeEnemies))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public bool CoordinateFleetAttacksWithAllies(ShipGroup fleet, Empire empire, EmpireList enemies)
        {
            if (fleet != null && empire != null && empire.ShipGroups != null && empire.ShipGroups.Count > 0)
            {
                for (int i = 0; i < empire.ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = empire.ShipGroups[i];
                    if (shipGroup == null || shipGroup == fleet || shipGroup.Ships == null || shipGroup.Ships.Count < 10)
                    {
                        continue;
                    }
                    BuiltObjectMission mission = shipGroup.Mission;
                    if (mission == null)
                    {
                        continue;
                    }
                    BuiltObjectMissionType type = mission.Type;
                    if (type != BuiltObjectMissionType.Attack)
                    {
                        continue;
                    }
                    Empire empire2 = BuiltObjectMission.ResolveMissionTargetEmpire(mission);
                    if (enemies != null && !enemies.Contains(empire2))
                    {
                        continue;
                    }
                    Point point = mission.ResolveTargetCoordinates(mission);
                    BuiltObject leadShip = fleet.LeadShip;
                    if (leadShip == null || !fleet.CheckFleetTargetWithinFuelRange(point.X, point.Y, 0.2))
                    {
                        continue;
                    }
                    double num = Galaxy.CalculateDistanceStatic(point.X, point.Y, leadShip.Xpos, leadShip.Ypos);
                    if (!(num < (double)Galaxy.SectorSize * 3.0))
                    {
                        continue;
                    }
                    double nearestDistance = double.MaxValue;
                    ShipGroupList shipGroupList = ShipGroups.ResolveFleetsWithAttackTarget(mission.Target, out nearestDistance);
                    double num2 = num / nearestDistance;
                    if ((shipGroupList.Count > 0 && (shipGroupList.Count >= 3 || !(num2 < 0.5))) || !fleet.AssignMission(BuiltObjectMissionType.Attack, mission.Target, null, BuiltObjectMissionPriority.High, manuallyAssigned: false))
                    {
                        continue;
                    }
                    if (empire != this)
                    {
                        string arg = string.Empty;
                        if (mission.TargetBuiltObject != null)
                        {
                            arg = mission.TargetBuiltObject.Name;
                        }
                        else if (mission.TargetHabitat != null)
                        {
                            arg = mission.TargetHabitat.Name;
                        }
                        else if (mission.TargetShipGroup != null)
                        {
                            arg = mission.TargetShipGroup.Name;
                        }
                        else if (mission.TargetCreature != null)
                        {
                            arg = mission.TargetCreature.Name;
                        }
                        string description = string.Format(TextResolver.GetText("We are sending our FLEET to join your attack on TARGET of EMPIRE"), fleet.Name, arg, empire2.Name);
                        string title = string.Format(TextResolver.GetText("EMPIRE sends fleet to join our attack on TARGET"), Name, arg);
                        SendMessageToEmpireWithTitle(empire, EmpireMessageType.BattleAttacking, mission.Target, description, title);
                    }
                    return true;
                }
            }
            return false;
        }

        private void CoordinateFleetAttacksWithAllies()
        {
            if (this == _Galaxy.PlayerEmpire || _ControlMilitaryAttacks != AutomationLevel.FullyAutomated)
            {
                return;
            }
            DetermineFriendsAndEnemies(this, out var _, out var closeFriends, out var _, out var severeEnemies);
            if (closeFriends.Count <= 0 || severeEnemies.Count <= 0)
            {
                return;
            }
            for (int i = 0; i < closeFriends.Count; i++)
            {
                Empire empire = closeFriends[i];
                if (empire == null || empire.ShipGroups == null || empire.ShipGroups.Count <= 0)
                {
                    continue;
                }
                bool flag = false;
                for (int j = 0; j < empire.ShipGroups.Count; j++)
                {
                    ShipGroup shipGroup = empire.ShipGroups[j];
                    if (shipGroup != null && shipGroup.Ships != null && shipGroup.Ships.Count >= 10)
                    {
                        BuiltObjectMission mission = shipGroup.Mission;
                        if (mission != null)
                        {
                            BuiltObjectMissionType type = mission.Type;
                            if (type == BuiltObjectMissionType.Attack)
                            {
                                Empire empire2 = BuiltObjectMission.ResolveMissionTargetEmpire(mission);
                                if (severeEnemies.Contains(empire2))
                                {
                                    double nearestDistance = double.MaxValue;
                                    ShipGroupList shipGroupList = ShipGroups.ResolveFleetsWithAttackTarget(mission.Target, out nearestDistance);
                                    if (shipGroupList.Count <= 0 || nearestDistance > 8000000.0)
                                    {
                                        Point point = mission.ResolveTargetCoordinates(mission);
                                        ShipGroup shipGroup2 = FindNearestAvailableFleet(point.X, point.Y, BuiltObjectMissionPriority.Normal, 0, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.2, mustBeAutomated: true, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: false, 0, 0);
                                        if (shipGroup2 != null && shipGroup2.AssignMission(BuiltObjectMissionType.Attack, mission.Target, null, BuiltObjectMissionPriority.High, manuallyAssigned: false))
                                        {
                                            flag = true;
                                            string arg = string.Empty;
                                            if (mission.TargetBuiltObject != null)
                                            {
                                                arg = mission.TargetBuiltObject.Name;
                                            }
                                            else if (mission.TargetHabitat != null)
                                            {
                                                arg = mission.TargetHabitat.Name;
                                            }
                                            else if (mission.TargetShipGroup != null)
                                            {
                                                arg = mission.TargetShipGroup.Name;
                                            }
                                            else if (mission.TargetCreature != null)
                                            {
                                                arg = mission.TargetCreature.Name;
                                            }
                                            string description = string.Format(TextResolver.GetText("We are sending our FLEET to join your attack on TARGET of EMPIRE"), shipGroup2.Name, arg, empire2.Name);
                                            string title = string.Format(TextResolver.GetText("EMPIRE sends fleet to join our attack on TARGET"), Name, arg);
                                            SendMessageToEmpireWithTitle(empire, EmpireMessageType.BattleAttacking, mission.Target, description, title);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (flag)
                    {
                        break;
                    }
                }
            }
        }

        private void CheckSendShipConvoysViaGateway(double timePassed)
        {
            bool flag = false;
            Race race = null;
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat == null || habitat.Facilities == null)
                    {
                        continue;
                    }
                    for (int j = 0; j < habitat.Facilities.Count; j++)
                    {
                        PlanetaryFacility planetaryFacility = habitat.Facilities[j];
                        if (planetaryFacility != null && planetaryFacility.Type == PlanetaryFacilityType.Wonder && planetaryFacility.WonderType == WonderType.RaceAchievement && planetaryFacility.Value2 == 3)
                        {
                            flag = true;
                            if (habitat.Population != null)
                            {
                                race = habitat.Population.DominantRace;
                            }
                            break;
                        }
                    }
                    if (flag)
                    {
                        break;
                    }
                }
            }
            if (!flag)
            {
                return;
            }
            float supportCostFactor = 1f;
            if (race != null && race.Name == "Shakturi")
            {
                supportCostFactor = 0.2f;
            }
            if (Galaxy.Rnd.Next(0, 10) < 8)
            {
                switch (Galaxy.Rnd.Next(0, 3))
                {
                    case 0:
                    case 1:
                        {
                            int size2 = Galaxy.Rnd.Next(7, 22);
                            _Galaxy.GenerateMilitaryConvoy(this, size2, supportCostFactor);
                            break;
                        }
                    case 2:
                        {
                            int size = Galaxy.Rnd.Next(7, 22);
                            _Galaxy.GenerateCivilianConvoy(this, size, supportCostFactor, string.Empty);
                            break;
                        }
                }
            }
        }

        public void ReviewEmpireEndsAllWars(long starDate)
        {
            if (Counters.AtWarStartDate != long.MaxValue && !CheckAtWar(null))
            {
                Counters.FixupAtWarCounter(starDate);
            }
        }

        public void UpdateAchievements()
        {
            if (Achievements == null)
            {
                Achievements = new AchievementList();
            }
            AchievementList achievementList = _Galaxy.ReviewAchievementsForEmpire(this);
            for (int i = 0; i < achievementList.Count; i++)
            {
                Achievement achievement = achievementList[i];
                if (achievement == null)
                {
                    continue;
                }
                Achievement firstByType = Achievements.GetFirstByType(achievement.Type);
                if (firstByType != null)
                {
                    if (achievement.Value > firstByType.Value)
                    {
                        firstByType.Value = achievement.Value;
                    }
                }
                else
                {
                    Achievements.Add(achievement);
                }
                if (this == _Galaxy.PlayerEmpire)
                {
                    SteamAPI.SetAchievementIfNecessary(achievement);
                }
            }
        }

        private bool CheckBuildoutResearchCapacityAtColonies(out Design researchStationDesignToBuild, out Habitat colonyToBuildAt)
        {
            researchStationDesignToBuild = null;
            colonyToBuildAt = null;
            Design weaponsResearchStation;
            Design energyResearchStation;
            Design highTechResearchStation;
            Design design = AnalyzeNewResearchFacilities(out weaponsResearchStation, out energyResearchStation, out highTechResearchStation);
            if (design != null && (_ResearchHabitats == null || _ResearchHabitats.Count <= 0 || !CheckEmpireHasHyperDriveTech(this)))
            {
                if (ResearchFacilities.Count <= 0 || ResearchFacilities.CountResearchStations() <= 0)
                {
                    if (!CheckEmpireHasHyperDriveTech(this) && energyResearchStation != null)
                    {
                        design = energyResearchStation;
                    }
                    if (Policy.ResearchIndustryFocus != 0)
                    {
                        switch (Policy.ResearchIndustryFocus)
                        {
                            case IndustryType.Energy:
                                design = energyResearchStation;
                                break;
                            case IndustryType.HighTech:
                                design = highTechResearchStation;
                                break;
                            case IndustryType.Weapon:
                                design = weaponsResearchStation;
                                break;
                        }
                    }
                }
                if (design != null)
                {
                    double num = design.CalculateMaintenanceCosts(_Galaxy, this);
                    double num2 = design.CalculateCurrentPurchasePrice(_Galaxy);
                    if (num2 <= StateMoney && num <= CalculateSpareAnnualRevenueComplete())
                    {
                        Habitat habitat = null;
                        for (int i = 0; i < Colonies.Count; i++)
                        {
                            Habitat habitat2 = Colonies[i];
                            if (habitat2 != null && habitat2.BasesAtHabitat != null && habitat2.Population != null && habitat2.Population.TotalAmount > 2000000000)
                            {
                                int num3 = habitat2.BasesAtHabitat.CountResearchStations();
                                if (num3 < 2 && (habitat == null || habitat2.BasesAtHabitat.Count < habitat.BasesAtHabitat.Count))
                                {
                                    habitat = habitat2;
                                }
                            }
                        }
                        if (habitat != null)
                        {
                            researchStationDesignToBuild = design;
                            colonyToBuildAt = habitat;
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private void CheckSendPirateRaid()
        {
            if (PreWarpProgressEventOccurredSendPirateRaid || Capital == null)
            {
                return;
            }
            Empire empire = _Galaxy.FindNearestPirateFaction(Capital.Xpos, Capital.Ypos, _Galaxy.PlayerEmpire, includeSuperPirates: false);
            if (empire == null)
            {
                return;
            }
            if (empire.ShipGroups != null && empire.ShipGroups.Count > 0)
            {
                empire.ShipGroups[0]?.AssignMission(BuiltObjectMissionType.Raid, Capital, null, BuiltObjectMissionPriority.High, manuallyAssigned: true);
            }
            else
            {
                for (int i = 0; i < empire.BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = empire.BuiltObjects[i];
                    if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.BuiltAt == null && builtObject.UnbuiltComponentCount <= 0 && builtObject.Role == BuiltObjectRole.Military && builtObject.SubRole != BuiltObjectSubRole.ResupplyShip)
                    {
                        builtObject.ClearPreviousMissionRequirements();
                        builtObject.AssignMission(BuiltObjectMissionType.Raid, Capital, null, BuiltObjectMissionPriority.High, manuallyAssigned: true);
                    }
                }
            }
            PreWarpProgressEventOccurredSendPirateRaid = true;
        }

        public void DoTasksPirates()
        {
            if (!Active)
            {
                return;
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            DateTime currentDateTime = _Galaxy.CurrentDateTime;
            double num = (double)currentDateTime.Subtract(_LastShortTouch).Ticks / 10000000.0;
            currentDateTime.Subtract(_LastShortTouch);
            double num2 = (double)currentDateTime.Subtract(_LastRegularTouch).Ticks / 10000000.0;
            currentDateTime.Subtract(_LastRegularTouch);
            double num3 = (double)currentDateTime.Subtract(_LastPeriodicTouch).Ticks / 10000000.0;
            currentDateTime.Subtract(_LastPeriodicTouch);
            double num4 = (double)currentDateTime.Subtract(_LastIntermediateTouch).Ticks / 10000000.0;
            currentDateTime.Subtract(_LastIntermediateTouch);
            double num5 = (double)currentDateTime.Subtract(_LastLongTouch).Ticks / 10000000.0;
            currentDateTime.Subtract(_LastLongTouch);
            double num6 = (double)currentDateTime.Subtract(_LastHugeTouch).Ticks / 10000000.0;
            currentDateTime.Subtract(_LastHugeTouch);
            if (num < 0.0)
            {
                _LastShortTouch = currentDateTime;
            }
            if (num2 < 0.0)
            {
                _LastRegularTouch = currentDateTime;
            }
            if (num3 < 0.0)
            {
                _LastPeriodicTouch = currentDateTime;
            }
            if (num4 < 0.0)
            {
                _LastIntermediateTouch = currentDateTime;
            }
            if (num5 < 0.0)
            {
                _LastLongTouch = currentDateTime;
            }
            if (num6 < 0.0)
            {
                _LastHugeTouch = currentDateTime;
            }
            if (num >= _ShortProcessingInterval)
            {
                _LastShortTouch = currentDateTime;
            }
            if (num2 >= _RegularProcessingInterval)
            {
                _LastRegularTouch = currentDateTime;
            }
            if (num3 >= _PeriodicProcessingInterval)
            {
                _LastPeriodicTouch = currentDateTime;
            }
            if (num4 >= _IntermediateProcessingInterval)
            {
                _LastIntermediateTouch = currentDateTime;
            }
            if (num5 >= _LongProcessingInterval)
            {
                _LastLongTouch = currentDateTime;
            }
            if (num6 >= _HugeProcessingInterval)
            {
                _LastHugeTouch = currentDateTime;
            }
            if (num >= _ShortProcessingInterval)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    shipGroup.DoTasks(currentDateTime);
                }
                ProcessCharacters(num);
            }
            if (num2 >= _RegularProcessingInterval)
            {
                ReviewDesignsAndRetrofit();
                ClearExpiredViewableEmpires();
                PirateCheckMissionsOnOffer(currentStarDate);
                UpdateEmpireRefuellingLocations();
            }
            if (num3 >= _PeriodicProcessingInterval)
            {
                RemoveDefeatedEmpireRelations();
                PirateRecalculateEmpireCorruption();
                ProcessMessages();
                EvaluateColonyVariablesPirate(_Galaxy, num3);
                if (_ControlMilitaryFleets)
                {
                    MaintainShipGroups();
                    UpdateFleetLeadShips();
                    ReviewFleetPostures();
                }
                CheckMarketOrders();
                PirateAssignShipMissions(currentStarDate);
                if (_ControlAgentAssignment != 0)
                {
                    AssignSpecialMissions();
                }
                PerformIntelligenceMissions();
                PerformResearch(num3, allowResearchEvents: true);
            }
            if (num4 >= _IntermediateProcessingInterval)
            {
                if (_ControlMilitaryAttacks != 0)
                {
                    PirateTaskFleets();
                }
                ReviewFleetAdmiralBonuses();
                TaskResupplyShips();
                ReviewResearchStationBonuses();
                UpdateSystemExplorationStatus();
                CheckKnownPirateBases();
                PirateCollectIncomeFromControlledColonies(num4);
                if (this != _Galaxy.IndependentEmpire && DominantRace != null)
                {
                    CheckForCharacterAppearance();
                }
                ReviewCharacterLeaderChange(num4);
                ProcessLeaderChangeInfluence(num4);
                ReviewCharacterTraits();
                ReviewDemoralizingCharacters();
                ReviewCharacterLocations();
                if (_ControlDesigns)
                {
                    CreateNewDesigns(currentStarDate);
                }
                PirateReviewSystemThreats();
                _ColonizationTargets = PirateReviewColoniesToControl();
                _EmpireResourceTargets = PrioritizeEmpireResourceNeeds(includeLuxuryResources: false, 5, 1.0);
                _ResourceTargets = IdentifyResourceCentres(_Galaxy);
                IdentifyUnavailableLuxuryResources();
                PirateGenerateSellInfoOffers();
                if (this == _Galaxy.PlayerEmpire)
                {
                    UpdateSystemRefuellingStatus();
                    CheckForStrandedShips();
                }
                UpdateSystemFuelSourceStatus();
                ReviewPirateSystemInfluence();
                if (this == _Galaxy.PlayerEmpire)
                {
                    UpdateAchievements();
                }
            }
            if (num5 >= _LongProcessingInterval)
            {
                BaconEmpire.DoTaskPiratesLongInterval(this);
                MergeGalaxyMapsForSharedVisibilityEmpires();
                MergeKnownPirateBasesForSharedVisibilityEmpires();
                MaintainPirateSpaceportResourceLevels();
                PirateReviewColonyFacilities();
                ClearInvalidDiplomaticRelations();
                PirateReviewEmpireRelations(currentStarDate, num4);
                PirateProjectForces(currentStarDate);
                PayMaintenanceForBuiltObjects(num5);
                PayForTroops(num5);
                PayForPlanetaryFacilities(num5);
                ReviewMigrationTourism();
                if (_InitiateConstruction)
                {
                    ReviewLatestDesigns();
                    PirateDoConstruction();
                }
                PirateResetCivilianShipEmpireToIndependent();
                PiratesMakeAttackOffers(currentStarDate);
                PirateTradeItems();
                ClearExpiredDeclinedTasks();
            }
            if (num6 >= _HugeProcessingInterval)
            {
                PirateReviewRandomEvents();
                MaintainBaseResourceLevels();
                CleanupInvalidShips();
            }
        }

        private void MaintainBaseResourceLevels()
        {
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.Role == BuiltObjectRole.Base && (builtObject.ParentHabitat == null || builtObject.ParentHabitat.Empire == null || builtObject.ParentHabitat.Empire != builtObject.Empire) && builtObject.BuiltAt == null && builtObject.CargoSpace > 0)
                {
                    MaintainBaseResourceLevelsSingleBase(builtObject);
                }
            }
            for (int j = 0; j < PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject2 = PrivateBuiltObjects[j];
                if (builtObject2 != null && !builtObject2.HasBeenDestroyed && builtObject2.Role == BuiltObjectRole.Base && (builtObject2.ParentHabitat == null || builtObject2.ParentHabitat.Empire == null || builtObject2.ParentHabitat.Empire != builtObject2.Empire) && builtObject2.BuiltAt == null && builtObject2.CargoSpace > 0)
                {
                    MaintainBaseResourceLevelsSingleBase(builtObject2);
                }
            }
        }

        private void MaintainBaseResourceLevelsSingleBase(BuiltObject baseNotAtColony)
        {
            OrderList orders = _Galaxy.Orders.GetOrders(baseNotAtColony);
            for (int i = 0; i < _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null)
                {
                    Resource resource = new Resource(resourceDefinition.ResourceID);
                    CheckAndOrderResource(baseNotAtColony, orders, resource);
                }
            }
        }

        private void CheckAndOrderResource(BuiltObject baseNotAtColony, OrderList baseOrders, Resource resource)
        {
            int amountToOrder = 0;
            int num = Galaxy.CalculateResourceLevelStockForBaseRetrofit(resource.ResourceID);
            if (!CheckResourceMeetsMinimumLevelBaseNotAtColony(resource, num, num, baseNotAtColony, baseOrders, out amountToOrder))
            {
                double num2 = (double)amountToOrder * _Galaxy.ResourceCurrentPrices[resource.ResourceID];
                if (num2 < GetPrivateFunds())
                {
                    CreateOrder(baseNotAtColony, resource, amountToOrder, isState: false, OrderType.RetrofitResourcesForBase);
                }
            }
        }

        private bool CheckResourceMeetsMinimumLevelBaseNotAtColony(Resource resource, int minimumResourceLevel, int maximumResourceLevel, BuiltObject baseNotAtColony, OrderList baseOrders, out int amountToOrder)
        {
            return BaconEmpire.CheckResourceMeetsMinimumLevelBaseNotAtColony(this, resource, minimumResourceLevel, maximumResourceLevel, baseNotAtColony, baseOrders, out amountToOrder);
        }

        private void CheckColoniesForPirateFacilitiesAndAttack()
        {
            BaconEmpire.CheckColoniesForPirateFacilitiesAndAttack(this);
        }

        private void PirateResetCivilianShipEmpireToIndependent()
        {
            if (PirateEmpireBaseHabitat == null || PrivateBuiltObjects == null)
            {
                return;
            }
            for (int i = 0; i < PrivateBuiltObjects.Count; i++)
            {
                BuiltObject builtObject = PrivateBuiltObjects[i];
                if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.PirateEmpireId == EmpireId && builtObject.Empire == this)
                {
                    switch (builtObject.SubRole)
                    {
                        case BuiltObjectSubRole.SmallFreighter:
                        case BuiltObjectSubRole.MediumFreighter:
                        case BuiltObjectSubRole.LargeFreighter:
                        case BuiltObjectSubRole.PassengerShip:
                        case BuiltObjectSubRole.GasMiningShip:
                        case BuiltObjectSubRole.MiningShip:
                            builtObject.Empire = _Galaxy.IndependentEmpire;
                            break;
                    }
                }
            }
        }

        private void PirateGenerateSellInfoOffers()
        {
            if (this == _Galaxy.PlayerEmpire)
            {
                return;
            }
            _ = _Galaxy.ColonyFillFactor;
            int num = Galaxy.Rnd.Next(0, PirateRelations.Count);
            for (int i = num; i < PirateRelations.Count; i++)
            {
                PirateRelation pirateRelation = PirateRelations[i];
                if (pirateRelation != null && pirateRelation.Type != 0 && pirateRelation.Evaluation > -10f && _Galaxy.GeneratePirateOffersForSingleEmpire(this, pirateRelation.OtherEmpire))
                {
                    return;
                }
            }
            for (int j = 0; j < Math.Min(num, PirateRelations.Count); j++)
            {
                PirateRelation pirateRelation2 = PirateRelations[j];
                if (pirateRelation2 != null && pirateRelation2.Type != 0 && pirateRelation2.Evaluation > -10f && _Galaxy.GeneratePirateOffersForSingleEmpire(this, pirateRelation2.OtherEmpire))
                {
                    break;
                }
            }
        }

        private void PirateAssignShipMissions(long starDate)
        {
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                builtObject.CurrentEscortForceAssigned = 0;
            }
            for (int j = 0; j < PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject2 = PrivateBuiltObjects[j];
                builtObject2.CurrentEscortForceAssigned = 0;
            }
            for (int k = 0; k < BuiltObjects.Count; k++)
            {
                BuiltObject builtObject3 = BuiltObjects[k];
                if (builtObject3.Mission != null && (builtObject3.Mission.Type == BuiltObjectMissionType.Escort || builtObject3.Mission.Type == BuiltObjectMissionType.Patrol) && builtObject3.Mission.TargetBuiltObject != null)
                {
                    BuiltObject targetBuiltObject = builtObject3.Mission.TargetBuiltObject;
                    targetBuiltObject.CurrentEscortForceAssigned += builtObject3.FirepowerRaw;
                }
            }
            for (int l = 0; l < BuiltObjects.Count; l++)
            {
                BuiltObject builtObject4 = BuiltObjects[l];
                if (builtObject4 != null && !builtObject4.HasBeenDestroyed)
                {
                    PirateAssignShipMission(builtObject4, starDate);
                }
            }
            for (int m = 0; m < PrivateBuiltObjects.Count; m++)
            {
                BuiltObject builtObject5 = PrivateBuiltObjects[m];
                if (builtObject5 != null && !builtObject5.HasBeenDestroyed)
                {
                    PirateAssignShipMission(builtObject5, starDate);
                }
            }
        }

        public void PirateAssignShipMission(BuiltObject ship, long starDate)
        {
            if (ship == null || ship.HasBeenDestroyed || ship.Role == BuiltObjectRole.Base || ship.TopSpeed <= 0 || ship.BuiltAt != null || !ship.IsAutoControlled || (ship.Mission != null && ship.Mission.Type != 0))
            {
                return;
            }
            if (ship.RetireForNextMission)
            {
                if (ship.ShipGroup != null)
                {
                    if (ship.ShipGroup.Mission == null || ship.ShipGroup.Mission.Type == BuiltObjectMissionType.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Low)
                    {
                        ship.LeaveShipGroup();
                        if (AssignScrapMission(ship))
                        {
                            ship.RetireForNextMission = false;
                            return;
                        }
                    }
                }
                else if (AssignScrapMission(ship))
                {
                    ship.RetireForNextMission = false;
                    return;
                }
            }
            if (ship.RetrofitForNextMission)
            {
                if (ship.ShipGroup != null)
                {
                    if ((ship.ShipGroup.Mission == null || ship.ShipGroup.Mission.Type == BuiltObjectMissionType.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Low) && AssignRetrofitMission(ship))
                    {
                        ship.RetrofitForNextMission = false;
                        return;
                    }
                }
                else if (AssignRetrofitMission(ship))
                {
                    ship.RetrofitForNextMission = false;
                    return;
                }
            }
            if (ship.RepairForNextMission)
            {
                if (ship.DamagedComponentCount > 0)
                {
                    if (AssignRepairMission(ship))
                    {
                        ship.RepairForNextMission = false;
                        return;
                    }
                }
                else
                {
                    ship.RepairForNextMission = false;
                }
            }
            if (ship.RefuelForNextMission)
            {
                bool flag = true;
                if (ship.ShipGroup != null)
                {
                    flag = false;
                    double num = ship.CurrentFuel / Math.Max(1.0, ship.FuelCapacity);
                    if (num < 0.05)
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    ship.SetupRefuelling();
                    return;
                }
            }
            switch (ship.SubRole)
            {
                case BuiltObjectSubRole.ExplorationShip:
                    {
                        Point location = Point.Empty;
                        Habitat habitat10 = _Galaxy.FindNextHabitatToExplore(ship.Xpos, ship.Ypos, ship.ActualEmpire, ship, out location);
                        if (location != Point.Empty)
                        {
                            ship.AssignMission(BuiltObjectMissionType.Move, null, null, location.X, location.Y, BuiltObjectMissionPriority.Normal);
                        }
                        else if (habitat10 != null)
                        {
                            ship.AssignMission(BuiltObjectMissionType.Explore, habitat10, null, BuiltObjectMissionPriority.Normal);
                        }
                        if (habitat10 == null && location.IsEmpty && Galaxy.Rnd.Next(0, 10) == 1)
                        {
                            GalaxyLocation location2 = null;
                            Habitat habitat11 = _Galaxy.FindUnexploredRuinsOrLocations(ship.Xpos, ship.Ypos, ship.Empire, out location2);
                            if (habitat11 != null)
                            {
                                ship.AssignMission(BuiltObjectMissionType.Move, habitat11, null, BuiltObjectMissionPriority.Normal);
                            }
                            else if (location2 != null)
                            {
                                location2.ResolveLocationCenter(out var x, out var y);
                                ship.AssignMission(BuiltObjectMissionType.Move, null, null, x, y, BuiltObjectMissionPriority.Normal);
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.Escort:
                case BuiltObjectSubRole.Frigate:
                case BuiltObjectSubRole.Destroyer:
                case BuiltObjectSubRole.Cruiser:
                case BuiltObjectSubRole.CapitalShip:
                case BuiltObjectSubRole.Carrier:
                    {
                        if (ship.ShipGroup != null)
                        {
                            break;
                        }
                        if (_ColonizationTargets != null && _ColonizationTargets.Count > 0)
                        {
                            double num2 = 2250000.0;
                            for (int i = 0; i < _ColonizationTargets.Count; i++)
                            {
                                Habitat habitat = _ColonizationTargets[i].Habitat;
                                if (habitat == null || habitat.HasBeenDestroyed)
                                {
                                    continue;
                                }
                                bool flag5 = true;
                                PirateColonyControl byFacilityControl = habitat.GetPirateControl().GetByFacilityControl();
                                habitat.GetPirateControl().GetByFacilityControl();
                                if (byFacilityControl != null)
                                {
                                    flag5 = false;
                                }
                                if (flag5)
                                {
                                    double num3 = _Galaxy.CalculateDistanceSquared(ship.Xpos, ship.Ypos, habitat.Xpos, habitat.Ypos);
                                    if (num3 < num2)
                                    {
                                        return;
                                    }
                                }
                            }
                            for (int j = 0; j < Colonies.Count; j++)
                            {
                                Habitat habitat2 = Colonies[j];
                                if (habitat2 == null || habitat2.HasBeenDestroyed)
                                {
                                    continue;
                                }
                                bool flag6 = true;
                                PirateColonyControl byFacilityControl2 = habitat2.GetPirateControl().GetByFacilityControl();
                                habitat2.GetPirateControl().GetByFacilityControl();
                                if (byFacilityControl2 != null)
                                {
                                    flag6 = false;
                                }
                                if (flag6)
                                {
                                    double num4 = _Galaxy.CalculateDistanceSquared(ship.Xpos, ship.Ypos, habitat2.Xpos, habitat2.Ypos);
                                    if (num4 < num2)
                                    {
                                        return;
                                    }
                                }
                            }
                            for (int k = 0; k < _ColonizationTargets.Count; k++)
                            {
                                Habitat habitat3 = _ColonizationTargets[k].Habitat;
                                if (habitat3 == null || habitat3.HasBeenDestroyed)
                                {
                                    continue;
                                }
                                SystemVisibility systemVisibility = SystemVisibility[habitat3.SystemIndex];
                                if (systemVisibility == null || (systemVisibility.Status == SystemVisibilityStatus.Visible && (systemVisibility.Threats == null || systemVisibility.Threats.Count <= 0)))
                                {
                                    continue;
                                }
                                bool flag7 = false;
                                if (systemVisibility.Status != SystemVisibilityStatus.Visible)
                                {
                                    flag7 = true;
                                }
                                else if (systemVisibility.EmpireStrength <= 0)
                                {
                                    flag7 = true;
                                }
                                else
                                {
                                    BuiltObjectList shipsAtHabitatNotLeaving = BuiltObjects.GetShipsAtHabitatNotLeaving(habitat3, 1500.0);
                                    shipsAtHabitatNotLeaving.Remove(ship);
                                    int num5 = shipsAtHabitatNotLeaving.TotalMobileMilitaryFirepower(this);
                                    if (num5 <= 0)
                                    {
                                        flag7 = true;
                                    }
                                    else
                                    {
                                        for (int l = 0; l < systemVisibility.Threats.Count; l++)
                                        {
                                            if (systemVisibility.Threats[l].Role != BuiltObjectRole.Base && systemVisibility.Threats[l].FirepowerRaw > 0)
                                            {
                                                flag7 = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (!flag7 || !ship.WithinFuelRange(habitat3.Xpos, habitat3.Ypos, 0.1))
                                {
                                    continue;
                                }
                                long starDate2 = _Galaxy.CurrentStarDate + (long)(0.5 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
                                EmpireActivity firstByTargetAndType = PirateMissions.GetFirstByTargetAndType(habitat3, EmpireActivityType.Defend);
                                if (firstByTargetAndType == null && ship.AssaultStrength > 0)
                                {
                                    PirateColonyControl byFaction = habitat3.GetPirateControl().GetByFaction(this);
                                    if (byFaction == null || byFaction.ControlLevel < 0.5f)
                                    {
                                        if (habitat3.GetPirateControl().CheckEmpireHasRelationTypeWithAny(_Galaxy, this, PirateRelationType.Protection))
                                        {
                                            ship.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat3, null, -2000000001.0, -2000000001.0, starDate2, BuiltObjectMissionPriority.Normal, allowReprocessing: false);
                                            return;
                                        }
                                        bool flag8 = true;
                                        if (habitat3.Owner != null && habitat3.Owner != this)
                                        {
                                            PirateRelation pirateRelation = ObtainPirateRelation(habitat3.Owner);
                                            if (pirateRelation.Type == PirateRelationType.Protection)
                                            {
                                                flag8 = false;
                                            }
                                        }
                                        if (flag8)
                                        {
                                            ship.AssignMission(BuiltObjectMissionType.Raid, habitat3, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                                        }
                                        else
                                        {
                                            ship.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat3, null, -2000000001.0, -2000000001.0, starDate2, BuiltObjectMissionPriority.Normal, allowReprocessing: false);
                                        }
                                    }
                                    else
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat3, null, -2000000001.0, -2000000001.0, starDate2, BuiltObjectMissionPriority.Normal, allowReprocessing: false);
                                    }
                                }
                                else
                                {
                                    ship.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat3, null, -2000000001.0, -2000000001.0, starDate2, BuiltObjectMissionPriority.Normal, allowReprocessing: false);
                                }
                                return;
                            }
                        }
                        if (Colonies != null && Colonies.Count > 0)
                        {
                            for (int m = 0; m < Colonies.Count; m++)
                            {
                                Habitat habitat4 = Colonies[m];
                                if (habitat4 == null || habitat4.HasBeenDestroyed)
                                {
                                    continue;
                                }
                                SystemVisibility systemVisibility2 = SystemVisibility[habitat4.SystemIndex];
                                if (systemVisibility2 == null)
                                {
                                    continue;
                                }
                                bool flag9 = false;
                                if (systemVisibility2.Status != SystemVisibilityStatus.Visible)
                                {
                                    flag9 = true;
                                }
                                else if (systemVisibility2.EmpireStrength <= 0)
                                {
                                    flag9 = true;
                                }
                                else
                                {
                                    BuiltObjectList shipsAtHabitatNotLeaving2 = BuiltObjects.GetShipsAtHabitatNotLeaving(habitat4, 1500.0);
                                    shipsAtHabitatNotLeaving2.Remove(ship);
                                    int num6 = shipsAtHabitatNotLeaving2.TotalMobileMilitaryFirepower(this);
                                    if (num6 <= 0)
                                    {
                                        flag9 = true;
                                    }
                                    else if (systemVisibility2.Threats != null && systemVisibility2.Threats.Count > 0)
                                    {
                                        for (int n = 0; n < systemVisibility2.Threats.Count; n++)
                                        {
                                            if (systemVisibility2.Threats[n].Role != BuiltObjectRole.Base && systemVisibility2.Threats[n].FirepowerRaw > 0)
                                            {
                                                flag9 = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (flag9 && ship.WithinFuelRange(habitat4.Xpos, habitat4.Ypos, 0.1))
                                {
                                    long starDate3 = _Galaxy.CurrentStarDate + (long)(0.5 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
                                    ship.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat4, null, -2000000001.0, -2000000001.0, starDate3, BuiltObjectMissionPriority.Normal, allowReprocessing: false);
                                    return;
                                }
                            }
                        }
                        if (Galaxy.Rnd.Next(0, 2) == 1 && PirateEmpireBaseHabitat != null && PirateRelations != null)
                        {
                            int num7 = Galaxy.Rnd.Next(0, PirateRelations.Count);
                            for (int num8 = num7; num8 < PirateRelations.Count; num8++)
                            {
                                PirateRelation pirateRelation2 = PirateRelations[num8];
                                if (pirateRelation2 != null && pirateRelation2.Type == PirateRelationType.Protection && pirateRelation2.OtherEmpire != null && pirateRelation2.Evaluation >= 5f && !pirateRelation2.OtherEmpire.CheckEmpireHasHyperDriveTech(pirateRelation2.OtherEmpire))
                                {
                                    Habitat habitat5 = _Galaxy.FastFindNearestColony(PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos, pirateRelation2.OtherEmpire, 0);
                                    if (habitat5 != null && ship.WithinFuelRange(habitat5.Xpos, habitat5.Ypos, 0.1))
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.Patrol, habitat5, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                                        return;
                                    }
                                }
                            }
                            for (int num9 = 0; num9 < num7; num9++)
                            {
                                PirateRelation pirateRelation3 = PirateRelations[num9];
                                if (pirateRelation3 != null && pirateRelation3.Type == PirateRelationType.Protection && pirateRelation3.OtherEmpire != null && pirateRelation3.Evaluation >= 5f && !pirateRelation3.OtherEmpire.CheckEmpireHasHyperDriveTech(pirateRelation3.OtherEmpire))
                                {
                                    Habitat habitat6 = _Galaxy.FastFindNearestColony(PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos, pirateRelation3.OtherEmpire, 0);
                                    if (habitat6 != null && ship.WithinFuelRange(habitat6.Xpos, habitat6.Ypos, 0.1))
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.Patrol, habitat6, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                                        return;
                                    }
                                }
                            }
                        }
                        BuiltObject builtObject = _Galaxy.FindNearestKnownBaseForPirateAttack(this, ship.Xpos, ship.Ypos);
                        if (builtObject != null && ship.WithinFuelRange(builtObject.Xpos, builtObject.Ypos, 0.1))
                        {
                            int num10 = builtObject.CalculateOverallStrengthFactor();
                            if (CheckSystemVisible(builtObject.NearestSystemStar))
                            {
                                num10 = CalculateDefendingStrength(builtObject);
                            }
                            if (ship.CalculateOverallStrengthFactor() >= num10)
                            {
                                int maxValue = 3;
                                if (PiratePlayStyle == PiratePlayStyle.Pirate)
                                {
                                    maxValue = 5;
                                }
                                else if (PiratePlayStyle == PiratePlayStyle.Mercenary)
                                {
                                    maxValue = 4;
                                }
                                switch (Galaxy.Rnd.Next(0, maxValue))
                                {
                                    case 0:
                                    case 1:
                                        {
                                            BuiltObjectMissionType missionType = DetermineDestroyOrCaptureTarget(ship, builtObject, attackingAsGroup: false);
                                            ship.AssignMission(missionType, builtObject, null, BuiltObjectMissionPriority.Normal);
                                            break;
                                        }
                                    default:
                                        {
                                            if (builtObject.RaidCountdown <= 0)
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Raid, builtObject, null, BuiltObjectMissionPriority.Normal);
                                                break;
                                            }
                                            BuiltObjectMissionType missionType = DetermineDestroyOrCaptureTarget(ship, builtObject, attackingAsGroup: false);
                                            ship.AssignMission(missionType, builtObject, null, BuiltObjectMissionPriority.Normal);
                                            break;
                                        }
                                }
                                break;
                            }
                        }
                        BuiltObject builtObject2 = _Galaxy.IdentifyPirateBase(this);
                        Habitat habitat7 = null;
                        BuiltObject builtObject3 = null;
                        if (this != _Galaxy.PlayerEmpire && builtObject2 != null)
                        {
                            switch (Galaxy.Rnd.Next(0, 3))
                            {
                                case 0:
                                    builtObject3 = _Galaxy.FindNearestBuiltObject((int)builtObject2.Xpos, (int)builtObject2.Ypos, BuiltObjectSubRole.MiningStation, includeSecondaryEmpires: false);
                                    break;
                                case 1:
                                    builtObject3 = _Galaxy.FindNearestBuiltObject((int)builtObject2.Xpos, (int)builtObject2.Ypos, BuiltObjectSubRole.GasMiningStation, includeSecondaryEmpires: false);
                                    break;
                                case 2:
                                    switch (Galaxy.Rnd.Next(0, 5))
                                    {
                                        case 0:
                                            builtObject3 = _Galaxy.FindNearestBuiltObject((int)builtObject2.Xpos, (int)builtObject2.Ypos, BuiltObjectSubRole.WeaponsResearchStation, includeSecondaryEmpires: false);
                                            break;
                                        case 1:
                                            builtObject3 = _Galaxy.FindNearestBuiltObject((int)builtObject2.Xpos, (int)builtObject2.Ypos, BuiltObjectSubRole.EnergyResearchStation, includeSecondaryEmpires: false);
                                            break;
                                        case 2:
                                            builtObject3 = _Galaxy.FindNearestBuiltObject((int)builtObject2.Xpos, (int)builtObject2.Ypos, BuiltObjectSubRole.HighTechResearchStation, includeSecondaryEmpires: false);
                                            break;
                                        case 3:
                                            builtObject3 = _Galaxy.FindNearestBuiltObject((int)builtObject2.Xpos, (int)builtObject2.Ypos, BuiltObjectSubRole.ResortBase, includeSecondaryEmpires: false);
                                            break;
                                        case 4:
                                            builtObject3 = _Galaxy.FindNearestBuiltObject((int)builtObject2.Xpos, (int)builtObject2.Ypos, BuiltObjectSubRole.MonitoringStation, includeSecondaryEmpires: false);
                                            break;
                                    }
                                    break;
                            }
                        }
                        if (builtObject3 != null && builtObject3.NearestSystemStar != null)
                        {
                            double num11 = _Galaxy.CalculateDistance(builtObject3.Xpos, builtObject3.Ypos, ship.Xpos, ship.Ypos);
                            habitat7 = ((!(num11 < (double)Galaxy.SectorSize)) ? _Galaxy.FastFindNearestUncolonizedOwnedSystem(ship.Xpos, ship.Ypos) : builtObject3.NearestSystemStar);
                        }
                        else
                        {
                            habitat7 = _Galaxy.FastFindNearestUncolonizedOwnedSystem(ship.Xpos, ship.Ypos);
                        }
                        if (habitat7 != null)
                        {
                            SystemVisibilityStatus systemVisibilityStatus = CheckSystemVisibilityStatus(habitat7.SystemIndex);
                            if (systemVisibilityStatus == SystemVisibilityStatus.Explored)
                            {
                                SystemInfo systemInfo = _Galaxy.Systems[habitat7.SystemIndex];
                                if (systemInfo != null && systemInfo.Habitats != null && systemInfo.Habitats.Count > 0)
                                {
                                    int index = Galaxy.Rnd.Next(0, systemInfo.Habitats.Count);
                                    Habitat habitat8 = systemInfo.Habitats[index];
                                    if (habitat8 != null && ship.WithinFuelRange(habitat8.Xpos, habitat8.Ypos, 0.1))
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.Move, habitat8, null, BuiltObjectMissionPriority.Normal);
                                        break;
                                    }
                                }
                                else if (ship.WithinFuelRange(habitat7.Xpos, habitat7.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.Move, habitat7, null, BuiltObjectMissionPriority.Normal);
                                    break;
                                }
                            }
                            else
                            {
                                habitat7 = _Galaxy.FastFindNearestUnexploredSystem(ship.Xpos, ship.Ypos, this);
                                if (habitat7 != null && ship.WithinFuelRange(habitat7.Xpos, habitat7.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.Move, habitat7, null, BuiltObjectMissionPriority.Normal);
                                    break;
                                }
                            }
                        }
                        else
                        {
                            habitat7 = _Galaxy.FastFindNearestUnexploredSystem(ship.Xpos, ship.Ypos, this);
                            if (habitat7 != null && ship.WithinFuelRange(habitat7.Xpos, habitat7.Ypos, 0.1))
                            {
                                ship.AssignMission(BuiltObjectMissionType.Move, habitat7, null, BuiltObjectMissionPriority.Normal);
                                break;
                            }
                        }
                        if (builtObject2 != null && builtObject2.CurrentEscortForceAssigned <= 0 && ship.WithinFuelRange(builtObject2.Xpos, builtObject2.Ypos, 0.1))
                        {
                            ship.AssignMission(BuiltObjectMissionType.Patrol, builtObject2, null, BuiltObjectMissionPriority.Normal);
                            builtObject2.CurrentEscortForceAssigned += ship.FirepowerRaw;
                        }
                        break;
                    }
                case BuiltObjectSubRole.SmallFreighter:
                case BuiltObjectSubRole.MediumFreighter:
                case BuiltObjectSubRole.LargeFreighter:
                    {
                        if (Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            bool flag10 = false;
                            int num12 = Galaxy.Rnd.Next(0, MiningStations.Count);
                            ResourceList empireDeficientResources = IdentifyDeficientEmpireResources();
                            for (int num13 = num12; num13 < MiningStations.Count; num13++)
                            {
                                if (CheckMiningStationForResourceClearance(ship, MiningStations[num13], empireDeficientResources))
                                {
                                    flag10 = true;
                                    break;
                                }
                            }
                            if (!flag10)
                            {
                                for (int num14 = 0; num14 < num12; num14++)
                                {
                                    if (CheckMiningStationForResourceClearance(ship, MiningStations[num14], empireDeficientResources))
                                    {
                                        flag10 = true;
                                        break;
                                    }
                                }
                            }
                        }
                        BuiltObject builtObject4 = _Galaxy.FastFindNearestSpacePort((int)ship.Xpos, (int)ship.Ypos, ship.ActualEmpire);
                        if (builtObject4 != null)
                        {
                            double num15 = _Galaxy.CalculateDistance(ship.Xpos, ship.Ypos, builtObject4.Xpos, builtObject4.Ypos);
                            if (num15 > (double)Galaxy.SectorSize * 2.5)
                            {
                                ship.AssignMission(BuiltObjectMissionType.Move, builtObject4, null, BuiltObjectMissionPriority.Normal);
                                break;
                            }
                        }
                        Habitat habitat9 = _Galaxy.FastFindNearestColony((int)ship.Xpos, (int)ship.Ypos, ship.ActualEmpire, 0);
                        if (habitat9 != null)
                        {
                            double num16 = _Galaxy.CalculateDistance(ship.Xpos, ship.Ypos, habitat9.Xpos, habitat9.Ypos);
                            if (num16 > (double)Galaxy.SectorSize * 2.5)
                            {
                                ship.AssignMission(BuiltObjectMissionType.Move, habitat9, null, BuiltObjectMissionPriority.Normal);
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.ConstructionShip:
                    {
                        double stateMoney = _StateMoney;
                        stateMoney -= CalculateCashReservesForNewPirateFacilities();
                        int num17 = BuiltObjects.CountSpaceports();
                        int num18 = 1 + BuiltObjects.Count / 20;
                        if (num17 < num18)
                        {
                            Design design = _LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.SmallSpacePort, this);
                            if (design != null)
                            {
                                double num19 = design.CalculateCurrentPurchasePrice(_Galaxy);
                                if (num19 < stateMoney)
                                {
                                    Habitat habitat12 = _Galaxy.IdentifyPirateNewHomeLocation(this);
                                    if (habitat12 != null)
                                    {
                                        _Galaxy.SelectRelativeHabitatSurfacePoint(habitat12, out var x2, out var y2);
                                        ship.AssignMission(BuiltObjectMissionType.Build, habitat12, null, design, x2, y2, BuiltObjectMissionPriority.Normal);
                                        if (num17 == 0)
                                        {
                                            PirateEmpireBaseHabitat = habitat12;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        GalaxyLocation galaxyLocation = CheckWhetherAtLocation(ship.Xpos, ship.Ypos);
                        if ((galaxyLocation != null && galaxyLocation.Type == GalaxyLocationType.DebrisField) || (Galaxy.Rnd.Next(0, 3) == 1 && ConstructionShips != null && ConstructionShips.Count > 1))
                        {
                            if (galaxyLocation == null)
                            {
                                for (int num20 = 0; num20 < KnownGalaxyLocations.Count; num20++)
                                {
                                    if (KnownGalaxyLocations[num20].Type == GalaxyLocationType.DebrisField)
                                    {
                                        galaxyLocation = KnownGalaxyLocations[num20];
                                        break;
                                    }
                                }
                            }
                            if (galaxyLocation != null)
                            {
                                BuiltObject builtObject5 = SelectBestSalvageableShip(galaxyLocation);
                                if (builtObject5 != null && ship.WithinFuelRange(builtObject5.Xpos, builtObject5.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.Build, null, builtObject5, builtObject5.Xpos, builtObject5.Ypos, BuiltObjectMissionPriority.High);
                                    break;
                                }
                            }
                        }
                        GalaxyLocationList galaxyLocationList = KnownGalaxyLocations.FindLocations(GalaxyLocationType.PlanetDestroyer);
                        if (galaxyLocationList.Count > 0)
                        {
                            for (int num21 = 0; num21 < galaxyLocationList.Count; num21++)
                            {
                                BuiltObject relatedBuiltObject = galaxyLocationList[num21].RelatedBuiltObject;
                                if (relatedBuiltObject == null || relatedBuiltObject.UnbuiltComponentCount <= 0 || relatedBuiltObject.BuiltAt != null || relatedBuiltObject.Empire != null || relatedBuiltObject.HasBeenDestroyed)
                                {
                                    continue;
                                }
                                bool flag11 = false;
                                for (int num22 = 0; num22 < ConstructionShips.Count; num22++)
                                {
                                    BuiltObject builtObject6 = ConstructionShips[num22];
                                    if (builtObject6.Mission != null && (builtObject6.Mission.Type == BuiltObjectMissionType.Build || builtObject6.Mission.Type == BuiltObjectMissionType.BuildRepair || builtObject6.Mission.Type == BuiltObjectMissionType.Repair) && builtObject6.Mission.SecondaryTargetBuiltObject == relatedBuiltObject)
                                    {
                                        flag11 = true;
                                        break;
                                    }
                                }
                                if (!flag11 && Galaxy.Rnd.Next(0, 3) == 1 && ConstructionShips != null && ConstructionShips.Count > 1 && ship.WithinFuelRange(relatedBuiltObject.Xpos, relatedBuiltObject.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.Build, null, relatedBuiltObject, relatedBuiltObject.Xpos, relatedBuiltObject.Ypos, BuiltObjectMissionPriority.High);
                                    return;
                                }
                            }
                        }
                        BuiltObjectList builtObjectList = new BuiltObjectList();
                        builtObjectList.AddRange(BuiltObjects);
                        builtObjectList.AddRange(PrivateBuiltObjects);
                        if (Galaxy.Rnd.Next(0, 3) == 1)
                        {
                            int num23 = Galaxy.Rnd.Next(0, builtObjectList.Count);
                            for (int num24 = num23; num24 < builtObjectList.Count; num24++)
                            {
                                BuiltObject builtObject7 = builtObjectList[num24];
                                if (builtObject7 != null && builtObject7.ActualEmpire == this && DetermineWhetherShouldRepair(ship, builtObject7) && ship.WithinFuelRange(builtObject7.Xpos, builtObject7.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.BuildRepair, null, builtObject7, BuiltObjectMissionPriority.Normal);
                                    return;
                                }
                            }
                            for (int num25 = 0; num25 < num23; num25++)
                            {
                                BuiltObject builtObject8 = builtObjectList[num25];
                                if (builtObject8 != null && builtObject8.ActualEmpire == this && DetermineWhetherShouldRepair(ship, builtObject8) && ship.WithinFuelRange(builtObject8.Xpos, builtObject8.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.BuildRepair, null, builtObject8, BuiltObjectMissionPriority.Normal);
                                    return;
                                }
                            }
                        }
                        HabitatList habitatList = DetermineHabitatsBeingMinedIncludingBuildingMiningStations(includeMiningShips: false);
                        if (_ResourceTargets != null && _ResourceTargets.Count > 0)
                        {
                            double num26 = CalculateAccurateAnnualCashflow();
                            if (num26 > 0.0 && StateMoney > 0.0 && BuildStrategicResourceSupply(ship, habitatList))
                            {
                                break;
                            }
                        }
                        if (_EmpireResourceTargets != null && _EmpireResourceTargets.Count > 0)
                        {
                            double num27 = CalculateAccurateAnnualCashflow();
                            int num28 = 0;
                            Design design2 = null;
                            int iterationCount = 0;
                            while (Galaxy.ConditionCheckLimit(design2 == null && num28 < _EmpireResourceTargets.Count, 1500, ref iterationCount))
                            {
                                HabitatPrioritization habitatPrioritization = _EmpireResourceTargets[num28];
                                if (habitatPrioritization != null)
                                {
                                    Habitat habitat13 = habitatPrioritization.Habitat;
                                    if (habitat13 != null && !habitatList.Contains(habitat13) && (habitat13.Empire == null || habitat13.Empire == _Galaxy.IndependentEmpire))
                                    {
                                        if (habitat13.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            design2 = Designs.FindNewestCanBuild(BuiltObjectSubRole.GasMiningStation);
                                        }
                                        if (habitat13.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            design2 = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                                        }
                                        if (design2 == null && habitat13.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            design2 = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                                        }
                                        if (design2 != null)
                                        {
                                            double num29 = design2.CalculateMaintenanceCosts(_Galaxy, this);
                                            double num30 = design2.CalculateCurrentPurchasePrice(_Galaxy);
                                            if (StateMoney > num30 && num27 > num29 && habitatPrioritization.Priority > Galaxy.MiningStationResourceThreshhold && !CheckNearPirateBase(habitatPrioritization.Habitat, habitatPrioritization.Habitat.Xpos, habitatPrioritization.Habitat.Ypos, this))
                                            {
                                                BuiltObject builtObject9 = _Galaxy.DetermineMiningStationAtHabitat(habitat13);
                                                if (builtObject9 == null)
                                                {
                                                    _Galaxy.SelectRelativeHabitatSurfacePoint(habitat13, out var x3, out var y3);
                                                    BuiltObject builtObject10 = _Galaxy.FindNearestBuiltObject((int)(habitat13.Xpos + x3), (int)(habitat13.Ypos + y3), BuiltObjectRole.Base);
                                                    double num31 = double.MaxValue;
                                                    if (builtObject10 != null)
                                                    {
                                                        num31 = _Galaxy.CalculateDistance(habitat13.Xpos + x3, habitat13.Ypos + y3, builtObject10.Xpos, builtObject10.Ypos);
                                                    }
                                                    int num32 = 0;
                                                    while (num31 < (double)Galaxy.MinimumDistanceBetweenBases)
                                                    {
                                                        _Galaxy.SelectRelativeHabitatSurfacePoint(habitat13, out x3, out y3);
                                                        builtObject10 = _Galaxy.FindNearestBuiltObject((int)(habitat13.Xpos + x3), (int)(habitat13.Ypos + y3), BuiltObjectRole.Base);
                                                        num31 = _Galaxy.CalculateDistance(habitat13.Xpos + x3, habitat13.Ypos + y3, builtObject10.Xpos, builtObject10.Ypos);
                                                        num32++;
                                                        if (num32 > 5)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    ship.AssignMission(BuiltObjectMissionType.Build, habitat13, null, design2, x3, y3, BuiltObjectMissionPriority.Normal);
                                                    habitatList.Add(habitat13);
                                                    _EmpireResourceTargets.RemoveAt(num28);
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                                num28++;
                                design2 = null;
                            }
                        }
                        if (_ResortBaseBuildLocations == null || _ResortBaseBuildLocations.Count <= 0 || !Policy.EngageInTourism || Galaxy.Rnd.Next(0, 2) != 1)
                        {
                            break;
                        }
                        int num33 = Math.Min(20, 1 + Colonies.Count / 6);
                        num33 = (int)((double)num33 * Policy.TourismPriority);
                        if (ResortBases.Count >= num33)
                        {
                            break;
                        }
                        Design design3 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.ResortBase);
                        if (design3 != null)
                        {
                            double num34 = CalculateSupportCost(design3);
                            double num35 = design3.CalculateCurrentPurchasePrice(_Galaxy);
                            if (num35 <= stateMoney && num34 <= CalculateSpareAnnualRevenueComplete() && !AssignBuildResortBaseMissionToBuiltObject(ship, design3))
                            {
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.GasMiningShip:
                case BuiltObjectSubRole.MiningShip:
                    {
                        bool flag12 = CheckShipCanSurviveStorms(ship);
                        List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
                        list.Add(BuiltObjectSubRole.MiningShip);
                        list.Add(BuiltObjectSubRole.GasMiningShip);
                        List<BuiltObjectSubRole> subRoles = list;
                        if (_EmpireResourceTargets != null && _EmpireResourceTargets.Count > 0)
                        {
                            bool flag13 = false;
                            int num36 = 0;
                            for (int iterationCount2 = 0; Galaxy.ConditionCheckLimit(!flag13 && num36 < _EmpireResourceTargets.Count, 1500, ref iterationCount2); num36++)
                            {
                                _ = _EmpireResourceTargets[num36];
                                if (!ship.IsResourceExtractor)
                                {
                                    continue;
                                }
                                Habitat habitat14 = _EmpireResourceTargets[num36].Habitat;
                                if (!flag12 && _Galaxy.CheckInStorm(habitat14.Xpos, habitat14.Ypos))
                                {
                                    continue;
                                }
                                switch (habitat14.Type)
                                {
                                    case HabitatType.BarrenRock:
                                        if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                    case HabitatType.GasGiant:
                                    case HabitatType.FrozenGasGiant:
                                    case HabitatType.Hydrogen:
                                    case HabitatType.Helium:
                                    case HabitatType.Argon:
                                    case HabitatType.Ammonia:
                                    case HabitatType.CarbonDioxide:
                                    case HabitatType.Oxygen:
                                    case HabitatType.NitrogenOxygen:
                                    case HabitatType.Chlorine:
                                        if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                    case HabitatType.Volcanic:
                                        if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                    case HabitatType.Continental:
                                        if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                    case HabitatType.Ice:
                                        if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                    case HabitatType.MarshySwamp:
                                        if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                    case HabitatType.Ocean:
                                        if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                    case HabitatType.Desert:
                                        if (ship.ExtractionMine > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag13 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat14.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag13 = true;
                                        }
                                        break;
                                }
                                if (!flag13)
                                {
                                    continue;
                                }
                                if (ship.WithinFuelRangeAndRefuel(habitat14.Xpos, habitat14.Ypos, 0.0))
                                {
                                    int num37 = PrivateBuiltObjects.CountBuiltObjectsWithTargetHabitat(habitat14, subRoles);
                                    if (num37 < 3)
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.ExtractResources, habitat14, null, BuiltObjectMissionPriority.Normal);
                                        _EmpireResourceTargets.RemoveAt(num36);
                                    }
                                }
                                else
                                {
                                    flag13 = false;
                                }
                            }
                        }
                        if ((ship.Mission != null && ship.Mission.Type != 0) || _ResourceTargets == null || _ResourceTargets.Count <= 0)
                        {
                            break;
                        }
                        bool flag14 = false;
                        int num38 = 0;
                        for (int iterationCount3 = 0; Galaxy.ConditionCheckLimit(!flag14 && num38 < _ResourceTargets.Count, 1000, ref iterationCount3); num38++)
                        {
                            HabitatPrioritization habitatPrioritization2 = _ResourceTargets[num38];
                            if (!ship.IsResourceExtractor || CheckNearPirateBase(habitatPrioritization2.Habitat, habitatPrioritization2.Habitat.Xpos, habitatPrioritization2.Habitat.Ypos) || (!flag12 && _Galaxy.CheckInStorm(habitatPrioritization2.Habitat.Xpos, habitatPrioritization2.Habitat.Ypos)))
                            {
                                continue;
                            }
                            Habitat habitat15 = _ResourceTargets[num38].Habitat;
                            if (habitat15 == null || _Galaxy.CheckAlreadyHaveMiningStationAtHabitat(habitat15, this))
                            {
                                continue;
                            }
                            switch (habitat15.Type)
                            {
                                case HabitatType.BarrenRock:
                                    if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                                case HabitatType.GasGiant:
                                case HabitatType.FrozenGasGiant:
                                case HabitatType.Hydrogen:
                                case HabitatType.Helium:
                                case HabitatType.Argon:
                                case HabitatType.Ammonia:
                                case HabitatType.CarbonDioxide:
                                case HabitatType.Oxygen:
                                case HabitatType.NitrogenOxygen:
                                case HabitatType.Chlorine:
                                    if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                                case HabitatType.Volcanic:
                                    if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                                case HabitatType.Continental:
                                    if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                                case HabitatType.Ice:
                                    if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                                case HabitatType.MarshySwamp:
                                    if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                                case HabitatType.Ocean:
                                    if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                                case HabitatType.Desert:
                                    if (ship.ExtractionMine > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag14 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat15.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag14 = true;
                                    }
                                    break;
                            }
                            if (!flag14)
                            {
                                continue;
                            }
                            if (ship.WithinFuelRangeAndRefuel(habitat15.Xpos, habitat15.Ypos, 0.0))
                            {
                                int num39 = PrivateBuiltObjects.CountBuiltObjectsWithTargetHabitat(habitat15, subRoles);
                                if (num39 < 3)
                                {
                                    ship.AssignMission(BuiltObjectMissionType.ExtractResources, habitat15, null, BuiltObjectMissionPriority.Normal);
                                }
                            }
                            else
                            {
                                flag14 = false;
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.PassengerShip:
                    {
                        bool flag2 = false;
                        bool flag3 = false;
                        if (_MigrationDestinations != null && _MigrationDestinations.Count > 0 && _MigrationSources.Count > 0)
                        {
                            flag2 = true;
                        }
                        if (_TourismDestinations != null && _TourismSources != null && _TourismDestinations.Count > 0 && _TourismSources.Count > 0 && Policy.EngageInTourism)
                        {
                            flag3 = true;
                        }
                        if ((!flag2 || (flag3 && Galaxy.Rnd.Next(0, 2) != 1) || !AssignMigrationMissionToBuiltObject(ship)) && flag3)
                        {
                            bool flag4 = false;
                            if ((!flag2 || Galaxy.Rnd.Next(0, 3) > 0) && AssignTourismMissionToBuiltObject(ship))
                            {
                                flag4 = true;
                            }
                            else if (!flag4 && flag2)
                            {
                                AssignMigrationMissionToBuiltObject(ship);
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.TroopTransport:
                case BuiltObjectSubRole.ResupplyShip:
                case BuiltObjectSubRole.ColonyShip:
                    break;
            }
        }

        public BuiltObjectMissionType DetermineDestroyOrCaptureTarget(BuiltObject attacker, BuiltObject target, bool attackingAsGroup)
        {
            if (attacker != null)
            {
                return DetermineDestroyOrCaptureTarget(attacker.CalculateAvailableAssaultPodAttackStrength(_Galaxy.CurrentDateTime), attacker.CalculateOverallStrengthFactor(), attacker.Empire, target, attackingAsGroup, attacker);
            }
            return BuiltObjectMissionType.Attack;
        }

        public BuiltObjectMissionType DetermineDestroyOrCaptureTarget(ShipGroup attackingFleet, BuiltObject target)
        {
            if (attackingFleet != null)
            {
                int assaultPodCount = 0;
                int assaultPodsAvailable = 0;
                int assaultStrength = attackingFleet.CalculateAssaultPodAttackValues(_Galaxy.CurrentDateTime, out assaultPodCount, out assaultPodsAvailable);
                return DetermineDestroyOrCaptureTarget(assaultStrength, attackingFleet.TotalOverallStrengthFactor, attackingFleet.Empire, target, attackingAsGroup: true, attackingFleet.LeadShip);
            }
            return BuiltObjectMissionType.Attack;
        }

        public BuiltObjectMissionType DetermineDestroyOrCaptureTarget(int assaultStrength, int attackingOverallStrength, Empire attackingEmpire, BuiltObject target, bool attackingAsGroup, BuiltObject builtObjectToExclude)
        {
            if (target != null && attackingEmpire != null)
            {
                if (assaultStrength > 0)
                {
                    bool flag = false;
                    int fixedDefenseValue = 0;
                    int num = target.CalculateBoardingDefenseValue(_Galaxy.CurrentDateTime, out fixedDefenseValue);
                    if (num <= assaultStrength || attackingAsGroup)
                    {
                        flag = true;
                    }
                    if (target.Role == BuiltObjectRole.Base)
                    {
                        int num2 = _Galaxy.CheckSystemOwnershipId(target.NearestSystemStar);
                        if ((target.SubRole == BuiltObjectSubRole.SmallSpacePort || target.SubRole == BuiltObjectSubRole.MediumSpacePort || target.SubRole == BuiltObjectSubRole.LargeSpacePort || target.SubRole == BuiltObjectSubRole.DefensiveBase || target.SubRole == BuiltObjectSubRole.EnergyResearchStation || target.SubRole == BuiltObjectSubRole.HighTechResearchStation || target.SubRole == BuiltObjectSubRole.WeaponsResearchStation) && target.ParentHabitat != null && target.ParentHabitat.Empire != null)
                        {
                            return BuiltObjectMissionType.Attack;
                        }
                        if (CheckOurEmpireBoarding(target, builtObjectToExclude))
                        {
                            return BuiltObjectMissionType.Capture;
                        }
                        if (this != _Galaxy.PlayerEmpire && target.UnbuiltComponentCount > 0)
                        {
                            double num3 = (double)target.UnbuiltComponentCount / (double)target.Components.Count;
                            if (num3 > 0.25)
                            {
                                return BuiltObjectMissionType.Attack;
                            }
                        }
                        switch (Policy.CaptureTargetConditionBase)
                        {
                            case 0:
                                return BuiltObjectMissionType.Attack;
                            case 1:
                                if (flag && num2 == attackingEmpire.EmpireId)
                                {
                                    return BuiltObjectMissionType.Capture;
                                }
                                break;
                            case 2:
                                if (flag && (num2 == attackingEmpire.EmpireId || num2 < 0))
                                {
                                    return BuiltObjectMissionType.Capture;
                                }
                                break;
                            case 3:
                                if (flag)
                                {
                                    return BuiltObjectMissionType.Capture;
                                }
                                break;
                            case 4:
                                return BuiltObjectMissionType.Capture;
                        }
                    }
                    else
                    {
                        if (CheckOurEmpireBoarding(target, builtObjectToExclude))
                        {
                            return BuiltObjectMissionType.Capture;
                        }
                        if (builtObjectToExclude != null && builtObjectToExclude.Role == BuiltObjectRole.Base)
                        {
                            double num4 = _Galaxy.CalculateDistanceSquared(builtObjectToExclude.Xpos, builtObjectToExclude.Ypos, target.Xpos, target.Ypos);
                            if (num4 > (double)builtObjectToExclude.AssaultRange * (double)builtObjectToExclude.AssaultRange)
                            {
                                return BuiltObjectMissionType.Attack;
                            }
                        }
                        if (target.WarpSpeed <= 0 && Policy.CaptureTargetConditionShip < 2)
                        {
                            return BuiltObjectMissionType.Attack;
                        }
                        switch (Policy.CaptureTargetConditionShip)
                        {
                            case 0:
                                return BuiltObjectMissionType.Attack;
                            case 1:
                                if (flag && (target.Size > MaximumConstructionSize(target.SubRole) || Galaxy.ResolveTechBonusFactor(this, _Galaxy, target) > 1.0))
                                {
                                    return BuiltObjectMissionType.Capture;
                                }
                                break;
                            case 2:
                                if (flag)
                                {
                                    return BuiltObjectMissionType.Capture;
                                }
                                break;
                            case 3:
                                return BuiltObjectMissionType.Capture;
                        }
                    }
                }
                else if (CheckOurEmpireBoarding(target, builtObjectToExclude))
                {
                    return BuiltObjectMissionType.Capture;
                }
            }
            return BuiltObjectMissionType.Attack;
        }

        public bool CheckOurEmpireOverwhelmingBoarding(BuiltObject target)
        {
            if (target != null && target.AssaultAttackValue > 0 && target.AssaultAttackEmpireId == EmpireId)
            {
                float num = (float)target.AssaultAttackValue / (float)target.AssaultDefenseValue;
                if (num > 2f)
                {
                    return true;
                }
            }
            return false;
        }

        public bool CheckOurEmpireBoarding(BuiltObject target)
        {
            return CheckOurEmpireBoarding(target, null);
        }

        public bool CheckOurEmpireBoarding(BuiltObject target, BuiltObject builtObjectToExclude)
        {
            if (target != null && target.AssaultAttackValue > 0 && target.AssaultAttackEmpireId == EmpireId)
            {
                return true;
            }
            if (target.Threats != null && target.Threats.Length > 0)
            {
                for (int i = 0; i < target.Threats.Length; i++)
                {
                    StellarObject stellarObject = target.Threats[i];
                    if (stellarObject == null || !(stellarObject is BuiltObject))
                    {
                        continue;
                    }
                    BuiltObject builtObject = (BuiltObject)stellarObject;
                    if (builtObject == null || builtObject.HasBeenDestroyed || builtObject.Empire != this)
                    {
                        continue;
                    }
                    if (builtObjectToExclude == null || builtObject != builtObjectToExclude)
                    {
                        BuiltObjectMission mission = builtObject.Mission;
                        if (mission != null && mission.Type == BuiltObjectMissionType.Capture && mission.TargetBuiltObject == target)
                        {
                            return true;
                        }
                    }
                    if (builtObject.AssaultStrength <= 0 || builtObject.AssaultRange <= 0 || builtObject.Weapons == null)
                    {
                        continue;
                    }
                    for (int j = 0; j < builtObject.Weapons.Count; j++)
                    {
                        Weapon weapon = builtObject.Weapons[j];
                        if (weapon != null && weapon.Component != null && weapon.Component.Type == ComponentType.AssaultPod && weapon.Target != null && weapon.Target == target)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private HabitatList PirateDetermineOwnedColonies()
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && !habitat.HasBeenDestroyed && habitat.Empire == this)
                {
                    habitatList.Add(habitat);
                }
            }
            return habitatList;
        }

        private void PirateDoConstruction()
        {
            int refusalCount = 0;
            List<CargoList> builtObjectResourcesToOrder = new List<CargoList>();
            BuiltObjectList builtObjectConstructionYards = new BuiltObjectList();
            List<CargoList> colonyResourcesToOrder = new List<CargoList>();
            HabitatList colonyConstructionYards = new HabitatList();
            CargoList resourcesToOrder = null;
            double purchaseCost = 0.0;
            double stateMoney = _StateMoney;
            stateMoney -= CalculateCashReservesForNewPirateFacilities();
            stateMoney -= CalculateCashReservesForNewMiningStation();
            double num = CalculatePirateIncome();
            double num2 = CalculatePirateExpenses(includeShipsUnderConstruction: true);
            double num3 = 2.0;
            double num4 = 0.0;
            if (stateMoney > 0.0)
            {
                num4 = stateMoney / num3;
            }
            double num5 = num + num4 - num2;
            bool flag = false;
            if (DominantRace != null && !DominantRace.Expanding)
            {
                flag = false;
            }
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && !habitat.HasBeenDestroyed && habitat.Empire == this)
                {
                    habitatList.Add(habitat);
                    if (habitat.Population != null && habitat.Population.TotalAmount > Galaxy.BuildColonyShipPopulationRequirement && habitat.ConstructionQueue != null && habitat.ConstructionQueue.ConstructionWaitQueue != null && habitat.ConstructionQueue.ConstructionWaitQueue.Count <= 0)
                    {
                        habitatList2.Add(habitat);
                    }
                }
            }
            if (habitatList2.Count <= 0)
            {
                flag = false;
            }
            if (flag && _ControlColonization != 0)
            {
                HabitatList habitatList3 = DetermineHabitatsBeingColonized();
                _ColonizationTargets.Sort();
                _ColonizationTargets.Reverse();
                List<HabitatType> list = ColonizableHabitatTypesForEmpire(this);
                for (int j = 0; j < _ColonizationTargets.Count; j++)
                {
                    HabitatPrioritization habitatPrioritization = _ColonizationTargets[j];
                    if (!CheckShouldAttemptColonization(habitatPrioritization.Habitat) || habitatPrioritization.AssignedShip != null || habitatList3.Contains(habitatPrioritization.Habitat) || (habitatPrioritization.Habitat.Empire != null && habitatPrioritization.Habitat.Empire != _Galaxy.IndependentEmpire))
                    {
                        continue;
                    }
                    bool flag2 = false;
                    for (int k = 0; k < BuiltObjects.Count; k++)
                    {
                        BuiltObject builtObject = BuiltObjects[k];
                        if (builtObject.Role == BuiltObjectRole.Colony && (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined))
                        {
                            int newPopulationAmount = 0;
                            if (CanBuiltObjectColonizeHabitat(builtObject, habitatPrioritization.Habitat, out newPopulationAmount) && habitatPrioritization.Priority >= Galaxy.HabitatColonizationThreshhold && CheckTaskAuthorized(_ControlColonization, ref refusalCount, GenerateAutomationMessageColonization(habitatPrioritization.Habitat, builtObject, null), habitatPrioritization.Habitat, AdvisorMessageType.Colonization, builtObject, null))
                            {
                                habitatPrioritization.AssignedShip = builtObject;
                                builtObject.AssignMission(BuiltObjectMissionType.Colonize, habitatPrioritization.Habitat, null, BuiltObjectMissionPriority.Normal);
                                flag2 = true;
                                break;
                            }
                        }
                    }
                    if (flag2)
                    {
                        continue;
                    }
                    Design design = _Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
                    if (design == null)
                    {
                        design = _Designs.FindNewest(BuiltObjectSubRole.ColonyShip);
                    }
                    if (design == null)
                    {
                        continue;
                    }
                    bool flag3 = CanDesignColonizeHabitat(design, habitatPrioritization.Habitat);
                    if ((!flag3 && !list.Contains(habitatPrioritization.Habitat.Type)) || habitatPrioritization.Priority < Galaxy.HabitatColonizationThreshhold)
                    {
                        continue;
                    }
                    double num6 = design.CalculateCurrentPurchasePrice(_Galaxy);
                    if (!(purchaseCost + num6 <= StateMoney))
                    {
                        continue;
                    }
                    design.BuildCount++;
                    BuiltObject builtObject2 = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design), _Galaxy);
                    builtObject2.PurchasePrice = num6;
                    Habitat habitat2 = null;
                    double shortestWaitQueueTime;
                    if (flag3)
                    {
                        habitat2 = habitatList2.FindShortestConstructionWaitQueue(builtObject2, out shortestWaitQueueTime);
                    }
                    else
                    {
                        HabitatList habitatList4 = new HabitatList();
                        foreach (Habitat colony in Colonies)
                        {
                            Race dominantRace = colony.Population.DominantRace;
                            if (dominantRace != null && dominantRace.NativeHabitatType == habitatPrioritization.Habitat.Type && colony.Empire == this && colony.Population != null && colony.Population.TotalAmount >= Galaxy.BuildColonyShipPopulationRequirement)
                            {
                                habitatList4.Add(colony);
                            }
                        }
                        habitat2 = habitatList4.FindShortestConstructionWaitQueue(builtObject2, out shortestWaitQueueTime);
                    }
                    double num7 = shortestWaitQueueTime / (double)Galaxy.RealSecondsInGalacticYear;
                    if (habitat2 != null && num7 < Galaxy.MaximumConstructionQueueWaitTimeYears)
                    {
                        if (CheckTaskAuthorized(_ControlColonization, ref refusalCount, GenerateAutomationMessageColonization(habitatPrioritization.Habitat, null, habitat2), habitatPrioritization.Habitat, AdvisorMessageType.Colonization, habitat2, null))
                        {
                            if (habitat2.ConstructionQueue != null && habitat2.ConstructionQueue.AddBuiltObjectToConstruct(builtObject2))
                            {
                                builtObject2.Name = _Galaxy.GenerateBuiltObjectName(design, habitat2);
                                habitatPrioritization.AssignedShip = builtObject2;
                                AddBuiltObjectToGalaxy(builtObject2, habitat2, offsetLocationFromParent: false, isStateOwned: true);
                                purchaseCost += num6;
                                builtObject2.AssignMission(BuiltObjectMissionType.Colonize, habitatPrioritization.Habitat, null, BuiltObjectMissionPriority.Normal);
                                builtObject2.BuiltAt = habitat2;
                                ProcureConstructionComponents(builtObject2, habitat2, out resourcesToOrder);
                                colonyResourcesToOrder.Add(resourcesToOrder);
                                colonyConstructionYards.Add(habitat2);
                            }
                            else
                            {
                                design.BuildCount--;
                            }
                        }
                        else
                        {
                            design.BuildCount--;
                        }
                    }
                    else
                    {
                        design.BuildCount--;
                    }
                }
            }
            double num8 = 0.0;
            if (_ControlStateConstruction != 0 && habitatList.Count > 0)
            {
                int num9 = 0;
                for (int l = 0; l < BuiltObjects.Count; l++)
                {
                    BuiltObject builtObject3 = BuiltObjects[l];
                    if (builtObject3.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject3.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject3.SubRole == BuiltObjectSubRole.LargeSpacePort)
                    {
                        num9++;
                    }
                }
                int num10 = 1 + (int)((double)Colonies.Count / 3.0);
                int newSpacePortAmount = num10 - num9;
                HabitatList habitatList5 = DetermineNewSpacePortLocations(habitatList, newSpacePortAmount, excludeColoniesWithEnemiesPresent: true);
                long num11 = (long)Policy.ConstructionSpaceportLargeColonyPopulationThreshold * 1000000L;
                long num12 = (long)Policy.ConstructionSpaceportMediumColonyPopulationThreshold * 1000000L;
                long num13 = (long)Policy.ConstructionSpaceportSmallColonyPopulationThreshold * 1000000L;
                foreach (Habitat item in habitatList5)
                {
                    Design design2 = null;
                    if (item.Population.TotalAmount > num11)
                    {
                        design2 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.LargeSpacePort);
                    }
                    else if (item.Population.TotalAmount > num12)
                    {
                        design2 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
                    }
                    else if (item.Population.TotalAmount > num13)
                    {
                        design2 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.SmallSpacePort);
                    }
                    if (design2 == null)
                    {
                        continue;
                    }
                    double num14 = design2.CalculateCurrentPurchasePrice(_Galaxy);
                    if (!((purchaseCost + num14) / 8.0 <= num5) || !(purchaseCost + num14 <= StateMoney))
                    {
                        continue;
                    }
                    design2.BuildCount++;
                    BuiltObject builtObject4 = new BuiltObject(design2, item.Name + " " + TextResolver.GetText("Space Port"), _Galaxy);
                    builtObject4.PurchasePrice = num14;
                    if (CheckTaskAuthorized(_ControlStateConstruction, ref refusalCount, GenerateAutomationMessageConstruction(builtObject4, item, num14), item, AdvisorMessageType.BuildOneOff, design2, null))
                    {
                        if (item.ConstructionQueue != null && item.ConstructionQueue.AddBuiltObjectToConstruct(builtObject4))
                        {
                            builtObject4.ParentHabitat = item;
                            _Galaxy.SelectRelativeHabitatSurfacePoint(item, out var x, out var y);
                            builtObject4.ParentOffsetX = x;
                            builtObject4.ParentOffsetY = y;
                            builtObject4.Heading = _Galaxy.SelectRandomHeading();
                            builtObject4.TargetHeading = builtObject4.Heading;
                            builtObject4.NearestSystemStar = Galaxy.DetermineHabitatSystemStar(item);
                            AddBuiltObjectToGalaxy(builtObject4, item, offsetLocationFromParent: false, isStateOwned: true);
                            builtObject4.BuiltAt = item;
                            purchaseCost += num14;
                            num8 += CalculateSupportCost(design2);
                            ProcureConstructionComponents(builtObject4, item, out resourcesToOrder);
                            colonyResourcesToOrder.Add(resourcesToOrder);
                            colonyConstructionYards.Add(item);
                        }
                        else
                        {
                            design2.BuildCount--;
                        }
                    }
                    else
                    {
                        design2.BuildCount--;
                    }
                }
            }
            double num15 = 0.0;
            ForceStructureProjectionList stateForceStructureProjections = StateForceStructureProjections;
            num15 += num8;
            ForceStructureProjectionList forceStructureProjectionList = new ForceStructureProjectionList();
            forceStructureProjectionList.AddRange(stateForceStructureProjections);
            if (_ControlStateConstruction != 0)
            {
                ForceStructureProjectionList projections = PrivateForceStructureProjections.Clone();
                projections = RefactorForceStructureProjectionsToCosts(projections, includeCashflowCheck: false);
                forceStructureProjectionList.AddRange(projections);
            }
            double num16 = 0.0;
            foreach (ForceStructureProjection item2 in forceStructureProjectionList)
            {
                Design design3 = Designs.FindNewestCanBuild(item2.SubRole);
                if (design3 != null)
                {
                    double num17 = design3.CalculateCurrentPurchasePrice(_Galaxy);
                    num16 += num17 * (double)item2.Amount;
                }
            }
            if (num16 > 0.0)
            {
                if (_ControlStateConstruction == AutomationLevel.SemiAutomated)
                {
                    EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.AdvisorSuggestion, null);
                    empireMessage.AdvisorMessageType = AdvisorMessageType.BuildOrder;
                    empireMessage.Description = string.Format(TextResolver.GetText("Build new ships for X credits"), num16.ToString("###,###,###,##0"));
                    empireMessage.StarDate = _Galaxy.CurrentStarDate;
                    SendMessageToEmpire(empireMessage, this);
                }
                else if (_ControlStateConstruction == AutomationLevel.FullyAutomated)
                {
                    for (int m = 0; m < forceStructureProjectionList.Count; m++)
                    {
                        ForceStructureProjection forceStructureProjection = forceStructureProjectionList[m];
                        if (forceStructureProjection == null || forceStructureProjection.Amount <= 0)
                        {
                            continue;
                        }
                        Design design4 = Designs.FindNewestCanBuild(forceStructureProjection.SubRole);
                        if (design4 != null)
                        {
                            if (design4.SubRole == BuiltObjectSubRole.ConstructionShip || design4.SubRole == BuiltObjectSubRole.ColonyShip || design4.SubRole == BuiltObjectSubRole.ResupplyShip)
                            {
                                PirateBuildNewShipsAtColony(design4, forceStructureProjection.Amount, stateMoney, ref purchaseCost, habitatList, ref resourcesToOrder, ref colonyResourcesToOrder, ref colonyConstructionYards);
                            }
                            else
                            {
                                PirateBuildNewShips(design4, forceStructureProjection.Amount, stateMoney, ref purchaseCost, ref resourcesToOrder, ref builtObjectResourcesToOrder, ref builtObjectConstructionYards);
                            }
                        }
                    }
                    StateMoney -= purchaseCost;
                    PirateEconomy.PerformExpense(purchaseCost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                }
            }
            if (builtObjectResourcesToOrder.Count <= 0 && colonyResourcesToOrder.Count <= 0)
            {
                return;
            }
            BuiltObjectList builtObjectList = new BuiltObjectList();
            foreach (BuiltObject item3 in builtObjectConstructionYards)
            {
                if (!builtObjectList.Contains(item3))
                {
                    builtObjectList.Add(item3);
                }
            }
            foreach (BuiltObject item4 in builtObjectList)
            {
                CargoList cargoList = new CargoList();
                for (int n = 0; n < builtObjectConstructionYards.Count; n++)
                {
                    if (builtObjectConstructionYards[n] != item4)
                    {
                        continue;
                    }
                    foreach (Cargo item5 in builtObjectResourcesToOrder[n])
                    {
                        cargoList.Add(item5);
                    }
                }
                foreach (Cargo item6 in cargoList)
                {
                    CreateOrder(item4, item6.CommodityResource, item6.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
            HabitatList habitatList6 = new HabitatList();
            foreach (Habitat item7 in colonyConstructionYards)
            {
                if (!habitatList6.Contains(item7))
                {
                    habitatList6.Add(item7);
                }
            }
            foreach (Habitat item8 in habitatList6)
            {
                CargoList cargoList2 = new CargoList();
                for (int num18 = 0; num18 < colonyConstructionYards.Count; num18++)
                {
                    if (colonyConstructionYards[num18] != item8)
                    {
                        continue;
                    }
                    foreach (Cargo item9 in colonyResourcesToOrder[num18])
                    {
                        cargoList2.Add(item9);
                    }
                }
                foreach (Cargo item10 in cargoList2)
                {
                    CreateOrder(item8, item10.CommodityResource, item10.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
        }

        private void PirateBuildNewShips(Design design, int amount, double availableCash, ref double purchaseCost, ref CargoList resourcesToOrder, ref List<CargoList> builtObjectResourcesToOrder, ref BuiltObjectList builtObjectConstructionYards)
        {
            double num = design.CalculateCurrentPurchasePrice(_Galaxy);
            for (int i = 0; i < amount; i++)
            {
                if (!(purchaseCost + num < availableCash))
                {
                    continue;
                }
                design.BuildCount++;
                BuiltObject builtObject = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design, null, uniqueNamesForSmallMilitaryShips: true), _Galaxy);
                builtObject.PurchasePrice = num;
                double shortestWaitQueueTime;
                BuiltObject builtObject2 = ConstructionYards.FindShortestConstructionWaitQueue(builtObject, out shortestWaitQueueTime, includeVerySmallYards: true, 2);
                double num2 = shortestWaitQueueTime / (double)Galaxy.RealSecondsInGalacticYear;
                if (builtObject2 != null && num2 < Galaxy.MaximumConstructionQueueWaitTimeYears)
                {
                    if (builtObject2.ConstructionQueue != null && builtObject2.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                    {
                        purchaseCost += num;
                        if (builtObject2.ParentHabitat != null)
                        {
                            builtObject.Name = _Galaxy.GenerateBuiltObjectName(design, builtObject2.ParentHabitat, uniqueNamesForSmallMilitaryShips: true);
                        }
                        bool flag = true;
                        switch (design.SubRole)
                        {
                            case BuiltObjectSubRole.SmallFreighter:
                            case BuiltObjectSubRole.MediumFreighter:
                            case BuiltObjectSubRole.LargeFreighter:
                            case BuiltObjectSubRole.PassengerShip:
                            case BuiltObjectSubRole.GasMiningShip:
                            case BuiltObjectSubRole.MiningShip:
                                flag = false;
                                break;
                        }
                        AddBuiltObjectToGalaxy(builtObject, builtObject2, offsetLocationFromParent: false, flag);
                        builtObject.BuiltAt = builtObject2;
                        builtObject.IsAutoControlled = NewBuiltObjectShouldBeAutomated(builtObject.SubRole);
                        if (!flag || design.SubRole == BuiltObjectSubRole.ResortBase)
                        {
                            builtObject.Empire = _Galaxy.IndependentEmpire;
                            if (!_Galaxy.IndependentEmpire.PrivateBuiltObjects.Contains(builtObject))
                            {
                                _Galaxy.IndependentEmpire.PrivateBuiltObjects.Add(builtObject);
                            }
                        }
                        ProcureConstructionComponents(builtObject, builtObject2, orderPreciseResourceAmounts: true, out resourcesToOrder);
                        builtObjectResourcesToOrder.Add(resourcesToOrder);
                        builtObjectConstructionYards.Add(builtObject2);
                    }
                    else
                    {
                        design.BuildCount--;
                    }
                }
                else
                {
                    design.BuildCount--;
                }
            }
        }

        public bool NewBuiltObjectShouldBeAutomated(BuiltObjectSubRole subRole)
        {
            switch (subRole)
            {
                case BuiltObjectSubRole.Escort:
                case BuiltObjectSubRole.Frigate:
                case BuiltObjectSubRole.Destroyer:
                case BuiltObjectSubRole.Cruiser:
                case BuiltObjectSubRole.CapitalShip:
                case BuiltObjectSubRole.TroopTransport:
                case BuiltObjectSubRole.Carrier:
                case BuiltObjectSubRole.ResupplyShip:
                case BuiltObjectSubRole.ExplorationShip:
                case BuiltObjectSubRole.ColonyShip:
                case BuiltObjectSubRole.ConstructionShip:
                    return NewShipsAutomated;
                default:
                    return true;
            }
        }

        private void PirateBuildNewShipsAtColony(Design design, int amount, double availableCash, ref double purchaseCost, HabitatList colonies, ref CargoList resourcesToOrder, ref List<CargoList> colonyResourcesToOrder, ref HabitatList colonyConstructionYards)
        {
            double num = design.CalculateCurrentPurchasePrice(_Galaxy);
            for (int i = 0; i < amount; i++)
            {
                if (!(purchaseCost + num < availableCash))
                {
                    continue;
                }
                design.BuildCount++;
                BuiltObject builtObject = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design, null, uniqueNamesForSmallMilitaryShips: true), _Galaxy);
                builtObject.PurchasePrice = num;
                double shortestWaitQueueTime;
                Habitat habitat = colonies.FindShortestConstructionWaitQueue(builtObject, out shortestWaitQueueTime);
                double num2 = shortestWaitQueueTime / (double)Galaxy.RealSecondsInGalacticYear;
                if (habitat != null && num2 < Galaxy.MaximumConstructionQueueWaitTimeYears)
                {
                    if (habitat.ConstructionQueue != null && habitat.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                    {
                        purchaseCost += num;
                        if (habitat.ParentHabitat != null)
                        {
                            builtObject.Name = _Galaxy.GenerateBuiltObjectName(design, habitat, uniqueNamesForSmallMilitaryShips: true);
                        }
                        bool flag = true;
                        switch (design.SubRole)
                        {
                            case BuiltObjectSubRole.SmallFreighter:
                            case BuiltObjectSubRole.MediumFreighter:
                            case BuiltObjectSubRole.LargeFreighter:
                            case BuiltObjectSubRole.PassengerShip:
                            case BuiltObjectSubRole.GasMiningShip:
                            case BuiltObjectSubRole.MiningShip:
                                flag = false;
                                break;
                        }
                        AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: false, flag);
                        builtObject.BuiltAt = habitat;
                        builtObject.IsAutoControlled = NewBuiltObjectShouldBeAutomated(builtObject.SubRole);
                        if (!flag)
                        {
                            builtObject.Empire = _Galaxy.IndependentEmpire;
                            if (!_Galaxy.IndependentEmpire.PrivateBuiltObjects.Contains(builtObject))
                            {
                                _Galaxy.IndependentEmpire.PrivateBuiltObjects.Add(builtObject);
                            }
                        }
                        ProcureConstructionComponents(builtObject, habitat, out resourcesToOrder);
                        colonyResourcesToOrder.Add(resourcesToOrder);
                        colonyConstructionYards.Add(habitat);
                    }
                    else
                    {
                        design.BuildCount--;
                    }
                }
                else
                {
                    design.BuildCount--;
                }
            }
        }

        private double CalculateCashReservesForNewMiningStation()
        {
            double result = 0.0;
            if (Designs != null)
            {
                Design design = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                if (design != null)
                {
                    result = design.CalculateCurrentPurchasePrice(_Galaxy);
                }
            }
            return result;
        }

        private double CalculateCashReservesForNewPirateFacilities()
        {
            double num = 0.0;
            if (PirateEmpireBaseHabitat != null)
            {
                PlanetaryFacilityDefinition planetaryFacility = Galaxy.PlanetaryFacilityDefinitionsStatic[25];
                PlanetaryFacilityDefinition planetaryFacility2 = Galaxy.PlanetaryFacilityDefinitionsStatic[26];
                PlanetaryFacilityDefinition planetaryFacility3 = Galaxy.PlanetaryFacilityDefinitionsStatic[32];
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat == null || habitat.HasBeenDestroyed || habitat.Empire == this)
                    {
                        continue;
                    }
                    PirateColonyControl byFacilityControl = habitat.GetPirateControl().GetByFacilityControl();
                    if (byFacilityControl == null)
                    {
                        PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(this);
                        if (byFaction != null && byFaction.ControlLevel >= 0.5f)
                        {
                            num = Math.Max(num, Galaxy.CalculatePlanetaryFacilityCost(planetaryFacility, this));
                        }
                    }
                    else if (byFacilityControl.EmpireId == EmpireId)
                    {
                        int num2 = habitat.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateBase);
                        int num3 = habitat.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateFortress);
                        int num4 = habitat.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateCriminalNetwork);
                        if (num2 > 0 && num3 <= 0)
                        {
                            num = Math.Max(num, Galaxy.CalculatePlanetaryFacilityCost(planetaryFacility2, this));
                        }
                        else if (num3 > 0 && num4 <= 0 && CountPirateCriminalNetworks() <= 0)
                        {
                            num = Math.Max(num, Galaxy.CalculatePlanetaryFacilityCost(planetaryFacility3, this));
                        }
                    }
                }
            }
            return num;
        }

        private void PirateProjectForces(long starDate)
        {
            double stateMoney = _StateMoney;
            stateMoney -= CalculateCashReservesForNewPirateFacilities();
            stateMoney -= CalculateCashReservesForNewMiningStation();
            double num = stateMoney * 0.6;
            double num2 = stateMoney - num;
            double num3 = CalculatePirateIncome();
            double num4 = CalculatePirateExpenses(includeShipsUnderConstruction: true);
            double num5 = 2.0;
            double num6 = 0.0;
            if (stateMoney > 0.0)
            {
                num6 = stateMoney / num5;
            }
            double num7 = num3 + num6 - num4;
            double num8 = 40000.0;
            double num9 = 100000.0;
            double num10 = 0.8;
            if (num7 > num8)
            {
                double num11 = num9 - num8;
                _ = (num9 - num7) / num11;
                num7 = Math.Max(num8, num7 * num10);
            }
            HabitatList habitatList = PirateDetermineOwnedColonies();
            int num12 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.Escort);
            int num13 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.Frigate);
            int num14 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.Destroyer);
            int num15 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.Cruiser);
            int num16 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.CapitalShip);
            int num17 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.Carrier);
            int num18 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.TroopTransport);
            int num19 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.ExplorationShip);
            int num20 = BuiltObjects.CountBySubRole(BuiltObjectSubRole.ConstructionShip);
            int num21 = num12 + num13 + num14 + num15 + num16 + num17 + num18;
            Design design = Designs.FindNewestCanBuild(BuiltObjectSubRole.Escort);
            Design design2 = Designs.FindNewestCanBuild(BuiltObjectSubRole.Frigate);
            Design design3 = Designs.FindNewestCanBuild(BuiltObjectSubRole.Destroyer);
            Design design4 = Designs.FindNewestCanBuild(BuiltObjectSubRole.Cruiser);
            Design design5 = Designs.FindNewestCanBuild(BuiltObjectSubRole.CapitalShip);
            Design design6 = Designs.FindNewestCanBuild(BuiltObjectSubRole.Carrier);
            Design design7 = Designs.FindNewestCanBuild(BuiltObjectSubRole.TroopTransport);
            Design design8 = Designs.FindNewestCanBuild(BuiltObjectSubRole.ExplorationShip);
            Design design9 = Designs.FindNewestCanBuild(BuiltObjectSubRole.ConstructionShip);
            if (habitatList.Count <= 0)
            {
                design7 = null;
            }
            float num22 = 0f;
            double num23 = 0.0;
            double num24 = 0.0;
            if (design != null)
            {
                num22 += Policy.ConstructionMilitaryEscort;
                num23 += (double)Policy.ConstructionMilitaryEscort * design.CalculateCurrentPurchasePrice(_Galaxy);
                num24 += (double)Policy.ConstructionMilitaryEscort * design.CalculateMaintenanceCosts(_Galaxy, this);
            }
            if (design2 != null)
            {
                num22 += Policy.ConstructionMilitaryFrigate;
                num23 += (double)Policy.ConstructionMilitaryFrigate * design2.CalculateCurrentPurchasePrice(_Galaxy);
                num24 += (double)Policy.ConstructionMilitaryFrigate * design2.CalculateMaintenanceCosts(_Galaxy, this);
            }
            if (design3 != null)
            {
                num22 += Policy.ConstructionMilitaryDestroyer;
                num23 += (double)Policy.ConstructionMilitaryDestroyer * design3.CalculateCurrentPurchasePrice(_Galaxy);
                num24 += (double)Policy.ConstructionMilitaryDestroyer * design3.CalculateMaintenanceCosts(_Galaxy, this);
            }
            if (design4 != null)
            {
                num22 += Policy.ConstructionMilitaryCruiser;
                num23 += (double)Policy.ConstructionMilitaryCruiser * design4.CalculateCurrentPurchasePrice(_Galaxy);
                num24 += (double)Policy.ConstructionMilitaryCruiser * design4.CalculateMaintenanceCosts(_Galaxy, this);
            }
            if (design5 != null)
            {
                num22 += Policy.ConstructionMilitaryCapitalShip;
                num23 += (double)Policy.ConstructionMilitaryCapitalShip * design5.CalculateCurrentPurchasePrice(_Galaxy);
                num24 += (double)Policy.ConstructionMilitaryCapitalShip * design5.CalculateMaintenanceCosts(_Galaxy, this);
            }
            if (design6 != null)
            {
                num22 += Policy.ConstructionMilitaryCarrier;
                num23 += (double)Policy.ConstructionMilitaryCarrier * design6.CalculateCurrentPurchasePrice(_Galaxy);
                num24 += (double)Policy.ConstructionMilitaryCarrier * design6.CalculateMaintenanceCosts(_Galaxy, this);
            }
            if (design7 != null)
            {
                num22 += Policy.ConstructionMilitaryTroopTransport;
                num23 += (double)Policy.ConstructionMilitaryTroopTransport * design7.CalculateCurrentPurchasePrice(_Galaxy);
                num24 += (double)Policy.ConstructionMilitaryTroopTransport * design7.CalculateMaintenanceCosts(_Galaxy, this);
            }
            ForceStructureProjectionList forceStructureProjectionList = new ForceStructureProjectionList();
            if (num7 > 0.0)
            {
                int num25 = Math.Min(10, 1 + BuiltObjects.Count / 5);
                int num26 = Math.Max(0, num25 - num19);
                if (num26 > 0 && design8 != null)
                {
                    double num27 = design8.CalculateMaintenanceCosts(_Galaxy, this);
                    double num28 = design8.CalculateCurrentPurchasePrice(_Galaxy);
                    int val = (int)(stateMoney / num28);
                    int val2 = (int)(num7 / num27);
                    int num29 = Math.Min(num26, Math.Min(val2, val));
                    if (num29 > 0)
                    {
                        double num30 = (double)num29 * num27;
                        forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.ExplorationShip, num29, starDate));
                        num7 -= num30;
                        stateMoney -= num28 * (double)num29;
                    }
                }
                if (habitatList.Count > 0)
                {
                    int num31 = Math.Min(5, 1 + BuiltObjects.Count / 20);
                    int num32 = Math.Max(0, num31 - num20);
                    if (num32 > 0 && design9 != null)
                    {
                        double num33 = design9.CalculateMaintenanceCosts(_Galaxy, this);
                        double num34 = design9.CalculateCurrentPurchasePrice(_Galaxy);
                        int val3 = (int)(stateMoney / num34);
                        int val4 = (int)(num7 / num33);
                        int num35 = Math.Min(num32, Math.Min(val4, val3));
                        if (num35 > 0)
                        {
                            double num36 = (double)num35 * num33;
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.ConstructionShip, num35, starDate));
                            num7 -= num36;
                        }
                    }
                }
                if (num7 > 0.0)
                {
                    num23 /= (double)num22;
                    num24 /= (double)num22;
                    double val5 = num / num23;
                    double val6 = num7 / num24;
                    float num37 = (float)Math.Min(val5, val6);
                    int num38 = num21 + (int)num37;
                    if (design != null)
                    {
                        float num39 = Policy.ConstructionMilitaryEscort / num22;
                        int num40 = (int)(0.5f + (float)num38 * num39);
                        if (num12 < num40)
                        {
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.Escort, (int)(0.5 + (double)(num39 * num37)), starDate));
                        }
                    }
                    if (design2 != null)
                    {
                        float num41 = Policy.ConstructionMilitaryFrigate / num22;
                        int num42 = (int)(0.5f + (float)num38 * num41);
                        if (num13 < num42)
                        {
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.Frigate, (int)(0.5 + (double)(num41 * num37)), starDate));
                        }
                    }
                    if (design3 != null)
                    {
                        float num43 = Policy.ConstructionMilitaryDestroyer / num22;
                        int num44 = (int)(0.5f + (float)num38 * num43);
                        if (num14 < num44)
                        {
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.Destroyer, (int)(0.5 + (double)(num43 * num37)), starDate));
                        }
                    }
                    if (design4 != null)
                    {
                        float num45 = Policy.ConstructionMilitaryCruiser / num22;
                        int num46 = (int)(0.5f + (float)num38 * num45);
                        if (num15 < num46)
                        {
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.Cruiser, (int)(0.5 + (double)(num45 * num37)), starDate));
                        }
                    }
                    if (design5 != null)
                    {
                        float num47 = Policy.ConstructionMilitaryCapitalShip / num22;
                        int num48 = (int)(0.5f + (float)num38 * num47);
                        if (num16 < num48)
                        {
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.CapitalShip, (int)(0.5 + (double)(num47 * num37)), starDate));
                        }
                    }
                    if (design6 != null)
                    {
                        float num49 = Policy.ConstructionMilitaryCarrier / num22;
                        int num50 = (int)(0.5f + (float)num38 * num49);
                        if (num17 < num50)
                        {
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.Carrier, (int)(0.5 + (double)(num49 * num37)), starDate));
                        }
                    }
                    if (design7 != null)
                    {
                        float num51 = Policy.ConstructionMilitaryTroopTransport / num22;
                        int num52 = (int)(0.5f + (float)num38 * num51);
                        if (num18 < num52)
                        {
                            forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.TroopTransport, (int)(0.5 + (double)(num51 * num37)), starDate));
                        }
                    }
                }
            }
            _StateForceStructureProjections = forceStructureProjectionList;
            forceStructureProjectionList = new ForceStructureProjectionList();
            int num53 = 1 + (int)((double)BuiltObjects.Count * 1.0 * Policy.PirateSmugglerFreighterLevel);
            int num54 = (int)((double)BuiltObjects.Count * 0.07 * Policy.PirateSmugglerPassengerLevel);
            int num55 = 1 + (int)((double)BuiltObjects.Count * 0.35 * Policy.PirateSmugglerMiningLevel);
            if (habitatList.Count <= 0 && ResortBases.Count <= 0)
            {
                num54 = 0;
            }
            switch (PiratePlayStyle)
            {
                case PiratePlayStyle.Balanced:
                    num53 = (int)((double)num53 * 1.3);
                    break;
                case PiratePlayStyle.Mercenary:
                    num53 = (int)((double)num53 * 0.5);
                    num55 = (int)((double)num55 * 0.5);
                    break;
                case PiratePlayStyle.Smuggler:
                    num53 = (int)((double)num53 * 2.0);
                    num55 = (int)((double)num55 * 1.5);
                    break;
            }
            int num56 = PrivateBuiltObjects.CountBySubRole(BuiltObjectSubRole.SmallFreighter);
            int num57 = PrivateBuiltObjects.CountBySubRole(BuiltObjectSubRole.MediumFreighter);
            int num58 = PrivateBuiltObjects.CountBySubRole(BuiltObjectSubRole.LargeFreighter);
            int num59 = PrivateBuiltObjects.CountBySubRole(BuiltObjectSubRole.PassengerShip);
            int num60 = PrivateBuiltObjects.CountBySubRole(BuiltObjectSubRole.MiningShip);
            int num61 = PrivateBuiltObjects.CountBySubRole(BuiltObjectSubRole.GasMiningShip);
            Design design10 = Designs.FindNewestCanBuild(BuiltObjectSubRole.SmallFreighter);
            Design design11 = Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumFreighter);
            Design design12 = Designs.FindNewestCanBuild(BuiltObjectSubRole.LargeFreighter);
            Design design13 = Designs.FindNewestCanBuild(BuiltObjectSubRole.PassengerShip);
            Design design14 = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningShip);
            Design design15 = Designs.FindNewestCanBuild(BuiltObjectSubRole.GasMiningShip);
            int num62 = Math.Max(0, num53 - (num56 + num57 + num58));
            int num63 = Math.Max(0, num55 - (num60 + num61));
            int num64 = Math.Max(0, num54 - num59);
            int num65 = (int)((double)num62 * 0.25);
            int num66 = (int)((double)num62 * 0.35);
            int num67 = num62 - (num66 + num65);
            int num68 = (int)((double)num63 * 0.5);
            int num69 = num63 - num68;
            int num70 = num64;
            int num71 = Math.Max(num67, Math.Max(num66, Math.Max(num65, Math.Max(num69, Math.Max(num68, num70)))));
            int num72 = 0;
            int num73 = 0;
            int num74 = 0;
            int num75 = 0;
            int num76 = 0;
            int num77 = 0;
            double num78 = 0.0;
            double num79 = 0.0;
            double num80 = 0.0;
            double num81 = 0.0;
            double num82 = 0.0;
            double num83 = 0.0;
            if (design10 != null)
            {
                num78 = design10.CalculateCurrentPurchasePrice(_Galaxy);
            }
            if (design11 != null)
            {
                num79 = design11.CalculateCurrentPurchasePrice(_Galaxy);
            }
            if (design12 != null)
            {
                num80 = design12.CalculateCurrentPurchasePrice(_Galaxy);
            }
            if (design14 != null)
            {
                num81 = design14.CalculateCurrentPurchasePrice(_Galaxy);
            }
            if (design15 != null)
            {
                num82 = design15.CalculateCurrentPurchasePrice(_Galaxy);
            }
            if (design13 != null)
            {
                num83 = design13.CalculateCurrentPurchasePrice(_Galaxy);
            }
            double num84 = 0.0;
            for (int i = 0; i < num71; i++)
            {
                if (num67 > 0 && num78 > 0.0)
                {
                    if (num2 > num84 + num78)
                    {
                        num72++;
                        num84 += num78;
                    }
                    num67--;
                }
                if (num66 > 0 && num79 > 0.0)
                {
                    if (num2 > num84 + num79)
                    {
                        num73++;
                        num84 += num79;
                    }
                    num66--;
                }
                if (num65 > 0 && num80 > 0.0)
                {
                    if (num2 > num84 + num80)
                    {
                        num74++;
                        num84 += num80;
                    }
                    num65--;
                }
                if (num69 > 0 && num81 > 0.0)
                {
                    if (num2 > num84 + num81)
                    {
                        num75++;
                        num84 += num81;
                    }
                    num69--;
                }
                if (num68 > 0 && num82 > 0.0)
                {
                    if (num2 > num84 + num82)
                    {
                        num76++;
                        num84 += num82;
                    }
                    num68--;
                }
                if (num70 > 0 && num83 > 0.0)
                {
                    if (num2 > num84 + num83)
                    {
                        num77++;
                        num84 += num83;
                    }
                    num70--;
                }
            }
            if (num72 > 0)
            {
                forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.SmallFreighter, num72, starDate));
            }
            if (num73 > 0)
            {
                forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.MediumFreighter, num73, starDate));
            }
            if (num74 > 0)
            {
                forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.LargeFreighter, num74, starDate));
            }
            if (num75 > 0)
            {
                forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.MiningShip, num75, starDate));
            }
            if (num76 > 0)
            {
                forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.GasMiningShip, num76, starDate));
            }
            if (num77 > 0)
            {
                forceStructureProjectionList.Add(new ForceStructureProjection(BuiltObjectSubRole.PassengerShip, num77, starDate));
            }
            _PrivateForceStructureProjections = forceStructureProjectionList;
        }

        private void MakeDefendOffersToPirates(long starDate)
        {
            bool flag = false;
            switch (Policy.OfferDefensivePirateMissionsSituation)
            {
                case 0:
                    flag = false;
                    break;
                case 1:
                    if (CheckAtWar())
                    {
                        flag = true;
                    }
                    break;
                case 2:
                    flag = true;
                    break;
            }
            if (!flag || Policy.OfferDefensivePirateMissions <= 0)
            {
                return;
            }
            PirateRelationList relationsByType = PirateRelations.GetRelationsByType(PirateRelationType.Protection);
            PirateRelationList relationsAboveThresholdAndByType = PirateRelations.GetRelationsAboveThresholdAndByType(15f, PirateRelationType.Protection);
            PirateRelationList relationsAboveThresholdAndByType2 = PirateRelations.GetRelationsAboveThresholdAndByType(30f, PirateRelationType.Protection);
            if (relationsByType.Count <= 0)
            {
                return;
            }
            StellarObjectList stellarObjectList = IdentifyMostAtRiskColoniesBases();
            double num = _PirateMissions.CalculateTotalDefendCosts(this);
            if (stellarObjectList.Count <= 0)
            {
                return;
            }
            for (int i = 0; i < stellarObjectList.Count; i++)
            {
                StellarObject stellarObject = stellarObjectList[i];
                if (stellarObject == null || stellarObject.HasBeenDestroyed || stellarObject.Empire != this)
                {
                    continue;
                }
                double num2 = CalculatePirateDefendPrice(stellarObject);
                if (!(num + num2 < _StateMoney))
                {
                    continue;
                }
                Habitat systemStar = null;
                PirateRelationList pirateRelationList = new PirateRelationList();
                if (stellarObject is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)stellarObject;
                    systemStar = builtObject.NearestSystemStar;
                    switch (builtObject.SubRole)
                    {
                        case BuiltObjectSubRole.GasMiningStation:
                        case BuiltObjectSubRole.MiningStation:
                        case BuiltObjectSubRole.ResortBase:
                            pirateRelationList = relationsByType;
                            break;
                        case BuiltObjectSubRole.SmallSpacePort:
                        case BuiltObjectSubRole.MediumSpacePort:
                        case BuiltObjectSubRole.LargeSpacePort:
                            pirateRelationList = ((builtObject.ParentHabitat == null || builtObject.ParentHabitat != Capital) ? relationsAboveThresholdAndByType : relationsAboveThresholdAndByType2);
                            break;
                        case BuiltObjectSubRole.EnergyResearchStation:
                        case BuiltObjectSubRole.WeaponsResearchStation:
                        case BuiltObjectSubRole.HighTechResearchStation:
                            pirateRelationList = relationsAboveThresholdAndByType;
                            break;
                    }
                }
                else if (stellarObject is Habitat)
                {
                    Habitat habitat = (Habitat)stellarObject;
                    systemStar = Galaxy.DetermineHabitatSystemStar(habitat);
                    pirateRelationList = ((habitat != Capital) ? relationsAboveThresholdAndByType : relationsAboveThresholdAndByType2);
                }
                if (pirateRelationList.Count <= 0)
                {
                    continue;
                }
                long expiryDate = starDate + (long)(1.0 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
                EmpireActivity empireActivity = new EmpireActivity(this, stellarObject, num2, this, expiryDate, EmpireActivityType.Defend);
                if (_PirateMissions.ContainsEquivalent(empireActivity.Target, empireActivity.Type))
                {
                    continue;
                }
                int num3 = _PirateMissions.CountMissionsInSameSystem(systemStar, EmpireActivityType.Defend, this);
                if (num3 > 2)
                {
                    continue;
                }
                int refusalCount = 0;
                if (!CheckTaskAuthorized(_ControlOfferPirateMissions, ref refusalCount, GenerateAutomationMessageOfferPirateDefendMission(empireActivity), empireActivity, AdvisorMessageType.OfferPirateDefendMission, empireActivity, null))
                {
                    continue;
                }
                _PirateMissions.Add(empireActivity);
                _Galaxy.PirateMissions.Add(empireActivity);
                num += num2;
                for (int j = 0; j < pirateRelationList.Count; j++)
                {
                    PirateRelation pirateRelation = pirateRelationList[j];
                    if (pirateRelation != null && pirateRelation.OtherEmpire != null && pirateRelation.OtherEmpire.PirateEmpireBaseHabitat != null && pirateRelation.OtherEmpire.IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                    {
                        string description = string.Format(TextResolver.GetText("Pirate Defend Mission Available"), empireActivity.RequestingEmpire.Name, empireActivity.Target.Name);
                        SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.PirateDefendMissionAvailable, empireActivity, description);
                    }
                }
            }
        }

        public bool DetermineOfferPirateDefendMissionToPirateFaction(Empire pirateFaction)
        {
            if (this == _Galaxy.IndependentEmpire)
            {
                return true;
            }
            if (pirateFaction != null && pirateFaction.PirateEmpireBaseHabitat != null)
            {
                switch (Policy.OfferDefensivePirateMissions)
                {
                    case 0:
                        return false;
                    case 1:
                        {
                            PirateRelation pirateRelation2 = ObtainPirateRelation(pirateFaction);
                            if (pirateRelation2.Type == PirateRelationType.Protection && pirateRelation2.Evaluation >= 15f)
                            {
                                return true;
                            }
                            break;
                        }
                    case 2:
                        {
                            PirateRelation pirateRelation = ObtainPirateRelation(pirateFaction);
                            if (pirateRelation.Type == PirateRelationType.Protection)
                            {
                                return true;
                            }
                            break;
                        }
                }
            }
            return false;
        }

        public StellarObjectList IdentifyMostAtRiskColoniesBases()
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation != null && diplomaticRelation.Type != 0)
                {
                    DiplomaticRelation diplomaticRelation2 = diplomaticRelation.OtherEmpire.ObtainDiplomaticRelation(this);
                    if (diplomaticRelation2.Strategy == DiplomaticStrategy.Conquer)
                    {
                        stellarObjectList.AddRange(ListHelper.ToArrayThreadSafe(diplomaticRelation2.WarObjectiveBases));
                        stellarObjectList.AddRange(ListHelper.ToArrayThreadSafe(diplomaticRelation2.WarObjectiveColonies));
                    }
                }
            }
            if (stellarObjectList.Count <= 0 && !CheckEmpireHasHyperDriveTech(this) && Capital != null)
            {
                BuiltObject builtObject = _Galaxy.DetermineSpacePortAtColonyIncludingUnderConstruction(Capital);
                if (builtObject != null)
                {
                    stellarObjectList.Add(builtObject);
                }
            }
            return stellarObjectList;
        }

        public void ReviewPirateDefendMissions(long starDate)
        {
            EmpireActivityList empireActivityList = _PirateMissions.ResolveActivitiesByType(EmpireActivityType.Defend);
            EmpireActivityList empireActivityList2 = new EmpireActivityList();
            if (empireActivityList.Count <= 0)
            {
                return;
            }
            for (int i = 0; i < empireActivityList.Count; i++)
            {
                EmpireActivity empireActivity = empireActivityList[i];
                if (empireActivity != null && empireActivity.AssignedEmpire != null && empireActivity.RequestingEmpire == this && empireActivity.Target != null && empireActivity.BidTimeRemaining == 0 && starDate >= empireActivity.ExpiryDate)
                {
                    bool flag = true;
                    if (empireActivity.Target.HasBeenDestroyed)
                    {
                        flag = false;
                    }
                    if (empireActivity.Target.Empire != empireActivity.RequestingEmpire)
                    {
                        flag = false;
                    }
                    if (flag)
                    {
                        empireActivity.AssignedEmpire.CompletePirateMission(empireActivity);
                    }
                    else
                    {
                        PirateRelation pirateRelation = empireActivity.RequestingEmpire.ObtainPirateRelation(this);
                        pirateRelation.EvaluationPirateMissionsFail -= 20f;
                        string description = string.Format(TextResolver.GetText("Pirate Defend Mission Failed Pirate"), empireActivity.RequestingEmpire.Name, empireActivity.Target.Name, empireActivity.Price.ToString("0"));
                        empireActivity.AssignedEmpire.SendMessageToEmpire(empireActivity.AssignedEmpire, EmpireMessageType.PirateDefendMissionFailed, empireActivity.Target, description);
                        description = string.Format(TextResolver.GetText("Pirate Defend Mission Failed Other"), empireActivity.AssignedEmpire.Name, empireActivity.Target.Name, empireActivity.Price.ToString("0"));
                        empireActivity.RequestingEmpire.SendMessageToEmpire(empireActivity.RequestingEmpire, EmpireMessageType.PirateDefendMissionFailed, empireActivity.Target, description);
                    }
                    empireActivityList2.Add(empireActivity);
                }
            }
            for (int j = 0; j < empireActivityList2.Count; j++)
            {
                empireActivityList2[j].AssignedEmpire.PirateMissions.RemoveEquivalent(empireActivityList2[j]);
                empireActivityList2[j].RequestingEmpire.PirateMissions.RemoveEquivalent(empireActivityList2[j]);
            }
        }

        public void ReviewPirateSmugglingMissions(long starDate)
        {
            if (ControlOfferPirateMissions != AutomationLevel.FullyAutomated)
            {
                return;
            }
            OrderList orders = _Galaxy.Orders.GetOrders(this);
            double num = PrivateAnnualRevenue - (AnnualPrivateMaintenanceExcludingUnderConstruction + AnnualTaxRevenue + ThisYearsPrivateFuelCosts);
            EmpireActivityList empireActivityList = _PirateMissions.ResolveActivitiesByType(EmpireActivityType.Smuggle);
            EmpireActivityList empireActivityList2 = new EmpireActivityList();
            if (empireActivityList.Count <= 0)
            {
                return;
            }
            for (int i = 0; i < empireActivityList.Count; i++)
            {
                EmpireActivity empireActivity = empireActivityList[i];
                if (empireActivity == null || empireActivity.Target == null || !(empireActivity.Target is Habitat) || empireActivity.BidTimeRemaining > 0)
                {
                    continue;
                }
                bool flag = false;
                Habitat colony = (Habitat)empireActivity.Target;
                if (empireActivity.RequestingEmpire != _Galaxy.IndependentEmpire)
                {
                    bool flag2 = true;
                    if (empireActivity.ResourceId == byte.MaxValue)
                    {
                        byte deficientResourceId = byte.MaxValue;
                        flag2 = DetermineColonyDeficientInResources(colony, orders, checkForExistingSmugglingMission: false, 0L, 0, out deficientResourceId);
                    }
                    else
                    {
                        flag2 = DetermineColonyDeficientInResource(colony, empireActivity.ResourceId, 0L, 0, empireActivity.RelatedOrder);
                    }
                    if (!flag2)
                    {
                        flag = true;
                    }
                    else if (StateMoney < 0.0 || PrivateMoney < 0.0 || PrivateMoney < num * 2.0)
                    {
                        flag = true;
                    }
                    else if (empireActivity.ExpiryDate < starDate)
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    empireActivityList2.Add(empireActivity);
                }
            }
            for (int j = 0; j < empireActivityList2.Count; j++)
            {
                _Galaxy.RemovePirateSmugglingMissionFromAllEmpires(empireActivityList2[j]);
                _PirateMissions.RemoveEquivalent(empireActivityList2[j]);
                if (_Galaxy.PirateMissions.ContainsEquivalent(empireActivityList2[j].Target, empireActivityList2[j].Type))
                {
                    _Galaxy.PirateMissions.RemoveEquivalent(empireActivityList2[j].Target, empireActivityList2[j].Type);
                }
                if (empireActivityList2[j].RelatedOrder != null)
                {
                    empireActivityList2[j].RelatedOrder.ExpiryDate = _Galaxy.CurrentStarDate;
                }
            }
        }

        public void MakeSmugglingOffersToPirates(long starDate)
        {
            bool flag = false;
            if (this == _Galaxy.IndependentEmpire)
            {
                flag = true;
            }
            else
            {
                switch (Policy.OfferSmugglingPirateMissions)
                {
                    case 1:
                        if (CheckAtWar())
                        {
                            flag = true;
                        }
                        break;
                    case 2:
                        flag = true;
                        break;
                }
            }
            if (!flag)
            {
                return;
            }
            double num = PrivateAnnualRevenue - (AnnualPrivateMaintenanceExcludingUnderConstruction + AnnualTaxRevenue + ThisYearsPrivateFuelCosts);
            int deficientResourceCount = 0;
            IdentifyResourceDeficientColony(out var deficientColony, out var deficientResourceId, out deficientResourceCount);
            if (deficientColony == null)
            {
                return;
            }
            double num2 = 1.0;
            if (deficientResourceCount == 1)
            {
                num2 = CalculatePirateSmugglePricePerUnit(deficientColony, deficientResourceId);
            }
            double num3 = num2 * 500.0;
            double num4 = _PrivateMoney;
            if (this == _Galaxy.IndependentEmpire)
            {
                num4 = double.MaxValue;
            }
            else if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                num4 = _StateMoney;
            }
            if (!(num4 > num3) || !(PrivateMoney > num * 2.0))
            {
                return;
            }
            long expiryDate = starDate + (long)(3.0 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            EmpireActivity empireActivity = new EmpireActivity(this, deficientColony, num2, this, expiryDate, EmpireActivityType.Smuggle);
            if (deficientResourceCount > 1)
            {
                empireActivity.ResourceId = byte.MaxValue;
            }
            else
            {
                empireActivity.ResourceId = deficientResourceId;
            }
            if (_PirateMissions.ContainsEquivalent(empireActivity.Target, empireActivity.Type))
            {
                return;
            }
            int refusalCount = 0;
            if (this != _Galaxy.IndependentEmpire && !CheckTaskAuthorized(_ControlOfferPirateMissions, ref refusalCount, GenerateAutomationMessageOfferPirateSmuggleMission(empireActivity), empireActivity, AdvisorMessageType.OfferPirateSmuggleMission, empireActivity, null))
            {
                return;
            }
            if (empireActivity.ResourceId != byte.MaxValue)
            {
                Order order = (empireActivity.RelatedOrder = CreateOrder(deficientColony, new Resource(empireActivity.ResourceId), 10000, isState: true, OrderType.Standard, expiryDate));
            }
            _PirateMissions.Add(empireActivity);
            _Galaxy.PirateMissions.Add(empireActivity);
            if (this == _Galaxy.IndependentEmpire)
            {
                for (int i = 0; i < _Galaxy.PirateEmpires.Count; i++)
                {
                    Empire empire = _Galaxy.PirateEmpires[i];
                    if (empire != null && empire.PirateEmpireBaseHabitat != null && empire.IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                    {
                        string empty = string.Empty;
                        empty = ((empireActivity.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Pirate Smuggle Mission Available Independent"), empireActivity.Target.Name, new Resource(empireActivity.ResourceId).Name) : string.Format(TextResolver.GetText("Pirate Smuggle Mission Available Independent All Resources"), empireActivity.Target.Name));
                        SendMessageToEmpire(empire, EmpireMessageType.PirateSmugglingMissionAvailable, empireActivity, empty);
                    }
                }
                return;
            }
            for (int j = 0; j < PirateRelations.Count; j++)
            {
                PirateRelation pirateRelation = PirateRelations[j];
                if (pirateRelation != null && pirateRelation.OtherEmpire != null && pirateRelation.OtherEmpire.PirateEmpireBaseHabitat != null && pirateRelation.Type == PirateRelationType.Protection && pirateRelation.OtherEmpire.IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                {
                    string description = string.Format(TextResolver.GetText("Pirate Smuggle Mission Available"), empireActivity.RequestingEmpire.Name, empireActivity.Target.Name);
                    SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.PirateSmugglingMissionAvailable, empireActivity, description);
                }
            }
        }

        private void IdentifyResourceDeficientColony(out Habitat deficientColony, out byte deficientResourceId, out int deficientResourceCount)
        {
            deficientColony = null;
            deficientResourceId = byte.MaxValue;
            deficientResourceCount = 0;
            long num = (long)(0.5 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            OrderList orders = _Galaxy.Orders.GetOrders(this);
            Habitat habitat = null;
            byte b = 0;
            double num2 = 0.0;
            HabitatList habitatList = new HabitatList();
            habitatList = ((this != _Galaxy.IndependentEmpire) ? Colonies : _Galaxy.IndependentColonies);
            for (int i = 0; i < habitatList.Count; i++)
            {
                Habitat habitat2 = habitatList[i];
                if (habitat2 == null || habitat2.HasBeenDestroyed || habitat2.Empire != this || _PirateMissions.ContainsEquivalent(habitat2, EmpireActivityType.Smuggle))
                {
                    continue;
                }
                BuiltObject builtObject = null;
                if (habitat2.HasSpacePort)
                {
                    builtObject = _Galaxy.DetermineSpacePortAtHabitat(habitat2);
                }
                ResourceList resourceList = habitat2.DetermineCriticalResources();
                OrderList orders2 = orders.GetOrders(habitat2);
                if (builtObject != null && builtObject.IsSpacePort)
                {
                    OrderList orders3 = orders.GetOrders(builtObject);
                    if (orders3.Count > 0)
                    {
                        orders2.AddRange(orders3);
                    }
                }
                for (int j = 0; j < orders2.Count; j++)
                {
                    Order order = orders2[j];
                    if (order == null || order.CommodityResource == null)
                    {
                        continue;
                    }
                    int amountOutstandingToContract = order.AmountOutstandingToContract;
                    if (amountOutstandingToContract <= 100)
                    {
                        continue;
                    }
                    long timeSinceOrderPlacement = 0L;
                    _Galaxy.CalculateOrderPlacementDate(order, out timeSinceOrderPlacement);
                    if (timeSinceOrderPlacement <= num)
                    {
                        continue;
                    }
                    int num3 = 0;
                    Cargo cargo = habitat2.Cargo.GetCargo(order.CommodityResource, EmpireId);
                    if (cargo != null)
                    {
                        num3 = cargo.Available;
                    }
                    bool isCriticalResource = resourceList.Contains(order.CommodityResource);
                    int num4 = Galaxy.CalculateResourceLevel(order.CommodityResource, habitat2, isMiningStation: false, isIndependent: false, isCriticalResource, 0);
                    int num5 = (int)((double)num4 * 0.6);
                    if (num3 < num5)
                    {
                        deficientResourceCount++;
                        double num6 = (double)timeSinceOrderPlacement / 1000.0 * (double)amountOutstandingToContract;
                        if (num6 > num2)
                        {
                            habitat = habitat2;
                            b = order.CommodityResource.ResourceID;
                            num2 = num6;
                        }
                    }
                }
            }
            if (num2 > 0.0 && habitat != null)
            {
                deficientColony = habitat;
                deficientResourceId = b;
            }
        }

        public bool DetermineColonyDeficientInResources(Habitat colony, OrderList empireOrders, bool checkForExistingSmugglingMission, long maximumOrderTimeLength, int maximumAmountOutstanding, out byte deficientResourceId)
        {
            deficientResourceId = byte.MaxValue;
            if (colony != null && !colony.HasBeenDestroyed && colony.Empire == this && (!checkForExistingSmugglingMission || !_PirateMissions.ContainsEquivalent(colony, EmpireActivityType.Smuggle)))
            {
                BuiltObject builtObject = null;
                if (colony.HasSpacePort)
                {
                    builtObject = _Galaxy.DetermineSpacePortAtHabitat(colony);
                }
                OrderList orders = empireOrders.GetOrders(colony);
                if (builtObject != null && builtObject.IsSpacePort)
                {
                    OrderList orders2 = empireOrders.GetOrders(builtObject);
                    if (orders2.Count > 0)
                    {
                        orders.AddRange(orders2);
                    }
                }
                int num = Galaxy.Rnd.Next(0, orders.Count);
                for (int i = num; i < orders.Count; i++)
                {
                    Order order = orders[i];
                    if (order == null || order.CommodityResource == null || colony.Resources.ContainsId(order.CommodityResource.ResourceID))
                    {
                        continue;
                    }
                    int amountOutstandingToContract = order.AmountOutstandingToContract;
                    if (amountOutstandingToContract > maximumAmountOutstanding)
                    {
                        long timeSinceOrderPlacement = 0L;
                        _Galaxy.CalculateOrderPlacementDate(order, out timeSinceOrderPlacement);
                        if (timeSinceOrderPlacement > maximumOrderTimeLength)
                        {
                            deficientResourceId = order.CommodityResource.ResourceID;
                            return true;
                        }
                    }
                }
                for (int j = 0; j < num; j++)
                {
                    Order order2 = orders[j];
                    if (order2 == null || order2.CommodityResource == null || colony.Resources.ContainsId(order2.CommodityResource.ResourceID))
                    {
                        continue;
                    }
                    int amountOutstandingToContract2 = order2.AmountOutstandingToContract;
                    if (amountOutstandingToContract2 > maximumAmountOutstanding)
                    {
                        long timeSinceOrderPlacement2 = 0L;
                        _Galaxy.CalculateOrderPlacementDate(order2, out timeSinceOrderPlacement2);
                        if (timeSinceOrderPlacement2 > maximumOrderTimeLength)
                        {
                            deficientResourceId = order2.CommodityResource.ResourceID;
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private bool DetermineColonyDeficientInResource(Habitat colony, byte resourceId, long maximumOrderTimeLength, int maximumAmountOutstanding, Order relatedOrder)
        {
            return DetermineColonyDeficientInResource(colony, resourceId, maximumOrderTimeLength, maximumAmountOutstanding, relatedOrder, _Galaxy.Orders);
        }

        private bool DetermineColonyDeficientInResource(Habitat colony, byte resourceId, long maximumOrderTimeLength, int maximumAmountOutstanding, Order relatedOrder, OrderList orders)
        {
            BuiltObject builtObject = null;
            if (colony.HasSpacePort)
            {
                builtObject = _Galaxy.DetermineSpacePortAtHabitat(colony);
            }
            OrderList orders2 = orders.GetOrders(colony);
            if (builtObject != null && builtObject.IsSpacePort)
            {
                OrderList orders3 = orders.GetOrders(builtObject);
                if (orders3.Count > 0)
                {
                    orders2.AddRange(orders3);
                }
            }
            int num = 0;
            int num2 = 0;
            bool flag = false;
            for (int i = 0; i < orders2.Count; i++)
            {
                Order order = orders2[i];
                if (order != null && order.CommodityResource != null && order.CommodityResource.ResourceID == resourceId && order != relatedOrder)
                {
                    int amountOutstandingToContract = order.AmountOutstandingToContract;
                    num += amountOutstandingToContract;
                    int amountStillToArrive = order.AmountStillToArrive;
                    num2 += amountStillToArrive;
                    long timeSinceOrderPlacement = 0L;
                    _Galaxy.CalculateOrderPlacementDate(order, out timeSinceOrderPlacement);
                    if (timeSinceOrderPlacement > maximumOrderTimeLength)
                    {
                        flag = true;
                    }
                }
            }
            if (flag && (num >= maximumAmountOutstanding || num2 >= maximumAmountOutstanding))
            {
                return true;
            }
            return false;
        }

        private void MakeAttackOffersToPirates(long starDate)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            PirateRelationList relationsAboveThreshold = PirateRelations.GetRelationsAboveThreshold(-50f);
            int num = 100;
            if (ShipGroups != null)
            {
                ShipGroup shipGroup = ShipGroups.IdentifyLargestFleet();
                if (shipGroup != null)
                {
                    num = shipGroup.TotalOverallStrengthFactor;
                }
            }
            EmpireList empireList = _PirateMissions.ResolveAttackTargettedEmpires();
            Empire empire = _Galaxy.IdentifyMechanoidEmpire();
            if (empire != null && !empireList.Contains(empire))
            {
                empireList.Add(empire);
            }
            EmpireEvaluation lowestEvaluationKnownEmpire = EmpireEvaluations.GetLowestEvaluationKnownEmpire(this, empireList);
            bool flag = false;
            if (lowestEvaluationKnownEmpire != null)
            {
                switch (Policy.OfferPirateAttackMissions)
                {
                    case 0:
                        flag = false;
                        break;
                    case 1:
                        if (PirateEmpireBaseHabitat == null && lowestEvaluationKnownEmpire.Empire.PirateEmpireBaseHabitat == null)
                        {
                            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(lowestEvaluationKnownEmpire.Empire);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War)
                            {
                                flag = true;
                            }
                        }
                        break;
                    case 2:
                        if (lowestEvaluationKnownEmpire.OverallAttitude <= -5)
                        {
                            flag = true;
                        }
                        break;
                    case 3:
                        flag = true;
                        break;
                }
                if (flag)
                {
                    DiplomaticRelation relation = ObtainDiplomaticRelation(lowestEvaluationKnownEmpire.Empire);
                    StellarObject stellarObject = IdentifyPirateAttackTargetForRelation(relation, num);
                    if (stellarObject != null)
                    {
                        stellarObjectList.Add(stellarObject);
                    }
                }
            }
            PirateRelation relationWithLowestEvaluation = PirateRelations.GetRelationWithLowestEvaluation();
            if (relationWithLowestEvaluation != null)
            {
                flag = false;
                switch (Policy.OfferPirateAttackMissions)
                {
                    case 0:
                        flag = false;
                        break;
                    case 1:
                        flag = false;
                        break;
                    case 2:
                        if (relationWithLowestEvaluation.Evaluation <= -5f)
                        {
                            flag = true;
                        }
                        break;
                    case 3:
                        flag = true;
                        break;
                }
                if (flag)
                {
                    StellarObject stellarObject2 = IdentifyPirateAttackTargetForRelation(relationWithLowestEvaluation, num);
                    if (stellarObject2 != null)
                    {
                        stellarObjectList.Add(stellarObject2);
                    }
                }
            }
            double num2 = _PirateMissions.CalculateTotalAttackCosts(this);
            for (int i = 0; i < stellarObjectList.Count; i++)
            {
                StellarObject stellarObject3 = stellarObjectList[i];
                if (stellarObject3 == null || stellarObject3.HasBeenDestroyed || stellarObject3.Empire == this)
                {
                    continue;
                }
                double num3 = CalculatePirateAttackPrice(stellarObject3);
                if (!(num2 + num3 < _StateMoney))
                {
                    continue;
                }
                long expiryDate = starDate + (long)(1.0 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
                EmpireActivity empireActivity = new EmpireActivity(stellarObject3.Empire, stellarObject3, num3, this, expiryDate, EmpireActivityType.Attack);
                if (_PirateMissions.ContainsEquivalent(empireActivity.Target, empireActivity.Type))
                {
                    continue;
                }
                int refusalCount = 0;
                if (!CheckTaskAuthorized(_ControlOfferPirateMissions, ref refusalCount, GenerateAutomationMessageOfferPirateAttackMission(empireActivity), empireActivity, AdvisorMessageType.OfferPirateAttackMission, empireActivity, null))
                {
                    continue;
                }
                _PirateMissions.Add(empireActivity);
                _Galaxy.PirateMissions.Add(empireActivity);
                num2 += num3;
                for (int j = 0; j < relationsAboveThreshold.Count; j++)
                {
                    PirateRelation pirateRelation = relationsAboveThreshold[j];
                    if (pirateRelation != null && pirateRelation.OtherEmpire != null && pirateRelation.OtherEmpire.PirateEmpireBaseHabitat != null && pirateRelation.OtherEmpire.IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                    {
                        string description = string.Format(TextResolver.GetText("Pirate Attack Mission Available"), empireActivity.RequestingEmpire.Name, empireActivity.Target.Name);
                        SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.PirateAttackMissionAvailable, empireActivity, description);
                    }
                }
            }
        }

        private void PiratesMakeAttackOffers(long starDate)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            PirateRelationList relationsAboveThreshold = PirateRelations.GetRelationsAboveThreshold(-50f);
            PirateRelation relationWithLowestEvaluation = PirateRelations.GetRelationWithLowestEvaluation();
            bool flag = false;
            if (relationWithLowestEvaluation != null)
            {
                switch (Policy.OfferPirateAttackMissions)
                {
                    case 0:
                        flag = false;
                        break;
                    case 1:
                        if (relationWithLowestEvaluation.Type == PirateRelationType.None && relationWithLowestEvaluation.Evaluation < 0f)
                        {
                            flag = true;
                        }
                        break;
                    case 2:
                        if (relationWithLowestEvaluation.Evaluation <= -5f)
                        {
                            flag = true;
                        }
                        break;
                    case 3:
                        flag = true;
                        break;
                }
                if (flag)
                {
                    int maximumFirepower = 100;
                    if (ShipGroups != null)
                    {
                        ShipGroup shipGroup = ShipGroups.IdentifyLargestFleet();
                        if (shipGroup != null)
                        {
                            maximumFirepower = shipGroup.TotalOverallStrengthFactor;
                        }
                    }
                    StellarObject stellarObject = IdentifyPirateAttackTargetForRelation(relationWithLowestEvaluation, maximumFirepower);
                    if (stellarObject != null)
                    {
                        stellarObjectList.Add(stellarObject);
                    }
                }
            }
            double num = _PirateMissions.CalculateTotalAttackCosts(this);
            for (int i = 0; i < stellarObjectList.Count; i++)
            {
                StellarObject stellarObject2 = stellarObjectList[i];
                if (stellarObject2 == null || stellarObject2.HasBeenDestroyed || stellarObject2.Empire == this)
                {
                    continue;
                }
                Empire empire = stellarObject2.Empire;
                if (stellarObject2 is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)stellarObject2;
                    empire = builtObject.ActualEmpire;
                }
                if (empire == this)
                {
                    continue;
                }
                double num2 = CalculatePirateAttackPrice(stellarObject2);
                if (!(num + num2 < _StateMoney))
                {
                    continue;
                }
                long expiryDate = starDate + (long)(1.0 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
                EmpireActivity empireActivity = new EmpireActivity(empire, stellarObject2, num2, this, expiryDate, EmpireActivityType.Attack);
                if (_PirateMissions.ContainsEquivalent(empireActivity.Target, empireActivity.Type))
                {
                    continue;
                }
                int refusalCount = 0;
                if (!CheckTaskAuthorized(_ControlOfferPirateMissions, ref refusalCount, GenerateAutomationMessageOfferPirateAttackMission(empireActivity), empireActivity, AdvisorMessageType.OfferPirateAttackMission, empireActivity, null))
                {
                    continue;
                }
                _PirateMissions.Add(empireActivity);
                _Galaxy.PirateMissions.Add(empireActivity);
                num += num2;
                for (int j = 0; j < relationsAboveThreshold.Count; j++)
                {
                    PirateRelation pirateRelation = relationsAboveThreshold[j];
                    if (pirateRelation != null && pirateRelation.OtherEmpire != null && pirateRelation.OtherEmpire.PirateEmpireBaseHabitat != null && pirateRelation.OtherEmpire.IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                    {
                        string description = string.Format(TextResolver.GetText("Pirate Attack Mission Available"), empireActivity.RequestingEmpire.Name, empireActivity.Target.Name);
                        SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.PirateAttackMissionAvailable, empireActivity, description);
                    }
                }
            }
        }

        private void PirateCheckMissionsOnOffer(long starDate)
        {
            if (!Policy.BidOnPirateAttackMissions && !Policy.BidOnPirateDefendMissions && !Policy.AcceptPirateSmugglingMissions)
            {
                return;
            }
            int shipCount = 0;
            int pirateEmpireStrength = BuiltObjects.TotalMobileMilitaryFirepowerNotAttackingDefending(out shipCount);
            int num = PirateMissions.CountByType(EmpireActivityType.Attack);
            int num2 = PirateMissions.CountByType(EmpireActivityType.Defend);
            int num3 = 0;
            if (ShipGroups != null)
            {
                num3 = ShipGroups.Count;
            }
            for (int i = 0; i < _Galaxy.PirateMissions.Count; i++)
            {
                EmpireActivity empireActivity = _Galaxy.PirateMissions[i];
                if (empireActivity == null || empireActivity.RequestingEmpire == this || PirateMissions.ContainsEquivalent(empireActivity.Target, empireActivity.Type))
                {
                    continue;
                }
                switch (empireActivity.Type)
                {
                    case EmpireActivityType.Attack:
                        {
                            if (!Policy.BidOnPirateAttackMissions || num + num2 >= num3 || empireActivity.AssignedEmpire == this || !PirateCheckAcceptAttackMission(empireActivity, pirateEmpireStrength))
                            {
                                break;
                            }
                            double num8 = empireActivity.Price * 0.9;
                            double num9 = CalculatePirateMissionPriceWillingToBidFor(empireActivity);
                            if (!(num9 <= num8))
                            {
                                break;
                            }
                            empireActivity.AssignedEmpire = this;
                            if (empireActivity.BidTimeRemaining < 0)
                            {
                                empireActivity.BidTimeRemaining = 60000L;
                            }
                            else
                            {
                                empireActivity.Price = num8;
                                if (empireActivity.BidTimeRemaining < 10000)
                                {
                                    empireActivity.BidTimeRemaining += 10000L;
                                }
                            }
                            num++;
                            break;
                        }
                    case EmpireActivityType.Defend:
                        {
                            if (!Policy.BidOnPirateDefendMissions || num + num2 >= num3 || empireActivity.AssignedEmpire == this || !PirateCheckAcceptDefendMission(empireActivity, pirateEmpireStrength))
                            {
                                break;
                            }
                            double num6 = empireActivity.Price * 0.9;
                            double num7 = CalculatePirateMissionPriceWillingToBidFor(empireActivity);
                            if (!(num7 <= num6))
                            {
                                break;
                            }
                            empireActivity.AssignedEmpire = this;
                            if (empireActivity.BidTimeRemaining < 0)
                            {
                                empireActivity.BidTimeRemaining = 60000L;
                            }
                            else
                            {
                                empireActivity.Price = num6;
                                if (empireActivity.BidTimeRemaining < 10000)
                                {
                                    empireActivity.BidTimeRemaining += 10000L;
                                }
                            }
                            num2++;
                            break;
                        }
                    case EmpireActivityType.Smuggle:
                        {
                            if (!Policy.AcceptPirateSmugglingMissions || !IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                            {
                                break;
                            }
                            int num4 = CountIdleFreighters();
                            int num5 = 1;
                            if (empireActivity.ResourceId != byte.MaxValue)
                            {
                                num5 = CountResourceSupplyLocations(empireActivity.ResourceId, includeIndependentColonies: true);
                            }
                            if (num4 > 0 && num5 > 0)
                            {
                                int refusalCount = 0;
                                if (CheckTaskAuthorized(_ControlOfferPirateMissions, ref refusalCount, GenerateAutomationMessageAcceptPirateSmuggleMission(empireActivity), empireActivity, AdvisorMessageType.AcceptPirateSmugglingMission, empireActivity, null))
                                {
                                    _PirateMissions.Add(empireActivity);
                                }
                            }
                            break;
                        }
                }
            }
        }

        public bool PirateCheckAcceptDefendMission(EmpireActivity defendMission, int pirateEmpireStrength)
        {
            if (PirateEmpireBaseHabitat != null && defendMission != null && defendMission.RequestingEmpire != null && defendMission.Target != null && ShipGroups.Count > 0 && defendMission.RequestingEmpire.DetermineOfferPirateDefendMissionToPirateFaction(this))
            {
                double num = Math.Max((double)Galaxy.SectorSize * 2.0, (double)Galaxy.SizeX * 0.2);
                if (PiratePlayStyle == PiratePlayStyle.Mercenary)
                {
                    num *= 1.5;
                }
                if (defendMission.Target.Empire != this)
                {
                    PirateRelation pirateRelation = null;
                    if (defendMission.RequestingEmpire != _Galaxy.IndependentEmpire && defendMission.RequestingEmpire != null)
                    {
                        pirateRelation = ObtainPirateRelation(defendMission.RequestingEmpire);
                    }
                    if (defendMission.RequestingEmpire == _Galaxy.IndependentEmpire || (pirateRelation != null && pirateRelation.Type != 0 && pirateRelation.Evaluation >= -30f))
                    {
                        PirateRelation pirateRelation2 = null;
                        if (defendMission.TargetEmpire != _Galaxy.IndependentEmpire && defendMission.TargetEmpire != null)
                        {
                            pirateRelation2 = ObtainPirateRelation(defendMission.TargetEmpire);
                        }
                        if ((defendMission.TargetEmpire == _Galaxy.IndependentEmpire || (pirateRelation2 != null && pirateRelation2.Type == PirateRelationType.Protection)) && defendMission.ResolveTargetCoordinates(out var x, out var y))
                        {
                            double num2 = _Galaxy.CalculateDistance(PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos, x, y);
                            if (num2 < num)
                            {
                                int num3 = 0;
                                if (defendMission.Target != null)
                                {
                                    if (defendMission.Target is BuiltObject)
                                    {
                                        BuiltObject builtObject = (BuiltObject)defendMission.Target;
                                        num3 = builtObject.Size / 20;
                                    }
                                    else if (defendMission.Target is Habitat)
                                    {
                                        Habitat habitat = (Habitat)defendMission.Target;
                                        num3 = habitat.EstimatedDefensiveForceRequired(atWar: false);
                                    }
                                }
                                if (pirateEmpireStrength > num3)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        public bool PirateCheckAcceptAttackMission(EmpireActivity attackMission, int pirateEmpireStrength)
        {
            if (PirateEmpireBaseHabitat != null && attackMission != null && attackMission.Target != null && ShipGroups.Count > 0)
            {
                double num = Math.Max((double)Galaxy.SectorSize * 3.0, (double)Galaxy.SizeX * 0.3);
                if (PiratePlayStyle == PiratePlayStyle.Mercenary)
                {
                    num *= 1.5;
                }
                Empire empire = attackMission.Target.Empire;
                if (attackMission.Target is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)attackMission.Target;
                    empire = builtObject.ActualEmpire;
                }
                if (empire != this && attackMission.RequestingEmpire != null)
                {
                    PirateRelation pirateRelation = ObtainPirateRelation(attackMission.RequestingEmpire);
                    if (pirateRelation.Type != 0 && pirateRelation.Evaluation >= -50f && empire != null)
                    {
                        PirateRelation pirateRelation2 = ObtainPirateRelation(empire);
                        if (pirateRelation2.Type != PirateRelationType.Protection && attackMission.ResolveTargetCoordinates(out var x, out var y))
                        {
                            double num2 = _Galaxy.CalculateDistance(PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos, x, y);
                            if (num2 < num)
                            {
                                int num3 = 0;
                                if (attackMission.Target != null && attackMission.Target is BuiltObject)
                                {
                                    BuiltObject builtObject2 = (BuiltObject)attackMission.Target;
                                    num3 = builtObject2.FirepowerRaw + builtObject2.CurrentEscortForceAssigned;
                                }
                                if (pirateEmpireStrength > num3)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        private StellarObject IdentifyPirateAttackTargetForRelation(PirateRelation relation, int maximumFirepower)
        {
            if (relation != null && relation.Type != 0)
            {
                if (KnownPirateBases != null)
                {
                    for (int i = 0; i < KnownPirateBases.Count; i++)
                    {
                        BuiltObject builtObject = KnownPirateBases[i];
                        if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.CalculateOverallStrengthFactor() <= maximumFirepower && builtObject.Empire == relation.OtherEmpire)
                        {
                            return builtObject;
                        }
                    }
                }
                if (PirateEmpireBaseHabitat != null)
                {
                    return _Galaxy.FindNearestKnownBase(this, PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos, relation.OtherEmpire, maximumFirepower);
                }
                if (Capital != null)
                {
                    return _Galaxy.FindNearestKnownBase(this, Capital.Xpos, Capital.Ypos, relation.OtherEmpire, maximumFirepower);
                }
            }
            return null;
        }

        private StellarObject IdentifyPirateAttackTargetForRelation(DiplomaticRelation relation, int maximumOverallStrength)
        {
            if (relation != null && relation.OtherEmpire != this && relation.Type != 0)
            {
                BuiltObject builtObject = null;
                switch (relation.Strategy)
                {
                    case DiplomaticStrategy.Conquer:
                        if (relation.WarObjectiveBases != null)
                        {
                            for (int i = 0; i < relation.WarObjectiveBases.Count; i++)
                            {
                                BuiltObject builtObject2 = relation.WarObjectiveBases[i];
                                if (builtObject2 != null && !builtObject2.HasBeenDestroyed && builtObject2.Empire == relation.OtherEmpire && builtObject2.CalculateOverallStrengthFactor() <= maximumOverallStrength && (builtObject2.ParentHabitat == null || builtObject2.ParentHabitat.Empire != relation.OtherEmpire))
                                {
                                    return builtObject2;
                                }
                            }
                        }
                        builtObject = _Galaxy.FindNearestKnownBase(this, Capital.Xpos, Capital.Ypos, relation.OtherEmpire, maximumOverallStrength);
                        if (builtObject != null)
                        {
                            return builtObject;
                        }
                        break;
                    case DiplomaticStrategy.Undermine:
                    case DiplomaticStrategy.DefendUndermine:
                    case DiplomaticStrategy.Punish:
                        builtObject = _Galaxy.FindNearestKnownBase(this, Capital.Xpos, Capital.Ypos, relation.OtherEmpire, maximumOverallStrength);
                        if (builtObject != null)
                        {
                            return builtObject;
                        }
                        break;
                    default:
                        builtObject = _Galaxy.FindNearestKnownBase(this, Capital.Xpos, Capital.Ypos, relation.OtherEmpire, maximumOverallStrength);
                        if (builtObject != null)
                        {
                            return builtObject;
                        }
                        break;
                }
            }
            return null;
        }

        public double CalculatePirateMissionPriceWillingToBidFor(EmpireActivity mission)
        {
            double result = 0.0;
            if (mission != null && mission.Target != null)
            {
                double num = 0.0;
                Random random = new Random((int)mission.Target.Xpos + EmpireId);
                switch (mission.Type)
                {
                    case EmpireActivityType.Attack:
                        num = CalculatePirateAttackPrice(mission.Target);
                        break;
                    case EmpireActivityType.Defend:
                        num = CalculatePirateDefendPrice(mission.Target);
                        break;
                }
                result = num * 0.4 + random.NextDouble() * num * 0.35;
            }
            return result;
        }

        public double CalculatePirateAttackPrice(StellarObject target)
        {
            double result = double.MaxValue;
            if (target is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)target;
                if (IsObjectVisibleToThisEmpire(builtObject))
                {
                    int num = builtObject.FirepowerRaw + builtObject.CurrentEscortForceAssigned;
                    result = 100.0 * Math.Max(num, (double)builtObject.Size * 0.1);
                }
                else
                {
                    result = 100.0 * Math.Max(builtObject.FirepowerRaw, (double)builtObject.Size * 0.1);
                }
            }
            return result;
        }

        public double CalculatePirateDefendPrice(StellarObject target)
        {
            double result = 0.0;
            if (target is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)target;
                int firepowerRaw = builtObject.FirepowerRaw;
                int num = builtObject.Size / 10;
                int num2 = Math.Max(5, num - firepowerRaw);
                if (num2 > 0)
                {
                    result = Math.Max(1000.0, Math.Min(8000.0, (double)num2 * 200.0));
                }
            }
            else if (target is Habitat)
            {
                Habitat habitat = (Habitat)target;
                int num3 = habitat.EstimatedDefensiveForceRequired(CheckAtWar());
                int num4 = num3;
                if (num4 > 0)
                {
                    result = Math.Max(5000.0, Math.Min(30000.0, 200.0 * (double)num4));
                }
            }
            return result;
        }

        public double CalculatePirateSmugglePricePerUnit(Habitat colony, byte resourceId)
        {
            //double num = 0.0;
            double num2 = _Galaxy.ResourceCurrentPrices[resourceId];
            return Math.Min(5.0, Math.Max(0.1, num2 * 0.5));
        }

        public float CalculatePirateDesireControlColoniesCommon(Empire otherEmpire, int colonyTargetListDepth)
        {
            float num = 0f;
            if (PirateEmpireBaseHabitat != null && ColonizationTargets != null && Colonies != null)
            {
                HabitatList habitatList = new HabitatList();
                habitatList.AddRange(Colonies);
                habitatList.AddRange(ColonizationTargets.ResolveHabitats());
                if (otherEmpire != null)
                {
                    if (otherEmpire.PirateEmpireBaseHabitat != null)
                    {
                        if (otherEmpire.ColonizationTargets != null && otherEmpire.Colonies != null)
                        {
                            HabitatList habitatList2 = new HabitatList();
                            habitatList2.AddRange(otherEmpire.Colonies);
                            habitatList2.AddRange(otherEmpire.ColonizationTargets.ResolveHabitats());
                            for (int i = 0; i < colonyTargetListDepth; i++)
                            {
                                if (habitatList.Count <= i)
                                {
                                    continue;
                                }
                                Habitat habitat = habitatList[i];
                                if (habitat != null)
                                {
                                    int num2 = habitatList2.IndexOf(habitat);
                                    if (num2 >= 0 && num2 < colonyTargetListDepth)
                                    {
                                        num -= 10f;
                                    }
                                }
                            }
                        }
                    }
                    else if (otherEmpire.ColonizationTargets != null)
                    {
                        for (int j = 0; j < colonyTargetListDepth; j++)
                        {
                            if (habitatList.Count > j)
                            {
                                Habitat habitat2 = habitatList[j];
                                if (habitat2 != null && otherEmpire.Colonies.Contains(habitat2))
                                {
                                    num -= 10f;
                                }
                            }
                        }
                    }
                }
            }
            return num;
        }

        public bool CheckPirateDesireControlColoniesCommon(Empire otherEmpire, int depth)
        {
            if (PirateEmpireBaseHabitat != null && ColonizationTargets != null && Colonies != null)
            {
                HabitatList habitatList = new HabitatList();
                habitatList.AddRange(Colonies);
                habitatList.AddRange(ColonizationTargets.ResolveHabitats());
                if (otherEmpire != null)
                {
                    if (otherEmpire.PirateEmpireBaseHabitat != null)
                    {
                        if (otherEmpire.ColonizationTargets != null && otherEmpire.Colonies != null)
                        {
                            HabitatList habitatList2 = new HabitatList();
                            habitatList2.AddRange(otherEmpire.Colonies);
                            habitatList2.AddRange(otherEmpire.ColonizationTargets.ResolveHabitats());
                            for (int i = 0; i < depth; i++)
                            {
                                if (habitatList.Count <= i)
                                {
                                    continue;
                                }
                                Habitat habitat = habitatList[i];
                                if (habitat != null)
                                {
                                    int num = habitatList2.IndexOf(habitat);
                                    if (num >= 0 && num < depth)
                                    {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    else if (otherEmpire.ColonizationTargets != null)
                    {
                        for (int j = 0; j < depth; j++)
                        {
                            if (habitatList.Count > j)
                            {
                                Habitat habitat2 = habitatList[j];
                                if (habitat2 != null && otherEmpire.Colonies.Contains(habitat2))
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        private void ReviewPirateRelations(long starDate, double timePassed)
        {
            if (PirateRelations == null)
            {
                return;
            }
            bool flag = false;
            Design design = _LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Escort, this);
            if (design != null && design.FirepowerRaw > 0 && design.ShieldsCapacity > 0)
            {
                flag = true;
            }
            double num = 0.5;
            if (!flag)
            {
                num = 0.85;
            }
            long num2 = (long)((double)Galaxy.RealSecondsInGalacticYear * 1.0 * 1000.0);
            int num3 = _Galaxy.PirateEmpires.Count;
            if (PirateRelations != null)
            {
                num3 = PirateRelations.CountKnownPirateFactions();
            }
            double num4 = Math.Min(7.0, Math.Max(1.0, (double)num3 / 3.0));
            num2 = (long)((double)num2 * num4);
            long num5 = (long)((double)Galaxy.RealSecondsInGalacticYear * 0.25);
            long num6 = (long)(((double)num5 * 0.5 + (double)num5 * 0.5 * Galaxy.Rnd.NextDouble()) * num4);
            num2 += num6;
            long num7 = starDate - num2;
            CharacterList charactersByRole = Characters.GetCharactersByRole(CharacterRole.Leader);
            int num8 = -100;
            for (int i = 0; i < charactersByRole.Count; i++)
            {
                Character character = charactersByRole[i];
                if (character != null && character.Role == CharacterRole.Leader)
                {
                    num8 = Math.Max(num8, character.Diplomacy);
                }
            }
            if (num8 <= -100)
            {
                num8 = 0;
            }
            float diplomacyFactor = 1f + (float)num8 / 100f;
            PirateRelationList pirateRelationList = new PirateRelationList();
            for (int j = 0; j < PirateRelations.Count; j++)
            {
                PirateRelation pirateRelation = PirateRelations[j];
                if (pirateRelation == null || pirateRelation.Type == PirateRelationType.NotMet)
                {
                    continue;
                }
                if (pirateRelation.OtherEmpire == null || !pirateRelation.OtherEmpire.Active || pirateRelation.ThisEmpire == null || !pirateRelation.ThisEmpire.Active)
                {
                    pirateRelationList.AddRaw(pirateRelation);
                    continue;
                }
                pirateRelation.DiplomacyFactor = diplomacyFactor;
                float neutralizationAmount = (float)(5.0 * (timePassed / ((double)Galaxy.RealSecondsInGalacticYear * 1000.0)));
                pirateRelation.NeutralizeEvaluation(neutralizationAmount);
                if (_ControlDiplomacyTreaties == AutomationLevel.Manual)
                {
                    continue;
                }
                PirateRelationType type = pirateRelation.Type;
                if (type != PirateRelationType.Protection || PirateEmpireBaseHabitat != null)
                {
                    continue;
                }
                double num9 = 0.0;
                PirateRelation pirateRelation2 = pirateRelation.OtherEmpire.ObtainPirateRelation(this);
                double monthlyFee = 0.0;
                if (pirateRelation2 != null)
                {
                    monthlyFee = pirateRelation2.MonthlyProtectionFeeToThisEmpire;
                    num9 = pirateRelation2.MonthlyProtectionFeeToThisEmpire * 12.0;
                }
                double num10 = CalculateAnnualCashflow();
                double num11 = num10 * num;
                if (num9 > num11)
                {
                    if (pirateRelation.LastChangeDate < num7)
                    {
                        int refusalCount = 0;
                        if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageCancelPirateProtection(pirateRelation.OtherEmpire, monthlyFee), pirateRelation.OtherEmpire, AdvisorMessageType.TreatyOffer, PirateRelationType.None, null))
                        {
                            ChangePirateRelation(pirateRelation.OtherEmpire, PirateRelationType.None, starDate);
                            string text = TextResolver.GetText("Cancel Pirate Protection");
                            SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.CancelPirateProtection, this, text);
                        }
                    }
                }
                else if (!DetermineDesirePirateProtection(pirateRelation.OtherEmpire) && pirateRelation.LastChangeDate < num7)
                {
                    int refusalCount2 = 0;
                    if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount2, GenerateAutomationMessageCancelPirateProtection(pirateRelation.OtherEmpire, monthlyFee), pirateRelation.OtherEmpire, AdvisorMessageType.TreatyOffer, PirateRelationType.None, null))
                    {
                        ChangePirateRelation(pirateRelation.OtherEmpire, PirateRelationType.None, starDate);
                        string text2 = TextResolver.GetText("Cancel Pirate Protection");
                        SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.CancelPirateProtection, this, text2);
                    }
                }
            }
            for (int k = 0; k < pirateRelationList.Count; k++)
            {
                PirateRelations.Remove(pirateRelationList[k]);
            }
        }

        private void PirateReviewEmpireRelations(long starDate, double timePassed)
        {
            if (PirateRelations == null)
            {
                return;
            }
            double num = Math.Max((double)Galaxy.SectorSize * 2.0, (double)Galaxy.SizeX * 0.2);
            PiratePlayStyle piratePlayStyle = PiratePlayStyle;
            if (piratePlayStyle == PiratePlayStyle.Balanced || piratePlayStyle == PiratePlayStyle.Smuggler)
            {
                num *= 2.0;
            }
            long num2 = (long)((double)Galaxy.RealSecondsInGalacticYear * 1.0 * 1000.0);
            CharacterList charactersByRole = Characters.GetCharactersByRole(CharacterRole.PirateLeader);
            int num3 = -100;
            for (int i = 0; i < charactersByRole.Count; i++)
            {
                Character character = charactersByRole[i];
                if (character != null && character.Role == CharacterRole.PirateLeader)
                {
                    num3 = Math.Max(num3, character.Diplomacy);
                }
            }
            if (num3 <= -100)
            {
                num3 = 0;
            }
            float diplomacyFactor = 1f + (float)num3 / 100f;
            PirateRelationList pirateRelationList = new PirateRelationList();
            for (int j = 0; j < PirateRelations.Count; j++)
            {
                PirateRelation pirateRelation = PirateRelations[j];
                if (pirateRelation == null || pirateRelation.Type == PirateRelationType.NotMet)
                {
                    continue;
                }
                if (pirateRelation.OtherEmpire == null || !pirateRelation.OtherEmpire.Active || pirateRelation.ThisEmpire == null || !pirateRelation.ThisEmpire.Active)
                {
                    pirateRelationList.AddRaw(pirateRelation);
                    continue;
                }
                long num4 = CalculateNextAllowableProposalDate(pirateRelation);
                long num5 = CalculateNextAllowableChangeDate(pirateRelation);
                if (pirateRelation.Type == PirateRelationType.Protection && pirateRelation.ThisEmpire == this)
                {
                    double num6 = 12.0 * ((double)(starDate - pirateRelation.LastProtectionFeePaymentDate) / ((double)Galaxy.RealSecondsInGalacticYear * 1000.0));
                    double num7 = num6 * pirateRelation.MonthlyProtectionFeeToThisEmpire;
                    pirateRelation.ThisEmpire.StateMoney += num7;
                    pirateRelation.ThisEmpire.PirateEconomy.PerformIncome(num7, PirateIncomeType.ProtectionAgreement, starDate);
                    pirateRelation.ThisEmpire.Counters.PirateProtectionIncome += num7;
                    pirateRelation.OtherEmpire.StateMoney -= num7;
                    pirateRelation.LastProtectionFeePaymentDate = starDate;
                }
                pirateRelation.DiplomacyFactor = diplomacyFactor;
                float neutralizationAmount = (float)(5.0 * (timePassed / (double)Galaxy.RealSecondsInGalacticYear));
                pirateRelation.NeutralizeEvaluation(neutralizationAmount);
                float evaluationLongRelationship = 0f;
                if (pirateRelation.Type == PirateRelationType.Protection)
                {
                    long num8 = pirateRelation.RelationshipLength(starDate);
                    long num9 = (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * 0.5);
                    if (num8 > num9)
                    {
                        double num10 = (double)Galaxy.RealSecondsInGalacticYear * 1000.0 * 0.16667;
                        evaluationLongRelationship = (float)((double)(num8 - num9) / num10);
                        evaluationLongRelationship = Math.Max(0f, Math.Min(20f, evaluationLongRelationship));
                    }
                }
                PiratePlayStyle piratePlayStyle2 = PiratePlayStyle;
                if (piratePlayStyle2 != PiratePlayStyle.Pirate)
                {
                    pirateRelation.EvaluationLongRelationship = evaluationLongRelationship;
                }
                pirateRelation.EvaluationCovetedColonies = CalculatePirateDesireControlColoniesCommon(pirateRelation.OtherEmpire, 3);
                if (_ControlDiplomacyTreaties == AutomationLevel.Manual)
                {
                    continue;
                }
                switch (pirateRelation.Type)
                {
                    case PirateRelationType.None:
                        if (PirateEmpireBaseHabitat == null || !DetermineDesirePirateProtection(pirateRelation.OtherEmpire))
                        {
                            break;
                        }
                        if (pirateRelation.OtherEmpire.PirateEmpireBaseHabitat != null)
                        {
                            if (starDate >= num4)
                            {
                                int refusalCount2 = 0;
                                if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount2, GenerateAutomationMessagePirateProtectionToPirates(pirateRelation.OtherEmpire), pirateRelation.OtherEmpire, AdvisorMessageType.TreatyOffer, PirateRelationType.Protection, null))
                                {
                                    string text = TextResolver.GetText("Pirate Offer Protection Other Pirate");
                                    EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.PirateOfferProtection, null);
                                    empireMessage.Description = text;
                                    empireMessage.Money = 0;
                                    SendMessageToEmpire(empireMessage, pirateRelation.OtherEmpire);
                                    pirateRelation.LastOfferDate = starDate;
                                }
                            }
                        }
                        else if (CheckWithinProximityOfNearestColony(pirateRelation.OtherEmpire, this, num) && starDate >= num4)
                        {
                            double num11 = CalculatePirateProtectionPricePerMonth(pirateRelation.OtherEmpire);
                            int refusalCount3 = 0;
                            if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount3, GenerateAutomationMessagePirateProtection(pirateRelation.OtherEmpire, num11), pirateRelation.OtherEmpire, AdvisorMessageType.TreatyOffer, PirateRelationType.Protection, null))
                            {
                                string text2 = TextResolver.GetText("Pirate Offer Protection");
                                EmpireMessage empireMessage2 = new EmpireMessage(this, EmpireMessageType.PirateOfferProtection, null);
                                empireMessage2.Description = text2;
                                empireMessage2.Money = (int)num11;
                                SendMessageToEmpire(empireMessage2, pirateRelation.OtherEmpire);
                                pirateRelation.LastOfferDate = starDate;
                            }
                        }
                        break;
                    case PirateRelationType.Protection:
                        if (PirateEmpireBaseHabitat != null && !DetermineDesirePirateProtection(pirateRelation.OtherEmpire) && starDate >= num5)
                        {
                            PirateRelation pirateRelation2 = pirateRelation.OtherEmpire.ObtainPirateRelation(this);
                            int refusalCount = 0;
                            if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageCancelPirateProtection(pirateRelation.OtherEmpire, pirateRelation2.MonthlyProtectionFeeToThisEmpire), pirateRelation.OtherEmpire, AdvisorMessageType.TreatyOffer, PirateRelationType.None, null))
                            {
                                ChangePirateRelation(pirateRelation.OtherEmpire, PirateRelationType.None, starDate);
                                string empty = string.Empty;
                                SendMessageToEmpire(description: (pirateRelation.OtherEmpire.PirateEmpireBaseHabitat == null) ? TextResolver.GetText("Pirates Cancel Pirate Protection Normal") : TextResolver.GetText("Pirates Cancel Pirate Protection Pirates"), recipientEmpire: pirateRelation.OtherEmpire, messageType: EmpireMessageType.CancelPirateProtection, subject: this);
                            }
                        }
                        break;
                }
            }
            for (int k = 0; k < pirateRelationList.Count; k++)
            {
                PirateRelations.Remove(pirateRelationList[k]);
            }
        }

        public double CalculatePirateProtectionPricePerMonth(Empire empireToProtect)
        {
            double pirateAttackForcesFactor = 0.0;
            return CalculatePirateProtectionPricePerMonth(empireToProtect, out pirateAttackForcesFactor);
        }

        public double CalculatePirateProtectionPricePerMonth(Empire empireToProtect, out double pirateAttackForcesFactor)
        {
            pirateAttackForcesFactor = 0.0;
            double result = 0.0;
            if (PirateEmpireBaseHabitat != null)
            {
                if (empireToProtect.PirateEmpireBaseHabitat != null)
                {
                    result = 0.0;
                }
                else
                {
                    double num = Math.Sqrt((double)empireToProtect.TotalColonyStrategicValue / 1000000.0);
                    double val = ((double)BuiltObjects.TotalMobileMilitaryFirepower() + 1.0) / ((double)empireToProtect.BuiltObjects.TotalMobileMilitaryFirepower() + 1.0);
                    val = Math.Max(0.05, Math.Min(0.4, val));
                    double num2 = 1.0;
                    PirateRelation pirateRelation = ObtainPirateRelation(empireToProtect);
                    if (pirateRelation != null)
                    {
                        float evaluation = pirateRelation.Evaluation;
                        if (evaluation < 0f)
                        {
                            num2 = Math.Min(4.0, Math.Max(1.0, 1f + Math.Abs(evaluation) / 15f));
                        }
                    }
                    double num3 = 1.0;
                    int num4 = BuiltObjects.CalculateAttackingFirepowerNearEmpireTargets(empireToProtect);
                    if (num4 > 0)
                    {
                        int num5 = 1 + empireToProtect.BuiltObjects.TotalMobileMilitaryFirepower();
                        num3 = Math.Min(4.0, 2.0 + (double)num4 / (double)num5);
                        pirateAttackForcesFactor = num3 - 2.0;
                    }
                    double num6 = 1000.0 * val * num * num2 * num3;
                    double annualEmpireExpenses = 0.0;
                    double num7 = empireToProtect.CalculateAccurateAnnualCashflowIncludingUnderConstruction(out annualEmpireExpenses);
                    double num8 = num7 / 12.0;
                    double num9 = val * num2 * num3 / num;
                    result = Math.Min(num6, Math.Max(num6 * 0.4, num8 * num9));
                    result = Math.Round(result, 0);
                }
            }
            return result;
        }

        private double CalculateDistanceToNearestColony(Empire normalEmpire, Empire pirateEmpire)
        {
            double result = double.MaxValue;
            Habitat habitat = null;
            if (pirateEmpire.PirateEmpireBaseHabitat != null)
            {
                habitat = _Galaxy.FastFindNearestColony(pirateEmpire.PirateEmpireBaseHabitat.Xpos, pirateEmpire.PirateEmpireBaseHabitat.Ypos, normalEmpire, 0);
            }
            else if (pirateEmpire.Capital != null)
            {
                habitat = _Galaxy.FastFindNearestColony(pirateEmpire.Capital.Xpos, pirateEmpire.Capital.Ypos, normalEmpire, 0);
            }
            if (habitat != null)
            {
                if (pirateEmpire.PirateEmpireBaseHabitat != null)
                {
                    result = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, pirateEmpire.PirateEmpireBaseHabitat.Xpos, pirateEmpire.PirateEmpireBaseHabitat.Ypos);
                }
                else if (pirateEmpire.Capital != null)
                {
                    result = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, pirateEmpire.Capital.Xpos, pirateEmpire.Capital.Ypos);
                }
            }
            return result;
        }

        private bool CheckWithinProximityOfNearestColony(Empire normalEmpire, Empire pirateEmpire, double range)
        {
            Habitat habitat = null;
            if (pirateEmpire.PirateEmpireBaseHabitat != null)
            {
                habitat = _Galaxy.FastFindNearestColony(pirateEmpire.PirateEmpireBaseHabitat.Xpos, pirateEmpire.PirateEmpireBaseHabitat.Ypos, normalEmpire, 0);
            }
            else if (pirateEmpire.Capital != null)
            {
                habitat = _Galaxy.FastFindNearestColony(pirateEmpire.Capital.Xpos, pirateEmpire.Capital.Ypos, normalEmpire, 0);
            }
            if (habitat != null)
            {
                double num = double.MaxValue;
                if (pirateEmpire.PirateEmpireBaseHabitat != null)
                {
                    num = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, pirateEmpire.PirateEmpireBaseHabitat.Xpos, pirateEmpire.PirateEmpireBaseHabitat.Ypos);
                }
                else if (pirateEmpire.Capital != null)
                {
                    num = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, pirateEmpire.Capital.Xpos, pirateEmpire.Capital.Ypos);
                }
                if (num < range)
                {
                    return true;
                }
            }
            return false;
        }

        public bool DetermineDesirePirateProtection(Empire otherEmpire)
        {
            if (otherEmpire != null)
            {
                if (PirateEmpireBaseHabitat == null)
                {
                    if (otherEmpire.PirateEmpireBaseHabitat == null)
                    {
                        return false;
                    }
                    double pirateAttackForcesFactor = 0.0;
                    double num = otherEmpire.CalculatePirateProtectionPricePerMonth(this, out pirateAttackForcesFactor);
                    PirateRelation pirateRelation = ObtainPirateRelation(otherEmpire);
                    double num2 = CalculateDistanceToNearestColony(this, otherEmpire);
                    bool flag = false;
                    bool flag2 = false;
                    Design design = _LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Escort, this);
                    Design design2 = _LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Escort, this);
                    if (design != null && design2 != null && (design.ShieldsCapacity > 0 || design2.ShieldsCapacity > 0))
                    {
                        flag2 = true;
                    }
                    int num3 = BuiltObjects.TotalMobileMilitaryFirepower();
                    if (num3 > 0)
                    {
                        flag = true;
                    }
                    double num4 = 0.4;
                    if (pirateAttackForcesFactor > 0.0)
                    {
                        num4 *= 1.5 + pirateAttackForcesFactor;
                    }
                    if (!flag || !flag2)
                    {
                        num4 = 0.9;
                    }
                    num4 = Math.Min(num4, 0.9);
                    int num5 = otherEmpire.BuiltObjects.TotalMobileMilitaryFirepower();
                    int num6 = BuiltObjects.TotalMobileMilitaryFirepower();
                    float num7 = ((float)num5 + 0.05f) / ((float)num6 + 0.05f);
                    if (num7 > 1f)
                    {
                        float num8 = (float)Math.Sqrt(Math.Min(10.0, num7));
                        num4 *= (double)num8;
                    }
                    if (CheckSufficientCashflow(num * 12.0, num4) && (num == 0.0 || StateMoney >= num))
                    {
                        if ((double)pirateRelation.Evaluation >= 5.0 && num2 < (double)Galaxy.SectorSize * 2.0)
                        {
                            return true;
                        }
                        float num9 = Math.Min(0f, Math.Max(-2000f, num7 * -10f + 5f));
                        if (pirateRelation.Evaluation > num9)
                        {
                            return true;
                        }
                    }
                }
                else if (otherEmpire.PirateEmpireBaseHabitat == null)
                {
                    PirateRelation pirateRelation2 = ObtainPirateRelation(otherEmpire);
                    if (pirateRelation2.Evaluation >= 0f)
                    {
                        return true;
                    }
                    int num10 = otherEmpire.BuiltObjects.TotalMobileMilitaryFirepower();
                    int num11 = BuiltObjects.TotalMobileMilitaryFirepower();
                    float num12 = ((float)num10 + 0.05f) / ((float)num11 + 0.05f);
                    float num13 = Math.Min(0f, Math.Max(-35f, num12 * -10f + 5f));
                    if (pirateRelation2.Evaluation > num13)
                    {
                        return true;
                    }
                }
                else
                {
                    PirateRelation pirateRelation3 = ObtainPirateRelation(otherEmpire);
                    if (pirateRelation3.Evaluation >= 0f && !CheckPirateDesireControlColoniesCommon(otherEmpire, 3))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private void PirateCollectTaxes(double timePassed)
        {
            double privateAnnualRevenue = PrivateAnnualRevenue;
            double num = privateAnnualRevenue * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            if (double.IsNaN(num))
            {
                num = 0.0;
            }
            Counters.ProcessColonyRevenue(num);
            _PrivateMoney += num;
            double annualTaxRevenue = AnnualTaxRevenue;
            double val = annualTaxRevenue * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            val = Math.Max(0.0, val);
            if (double.IsNaN(val))
            {
                val = 0.0;
            }
            val = ApplyCorruptionToIncome(val);
            _StateMoney += val;
            _PrivateMoney -= val;
            PirateEconomy.PerformIncome(val, PirateIncomeType.ControlColony, _Galaxy.CurrentStarDate);
            if (double.IsNaN(_StateMoney))
            {
                _StateMoney = 0.0;
            }
            if (double.IsNaN(_PrivateMoney))
            {
                _PrivateMoney = 0.0;
            }
        }

        public int CountPirateCriminalNetworks()
        {
            int num = 0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat == null || habitat.HasBeenDestroyed || habitat.Facilities == null || habitat.Facilities.Count <= 0)
                {
                    continue;
                }
                if (habitat.Empire == this)
                {
                    num += habitat.Facilities.CountByType(PlanetaryFacilityType.PirateCriminalNetwork);
                    continue;
                }
                PirateColonyControl byFacilityControl = habitat.GetPirateControl().GetByFacilityControl();
                if (byFacilityControl != null && byFacilityControl.EmpireId == EmpireId)
                {
                    num += habitat.Facilities.CountByType(PlanetaryFacilityType.PirateCriminalNetwork);
                }
            }
            return num;
        }

        private void PirateCollectIncomeFromControlledColonies(double timePassed)
        {
            double num = 0.0;
            double num2 = timePassed / (double)Galaxy.RealSecondsInGalacticYear;
            bool flag = false;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat == null || habitat.HasBeenDestroyed)
                {
                    continue;
                }
                if (habitat.Empire == this && !habitat.CheckColonyRevenueFromPirateControl(this))
                {
                    flag = true;
                    continue;
                }
                PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(this);
                if (byFaction == null)
                {
                    continue;
                }
                double num3 = 1.0;
                if (habitat.Facilities != null)
                {
                    PlanetaryFacility planetaryFacility = habitat.Facilities.FindBestCompletedPirateFacility(includeCriminalNetwork: true);
                    if (planetaryFacility != null)
                    {
                        num3 += (double)planetaryFacility.Value2 / 100.0;
                    }
                }
                double num4 = num2 * Math.Max(0.0, habitat.AnnualRevenue) * (double)byFaction.ControlLevel * 1.2 * num3;
                num4 *= ColonyIncomeFactor;
                num += num4;
            }
            num = ApplyCorruptionToIncome(num);
            StateMoney += num;
            PirateEconomy.PerformIncome(num, PirateIncomeType.ControlColony, _Galaxy.CurrentStarDate);
            if (flag)
            {
                RecalculateColonyTaxRevenues();
                if (_ControlColonyTaxRates)
                {
                    ReviewTaxes();
                }
                PirateCollectTaxes(timePassed);
            }
        }

        private void ReviewFleetAdmiralBonuses()
        {
            if (ShipGroups != null)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroups[i].ReviewAdmiralBonuses();
                }
            }
        }

        public double AverageStateCashPerPopulation()
        {
            return StateMoney / (double)Math.Max(1L, TotalPopulation);
        }

        public double AverageCashflowPerPopulation()
        {
            double num = CalculateAccurateAnnualCashflow();
            return num / (double)Math.Max(1L, TotalPopulation);
        }

        public double AverageShipMaintenancePerPopulation()
        {
            double annualStateMaintenanceExcludingUnderConstruction = AnnualStateMaintenanceExcludingUnderConstruction;
            return annualStateMaintenanceExcludingUnderConstruction / (double)Math.Max(1L, TotalPopulation);
        }

        public double AverageMilitaryStrengthPerPopulation()
        {
            double num = MilitaryPotency;
            return num / (double)Math.Max(1L, TotalPopulation);
        }

        public double AverageSpaceportsPerColony()
        {
            double num = 0.0;
            if (SpacePorts != null)
            {
                num = SpacePorts.Count;
            }
            double val = 0.01;
            if (Colonies != null)
            {
                val = Colonies.Count;
            }
            return num / Math.Max(1.0, val);
        }

        public double AverageResearchStationsPerColony()
        {
            double num = 0.0;
            if (ResearchFacilities != null)
            {
                num = ResearchFacilities.Count;
            }
            double val = 0.01;
            if (Colonies != null)
            {
                val = Colonies.Count;
            }
            return num / Math.Max(1.0, val);
        }

        public double AverageMiningStationsPerColony()
        {
            double num = 0.0;
            if (MiningStations != null)
            {
                num = MiningStations.Count;
            }
            double val = 0.01;
            if (Colonies != null)
            {
                val = Colonies.Count;
            }
            return num / Math.Max(1.0, val);
        }

        public double AverageCapitalShipsPerColony()
        {
            double num = 0.0;
            if (BuiltObjects != null)
            {
                int num2 = 0;
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.UnbuiltComponentCount <= 0 && builtObject.SubRole == BuiltObjectSubRole.CapitalShip)
                    {
                        num2++;
                    }
                }
                num = num2;
            }
            double val = 0.01;
            if (Colonies != null)
            {
                val = Colonies.Count;
            }
            return num / Math.Max(1.0, val);
        }

        public double AverageConstructionShipsPerColony()
        {
            double num = 0.0;
            if (BuiltObjects != null)
            {
                int num2 = 0;
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.UnbuiltComponentCount <= 0 && builtObject.SubRole == BuiltObjectSubRole.ConstructionShip)
                    {
                        num2++;
                    }
                }
                num = num2;
            }
            double val = 0.01;
            if (Colonies != null)
            {
                val = Colonies.Count;
            }
            return num / Math.Max(1.0, val);
        }

        public double AverageHappiness()
        {
            double num = 0.0;
            long num2 = 0L;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && habitat.Population != null)
                {
                    if (i > 0)
                    {
                        long totalAmount = habitat.Population.TotalAmount;
                        num2 += totalAmount;
                        double empireApprovalRating = habitat.EmpireApprovalRating;
                        double num3 = totalAmount / Math.Max(1L, num2);
                        num += (empireApprovalRating - num) * num3;
                    }
                    else
                    {
                        num2 = habitat.Population.TotalAmount;
                        num = habitat.EmpireApprovalRating;
                    }
                }
            }
            return num;
        }

        public HabitatList GetHomeworldsOwned()
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != null && empire.HomeWorld != null && Colonies.Contains(empire.HomeWorld) && !habitatList.Contains(empire.HomeWorld))
                {
                    habitatList.Add(empire.HomeWorld);
                }
            }
            for (int j = 0; j < _Galaxy.DefeatedEmpires.Count; j++)
            {
                Empire empire2 = _Galaxy.DefeatedEmpires[j];
                if (empire2 != null && empire2.HomeWorld != null && Colonies.Contains(empire2.HomeWorld) && !habitatList.Contains(empire2.HomeWorld))
                {
                    habitatList.Add(empire2.HomeWorld);
                }
            }
            return habitatList;
        }

        public int CountHomeworldsOwned()
        {
            int num = 0;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != null && empire.HomeWorld != null && Colonies.Contains(empire.HomeWorld))
                {
                    num++;
                }
            }
            for (int j = 0; j < _Galaxy.DefeatedEmpires.Count; j++)
            {
                Empire empire2 = _Galaxy.DefeatedEmpires[j];
                if (empire2 != null && empire2.HomeWorld != null && Colonies.Contains(empire2.HomeWorld))
                {
                    num++;
                }
            }
            return num;
        }

        public BuiltObject LargestCapitalShip()
        {
            BuiltObject builtObject = null;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject2 = BuiltObjects[i];
                if (builtObject2 != null && !builtObject2.HasBeenDestroyed && builtObject2.UnbuiltComponentCount == 0 && builtObject2.SubRole == BuiltObjectSubRole.CapitalShip && (builtObject == null || builtObject2.Size > builtObject.Size))
                {
                    builtObject = builtObject2;
                }
            }
            return builtObject;
        }

        public int CalculateMilitaryShipSizeTotal()
        {
            int num = 0;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.UnbuiltComponentCount == 0 && builtObject.Role == BuiltObjectRole.Military)
                {
                    num += builtObject.Size;
                }
            }
            return num;
        }

        public long CalculateEnslavedPopulationAmount()
        {
            long num = 0L;
            Race dominantRace = DominantRace;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                for (int j = 0; j < habitat.Population.Count; j++)
                {
                    Population population = habitat.Population[j];
                    ColonyPopulationPolicy colonyPopulationPolicy = ColonyPopulationPolicy.Assimilate;
                    if (population.Race != dominantRace)
                    {
                        colonyPopulationPolicy = habitat.ColonyPopulationPolicy;
                        if (population.Race.FamilyId == dominantRace.FamilyId)
                        {
                            colonyPopulationPolicy = habitat.ColonyPopulationPolicyRaceFamily;
                        }
                    }
                    if (colonyPopulationPolicy == ColonyPopulationPolicy.Enslave)
                    {
                        num += population.Amount;
                    }
                }
            }
            return num;
        }

        private void ReviewColonyPopulationPolicy(double timePassed)
        {
            Race dominantRace = DominantRace;
            if (dominantRace == null)
            {
                return;
            }
            long num = (long)(timePassed / (double)Galaxy.RealSecondsInGalacticYear * 500000000.0);
            PopulationList populationList = new PopulationList();
            PopulationList populationList2 = new PopulationList();
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                long totalAmount = habitat.Population.TotalAmount;
                long num2 = 0L;
                PopulationList populationList3 = new PopulationList();
                for (int j = 0; j < habitat.Population.Count; j++)
                {
                    Population population = habitat.Population[j];
                    ColonyPopulationPolicy colonyPopulationPolicy = ColonyPopulationPolicy.Assimilate;
                    if (population.Race != dominantRace)
                    {
                        colonyPopulationPolicy = habitat.ColonyPopulationPolicy;
                        if (population.Race.FamilyId == dominantRace.FamilyId)
                        {
                            colonyPopulationPolicy = habitat.ColonyPopulationPolicyRaceFamily;
                        }
                    }
                    switch (colonyPopulationPolicy)
                    {
                        case ColonyPopulationPolicy.Enslave:
                            population.GrowthRate = 1f;
                            num2 += population.Amount;
                            populationList.Add(new Population(population.Race, population.Amount));
                            break;
                        case ColonyPopulationPolicy.Exterminate:
                            if (totalAmount > 30000000)
                            {
                                long num3 = Math.Min(population.Amount, num);
                                long num4 = Math.Max(0L, population.Amount - num3);
                                populationList2.Add(new Population(population.Race, num));
                                if (num4 <= 0)
                                {
                                    populationList3.Add(population);
                                }
                                else
                                {
                                    population.Amount = num4;
                                }
                            }
                            break;
                    }
                }
                for (int k = 0; k < populationList3.Count; k++)
                {
                    habitat.Population.Remove(populationList3[k]);
                }
                habitat.Population.RecalculateTotalAmount();
                if (num2 > 0)
                {
                    double num5 = (double)num2 / (double)habitat.Population.TotalAmount;
                    habitat.SlaveryBonusFactor = (float)(1.0 + num5 * 0.5);
                }
                else
                {
                    habitat.SlaveryBonusFactor = 1f;
                }
                if (habitat.Population.Count == 0 || habitat.Population.TotalAmount <= 0)
                {
                    habitatList.Add(habitat);
                }
            }
            for (int l = 0; l < habitatList.Count; l++)
            {
                habitatList[l].ClearColony(null);
            }
            for (int m = 0; m < EmpireEvaluations.Count; m++)
            {
                EmpireEvaluation empireEvaluation = EmpireEvaluations[m];
                if (empireEvaluation != null && empireEvaluation.RacialOffense < 0.0)
                {
                    double num6 = timePassed / (double)Galaxy.RealSecondsInGalacticYear * 3.0;
                    empireEvaluation.RacialOffense += num6;
                    if (empireEvaluation.RacialOffense > 0.0)
                    {
                        empireEvaluation.RacialOffense = 0.0;
                    }
                }
            }
            for (int n = 0; n < _Galaxy.Empires.Count; n++)
            {
                Empire empire = _Galaxy.Empires[n];
                if (empire != null && empire.Active && empire != this && empire != _Galaxy.IndependentEmpire)
                {
                    EmpireEvaluation empireEvaluation2 = empire.ObtainEmpireEvaluation(this);
                    empireEvaluation2.SetSlaveryOffense(0.0);
                }
            }
            for (int num7 = 0; num7 < populationList.Count; num7++)
            {
                Population population2 = populationList[num7];
                EmpireList empireList = DetermineEmpiresWithDominantRace(population2.Race);
                for (int num8 = 0; num8 < empireList.Count; num8++)
                {
                    Empire empire2 = empireList[num8];
                    if (empire2 != null)
                    {
                        EmpireEvaluation empireEvaluation3 = empire2.ObtainEmpireEvaluation(this);
                        double slaveryOffense = Math.Sqrt(Math.Sqrt((double)population2.Amount / 600000.0)) * -1.0;
                        empireEvaluation3.SetSlaveryOffense(slaveryOffense);
                        if (empireEvaluation3.SlaveryOffense < -30.0)
                        {
                            empireEvaluation3.SetSlaveryOffense(-30.0);
                        }
                        if (empireEvaluation3.SlaveryOffense > 0.0)
                        {
                            empireEvaluation3.SetSlaveryOffense(0.0);
                        }
                    }
                }
            }
            for (int num9 = 0; num9 < populationList2.Count; num9++)
            {
                Population population3 = populationList2[num9];
                Counters.ProcessExterminatedPopulation(population3.Amount);
                EmpireList empireList2 = DetermineEmpiresWithDominantRace(population3.Race);
                double num10 = 0.0;
                for (int num11 = 0; num11 < empireList2.Count; num11++)
                {
                    Empire empire3 = empireList2[num11];
                    if (empire3 != null)
                    {
                        EmpireEvaluation empireEvaluation4 = empire3.ObtainEmpireEvaluation(this);
                        double num12 = Math.Sqrt((double)population3.Amount / 2000000.0) * -1.0;
                        empireEvaluation4.RacialOffense += num12;
                        if (empireEvaluation4.RacialOffense < -50.0)
                        {
                            empireEvaluation4.RacialOffense = -50.0;
                        }
                        num10 += empire3.CivilityRating;
                    }
                }
                double num13 = (double)population3.Amount / 500000000.0;
                if (empireList2 != null && empireList2.Count > 0)
                {
                    num10 /= (double)empireList2.Count;
                }
                if (num10 > 0.0)
                {
                    double num14 = 1.0 + num10 / 30.0;
                    num13 *= num14;
                }
                else
                {
                    double val = 1.0 + num10 / 50.0;
                    val = Math.Max(0.01, val);
                    num13 *= val;
                }
                CivilityRating -= num13;
            }
            if (!_ControlPopulationPolicy)
            {
                return;
            }
            HabitatList habitatList2 = new HabitatList();
            for (int num15 = 0; num15 < _PenalColonies.Count; num15++)
            {
                Habitat habitat2 = _PenalColonies[num15];
                if (habitat2.ColonyPopulationPolicy != ColonyPopulationPolicy.Enslave && habitat2.ColonyPopulationPolicyRaceFamily != ColonyPopulationPolicy.Enslave)
                {
                    habitatList2.Add(habitat2);
                }
            }
            for (int num16 = 0; num16 < habitatList2.Count; num16++)
            {
                _PenalColonies.Remove(habitatList2[num16]);
            }
            if (!Policy.ImplementEnslavementWithPenalColonies)
            {
                return;
            }
            HabitatList habitatList3 = IdentifyBestNewPenalColonies();
            HabitatList habitatList4 = new HabitatList();
            int num17 = 0;
            for (int num18 = 0; num18 < _PenalColonies.Count; num18++)
            {
                Habitat habitat3 = _PenalColonies[num18];
                if (habitat3 != null && habitat3.Population != null)
                {
                    double num19 = (double)habitat3.Population.TotalAmount / (double)habitat3.MaximumPopulation;
                    if (num19 < 0.8)
                    {
                        num17++;
                    }
                }
            }
            if (_PenalColonies.Count >= 5)
            {
                num17 = 1;
            }
            if (num17 <= 0 && habitatList3.Count > 0)
            {
                habitatList4.Add(habitatList3[0]);
            }
            int num20 = 0;
            for (int num21 = 0; num21 < Colonies.Count; num21++)
            {
                Habitat habitat4 = Colonies[num21];
                if (habitat4 == null || (habitat4.ColonyPopulationPolicy != ColonyPopulationPolicy.Enslave && habitat4.ColonyPopulationPolicyRaceFamily != ColonyPopulationPolicy.Enslave))
                {
                    continue;
                }
                num20++;
                if (!_PenalColonies.Contains(habitat4) && !habitatList4.Contains(habitat4) && habitat4.RaceEventType != RaceEventType.AntiXenoRiotsExterminate && habitat4.RaceEventType != RaceEventType.DeathCultExterminate)
                {
                    if (habitat4.ColonyPopulationPolicy == ColonyPopulationPolicy.Enslave)
                    {
                        habitat4.ColonyPopulationPolicy = ColonyPopulationPolicy.Resettle;
                    }
                    if (habitat4.ColonyPopulationPolicyRaceFamily == ColonyPopulationPolicy.Enslave)
                    {
                        habitat4.ColonyPopulationPolicyRaceFamily = ColonyPopulationPolicy.Resettle;
                    }
                }
            }
            if (num20 <= 0)
            {
                return;
            }
            for (int num22 = 0; num22 < habitatList4.Count; num22++)
            {
                Habitat habitat5 = habitatList4[num22];
                if (!_PenalColonies.Contains(habitat5))
                {
                    Habitat habitat6 = Galaxy.DetermineHabitatSystemStar(habitat5);
                    habitat5.Name = string.Format(TextResolver.GetText("SYSTEM Penal Colony"), habitat6.Name);
                    _PenalColonies.Add(habitat5);
                }
            }
        }

        private HabitatList IdentifyBestNewPenalColonies()
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && !_PenalColonies.Contains(habitat))
                {
                    habitat.SortTag = habitat.CalculatePenalColonyValue();
                    if (habitat.SortTag > 0.0)
                    {
                        habitatList.Add(habitat);
                    }
                }
            }
            habitatList.Sort();
            habitatList.Reverse();
            return habitatList;
        }

        public EmpireList DetermineEmpiresWithDominantRace(Race race)
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != null && empire.DominantRace == race)
                {
                    empireList.Add(empire);
                }
            }
            return empireList;
        }

        public bool CheckLocationHintExistsAtPoint(double x, double y, double range)
        {
            for (int i = 0; i < LocationHints.Count; i++)
            {
                double num = _Galaxy.CalculateDistance(x, y, LocationHints[i].X, LocationHints[i].Y);
                if (num <= range)
                {
                    return true;
                }
            }
            return false;
        }

        private void ShakturiSendConvoy()
        {
            Empire empire = _Galaxy.IdentifyShakturiEmpire();
            if (empire == null || this != empire || Galaxy.Rnd.Next(0, 3) != 1)
            {
                return;
            }
            double num = (double)empire.BuiltObjects.Count / (double)empire.Colonies.Count;
            if (num < 40.0 && !_Galaxy.ShakturiDefeated)
            {
                if (_Galaxy.StoryShakturiEnraged)
                {
                    _Galaxy.GenerateShakturiMilitaryConvoy(this);
                }
                else
                {
                    _Galaxy.GenerateShakturiColonyConvoy(this);
                }
            }
        }

        private void CheckOfferStoryHint()
        {
            if ((!_Galaxy.StoryReturnOfTheShakturiEnabled && !_Galaxy.StoryDistantWorldsEnabled) || _Galaxy.PlayerEmpire == null || DominantRace == null)
            {
                return;
            }
            int num = -1;
            bool flag = false;
            bool flag2 = false;
            Empire empire = _Galaxy.IdentifyShakturiEmpire();
            Empire empire2 = _Galaxy.IdentifyMechanoidEmpire();
            DiplomaticRelation diplomaticRelation = null;
            DiplomaticRelation diplomaticRelation2 = null;
            Race shakturiActualRace = _Galaxy.ShakturiActualRace;
            Race race = _Galaxy.Races["Mechanoid"];
            if (_Galaxy.StoryReturnOfTheShakturiEnabled)
            {
                for (int i = 0; i < _Galaxy.Empires.Count; i++)
                {
                    if (_Galaxy.Empires[i].DominantRace == shakturiActualRace && _Galaxy.Empires[i] != _Galaxy.PlayerEmpire)
                    {
                        empire = _Galaxy.Empires[i];
                        diplomaticRelation = _Galaxy.PlayerEmpire.ObtainDiplomaticRelation(empire);
                    }
                    else if (_Galaxy.Empires[i].DominantRace == race && _Galaxy.Empires[i] != _Galaxy.PlayerEmpire)
                    {
                        empire2 = _Galaxy.Empires[i];
                        diplomaticRelation2 = _Galaxy.PlayerEmpire.ObtainDiplomaticRelation(empire2);
                    }
                }
            }
            if ((DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "zenox" || DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "quameno") && PirateEmpireBaseHabitat == null)
            {
                bool flag3 = false;
                if (_Galaxy.PlayerEmpire.PirateEmpireBaseHabitat == null)
                {
                    DiplomaticRelation diplomaticRelation3 = ObtainDiplomaticRelation(_Galaxy.PlayerEmpire);
                    EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(_Galaxy.PlayerEmpire);
                    if (diplomaticRelation3 != null && diplomaticRelation3.Type != 0 && empireEvaluation != null && empireEvaluation.OverallAttitude > 10 && diplomaticRelation3.Strategy != DiplomaticStrategy.Conquer && diplomaticRelation3.Strategy != DiplomaticStrategy.Punish && diplomaticRelation3.Strategy != DiplomaticStrategy.Undermine)
                    {
                        flag3 = true;
                    }
                }
                else
                {
                    PirateRelation pirateRelation = ObtainPirateRelation(_Galaxy.PlayerEmpire);
                    if (pirateRelation.Type == PirateRelationType.Protection && pirateRelation.Evaluation > 10f)
                    {
                        flag3 = true;
                    }
                }
                if (flag3)
                {
                    if (Galaxy.Rnd.Next(0, 4) == 1)
                    {
                        int num2 = _Galaxy.SelectUnusedSecondaryStoryClueIndex();
                        if (num2 >= 0)
                        {
                            string text = TextResolver.GetText("We offer to reveal secret history");
                            SendMessageToEmpire(_Galaxy.PlayerEmpire, EmpireMessageType.HistoryOfferStoryClue, null, text);
                            return;
                        }
                        if (_Galaxy.CheckStoryLocationHintExists())
                        {
                            int num3 = _Galaxy.SelectUnusedStoryClue();
                            if (num3 >= 0)
                            {
                                StellarObject stellarObject = null;
                                if (_Galaxy.StoryClueLocations != null && _Galaxy.StoryClueLocations.Count > num3)
                                {
                                    stellarObject = _Galaxy.StoryClueLocations[num3];
                                }
                                if (stellarObject != null && !_Galaxy.PlayerEmpire.CheckLocationHintExistsAtPoint(stellarObject.Xpos, stellarObject.Ypos, 5000.0))
                                {
                                    string text2 = TextResolver.GetText("We offer to reveal a secret location");
                                    SendMessageToEmpire(_Galaxy.PlayerEmpire, EmpireMessageType.HistoryOfferLocationHint, null, text2);
                                    return;
                                }
                            }
                        }
                    }
                    else if (_Galaxy.StoryReturnOfTheShakturiEnabled && (diplomaticRelation2 == null || diplomaticRelation2.Type == DiplomaticRelationType.NotMet))
                    {
                        num = 2;
                        flag = true;
                    }
                }
            }
            else if (DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
            {
                DiplomaticRelation diplomaticRelation4 = ObtainDiplomaticRelation(_Galaxy.PlayerEmpire);
                if (diplomaticRelation4 != null && diplomaticRelation4.Type != 0 && _Galaxy.StoryReturnOfTheShakturiEnabled)
                {
                    flag2 = true;
                    num = 3;
                    int num4 = 0;
                    for (int j = 0; j < _Galaxy.Empires.Count; j++)
                    {
                        if (_Galaxy.Empires[j] != null && _Galaxy.Empires[j].Active && _Galaxy.Empires[j].Colonies != null)
                        {
                            num4 += _Galaxy.Empires[j].Colonies.Count;
                        }
                    }
                    int num5 = (int)(0.5 * (double)_Galaxy.ExpectedMaximumColoniesInGalaxy);
                    double d = (double)_Galaxy.BaseTechCost / 120000.0;
                    d = Math.Max(1.0, Math.Sqrt(d));
                    int num6 = 25;
                    if (_Galaxy.Age == 0)
                    {
                        num6 += 15;
                    }
                    long val = _Galaxy.ActualStartDate + Galaxy.RealSecondsInGalacticYear * 1000 * num6;
                    int val2 = (int)((double)num6 * d);
                    val2 = Math.Min(val2, 120);
                    int num7 = Math.Max(val2, 80);
                    long num8 = _Galaxy.ActualStartDate + Galaxy.RealSecondsInGalacticYear * 1000 * num7;
                    long val3 = _Galaxy.ActualStartDate + Galaxy.RealSecondsInGalacticYear * 1000 * val2;
                    val3 = Math.Max(val3, val);
                    lock (_Galaxy.StoryLock)
                    {
                        if (_Galaxy.ShakturiTriggerHabitat == null && ((num4 >= num5 && _Galaxy.CurrentStarDate >= val3) || _Galaxy.CurrentStarDate >= num8))
                        {
                            _Galaxy.GenerateShakturiReturnTriggerRuins();
                        }
                        else if (_Galaxy.ShakturiTriggerHabitat == null)
                        {
                            num = 0;
                        }
                    }
                }
            }
            else if (DominantRace == _Galaxy.ShakturiActualRace)
            {
                num = 0;
            }
            if (num < 0 || !_Galaxy.StoryReturnOfTheShakturiEnabled)
            {
                return;
            }
            _ = string.Empty;
            bool flag4 = false;
            switch (_Galaxy.StoryReturnOfTheShakturiEventLevel)
            {
                case 0:
                    if (empire != null)
                    {
                        _Galaxy.StoryReturnOfTheShakturiEventLevel = 1;
                        goto case 1;
                    }
                    flag4 = true;
                    break;
                case 1:
                    if (empire == null || DominantRace == _Galaxy.ShakturiActualRace)
                    {
                        break;
                    }
                    if (diplomaticRelation != null && diplomaticRelation.Type != 0)
                    {
                        _Galaxy.StoryReturnOfTheShakturiEventLevel = 2;
                        goto case 2;
                    }
                    flag4 = true;
                    break;
                case 2:
                    {
                        if (empire == null)
                        {
                            break;
                        }
                        if (this == empire && _Galaxy.CurrentStarDate >= _Galaxy.StoryShakturiEnrageTimer)
                        {
                            _ = Math.Sqrt(_Galaxy.StarCount) / 5.0;
                            lock (_Galaxy.StoryLock)
                            {
                                if (!_Galaxy.StoryShakturiEnraged)
                                {
                                    _Galaxy.GenerateShakturiAggression(this);
                                }
                            }
                        }
                        DiplomaticRelation diplomaticRelation7 = empire.ObtainDiplomaticRelation(empire2);
                        if (diplomaticRelation == null || diplomaticRelation.Type != DiplomaticRelationType.War || diplomaticRelation7 == null || diplomaticRelation7.Type != DiplomaticRelationType.War || empire2.Reclusive)
                        {
                            if (flag2)
                            {
                                DiplomaticRelation diplomaticRelation8 = empire2.ObtainDiplomaticRelation(empire);
                                if (empire2.Reclusive && diplomaticRelation != null && diplomaticRelation.Type != 0 && diplomaticRelation8 != null && diplomaticRelation8.Type != 0 && _Galaxy.StoryShakturiEnraged)
                                {
                                    _Galaxy.StoryReturnOfTheShakturiEventLevel = 2;
                                    flag4 = true;
                                }
                            }
                            else if (flag && empire2 != null && empire2.Capital != null && !_Galaxy.PlayerEmpire.CheckLocationHintExistsAtPoint(empire2.Capital.Xpos, empire2.Capital.Ypos, 48000.0))
                            {
                                string text3 = TextResolver.GetText("We offer to reveal a secret location");
                                SendMessageToEmpire(_Galaxy.PlayerEmpire, EmpireMessageType.HistoryOfferLocationHint, null, text3);
                                return;
                            }
                            break;
                        }
                        goto case 3;
                    }
                case 3:
                    {
                        if (DominantRace != _Galaxy.ShakturiActualRace)
                        {
                            break;
                        }
                        DiplomaticRelation diplomaticRelation9 = empire.ObtainDiplomaticRelation(empire2);
                        if (((diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.War) || empire2 == null || !empire2.Reclusive) && diplomaticRelation9 != null && diplomaticRelation9.Type == DiplomaticRelationType.War)
                        {
                            if (_Galaxy.StoryReturnOfTheShakturiEventLevel < 3)
                            {
                                _Galaxy.GenerateShakturiInvasion(empire, empire2);
                            }
                            _Galaxy.StoryReturnOfTheShakturiEventLevel = 3;
                            if (diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.War)
                            {
                                flag4 = true;
                            }
                        }
                        break;
                    }
                case 4:
                    {
                        if (!flag2)
                        {
                            break;
                        }
                        bool flag5 = false;
                        if (empire != null)
                        {
                            DiplomaticRelation diplomaticRelation5 = _Galaxy.PlayerEmpire.ObtainDiplomaticRelation(empire);
                            if (diplomaticRelation5 != null)
                            {
                                int builtObjectWarValue = 0;
                                int colonyWarValue = 0;
                                _Galaxy.CalculateEmpireWarValue(_Galaxy.PlayerEmpire, out builtObjectWarValue, out colonyWarValue);
                                int num9 = (int)((double)builtObjectWarValue * 0.6);
                                int num10 = (int)((double)colonyWarValue * 0.4);
                                if (diplomaticRelation5.WarDamageBuiltObject > num9 || diplomaticRelation5.WarDamageColony > num10)
                                {
                                    flag5 = true;
                                }
                            }
                        }
                        if (!flag5 && empire2 != null && empire != null)
                        {
                            DiplomaticRelation diplomaticRelation6 = empire2.ObtainDiplomaticRelation(empire);
                            if (diplomaticRelation6 != null)
                            {
                                int builtObjectWarValue2 = 0;
                                int colonyWarValue2 = 0;
                                _Galaxy.CalculateEmpireWarValue(_Galaxy.PlayerEmpire, out builtObjectWarValue2, out colonyWarValue2);
                                int num11 = (int)((double)builtObjectWarValue2 * 0.8);
                                if (diplomaticRelation6.WarDamageBuiltObject > num11)
                                {
                                    flag5 = true;
                                }
                            }
                        }
                        int num12 = _Galaxy.StarCount / 35;
                        if (empire != null && empire.Colonies != null && empire.Colonies.Count > num12 && flag5)
                        {
                            _Galaxy.StoryReturnOfTheShakturiEventLevel = 4;
                            flag4 = true;
                        }
                        break;
                    }
            }
            if (flag4)
            {
                SendMessageToEmpire(_Galaxy.PlayerEmpire, EmpireMessageType.StoryMessage, null, TextResolver.GetText("We have an important warning that you need to hear"));
            }
        }

        public void UpdateSystemFuelSourceStatus()
        {
            FuelSystemsUpdating = true;
            if (FuelSystemsSources == null || FuelSystemsSources.Count == 0)
            {
                FuelSystemsSources = new List<FuelSourceSystemList>();
                for (int i = 0; i < _Galaxy.ResourceSystem.FuelResources.Count; i++)
                {
                    ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.FuelResources[i];
                    if (resourceDefinition != null)
                    {
                        FuelSourceSystemList fuelSourceSystemList = new FuelSourceSystemList();
                        fuelSourceSystemList.ResourceId = resourceDefinition.ResourceID;
                        FuelSystemsSources.Add(fuelSourceSystemList);
                    }
                }
            }
            for (int j = 0; j < FuelSystemsSources.Count; j++)
            {
                FuelSystemsSources[j].Clear();
            }
            for (int k = 0; k < SystemVisibility.Count; k++)
            {
                SystemVisibility systemVisibility = SystemVisibility[k];
                if ((systemVisibility.Status != SystemVisibilityStatus.Explored && systemVisibility.Status != SystemVisibilityStatus.Visible) || systemVisibility.FuelSourcesFinalized)
                {
                    continue;
                }
                HabitatList[] array = new HabitatList[_Galaxy.ResourceSystem.FuelResources.Count];
                for (int l = 0; l < array.Length; l++)
                {
                    array[l] = new HabitatList();
                }
                if (systemVisibility.SystemStar.Category == HabitatCategoryType.GasCloud && (systemVisibility.TotallyExplored || (ResourceMap != null && ResourceMap.CheckResourcesKnown(systemVisibility.SystemStar))))
                {
                    for (int m = 0; m < _Galaxy.ResourceSystem.FuelResources.Count; m++)
                    {
                        int num = systemVisibility.SystemStar.Resources.IndexOf(_Galaxy.ResourceSystem.FuelResources[m].ResourceID, 0);
                        if (num >= 0 && !array[m].Contains(systemVisibility.SystemStar))
                        {
                            array[m].Add(systemVisibility.SystemStar);
                        }
                    }
                }
                for (int n = 0; n < _Galaxy.Systems[systemVisibility.SystemStar.SystemIndex].Habitats.Count; n++)
                {
                    Habitat habitat = _Galaxy.Systems[systemVisibility.SystemStar.SystemIndex].Habitats[n];
                    if ((habitat.Category != HabitatCategoryType.GasCloud && habitat.Type != HabitatType.GasGiant) || (!systemVisibility.TotallyExplored && (ResourceMap == null || !ResourceMap.CheckResourcesKnown(habitat))))
                    {
                        continue;
                    }
                    for (int num2 = 0; num2 < _Galaxy.ResourceSystem.FuelResources.Count; num2++)
                    {
                        int num3 = habitat.Resources.IndexOf(_Galaxy.ResourceSystem.FuelResources[num2].ResourceID, 0);
                        if (num3 >= 0 && !array[num2].Contains(habitat))
                        {
                            array[num2].Add(habitat);
                        }
                    }
                }
                for (int num4 = 0; num4 < _Galaxy.ResourceSystem.FuelResources.Count; num4++)
                {
                    FuelSystemsSources[num4].Add(new FuelSourceSystem(systemVisibility.SystemStar, array[num4]));
                }
                if (systemVisibility.TotallyExplored)
                {
                    systemVisibility.FuelSourcesFinalized = true;
                }
            }
            FuelSystemsUpdating = false;
        }

        private void UpdateSystemRefuellingStatus()
        {
            Resource fuelType = new Resource(_Galaxy.ResourceSystem.FuelResources[0].ResourceID);
            Design design = _Designs.FindNewestCanBuild(BuiltObjectSubRole.Frigate);
            if (design != null)
            {
                fuelType = design.FuelType;
            }
            BuiltObject testMilitaryShip = null;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                if (BuiltObjects[i].Role == BuiltObjectRole.Military)
                {
                    testMilitaryShip = BuiltObjects[i];
                    break;
                }
            }
            for (int j = 0; j < SystemVisibility.Count; j++)
            {
                SystemVisibility systemVisibility = SystemVisibility[j];
                systemVisibility.IsRefuellingPoint = _Galaxy.IdentifyWhetherSystemIsRefuellingPointForEmpire(systemVisibility.SystemStar, this, fuelType, testMilitaryShip);
            }
        }

        private void UpdateSystemExplorationStatus()
        {
            int num = 0;
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                SystemVisibility systemVisibility = SystemVisibility[i];
                if (systemVisibility.Status == SystemVisibilityStatus.Explored || systemVisibility.Status == SystemVisibilityStatus.Visible)
                {
                    num++;
                }
                if (systemVisibility.TotallyExplored || (systemVisibility.Status != SystemVisibilityStatus.Visible && systemVisibility.Status != SystemVisibilityStatus.Explored))
                {
                    continue;
                }
                SystemInfo systemInfo = _Galaxy.Systems[systemVisibility.SystemStar.SystemIndex];
                bool flag = true;
                if (ResourceMap != null && !ResourceMap.CheckResourcesKnown(systemInfo.SystemStar))
                {
                    flag = false;
                }
                if (flag)
                {
                    for (int j = 0; j < systemInfo.Habitats.Count; j++)
                    {
                        Habitat habitat = systemInfo.Habitats[j];
                        if (ResourceMap != null && !ResourceMap.CheckResourcesKnown(habitat))
                        {
                            flag = false;
                            break;
                        }
                    }
                }
                systemVisibility.TotallyExplored = flag;
            }
            _SystemExploredCount = num;
            _ExplorationShipCount = CountExplorationShips();
        }

        private void ClearExpiredViewableEmpires()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            List<int> list = new List<int>();
            for (int i = 0; i < _EmpiresViewable.Count; i++)
            {
                if (_EmpiresViewableExpiry[i] < currentStarDate)
                {
                    list.Add(i);
                }
            }
            list.Sort();
            list.Reverse();
            foreach (int item in list)
            {
                _EmpiresViewable.RemoveAt(item);
                _EmpiresViewableExpiry.RemoveAt(item);
            }
        }

        private void CancelInactiveBlockades()
        {
            BlockadeList blockadesForEmpire = _Galaxy.Blockades.GetBlockadesForEmpire(this);
            foreach (Blockade item in blockadesForEmpire)
            {
                bool flag = false;
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject.Mission == null || builtObject.Mission.Type != BuiltObjectMissionType.Blockade)
                    {
                        continue;
                    }
                    if (item.TargetIsColony)
                    {
                        if (builtObject.Mission.TargetHabitat != null && builtObject.Mission.TargetHabitat == item.Colony)
                        {
                            flag = true;
                            break;
                        }
                        continue;
                    }
                    if (builtObject.Mission.TargetBuiltObject != null && builtObject.Mission.TargetBuiltObject == item.BuiltObject)
                    {
                        flag = true;
                        break;
                    }
                    if (builtObject.Mission.TargetHabitat != null && item.BuiltObject.ParentHabitat != null && item.BuiltObject.ParentHabitat == builtObject.Mission.TargetHabitat)
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    if (item.TargetIsColony)
                    {
                        CancelBlockade(item.Colony);
                    }
                    else
                    {
                        CancelBlockade(item.BuiltObject);
                    }
                }
            }
        }

        private void ClearOldDistressSignals()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate - Galaxy.DistressSignalDateRange;
            DistressSignalList distressSignalList = new DistressSignalList();
            for (int i = 0; i < _DistressSignals.Count; i++)
            {
                DistressSignal distressSignal = _DistressSignals[i];
                if (distressSignal.Date < num)
                {
                    distressSignalList.Add(distressSignal);
                }
            }
            foreach (DistressSignal item in distressSignalList)
            {
                _DistressSignals.Remove(item);
            }
        }

        private void PayForPlanetaryFacilities(double timePassed)
        {
            double num = AnnualFacilityMaintenance * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            StateMoney -= num;
        }

        private void PayForTroops(double timePassed)
        {
            double num = AnnualTroopMaintenance * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            StateMoney -= num;
            PirateEconomy.PerformExpense(num, PirateExpenseType.Undefined, _Galaxy.CurrentStarDate);
        }

        private void PayForAgents(double timePassed)
        {
            double num = AnnualAgentMaintenance * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            StateMoney -= num;
        }

        public HabitatPrioritizationList PrioritizeEmpireResourceNeeds()
        {
            return PrioritizeEmpireResourceNeeds(includeLuxuryResources: false, 5, 1.0);
        }

        public HabitatPrioritizationList PrioritizeEmpireResourceNeeds(bool includeLuxuryResources, int topResourceCount, double minimumValue)
        {
            return PrioritizeEmpireResourceNeeds(includeLuxuryResources, topResourceCount, minimumValue, filterOutHabitatsWithMiningStationsUnderConstruction: true);
        }

        public HabitatPrioritizationList PrioritizeEmpireResourceNeeds(bool includeLuxuryResources, int topResourceCount, double minimumValue, bool filterOutHabitatsWithMiningStationsUnderConstruction)
        {
            return PrioritizeEmpireResourceNeeds(includeLuxuryResources, topResourceCount, minimumValue, filterOutHabitatsWithMiningStationsUnderConstruction: true, includeAsteroids: true);
        }

        public HabitatPrioritizationList PrioritizeEmpireResourceNeeds(bool includeLuxuryResources, int topResourceCount, double minimumValue, bool filterOutHabitatsWithMiningStationsUnderConstruction, bool includeAsteroids)
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            ResourceList resourceList = IdentifyDeficientEmpireResources(includeLuxuryResources, minimumValue);
            bool flag = true;
            bool flag2 = true;
            if (Research != null && Research.ResearchedComponents != null && Research.ResearchedComponents.CountByCategory(ComponentCategoryType.HyperDrive) <= 0)
            {
                flag2 = false;
                topResourceCount = Math.Max(10, resourceList.Count);
            }
            HabitatList minedHabitats = new HabitatList();
            minedHabitats = DetermineHabitatsBeingMined(minedHabitats, BuiltObjects);
            minedHabitats = DetermineHabitatsBeingMined(minedHabitats, PrivateBuiltObjects);
            HabitatPrioritizationList habitatPrioritizationList2 = new HabitatPrioritizationList();
            if (includeLuxuryResources)
            {
                habitatPrioritizationList2 = DetermineHabitatsBuildingMiningStations();
            }
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                if (!CheckSystemExplored(i))
                {
                    continue;
                }
                BuiltObject builtObject = _Galaxy.FastFindNearestSpacePort(SystemVisibility[i].SystemStar.Xpos, SystemVisibility[i].SystemStar.Ypos, this);
                for (int j = 0; j < _Galaxy.Systems[SystemVisibility[i].SystemStar.SystemIndex].Habitats.Count; j++)
                {
                    Habitat habitat = _Galaxy.Systems[SystemVisibility[i].SystemStar.SystemIndex].Habitats[j];
                    if (habitat.Resources.Count <= 0)
                    {
                        continue;
                    }
                    double num = 0.0;
                    if (!_ResourceMap.CheckResourcesKnown(habitat) || (!includeAsteroids && habitat.Category == HabitatCategoryType.Asteroid) || (habitat.Owner != null && habitat.Owner != _Galaxy.IndependentEmpire))
                    {
                        continue;
                    }
                    bool flag3 = true;
                    BuiltObject assignedShip = null;
                    int num2 = habitatPrioritizationList2.IndexOf(habitat);
                    if (num2 >= 0)
                    {
                        if (filterOutHabitatsWithMiningStationsUnderConstruction)
                        {
                            flag3 = false;
                        }
                        else
                        {
                            assignedShip = habitatPrioritizationList2[num2].AssignedShip;
                        }
                    }
                    if (flag3)
                    {
                        if (PirateEmpireBaseHabitat == null)
                        {
                            flag3 = _Galaxy.CheckEmpireTerritoryCanBuildAtHabitat(this, habitat);
                        }
                        else
                        {
                            SystemInfo bySystemIndex = _Galaxy.Systems.GetBySystemIndex(habitat.SystemIndex);
                            if (bySystemIndex != null && bySystemIndex.DominantEmpire != null && bySystemIndex.DominantEmpire.Empire != null && bySystemIndex.DominantEmpire.Empire != this)
                            {
                                flag3 = false;
                            }
                        }
                    }
                    if (!flag3)
                    {
                        continue;
                    }
                    Habitat habitat2 = habitat;
                    for (int k = 0; k < topResourceCount && k < resourceList.Count; k++)
                    {
                        int num3 = habitat2.Resources.IndexOf(resourceList[k].ResourceID, 0);
                        if (num3 < 0)
                        {
                            continue;
                        }
                        if (resourceList[k].IsLuxuryResource)
                        {
                            if (flag)
                            {
                                num += resourceList[k].SortTag * 1000.0;
                            }
                        }
                        else
                        {
                            num += resourceList[k].SortTag * 1000.0;
                        }
                    }
                    if (!flag2)
                    {
                        if (builtObject != null)
                        {
                            num /= Math.Sqrt(_Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, habitat2.Xpos, habitat2.Ypos));
                            num *= 100.0;
                        }
                        else if (Capital != null)
                        {
                            num /= Math.Sqrt(_Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, habitat2.Xpos, habitat2.Ypos));
                            num *= 100.0;
                        }
                    }
                    else if (builtObject != null)
                    {
                        num /= Math.Sqrt(Math.Sqrt(_Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, habitat2.Xpos, habitat2.Ypos)));
                    }
                    else if (Capital != null)
                    {
                        num /= Math.Sqrt(Math.Sqrt(_Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, habitat2.Xpos, habitat2.Ypos)));
                    }
                    if (num > 1.0)
                    {
                        HabitatPrioritization habitatPrioritization = new HabitatPrioritization(habitat2, (int)num);
                        habitatPrioritization.AssignedShip = assignedShip;
                        habitatPrioritizationList.Add(habitatPrioritization);
                    }
                }
            }
            HabitatPrioritizationList habitatPrioritizationList3 = new HabitatPrioritizationList();
            foreach (HabitatPrioritization item in habitatPrioritizationList)
            {
                if (minedHabitats.Contains(item.Habitat))
                {
                    habitatPrioritizationList3.Add(item);
                }
            }
            foreach (HabitatPrioritization item2 in habitatPrioritizationList3)
            {
                habitatPrioritizationList.Remove(item2);
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            return habitatPrioritizationList;
        }

        public HabitatPrioritizationList IdentifyDesiredEnemyMiningStations(int topResourceCount, bool excludeRecentRaids, double valueThreshold)
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            ResourceList resourceList = IdentifyDeficientEmpireResources(includeLuxuryResources: false, 0.0);
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                if (!CheckSystemExplored(i))
                {
                    continue;
                }
                BuiltObject builtObject = _Galaxy.FastFindNearestSpacePort(SystemVisibility[i].SystemStar.Xpos, SystemVisibility[i].SystemStar.Ypos, this);
                for (int j = 0; j < _Galaxy.Systems[SystemVisibility[i].SystemStar.SystemIndex].Habitats.Count; j++)
                {
                    Habitat habitat = _Galaxy.Systems[SystemVisibility[i].SystemStar.SystemIndex].Habitats[j];
                    if (habitat.Resources.Count <= 0 || !_ResourceMap.CheckResourcesKnown(habitat))
                    {
                        continue;
                    }
                    BuiltObject builtObject2 = _Galaxy.DetermineMiningStationAtHabitat(habitat);
                    if (builtObject2 == null)
                    {
                        continue;
                    }
                    Empire actualEmpire = builtObject2.ActualEmpire;
                    if (actualEmpire == this)
                    {
                        continue;
                    }
                    bool flag = true;
                    if (this == _Galaxy.PlayerEmpire)
                    {
                        flag = IsObjectVisibleToThisEmpire(builtObject2, includeLongRangeScanners: true, includeShipsOutsideSystems: false);
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    bool flag2 = true;
                    if (PirateEmpireBaseHabitat == null && actualEmpire.PirateEmpireBaseHabitat == null)
                    {
                        DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(actualEmpire);
                        if (diplomaticRelation.Strategy == DiplomaticStrategy.Ally || diplomaticRelation.Strategy == DiplomaticStrategy.Befriend || diplomaticRelation.Strategy == DiplomaticStrategy.DefendPlacate || diplomaticRelation.Strategy == DiplomaticStrategy.Placate || diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                        {
                            flag2 = false;
                        }
                    }
                    else if (actualEmpire != null)
                    {
                        PirateRelation pirateRelation = ObtainPirateRelation(actualEmpire);
                        if (pirateRelation.Type == PirateRelationType.Protection)
                        {
                            flag2 = false;
                        }
                    }
                    if (!flag2 || (excludeRecentRaids && builtObject2.RaidCountdown > 0))
                    {
                        continue;
                    }
                    double num = 0.0;
                    for (int k = 0; k < topResourceCount; k++)
                    {
                        if (resourceList[k].SortTag > 0.1 && habitat.Resources.ContainsId(resourceList[k].ResourceID))
                        {
                            num += 1000.0;
                        }
                    }
                    if (num > 0.0)
                    {
                        if (builtObject != null)
                        {
                            num /= Math.Sqrt(Math.Sqrt(_Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, habitat.Xpos, habitat.Ypos)));
                        }
                        else if (Capital != null)
                        {
                            num /= Math.Sqrt(Math.Sqrt(_Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, habitat.Xpos, habitat.Ypos)));
                        }
                        if (num >= valueThreshold)
                        {
                            num = Math.Max(1.0, num);
                            HabitatPrioritization item = new HabitatPrioritization(habitat, (int)num);
                            habitatPrioritizationList.Add(item);
                        }
                    }
                }
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            return habitatPrioritizationList;
        }

        public HabitatPrioritizationList IdentifyRaidableColonies(int maximumDefenseStrength, double valueThreshold)
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                if (!CheckSystemExplored(i) || _Galaxy.Systems == null || _Galaxy.Systems.Count <= i)
                {
                    continue;
                }
                SystemInfo systemInfo = _Galaxy.Systems[i];
                if (systemInfo == null || ((systemInfo.DominantEmpire == null || systemInfo.DominantEmpire.Empire == null) && systemInfo.IndependentColonyCount <= 0))
                {
                    continue;
                }
                HabitatList habitats = _Galaxy.Systems[i].Habitats;
                if (habitats == null)
                {
                    continue;
                }
                for (int j = 0; j < habitats.Count; j++)
                {
                    Habitat habitat = habitats[j];
                    if (habitat == null || habitat.Population == null || habitat.Population.Count <= 0)
                    {
                        continue;
                    }
                    Empire empire = habitat.Empire;
                    if (empire == null || empire == this || habitat.RaidCountdown > 0)
                    {
                        continue;
                    }
                    bool flag = true;
                    PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(this);
                    if (byFaction != null && (byFaction.HasFacilityControl || byFaction.ControlLevel >= 0.5f))
                    {
                        flag = false;
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    int num = 0;
                    if (CheckSystemVisible(i))
                    {
                        if (habitat.Troops != null)
                        {
                            num = habitat.Troops.TotalDefendStrength;
                        }
                    }
                    else
                    {
                        num = habitat.EstimatedDefensiveForceRequired(atWar: false);
                    }
                    if (num > maximumDefenseStrength)
                    {
                        continue;
                    }
                    BuiltObject builtObject = _Galaxy.FastFindNearestSpacePort(habitat.Xpos, habitat.Ypos, this);
                    bool flag2 = true;
                    if (PirateEmpireBaseHabitat == null && empire.PirateEmpireBaseHabitat == null)
                    {
                        DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                        if (diplomaticRelation.Strategy == DiplomaticStrategy.Ally || diplomaticRelation.Strategy == DiplomaticStrategy.Befriend || diplomaticRelation.Strategy == DiplomaticStrategy.DefendPlacate || diplomaticRelation.Strategy == DiplomaticStrategy.Placate || diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                        {
                            flag2 = false;
                        }
                    }
                    else
                    {
                        PirateRelation pirateRelation = ObtainPirateRelation(habitat.Empire);
                        if (pirateRelation.Type == PirateRelationType.Protection)
                        {
                            flag2 = false;
                        }
                    }
                    if (!flag2)
                    {
                        continue;
                    }
                    double num2 = 0.0;
                    if (habitat.Population != null)
                    {
                        num2 = (double)habitat.Population.TotalAmount / 1000.0;
                    }
                    if (num2 > 0.0)
                    {
                        if (builtObject != null)
                        {
                            num2 /= Math.Sqrt(Math.Sqrt(_Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, habitat.Xpos, habitat.Ypos)));
                        }
                        else if (Capital != null)
                        {
                            num2 /= Math.Sqrt(Math.Sqrt(_Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, habitat.Xpos, habitat.Ypos)));
                        }
                        if (num2 >= valueThreshold)
                        {
                            num2 = Math.Max(1.0, num2);
                            HabitatPrioritization item = new HabitatPrioritization(habitat, (int)num2);
                            habitatPrioritizationList.Add(item);
                        }
                    }
                }
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            return habitatPrioritizationList;
        }

        private double CalculateAggressionFactor()
        {
            double num = (double)DominantRace.AggressionLevel / 100.0;
            num *= num;
            return num * _Galaxy.AggressionLevel;
        }

        public double CalculateCautionFactor()
        {
            double num = (double)DominantRace.CautionLevel / 100.0;
            num *= num;
            return Math.Max(1.0, num);
        }

        private bool ShouldProvoke(Empire targetEmpire, int ourMilitaryPotency, double aggressionFactor, double cautionFactor, double galaxyIntoleranceLevel, bool provokeWithRaids)
        {
            bool flag = false;
            if (targetEmpire.Reclusive || Reclusive)
            {
                return false;
            }
            int val = Math.Max(1, (int)aggressionFactor);
            val = Math.Min(val, 2);
            int num = CountEmpiresWeDeclaredWarOn() + CountEmpiresWhoDeclaredWarOnUs();
            if (num >= 1)
            {
                return false;
            }
            EmpireList empireList = ResolveEmpiresAtWarWithOrPreparingToConquer();
            if (empireList.Count > 1 && !empireList.Contains(targetEmpire))
            {
                return false;
            }
            if (!CheckWhetherHaveEnoughFleetsForWar(num))
            {
                return false;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(targetEmpire);
            switch (diplomaticRelation.Strategy)
            {
                case DiplomaticStrategy.Undefined:
                case DiplomaticStrategy.Befriend:
                case DiplomaticStrategy.Placate:
                case DiplomaticStrategy.Defend:
                case DiplomaticStrategy.Ally:
                case DiplomaticStrategy.Undermine:
                case DiplomaticStrategy.DefendPlacate:
                case DiplomaticStrategy.DefendUndermine:
                    return false;
                default:
                    {
                        EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(targetEmpire);
                        double num2 = -45.0 / aggressionFactor;
                        num2 *= cautionFactor;
                        if ((double)empireEvaluation.OverallAttitude <= num2)
                        {
                            flag = true;
                        }
                        if (flag)
                        {
                            int num3 = (int)((double)ourMilitaryPotency * aggressionFactor);
                            num3 = (int)((double)num3 / cautionFactor);
                            double num4 = 0.95 + Galaxy.Rnd.NextDouble() * (1.4 * galaxyIntoleranceLevel * aggressionFactor);
                            num3 = (int)((double)num3 * num4);
                            num3 = (int)((double)num3 * (_Galaxy.AggressionLevel * _Galaxy.AggressionLevel));
                            if (num3 >= targetEmpire.WeightedMilitaryPotency)
                            {
                                double num5 = ((double)DominantRace.LoyaltyLevel / 100.0 + (Galaxy.Rnd.NextDouble() - 0.5) * 0.2) * 100.0;
                                DiplomaticRelation diplomaticRelation2 = DiplomaticRelations[targetEmpire];
                                if (diplomaticRelation2 != null)
                                {
                                    switch (diplomaticRelation2.Type)
                                    {
                                        case DiplomaticRelationType.None:
                                            if (Galaxy.Rnd.Next(0, 4) > 0)
                                            {
                                                return true;
                                            }
                                            break;
                                        case DiplomaticRelationType.TradeSanctions:
                                        case DiplomaticRelationType.War:
                                            return true;
                                        case DiplomaticRelationType.FreeTradeAgreement:
                                            if (num5 < 100.0)
                                            {
                                                return true;
                                            }
                                            break;
                                        case DiplomaticRelationType.MutualDefensePact:
                                        case DiplomaticRelationType.Protectorate:
                                            if (num5 < 95.0)
                                            {
                                                return true;
                                            }
                                            break;
                                        case DiplomaticRelationType.SubjugatedDominion:
                                        case DiplomaticRelationType.Truce:
                                            if (num5 < 110.0)
                                            {
                                                return true;
                                            }
                                            break;
                                    }
                                }
                                else if (Galaxy.Rnd.Next(0, 4) > 0)
                                {
                                    return true;
                                }
                            }
                        }
                        return false;
                    }
            }
        }

        private bool DetermineAttackOnSingleEmpire(Empire empire, int ourMilitaryPotency, double aggression, double caution, double galaxyIntoleranceLevel, ref int refusalCount)
        {
            bool result = false;
            if (Policy.WarAttacksHarassEnemies && ShouldProvoke(empire, ourMilitaryPotency, aggression, caution, galaxyIntoleranceLevel, provokeWithRaids: true) && !_EmpiresToAttack.Contains(empire))
            {
                bool flag = false;
                for (int i = 0; i < empire.ProposedDiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = empire.ProposedDiplomaticRelations[i];
                    if (diplomaticRelation.Initiator == this)
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageRaid(empire), empire, AdvisorMessageType.PrepareRaid))
                {
                    _EmpiresToAttack.Add(empire);
                    result = true;
                }
            }
            return result;
        }

        private void DetermineRandomAttacks()
        {
            IdentifyDesiredForeignColonies();
            int refusalCount = 0;
            int weightedMilitaryPotency = WeightedMilitaryPotency;
            int num = 0;
            double aggression = CalculateAggressionFactor();
            double caution = CalculateCautionFactor();
            double intoleranceLevel = _Galaxy.IntoleranceLevel;
            int num2 = Galaxy.Rnd.Next(0, _EmpiresWithDesiredColonies.Count);
            for (int i = num2; i < _EmpiresWithDesiredColonies.Count; i++)
            {
                if (num >= 1)
                {
                    break;
                }
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(_EmpiresWithDesiredColonies[i]);
                if (diplomaticRelation.Type != DiplomaticRelationType.War)
                {
                    bool flag = false;
                    DiplomaticStrategy strategy = diplomaticRelation.Strategy;
                    if (strategy == DiplomaticStrategy.Conquer || strategy == DiplomaticStrategy.Punish)
                    {
                        flag = true;
                    }
                    if (flag && DetermineAttackOnSingleEmpire(_EmpiresWithDesiredColonies[i], weightedMilitaryPotency, aggression, caution, intoleranceLevel, ref refusalCount))
                    {
                        num++;
                    }
                }
            }
            for (int j = 0; j < num2; j++)
            {
                if (num >= 1)
                {
                    break;
                }
                DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(_EmpiresWithDesiredColonies[j]);
                if (diplomaticRelation2.Type != DiplomaticRelationType.War)
                {
                    bool flag2 = false;
                    DiplomaticStrategy strategy2 = diplomaticRelation2.Strategy;
                    if (strategy2 == DiplomaticStrategy.Conquer || strategy2 == DiplomaticStrategy.Punish)
                    {
                        flag2 = true;
                    }
                    if (flag2 && DetermineAttackOnSingleEmpire(_EmpiresWithDesiredColonies[j], weightedMilitaryPotency, aggression, caution, intoleranceLevel, ref refusalCount))
                    {
                        num++;
                    }
                }
            }
        }

        private void IdentifyDesiredForeignColonies()
        {
            _DesiredForeignColonies.Clear();
            _EmpiresWithDesiredColonies.Clear();
            ResourceList resourceList = IdentifyDeficientEmpireResources();
            double num = Galaxy.SizeX;
            double num2 = 0.0;
            double num3 = Galaxy.SizeY;
            double num4 = 0.0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null)
                {
                    if (habitat.Xpos < num)
                    {
                        num = habitat.Xpos;
                    }
                    if (habitat.Xpos > num2)
                    {
                        num2 = habitat.Xpos;
                    }
                    if (habitat.Ypos < num3)
                    {
                        num3 = habitat.Ypos;
                    }
                    if (habitat.Ypos > num4)
                    {
                        num4 = habitat.Ypos;
                    }
                }
            }
            num -= (double)Galaxy.IndexSize;
            num2 += (double)Galaxy.IndexSize;
            num3 -= (double)Galaxy.IndexSize;
            num4 += (double)Galaxy.IndexSize;
            double num5 = CalculateAggressionFactor();
            CalculateCautionFactor();
            double intoleranceLevel = _Galaxy.IntoleranceLevel;
            for (int j = 0; j < _Galaxy.Empires.Count; j++)
            {
                if (_Galaxy.Empires[j] == this)
                {
                    continue;
                }
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(_Galaxy.Empires[j]);
                double num6 = 1.0 + Math.Max(0.0, empireEvaluation.Bias / -10.0);
                for (int k = 0; k < _Galaxy.Empires[j].Colonies.Count; k++)
                {
                    if (_Galaxy.Empires[j].Colonies[k] == null || !(_Galaxy.Empires[j].Colonies[k].Xpos > num) || !(_Galaxy.Empires[j].Colonies[k].Xpos < num2) || !(_Galaxy.Empires[j].Colonies[k].Ypos > num3) || !(_Galaxy.Empires[j].Colonies[k].Ypos < num4))
                    {
                        continue;
                    }
                    double num7 = 0.0;
                    Habitat habitat2 = _Galaxy.Empires[j].Colonies[k];
                    if (!CheckSystemExplored(habitat2.SystemIndex))
                    {
                        continue;
                    }
                    Habitat habitat3 = habitat2;
                    double d = habitat3.StrategicValue;
                    d = Math.Sqrt(d);
                    d *= 220.0;
                    if (_ResourceMap.CheckResourcesKnown(habitat2))
                    {
                        for (int l = 0; l < 5 && l < resourceList.Count; l++)
                        {
                            int num8 = habitat3.Resources.IndexOf(resourceList[l].ResourceID, 0);
                            if (num8 >= 0)
                            {
                                num7 += resourceList[l].SortTag * 10000.0;
                            }
                        }
                    }
                    num7 = Math.Min(num7, 220000.0);
                    if (habitat2.Ruin != null && (habitat2.Ruin.BonusDefensive > 0.0 || habitat2.Ruin.BonusDiplomacy > 0.0 || habitat2.Ruin.BonusHappiness > 0.0 || habitat2.Ruin.BonusResearchEnergy > 0.0 || habitat2.Ruin.BonusResearchHighTech > 0.0 || habitat2.Ruin.BonusResearchWeapons > 0.0 || habitat2.Ruin.BonusWealth > 0.0))
                    {
                        d *= 10.0;
                    }
                    Habitat habitat4 = _Galaxy.FastFindNearestColony((int)habitat3.Xpos, (int)habitat3.Ypos, this, Galaxy.MajorColonyStrategicThreshhold);
                    if (habitat4 != null)
                    {
                        double num9 = Math.Sqrt(_Galaxy.CalculateDistance(habitat4.Xpos, habitat4.Ypos, habitat3.Xpos, habitat3.Ypos));
                        num9 /= num6;
                        num9 /= num5;
                        num9 /= 1.0 + 3.0 * intoleranceLevel;
                        d /= num9;
                        num7 /= num9;
                    }
                    else
                    {
                        double num10 = Math.Sqrt(_Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, habitat3.Xpos, habitat3.Ypos));
                        num10 /= num6;
                        num10 /= num5;
                        num10 /= 1.0 + 3.0 * intoleranceLevel;
                        d /= num10;
                        num7 /= num10;
                    }
                    d *= _Galaxy.AggressionLevel;
                    num7 *= _Galaxy.AggressionLevel;
                    d = d * 0.3 + d * 0.7 * intoleranceLevel;
                    num7 = num7 * 0.3 + num7 * 0.7 * intoleranceLevel;
                    d = Math.Min(d, 1000.0);
                    num7 = Math.Min(num7, 1000.0);
                    if (d > (double)Galaxy.DesiredForeignColonyStrategicThreshhold)
                    {
                        HabitatPrioritization item = new HabitatPrioritization(habitat3, (int)d);
                        _DesiredForeignColonies.Add(item);
                    }
                    else if (num7 > (double)Galaxy.DesiredForeignColonyResourceThreshhold)
                    {
                        HabitatPrioritization item2 = new HabitatPrioritization(habitat3, (int)num7);
                        _DesiredForeignColonies.Add(item2);
                    }
                }
            }
            _DesiredForeignColonies.Sort();
            _DesiredForeignColonies.Reverse();
            for (int m = 0; m < _DesiredForeignColonies.Count; m++)
            {
                HabitatPrioritization habitatPrioritization = _DesiredForeignColonies[m];
                Empire owner = habitatPrioritization.Habitat.Owner;
                if (owner != null && !_EmpiresWithDesiredColonies.Contains(owner))
                {
                    _EmpiresWithDesiredColonies.Add(owner);
                }
            }
        }

        public ResourceList IdentifyDeficientEmpireResources()
        {
            return IdentifyDeficientEmpireResources(includeLuxuryResources: false, 0.0);
        }

        public ResourceList IdentifyDeficientEmpireResources(bool includeLuxuryResources, double minimumDemand)
        {
            OrderList orders = _Galaxy.Orders.GetOrders(this);
            int[] array = new int[_Galaxy.ResourceSystem.Resources.Count];
            foreach (Order item in orders)
            {
                if (item.CommodityResource != null && item.AmountOutstandingToContract > 0)
                {
                    Resource commodityResource = item.CommodityResource;
                    array[commodityResource.ResourceID] += item.AmountOutstandingToContract;
                }
            }
            int[] array2 = new int[_Galaxy.ResourceSystem.Resources.Count];
            for (int i = 0; i < SpacePorts.Count; i++)
            {
                BuiltObject builtObject = SpacePorts[i];
                if (builtObject.Cargo == null)
                {
                    continue;
                }
                foreach (Cargo item2 in builtObject.Cargo)
                {
                    if (item2.CommodityResource != null && item2.Available > 0)
                    {
                        Resource commodityResource2 = item2.CommodityResource;
                        array2[commodityResource2.ResourceID] += item2.Available;
                    }
                }
            }
            if (CheckEmpireHasHyperDriveTech(this))
            {
                for (int j = 0; j < MiningStations.Count; j++)
                {
                    BuiltObject builtObject2 = MiningStations[j];
                    if (builtObject2.Cargo == null)
                    {
                        continue;
                    }
                    foreach (Cargo item3 in builtObject2.Cargo)
                    {
                        if (item3.CommodityResource != null && item3.Available > 0)
                        {
                            Resource commodityResource3 = item3.CommodityResource;
                            array2[commodityResource3.ResourceID] += item3.Available;
                        }
                    }
                }
            }
            for (int k = 0; k < array2.Length; k++)
            {
                Resource resource = new Resource(_Galaxy.ResourceSystem.Resources[k].ResourceID);
                bool isCriticalEmpireResource = false;
                if (DominantRace != null && DominantRace.CriticalResources.GetBonusByResourceType(resource.ResourceID) != null)
                {
                    isCriticalEmpireResource = true;
                }
                if (CheckResourceSupplyMeetsExpected(resource, isCriticalEmpireResource, 1.5))
                {
                    array2[k] = Math.Max(10000, Math.Max(array2[k] * 2, array[k] * 5));
                }
            }
            ResourceList resourceList = new ResourceList();
            for (int l = 0; l < Galaxy.ResourceSystem.Resources.Count; l++)
            {
                ResourceDefinition resourceDefinition = Galaxy.ResourceSystem.Resources[l];
                Resource resource2 = new Resource(resourceDefinition.ResourceID);
                double val = 0.0;
                if (includeLuxuryResources)
                {
                    val = (double)array[l] / Math.Max(1.0, array2[l]);
                }
                else if (!resource2.IsLuxuryResource)
                {
                    val = (double)array[l] / Math.Max(1.0, array2[l]);
                }
                resource2.SortTag = Math.Max(minimumDemand, val);
                resourceList.Add(resource2);
            }
            resourceList.Sort();
            resourceList.Reverse();
            return resourceList;
        }

        public void RefreshColonyFacilityInfo()
        {
            Capitals = IdentifyEmpireCapitals();
            CapitalSystemStars.Clear();
            for (int i = 0; i < Capitals.Count; i++)
            {
                CapitalSystemStars.Add(Galaxy.DetermineHabitatSystemStar(Capitals[i]));
            }
        }

        public void ReviewColonyWonders()
        {
            if (DominantRace == null || !DominantRace.Expanding)
            {
                return;
            }
            PlanetaryFacilityDefinitionList planetaryFacilityDefinitionList = Research.BuildablePlanetaryFacilities.Clone();
            PlanetaryFacilityDefinitionList wonders = planetaryFacilityDefinitionList.GetWonders();
            PlanetaryFacilityDefinitionList planetaryFacilityDefinitionList2 = new PlanetaryFacilityDefinitionList();
            for (int i = 0; i < wonders.Count; i++)
            {
                if (_Galaxy.CheckWonderBuilt(wonders[i]))
                {
                    planetaryFacilityDefinitionList2.Add(wonders[i]);
                    continue;
                }
                for (int j = 0; j < Colonies.Count; j++)
                {
                    Habitat habitat = Colonies[j];
                    if (habitat == null || habitat.Facilities == null || habitat.HasBeenDestroyed)
                    {
                        continue;
                    }
                    for (int k = 0; k < habitat.Facilities.Count; k++)
                    {
                        PlanetaryFacility planetaryFacility = habitat.Facilities[k];
                        if (planetaryFacility != null && planetaryFacility.PlanetaryFacilityDefinitionId == wonders[i].PlanetaryFacilityDefinitionId)
                        {
                            planetaryFacilityDefinitionList2.Add(wonders[i]);
                        }
                    }
                }
            }
            for (int l = 0; l < planetaryFacilityDefinitionList2.Count; l++)
            {
                wonders.Remove(planetaryFacilityDefinitionList2[l]);
            }
            int refusalCount = 0;
            double annualEmpireExpenses = 0.0;
            double num = CalculateAccurateAnnualCashflowIncludingUnderConstruction(out annualEmpireExpenses);
            HabitatList habitatList = new HabitatList();
            habitatList.AddRange(Colonies);
            habitatList.Sort();
            habitatList.Reverse();
            for (int m = 0; m < wonders.Count; m++)
            {
                PlanetaryFacilityDefinition planetaryFacilityDefinition = wonders[m];
                if (planetaryFacilityDefinition == null || planetaryFacilityDefinition.Type != PlanetaryFacilityType.Wonder)
                {
                    continue;
                }
                double num2 = StateMoney / 1.5;
                if (Policy.PrioritizeBuildWonderId >= 0 && planetaryFacilityDefinition.PlanetaryFacilityDefinitionId == Policy.PrioritizeBuildWonderId)
                {
                    num2 = StateMoney;
                }
                double num3 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition, this);
                if (num3 < num2 && num > planetaryFacilityDefinition.Maintenance)
                {
                    Habitat habitat2 = null;
                    switch (planetaryFacilityDefinition.WonderType)
                    {
                        case WonderType.ColonyIncome:
                            {
                                HabitatList orderedColonies2 = Colonies.OrderByRevenue();
                                habitat2 = BuildWonderAtFirstAvailableColony(planetaryFacilityDefinition, orderedColonies2, ref refusalCount);
                                break;
                            }
                        case WonderType.ColonyPopulationGrowth:
                            {
                                HabitatList orderedColonies = Colonies.OrderByPopulationProportion(0.5, 1000000000L);
                                habitat2 = BuildWonderAtFirstAvailableColony(planetaryFacilityDefinition, orderedColonies, ref refusalCount);
                                break;
                            }
                        case WonderType.EmpirePopulationGrowth:
                        case WonderType.EmpireHappiness:
                        case WonderType.EmpireResearchWeapons:
                        case WonderType.EmpireResearchEnergy:
                        case WonderType.EmpireResearchHighTech:
                        case WonderType.EmpireIncome:
                        case WonderType.ColonyHappiness:
                        case WonderType.ColonyDefense:
                        case WonderType.ColonyConstructionSpeed:
                        case WonderType.RaceAchievement:
                            habitat2 = BuildWonderAtFirstAvailableColony(planetaryFacilityDefinition, habitatList, ref refusalCount);
                            break;
                    }
                    if (habitat2 != null)
                    {
                        SendNewsBroadcastWonderBegin(planetaryFacilityDefinition, habitat2);
                    }
                }
            }
        }

        private Habitat BuildWonderAtFirstAvailableColony(PlanetaryFacilityDefinition wonder, HabitatList orderedColonies, ref int refusalCount)
        {
            for (int i = 0; i < orderedColonies.Count; i++)
            {
                Habitat habitat = CheckBuildWonder(wonder, orderedColonies[i], ref refusalCount);
                if (habitat != null)
                {
                    return habitat;
                }
            }
            return null;
        }

        private Habitat CheckBuildWonder(PlanetaryFacilityDefinition wonder, Habitat colony, ref int refusalCount)
        {
            if (wonder != null && colony != null && !colony.HasBeenDestroyed && colony.Facilities != null)
            {
                double num = Galaxy.CalculatePlanetaryFacilityCost(wonder, this);
                if (StateMoney >= num)
                {
                    bool flag = false;
                    if (colony.Facilities.Count > 0)
                    {
                        PlanetaryFacility planetaryFacility = colony.Facilities[colony.Facilities.Count - 1];
                        if (planetaryFacility != null && planetaryFacility.Type == PlanetaryFacilityType.Wonder && planetaryFacility.ConstructionProgress < 1f)
                        {
                            flag = true;
                        }
                    }
                    if (!flag && colony.CanBuildWonder(wonder))
                    {
                        double annualEmpireExpenses = 0.0;
                        double num2 = CalculateAccurateAnnualCashflowIncludingUnderConstruction(out annualEmpireExpenses);
                        if (num2 > wonder.Maintenance && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(colony, wonder), colony, AdvisorMessageType.ColonyFacility, wonder, null) && colony.QueueWonderConstruction(wonder))
                        {
                            StateMoney -= num;
                            PirateEconomy.PerformExpense(num, PirateExpenseType.FacilityConstruction, _Galaxy.CurrentStarDate);
                            return colony;
                        }
                    }
                }
            }
            return null;
        }

        public void PirateReviewColonyFacilities()
        {
            PlanetaryFacilityDefinition planetaryFacilityDefinition = Galaxy.PlanetaryFacilityDefinitionsStatic.FindFacilityByType(PlanetaryFacilityType.PirateBase);
            PlanetaryFacilityDefinition planetaryFacilityDefinition2 = Galaxy.PlanetaryFacilityDefinitionsStatic.FindFacilityByType(PlanetaryFacilityType.PirateFortress);
            PlanetaryFacilityDefinition planetaryFacilityDefinition3 = Galaxy.PlanetaryFacilityDefinitionsStatic.FindFacilityByType(PlanetaryFacilityType.PirateCriminalNetwork);
            int refusalCount = 0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat == null)
                {
                    continue;
                }
                bool flag = false;
                PirateColonyControl pirateColonyControl = habitat.GetPirateControl().GetByFacilityControl();
                if (pirateColonyControl != null && pirateColonyControl.EmpireId == EmpireId)
                {
                    flag = true;
                }
                else
                {
                    pirateColonyControl = habitat.GetPirateControl().GetHighestControl();
                    if (pirateColonyControl != null && pirateColonyControl.EmpireId == EmpireId && pirateColonyControl.ControlLevel >= 0.5f)
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    continue;
                }
                if (habitat.Facilities == null)
                {
                    habitat.Facilities = new PlanetaryFacilityList();
                }
                if (habitat.Facilities == null)
                {
                    continue;
                }
                if (pirateColonyControl.ControlLevel >= 1f)
                {
                    if (habitat.Facilities.CountByType(PlanetaryFacilityType.PirateBase) <= 0)
                    {
                        bool flag2 = false;
                        double num = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition, this);
                        if (StateMoney >= num)
                        {
                            flag2 = true;
                        }
                        if (!flag2)
                        {
                            if (!CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition, haveFunds: false), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition, null))
                            {
                            }
                        }
                        else if (CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition, null) && habitat.QueueFacilityConstruction(PlanetaryFacilityType.PirateBase))
                        {
                            StateMoney -= num;
                            PirateEconomy.PerformExpense(num, PirateExpenseType.FacilityConstruction, _Galaxy.CurrentStarDate);
                            pirateColonyControl.HasFacilityControl = true;
                        }
                    }
                    else if (habitat.Facilities.CountByType(PlanetaryFacilityType.PirateFortress) <= 0 && habitat.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateBase) > 0)
                    {
                        bool flag3 = false;
                        double num2 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition2, this);
                        if (StateMoney >= num2)
                        {
                            flag3 = true;
                        }
                        if (!flag3)
                        {
                            if (!CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition2, haveFunds: false), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition2, null))
                            {
                            }
                        }
                        else if (CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition2), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition2, null) && habitat.QueueFacilityConstruction(PlanetaryFacilityType.PirateFortress))
                        {
                            StateMoney -= num2;
                            PirateEconomy.PerformExpense(num2, PirateExpenseType.FacilityConstruction, _Galaxy.CurrentStarDate);
                            pirateColonyControl.HasFacilityControl = true;
                        }
                    }
                    else
                    {
                        if (habitat.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateFortress) <= 0)
                        {
                            continue;
                        }
                        bool flag4 = false;
                        double num3 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition3, this);
                        if (StateMoney >= num3)
                        {
                            flag4 = true;
                        }
                        if (CountPirateCriminalNetworks() > 0)
                        {
                            continue;
                        }
                        if (!flag4)
                        {
                            if (!CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition3, haveFunds: false), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition3, null))
                            {
                            }
                        }
                        else if (CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition3), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition3, null) && habitat.QueueFacilityConstruction(PlanetaryFacilityType.PirateCriminalNetwork))
                        {
                            StateMoney -= num3;
                            PirateEconomy.PerformExpense(num3, PirateExpenseType.FacilityConstruction, _Galaxy.CurrentStarDate);
                            pirateColonyControl.HasFacilityControl = true;
                        }
                    }
                }
                else
                {
                    if (habitat.Facilities.CountByType(PlanetaryFacilityType.PirateBase) > 0)
                    {
                        continue;
                    }
                    bool flag5 = false;
                    double num4 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition, this);
                    if (StateMoney >= num4)
                    {
                        flag5 = true;
                    }
                    if (!flag5)
                    {
                        if (!CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition, haveFunds: false), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition, null))
                        {
                        }
                    }
                    else if (CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition, null) && habitat.QueueFacilityConstruction(PlanetaryFacilityType.PirateBase))
                    {
                        StateMoney -= num4;
                        PirateEconomy.PerformExpense(num4, PirateExpenseType.FacilityConstruction, _Galaxy.CurrentStarDate);
                        pirateColonyControl.HasFacilityControl = true;
                    }
                }
            }
        }

        public void ReviewColonyFacilities()
        {
            PlanetaryFacilityDefinitionList planetaryFacilityDefinitionList = Research.BuildablePlanetaryFacilities.Clone();
            PlanetaryFacilityDefinitionList planetaryFacilityDefinitionList2 = new PlanetaryFacilityDefinitionList();
            for (int i = 0; i < planetaryFacilityDefinitionList.Count; i++)
            {
                switch (planetaryFacilityDefinitionList[i].Type)
                {
                    case PlanetaryFacilityType.ArmoredFactory:
                        if (!Policy.ColonyAllowFacilityArmoredFactory)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.SpyAcademy:
                        if (!Policy.ColonyAllowFacilitySpyAcademy)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.ScienceAcademy:
                        if (!Policy.ColonyAllowFacilityScienceAcademy)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.NavalAcademy:
                        if (!Policy.ColonyAllowFacilityNavalAcademy)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.MilitaryAcademy:
                        if (!Policy.ColonyAllowFacilityMilitaryAcademy)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.CloningFacility:
                        if (!Policy.ColonyAllowFacilityCloningFacility)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.FortifiedBunker:
                        if (!Policy.ColonyAllowFacilityFortifiedBunker)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.IonCannon:
                        if (!Policy.ColonyAllowFacilityGiantIonCannon)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.PlanetaryShield:
                        if (!Policy.ColonyAllowFacilityPlanetaryShield)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.RegionalCapital:
                        if (!Policy.ColonyAllowFacilityRegionalCapital)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.RoboticTroopFoundry:
                        if (!Policy.ColonyAllowFacilityRoboticTroopFoundry)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.TroopTrainingCenter:
                        if (!Policy.ColonyAllowFacilityTroopTrainingCenter)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                    case PlanetaryFacilityType.TerraformingFacility:
                        if (!Policy.ColonyAllowFacilityTerraformingFacility)
                        {
                            planetaryFacilityDefinitionList2.Add(planetaryFacilityDefinitionList[i]);
                        }
                        break;
                }
            }
            for (int j = 0; j < planetaryFacilityDefinitionList2.Count; j++)
            {
                planetaryFacilityDefinitionList.Remove(planetaryFacilityDefinitionList2[j]);
            }
            int refusalCount = 0;
            double annualEmpireExpenses = 0.0;
            double num = CalculateAccurateAnnualCashflowIncludingUnderConstruction(out annualEmpireExpenses);
            HabitatList habitatList = IdentifyEmpireRegionalCapitals(includeUnderConstruction: true);
            PlanetaryFacilityDefinition planetaryFacilityDefinition = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.RegionalCapital);
            int num2 = planetaryFacilityDefinitionList.CountByType(PlanetaryFacilityType.RegionalCapital);
            double num3 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition, this);
            if (habitatList.Count < num2 && planetaryFacilityDefinition != null && StateMoney >= num3 && num > planetaryFacilityDefinition.Maintenance)
            {
                habitatList.Add(Capital);
                HabitatList habitatList2 = new HabitatList();
                for (int k = 0; k < Colonies.Count; k++)
                {
                    if (!habitatList.Contains(Colonies[k]) && Colonies[k].Population != null && Colonies[k].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdRegionalCapital * 1000000L)
                    {
                        habitatList2.Add(Colonies[k]);
                    }
                }
                habitatList2.Sort();
                habitatList2.Reverse();
                Habitat habitat = null;
                double num4 = (double)Galaxy.SectorSize * 0.7;
                for (int l = 0; l < habitatList2.Count && habitatList2[l].StrategicValue >= 100000; l++)
                {
                    bool flag = true;
                    for (int m = 0; m < habitatList.Count; m++)
                    {
                        double num5 = _Galaxy.CalculateDistance(habitatList2[l].Xpos, habitatList2[l].Ypos, habitatList[m].Xpos, habitatList[m].Ypos);
                        if (num5 < num4)
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        habitat = habitatList2[l];
                        break;
                    }
                }
                if (habitat != null && StateMoney >= num3 && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat, planetaryFacilityDefinition), habitat, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition, null) && habitat.QueueFacilityConstruction(PlanetaryFacilityType.RegionalCapital))
                {
                    StateMoney -= num3;
                    num -= planetaryFacilityDefinition.Maintenance;
                }
            }
            PlanetaryFacilityDefinition planetaryFacilityDefinition2 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.TerraformingFacility);
            if (planetaryFacilityDefinition2 != null)
            {
                double num6 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition2, this);
                for (int n = 0; n < Colonies.Count; n++)
                {
                    Habitat habitat2 = Colonies[n];
                    if (habitat2 != null && !habitat2.HasBeenDestroyed && habitat2.Population != null)
                    {
                        long totalAmount = habitat2.Population.TotalAmount;
                        if (totalAmount >= (long)Policy.ColonyFacilityPopulationThresholdTerraformingFacility * 1000000L && StateMoney > num6 * 2.5 && num > planetaryFacilityDefinition2.Maintenance && habitat2.Damage > 0f && habitat2.Facilities.CountByType(PlanetaryFacilityType.TerraformingFacility) <= 0 && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat2, planetaryFacilityDefinition2), habitat2, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition2, null) && habitat2.QueueFacilityConstruction(PlanetaryFacilityType.TerraformingFacility))
                        {
                            StateMoney -= num6;
                            num -= planetaryFacilityDefinition2.Maintenance;
                        }
                    }
                }
            }
            HabitatList habitatList3 = new HabitatList();
            habitatList3.AddRange(Colonies);
            habitatList3.Sort();
            habitatList3.Reverse();
            PlanetaryFacilityDefinition planetaryFacilityDefinition3 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.PlanetaryShield);
            PlanetaryFacilityDefinition planetaryFacilityDefinition4 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.IonCannon);
            PlanetaryFacilityDefinition planetaryFacilityDefinition5 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.SpyAcademy);
            PlanetaryFacilityDefinition planetaryFacilityDefinition6 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.ScienceAcademy);
            PlanetaryFacilityDefinition planetaryFacilityDefinition7 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.NavalAcademy);
            double num7 = 0.0;
            double num8 = 0.0;
            if (planetaryFacilityDefinition5 != null)
            {
                num7 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition5, this);
                num8 = planetaryFacilityDefinition5.Maintenance;
            }
            else if (planetaryFacilityDefinition6 != null)
            {
                num7 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition6, this);
                num8 = planetaryFacilityDefinition6.Maintenance;
            }
            else if (planetaryFacilityDefinition7 != null)
            {
                num7 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition7, this);
                num8 = planetaryFacilityDefinition7.Maintenance;
            }
            else if (planetaryFacilityDefinition3 != null)
            {
                num7 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition3, this);
                num8 = planetaryFacilityDefinition3.Maintenance;
            }
            else if (planetaryFacilityDefinition4 != null)
            {
                num7 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition4, this);
                num8 = planetaryFacilityDefinition4.Maintenance;
            }
            if (num7 > 0.0)
            {
                int num9 = 1;
                int num10 = 1;
                int num11 = 1;
                num10 = ((!(Policy.ResearchPriority < 1.0)) ? ((Policy.ResearchPriority < 1.5) ? 1 : ((!(Policy.ResearchPriority < 2.0)) ? 3 : 2)) : 0);
                switch (Policy.ConstructionMilitary)
                {
                    case 0:
                        num11 = 0;
                        break;
                    case 1:
                        num11 = 1;
                        break;
                    case 2:
                        num11 = 2;
                        break;
                }
                if (DominantRace != null && DominantRace.EspionageBonus > 0)
                {
                    num9 = 2;
                }
                int num12 = CountFacilities(PlanetaryFacilityType.SpyAcademy);
                int num13 = CountFacilities(PlanetaryFacilityType.ScienceAcademy);
                int num14 = CountFacilities(PlanetaryFacilityType.NavalAcademy);
                for (int num15 = 0; num15 < habitatList3.Count; num15++)
                {
                    if (StateMoney > num7 * 2.5 && num > num8 && habitatList3[num15].StrategicValue > 200000)
                    {
                        int num16 = 0;
                        int num17 = 0;
                        int num18 = 0;
                        int num19 = 0;
                        int num20 = 0;
                        if (habitatList3[num15].Facilities != null)
                        {
                            num16 = habitatList3[num15].Facilities.CountByType(PlanetaryFacilityType.PlanetaryShield);
                            num17 = habitatList3[num15].Facilities.CountByType(PlanetaryFacilityType.IonCannon);
                            num18 = habitatList3[num15].Facilities.CountByType(PlanetaryFacilityType.SpyAcademy);
                            num19 = habitatList3[num15].Facilities.CountByType(PlanetaryFacilityType.ScienceAcademy);
                            num20 = habitatList3[num15].Facilities.CountByType(PlanetaryFacilityType.NavalAcademy);
                        }
                        if (planetaryFacilityDefinition3 != null && num16 <= 0 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition3, this) && num > planetaryFacilityDefinition3.Maintenance && habitatList3[num15].Population != null && habitatList3[num15].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdPlanetaryShield * 1000000L && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitatList3[num15], planetaryFacilityDefinition3), habitatList3[num15], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition3, null) && habitatList3[num15].QueueFacilityConstruction(PlanetaryFacilityType.PlanetaryShield))
                        {
                            StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition3, this);
                            num -= planetaryFacilityDefinition3.Maintenance;
                        }
                        if (planetaryFacilityDefinition4 != null && num17 <= 0 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition4, this) && num > planetaryFacilityDefinition4.Maintenance && habitatList3[num15].Population != null && habitatList3[num15].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdGiantIonCannon * 1000000L && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitatList3[num15], planetaryFacilityDefinition4), habitatList3[num15], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition4, null) && habitatList3[num15].QueueFacilityConstruction(PlanetaryFacilityType.IonCannon))
                        {
                            StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition4, this);
                            num -= planetaryFacilityDefinition4.Maintenance;
                        }
                        if (planetaryFacilityDefinition5 != null && num18 <= 0 && num12 < num9 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition5, this) && num > planetaryFacilityDefinition5.Maintenance && habitatList3[num15].Population != null && habitatList3[num15].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdSpyAcademy * 1000000L && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitatList3[num15], planetaryFacilityDefinition5), habitatList3[num15], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition5, null) && habitatList3[num15].QueueFacilityConstruction(PlanetaryFacilityType.SpyAcademy))
                        {
                            StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition5, this);
                            num -= planetaryFacilityDefinition5.Maintenance;
                            num12++;
                        }
                        if (planetaryFacilityDefinition6 != null && num19 <= 0 && num13 < num10 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition6, this) && num > planetaryFacilityDefinition6.Maintenance && habitatList3[num15].Population != null && habitatList3[num15].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdScienceAcademy * 1000000L && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitatList3[num15], planetaryFacilityDefinition6), habitatList3[num15], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition6, null) && habitatList3[num15].QueueFacilityConstruction(PlanetaryFacilityType.ScienceAcademy))
                        {
                            StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition6, this);
                            num -= planetaryFacilityDefinition6.Maintenance;
                            num13++;
                        }
                        if (planetaryFacilityDefinition7 != null && num20 <= 0 && num14 < num11 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition7, this) && num > planetaryFacilityDefinition7.Maintenance && habitatList3[num15].Population != null && habitatList3[num15].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdNavalAcademy * 1000000L && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitatList3[num15], planetaryFacilityDefinition7), habitatList3[num15], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition7, null) && habitatList3[num15].QueueFacilityConstruction(PlanetaryFacilityType.NavalAcademy))
                        {
                            StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition7, this);
                            num -= planetaryFacilityDefinition7.Maintenance;
                            num14++;
                        }
                    }
                }
            }
            PlanetaryFacilityDefinition planetaryFacilityDefinition8 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.FortifiedBunker);
            if (planetaryFacilityDefinition8 != null)
            {
                StellarObjectList stellarObjectList = ResolveLocationsToDefend(includeBases: false);
                for (int num21 = 0; num21 < Colonies.Count; num21++)
                {
                    if (!(StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition8, this)) || !(num > planetaryFacilityDefinition8.Maintenance))
                    {
                        continue;
                    }
                    int num22 = 0;
                    if (Colonies[num21].Facilities != null)
                    {
                        num22 = Colonies[num21].Facilities.CountByType(PlanetaryFacilityType.FortifiedBunker);
                    }
                    if (num22 > 0)
                    {
                        continue;
                    }
                    if (stellarObjectList.Contains(Colonies[num21]) && Colonies[num21].Population != null && Colonies[num21].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdFortifiedBunker * 1000000L)
                    {
                        if (CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(Colonies[num21], planetaryFacilityDefinition8), Colonies[num21], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition8, null) && Colonies[num21].QueueFacilityConstruction(PlanetaryFacilityType.FortifiedBunker))
                        {
                            StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition8, this);
                            num -= planetaryFacilityDefinition8.Maintenance;
                        }
                    }
                    else if (_Galaxy.DetermineSpacePortAtColony(Colonies[num21]) != null && Galaxy.Rnd.Next(0, 2) == 1 && Colonies[num21].Population != null && Colonies[num21].Population.TotalAmount >= (long)Policy.ColonyFacilityPopulationThresholdFortifiedBunker * 1000000L && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(Colonies[num21], planetaryFacilityDefinition8), Colonies[num21], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition8, null) && Colonies[num21].QueueFacilityConstruction(PlanetaryFacilityType.FortifiedBunker))
                    {
                        StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition8, this);
                        num -= planetaryFacilityDefinition8.Maintenance;
                    }
                }
            }
            PlanetaryFacilityDefinition planetaryFacilityDefinition9 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.TroopTrainingCenter);
            PlanetaryFacilityDefinition planetaryFacilityDefinition10 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.RoboticTroopFoundry);
            PlanetaryFacilityDefinition planetaryFacilityDefinition11 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.CloningFacility);
            PlanetaryFacilityDefinition planetaryFacilityDefinition12 = null;
            int num23 = ResolveEmpireRaceTendency(DominantRace);
            double num24 = DominantRace.TroopStrength;
            long num25 = 0L;
            if (num23 == 2 || num24 < 100.0)
            {
                planetaryFacilityDefinition12 = planetaryFacilityDefinition10;
                num25 = (long)Policy.ColonyFacilityPopulationThresholdRoboticTroopFoundry * 1000000L;
            }
            else if (num23 == 1 || num24 > 125.0)
            {
                if (planetaryFacilityDefinition11 != null)
                {
                    planetaryFacilityDefinition12 = planetaryFacilityDefinition11;
                    num25 = (long)Policy.ColonyFacilityPopulationThresholdCloningFacility * 1000000L;
                }
                else
                {
                    planetaryFacilityDefinition12 = planetaryFacilityDefinition9;
                    num25 = (long)Policy.ColonyFacilityPopulationThresholdTroopTrainingCenter * 1000000L;
                }
            }
            else if (num23 == 3)
            {
                planetaryFacilityDefinition12 = planetaryFacilityDefinition9;
                num25 = (long)Policy.ColonyFacilityPopulationThresholdTroopTrainingCenter * 1000000L;
            }
            else
            {
                planetaryFacilityDefinition12 = planetaryFacilityDefinition9;
                num25 = (long)Policy.ColonyFacilityPopulationThresholdTroopTrainingCenter * 1000000L;
            }
            num7 = 0.0;
            num8 = 0.0;
            if (planetaryFacilityDefinition12 != null)
            {
                num7 = Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition12, this);
                num8 = planetaryFacilityDefinition12.Maintenance;
            }
            HabitatList habitatList4 = DetermineTroopFacilityColonies();
            int num26 = habitatList4.Count;
            int num27 = Math.Max(1, Colonies.Count / 7);
            if (num26 < num27 && num7 > 0.0 && StateMoney > num7 && num > num8)
            {
                for (int num28 = 0; num28 < Colonies.Count; num28++)
                {
                    if (Colonies[num28].Population != null && Colonies[num28].Population.TotalAmount > num25 && Colonies[num28].EmpireApprovalRating >= 10.0)
                    {
                        int num29 = 0;
                        if (Colonies[num28].Facilities != null)
                        {
                            num29 = Math.Max(num29, Colonies[num28].Facilities.CountByType(PlanetaryFacilityType.CloningFacility));
                            num29 = Math.Max(num29, Colonies[num28].Facilities.CountByType(PlanetaryFacilityType.RoboticTroopFoundry));
                            num29 = Math.Max(num29, Colonies[num28].Facilities.CountByType(PlanetaryFacilityType.TroopTrainingCenter));
                        }
                        if (num29 <= 0 && StateMoney > num7 && num > num8 && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(Colonies[num28], planetaryFacilityDefinition12), Colonies[num28], AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition12, null) && Colonies[num28].QueueFacilityConstruction(planetaryFacilityDefinition12.Type))
                        {
                            StateMoney -= num7;
                            num -= num8;
                            num26++;
                        }
                    }
                }
            }
            PlanetaryFacilityDefinition planetaryFacilityDefinition13 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.ArmoredFactory);
            HabitatList habitatList5 = DetermineFacilityColonies(PlanetaryFacilityType.ArmoredFactory);
            int num30 = habitatList5.Count;
            int num31 = Math.Max(1, Colonies.Count / 8);
            num31 = ((Policy.TroopRecruitArmorLevel < 1.0) ? Math.Max(1, (int)((double)num31 * 0.5)) : ((!(Policy.TroopRecruitArmorLevel < 1.5)) ? Math.Max(1, (int)((double)num31 * 1.5)) : Math.Max(1, (int)((double)num31 * 1.0))));
            if (planetaryFacilityDefinition13 != null && num30 < num31 && Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition13, this) > 0.0 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition13, this) && num > planetaryFacilityDefinition13.Maintenance)
            {
                num25 = (long)Policy.ColonyFacilityPopulationThresholdArmoredFactory * 1000000L;
                for (int num32 = 0; num32 < habitatList3.Count; num32++)
                {
                    Habitat habitat3 = habitatList3[num32];
                    if (habitat3.Population != null && habitat3.Population.TotalAmount > num25 && num30 < num31)
                    {
                        int num33 = 0;
                        if (habitat3.Facilities != null)
                        {
                            num33 = habitat3.Facilities.CountByType(PlanetaryFacilityType.ArmoredFactory);
                        }
                        if (num33 <= 0 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition13, this) && num > planetaryFacilityDefinition13.Maintenance && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat3, planetaryFacilityDefinition13), habitat3, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition13, null) && habitat3.QueueFacilityConstruction(planetaryFacilityDefinition13.Type))
                        {
                            StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition13, this);
                            num -= planetaryFacilityDefinition13.Maintenance;
                            num30++;
                        }
                    }
                }
            }
            PlanetaryFacilityDefinition planetaryFacilityDefinition14 = planetaryFacilityDefinitionList.FindFacilityByType(PlanetaryFacilityType.MilitaryAcademy);
            HabitatList habitatList6 = DetermineFacilityColonies(PlanetaryFacilityType.MilitaryAcademy);
            int num34 = habitatList6.Count;
            int num35 = 1;
            num35 = ((!(Policy.TroopGarrisonLevel < 0.5)) ? ((Policy.TroopGarrisonLevel < 1.0) ? 1 : ((!(Policy.TroopGarrisonLevel < 1.5)) ? 3 : 2)) : 0);
            if (planetaryFacilityDefinition14 == null || num34 >= num35 || !(Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition14, this) > 0.0) || !(StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition14, this)) || !(num > planetaryFacilityDefinition14.Maintenance))
            {
                return;
            }
            num25 = (long)Policy.ColonyFacilityPopulationThresholdMilitaryAcademy * 1000000L;
            for (int num36 = 0; num36 < habitatList3.Count; num36++)
            {
                Habitat habitat4 = habitatList3[num36];
                if (habitat4.Population != null && habitat4.Population.TotalAmount > num25 && num34 < num35)
                {
                    int num37 = 0;
                    if (habitat4.Facilities != null)
                    {
                        num37 = habitat4.Facilities.CountByType(PlanetaryFacilityType.MilitaryAcademy);
                    }
                    if (num37 <= 0 && StateMoney > Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition14, this) && num > planetaryFacilityDefinition14.Maintenance && CheckTaskAuthorized(_ControlColonyFacilities, ref refusalCount, GenerateAutomationMessageColonyFacility(habitat4, planetaryFacilityDefinition14), habitat4, AdvisorMessageType.ColonyFacility, planetaryFacilityDefinition14, null) && habitat4.QueueFacilityConstruction(planetaryFacilityDefinition14.Type))
                    {
                        StateMoney -= Galaxy.CalculatePlanetaryFacilityCost(planetaryFacilityDefinition14, this);
                        num -= planetaryFacilityDefinition14.Maintenance;
                        num34++;
                    }
                }
            }
        }

        public int CumulateFacilityValue1(PlanetaryFacilityType facilityType)
        {
            return CumulateFacilityValue1(facilityType, mustBeCompleted: false);
        }

        public int CumulateFacilityValue1(PlanetaryFacilityType facilityType, bool mustBeCompleted)
        {
            int num = 0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && habitat.Facilities != null)
                {
                    num = ((!mustBeCompleted) ? (num + habitat.Facilities.CumulateValue1ByType(facilityType)) : (num + habitat.Facilities.CumulateValue1ByTypeCompleted(facilityType)));
                }
            }
            return num;
        }

        public int CountFacilities(PlanetaryFacilityType facilityType)
        {
            return CountFacilities(facilityType, mustBeCompleted: false);
        }

        public int CountFacilities(PlanetaryFacilityType facilityType, bool mustBeCompleted)
        {
            int num = 0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && habitat.Facilities != null)
                {
                    num = ((!mustBeCompleted) ? (num + habitat.Facilities.CountByType(facilityType)) : (num + habitat.Facilities.CountCompletedByType(facilityType)));
                }
            }
            return num;
        }

        public long CalculatePirateControlPopulationValue()
        {
            long num = 0L;
            if (PirateEmpireBaseHabitat != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat == null || habitat.HasBeenDestroyed || habitat.Population == null)
                    {
                        continue;
                    }
                    if (habitat.Empire == this)
                    {
                        num += habitat.Population.TotalAmount;
                        continue;
                    }
                    PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(this);
                    if (byFaction != null)
                    {
                        long num2 = (long)(byFaction.ControlLevel * (float)habitat.Population.TotalAmount);
                        num += num2;
                    }
                }
            }
            return num;
        }

        public HabitatList DetermineFacilityColonies(PlanetaryFacilityType facilityType)
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                int num = 0;
                if (Colonies[i].Facilities != null)
                {
                    num = Math.Max(num, Colonies[i].Facilities.CountByType(facilityType));
                }
                if (num > 0)
                {
                    habitatList.Add(Colonies[i]);
                }
            }
            return habitatList;
        }

        public HabitatList DetermineTroopFacilityColonies()
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                int num = 0;
                if (Colonies[i].Facilities != null)
                {
                    num = Math.Max(num, Colonies[i].Facilities.CountByType(PlanetaryFacilityType.CloningFacility));
                    num = Math.Max(num, Colonies[i].Facilities.CountByType(PlanetaryFacilityType.RoboticTroopFoundry));
                    num = Math.Max(num, Colonies[i].Facilities.CountByType(PlanetaryFacilityType.TroopTrainingCenter));
                }
                if (num > 0)
                {
                    habitatList.Add(Colonies[i]);
                }
            }
            return habitatList;
        }

        private EmpireList DetermineUnfriendlyEmpires(int attitudeThreshold)
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                if (DiplomaticRelations[i].Type != 0)
                {
                    EmpireEvaluation empireEvaluation = DiplomaticRelations[i].OtherEmpire.ObtainEmpireEvaluation(this);
                    if (empireEvaluation.OverallAttitude <= attitudeThreshold)
                    {
                        empireList.Add(DiplomaticRelations[i].OtherEmpire);
                    }
                }
            }
            return empireList;
        }

        public void ReviewSpecialBonusesRuinsWonders()
        {
            double num = 0.0;
            double num2 = 0.0;
            double num3 = 0.0;
            double num4 = 0.0;
            double num5 = 0.0;
            double num6 = 0.0;
            double num7 = 0.0;
            Ruin specialBonusResearchEnergyRuin = null;
            Ruin specialBonusResearchHighTechRuin = null;
            Ruin specialBonusResearchWeaponsRuin = null;
            Ruin specialBonusWealthRuin = null;
            Ruin specialBonusHappinessRuin = null;
            Ruin specialBonusDiplomacyRuin = null;
            PlanetaryFacility specialBonusResearchEnergyWonder = null;
            PlanetaryFacility specialBonusResearchHighTechWonder = null;
            PlanetaryFacility specialBonusResearchWeaponsWonder = null;
            PlanetaryFacility specialBonusWealthWonder = null;
            PlanetaryFacility specialBonusHappinessWonder = null;
            PlanetaryFacility specialBonusPopulationGrowthWonder = null;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat.Ruin != null)
                {
                    if (habitat.Ruin.BonusDiplomacy > num6)
                    {
                        num6 = habitat.Ruin.BonusDiplomacy;
                        specialBonusDiplomacyRuin = habitat.Ruin;
                    }
                    if (habitat.Ruin.BonusWealth > num4)
                    {
                        num4 = habitat.Ruin.BonusWealth;
                        specialBonusWealthRuin = habitat.Ruin;
                        specialBonusWealthWonder = null;
                    }
                    if (habitat.Ruin.BonusHappiness > num5)
                    {
                        num5 = habitat.Ruin.BonusHappiness;
                        specialBonusHappinessRuin = habitat.Ruin;
                        specialBonusHappinessWonder = null;
                    }
                    if (habitat.Ruin.BonusResearchWeapons > num3)
                    {
                        num3 = habitat.Ruin.BonusResearchWeapons;
                        specialBonusResearchWeaponsRuin = habitat.Ruin;
                        specialBonusResearchWeaponsWonder = null;
                    }
                    if (habitat.Ruin.BonusResearchEnergy > num)
                    {
                        num = habitat.Ruin.BonusResearchEnergy;
                        specialBonusResearchEnergyRuin = habitat.Ruin;
                        specialBonusResearchEnergyWonder = null;
                    }
                    if (habitat.Ruin.BonusResearchHighTech > num2)
                    {
                        num2 = habitat.Ruin.BonusResearchHighTech;
                        specialBonusResearchHighTechRuin = habitat.Ruin;
                        specialBonusResearchHighTechWonder = null;
                    }
                }
                if (habitat.Facilities == null || habitat.Facilities.Count <= 0)
                {
                    continue;
                }
                for (int j = 0; j < habitat.Facilities.Count; j++)
                {
                    PlanetaryFacility planetaryFacility = habitat.Facilities[j];
                    if (planetaryFacility == null || planetaryFacility.Type != PlanetaryFacilityType.Wonder || !(planetaryFacility.ConstructionProgress >= 1f))
                    {
                        continue;
                    }
                    switch (planetaryFacility.WonderType)
                    {
                        case WonderType.EmpireResearchWeapons:
                            {
                                double num14 = (double)planetaryFacility.Value2 / 100.0;
                                if (num14 > num3)
                                {
                                    num3 = num14;
                                    specialBonusResearchWeaponsWonder = planetaryFacility;
                                    specialBonusResearchWeaponsRuin = null;
                                }
                                break;
                            }
                        case WonderType.EmpireResearchEnergy:
                            {
                                double num10 = (double)planetaryFacility.Value2 / 100.0;
                                if (num10 > num)
                                {
                                    num = num10;
                                    specialBonusResearchEnergyWonder = planetaryFacility;
                                    specialBonusResearchEnergyRuin = null;
                                }
                                break;
                            }
                        case WonderType.EmpireResearchHighTech:
                            {
                                double num12 = (double)planetaryFacility.Value2 / 100.0;
                                if (num12 > num2)
                                {
                                    num2 = num12;
                                    specialBonusResearchHighTechWonder = planetaryFacility;
                                    specialBonusResearchHighTechRuin = null;
                                }
                                break;
                            }
                        case WonderType.EmpireHappiness:
                            {
                                double num9 = (double)planetaryFacility.Value2 / 100.0;
                                if (num9 > num5)
                                {
                                    num5 = num9;
                                    specialBonusHappinessWonder = planetaryFacility;
                                    specialBonusHappinessRuin = null;
                                }
                                break;
                            }
                        case WonderType.EmpireIncome:
                            {
                                double num13 = (double)planetaryFacility.Value2 / 100.0;
                                if (num13 > num4)
                                {
                                    num4 = num13;
                                    specialBonusWealthWonder = planetaryFacility;
                                    specialBonusWealthRuin = null;
                                }
                                break;
                            }
                        case WonderType.EmpirePopulationGrowth:
                            {
                                double num11 = (double)planetaryFacility.Value2 / 100.0;
                                if (num11 > num7)
                                {
                                    num7 = num11;
                                    specialBonusPopulationGrowthWonder = planetaryFacility;
                                }
                                break;
                            }
                        case WonderType.RaceAchievement:
                            if (planetaryFacility.Value2 == 1)
                            {
                                double num8 = 0.75;
                                if (num8 > num2)
                                {
                                    num2 = num8;
                                    specialBonusResearchHighTechWonder = planetaryFacility;
                                    specialBonusResearchHighTechRuin = null;
                                }
                            }
                            break;
                    }
                }
            }
            _SpecialBonusResearchEnergy = num;
            _SpecialBonusResearchHighTech = num2;
            _SpecialBonusResearchWeapons = num3;
            _SpecialBonusWealth = num4;
            _SpecialBonusHappiness = num5;
            _SpecialBonusDiplomacy = num6;
            _SpecialBonusPopulationGrowth = num7;
            _SpecialBonusResearchEnergyRuin = specialBonusResearchEnergyRuin;
            _SpecialBonusResearchHighTechRuin = specialBonusResearchHighTechRuin;
            _SpecialBonusResearchWeaponsRuin = specialBonusResearchWeaponsRuin;
            _SpecialBonusWealthRuin = specialBonusWealthRuin;
            _SpecialBonusHappinessRuin = specialBonusHappinessRuin;
            _SpecialBonusDiplomacyRuin = specialBonusDiplomacyRuin;
            _SpecialBonusHappinessWonder = specialBonusHappinessWonder;
            _SpecialBonusPopulationGrowthWonder = specialBonusPopulationGrowthWonder;
            _SpecialBonusResearchEnergyWonder = specialBonusResearchEnergyWonder;
            _SpecialBonusResearchHighTechWonder = specialBonusResearchHighTechWonder;
            _SpecialBonusResearchWeaponsWonder = specialBonusResearchWeaponsWonder;
            _SpecialBonusWealthWonder = specialBonusWealthWonder;
        }

        public string SummarizeSpecialResearchBonuses()
        {
            string text = string.Empty;
            int num = 0;
            if (Leader != null)
            {
                if (Leader.ResearchEnergy > 0)
                {
                    text = text + string.Format(TextResolver.GetText("Research Leader Bonus Energy Increase"), Leader.Name, ((double)Leader.ResearchEnergy / 100.0).ToString("+0%")) + "\n";
                }
                else if (Leader.ResearchEnergy < 0)
                {
                    text = text + string.Format(TextResolver.GetText("Research Leader Bonus Energy Decrease"), Leader.Name, ((double)Leader.ResearchEnergy / 100.0).ToString("-0%")) + "\n";
                }
                if (Leader.ResearchHighTech > 0)
                {
                    text = text + string.Format(TextResolver.GetText("Research Leader Bonus HighTech Increase"), Leader.Name, ((double)Leader.ResearchHighTech / 100.0).ToString("+0%")) + "\n";
                }
                else if (Leader.ResearchHighTech < 0)
                {
                    text = text + string.Format(TextResolver.GetText("Research Leader Bonus HighTech Decrease"), Leader.Name, ((double)Leader.ResearchHighTech / 100.0).ToString("-0%")) + "\n";
                }
                if (Leader.ResearchWeapons > 0)
                {
                    text = text + string.Format(TextResolver.GetText("Research Leader Bonus Weapons Increase"), Leader.Name, ((double)Leader.ResearchWeapons / 100.0).ToString("+0%")) + "\n";
                }
                else if (Leader.ResearchWeapons < 0)
                {
                    text = text + string.Format(TextResolver.GetText("Research Leader Bonus Weapons Decrease"), Leader.Name, ((double)Leader.ResearchWeapons / 100.0).ToString("-0%")) + "\n";
                }
            }
            if (Characters != null && Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.UltraGenius))
            {
                Character firstCharacterWithTrait = Characters.GetFirstCharacterWithTrait(CharacterTraitType.UltraGenius);
                string arg = string.Empty;
                if (firstCharacterWithTrait != null)
                {
                    arg = firstCharacterWithTrait.Name;
                }
                text = text + string.Format(TextResolver.GetText("Research UltraGenius Scientist Bonus"), arg, "+20%") + "\n";
            }
            if (ResearchBonusWeapons > 0f && ResearchBonusWeaponsStation != null)
            {
                text = text + string.Format(TextResolver.GetText("Weapons Research Bonus from Station"), ResearchBonusWeapons.ToString("+#%"), ResearchBonusWeaponsStation.Name) + "\n";
                CharacterList characterList = new CharacterList();
                if (ResearchBonusWeaponsStation.Characters != null)
                {
                    characterList = ResearchBonusWeaponsStation.Characters.GetNonTransferringCharacters(CharacterRole.Scientist);
                }
                float num2 = (float)characterList.TotalDiminishingResearchBonusesWeapons();
                float num3 = 0f;
                if (ResearchBonusWeaponsStation.ParentHabitat != null && ResearchBonusWeaponsStation.ParentHabitat.ResearchBonusIndustry == IndustryType.Weapon && ResearchBonusWeaponsStation.ParentHabitat.ResearchBonus > 0)
                {
                    num3 = (float)(int)ResearchBonusWeaponsStation.ParentHabitat.ResearchBonus / 100f;
                }
                else if (ResearchBonusWeaponsStation.NearestSystemStar != null && ResearchBonusWeaponsStation.NearestSystemStar.ResearchBonusIndustry == IndustryType.Weapon && ResearchBonusWeaponsStation.NearestSystemStar.ResearchBonus > 0)
                {
                    num3 = (float)(int)ResearchBonusWeaponsStation.NearestSystemStar.ResearchBonus / 100f;
                }
                text = text + "    (" + string.Format(TextResolver.GetText("Research Bonus Breakdown"), num3.ToString("+0%"), num2.ToString("+0%")) + ")";
                text += "\n";
            }
            if (ResearchBonusEnergy > 0f && ResearchBonusEnergyStation != null)
            {
                text = text + string.Format(TextResolver.GetText("Energy Research Bonus from Station"), ResearchBonusEnergy.ToString("+#%"), ResearchBonusEnergyStation.Name) + "\n";
                CharacterList characterList2 = new CharacterList();
                if (ResearchBonusEnergyStation.Characters != null)
                {
                    characterList2 = ResearchBonusEnergyStation.Characters.GetNonTransferringCharacters(CharacterRole.Scientist);
                }
                float num4 = (float)characterList2.TotalDiminishingResearchBonusesEnergy();
                float num5 = 0f;
                if (ResearchBonusEnergyStation.ParentHabitat != null && ResearchBonusEnergyStation.ParentHabitat.ResearchBonusIndustry == IndustryType.Energy && ResearchBonusEnergyStation.ParentHabitat.ResearchBonus > 0)
                {
                    num5 = (float)(int)ResearchBonusEnergyStation.ParentHabitat.ResearchBonus / 100f;
                }
                else if (ResearchBonusEnergyStation.NearestSystemStar != null && ResearchBonusEnergyStation.NearestSystemStar.ResearchBonusIndustry == IndustryType.Energy && ResearchBonusEnergyStation.NearestSystemStar.ResearchBonus > 0)
                {
                    num5 = (float)(int)ResearchBonusEnergyStation.NearestSystemStar.ResearchBonus / 100f;
                }
                text = text + "    (" + string.Format(TextResolver.GetText("Research Bonus Breakdown"), num5.ToString("+0%"), num4.ToString("+0%")) + ")";
                text += "\n";
            }
            if (ResearchBonusHighTech > 0f && ResearchBonusHighTechStation != null)
            {
                text = text + string.Format(TextResolver.GetText("HighTech Research Bonus from Station"), ResearchBonusHighTech.ToString("+#%"), ResearchBonusHighTechStation.Name) + "\n";
                CharacterList characterList3 = new CharacterList();
                if (ResearchBonusHighTechStation.Characters != null)
                {
                    characterList3 = ResearchBonusHighTechStation.Characters.GetNonTransferringCharacters(CharacterRole.Scientist);
                }
                float num6 = (float)characterList3.TotalDiminishingResearchBonusesHighTech();
                float num7 = 0f;
                if (ResearchBonusHighTechStation.ParentHabitat != null && ResearchBonusHighTechStation.ParentHabitat.ResearchBonusIndustry == IndustryType.HighTech && ResearchBonusHighTechStation.ParentHabitat.ResearchBonus > 0)
                {
                    num7 = (float)(int)ResearchBonusHighTechStation.ParentHabitat.ResearchBonus / 100f;
                }
                else if (ResearchBonusHighTechStation.NearestSystemStar != null && ResearchBonusHighTechStation.NearestSystemStar.ResearchBonusIndustry == IndustryType.HighTech && ResearchBonusHighTechStation.NearestSystemStar.ResearchBonus > 0)
                {
                    num7 = (float)(int)ResearchBonusHighTechStation.NearestSystemStar.ResearchBonus / 100f;
                }
                text = text + "    (" + string.Format(TextResolver.GetText("Research Bonus Breakdown"), num7.ToString("+0%"), num6.ToString("+0%")) + ")";
                text += "\n";
            }
            if (_SpecialBonusResearchEnergy > 0.0)
            {
                if (_SpecialBonusResearchEnergyRuin != null)
                {
                    text = text + string.Format(TextResolver.GetText("Energy Research Bonus from Ruin"), _SpecialBonusResearchEnergy.ToString("+#%"), _SpecialBonusResearchEnergyRuin.Name) + ", ";
                    num++;
                }
                else if (_SpecialBonusResearchEnergyWonder != null)
                {
                    text = text + string.Format(TextResolver.GetText("Energy Research Bonus from Ruin"), _SpecialBonusResearchEnergy.ToString("+#%"), _SpecialBonusResearchEnergyWonder.Name) + ", ";
                    num++;
                }
            }
            if (_SpecialBonusResearchWeapons > 0.0)
            {
                if (_SpecialBonusResearchWeaponsRuin != null)
                {
                    text = text + string.Format(TextResolver.GetText("Weapons Research Bonus from Ruin"), _SpecialBonusResearchWeapons.ToString("+#%"), _SpecialBonusResearchWeaponsRuin.Name) + ", ";
                    num++;
                }
                else if (_SpecialBonusResearchWeaponsWonder != null)
                {
                    text = text + string.Format(TextResolver.GetText("Weapons Research Bonus from Ruin"), _SpecialBonusResearchWeapons.ToString("+#%"), _SpecialBonusResearchWeaponsWonder.Name) + ", ";
                    num++;
                }
            }
            if (_SpecialBonusResearchHighTech > 0.0)
            {
                if (_SpecialBonusResearchHighTechRuin != null)
                {
                    text = text + string.Format(TextResolver.GetText("HighTech Research Bonus from Ruin"), _SpecialBonusResearchHighTech.ToString("+#%"), _SpecialBonusResearchHighTechRuin.Name) + ", ";
                    num++;
                }
                else if (_SpecialBonusResearchHighTechWonder != null)
                {
                    text = text + string.Format(TextResolver.GetText("HighTech Research Bonus from Ruin"), _SpecialBonusResearchHighTech.ToString("+#%"), _SpecialBonusResearchHighTechWonder.Name) + ", ";
                    num++;
                }
            }
            if (RaceEventType == RaceEventType.HistoricalDiscoveryExploreRuinsForResearchBoost)
            {
                text = text + string.Format(TextResolver.GetText("Research Bonus From Historical Discovery in Ruins"), "10%") + "\n";
                num++;
            }
            double num8 = 0.0;
            double num9 = 0.0;
            double num10 = 0.0;
            byte resourceId = byte.MaxValue;
            byte resourceId2 = byte.MaxValue;
            byte resourceId3 = byte.MaxValue;
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat.ResourceBonuses == null)
                    {
                        continue;
                    }
                    for (int j = 0; j < habitat.ResourceBonuses.Count; j++)
                    {
                        ResourceBonus resourceBonus = habitat.ResourceBonuses[j];
                        if (resourceBonus.Effect == ColonyResourceEffect.ResearchWeapons)
                        {
                            num8 += resourceBonus.Value / 100.0;
                            resourceId = resourceBonus.ResourceId;
                        }
                        else if (resourceBonus.Effect == ColonyResourceEffect.ResearchEnergy)
                        {
                            num9 += resourceBonus.Value / 100.0;
                            resourceId2 = resourceBonus.ResourceId;
                        }
                        else if (resourceBonus.Effect == ColonyResourceEffect.ResearchHighTech)
                        {
                            num10 += resourceBonus.Value / 100.0;
                            resourceId3 = resourceBonus.ResourceId;
                        }
                    }
                    num8 = Math.Min(1.0, num8);
                    num9 = Math.Min(1.0, num9);
                    num10 = Math.Min(1.0, num10);
                }
            }
            if (num8 > 0.0)
            {
                Resource resource = new Resource(resourceId);
                text = text + string.Format(TextResolver.GetText("Weapons Research Bonus From Colony Resources"), num8.ToString("+#%"), resource.Name) + " \n";
                num++;
            }
            if (num9 > 0.0)
            {
                Resource resource2 = new Resource(resourceId2);
                text = text + string.Format(TextResolver.GetText("Energy Research Bonus From Colony Resources"), num9.ToString("+#%"), resource2.Name) + " \n";
                num++;
            }
            if (num10 > 0.0)
            {
                Resource resource3 = new Resource(resourceId3);
                text = text + string.Format(TextResolver.GetText("HighTech Research Bonus From Colony Resources"), num10.ToString("+#%"), resource3.Name) + " \n";
                num++;
            }
            foreach (BuiltObject constructionShip in ConstructionShips)
            {
                if (constructionShip.ConstructionQueue == null)
                {
                    continue;
                }
                foreach (ConstructionYard constructionYard in constructionShip.ConstructionQueue.ConstructionYards)
                {
                    if (!((double)constructionYard.BuildSpeedModifier > 1.0) || constructionYard.ShipUnderConstruction == null)
                    {
                        continue;
                    }
                    if (constructionYard.ShipUnderConstruction.IsPlanetDestroyer)
                    {
                        text = text + string.Format(TextResolver.GetText("Ongoing bonus while repairing advanced tech"), constructionYard.ShipUnderConstruction.Name) + ", ";
                        num++;
                        continue;
                    }
                    bool flag = false;
                    GalaxyLocationList galaxyLocationList = _Galaxy.DetermineGalaxyLocationsAtPoint(constructionYard.ShipUnderConstruction.Xpos, constructionYard.ShipUnderConstruction.Ypos);
                    foreach (GalaxyLocation item in galaxyLocationList)
                    {
                        if (item.Type == GalaxyLocationType.DebrisField || item.Type == GalaxyLocationType.RestrictedArea)
                        {
                            text = text + string.Format(TextResolver.GetText("Ongoing bonus while repairing advanced ships"), item.Name) + ", ";
                            num++;
                            flag = true;
                        }
                    }
                    if (!flag)
                    {
                        text = text + string.Format(TextResolver.GetText("Ongoing bonus while repairing advanced tech"), constructionYard.ShipUnderConstruction.Name) + ", ";
                        num++;
                    }
                }
            }
            if (PirateEmpireBaseHabitat != null)
            {
                double num11 = CalculatePirateResearchBonusFromFacilities();
                if (num11 > 1.0)
                {
                    text = text + string.Format(TextResolver.GetText("Bonus from Pirate Bases and Fortresses at Controlled Colonies"), (num11 - 1.0).ToString("+#%")) + " \n";
                    num++;
                }
            }
            if (text.Length > 0 && num > 0)
            {
                text = text.Substring(0, text.Length - 2);
            }
            return text;
        }

        private ResearchNode CheckNextResearchForSpecialCases()
        {
            return null;
        }

        private List<int> GenerateResearchProjectIdListFromProjects(List<ResearchNode> projects)
        {
            List<int> list = new List<int>();
            for (int i = 0; i < projects.Count; i++)
            {
                ResearchNode researchNode = projects[i];
                if (researchNode != null && !list.Contains(researchNode.ResearchNodeId))
                {
                    list.Add(researchNode.ResearchNodeId);
                }
            }
            return list;
        }

        private void SelectNextResearchProject(IndustryType industry, ResearchNodeList researchQueue)
        {
            List<ComponentCategoryType> targettedCategories = new List<ComponentCategoryType>();
            List<ComponentType> targettedTypes = new List<ComponentType>();
            List<ComponentCategoryType> optimizedDesignCategories = new List<ComponentCategoryType>();
            List<ComponentType> optimizedDesignTypes = new List<ComponentType>();
            ComponentList raceAllowedComponents = new ComponentList();
            DeterminePreferredEmpireResearchFocuses(out targettedCategories, out targettedTypes, out optimizedDesignCategories, out optimizedDesignTypes, out raceAllowedComponents);
            if (Research.LatestProjects == null || Research.NextProjects == null)
            {
                Research.RefreshLatestNextProjects(DominantRace);
            }
            ResearchNodeList projectsByIndustry = Research.NextProjects.GetProjectsByIndustry(industry);
            if (DominantRace != null)
            {
                List<int> list = new List<int>();
                switch (industry)
                {
                    case IndustryType.Weapon:
                        list = DominantRace.ResearchPathWeapons;
                        break;
                    case IndustryType.Energy:
                        list = DominantRace.ResearchPathEnergy;
                        break;
                    case IndustryType.HighTech:
                        list = DominantRace.ResearchPathHighTech;
                        break;
                }
                if (list != null)
                {
                    for (int i = 0; i < list.Count; i++)
                    {
                        ResearchNode researchNode = Research.TechTree.FindNodeById(list[i]);
                        if (researchNode != null && !researchNode.IsResearched && Research.CanResearchNode(researchNode) && projectsByIndustry.ContainsById(researchNode.ResearchNodeId) && !researchQueue.Contains(researchNode))
                        {
                            researchQueue.Add(researchNode);
                            return;
                        }
                    }
                }
            }
            ResearchNodeList researchNodeList = new ResearchNodeList();
            for (int j = 0; j < targettedCategories.Count; j++)
            {
                ComponentCategoryType componentCategoryType = targettedCategories[j];
                if (componentCategoryType == ComponentCategoryType.Undefined)
                {
                    continue;
                }
                ResearchNode highestProjectForCategory = Research.TechTree.GetHighestProjectForCategory(componentCategoryType);
                if (highestProjectForCategory != null && !highestProjectForCategory.IsResearched)
                {
                    ResearchNodeList currentPath = Research.TechTree.GetCurrentPath(highestProjectForCategory, DominantRace);
                    if (!currentPath.ContainsById(highestProjectForCategory.ResearchNodeId))
                    {
                        currentPath.Add(highestProjectForCategory);
                    }
                    ResearchNodeList researchNodeList2 = projectsByIndustry.Intersect(currentPath);
                    if (researchNodeList2 != null && researchNodeList2.Count > 0)
                    {
                        researchNodeList.AddRange(researchNodeList2);
                    }
                }
            }
            for (int k = 0; k < targettedTypes.Count; k++)
            {
                ComponentType componentType = targettedTypes[k];
                if (componentType == ComponentType.Undefined)
                {
                    continue;
                }
                ResearchNode highestProjectForTypeAny = Research.TechTree.GetHighestProjectForTypeAny(componentType);
                if (highestProjectForTypeAny != null && !highestProjectForTypeAny.IsResearched)
                {
                    ResearchNodeList currentPath2 = Research.TechTree.GetCurrentPath(highestProjectForTypeAny, DominantRace);
                    if (!currentPath2.ContainsById(highestProjectForTypeAny.ResearchNodeId))
                    {
                        currentPath2.Add(highestProjectForTypeAny);
                    }
                    ResearchNodeList researchNodeList3 = projectsByIndustry.Intersect(currentPath2);
                    if (researchNodeList3 != null && researchNodeList3.Count > 0)
                    {
                        researchNodeList.AddRange(researchNodeList3);
                    }
                }
            }
            ResearchNodeList researchNodeList4 = Research.ResolveEssentialProjects_NEW(this, _Galaxy, industry, projectsByIndustry, targettedTypes, targettedCategories);
            for (int l = 0; l < researchNodeList4.Count; l++)
            {
                ResearchNode researchNode2 = researchNodeList4[l];
                if (researchNode2 != null && !researchNode2.IsResearched)
                {
                    ResearchNodeList currentPath3 = Research.TechTree.GetCurrentPath(researchNode2, DominantRace);
                    if (!currentPath3.ContainsById(researchNode2.ResearchNodeId))
                    {
                        currentPath3.Add(researchNode2);
                    }
                    ResearchNodeList researchNodeList5 = projectsByIndustry.Intersect(currentPath3);
                    if (researchNodeList5 != null && researchNodeList5.Count > 0)
                    {
                        researchNodeList = researchNodeList.Merge(researchNodeList5);
                    }
                }
            }
            if (industry == IndustryType.Energy)
            {
                ResearchNodeList projectsByAbility = projectsByIndustry.GetProjectsByAbility(ResearchAbilityType.ConstructionSize);
                if (projectsByAbility != null && projectsByAbility.Count > 0 && researchNodeList.Count > 0 && !researchNodeList.ContainsById(projectsByAbility[0].ResearchNodeId))
                {
                    int num = 0;
                    ResearchNode highestResearchedProjectForIndustry = Research.TechTree.GetHighestResearchedProjectForIndustry(industry);
                    if (highestResearchedProjectForIndustry != null)
                    {
                        num = highestResearchedProjectForIndustry.TechLevel;
                    }
                    if (num >= projectsByAbility[0].TechLevel)
                    {
                        researchNodeList.Add(projectsByAbility[0]);
                    }
                }
            }
            if (industry == IndustryType.HighTech && researchNodeList.Count > 0)
            {
                int num2 = 0;
                if (CanColonizeContinental)
                {
                    num2++;
                }
                if (CanColonizeMarshySwamp)
                {
                    num2++;
                }
                if (CanColonizeOcean)
                {
                    num2++;
                }
                if (CanColonizeDesert)
                {
                    num2++;
                }
                if (CanColonizeIce)
                {
                    num2++;
                }
                if (CanColonizeVolcanic)
                {
                    num2++;
                }
                double num3 = 0.99;
                if (num2 >= 2)
                {
                    num3 = 1.0;
                }
                ResearchNodeList researchNodeList6 = new ResearchNodeList();
                if (Policy.ColonizeContinentalPriority > num3)
                {
                    ResearchNode lowestProjectForColonization = Research.TechTree.GetLowestProjectForColonization(HabitatType.Continental);
                    if (lowestProjectForColonization != null && !researchNodeList6.ContainsById(lowestProjectForColonization.ResearchNodeId))
                    {
                        researchNodeList6.Add(lowestProjectForColonization);
                    }
                }
                if (Policy.ColonizeMarshySwampPriority > num3)
                {
                    ResearchNode lowestProjectForColonization2 = Research.TechTree.GetLowestProjectForColonization(HabitatType.MarshySwamp);
                    if (lowestProjectForColonization2 != null && !researchNodeList6.ContainsById(lowestProjectForColonization2.ResearchNodeId))
                    {
                        researchNodeList6.Add(lowestProjectForColonization2);
                    }
                }
                if (Policy.ColonizeOceanPriority > num3)
                {
                    ResearchNode lowestProjectForColonization3 = Research.TechTree.GetLowestProjectForColonization(HabitatType.Ocean);
                    if (lowestProjectForColonization3 != null && !researchNodeList6.ContainsById(lowestProjectForColonization3.ResearchNodeId))
                    {
                        researchNodeList6.Add(lowestProjectForColonization3);
                    }
                }
                if (Policy.ColonizeDesertPriority > num3)
                {
                    ResearchNode lowestProjectForColonization4 = Research.TechTree.GetLowestProjectForColonization(HabitatType.Desert);
                    if (lowestProjectForColonization4 != null && !researchNodeList6.ContainsById(lowestProjectForColonization4.ResearchNodeId))
                    {
                        researchNodeList6.Add(lowestProjectForColonization4);
                    }
                }
                if (Policy.ColonizeIcePriority > num3)
                {
                    ResearchNode lowestProjectForColonization5 = Research.TechTree.GetLowestProjectForColonization(HabitatType.Ice);
                    if (lowestProjectForColonization5 != null && !researchNodeList6.ContainsById(lowestProjectForColonization5.ResearchNodeId))
                    {
                        researchNodeList6.Add(lowestProjectForColonization5);
                    }
                }
                if (Policy.ColonizeVolcanicPriority > num3)
                {
                    ResearchNode lowestProjectForColonization6 = Research.TechTree.GetLowestProjectForColonization(HabitatType.Volcanic);
                    if (lowestProjectForColonization6 != null && !researchNodeList6.ContainsById(lowestProjectForColonization6.ResearchNodeId))
                    {
                        researchNodeList6.Add(lowestProjectForColonization6);
                    }
                }
                for (int m = 0; m < Math.Min(2, researchNodeList6.Count); m++)
                {
                    ResearchNode researchNode3 = researchNodeList6[m];
                    if (researchNode3 != null && !researchNode3.IsResearched)
                    {
                        ResearchNodeList currentPath4 = Research.TechTree.GetCurrentPath(researchNode3, DominantRace);
                        if (!currentPath4.ContainsById(researchNode3.ResearchNodeId))
                        {
                            currentPath4.Add(researchNode3);
                        }
                        ResearchNodeList researchNodeList7 = projectsByIndustry.Intersect(currentPath4);
                        if (researchNodeList7 != null && researchNodeList7.Count > 0)
                        {
                            researchNodeList = researchNodeList.Merge(researchNodeList7);
                        }
                    }
                }
            }
            ResearchNodeList researchNodeList8 = projectsByIndustry.NotIntersect(researchNodeList);
            ResearchNode lowestProjectForTypeAny = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.WeaponBeam);
            ResearchNode lowestProjectForTypeAny2 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.WeaponGravityBeam);
            ResearchNode lowestProjectForTypeAny3 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.WeaponRailGun);
            ResearchNode lowestProjectForTypeAny4 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.WeaponMissile);
            ResearchNode lowestProjectForTypeAny5 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.WeaponTorpedo);
            ResearchNode lowestProjectForTypeAny6 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.WeaponAreaDestruction);
            ResearchNode lowestProjectForTroopType = Research.TechTree.GetLowestProjectForTroopType(TroopType.Infantry);
            ResearchNode lowestProjectForTypeAny7 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.HyperDrive);
            ResearchNode lowestProjectForTypeAny8 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.ExtractorMine);
            ResearchNode lowestProjectForTypeAny9 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.EnergyCollector);
            ResearchNode lowestProjectForTypeAny10 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.Shields);
            ResearchNode lowestProjectForTypeAny11 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.ConstructionBuild);
            ResearchNode lowestProjectForTypeAny12 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.Reactor);
            ResearchNode lowestProjectForTypeAny13 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.EngineMainThrust);
            ResearchNode lowestProjectForTypeAny14 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.EngineVectoring);
            ResearchNode secondLowestProjectForTypeAny = Research.TechTree.GetSecondLowestProjectForTypeAny(ComponentType.HyperDrive);
            ResearchNode secondLowestProjectForTypeAny2 = Research.TechTree.GetSecondLowestProjectForTypeAny(ComponentType.ConstructionBuild);
            ResearchNode lowestProjectForTypeAny15 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.ComputerCommandCenter);
            ResearchNode lowestProjectForTypeAny16 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.StorageDockingBay);
            ResearchNode lowestProjectForTypeAny17 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.ComputerCommerceCenter);
            ResearchNode lowestProjectForTypeAny18 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.LabsEnergyLab);
            ResearchNode lowestProjectForTypeAny19 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.StorageTroop);
            ResearchNode lowestProjectForTypeAny20 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.StorageCargo);
            ResearchNode lowestProjectForTypeAny21 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.SensorResourceProfileSensor);
            ResearchNode lowestProjectForTypeAny22 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.StorageCargo);
            ResearchNode lowestProjectForTypeAny23 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.StorageFuel);
            ResearchNode lowestProjectForTypeAny24 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.HabitationLifeSupport);
            ResearchNode lowestProjectForTypeAny25 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.HabitationHabModule);
            ResearchNode lowestProjectForTypeAny26 = Research.TechTree.GetLowestProjectForTypeAny(ComponentType.HabitationColonization);
            List<int> list2 = new List<int>();
            List<int> list3 = new List<int>();
            List<int> list4 = new List<int>();
            switch (industry)
            {
                case IndustryType.Weapon:
                    list2 = (targettedTypes.Contains(ComponentType.WeaponGravityBeam) ? GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny2 }) : (targettedTypes.Contains(ComponentType.WeaponRailGun) ? GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny3 }) : (targettedTypes.Contains(ComponentType.WeaponMissile) ? GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny4 }) : (targettedCategories.Contains(ComponentCategoryType.WeaponBeam) ? GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny }) : (targettedCategories.Contains(ComponentCategoryType.WeaponTorpedo) ? GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny5 }) : ((!targettedCategories.Contains(ComponentCategoryType.WeaponArea)) ? GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny }) : GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny6 })))))));
                    list3 = GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTroopType });
                    break;
                case IndustryType.Energy:
                    list2 = GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny7 });
                    list3 = GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny8, lowestProjectForTypeAny9, lowestProjectForTypeAny10, lowestProjectForTypeAny11, lowestProjectForTypeAny12, lowestProjectForTypeAny13, lowestProjectForTypeAny14 });
                    list4 = GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { secondLowestProjectForTypeAny, secondLowestProjectForTypeAny2 });
                    break;
                case IndustryType.HighTech:
                    list2 = GenerateResearchProjectIdListFromProjects(new List<ResearchNode>
            {
                lowestProjectForTypeAny15, lowestProjectForTypeAny16, lowestProjectForTypeAny17, lowestProjectForTypeAny18, lowestProjectForTypeAny19, lowestProjectForTypeAny20, lowestProjectForTypeAny21, lowestProjectForTypeAny22, lowestProjectForTypeAny23, lowestProjectForTypeAny24,
                lowestProjectForTypeAny25
            });
                    if (PirateEmpireBaseHabitat == null)
                    {
                        list3 = GenerateResearchProjectIdListFromProjects(new List<ResearchNode> { lowestProjectForTypeAny26 });
                    }
                    break;
            }
            bool flag = false;
            if (projectsByIndustry.CheckContainsAnyNodeId(list2))
            {
                researchNodeList = projectsByIndustry.FindNodesByIdsUnresearched(list2);
                flag = true;
            }
            else if (projectsByIndustry.CheckContainsAnyNodeId(list3))
            {
                researchNodeList = projectsByIndustry.FindNodesByIdsUnresearched(list3);
                flag = true;
            }
            else if (projectsByIndustry.CheckContainsAnyNodeId(list4))
            {
                researchNodeList = projectsByIndustry.FindNodesByIdsUnresearched(list4);
                flag = true;
            }
            if (industry == IndustryType.Weapon && Research.ResearchedComponents.GetFirstWeaponOrFighter() == null)
            {
                ResearchNodeList projectsByCategory = researchNodeList.GetProjectsByCategory(ComponentCategoryType.Armor);
                if (projectsByCategory != null && projectsByCategory.Count > 0 && researchNodeList.Count > projectsByCategory.Count)
                {
                    for (int n = 0; n < projectsByCategory.Count; n++)
                    {
                        researchNodeList.Remove(projectsByCategory[n]);
                    }
                }
                projectsByCategory = researchNodeList8.GetProjectsByCategory(ComponentCategoryType.Armor);
                if (projectsByCategory != null && projectsByCategory.Count > 0 && researchNodeList8.Count > projectsByCategory.Count)
                {
                    for (int num4 = 0; num4 < projectsByCategory.Count; num4++)
                    {
                        researchNodeList8.Remove(projectsByCategory[num4]);
                    }
                }
            }
            if ((DominantRace != null && DominantRace.SpecialComponent != null) || (raceAllowedComponents != null && raceAllowedComponents.Count > 0))
            {
                researchNodeList = ResearchSystem.RemoveNonRaceSpecificProjectTypes(DominantRace, Research.TechTree, researchNodeList, optimizedDesignCategories, optimizedDesignTypes, raceAllowedComponents);
                researchNodeList8 = ResearchSystem.RemoveNonRaceSpecificProjectTypes(DominantRace, Research.TechTree, researchNodeList8, optimizedDesignCategories, optimizedDesignTypes, raceAllowedComponents);
            }
            if (PirateEmpireBaseHabitat != null)
            {
                researchNodeList.StripProjectsByType(ComponentType.HabitationColonization);
                researchNodeList8.StripProjectsByType(ComponentType.HabitationColonization);
                researchNodeList.StripProjectsByAbility(ResearchAbilityType.ColonizeHabitatType);
                researchNodeList8.StripProjectsByAbility(ResearchAbilityType.ColonizeHabitatType);
                researchNodeList.StripProjectsByAbility(ResearchAbilityType.Troop);
                researchNodeList8.StripProjectsByAbility(ResearchAbilityType.Troop);
            }
            int lowest = projectsByIndustry.GetLowestTechLevel();
            int techLevel = lowest + 3;
            if (researchNodeList != null && researchNodeList.Count > 0)
            {
                researchNodeList = researchNodeList.RemoveProjectsWithTechLevelHigherThan(techLevel);
            }
            if (researchNodeList8 != null && researchNodeList8.Count > 0)
            {
                researchNodeList8 = researchNodeList8.RemoveProjectsWithTechLevelHigherThan(techLevel);
            }
            if (researchNodeList8 != null && researchNodeList8.Count > 0)
            {
                researchNodeList8.GetTechLevelRange(out lowest, out var highest);
                if (lowest < highest)
                {
                    researchNodeList8 = researchNodeList8.GetProjectsAtTechLevel(lowest);
                }
            }
            researchNodeList8.StripProjectsAboveTechLevel(99);
            researchNodeList.StripProjectsAboveTechLevel(99);
            projectsByIndustry.StripProjectsAboveTechLevel(99);
            ResearchNode researchNode4 = null;
            if (!flag && researchNodeList8 != null && researchNodeList8.Count > 0 && researchNodeList.Count == 0)
            {
                researchNode4 = researchNodeList8.SelectRandomLowestProject(_Galaxy);
            }
            else if (researchNodeList != null && researchNodeList.Count > 0)
            {
                researchNode4 = researchNodeList.SelectRandomLowestProject(_Galaxy);
            }
            else if (projectsByIndustry != null && projectsByIndustry.Count > 0)
            {
                researchNode4 = projectsByIndustry.SelectRandomLowestProject(_Galaxy);
            }
            if (researchNode4 != null && !researchNode4.IsResearched && !researchQueue.Contains(researchNode4))
            {
                researchQueue.Add(researchNode4);
            }
        }

        public void PerformResearch(double timePassed, bool allowResearchEvents)
        {
            double researchEnergy = 0.0;
            double researchHighTech = 0.0;
            double researchWeapons = 0.0;
            CalculateResearchTotal(out researchEnergy, out researchHighTech, out researchWeapons);
            PerformResearchProjects(timePassed, Research.ResearchQueueEnergy, researchEnergy, IndustryType.Energy, allowResearchEvents);
            PerformResearchProjects(timePassed, Research.ResearchQueueHighTech, researchHighTech, IndustryType.HighTech, allowResearchEvents);
            PerformResearchProjects(timePassed, Research.ResearchQueueWeapons, researchWeapons, IndustryType.Weapon, allowResearchEvents);
            Research.Update(DominantRace);
            BaconResearchSystem.DetermineComponentImprovements(this);
            ReviewDesignComponentsAvailable();
        }

        public void ReviewDesignComponentsAvailable()
        {
            if (!_ComponentsAvailable[5])
            {
                _ComponentsAvailable[5] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.CapitalShip);
            }
            if (!_ComponentsAvailable[7])
            {
                _ComponentsAvailable[7] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.Carrier);
            }
            if (!_ComponentsAvailable[13])
            {
                _ComponentsAvailable[13] = CheckDesignComponentsAvailable(BuiltObjectRole.Colony, BuiltObjectSubRole.ColonyShip);
            }
            if (!_ComponentsAvailable[15])
            {
                _ComponentsAvailable[15] = CheckDesignComponentsAvailable(BuiltObjectRole.Build, BuiltObjectSubRole.ConstructionShip);
            }
            if (!_ComponentsAvailable[4])
            {
                _ComponentsAvailable[4] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.Cruiser);
            }
            if (!_ComponentsAvailable[29])
            {
                _ComponentsAvailable[29] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.DefensiveBase);
            }
            if (!_ComponentsAvailable[3])
            {
                _ComponentsAvailable[3] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.Destroyer);
            }
            if (!_ComponentsAvailable[25])
            {
                _ComponentsAvailable[25] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.EnergyResearchStation);
            }
            if (!_ComponentsAvailable[1])
            {
                _ComponentsAvailable[1] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.Escort);
            }
            if (!_ComponentsAvailable[9])
            {
                _ComponentsAvailable[9] = CheckDesignComponentsAvailable(BuiltObjectRole.Exploration, BuiltObjectSubRole.ExplorationShip);
            }
            if (!_ComponentsAvailable[2])
            {
                _ComponentsAvailable[2] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.Frigate);
            }
            if (!_ComponentsAvailable[16])
            {
                _ComponentsAvailable[16] = CheckDesignComponentsAvailable(BuiltObjectRole.Resource, BuiltObjectSubRole.GasMiningShip);
            }
            if (!_ComponentsAvailable[18])
            {
                _ComponentsAvailable[18] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.GasMiningStation);
            }
            if (!_ComponentsAvailable[24])
            {
                _ComponentsAvailable[24] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.GenericBase);
            }
            if (!_ComponentsAvailable[27])
            {
                _ComponentsAvailable[27] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.HighTechResearchStation);
            }
            if (!_ComponentsAvailable[12])
            {
                _ComponentsAvailable[12] = CheckDesignComponentsAvailable(BuiltObjectRole.Freight, BuiltObjectSubRole.LargeFreighter);
            }
            if (!_ComponentsAvailable[22])
            {
                _ComponentsAvailable[22] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.LargeSpacePort);
            }
            if (!_ComponentsAvailable[11])
            {
                _ComponentsAvailable[11] = CheckDesignComponentsAvailable(BuiltObjectRole.Freight, BuiltObjectSubRole.MediumFreighter);
            }
            if (!_ComponentsAvailable[21])
            {
                _ComponentsAvailable[21] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.MediumSpacePort);
            }
            if (!_ComponentsAvailable[17])
            {
                _ComponentsAvailable[17] = CheckDesignComponentsAvailable(BuiltObjectRole.Resource, BuiltObjectSubRole.MiningShip);
            }
            if (!_ComponentsAvailable[19])
            {
                _ComponentsAvailable[19] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.MiningStation);
            }
            if (!_ComponentsAvailable[28])
            {
                _ComponentsAvailable[28] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.MonitoringStation);
            }
            if (!_ComponentsAvailable[14])
            {
                _ComponentsAvailable[14] = CheckDesignComponentsAvailable(BuiltObjectRole.Passenger, BuiltObjectSubRole.PassengerShip);
            }
            if (!_ComponentsAvailable[23])
            {
                _ComponentsAvailable[23] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.ResortBase);
            }
            if (!_ComponentsAvailable[8])
            {
                _ComponentsAvailable[8] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.ResupplyShip);
            }
            if (!_ComponentsAvailable[10])
            {
                _ComponentsAvailable[10] = CheckDesignComponentsAvailable(BuiltObjectRole.Freight, BuiltObjectSubRole.SmallFreighter);
            }
            if (!_ComponentsAvailable[20])
            {
                _ComponentsAvailable[20] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.SmallSpacePort);
            }
            if (!_ComponentsAvailable[6])
            {
                _ComponentsAvailable[6] = CheckDesignComponentsAvailable(BuiltObjectRole.Military, BuiltObjectSubRole.TroopTransport);
            }
            if (!_ComponentsAvailable[26])
            {
                _ComponentsAvailable[26] = CheckDesignComponentsAvailable(BuiltObjectRole.Base, BuiltObjectSubRole.WeaponsResearchStation);
            }
        }

        private void PerformResearchProjects(double timePassed, ResearchNodeList projects, double researchPower, IndustryType industry, bool allowResearchEvents)
        {
            if (projects == null)
            {
                return;
            }
            if (_ControlResearch && projects.Count <= 0)
            {
                SelectNextResearchProject(industry, projects);
            }
            double num = researchPower * timePassed / (double)Galaxy.RealSecondsInGalacticYear * _Galaxy.ResearchSpeedModifier;
            double num2 = CalculateResearchOutputBonuses(industry);
            num *= num2;
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(num > 0.0, 50, ref iterationCount))
            {
                ResearchNode researchNode = null;
                if (projects == null || projects.Count <= 0)
                {
                    break;
                }
                researchNode = projects[0];
                float progress = researchNode.Progress;
                float num3 = (float)num;
                if (researchNode.IsRushing)
                {
                    num3 *= 3f;
                }
                researchNode.Progress += num3;
                if (researchNode.Progress >= researchNode.Cost)
                {
                    DoResearchBreakthrough(researchNode, selfResearched: true);
                    num -= (double)(researchNode.Cost - progress);
                    if (_ControlResearch && projects.Count <= 0)
                    {
                        SelectNextResearchProject(industry, projects);
                    }
                    if (!_Galaxy.ChanceNewScientist(this, researchNode))
                    {
                        _Galaxy.ChanceScientistPromotion(this, researchNode);
                    }
                    if (researchNode.SpecialFunctionCode == 2 || researchNode.SpecialFunctionCode == 4)
                    {
                        SendNewsBroadcast(EventMessageType.Undefined, researchNode, DisasterEventType.Undefined, warStartEnd: false, wonderBegun: false, EmpireMessageType.ResearchBreakthrough, this);
                    }
                }
                else
                {
                    num = 0.0;
                }
            }
            if (!allowResearchEvents)
            {
                return;
            }
            int num4 = Math.Max(4, (int)(6000.0 / timePassed));
            if (projects != null && projects.Count > 0)
            {
                double num5 = Math.Max(6000.0, Math.Sqrt(projects[0].Cost) * 10.0);
                num4 = Math.Max(6, (int)(num5 / timePassed));
            }
            Character character = null;
            CharacterList characterList = new CharacterList();
            if (Characters != null)
            {
                characterList = Characters.GetScientistsAtResearchStations(industry);
                character = characterList.GetFirstCharacterWithTrait(CharacterTraitType.Creative);
                CharacterSkillType skillType = CharacterSkillType.ResearchEnergy;
                switch (industry)
                {
                    case IndustryType.Energy:
                        skillType = CharacterSkillType.ResearchEnergy;
                        break;
                    case IndustryType.HighTech:
                        skillType = CharacterSkillType.ResearchHighTech;
                        break;
                    case IndustryType.Weapon:
                        skillType = CharacterSkillType.ResearchWeapons;
                        break;
                }
                if (character == null || character.Skills.GetSkillByType(skillType) == null)
                {
                    character = characterList.GetFirstCharacterWithSkill(skillType);
                }
                if (characterList.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.Creative))
                {
                    num4 /= 2;
                }
                else if (characterList.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.Methodical))
                {
                    num4 *= 2;
                }
            }
            if (Galaxy.Rnd.Next(0, num4) != 1)
            {
                return;
            }
            ResearchNode researchNode2 = null;
            if (projects != null && projects.Count > 0)
            {
                researchNode2 = projects[0];
                if (researchNode2 != null && researchNode2.IsRushing)
                {
                    researchNode2 = null;
                }
            }
            if (researchNode2 == null)
            {
                return;
            }
            if (Galaxy.Rnd.Next(0, 3) == 1)
            {
                float num6 = (float)(0.5 + Galaxy.Rnd.NextDouble() * 0.5);
                float num7 = Math.Max(0f, Math.Min(researchNode2.Progress, researchNode2.Progress * num6));
                researchNode2.Progress -= num7;
                _Galaxy.DoCharacterEvent(CharacterEventType.CriticalResearchFailure, researchNode2, characterList);
                string empty = string.Empty;
                if (character != null)
                {
                    string arg = string.Empty;
                    if (character.Location != null)
                    {
                        arg = character.Location.Name;
                    }
                    empty = string.Format(TextResolver.GetText("Research Critical Failure SCIENTIST LOCATION RESEARCHPROJECT"), character.Name, arg, researchNode2.Name);
                }
                else
                {
                    empty = string.Format(TextResolver.GetText("Research Critical Failure RESEARCHPROJECT"), researchNode2.Name);
                }
                SendMessageToEmpire(this, EmpireMessageType.ResearchCriticalFailure, researchNode2, empty);
                return;
            }
            researchNode2.IsRushing = true;
            _Galaxy.DoCharacterEvent(CharacterEventType.CriticalResearchSuccess, researchNode2, characterList);
            string empty2 = string.Empty;
            if (character != null)
            {
                string arg2 = string.Empty;
                if (character.Location != null)
                {
                    arg2 = character.Location.Name;
                }
                empty2 = string.Format(TextResolver.GetText("Research Critical Success SCIENTIST LOCATION RESEARCHPROJECT"), character.Name, arg2, researchNode2.Name);
            }
            else
            {
                empty2 = string.Format(TextResolver.GetText("Research Critical Success RESEARCHPROJECT"), researchNode2.Name);
            }
            SendMessageToEmpire(this, EmpireMessageType.ResearchCriticalBreakthrough, researchNode2, empty2);
            _Galaxy.ChanceNewScientistCriticalSuccess(this, researchNode2);
        }

        public void ReviewDesignsBuiltObjectsImprovedComponents()
        {
            for (int i = 0; i < Designs.Count; i++)
            {
                Designs[i].ReDefine();
            }
            for (int j = 0; j < BuiltObjects.Count; j++)
            {
                BuiltObjects[j].ReDefine();
            }
            for (int k = 0; k < PrivateBuiltObjects.Count; k++)
            {
                PrivateBuiltObjects[k].ReDefine();
            }
        }

        public void ReviewResearchAbilities()
        {
            ReviewColonizationTypes();
            ReviewPopulationGrowthRates();
            int newSize = 0;
            ReviewMaximumConstructionSize(out newSize);
            ReviewCanBuildShipTypes();
            ReviewTroopTypes();
        }

        public string DoResearchAbilityBreakthrough(ResearchNode researchProject, out object relatedObject)
        {
            string text = string.Empty;
            relatedObject = null;
            ReviewColonizationTypes();
            ReviewPopulationGrowthRates();
            int newSize = 0;
            ReviewMaximumConstructionSize(out newSize);
            ReviewCanBuildShipTypes();
            ReviewTroopTypes();
            if (researchProject.Abilities != null && researchProject.Abilities.Count > 0)
            {
                for (int i = 0; i < researchProject.Abilities.Count; i++)
                {
                    int value = researchProject.Abilities[i].Value;
                    switch (researchProject.Abilities[i].Type)
                    {
                        case ResearchAbilityType.Boarding:
                            if (researchProject.Abilities[i].Value > 0)
                            {
                                text += TextResolver.GetText("Improved Boarding attack strength").ToLower(CultureInfo.InvariantCulture);
                            }
                            else if (researchProject.Abilities[i].Value < 0)
                            {
                                text += TextResolver.GetText("Improved Boarding defense strength").ToLower(CultureInfo.InvariantCulture);
                            }
                            break;
                        case ResearchAbilityType.Troop:
                            if (researchProject.Abilities[i].RelatedObject != null && researchProject.Abilities[i].RelatedObject is TroopType)
                            {
                                TroopType troopType = (TroopType)researchProject.Abilities[i].RelatedObject;
                                if (troopType != 0)
                                {
                                    text = ((researchProject.Abilities[i].Value > 0) ? (text + " " + string.Format(TextResolver.GetText("Increases the Attack Strength of newly recruited TROOPTYPE").ToLower(CultureInfo.InvariantCulture), Galaxy.ResolveDescription(troopType))) : ((researchProject.Abilities[i].Value >= 0) ? (text + " " + string.Format(TextResolver.GetText("the ability to recruit TROOPTYPE"), Galaxy.ResolveDescription(troopType))) : (text + " " + string.Format(TextResolver.GetText("Increases the Defend Strength of newly recruited TROOPTYPE").ToLower(CultureInfo.InvariantCulture), Galaxy.ResolveDescription(troopType)))));
                                    relatedObject = troopType;
                                }
                                else
                                {
                                    text = text + " " + TextResolver.GetText("Lowers the maintenance costs of all troops").ToLower(CultureInfo.InvariantCulture);
                                }
                            }
                            else
                            {
                                text = text + " " + TextResolver.GetText("Lowers the maintenance costs of all troops").ToLower(CultureInfo.InvariantCulture);
                            }
                            break;
                        case ResearchAbilityType.EnableShipSubRole:
                            if (researchProject.Abilities[i].RelatedObject != null && researchProject.Abilities[i].RelatedObject is BuiltObjectSubRole)
                            {
                                BuiltObjectSubRole builtObjectSubRole = (BuiltObjectSubRole)researchProject.Abilities[i].RelatedObject;
                                text = text + " " + string.Format(TextResolver.GetText("the ability to build SHIPTYPE"), Galaxy.ResolveDescription(builtObjectSubRole));
                                relatedObject = builtObjectSubRole;
                            }
                            break;
                        case ResearchAbilityType.ColonizeHabitatType:
                            switch (value)
                            {
                                case 1:
                                    text = text + " " + string.Format(TextResolver.GetText("the ability to colonize PLANETTYPE planets and moons"), Galaxy.ResolveDescription(HabitatType.Continental));
                                    relatedObject = HabitatType.Continental;
                                    break;
                                case 2:
                                    text = text + " " + string.Format(TextResolver.GetText("the ability to colonize PLANETTYPE planets and moons"), Galaxy.ResolveDescription(HabitatType.MarshySwamp));
                                    relatedObject = HabitatType.MarshySwamp;
                                    break;
                                case 3:
                                    text = text + " " + string.Format(TextResolver.GetText("the ability to colonize PLANETTYPE planets and moons"), Galaxy.ResolveDescription(HabitatType.Ocean));
                                    relatedObject = HabitatType.Ocean;
                                    break;
                                case 4:
                                    text = text + " " + string.Format(TextResolver.GetText("the ability to colonize PLANETTYPE planets and moons"), Galaxy.ResolveDescription(HabitatType.Desert));
                                    relatedObject = HabitatType.Desert;
                                    break;
                                case 5:
                                    text = text + " " + string.Format(TextResolver.GetText("the ability to colonize PLANETTYPE planets and moons"), Galaxy.ResolveDescription(HabitatType.Ice));
                                    relatedObject = HabitatType.Ice;
                                    break;
                                case 6:
                                    text = text + " " + string.Format(TextResolver.GetText("the ability to colonize PLANETTYPE planets and moons"), Galaxy.ResolveDescription(HabitatType.Volcanic));
                                    relatedObject = HabitatType.Volcanic;
                                    break;
                            }
                            break;
                        case ResearchAbilityType.ConstructionSize:
                            text = text + " " + string.Format(TextResolver.GetText("an increase to the maximum construction sizes of ships and bases"), value.ToString(), (value * 3).ToString());
                            break;
                        case ResearchAbilityType.PopulationGrowthRate:
                            switch (value)
                            {
                                case 1:
                                    text = text + " " + string.Format(TextResolver.GetText("double population growth rate at all of our PLANETTYPE colonies"), Galaxy.ResolveDescription(HabitatType.Continental));
                                    break;
                                case 2:
                                    text = text + " " + string.Format(TextResolver.GetText("double population growth rate at all of our PLANETTYPE colonies"), Galaxy.ResolveDescription(HabitatType.MarshySwamp));
                                    break;
                                case 3:
                                    text = text + " " + string.Format(TextResolver.GetText("double population growth rate at all of our PLANETTYPE colonies"), Galaxy.ResolveDescription(HabitatType.Ocean));
                                    break;
                                case 4:
                                    text = text + " " + string.Format(TextResolver.GetText("double population growth rate at all of our PLANETTYPE colonies"), Galaxy.ResolveDescription(HabitatType.Desert));
                                    break;
                                case 5:
                                    text = text + " " + string.Format(TextResolver.GetText("double population growth rate at all of our PLANETTYPE colonies"), Galaxy.ResolveDescription(HabitatType.Ice));
                                    break;
                                case 6:
                                    text = text + " " + string.Format(TextResolver.GetText("double population growth rate at all of our PLANETTYPE colonies"), Galaxy.ResolveDescription(HabitatType.Volcanic));
                                    break;
                            }
                            break;
                    }
                }
            }
            return text;
        }

        public void ReviewColonizationTypes()
        {
            bool canColonizeContinental = false;
            bool canColonizeMarshySwamp = false;
            bool canColonizeOcean = false;
            bool canColonizeDesert = false;
            bool canColonizeIce = false;
            bool canColonizeVolcanic = false;
            if (Research != null && Research.Abilities != null && Research.Abilities.Count > 0)
            {
                for (int i = 0; i < Research.Abilities.Count; i++)
                {
                    if (Research.Abilities[i].Type == ResearchAbilityType.ColonizeHabitatType)
                    {
                        switch (Research.Abilities[i].Value)
                        {
                            case 1:
                                canColonizeContinental = true;
                                break;
                            case 2:
                                canColonizeMarshySwamp = true;
                                break;
                            case 3:
                                canColonizeOcean = true;
                                break;
                            case 4:
                                canColonizeDesert = true;
                                break;
                            case 5:
                                canColonizeIce = true;
                                break;
                            case 6:
                                canColonizeVolcanic = true;
                                break;
                        }
                    }
                }
            }
            CanColonizeContinental = canColonizeContinental;
            CanColonizeMarshySwamp = canColonizeMarshySwamp;
            CanColonizeOcean = canColonizeOcean;
            CanColonizeDesert = canColonizeDesert;
            CanColonizeIce = canColonizeIce;
            CanColonizeVolcanic = canColonizeVolcanic;
        }

        public void ReviewPopulationGrowthRates()
        {
            float colonyGrowthRateContinental = 0.5f;
            float colonyGrowthRateMarshySwamp = 0.5f;
            float colonyGrowthRateOcean = 0.5f;
            float colonyGrowthRateDesert = 0.5f;
            float colonyGrowthRateIce = 0.5f;
            float colonyGrowthRateVolcanic = 0.5f;
            if (Research != null && Research.Abilities != null && Research.Abilities.Count > 0)
            {
                for (int i = 0; i < Research.Abilities.Count; i++)
                {
                    if (Research.Abilities[i].Type == ResearchAbilityType.PopulationGrowthRate)
                    {
                        switch (Research.Abilities[i].Value)
                        {
                            case 1:
                                colonyGrowthRateContinental = 1f;
                                break;
                            case 2:
                                colonyGrowthRateMarshySwamp = 1f;
                                break;
                            case 3:
                                colonyGrowthRateOcean = 1f;
                                break;
                            case 4:
                                colonyGrowthRateDesert = 1f;
                                break;
                            case 5:
                                colonyGrowthRateIce = 1f;
                                break;
                            case 6:
                                colonyGrowthRateVolcanic = 1f;
                                break;
                        }
                    }
                }
            }
            ColonyGrowthRateContinental = colonyGrowthRateContinental;
            ColonyGrowthRateMarshySwamp = colonyGrowthRateMarshySwamp;
            ColonyGrowthRateOcean = colonyGrowthRateOcean;
            ColonyGrowthRateDesert = colonyGrowthRateDesert;
            ColonyGrowthRateIce = colonyGrowthRateIce;
            ColonyGrowthRateVolcanic = colonyGrowthRateVolcanic;
        }

        public void ReviewMaximumConstructionSize(out int newSize)
        {
            newSize = -1;
            _BaseMaximumConstructionSize = 160;
            if (Research == null || Research.Abilities == null || Research.Abilities.Count <= 0)
            {
                return;
            }
            ResearchAbility researchAbility = null;
            for (int i = 0; i < Research.Abilities.Count; i++)
            {
                if (Research.Abilities[i].Type == ResearchAbilityType.ConstructionSize && (researchAbility == null || Research.Abilities[i].Level > researchAbility.Level))
                {
                    researchAbility = Research.Abilities[i];
                }
            }
            if (researchAbility != null)
            {
                _BaseMaximumConstructionSize = researchAbility.Value;
                newSize = _BaseMaximumConstructionSize;
            }
        }

        public void ReviewTroopTypes()
        {
            bool troopCanRecruitInfantry = false;
            bool troopCanRecruitArmored = false;
            bool troopCanRecruitArtillery = false;
            bool troopCanRecruitSpecialForces = false;
            float num = 1f;
            float num2 = 1f;
            float num3 = 1f;
            float num4 = 1f;
            float num5 = 1f;
            float num6 = 1f;
            float num7 = 1f;
            float num8 = 1f;
            float num9 = 1f;
            float num10 = 1f;
            float num11 = 1f;
            if (Research != null && Research.Abilities != null && Research.Abilities.Count > 0)
            {
                for (int i = 0; i < Research.Abilities.Count; i++)
                {
                    ResearchAbility researchAbility = Research.Abilities[i];
                    if (researchAbility.Type == ResearchAbilityType.Boarding)
                    {
                        if (researchAbility.Value > 0)
                        {
                            float num12 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                            if (num12 > num10)
                            {
                                num10 = num12;
                            }
                        }
                        else if (researchAbility.Value < 0)
                        {
                            float num13 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                            if (num13 > num11)
                            {
                                num11 = num13;
                            }
                        }
                    }
                    else
                    {
                        if (researchAbility.Type != ResearchAbilityType.Troop)
                        {
                            continue;
                        }
                        if (researchAbility.RelatedObject != null && researchAbility.RelatedObject is TroopType)
                        {
                            switch ((TroopType)researchAbility.RelatedObject)
                            {
                                case TroopType.Undefined:
                                    if (researchAbility.Value < 0)
                                    {
                                        float num16 = Math.Abs((float)researchAbility.Value / 100f);
                                        float num17 = 1f - num16;
                                        if (num17 < num9)
                                        {
                                            num9 = num17;
                                        }
                                    }
                                    break;
                                case TroopType.Infantry:
                                    troopCanRecruitInfantry = true;
                                    if (researchAbility.Value > 0)
                                    {
                                        float num18 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num18 > num)
                                        {
                                            num = num18;
                                        }
                                    }
                                    else if (researchAbility.Value < 0)
                                    {
                                        float num19 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num19 > num2)
                                        {
                                            num2 = num19;
                                        }
                                    }
                                    break;
                                case TroopType.Armored:
                                    troopCanRecruitArmored = true;
                                    if (researchAbility.Value > 0)
                                    {
                                        float num22 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num22 > num3)
                                        {
                                            num3 = num22;
                                        }
                                    }
                                    else if (researchAbility.Value < 0)
                                    {
                                        float num23 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num23 > num4)
                                        {
                                            num4 = num23;
                                        }
                                    }
                                    break;
                                case TroopType.Artillery:
                                    troopCanRecruitArtillery = true;
                                    if (researchAbility.Value > 0)
                                    {
                                        float num20 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num20 > num6)
                                        {
                                            num6 = num20;
                                        }
                                    }
                                    else if (researchAbility.Value < 0)
                                    {
                                        float num21 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num21 > num5)
                                        {
                                            num5 = num21;
                                        }
                                    }
                                    break;
                                case TroopType.SpecialForces:
                                    troopCanRecruitSpecialForces = true;
                                    if (researchAbility.Value > 0)
                                    {
                                        float num14 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num14 > num7)
                                        {
                                            num7 = num14;
                                        }
                                    }
                                    else if (researchAbility.Value < 0)
                                    {
                                        float num15 = 1f + Math.Abs((float)researchAbility.Value / 100f);
                                        if (num15 > num8)
                                        {
                                            num8 = num15;
                                        }
                                    }
                                    break;
                            }
                        }
                        else if (researchAbility.Value < 0)
                        {
                            float num24 = Math.Abs((float)researchAbility.Value / 100f);
                            float num25 = 1f - num24;
                            if (num25 < num9)
                            {
                                num9 = num25;
                            }
                        }
                    }
                }
            }
            TroopCanRecruitInfantry = troopCanRecruitInfantry;
            TroopCanRecruitArmored = troopCanRecruitArmored;
            TroopCanRecruitArtillery = troopCanRecruitArtillery;
            TroopCanRecruitSpecialForces = troopCanRecruitSpecialForces;
            TroopAttackStrengthBonusFactorInfantry = num;
            TroopAttackStrengthBonusFactorArmored = num3;
            TroopAttackStrengthBonusFactorArtillery = num6;
            TroopAttackStrengthBonusFactorSpecialForces = num7;
            TroopDefendStrengthBonusFactorInfantry = num2;
            TroopDefendStrengthBonusFactorArmored = num4;
            TroopDefendStrengthBonusFactorSpecialForces = num8;
            TroopPlanetaryDefenseInterceptBonusFactor = num5;
            TroopMaintenanceFactor = num9 * BaconEmpire.MultiplyTroopMaintenance(this);
            BoardingAttackFactor = num10;
            BoardingDefenseFactor = num11;
        }

        public void ReviewCanBuildShipTypes()
        {
            bool canBuildCarriers = false;
            bool canBuildResupplyShips = false;
            if (Research != null && Research.Abilities != null && Research.Abilities.Count > 0)
            {
                for (int i = 0; i < Research.Abilities.Count; i++)
                {
                    ResearchAbility researchAbility = Research.Abilities[i];
                    if (researchAbility.Type == ResearchAbilityType.EnableShipSubRole && researchAbility.RelatedObject != null && researchAbility.RelatedObject is BuiltObjectSubRole)
                    {
                        switch ((BuiltObjectSubRole)researchAbility.RelatedObject)
                        {
                            case BuiltObjectSubRole.Carrier:
                                canBuildCarriers = true;
                                break;
                            case BuiltObjectSubRole.ResupplyShip:
                                canBuildResupplyShips = true;
                                break;
                        }
                    }
                }
            }
            _CanBuildCarriers = canBuildCarriers;
            _CanBuildResupplyShips = canBuildResupplyShips;
        }

        public void DoResearchBreakthrough(ResearchNode researchProject, bool selfResearched)
        {
            DoResearchBreakthrough(researchProject, selfResearched, blockMessages: false, suppressUpdate: false);
        }

        public void DoResearchBreakthrough(ResearchNode researchProject, bool selfResearched, bool blockMessages, bool suppressUpdate)
        {
            researchProject.IsResearched = true;
            researchProject.SelfResearched = selfResearched;
            researchProject.Progress = researchProject.Cost;
            short matchingGameEventIdResearchBreakthrough = _Galaxy.GetMatchingGameEventIdResearchBreakthrough(this, researchProject.ResearchNodeId);
            _Galaxy.CheckTriggerEvent(matchingGameEventIdResearchBreakthrough, this, EventTriggerType.ResearchBreakthrough, null);
            if ((researchProject.Components != null && researchProject.Components.Count > 0) || (researchProject.Abilities != null && researchProject.Abilities.Count > 0 && researchProject.Abilities[0].Type == ResearchAbilityType.ConstructionSize))
            {
                _ReviewDesignsAndRetrofit = true;
                bool flag = false;
                if (researchProject.Category == ComponentCategoryType.HyperDrive)
                {
                    Component latestComponent = Research.GetLatestComponent(ComponentType.HyperDrive);
                    if (latestComponent != null && latestComponent.Value1 < 5000 && researchProject.Components != null && researchProject.Components.Count > 0)
                    {
                        for (int i = 0; i < researchProject.Components.Count; i++)
                        {
                            Component component = researchProject.Components[i];
                            if (component != null && component.Type == ComponentType.HyperDrive && component.Value1 >= 5000)
                            {
                                flag = true;
                                break;
                            }
                        }
                    }
                }
                if (researchProject.SpecialFunctionCode == 2 || flag)
                {
                    _ReviewDesignsAndRetrofitImportantBreakthrough = true;
                }
            }
            if (researchProject.SpecialFunctionCode == 2 && _ControlMilitaryFleets && ShipGroups != null)
            {
                ShipGroupList shipGroupList = new ShipGroupList();
                for (int j = 0; j < ShipGroups.Count; j++)
                {
                    ShipGroup shipGroup = ShipGroups[j];
                    if (shipGroup != null && shipGroup.LeadShip != null && shipGroup.LeadShip.IsAutoControlled && shipGroup.WarpSpeed <= 0)
                    {
                        shipGroupList.Add(shipGroup);
                    }
                }
                for (int k = 0; k < shipGroupList.Count; k++)
                {
                    ShipGroup shipGroup2 = shipGroupList[k];
                    if (shipGroup2 != null)
                    {
                        DisbandShipGroup(shipGroup2);
                    }
                }
            }
            if (Research.RecentProjects == null)
            {
                Research.RecentProjects = new ResearchNodeList();
            }
            Research.RecentProjects.Add(researchProject);
            switch (researchProject.Industry)
            {
                case IndustryType.Weapon:
                    if (Research.ResearchQueueWeapons.Contains(researchProject))
                    {
                        Research.ResearchQueueWeapons.Remove(researchProject);
                    }
                    break;
                case IndustryType.Energy:
                    if (Research.ResearchQueueEnergy.Contains(researchProject))
                    {
                        Research.ResearchQueueEnergy.Remove(researchProject);
                    }
                    break;
                case IndustryType.HighTech:
                    if (Research.ResearchQueueHighTech.Contains(researchProject))
                    {
                        Research.ResearchQueueHighTech.Remove(researchProject);
                    }
                    break;
            }
            object relatedObject = null;
            string text = string.Empty;
            if (researchProject.Abilities != null && researchProject.Abilities.Count > 0)
            {
                text = DoResearchAbilityBreakthrough(researchProject, out relatedObject) + ", ";
            }
            if (researchProject.SpecialFunctionCode == 2)
            {
                if (CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.DiscoverHyperspaceTech, researchProject) && this == _Galaxy.PlayerEmpire)
                {
                    _Galaxy.CheckGenerateAncientHelpers();
                }
            }
            else if (researchProject.SpecialFunctionCode == 4)
            {
                CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.DiscoverColonizationTech, researchProject);
            }
            if (!blockMessages)
            {
                if (researchProject.Components != null && researchProject.Components.Count > 0)
                {
                    text = text + " " + string.Format(TextResolver.GetText("the new component X for our ships and bases"), researchProject.Components[0].Name) + ", ";
                    relatedObject = researchProject.Components[0];
                }
                if (researchProject.ComponentImprovements != null && researchProject.ComponentImprovements.Count > 0)
                {
                    if (Research.ComponentImprovements[researchProject.ComponentImprovements[0].ImprovedComponent.ComponentID] == null)
                    {
                        text = text + " " + string.Format(TextResolver.GetText("improvements to the existing component X"), researchProject.ComponentImprovements[0].ImprovedComponent.Name) + ", ";
                        relatedObject = researchProject.ComponentImprovements[0].ImprovedComponent;
                    }
                    else if (researchProject.ComponentImprovements[0].TechLevel > Research.ComponentImprovements[researchProject.ComponentImprovements[0].ImprovedComponent.ComponentID].TechLevel)
                    {
                        text = text + " " + string.Format(TextResolver.GetText("improvements to the existing component X"), researchProject.ComponentImprovements[0].ImprovedComponent.Name) + ", ";
                        relatedObject = researchProject.ComponentImprovements[0].ImprovedComponent;
                    }
                }
                if (researchProject.PlanetaryFacility != null && !Research.BuildablePlanetaryFacilities.Contains(researchProject.PlanetaryFacility))
                {
                    text = text + " " + string.Format(TextResolver.GetText("the ability to build a new planetary facility X"), researchProject.PlanetaryFacility.Name) + ", ";
                    relatedObject = researchProject.PlanetaryFacility;
                }
                if (researchProject.PlagueChange != null)
                {
                    Plague plague = _Galaxy.Plagues[researchProject.PlagueChange.PlagueId];
                    text = ((!Research.EnabledPlagues.ContainsById(plague.PlagueId)) ? (text + " " + string.Format(TextResolver.GetText("creates the new PLAGUE"), plague.Name) + ", ") : (text + " " + string.Format(TextResolver.GetText("changes to PLAGUE"), plague.Name) + ", "));
                }
                if (researchProject.Fighters != null && researchProject.Fighters.Count > 0)
                {
                    for (int l = 0; l < researchProject.Fighters.Count; l++)
                    {
                        if (!Research.ResearchedFighters.Contains(researchProject.Fighters[l]))
                        {
                            text = text + " " + string.Format(TextResolver.GetText("access to a new fighter type X"), researchProject.Fighters[l].Name) + ", ";
                            relatedObject = researchProject.Fighters[l];
                        }
                    }
                }
                string text2 = string.Format(TextResolver.GetText("Our engineers have completed research in RESEARCHPROJECT"), researchProject.Name);
                if (!string.IsNullOrEmpty(text))
                {
                    text2 = text2 + ". " + string.Format(TextResolver.GetText("This breakthrough provides BENEFITS"), text);
                    text2 = text2.Substring(0, text2.Length - 2);
                }
                SendMessageToEmpire(this, EmpireMessageType.ResearchBreakthrough, researchProject, text2);
            }
            if (!suppressUpdate && Research != null)
            {
                Research.Update(DominantRace);
                ReviewDesignsBuiltObjectsImprovedComponents();
                ReviewColonizationTypes();
                ReviewPopulationGrowthRates();
                int newSize = 0;
                ReviewMaximumConstructionSize(out newSize);
                ReviewCanBuildShipTypes();
                ReviewTroopTypes();
            }
        }

        public double CalculatePirateResearchBonusFromFacilities()
        {
            double num = 1.0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat == null || habitat.HasBeenDestroyed)
                {
                    continue;
                }
                PirateColonyControl byFacilityControl = habitat.GetPirateControl().GetByFacilityControl();
                if (byFacilityControl == null || byFacilityControl.EmpireId != EmpireId || habitat.Facilities == null)
                {
                    continue;
                }
                for (int j = 0; j < habitat.Facilities.Count; j++)
                {
                    PlanetaryFacility planetaryFacility = habitat.Facilities[j];
                    if (planetaryFacility != null && planetaryFacility.ConstructionProgress >= 1f)
                    {
                        switch (planetaryFacility.Type)
                        {
                            case PlanetaryFacilityType.PirateBase:
                            case PlanetaryFacilityType.PirateFortress:
                            case PlanetaryFacilityType.PirateCriminalNetwork:
                                num += (double)planetaryFacility.Value1 / 100.0;
                                break;
                        }
                    }
                }
            }
            return num;
        }

        public BuiltObject IdentifyResearchStationHighestBonus(IndustryType industry)
        {
            BuiltObject result = null;
            float num = 0f;
            for (int i = 0; i < ResearchFacilities.Count; i++)
            {
                BuiltObject builtObject = ResearchFacilities[i];
                int num2 = 0;
                switch (industry)
                {
                    case IndustryType.Weapon:
                        num2 = builtObject.ResearchWeapons;
                        break;
                    case IndustryType.Energy:
                        num2 = builtObject.ResearchEnergy;
                        break;
                    case IndustryType.HighTech:
                        num2 = builtObject.ResearchHighTech;
                        break;
                }
                if (num2 > 0)
                {
                    float num3 = 0f;
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.ResearchBonusIndustry == industry && builtObject.ParentHabitat.ResearchBonus > 0)
                    {
                        num3 = (float)(int)builtObject.ParentHabitat.ResearchBonus / 100f;
                    }
                    else if (builtObject.NearestSystemStar != null && builtObject.NearestSystemStar.ResearchBonusIndustry == industry && builtObject.NearestSystemStar.ResearchBonus > 0)
                    {
                        num3 = (float)(int)builtObject.NearestSystemStar.ResearchBonus / 100f;
                    }
                    if (num3 > num)
                    {
                        num = num3;
                        result = builtObject;
                    }
                }
            }
            return result;
        }

        public void ReviewResearchStationBonuses()
        {
            BuiltObject researchBonusWeaponsStation = null;
            float num = 0f;
            BuiltObject researchBonusEnergyStation = null;
            float num2 = 0f;
            BuiltObject researchBonusHighTechStation = null;
            float num3 = 0f;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject.Role != BuiltObjectRole.Base || (builtObject.ResearchWeapons <= 0 && builtObject.ResearchEnergy <= 0 && builtObject.ResearchHighTech <= 0))
                {
                    continue;
                }
                CharacterList characterList = new CharacterList();
                if (builtObject.Characters != null)
                {
                    characterList = builtObject.Characters.GetNonTransferringCharacters(CharacterRole.Scientist);
                }
                float num4 = (float)characterList.TotalDiminishingResearchBonusesWeapons();
                float num5 = (float)characterList.TotalDiminishingResearchBonusesEnergy();
                float num6 = (float)characterList.TotalDiminishingResearchBonusesHighTech();
                if (builtObject.ResearchWeapons > 0)
                {
                    float num7 = 0f;
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.ResearchBonusIndustry == IndustryType.Weapon && builtObject.ParentHabitat.ResearchBonus > 0)
                    {
                        num7 = (float)(int)builtObject.ParentHabitat.ResearchBonus / 100f;
                    }
                    else if (builtObject.NearestSystemStar != null && builtObject.NearestSystemStar.ResearchBonusIndustry == IndustryType.Weapon && builtObject.NearestSystemStar.ResearchBonus > 0)
                    {
                        num7 = (float)(int)builtObject.NearestSystemStar.ResearchBonus / 100f;
                    }
                    float num8 = num4 + num7;
                    if (num8 > num)
                    {
                        num = num8;
                        researchBonusWeaponsStation = builtObject;
                    }
                }
                if (builtObject.ResearchEnergy > 0)
                {
                    float num9 = 0f;
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.ResearchBonusIndustry == IndustryType.Energy && builtObject.ParentHabitat.ResearchBonus > 0)
                    {
                        num9 = (float)(int)builtObject.ParentHabitat.ResearchBonus / 100f;
                    }
                    else if (builtObject.NearestSystemStar != null && builtObject.NearestSystemStar.ResearchBonusIndustry == IndustryType.Energy && builtObject.NearestSystemStar.ResearchBonus > 0)
                    {
                        num9 = (float)(int)builtObject.NearestSystemStar.ResearchBonus / 100f;
                    }
                    float num10 = num5 + num9;
                    if (num10 > num2)
                    {
                        num2 = num10;
                        researchBonusEnergyStation = builtObject;
                    }
                }
                if (builtObject.ResearchHighTech > 0)
                {
                    float num11 = 0f;
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.ResearchBonusIndustry == IndustryType.HighTech && builtObject.ParentHabitat.ResearchBonus > 0)
                    {
                        num11 = (float)(int)builtObject.ParentHabitat.ResearchBonus / 100f;
                    }
                    else if (builtObject.NearestSystemStar != null && builtObject.NearestSystemStar.ResearchBonusIndustry == IndustryType.HighTech && builtObject.NearestSystemStar.ResearchBonus > 0)
                    {
                        num11 = (float)(int)builtObject.NearestSystemStar.ResearchBonus / 100f;
                    }
                    float num12 = num6 + num11;
                    if (num12 > num3)
                    {
                        num3 = num12;
                        researchBonusHighTechStation = builtObject;
                    }
                }
            }
            ResearchBonusWeaponsStation = researchBonusWeaponsStation;
            ResearchBonusWeapons = num;
            ResearchBonusEnergyStation = researchBonusEnergyStation;
            ResearchBonusEnergy = num2;
            ResearchBonusHighTechStation = researchBonusHighTechStation;
            ResearchBonusHighTech = num3;
        }

        public double CalculateResearchOutputBonuses(IndustryType industry)
        {
            double num = 1.0;
            if (ResearchBonus > 0.0)
            {
                num *= 1.0 + ResearchBonus;
            }
            if (GovernmentAttributes != null)
            {
                num *= GovernmentAttributes.ResearchSpeed;
            }
            switch (industry)
            {
                case IndustryType.Weapon:
                    if (_SpecialBonusResearchWeapons > 0.0)
                    {
                        num *= 1.0 + _SpecialBonusResearchWeapons;
                    }
                    if (ResearchBonusWeapons > 0f)
                    {
                        num *= (double)(1f + ResearchBonusWeapons);
                    }
                    break;
                case IndustryType.Energy:
                    if (_SpecialBonusResearchEnergy > 0.0)
                    {
                        num *= 1.0 + _SpecialBonusResearchEnergy;
                    }
                    if (ResearchBonusEnergy > 0f)
                    {
                        num *= (double)(1f + ResearchBonusEnergy);
                    }
                    break;
                case IndustryType.HighTech:
                    if (_SpecialBonusResearchHighTech > 0.0)
                    {
                        num *= 1.0 + _SpecialBonusResearchHighTech;
                    }
                    if (ResearchBonusHighTech > 0f)
                    {
                        num *= (double)(1f + ResearchBonusHighTech);
                    }
                    break;
            }
            double researchResourceBonus = GetResearchResourceBonus(industry);
            num *= 1.0 + researchResourceBonus;
            if (RaceEventType == RaceEventType.HistoricalDiscoveryExploreRuinsForResearchBoost)
            {
                num *= 1.1;
            }
            if (Leader != null)
            {
                switch (industry)
                {
                    case IndustryType.Weapon:
                        num *= 1.0 + (double)Leader.ResearchWeapons / 100.0;
                        break;
                    case IndustryType.Energy:
                        num *= 1.0 + (double)Leader.ResearchEnergy / 100.0;
                        break;
                    case IndustryType.HighTech:
                        num *= 1.0 + (double)Leader.ResearchHighTech / 100.0;
                        break;
                }
            }
            return num;
        }

        public double GetResearchResourceBonus(IndustryType industry)
        {
            double num = 0.0;
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat.ResourceBonuses != null)
                    {
                        switch (industry)
                        {
                            case IndustryType.Energy:
                                num += habitat.ResourceBonuses.GetBonusTotalByEffectType(ColonyResourceEffect.ResearchEnergy) / 100.0;
                                break;
                            case IndustryType.HighTech:
                                num += habitat.ResourceBonuses.GetBonusTotalByEffectType(ColonyResourceEffect.ResearchHighTech) / 100.0;
                                break;
                            case IndustryType.Weapon:
                                num += habitat.ResourceBonuses.GetBonusTotalByEffectType(ColonyResourceEffect.ResearchWeapons) / 100.0;
                                break;
                        }
                    }
                }
                num = Math.Min(1.0, num);
            }
            return num;
        }

        private void CalculateResearchTotal(out double researchEnergy, out double researchHighTech, out double researchWeapons)
        {
            researchEnergy = ResearchEnergyPotential;
            researchWeapons = ResearchWeaponsPotential;
            researchHighTech = ResearchHighTechPotential;
            double num = 1.0 + researchEnergy + researchHighTech + researchWeapons;
            double annualResearchPotential = AnnualResearchPotential;
            double num2 = annualResearchPotential / num;
            if (num2 < 1.0)
            {
                researchEnergy *= num2;
                researchWeapons *= num2;
                researchHighTech *= num2;
            }
        }

        public Component ResolveLatestMissileWeapon()
        {
            return Research.GetLatestComponent(ComponentType.WeaponMissile);
        }

        public Component ResolveLatestStandardTorpedoWeapon()
        {
            Component component = null;
            for (int i = 0; i < Galaxy.ComponentDefinitionsStatic.Length; i++)
            {
                if (Galaxy.ComponentDefinitionsStatic[i].Category != ComponentCategoryType.WeaponTorpedo || Galaxy.ComponentDefinitionsStatic[i].Value1 <= 0 || Galaxy.ComponentDefinitionsStatic[i].Value7 > 0 || Galaxy.ComponentDefinitionsStatic[i].Type == ComponentType.WeaponMissile)
                {
                    continue;
                }
                Component component2 = new Component(Galaxy.ComponentDefinitionsStatic[i].ComponentID);
                if (!Research.CheckComponentResearched(component2))
                {
                    continue;
                }
                if (component == null)
                {
                    component = component2;
                    continue;
                }
                int num = Research.CalculateCurrentTechPoints(component, _Galaxy);
                int num2 = Research.CalculateCurrentTechPoints(component2, _Galaxy);
                if (num < num2)
                {
                    component = component2;
                }
            }
            return component;
        }

        public ComponentImprovement ResolveLatestBombardWeaponImprovement()
        {
            Component component = ResolveLatestBombardWeapon();
            ComponentImprovement result = null;
            if (component != null)
            {
                result = Research.ResolveImprovedComponentValues(component);
            }
            return result;
        }

        public Component ResolveLatestBombardWeapon()
        {
            Component component = null;
            for (int i = 0; i < Galaxy.ComponentDefinitionsStatic.Length; i++)
            {
                if (Galaxy.ComponentDefinitionsStatic[i].Category != ComponentCategoryType.WeaponTorpedo || Galaxy.ComponentDefinitionsStatic[i].Value7 <= 0)
                {
                    continue;
                }
                Component component2 = new Component(Galaxy.ComponentDefinitionsStatic[i].ComponentID);
                if (!Research.CheckComponentResearched(component2))
                {
                    continue;
                }
                if (component == null)
                {
                    component = component2;
                    continue;
                }
                int num = Research.CalculateCurrentTechPoints(component, _Galaxy);
                int num2 = Research.CalculateCurrentTechPoints(component2, _Galaxy);
                if (num < num2)
                {
                    component = component2;
                }
            }
            return component;
        }

        private int ResolveEmpireRaceTendency(Race race)
        {
            //int num = 0;
            if (race.AggressionLevel > race.CautionLevel && race.AggressionLevel > race.IntelligenceLevel)
            {
                return 3;
            }
            if (race.CautionLevel > race.AggressionLevel && race.CautionLevel > race.IntelligenceLevel)
            {
                return 2;
            }
            if (race.IntelligenceLevel > race.CautionLevel && race.IntelligenceLevel > race.AggressionLevel)
            {
                return 1;
            }
            return 0;
        }

        private ResearchNode SelectResearchNodeToCrash(ResearchNodeList potentialCrashProjects, List<ComponentCategoryType> targettedCategories, List<ComponentType> targettedTypes)
        {
            if (potentialCrashProjects != null)
            {
                if (targettedTypes != null && targettedTypes.Count > 0)
                {
                    int num = Galaxy.Rnd.Next(0, potentialCrashProjects.Count);
                    for (int i = num; i < potentialCrashProjects.Count; i++)
                    {
                        List<ComponentType> list = potentialCrashProjects[i].ResolveComponentTypesAll();
                        if (list.Count <= 0)
                        {
                            switch (potentialCrashProjects[i].ResolveResearchAbilityType())
                            {
                                case ResearchAbilityType.ColonizeHabitatType:
                                    list.Add(ComponentType.HabitationColonization);
                                    break;
                                case ResearchAbilityType.ConstructionSize:
                                    list.Add(ComponentType.ConstructionBuild);
                                    break;
                            }
                        }
                        if (list.Count > 0 && Component.TypesIntersect(list, targettedTypes))
                        {
                            return potentialCrashProjects[i];
                        }
                    }
                    for (int j = 0; j < num; j++)
                    {
                        List<ComponentType> list2 = potentialCrashProjects[j].ResolveComponentTypesAll();
                        if (list2.Count <= 0)
                        {
                            switch (potentialCrashProjects[j].ResolveResearchAbilityType())
                            {
                                case ResearchAbilityType.ColonizeHabitatType:
                                    list2.Add(ComponentType.HabitationColonization);
                                    break;
                                case ResearchAbilityType.ConstructionSize:
                                    list2.Add(ComponentType.ConstructionBuild);
                                    break;
                            }
                        }
                        if (list2.Count > 0 && Component.TypesIntersect(list2, targettedTypes))
                        {
                            return potentialCrashProjects[j];
                        }
                    }
                }
                if (targettedCategories != null && targettedCategories.Count > 0)
                {
                    int num2 = Galaxy.Rnd.Next(0, potentialCrashProjects.Count);
                    for (int k = num2; k < potentialCrashProjects.Count; k++)
                    {
                        if (targettedCategories.Contains(potentialCrashProjects[k].Category))
                        {
                            return potentialCrashProjects[k];
                        }
                    }
                    for (int l = 0; l < num2; l++)
                    {
                        if (targettedCategories.Contains(potentialCrashProjects[l].Category))
                        {
                            return potentialCrashProjects[l];
                        }
                    }
                }
            }
            return null;
        }

        private void DoCrashResearch()
        {
            if (this == _Galaxy.PlayerEmpire)
            {
                return;
            }
            ResearchNode researchNode = null;
            ResearchNodeList researchNodeList = new ResearchNodeList();
            if (Research.ResearchQueueEnergy != null && Research.ResearchQueueEnergy.Count > 0 && !Research.ResearchQueueEnergy[0].IsRushing)
            {
                researchNodeList.Add(Research.ResearchQueueEnergy[0]);
            }
            if (Research.ResearchQueueHighTech != null && Research.ResearchQueueHighTech.Count > 0 && !Research.ResearchQueueHighTech[0].IsRushing)
            {
                researchNodeList.Add(Research.ResearchQueueHighTech[0]);
            }
            if (Research.ResearchQueueWeapons != null && Research.ResearchQueueWeapons.Count > 0 && !Research.ResearchQueueWeapons[0].IsRushing)
            {
                researchNodeList.Add(Research.ResearchQueueWeapons[0]);
            }
            if (researchNodeList.Count <= 0 || Galaxy.Rnd.Next(0, 2) != 1)
            {
                return;
            }
            List<ComponentCategoryType> targettedCategories = new List<ComponentCategoryType>();
            List<ComponentType> targettedTypes = new List<ComponentType>();
            List<ComponentCategoryType> optimizedDesignCategories = new List<ComponentCategoryType>();
            List<ComponentType> optimizedDesignTypes = new List<ComponentType>();
            ComponentList raceAllowedComponents = new ComponentList();
            DeterminePreferredEmpireResearchFocuses(out targettedCategories, out targettedTypes, out optimizedDesignCategories, out optimizedDesignTypes, out raceAllowedComponents);
            for (int i = 0; i < raceAllowedComponents.Count; i++)
            {
                Component component = raceAllowedComponents[i];
                if (component != null && !targettedTypes.Contains(component.Type))
                {
                    targettedTypes.Add(component.Type);
                }
            }
            researchNode = SelectResearchNodeToCrash(researchNodeList, targettedCategories, targettedTypes);
            int num = researchNodeList.IndexBySpecialFunctionCode(2);
            if (num >= 0)
            {
                researchNode = researchNodeList[num];
            }
            if (researchNode == null)
            {
                switch (ResolveEmpireRaceTendency(DominantRace))
                {
                    case 0:
                        {
                            int index = Galaxy.Rnd.Next(0, researchNodeList.Count);
                            researchNode = researchNodeList[index];
                            if (Galaxy.Rnd.Next(0, 2) == 1)
                            {
                                researchNode = null;
                            }
                            break;
                        }
                    case 1:
                        targettedCategories.AddRange(new List<ComponentCategoryType>
                {
                    ComponentCategoryType.Reactor,
                    ComponentCategoryType.Construction
                });
                        targettedTypes.AddRange(new List<ComponentType>
                {
                    ComponentType.EngineMainThrust,
                    ComponentType.EngineVectoring,
                    ComponentType.ComputerTargetting,
                    ComponentType.ComputerCountermeasures
                });
                        researchNode = SelectResearchNodeToCrash(researchNodeList, targettedCategories, targettedTypes);
                        break;
                    case 2:
                        targettedCategories.AddRange(new List<ComponentCategoryType>
                {
                    ComponentCategoryType.Shields,
                    ComponentCategoryType.Sensor,
                    ComponentCategoryType.WeaponPointDefense
                });
                        targettedTypes.AddRange(new List<ComponentType> { ComponentType.Armor });
                        researchNode = SelectResearchNodeToCrash(researchNodeList, targettedCategories, targettedTypes);
                        break;
                    case 3:
                        targettedCategories.AddRange(new List<ComponentCategoryType>
                {
                    ComponentCategoryType.HyperDrive,
                    ComponentCategoryType.WeaponBeam,
                    ComponentCategoryType.WeaponTorpedo,
                    ComponentCategoryType.Fighter
                });
                        researchNode = SelectResearchNodeToCrash(researchNodeList, targettedCategories, targettedTypes);
                        break;
                }
            }
            if (researchNode != null)
            {
                double num2 = Galaxy.CalculateCrashResearchProgramCost(this, researchNode);
                double num3 = StateMoney * 0.7;
                if (DifficultyLevel < 1.0)
                {
                    num3 /= DifficultyLevel;
                }
                num3 = Math.Min(num3, StateMoney);
                if (num2 <= num3 && this != _Galaxy.PlayerEmpire && InitiateConstruction)
                {
                    InitiateCrashResearchProgram(researchNode, num2);
                }
            }
        }

        public void InitiateCrashResearchProgram(ResearchNode project, double cost)
        {
            if (StateMoney >= cost)
            {
                project.IsRushing = true;
                StateMoney -= cost;
                PirateEconomy.PerformExpense(cost, PirateExpenseType.CrashResearch, _Galaxy.CurrentStarDate);
            }
        }

        private void DeterminePreferredEmpireResearchFocuses(out List<ComponentCategoryType> targettedCategories, out List<ComponentType> targettedTypes, out List<ComponentCategoryType> optimizedDesignCategories, out List<ComponentType> optimizedDesignTypes, out ComponentList raceAllowedComponents)
        {
            targettedCategories = new List<ComponentCategoryType>();
            targettedTypes = new List<ComponentType>();
            optimizedDesignCategories = new List<ComponentCategoryType>();
            optimizedDesignTypes = new List<ComponentType>();
            raceAllowedComponents = new ComponentList();
            if (Policy != null)
            {
                List<ComponentCategoryType> list = new List<ComponentCategoryType>();
                List<ComponentType> list2 = new List<ComponentType>();
                if (Policy.ResearchDesignTechFocus1 != 0 && !list.Contains(Policy.ResearchDesignTechFocus1))
                {
                    list.Add(Policy.ResearchDesignTechFocus1);
                }
                if (Policy.ResearchDesignTechFocus2 != 0 && !list.Contains(Policy.ResearchDesignTechFocus2))
                {
                    list.Add(Policy.ResearchDesignTechFocus2);
                }
                if (Policy.ResearchDesignTechFocus3 != 0 && !list.Contains(Policy.ResearchDesignTechFocus3))
                {
                    list.Add(Policy.ResearchDesignTechFocus3);
                }
                if (Policy.ResearchDesignTechFocus4 != 0 && !list.Contains(Policy.ResearchDesignTechFocus4))
                {
                    list.Add(Policy.ResearchDesignTechFocus4);
                }
                if (Policy.ResearchDesignTechFocus5 != 0 && !list.Contains(Policy.ResearchDesignTechFocus5))
                {
                    list.Add(Policy.ResearchDesignTechFocus5);
                }
                if (Policy.ResearchDesignTechFocus6 != 0 && !list.Contains(Policy.ResearchDesignTechFocus6))
                {
                    list.Add(Policy.ResearchDesignTechFocus6);
                }
                if (Policy.ResearchDesignTechFocusType1 != 0 && !list2.Contains(Policy.ResearchDesignTechFocusType1))
                {
                    list2.Add(Policy.ResearchDesignTechFocusType1);
                }
                if (Policy.ResearchDesignTechFocusType2 != 0 && !list2.Contains(Policy.ResearchDesignTechFocusType2))
                {
                    list2.Add(Policy.ResearchDesignTechFocusType2);
                }
                if (Policy.ResearchDesignTechFocusType3 != 0 && !list2.Contains(Policy.ResearchDesignTechFocusType3))
                {
                    list2.Add(Policy.ResearchDesignTechFocusType3);
                }
                if (Policy.ResearchDesignTechFocusType4 != 0 && !list2.Contains(Policy.ResearchDesignTechFocusType4))
                {
                    list2.Add(Policy.ResearchDesignTechFocusType4);
                }
                if (Policy.ResearchDesignTechFocusType5 != 0 && !list2.Contains(Policy.ResearchDesignTechFocusType5))
                {
                    list2.Add(Policy.ResearchDesignTechFocusType5);
                }
                if (Policy.ResearchDesignTechFocusType6 != 0 && !list2.Contains(Policy.ResearchDesignTechFocusType6))
                {
                    list2.Add(Policy.ResearchDesignTechFocusType6);
                }
                targettedCategories.Clear();
                targettedTypes.Clear();
                if (list.Count > 0)
                {
                    targettedCategories.AddRange(list);
                }
                if (list2.Count > 0)
                {
                    targettedTypes.AddRange(list2);
                }
            }
            DetermineTechForUnbuildableOptimizedDesigns(out optimizedDesignCategories, out optimizedDesignTypes);
            if (optimizedDesignCategories.Count > 0)
            {
                targettedCategories.AddRange(optimizedDesignCategories);
            }
            if (optimizedDesignTypes.Count > 0)
            {
                targettedTypes.AddRange(optimizedDesignTypes);
            }
            if (DominantRace != null && DominantRace.SpecialComponent != null && !targettedTypes.Contains(DominantRace.SpecialComponent.Type))
            {
                targettedTypes.Add(DominantRace.SpecialComponent.Type);
            }
            if (DominantRace == null)
            {
                return;
            }
            raceAllowedComponents = _Galaxy.ResearchNodeDefinitions.ResolveRaceSpecificComponents(DominantRace, includeImprovements: true);
            if (raceAllowedComponents == null || raceAllowedComponents.Count <= 0)
            {
                return;
            }
            List<ComponentType> list3 = raceAllowedComponents.ResolveComponentTypes();
            for (int i = 0; i < list3.Count; i++)
            {
                if (!targettedTypes.Contains(list3[i]))
                {
                    targettedTypes.Add(list3[i]);
                }
            }
        }

        public void ResetAttitudeLevelsAtEndOfWar(DiplomaticRelation diplomaticRelation)
        {
            ResetAttitudeLevelsAtEndOfWar(diplomaticRelation, null);
        }

        public void ResetAttitudeLevelsAtEndOfWar(DiplomaticRelation diplomaticRelation, Empire specifiedWinner)
        {
            double winningRatio = 1.0;
            int loserRawDamageBuiltObject = 0;
            int loserRawDamageColony = 0;
            int winnerRawDamageBuiltObject = 0;
            int winnerRawDamageColony = 0;
            Empire loser = null;
            Empire empire = DetermineVictorInWar(diplomaticRelation, out winningRatio, out loser, out loserRawDamageBuiltObject, out loserRawDamageColony, out winnerRawDamageBuiltObject, out winnerRawDamageColony);
            if (specifiedWinner != null)
            {
                if (loser == specifiedWinner)
                {
                    loser = empire;
                }
                empire = specifiedWinner;
                winningRatio = 1.5;
            }
            if (winningRatio > 2.0)
            {
                EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(loser);
                empireEvaluation.IncidentEvaluation = 0.0;
                empireEvaluation.GovernmentStyleAffinityCumulative = 0.0;
                empireEvaluation.RelationshipWithFriendsPositiveCumulative = 0.0;
                empireEvaluation.RelationshipWithFriendsNegativeCumulative = 0.0;
                empireEvaluation.SystemCompetitionCumulative = 0.0;
                empireEvaluation.CovetousnessCumulative = 0.0;
                EmpireEvaluation empireEvaluation2 = loser.ObtainEmpireEvaluation(empire);
                empireEvaluation2.IncidentEvaluation = Math.Max(-5.0, empireEvaluation2.IncidentEvaluation);
                empireEvaluation2.GovernmentStyleAffinityCumulative = 0.0;
                empireEvaluation2.RelationshipWithFriendsPositiveCumulative = 0.0;
                empireEvaluation2.RelationshipWithFriendsNegativeCumulative = 0.0;
                empireEvaluation2.SystemCompetitionCumulative = 0.0;
                empireEvaluation2.CovetousnessCumulative = 0.0;
            }
            else if (winningRatio > 1.3)
            {
                EmpireEvaluation empireEvaluation3 = empire.ObtainEmpireEvaluation(loser);
                empireEvaluation3.IncidentEvaluation = Math.Max(-3.0, empireEvaluation3.IncidentEvaluation);
                empireEvaluation3.GovernmentStyleAffinityCumulative = 0.0;
                empireEvaluation3.RelationshipWithFriendsPositiveCumulative = 0.0;
                empireEvaluation3.RelationshipWithFriendsNegativeCumulative = 0.0;
                empireEvaluation3.SystemCompetitionCumulative = 0.0;
                empireEvaluation3.CovetousnessCumulative = 0.0;
                EmpireEvaluation empireEvaluation4 = loser.ObtainEmpireEvaluation(empire);
                empireEvaluation4.SystemCompetitionCumulative = 0.0;
                empireEvaluation4.CovetousnessCumulative = 0.0;
                empireEvaluation4.IncidentEvaluation = Math.Max(-8.0, empireEvaluation4.IncidentEvaluation);
            }
            else
            {
                EmpireEvaluation empireEvaluation5 = empire.ObtainEmpireEvaluation(loser);
                empireEvaluation5.IncidentEvaluation = Math.Max(-5.0, empireEvaluation5.IncidentEvaluation);
                empireEvaluation5.SystemCompetitionCumulative = 0.0;
                empireEvaluation5.CovetousnessCumulative = 0.0;
                EmpireEvaluation empireEvaluation6 = loser.ObtainEmpireEvaluation(empire);
                empireEvaluation6.IncidentEvaluation = Math.Max(-10.0, empireEvaluation6.IncidentEvaluation);
                empireEvaluation6.SystemCompetitionCumulative = 0.0;
                empireEvaluation6.CovetousnessCumulative = 0.0;
            }
        }

        public void ClearOutlawsFromEmpire(Empire empire, Empire outlawEmpire)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            foreach (BuiltObject outlaw in empire.Outlaws)
            {
                if (outlaw.Empire == outlawEmpire)
                {
                    builtObjectList.Add(outlaw);
                }
            }
            foreach (BuiltObject item in builtObjectList)
            {
                empire.Outlaws.Remove(item);
            }
        }

        private void ClearAttackersFromEmpire(BuiltObject ship, Empire empire)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            foreach (StellarObject attacker in ship.Attackers)
            {
                if (attacker is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)attacker;
                    if (builtObject.Empire == empire)
                    {
                        stellarObjectList.Add(attacker);
                    }
                }
            }
            foreach (StellarObject item in stellarObjectList)
            {
                ship.Attackers.Remove(item);
            }
        }

        private void CancelAttackMissionAgainstEmpireForSingleShip(BuiltObject ship, Empire empire)
        {
            ship.ClearAllMissionsForTarget(ship, empire, BuiltObjectMissionType.Attack, dropOutOfHyperspace: true);
            ship.ClearAllMissionsForTarget(ship, empire, BuiltObjectMissionType.WaitAndAttack, dropOutOfHyperspace: true);
            ship.ClearAllMissionsForTarget(ship, empire, BuiltObjectMissionType.Bombard, dropOutOfHyperspace: true);
            ship.ClearAllMissionsForTarget(ship, empire, BuiltObjectMissionType.WaitAndBombard, dropOutOfHyperspace: true);
            ship.ClearAllMissionsForTarget(ship, empire, BuiltObjectMissionType.Capture, dropOutOfHyperspace: true);
            ship.ClearAllMissionsForTarget(ship, empire, BuiltObjectMissionType.Raid, dropOutOfHyperspace: true);
            ClearAttackersFromEmpire(ship, empire);
        }

        private void CancelAttackMissionAgainstEmpireForSingleShipGroup(ShipGroup shipGroup, Empire empire)
        {
            if (shipGroup.Mission != null)
            {
                shipGroup.ClearAllMissionsForTarget(shipGroup, empire, BuiltObjectMissionType.Attack);
                shipGroup.ClearAllMissionsForTarget(shipGroup, empire, BuiltObjectMissionType.WaitAndAttack);
                shipGroup.ClearAllMissionsForTarget(shipGroup, empire, BuiltObjectMissionType.Bombard);
                shipGroup.ClearAllMissionsForTarget(shipGroup, empire, BuiltObjectMissionType.WaitAndBombard);
                shipGroup.ClearAllMissionsForTarget(shipGroup, empire, BuiltObjectMissionType.Capture);
                shipGroup.ClearAllMissionsForTarget(shipGroup, empire, BuiltObjectMissionType.Raid);
            }
        }

        public void CancelAttacksAgainstEmpire(Empire empire)
        {
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject ship = BuiltObjects[i];
                CancelAttackMissionAgainstEmpireForSingleShip(ship, empire);
            }
            for (int j = 0; j < PrivateBuiltObjects.Count; j++)
            {
                BuiltObject ship2 = PrivateBuiltObjects[j];
                CancelAttackMissionAgainstEmpireForSingleShip(ship2, empire);
            }
            if (ShipGroups != null)
            {
                for (int k = 0; k < ShipGroups.Count; k++)
                {
                    ShipGroup shipGroup = ShipGroups[k];
                    CancelAttackMissionAgainstEmpireForSingleShipGroup(shipGroup, empire);
                }
            }
            ClearOutlawsFromEmpire(this, empire);
        }

        public void ProcessEndOfWarWithEmpire(Empire empire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
            diplomaticRelation.WarObjective = WarObjective.Undefined;
            diplomaticRelation.WarObjectiveColonies.Clear();
            diplomaticRelation.WarObjectiveBases.Clear();
            DiplomaticRelation diplomaticRelation2 = empire.ObtainDiplomaticRelation(this);
            diplomaticRelation2.WarObjective = WarObjective.Undefined;
            diplomaticRelation2.WarObjectiveColonies.Clear();
            diplomaticRelation2.WarObjectiveBases.Clear();
            CharacterList characterList = new CharacterList();
            characterList.AddRange(Characters.GetCharactersByRole(CharacterRole.FleetAdmiral));
            characterList.AddRange(Characters.GetCharactersByRole(CharacterRole.TroopGeneral));
            _Galaxy.DoCharacterEvent(CharacterEventType.WarEnded, empire, characterList, includeLeader: true, this);
            Counters.ProcessRelationChange(diplomaticRelation, this, DiplomaticRelationType.None, _Galaxy.CurrentStarDate, DiplomaticRelationType.War);
            if (diplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion && diplomaticRelation.Initiator != this)
            {
                _Galaxy.DoCharacterEventLeader(CharacterEventType.Subjugated, diplomaticRelation.Initiator, this);
            }
            diplomaticRelation.StartDateOfLastChange = _Galaxy.CurrentStarDate;
            diplomaticRelation2.StartDateOfLastChange = _Galaxy.CurrentStarDate;
            CancelAttacksAgainstEmpire(empire);
            CancelBlockades(empire);
            int num = CountEmpiresWeDeclaredWarOnNonLocked();
            int num2 = CountEmpiresWhoDeclaredWarOnUsNonLocked();
            BuiltObjectList builtObjectList = new BuiltObjectList();
            for (int i = 0; i < Outlaws.Count; i++)
            {
                BuiltObject builtObject = Outlaws[i];
                if (builtObject.Empire == empire)
                {
                    builtObjectList.Add(builtObject);
                }
            }
            foreach (BuiltObject item in builtObjectList)
            {
                Outlaws.Remove(item);
            }
            if (RecentAttackingEmpires.Contains(empire))
            {
                RecentAttackingEmpires.Remove(empire);
            }
            EmpireList empireList = DetermineEmpiresWarOrConquer();
            if (empireList.Contains(empire))
            {
                empireList.Remove(empire);
            }
            CheckAttackFleetTargets(empireList);
            if (!CheckAtWar())
            {
                EmpireList empireList2 = ResolveEmpiresToDefendAgainst();
                if (empireList2.Count <= 0)
                {
                    ClearDefendFleets();
                }
                else
                {
                    ReviewDefensiveFleetLocations();
                }
            }
        }

        public bool CheckHaveMetPirates(Empire empire)
        {
            if (empire != null && empire.PirateRelations != null)
            {
                for (int i = 0; i < empire.PirateRelations.Count; i++)
                {
                    PirateRelation pirateRelation = empire.PirateRelations[i];
                    if (pirateRelation != null && pirateRelation.Type != 0 && pirateRelation.OtherEmpire != null && pirateRelation.OtherEmpire.PirateEmpireBaseHabitat != null)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool CheckEmpireHasColonizationTech(Empire empire)
        {
            if (empire != null && empire.Research != null)
            {
                Component latestComponent = empire.Research.GetLatestComponent(ComponentType.HabitationColonization);
                if (latestComponent != null)
                {
                    return true;
                }
            }
            return false;
        }

        public bool CheckPirateEmpireHasCriminalNetwork(Empire empire)
        {
            if (empire != null && empire.Colonies != null)
            {
                for (int i = 0; i < empire.Colonies.Count; i++)
                {
                    Habitat habitat = empire.Colonies[i];
                    if (habitat != null && habitat.Facilities != null)
                    {
                        int num = habitat.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateCriminalNetwork);
                        if (num > 0 && habitat.GetPirateControl().CheckFactionHasControl(empire))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public bool CheckEmpireHasOwnedColonies(Empire empire)
        {
            if (empire != null && empire.Colonies != null)
            {
                for (int i = 0; i < empire.Colonies.Count; i++)
                {
                    Habitat habitat = empire.Colonies[i];
                    if (habitat != null && habitat.Owner == empire)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool CheckEmpireHasHyperDriveTech(Empire empire)
        {
            if (empire != null && empire.Research != null)
            {
                Component latestComponent = empire.Research.GetLatestComponent(ComponentType.HyperDrive);
                if (latestComponent != null)
                {
                    return true;
                }
            }
            return false;
        }

        private void ConsiderTreatyProposals()
        {
            if (ControlDiplomacyTreaties != AutomationLevel.FullyAutomated && ControlDiplomacyOffense != AutomationLevel.FullyAutomated)
            {
                return;
            }
            int weightedMilitaryPotency = WeightedMilitaryPotency;
            int militaryPotency = MilitaryPotency;
            _ = _Galaxy.IntoleranceLevel;
            DiplomaticRelationList diplomaticRelationList = new DiplomaticRelationList();
            if (_ProposedDiplomaticRelations.Count > 0)
            {
                ReviewDiplomaticStrategies();
            }
            for (int i = 0; i < _ProposedDiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = _ProposedDiplomaticRelations[i];
                Empire thisEmpire = diplomaticRelation.ThisEmpire;
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(thisEmpire);
                int weightedMilitaryPotency2 = diplomaticRelation.ThisEmpire.WeightedMilitaryPotency;
                int militaryPotency2 = diplomaticRelation.ThisEmpire.MilitaryPotency;
                EvaluateMilitaryPotency(weightedMilitaryPotency, weightedMilitaryPotency2, thisEmpire);
                DiplomaticRelation diplomaticRelation2 = DiplomaticRelations[diplomaticRelation.ThisEmpire];
                if (diplomaticRelation2 == null)
                {
                    diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.NotMet, diplomaticRelation.Initiator, this, diplomaticRelation.ThisEmpire, tradeRestrictedResources: false);
                    DiplomaticRelations.Add(diplomaticRelation2);
                }
                DiplomaticRelation diplomaticRelation3 = diplomaticRelation.ThisEmpire.DiplomaticRelations[diplomaticRelation.OtherEmpire];
                if (diplomaticRelation3 == null)
                {
                    diplomaticRelation3 = new DiplomaticRelation(DiplomaticRelationType.NotMet, diplomaticRelation.Initiator, diplomaticRelation.ThisEmpire, diplomaticRelation.OtherEmpire, tradeRestrictedResources: false);
                    diplomaticRelation.ThisEmpire.DiplomaticRelations.Add(diplomaticRelation3);
                }
                diplomaticRelation3.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                _ = diplomaticRelation.ThisEmpire.SpecialBonusDiplomacy;
                bool flag = false;
                if (diplomaticRelation2.Locked || diplomaticRelation3.Locked)
                {
                    continue;
                }
                if (diplomaticRelation.Type == DiplomaticRelationType.None && diplomaticRelation2.Type == DiplomaticRelationType.War && ControlDiplomacyOffense == AutomationLevel.FullyAutomated)
                {
                    diplomaticRelationList.Add(diplomaticRelation);
                    WarEndReason endReason = WarEndReason.Undefined;
                    if (ConsiderEndWar(thisEmpire, out endReason))
                    {
                        double winningRatio = 0.0;
                        int loserRawDamageBuiltObject = 0;
                        int loserRawDamageColony = 0;
                        int winnerRawDamageBuiltObject = 0;
                        int winnerRawDamageColony = 0;
                        Empire loser = null;
                        Empire empire = DetermineVictorInWar(diplomaticRelation2, out winningRatio, out loser, out loserRawDamageBuiltObject, out loserRawDamageColony, out winnerRawDamageBuiltObject, out winnerRawDamageColony);
                        if (empire != null && empire == this && DetermineWhetherWantToOfferSubjugation(this) && DetermineSubjugationOfLoserInWar(empire, loser, winningRatio, empire.MilitaryPotency, loser.MilitaryPotency))
                        {
                            DiplomaticRelation diplomaticRelation4 = new DiplomaticRelation(DiplomaticRelationType.SubjugatedDominion, this, this, diplomaticRelation.ThisEmpire, _Galaxy.CurrentStarDate, diplomaticRelation.SupplyRestrictedResources);
                            diplomaticRelation.ThisEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation4);
                            continue;
                        }
                        ResetAttitudeLevelsAtEndOfWar(diplomaticRelation2);
                        diplomaticRelation2.Type = diplomaticRelation.Type;
                        diplomaticRelation2.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                        diplomaticRelation3.Type = diplomaticRelation.Type;
                        diplomaticRelation3.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                        flag = true;
                        SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.AcceptDiplomaticRelation, DiplomaticRelationType.None, TextResolver.GetText("We agree to end this war. We will cease hostilities immediately."));
                        ProcessEndOfWarWithEmpire(diplomaticRelation.ThisEmpire);
                        diplomaticRelation.ThisEmpire.ProcessEndOfWarWithEmpire(this);
                        SendNewsBroadcastWarStartEnd(diplomaticRelation2);
                        continue;
                    }
                }
                if (diplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion && !diplomaticRelation2.Locked)
                {
                    if (diplomaticRelation2.Type == DiplomaticRelationType.War)
                    {
                        if (ControlDiplomacyOffense == AutomationLevel.FullyAutomated)
                        {
                            diplomaticRelationList.Add(diplomaticRelation);
                            double winningRatio2 = 1.0;
                            int loserRawDamageBuiltObject2 = 0;
                            int loserRawDamageColony2 = 0;
                            int winnerRawDamageBuiltObject2 = 0;
                            int winnerRawDamageColony2 = 0;
                            Empire loser2 = null;
                            Empire empire2 = DetermineVictorInWar(diplomaticRelation, out winningRatio2, out loser2, out loserRawDamageBuiltObject2, out loserRawDamageColony2, out winnerRawDamageBuiltObject2, out winnerRawDamageColony2);
                            if (empire2 != this)
                            {
                                if (DetermineSubjugationOfLoserInWar(empire2, loser2, winningRatio2, empire2.MilitaryPotency, MilitaryPotency))
                                {
                                    ResetAttitudeLevelsAtEndOfWar(diplomaticRelation2);
                                    diplomaticRelation2.Type = DiplomaticRelationType.SubjugatedDominion;
                                    diplomaticRelation2.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                                    diplomaticRelation2.Initiator = diplomaticRelation.ThisEmpire;
                                    diplomaticRelation3.Type = DiplomaticRelationType.SubjugatedDominion;
                                    diplomaticRelation3.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                                    diplomaticRelation3.Initiator = diplomaticRelation.ThisEmpire;
                                    flag = true;
                                    SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.AcceptDiplomaticRelation, DiplomaticRelationType.SubjugatedDominion, TextResolver.GetText("We accept defeat and acknowledge your status as our ruler."));
                                    ProcessEndOfWarWithEmpire(diplomaticRelation.ThisEmpire);
                                    diplomaticRelation.ThisEmpire.ProcessEndOfWarWithEmpire(this);
                                    long num = long.MaxValue;
                                    int num2 = diplomaticRelation.ThisEmpire.EmpiresViewable.IndexOf(this);
                                    if (num2 >= 0)
                                    {
                                        diplomaticRelation.ThisEmpire.EmpiresViewableExpiry[num2] = num;
                                    }
                                    else
                                    {
                                        diplomaticRelation.ThisEmpire.EmpiresViewable.Add(this);
                                        diplomaticRelation.ThisEmpire.EmpiresViewableExpiry.Add(num);
                                    }
                                    SendNewsBroadcastWarStartEnd(diplomaticRelation2);
                                    _Galaxy.DoCharacterEventLeader(CharacterEventType.Subjugated, diplomaticRelation.ThisEmpire, this);
                                }
                                else
                                {
                                    SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.RefuseDiplomaticRelation, DiplomaticRelationType.SubjugatedDominion, TextResolver.GetText("We refuse to become your slaves - we will fight on."));
                                }
                            }
                            else
                            {
                                SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.RefuseDiplomaticRelation, DiplomaticRelationType.SubjugatedDominion, TextResolver.GetText("We will not accede to your outrageous demand for subjugation!"));
                            }
                            continue;
                        }
                    }
                    else if (ControlDiplomacyTreaties == AutomationLevel.FullyAutomated)
                    {
                        diplomaticRelationList.Add(diplomaticRelation);
                        SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.RefuseDiplomaticRelation, DiplomaticRelationType.SubjugatedDominion, TextResolver.GetText("We will not accede to your outrageous demand for subjugation!"));
                        empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - 12.0;
                        continue;
                    }
                }
                DiplomaticRelationType diplomaticRelationType = DetermineDesiredDiplomaticRelationTypical(diplomaticRelation2.Strategy, diplomaticRelation2.Type);
                bool flag2 = false;
                if (diplomaticRelation2.Type == DiplomaticRelationType.TradeSanctions)
                {
                    flag2 = true;
                }
                if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact && !diplomaticRelation2.Locked)
                {
                    if (ControlDiplomacyTreaties == AutomationLevel.FullyAutomated)
                    {
                        diplomaticRelationList.Add(diplomaticRelation);
                        if (!Reclusive && (CheckEmpireHasHyperDriveTech(this) || CheckEmpireHasHyperDriveTech(thisEmpire)))
                        {
                            double num3 = (double)militaryPotency / (double)militaryPotency2;
                            if (num3 > 5.0)
                            {
                                if (diplomaticRelationType == DiplomaticRelationType.MutualDefensePact || diplomaticRelationType == DiplomaticRelationType.Protectorate)
                                {
                                    DiplomaticRelation diplomaticRelation5 = new DiplomaticRelation(DiplomaticRelationType.Protectorate, this, this, diplomaticRelation.ThisEmpire, _Galaxy.CurrentStarDate, diplomaticRelation.SupplyRestrictedResources);
                                    diplomaticRelation.ThisEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation5);
                                    continue;
                                }
                            }
                            else if (diplomaticRelationType == DiplomaticRelationType.MutualDefensePact)
                            {
                                diplomaticRelation2.Type = diplomaticRelation.Type;
                                diplomaticRelation2.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                                diplomaticRelation2.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                                diplomaticRelation3.Type = diplomaticRelation.Type;
                                diplomaticRelation3.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                                diplomaticRelation3.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                                diplomaticRelation2.MilitaryRefuelingToOther = true;
                                diplomaticRelation3.MilitaryRefuelingToOther = true;
                                if (flag2)
                                {
                                    CancelBlockades(diplomaticRelation.ThisEmpire);
                                    diplomaticRelation.ThisEmpire.CancelBlockades(this);
                                }
                                flag = true;
                                SetEmpireSharedVisibility(diplomaticRelation.ThisEmpire);
                                diplomaticRelation.ThisEmpire.SetEmpireSharedVisibility(this);
                                SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.AcceptDiplomaticRelation, diplomaticRelation.Type, TextResolver.GetText("We graciously accept your magnanimous treaty proposal!"));
                                continue;
                            }
                        }
                    }
                }
                else if (diplomaticRelation.Type == DiplomaticRelationType.Protectorate && !diplomaticRelation2.Locked && ControlDiplomacyTreaties == AutomationLevel.FullyAutomated)
                {
                    diplomaticRelationList.Add(diplomaticRelation);
                    if (!Reclusive && (diplomaticRelationType == DiplomaticRelationType.MutualDefensePact || diplomaticRelationType == DiplomaticRelationType.Protectorate) && (CheckEmpireHasHyperDriveTech(this) || CheckEmpireHasHyperDriveTech(thisEmpire)))
                    {
                        diplomaticRelation2.Type = diplomaticRelation.Type;
                        diplomaticRelation2.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                        diplomaticRelation2.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                        diplomaticRelation3.Type = diplomaticRelation.Type;
                        diplomaticRelation3.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                        diplomaticRelation3.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                        diplomaticRelation2.Initiator = diplomaticRelation.Initiator;
                        diplomaticRelation3.Initiator = diplomaticRelation.Initiator;
                        diplomaticRelation2.MilitaryRefuelingToOther = true;
                        diplomaticRelation3.MilitaryRefuelingToOther = true;
                        if (flag2)
                        {
                            CancelBlockades(diplomaticRelation.ThisEmpire);
                            diplomaticRelation.ThisEmpire.CancelBlockades(this);
                        }
                        flag = true;
                        SetEmpireSharedVisibility(diplomaticRelation.ThisEmpire);
                        diplomaticRelation.ThisEmpire.SetEmpireSharedVisibility(this);
                        SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.AcceptDiplomaticRelation, diplomaticRelation.Type, TextResolver.GetText("We graciously accept your magnanimous treaty proposal!"));
                        continue;
                    }
                }
                if (ControlDiplomacyTreaties == AutomationLevel.FullyAutomated)
                {
                    if (diplomaticRelation2.Type == DiplomaticRelationType.SubjugatedDominion && diplomaticRelation2.Initiator == this && diplomaticRelation.Type == DiplomaticRelationType.None && !diplomaticRelation2.Locked)
                    {
                        if (DetermineWhetherWantToEmancipate(diplomaticRelation2, empireEvaluation.OverallAttitude))
                        {
                            diplomaticRelation2.Type = diplomaticRelation.Type;
                            diplomaticRelation2.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                            diplomaticRelation2.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                            diplomaticRelation3.Type = diplomaticRelation.Type;
                            diplomaticRelation3.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                            diplomaticRelation3.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                            if (flag2)
                            {
                                CancelBlockades(diplomaticRelation.ThisEmpire);
                                diplomaticRelation.ThisEmpire.CancelBlockades(this);
                            }
                            int num4 = _EmpiresViewable.IndexOf(diplomaticRelation.ThisEmpire);
                            if (num4 >= 0)
                            {
                                _EmpiresViewable.RemoveAt(num4);
                                _EmpiresViewableExpiry.RemoveAt(num4);
                            }
                            flag = true;
                            SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.AcceptDiplomaticRelation, diplomaticRelation.Type, TextResolver.GetText("We agree to free you from subjugation to us."));
                            continue;
                        }
                    }
                    else
                    {
                        bool flag3 = false;
                        if (diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement && !diplomaticRelation2.Locked && (CheckEmpireHasHyperDriveTech(this) || CheckEmpireHasHyperDriveTech(thisEmpire)) && diplomaticRelation2.Type != DiplomaticRelationType.FreeTradeAgreement && (diplomaticRelationType == DiplomaticRelationType.FreeTradeAgreement || diplomaticRelationType == DiplomaticRelationType.MutualDefensePact || diplomaticRelationType == DiplomaticRelationType.Protectorate))
                        {
                            diplomaticRelationList.Add(diplomaticRelation);
                            if (!Reclusive)
                            {
                                flag3 = true;
                            }
                        }
                        if (flag3)
                        {
                            if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                            {
                                diplomaticRelation.ThisEmpire.SetEmpireSharedVisibility(this);
                                SetEmpireSharedVisibility(diplomaticRelation.ThisEmpire);
                            }
                            else if (diplomaticRelation2.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation2.Type == DiplomaticRelationType.Protectorate)
                            {
                                if (diplomaticRelation.Type != DiplomaticRelationType.Protectorate && diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact)
                                {
                                    diplomaticRelation.ThisEmpire.ClearEmpireSharedVisibility(this);
                                    ClearEmpireSharedVisibility(diplomaticRelation.ThisEmpire);
                                }
                            }
                            else if (diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement)
                            {
                                if (!diplomaticRelation2.OtherEmpire.CheckWhetherKnowAnySystemsOfOtherEmpire(this))
                                {
                                    Habitat habitat = _Galaxy.FastFindNearestColony((int)diplomaticRelation2.OtherEmpire.Capital.Xpos, (int)diplomaticRelation2.OtherEmpire.Capital.Ypos, this, 0);
                                    if (habitat != null)
                                    {
                                        SystemVisibilityStatus status = diplomaticRelation2.OtherEmpire.SystemVisibility[habitat.SystemIndex].Status;
                                        if (status != SystemVisibilityStatus.Visible)
                                        {
                                            diplomaticRelation2.OtherEmpire.SetSystemVisibility(habitat, SystemVisibilityStatus.Explored);
                                        }
                                    }
                                }
                                if (!CheckWhetherKnowAnySystemsOfOtherEmpire(diplomaticRelation2.OtherEmpire))
                                {
                                    Habitat habitat2 = _Galaxy.FastFindNearestColony((int)Capital.Xpos, (int)Capital.Ypos, diplomaticRelation2.OtherEmpire, 0);
                                    if (habitat2 != null)
                                    {
                                        SystemVisibilityStatus status2 = SystemVisibility[habitat2.SystemIndex].Status;
                                        if (status2 != SystemVisibilityStatus.Visible)
                                        {
                                            SetSystemVisibility(habitat2, SystemVisibilityStatus.Explored);
                                        }
                                    }
                                }
                            }
                            diplomaticRelation2.Type = diplomaticRelation.Type;
                            diplomaticRelation2.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                            diplomaticRelation2.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                            diplomaticRelation3.Type = diplomaticRelation.Type;
                            diplomaticRelation3.LastDiplomacyTradeOfferDate = diplomaticRelation.LastDiplomacyTradeOfferDate;
                            diplomaticRelation3.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                            if (flag2)
                            {
                                CancelBlockades(diplomaticRelation.ThisEmpire);
                                diplomaticRelation.ThisEmpire.CancelBlockades(this);
                            }
                            flag = true;
                            SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.AcceptDiplomaticRelation, diplomaticRelation.Type, TextResolver.GetText("We graciously accept your magnanimous treaty proposal!"));
                            continue;
                        }
                    }
                }
                if (!flag)
                {
                    diplomaticRelationList.Add(diplomaticRelation);
                    SendMessageToEmpire(diplomaticRelation.ThisEmpire, EmpireMessageType.RefuseDiplomaticRelation, diplomaticRelation.Type, TextResolver.GetText("We reject your treaty proposal"));
                }
            }
            foreach (DiplomaticRelation item in diplomaticRelationList)
            {
                _ProposedDiplomaticRelations.Remove(item);
            }
        }

        private DiplomaticRelationType UpgradeDesiredDiplomaticRelationTypeIfAtWar(Empire offeringEmpire, int ourMilitaryPotency, double galaxyIntoleranceLevel, double diplomacyFactor)
        {
            //DiplomaticRelationType diplomaticRelationType = DiplomaticRelationType.None;
            int militaryStrength = 0;
            DetermineEmpiresAtWarWith(out militaryStrength);
            double num = (double)ourMilitaryPotency / (double)militaryStrength;
            double num2 = Math.Pow((double)DominantRace.AggressionLevel / 100.0, 2.0);
            double num3 = 0.6 / num2;
            if (num < num3)
            {
                DiplomaticRelation currentDiplomaticRelation = ObtainDiplomaticRelation(offeringEmpire);
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(offeringEmpire);
                int overallAttitude = empireEvaluation.OverallAttitude;
                overallAttitude += 15;
                return ResolveDesiredDiplomaticRelationType(currentDiplomaticRelation, overallAttitude, DominantRace.IntelligenceLevel, DominantRace.FriendlinessLevel, DominantRace.LoyaltyLevel, DominantRace.AggressionLevel, WarWeariness, galaxyIntoleranceLevel, diplomacyFactor);
            }
            return ResolveDesiredDiplomaticRelationType(offeringEmpire, galaxyIntoleranceLevel, diplomacyFactor);
        }

        public double LeaveSystem(Habitat systemStar)
        {
            double num = 0.0;
            int num2 = 536870911;
            BuiltObject builtObject = null;
            for (int i = 0; i < RefuellingDepots.Count; i++)
            {
                BuiltObject builtObject2 = RefuellingDepots[i];
                if (builtObject2.NearestSystemStar != systemStar)
                {
                    int num3 = (int)_Galaxy.CalculateDistance(systemStar.Xpos, systemStar.Ypos, builtObject2.Xpos, builtObject2.Ypos);
                    if (num3 < num2)
                    {
                        num2 = num3;
                        builtObject = builtObject2;
                    }
                }
            }
            if (builtObject != null)
            {
                for (int j = 0; j < BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject3 = BuiltObjects[j];
                    if (builtObject3.Role == BuiltObjectRole.Base)
                    {
                        continue;
                    }
                    int num4 = (int)_Galaxy.CalculateDistance(builtObject3.Xpos, builtObject3.Ypos, systemStar.Xpos, systemStar.Ypos);
                    if (builtObject3.NearestSystemStar == systemStar || num4 <= Galaxy.MaxSolarSystemSize)
                    {
                        if (builtObject3.ShipGroup != null && (builtObject3.ShipGroup.Mission == null || builtObject3.ShipGroup.Mission.Type == BuiltObjectMissionType.Undefined || builtObject3.ShipGroup.Mission.Type == BuiltObjectMissionType.MoveAndWait || builtObject3.ShipGroup.Mission.Type == BuiltObjectMissionType.Hold))
                        {
                            builtObject3.ShipGroup.AssignMission(BuiltObjectMissionType.Move, builtObject, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                            num += 10.0;
                        }
                        else if (builtObject3.ShipGroup == null && builtObject3.TopSpeed > 0 && builtObject != null)
                        {
                            builtObject3.ClearPreviousMissionRequirements();
                            builtObject3.AssignMission(BuiltObjectMissionType.Move, builtObject, null, BuiltObjectMissionPriority.Normal);
                            num += (double)builtObject3.FirepowerRaw / 20.0;
                        }
                    }
                }
            }
            return num;
        }

        private bool CheckSufficientCashflow(double expense, double allowableRatio)
        {
            double num = Math.Max(0.0, CalculateAnnualCashflow() * allowableRatio);
            if (expense < num)
            {
                return true;
            }
            return false;
        }

        private bool CheckSufficientFunds(double cost, double allowableRatio)
        {
            double num = Math.Max(0.0, StateMoney * allowableRatio);
            if (cost < num)
            {
                return true;
            }
            return false;
        }

        public double ValueMoneyGiftFromEmpire(Empire giver, double amount)
        {
            double num = giver.StateMoney / 8.0;
            double num2 = Math.Sqrt(Math.Sqrt(amount)) * (amount / num);
            if (PirateEmpireBaseHabitat == null && giver.PirateEmpireBaseHabitat == null)
            {
                DiplomaticRelation diplomaticRelation = giver.ObtainDiplomaticRelation(this);
                double num3 = Math.Min(1.0, (double)(_Galaxy.CurrentStarDate - diplomaticRelation.LastGiftDate) / (double)Galaxy.IdealTimeBetweenGifts);
                num2 *= num3;
            }
            int num4 = ObtainAttitude(giver);
            if (num4 < 0)
            {
                double num5 = Math.Max(1.0, (double)num4 / -2.5);
                num2 /= num5;
            }
            num2 = Math.Max(0.0, Math.Min(num2, 15.0));
            return num2 * (1.0 + giver.SpecialBonusDiplomacy);
        }

        public int RemoveMilitaryForcesFromSystem(Habitat systemStar, Empire requester)
        {
            int num = DetermineRelativeStrength(MilitaryPotency, requester);
            bool flag = false;
            if (PirateEmpireBaseHabitat == null && requester.PirateEmpireBaseHabitat == null)
            {
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(requester);
                if (diplomaticRelation.Strategy == DiplomaticStrategy.Ally || diplomaticRelation.Strategy == DiplomaticStrategy.Befriend || diplomaticRelation.Strategy == DiplomaticStrategy.DefendPlacate || diplomaticRelation.Strategy == DiplomaticStrategy.Placate || num < 0)
                {
                    flag = true;
                }
            }
            else
            {
                PirateRelation pirateRelation = ObtainPirateRelation(requester);
                if (pirateRelation.Type == PirateRelationType.Protection || pirateRelation.Evaluation > 10f)
                {
                    flag = true;
                }
            }
            if (flag)
            {
                int num2 = 0;
                int num3 = 536870911;
                BuiltObject builtObject = null;
                for (int i = 0; i < RefuellingDepots.Count; i++)
                {
                    BuiltObject builtObject2 = RefuellingDepots[i];
                    if (builtObject2.NearestSystemStar != systemStar)
                    {
                        int num4 = (int)_Galaxy.CalculateDistance(systemStar.Xpos, systemStar.Ypos, builtObject2.Xpos, builtObject2.Ypos);
                        if (num4 < num3)
                        {
                            num3 = num4;
                            builtObject = builtObject2;
                        }
                    }
                }
                if (builtObject != null)
                {
                    for (int j = 0; j < BuiltObjects.Count; j++)
                    {
                        if (BuiltObjects[j].Role == BuiltObjectRole.Military && BuiltObjects[j].FirepowerRaw > 0 && BuiltObjects[j].NearestSystemStar == systemStar)
                        {
                            BuiltObjects[j].ClearPreviousMissionRequirements();
                            BuiltObjects[j].AssignMission(BuiltObjectMissionType.Refuel, builtObject, null, BuiltObjectMissionPriority.Unavailable);
                            num2++;
                        }
                    }
                }
                if (num2 > 0)
                {
                    return 1;
                }
                return 0;
            }
            return -1;
        }

        public double CalculateAnnualCashflow()
        {
            if (PirateEmpireBaseHabitat != null)
            {
                return CalculatePirateCashflow();
            }
            double num = AnnualStateMaintenanceExcludingUnderConstruction + ThisYearsStateFuelCosts + AnnualTroopMaintenance + AnnualSubjugationTribute + AnnualPirateProtection;
            double num2 = AnnualTaxRevenue + ThisYearsForeignTradeBonuses + ThisYearsSpacePortIncome + ThisYearsResortIncome + CalculateAnnualSubjugationTributeIncome();
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                num += AnnualPrivateMaintenanceExcludingUnderConstruction;
            }
            return num2 - num;
        }

        public double CalculateAccurateAnnualCashflowIncludingUnderConstruction(out double annualEmpireExpenses)
        {
            annualEmpireExpenses = 0.0;
            if (PirateEmpireBaseHabitat != null)
            {
                return CalculatePirateCashflow(includeShipsUnderConstruction: true);
            }
            annualEmpireExpenses = AnnualStateMaintenance + AnnualTroopMaintenanceIncludeRecruiting + AnnualSubjugationTribute + AnnualPirateProtection + AnnualFacilityMaintenance;
            double num = AnnualTaxRevenue + CalculateAnnualSubjugationTributeIncome();
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                annualEmpireExpenses += AnnualPrivateMaintenance;
            }
            return num - annualEmpireExpenses;
        }

        public double CalculateAccurateAnnualCashflow()
        {
            if (PirateEmpireBaseHabitat != null)
            {
                return CalculatePirateCashflow();
            }
            double num = AnnualStateMaintenanceExcludingUnderConstruction + AnnualTroopMaintenance + AnnualSubjugationTribute + AnnualPirateProtection;
            double num2 = AnnualTaxRevenue + CalculateAnnualSubjugationTributeIncome();
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                num += AnnualPrivateMaintenanceExcludingUnderConstruction;
            }
            return num2 - num;
        }

        public double CalculatePirateCashflow()
        {
            return CalculatePirateCashflow(includeShipsUnderConstruction: false);
        }

        public double CalculatePirateCashflow(bool includeShipsUnderConstruction)
        {
            double num = CalculatePirateIncome();
            double num2 = CalculatePirateExpenses(includeShipsUnderConstruction);
            return num - num2;
        }

        public double CalculatePirateExpenses()
        {
            return CalculatePirateExpenses(includeShipsUnderConstruction: false);
        }

        public double CalculatePirateExpenses(bool includeShipsUnderConstruction)
        {
            double num = 0.0;
            num = ((!includeShipsUnderConstruction) ? (AnnualStateMaintenanceExcludingUnderConstruction + AnnualFacilityMaintenance) : (AnnualStateMaintenance + AnnualFacilityMaintenance));
            return num + AnnualTroopMaintenance;
        }

        public double CalculatePirateIncome()
        {
            double num = 0.0;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && !habitat.HasBeenDestroyed)
                {
                    PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(this);
                    if (byFaction != null && byFaction.EmpireId == EmpireId)
                    {
                        double num2 = habitat.AnnualRevenue * (double)byFaction.ControlLevel * 0.5;
                        num += num2;
                    }
                }
            }
            for (int j = 0; j < PirateRelations.Count; j++)
            {
                PirateRelation pirateRelation = PirateRelations[j];
                if (pirateRelation != null && pirateRelation.Type == PirateRelationType.Protection)
                {
                    num += pirateRelation.MonthlyProtectionFeeToThisEmpire * 12.0;
                }
            }
            if (PirateEconomy != null)
            {
                double num3 = (PirateEconomy.ThisYear.TotalIncome - PirateEconomy.ThisYear.StableIncome) / 2.0;
                if (PirateEconomy.LastYear != null)
                {
                    double num4 = PirateEconomy.LastYear.TotalIncome - PirateEconomy.LastYear.StableIncome;
                    num3 += num4 / 2.0;
                    num3 /= 2.0;
                }
                num += num3;
            }
            return num;
        }

        public double CalculateAccurateAnnualIncome()
        {
            if (PirateEmpireBaseHabitat != null)
            {
                return CalculatePirateIncome();
            }
            double num = AnnualTaxRevenue + CalculateAnnualSubjugationTributeIncome();
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                num -= AnnualPrivateMaintenanceExcludingUnderConstruction;
            }
            return num;
        }

        public void AcceptPirateProtection(Empire pirateEmpire, double monthlyPrice)
        {
            pirateEmpire.ChangePirateRelation(this, PirateRelationType.Protection, _Galaxy.CurrentStarDate, monthlyPrice);
            int num = pirateEmpire.PirateMissions.IndexOfTarget(this, EmpireActivityType.Attack);
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(num >= 0, 200, ref iterationCount))
            {
                EmpireActivity empireActivity = pirateEmpire.PirateMissions[num];
                if (empireActivity != null && empireActivity.RequestingEmpire != null && empireActivity.RequestingEmpire != pirateEmpire && pirateEmpire != null)
                {
                    PirateRelation pirateRelation = empireActivity.RequestingEmpire.ObtainPirateRelation(pirateEmpire);
                    pirateRelation.EvaluationPirateMissionsFail -= 20f;
                }
                pirateEmpire.PirateMissions.RemoveAt(num);
                num = pirateEmpire.PirateMissions.IndexOfTarget(this, EmpireActivityType.Attack);
            }
            if (monthlyPrice > 0.0)
            {
                StateMoney -= monthlyPrice;
                pirateEmpire.StateMoney += monthlyPrice;
                pirateEmpire.PirateEconomy.PerformIncome(monthlyPrice, PirateIncomeType.ProtectionAgreement, _Galaxy.CurrentStarDate);
                pirateEmpire.Counters.PirateProtectionIncome += monthlyPrice;
            }
            pirateEmpire.CancelAttacksAgainstEmpire(this);
            CancelAttacksAgainstEmpire(pirateEmpire);
        }

        private void ProcessMessages()
        {
            EmpireMessage[] array = ListHelper.ToArrayThreadSafe(_Messages);
            _ = _Galaxy.IntoleranceLevel;
            foreach (EmpireMessage empireMessage in array)
            {
                if (empireMessage == null)
                {
                    continue;
                }
                Empire empire = null;
                Empire empire2 = null;
                EmpireEvaluation empireEvaluation = null;
                DiplomaticRelation diplomaticRelation = null;
                double num = 0.0;
                switch (empireMessage.MessageType)
                {
                    case EmpireMessageType.RemoveForcesFromSystem:
                        if (this != _Galaxy.PlayerEmpire)
                        {
                            Habitat systemStar = (Habitat)empireMessage.Subject;
                            RemoveMilitaryForcesFromSystem(systemStar, empireMessage.Sender);
                        }
                        break;
                    case EmpireMessageType.CancelPirateProtection:
                        if (PirateEmpireBaseHabitat != null && empireMessage.Sender != null)
                        {
                            PirateRelation pirateRelation3 = ObtainPirateRelation(empireMessage.Sender);
                            float evaluationChangeAmount = pirateRelation3.CalculateOffenseOverCancellingProtection(_Galaxy.CurrentStarDate);
                            ChangePirateEvaluation(empireMessage.Sender, evaluationChangeAmount, PirateRelationEvaluationType.ProtectionCancelled);
                        }
                        break;
                    case EmpireMessageType.PirateOfferProtection:
                        if (_ControlDiplomacyTreaties == AutomationLevel.FullyAutomated && DetermineDesirePirateProtection(empireMessage.Sender))
                        {
                            double num13 = empireMessage.Money;
                            if (num13 <= 0.0)
                            {
                                num13 = empireMessage.Sender.CalculatePirateProtectionPricePerMonth(this);
                            }
                            AcceptPirateProtection(empireMessage.Sender, num13);
                        }
                        break;
                    case EmpireMessageType.SellInfoUnmetEmpire:
                        {
                            if (this == _Galaxy.PlayerEmpire || PirateEmpireBaseHabitat != null || Galaxy.Rnd.Next(0, 2) != 1 || !CheckSufficientFunds(empireMessage.Money, 0.2) || !(empireMessage.Subject is Empire))
                            {
                                break;
                            }
                            empire = (Empire)empireMessage.Subject;
                            int num3 = 0;
                            for (int j = 0; j < DiplomaticRelations.Count; j++)
                            {
                                DiplomaticRelation diplomaticRelation4 = DiplomaticRelations[j];
                                if (diplomaticRelation4.Type != 0)
                                {
                                    num3++;
                                }
                            }
                            double num4 = (double)num3 / (double)_Galaxy.Empires.Count;
                            if (num4 < 0.4)
                            {
                                string title = string.Format(TextResolver.GetText("Inform Empire Their Contact Details Sold Title"), Name);
                                string description = string.Format(TextResolver.GetText("Inform Empire Their Contact Details Sold"), empireMessage.Sender.Name, Name);
                                empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.GeneralNeutralEvent, null, description, title);
                                DiplomaticRelation diplomaticRelation5 = ObtainDiplomaticRelation(empire);
                                diplomaticRelation5.Type = DiplomaticRelationType.None;
                                diplomaticRelation5 = empire.ObtainDiplomaticRelation(this);
                                diplomaticRelation5.Type = DiplomaticRelationType.None;
                                StateMoney -= empireMessage.Money;
                                empireMessage.Sender.StateMoney += empireMessage.Money;
                                empireMessage.Sender.PirateEconomy.PerformIncome(empireMessage.Money, PirateIncomeType.SellInfo, _Galaxy.CurrentStarDate);
                            }
                            break;
                        }
                    case EmpireMessageType.SellInfoSystemMap:
                        {
                            if (this == _Galaxy.PlayerEmpire || PirateEmpireBaseHabitat != null || Galaxy.Rnd.Next(0, 2) != 1 || !CheckSufficientFunds(empireMessage.Money, 0.1) || !(empireMessage.Subject is Habitat))
                            {
                                break;
                            }
                            Habitat habitat4 = (Habitat)empireMessage.Subject;
                            int num11 = 0;
                            for (int k = 0; k < DiplomaticRelations.Count; k++)
                            {
                                DiplomaticRelation diplomaticRelation6 = DiplomaticRelations[k];
                                if (diplomaticRelation6.Type != 0)
                                {
                                    num11++;
                                }
                            }
                            double num12 = (double)num11 / (double)_Galaxy.Empires.Count;
                            if (num12 < 0.4)
                            {
                                SystemVisibility[habitat4.SystemIndex].Status = SystemVisibilityStatus.Explored;
                                StateMoney -= empireMessage.Money;
                                empireMessage.Sender.StateMoney += empireMessage.Money;
                                empireMessage.Sender.PirateEconomy.PerformIncome(empireMessage.Money, PirateIncomeType.SellInfo, _Galaxy.CurrentStarDate);
                            }
                            break;
                        }
                    case EmpireMessageType.SellInfoIndependentColony:
                        if (this != _Galaxy.PlayerEmpire && Galaxy.Rnd.Next(0, 2) == 1 && CheckSufficientFunds(empireMessage.Money, 0.2) && empireMessage.Subject is Habitat)
                        {
                            Habitat habitat5 = (Habitat)empireMessage.Subject;
                            if (Colonies.Count < 8)
                            {
                                SystemVisibility[habitat5.SystemIndex].Status = SystemVisibilityStatus.Explored;
                                StateMoney -= empireMessage.Money;
                                empireMessage.Sender.StateMoney += empireMessage.Money;
                                empireMessage.Sender.PirateEconomy.PerformIncome(empireMessage.Money, PirateIncomeType.SellInfo, _Galaxy.CurrentStarDate);
                            }
                        }
                        break;
                    case EmpireMessageType.SellInfoRuins:
                        if (this != _Galaxy.PlayerEmpire && Galaxy.Rnd.Next(0, 2) == 1 && CheckSufficientFunds(empireMessage.Money, 0.2) && empireMessage.Subject is Habitat)
                        {
                            Habitat habitat3 = (Habitat)empireMessage.Subject;
                            SystemVisibility[habitat3.SystemIndex].Status = SystemVisibilityStatus.Explored;
                            StateMoney -= empireMessage.Money;
                            empireMessage.Sender.StateMoney += empireMessage.Money;
                            empireMessage.Sender.PirateEconomy.PerformIncome(empireMessage.Money, PirateIncomeType.SellInfo, _Galaxy.CurrentStarDate);
                        }
                        break;
                    case EmpireMessageType.SellInfoDebrisField:
                    case EmpireMessageType.SellInfoRestrictedArea:
                    case EmpireMessageType.SellInfoPlanetDestroyer:
                        if (this != _Galaxy.PlayerEmpire && Galaxy.Rnd.Next(0, 2) == 1 && CheckSufficientFunds(empireMessage.Money, 0.2) && empireMessage.Subject is GalaxyLocation)
                        {
                            GalaxyLocation item = (GalaxyLocation)empireMessage.Subject;
                            if (!KnownGalaxyLocations.Contains(item))
                            {
                                KnownGalaxyLocations.Add(item);
                            }
                            StateMoney -= empireMessage.Money;
                            empireMessage.Sender.StateMoney += empireMessage.Money;
                            empireMessage.Sender.PirateEconomy.PerformIncome(empireMessage.Money, PirateIncomeType.SellInfo, _Galaxy.CurrentStarDate);
                        }
                        break;
                    case EmpireMessageType.OfferTrade:
                        if (this == _Galaxy.PlayerEmpire)
                        {
                            break;
                        }
                        if (empireMessage.Subject is object[])
                        {
                            object[] array2 = (object[])empireMessage.Subject;
                            TradeableItemList tradeableItemList = (TradeableItemList)array2[0];
                            TradeableItemList tradeableItemList2 = (TradeableItemList)array2[1];
                            TradeOfferResponse tradeOfferResponse = EvaluateTradeOffer(empireMessage.Sender, tradeableItemList, tradeableItemList2, disallowCriticalItems: true);
                            if (tradeOfferResponse == TradeOfferResponse.Accept || tradeOfferResponse == TradeOfferResponse.AcceptUnfair)
                            {
                                foreach (TradeableItem item2 in tradeableItemList)
                                {
                                    _Galaxy.GiveTradeableItem(empireMessage.Sender, this, item2, tradeableItemList2);
                                }
                                foreach (TradeableItem item3 in tradeableItemList2)
                                {
                                    _Galaxy.GiveTradeableItem(this, empireMessage.Sender, item3, tradeableItemList);
                                }
                            }
                            else
                            {
                                if (empireMessage.Sender == _Galaxy.PlayerEmpire || empireMessage.Sender.PirateEmpireBaseHabitat != null || PirateEmpireBaseHabitat != null)
                                {
                                    break;
                                }
                                foreach (TradeableItem item4 in tradeableItemList)
                                {
                                    if (item4.Type == TradeableItemType.ThreatenWar)
                                    {
                                        empireMessage.Sender.DeclareWar(this);
                                    }
                                    else if (item4.Type == TradeableItemType.ThreatenTradeSanctions)
                                    {
                                        DiplomaticRelation currentDiplomaticRelation = empireMessage.Sender.ObtainDiplomaticRelation(this);
                                        empireMessage.Sender.ChangeDiplomaticRelation(currentDiplomaticRelation, DiplomaticRelationType.TradeSanctions);
                                        empireMessage.Sender.SendMessageToEmpire(this, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.TradeSanctions, TextResolver.GetText("We terminate all trade with you effective immediately!"));
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (!(empireMessage.Subject is TradeableItem))
                            {
                                break;
                            }
                            TradeableItem tradeableItem = (TradeableItem)empireMessage.Subject;
                            if (tradeableItem.Type == TradeableItemType.TerritoryMap)
                            {
                                if (!DetermineAcceptTerritoryMapTrade(tradeableItem.Value, empireMessage.Sender))
                                {
                                    break;
                                }
                                HabitatList habitatList2 = empireMessage.Sender.DetermineEmpireSystems(empireMessage.Sender);
                                HabitatList habitatList3 = DetermineEmpireSystems(this);
                                foreach (Habitat item5 in habitatList2)
                                {
                                    if (!CheckSystemExplored(item5))
                                    {
                                        SetSystemVisibility(item5, SystemVisibilityStatus.Explored);
                                    }
                                }
                                foreach (Habitat item6 in habitatList3)
                                {
                                    if (!empireMessage.Sender.CheckSystemExplored(item6))
                                    {
                                        empireMessage.Sender.SetSystemVisibility(item6, SystemVisibilityStatus.Explored);
                                    }
                                }
                            }
                            else if (tradeableItem.Type == TradeableItemType.GalaxyMap)
                            {
                                if (DetermineAcceptGalaxyMapTrade(tradeableItem.Value, empireMessage.Sender))
                                {
                                    _Galaxy.MergeGalaxyMap(empireMessage.Sender, this);
                                    _Galaxy.MergeGalaxyMap(this, empireMessage.Sender);
                                }
                            }
                            else
                            {
                                if (tradeableItem.Type != TradeableItemType.ResearchProject || !((double)tradeableItem.Value <= StateMoney))
                                {
                                    break;
                                }
                                double num14 = StateMoney * (0.25 + Galaxy.Rnd.NextDouble() * 0.25);
                                if (StateMoney >= num14 && tradeableItem.Item is ResearchNode)
                                {
                                    ResearchNode researchNode = (ResearchNode)tradeableItem.Item;
                                    ResearchNode equivalent = Research.TechTree.GetEquivalent(researchNode);
                                    if (!equivalent.IsResearched)
                                    {
                                        DoResearchBreakthrough(equivalent, selfResearched: false, blockMessages: true, suppressUpdate: true);
                                        Research.Update(DominantRace);
                                        ReviewDesignsBuiltObjectsImprovedComponents();
                                        ReviewResearchAbilities();
                                        StateMoney -= tradeableItem.Value;
                                        empireMessage.Sender.StateMoney += tradeableItem.Value;
                                        empireMessage.Sender.PirateEconomy.PerformIncome(tradeableItem.Value, PirateIncomeType.SellInfo, _Galaxy.CurrentStarDate);
                                    }
                                }
                            }
                        }
                        break;
                    case EmpireMessageType.GiveGift:
                        {
                            double num15 = ValueMoneyGiftFromEmpire(empireMessage.Sender, empireMessage.Money);
                            if (empireMessage.Sender.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                            {
                                EmpireEvaluation empireEvaluation2 = ObtainEmpireEvaluation(empireMessage.Sender);
                                empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw + num15;
                            }
                            else
                            {
                                PirateRelation pirateRelation2 = ObtainPirateRelation(empireMessage.Sender);
                                pirateRelation2.EvaluationGifts += (float)num15;
                            }
                            empireMessage.Sender.CivilityRating += num15 * 0.1;
                            StateMoney += empireMessage.Money;
                            PirateEconomy.PerformIncome(empireMessage.Money, PirateIncomeType.Undefined, _Galaxy.CurrentStarDate);
                            SendMessageToEmpire(empireMessage.Sender, EmpireMessageType.Informational, null, TextResolver.GetText("Thank you for your gift."));
                            if (empireMessage.Sender.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                            {
                                diplomaticRelation = empireMessage.Sender.ObtainDiplomaticRelation(this);
                                diplomaticRelation.LastGiftDate = _Galaxy.CurrentStarDate;
                            }
                            break;
                        }
                    case EmpireMessageType.LeaveSystem:
                        if (_ControlDiplomacyTreaties != AutomationLevel.FullyAutomated)
                        {
                            break;
                        }
                        if (empireMessage.Sender.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                        {
                            diplomaticRelation = ObtainDiplomaticRelation(empireMessage.Sender);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                            {
                                break;
                            }
                        }
                        num = (double)WeightedMilitaryPotency / (double)empireMessage.Sender.WeightedMilitaryPotency;
                        if ((Galaxy.Rnd.Next(0, 3) == 1 || num < (Galaxy.Rnd.NextDouble() * 50.0 + (double)DominantRace.CautionLevel - 50.0) / 100.0) && empireMessage.Subject is Habitat)
                        {
                            Habitat habitat2 = (Habitat)empireMessage.Subject;
                            double val = LeaveSystem(habitat2);
                            if (empireMessage.Sender.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                            {
                                empireEvaluation = ObtainEmpireEvaluation(empireMessage.Sender);
                                val = Math.Min(val, 3.0);
                                empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - val;
                            }
                            else
                            {
                                PirateRelation pirateRelation = ObtainPirateRelation(empireMessage.Sender);
                                val = Math.Min(val, 3.0);
                                pirateRelation.EvaluationOffenseOverRequests -= (float)val;
                            }
                            SendMessageToEmpire(empireMessage.Sender, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We comply with your request to leave the X system"), habitat2.Name));
                        }
                        break;
                    case EmpireMessageType.RemoveColoniesFromSystem:
                        {
                            if (_ControlDiplomacyTreaties == AutomationLevel.Manual)
                            {
                                break;
                            }
                            diplomaticRelation = ObtainDiplomaticRelation(empireMessage.Sender);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                            {
                                break;
                            }
                            num = (double)WeightedMilitaryPotency / (double)empireMessage.Sender.WeightedMilitaryPotency;
                            if (!(num < (Galaxy.Rnd.NextDouble() * 30.0 + (double)DominantRace.CautionLevel - 65.0) / 100.0) || !(empireMessage.Subject is Habitat))
                            {
                                break;
                            }
                            double num5 = 0.0;
                            long num6 = 0L;
                            Habitat habitat = (Habitat)empireMessage.Subject;
                            HabitatList habitatList = new HabitatList();
                            HabitatList habitats = _Galaxy.Systems[habitat].Habitats;
                            foreach (Habitat item7 in habitats)
                            {
                                for (int num7 = Colonies.IndexOf(item7); num7 >= 0; num7 = ((num7 >= Colonies.Count - 1) ? (-1) : Colonies.IndexOf(item7, num7 + 1)))
                                {
                                    habitatList.Add(Colonies[num7]);
                                    num6 += Colonies[num7].DevelopmentLevel * Colonies[num7].Population.TotalAmount;
                                }
                            }
                            bool flag = true;
                            foreach (Habitat item8 in habitatList)
                            {
                                if (item8 == _Capital)
                                {
                                    flag = false;
                                    break;
                                }
                            }
                            if (flag)
                            {
                                double num8 = 50.0 * ((Galaxy.Rnd.NextDouble() * 40.0 + 80.0) * Math.Pow(1.0 / num, 2.0));
                                if (num8 > (double)(num6 / 1000000))
                                {
                                    foreach (Habitat item9 in habitatList)
                                    {
                                        OrderList orders = _Galaxy.Orders.GetOrders(item9);
                                        if (orders.Count > 0)
                                        {
                                            foreach (Order item10 in orders)
                                            {
                                                if (item10.Contracts != null)
                                                {
                                                    foreach (Contract contract in item10.Contracts)
                                                    {
                                                        if (contract.Freighter == null)
                                                        {
                                                            continue;
                                                        }
                                                        if (item10.CommodityResource != null)
                                                        {
                                                            Resource commodityResource = item10.CommodityResource;
                                                            int num9 = -1;
                                                            if (contract.Freighter.Cargo != null)
                                                            {
                                                                num9 = contract.Freighter.Cargo.IndexOf(commodityResource, this);
                                                            }
                                                            if (num9 >= 0)
                                                            {
                                                                int amount = contract.Freighter.Cargo[num9].Amount;
                                                                contract.Freighter.Cargo.RemoveAt(num9);
                                                                Cargo cargo = new Cargo(commodityResource, amount, contract.Freighter.Empire);
                                                                contract.Freighter.Cargo.Add(cargo);
                                                            }
                                                        }
                                                        else if (item10.CommodityComponent != null)
                                                        {
                                                            Component commodityComponent = item10.CommodityComponent;
                                                            int num10 = -1;
                                                            if (contract.Freighter.Cargo != null)
                                                            {
                                                                num10 = contract.Freighter.Cargo.IndexOf(commodityComponent, this);
                                                            }
                                                            if (num10 >= 0)
                                                            {
                                                                int amount2 = contract.Freighter.Cargo[num10].Amount;
                                                                contract.Freighter.Cargo.RemoveAt(num10);
                                                                Cargo cargo2 = new Cargo(commodityComponent, amount2, contract.Freighter.Empire);
                                                                contract.Freighter.Cargo.Add(cargo2);
                                                            }
                                                        }
                                                        contract.Freighter.ClearPreviousMissionRequirements();
                                                    }
                                                }
                                                _Galaxy.Orders.Remove(item10);
                                            }
                                        }
                                        item9.Owner = null;
                                        item9.Empire = null;
                                        Colonies.Remove(item9);
                                        num5 += (double)item9.DevelopmentLevel / 3.0;
                                    }
                                    empireEvaluation = ObtainEmpireEvaluation(empireMessage.Sender);
                                    num5 = Math.Min(num5, 30.0);
                                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - num5;
                                    SendMessageToEmpire(empireMessage.Sender, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We comply with your request to remove all colonies from the X system"), habitat.Name));
                                }
                                else
                                {
                                    empireEvaluation = ObtainEmpireEvaluation(empireMessage.Sender);
                                    num5 = 8.0;
                                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - num5;
                                    SendMessageToEmpire(empireMessage.Sender, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We will not remove our colonies from the X system"), habitat.Name));
                                }
                            }
                            else
                            {
                                empireEvaluation = ObtainEmpireEvaluation(empireMessage.Sender);
                                num5 = 8.0;
                                empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - num5;
                                SendMessageToEmpire(empireMessage.Sender, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We will not remove our colonies from the X system"), habitat.Name) + TextResolver.GetText("This is our capital system."));
                            }
                            break;
                        }
                    case EmpireMessageType.RequestJointWar:
                        {
                            if (!(empireMessage.Subject is Empire))
                            {
                                break;
                            }
                            empire = (Empire)empireMessage.Subject;
                            empire2 = empireMessage.Sender;
                            if (empire == this || _ControlDiplomacyOffense == AutomationLevel.Manual || Reclusive || empire2.PirateEmpireBaseHabitat != null || empire.PirateEmpireBaseHabitat != null || PirateEmpireBaseHabitat != null)
                            {
                                break;
                            }
                            diplomaticRelation = ObtainDiplomaticRelation(empire);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War)
                            {
                                break;
                            }
                            bool flag3 = false;
                            DiplomaticStrategy strategy = diplomaticRelation.Strategy;
                            if (strategy == DiplomaticStrategy.Conquer || strategy == DiplomaticStrategy.Undermine || strategy == DiplomaticStrategy.Punish)
                            {
                                flag3 = true;
                            }
                            if (!flag3)
                            {
                                break;
                            }
                            int weightedMilitaryPotency2 = empire.WeightedMilitaryPotency;
                            num = (double)WeightedMilitaryPotency / (double)weightedMilitaryPotency2;
                            if (!(num > (Galaxy.Rnd.NextDouble() * 40.0 + (double)DominantRace.CautionLevel - 30.0) / 100.0))
                            {
                                break;
                            }
                            DiplomaticRelation diplomaticRelation8 = ObtainDiplomaticRelation(empire2);
                            if (diplomaticRelation8.Strategy == DiplomaticStrategy.Ally || diplomaticRelation8.Strategy == DiplomaticStrategy.Befriend)
                            {
                                bool flag4 = true;
                                if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation.Type == DiplomaticRelationType.Protectorate && diplomaticRelation.Initiator == this))
                                {
                                    flag4 = false;
                                }
                                else if (diplomaticRelation.Locked && diplomaticRelation.Type != DiplomaticRelationType.War)
                                {
                                    flag4 = false;
                                }
                                if (flag4 && CheckTaskAuthorized(_ControlDiplomacyOffense, GenerateAutomationMessageAskedWar(empire2, empire), empire, AdvisorMessageType.ComplyWarOther))
                                {
                                    DeclareWar(empire, empire2);
                                    SendMessageToEmpire(empire2, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We join you in battle against the EMPIRE"), empire.Name));
                                    EmpireEvaluation empireEvaluation4 = empire2.ObtainEmpireEvaluation(this);
                                    empireEvaluation4.IncidentEvaluation = empireEvaluation4.IncidentEvaluationRaw + 10.0;
                                }
                            }
                            break;
                        }
                    case EmpireMessageType.RequestJointTradeSanctions:
                        {
                            if (!(empireMessage.Subject is Empire))
                            {
                                break;
                            }
                            empire = (Empire)empireMessage.Subject;
                            empire2 = empireMessage.Sender;
                            if (empire == this || _ControlDiplomacyOffense == AutomationLevel.Manual || Reclusive || empire2.PirateEmpireBaseHabitat != null || empire.PirateEmpireBaseHabitat != null || PirateEmpireBaseHabitat != null)
                            {
                                break;
                            }
                            diplomaticRelation = ObtainDiplomaticRelation(empire);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                            {
                                break;
                            }
                            empireEvaluation = ObtainEmpireEvaluation(empire);
                            bool flag2 = false;
                            switch (diplomaticRelation.Strategy)
                            {
                                case DiplomaticStrategy.Conquer:
                                case DiplomaticStrategy.Undermine:
                                case DiplomaticStrategy.DefendUndermine:
                                case DiplomaticStrategy.Punish:
                                    flag2 = true;
                                    break;
                            }
                            if (!flag2)
                            {
                                break;
                            }
                            long num16 = CalculateNextAllowableProposalDate(diplomaticRelation);
                            if (_Galaxy.CurrentStarDate < num16)
                            {
                                break;
                            }
                            int weightedMilitaryPotency = empire.WeightedMilitaryPotency;
                            num = (double)WeightedMilitaryPotency / (double)weightedMilitaryPotency;
                            if (!(num > (Galaxy.Rnd.NextDouble() * 40.0 + (double)DominantRace.CautionLevel - 40.0) / 100.0))
                            {
                                break;
                            }
                            int num17 = (int)StateMoney / 2;
                            if (empireEvaluation.TradeVolume >= num17)
                            {
                                break;
                            }
                            DiplomaticRelation diplomaticRelation7 = ObtainDiplomaticRelation(empire2);
                            if (diplomaticRelation7.Strategy == DiplomaticStrategy.Ally || diplomaticRelation7.Strategy == DiplomaticStrategy.Befriend)
                            {
                                int refusalCount = 0;
                                if (CheckTaskAuthorized(_ControlDiplomacyOffense, ref refusalCount, GenerateAutomationMessageAskedTradeSanctions(empire2, empire), empire, AdvisorMessageType.ComplyTradeSanctionsOther, empire2, null))
                                {
                                    DiplomaticRelation currentDiplomaticRelation2 = ObtainDiplomaticRelation(empire);
                                    ChangeDiplomaticRelation(currentDiplomaticRelation2, DiplomaticRelationType.TradeSanctions);
                                    SendMessageToEmpire(empire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.TradeSanctions, TextResolver.GetText("We terminate all trade with you effective immediately!"));
                                    SendMessageToEmpire(empire2, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We join you in trade embargo against the EMPIRE"), empire.Name));
                                    EmpireEvaluation empireEvaluation3 = empire2.ObtainEmpireEvaluation(this);
                                    empireEvaluation3.IncidentEvaluation = empireEvaluation3.IncidentEvaluationRaw + 5.0;
                                }
                            }
                            break;
                        }
                    case EmpireMessageType.RequestHonorMutualDefense:
                        {
                            if (empireMessage.Sender == null || empireMessage.Subject == null || !(empireMessage.Subject is Empire))
                            {
                                break;
                            }
                            Empire empire3 = (Empire)empireMessage.Subject;
                            if (empire3 != null && empire3.PirateEmpireBaseHabitat == null && empireMessage.Sender.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                            {
                                DiplomaticRelation diplomaticRelation3 = ObtainDiplomaticRelation(empire3);
                                if (diplomaticRelation3.Type != DiplomaticRelationType.War)
                                {
                                    ConsiderHonorMutualDefensePactOrProtectorate(empireMessage.Sender, empire3);
                                }
                            }
                            break;
                        }
                    case EmpireMessageType.RequestLiftTradeSanctions:
                        {
                            if (!(empireMessage.Subject is Empire))
                            {
                                break;
                            }
                            empire = (Empire)empireMessage.Subject;
                            if (_ControlDiplomacyOffense != AutomationLevel.FullyAutomated || Reclusive || empire.PirateEmpireBaseHabitat != null || empireMessage.Sender.PirateEmpireBaseHabitat != null || PirateEmpireBaseHabitat != null)
                            {
                                break;
                            }
                            diplomaticRelation = ObtainDiplomaticRelation(empire);
                            if (diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions || diplomaticRelation.Initiator != this)
                            {
                                break;
                            }
                            long num2 = CalculateNextAllowableProposalDate(diplomaticRelation);
                            if (_Galaxy.CurrentStarDate < num2)
                            {
                                break;
                            }
                            num = (double)WeightedMilitaryPotency / (double)empireMessage.Sender.WeightedMilitaryPotency;
                            DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(empire2);
                            if (diplomaticRelation2.Strategy == DiplomaticStrategy.Ally || diplomaticRelation2.Strategy == DiplomaticStrategy.Befriend)
                            {
                                if (diplomaticRelation.Strategy != DiplomaticStrategy.Conquer)
                                {
                                    ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                                    SendMessageToEmpire(empire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, TextResolver.GetText("Our trade sanctions against you have been lifted - we will now resume trade."), Galaxy.ResolveDescription(DiplomaticRelationType.TradeSanctions));
                                    CancelBlockades(empire);
                                    empire.CancelBlockades(this);
                                    SendMessageToEmpire(empireMessage.Sender, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We will resume trade with the EMPIRE"), empire.Name));
                                }
                            }
                            else if (num < (Galaxy.Rnd.NextDouble() * 30.0 + (double)DominantRace.CautionLevel - 65.0) / 100.0 && diplomaticRelation.Strategy != DiplomaticStrategy.Conquer)
                            {
                                ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                                SendMessageToEmpire(empire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, TextResolver.GetText("Our trade sanctions against you have been lifted - we will now resume trade."), Galaxy.ResolveDescription(DiplomaticRelationType.TradeSanctions));
                                CancelBlockades(empire);
                                empire.CancelBlockades(this);
                                SendMessageToEmpire(empireMessage.Sender, EmpireMessageType.Informational, null, string.Format(TextResolver.GetText("We will resume trade with the EMPIRE"), empire.Name));
                            }
                            break;
                        }
                }
            }
            _Messages.Clear();
        }

        public bool ConsiderHonorMutualDefensePactOrProtectorate(Empire requester, Empire targetEmpire)
        {
            if (requester != null && targetEmpire != null)
            {
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(requester);
                if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation.Type == DiplomaticRelationType.Protectorate && diplomaticRelation.Initiator == this))
                {
                    bool flag = true;
                    DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(targetEmpire);
                    if (diplomaticRelation2.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation2.Type == DiplomaticRelationType.Protectorate && diplomaticRelation2.Initiator == this))
                    {
                        flag = false;
                    }
                    else if (diplomaticRelation2.Locked && diplomaticRelation2.Type != DiplomaticRelationType.War)
                    {
                        flag = false;
                    }
                    if (flag)
                    {
                        double num = (double)MilitaryPotency / (double)targetEmpire.MilitaryPotency;
                        double num2 = 1.0;
                        if (DominantRace != null)
                        {
                            num2 = (double)DominantRace.LoyaltyLevel / 100.0;
                            num2 *= num2;
                        }
                        double num3 = num * num2;
                        if (num3 >= 0.5)
                        {
                            DeclareWar(targetEmpire, null, lockedWar: false, blockFlowonEffects: true);
                            requester.ObtainEmpireEvaluation(this).IncidentEvaluation += 30.0;
                            CivilityRating += 8.0;
                            string description = string.Format(TextResolver.GetText("We stand alongside our friends and allies"), targetEmpire.Name);
                            SendMessageToEmpire(requester, EmpireMessageType.Informational, targetEmpire, description);
                            return true;
                        }
                        string text = TextResolver.GetText("Sorry, we can't help you right now...");
                        SendMessageToEmpire(requester, EmpireMessageType.Informational, targetEmpire, text);
                        requester.ObtainEmpireEvaluation(this).IncidentEvaluation -= 30.0;
                        CivilityRating -= 6.0;
                        ChangeDiplomaticRelation(ObtainDiplomaticRelation(requester), DiplomaticRelationType.None, blockFlowonEffects: true);
                        return false;
                    }
                }
            }
            return false;
        }

        private void ClearOutOldDistressSignals()
        {
            long num = _Galaxy.CurrentStarDate - 50000;
            DistressSignalList distressSignalList = new DistressSignalList();
            for (int i = 0; i < DistressSignals.Count; i++)
            {
                if (DistressSignals[i].Date < num)
                {
                    distressSignalList.Add(DistressSignals[i]);
                }
            }
            for (int j = 0; j < distressSignalList.Count; j++)
            {
                DistressSignals.Remove(distressSignalList[j]);
            }
        }

        public void ProcessDistressSignals()
        {
            for (int i = 0; i < DistressSignals.Count; i++)
            {
                DistressSignal distressSignal = DistressSignals[i];
                if (distressSignal.Source is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)distressSignal.Source;
                    if (builtObject.Role != BuiltObjectRole.Base)
                    {
                        continue;
                    }
                    int num = _Galaxy.DetermineDefendingStrength(builtObject, this);
                    ShipGroupList shipGroupList = ShipGroups.DetermineFleetsTravellingToLocation(builtObject.Xpos, builtObject.Ypos, 48000.0);
                    num += shipGroupList.CountTotalOverallStrengthFactor();
                    int num2 = (int)((double)distressSignal.AttackStrength * 0.75);
                    if (num >= num2)
                    {
                        continue;
                    }
                    ShipGroup shipGroup = IdentifyNearestResponseFleet(builtObject.Xpos, builtObject.Ypos, mustBeWithinFuelRange: true, 0.1, 48000.0);
                    if (shipGroup == null)
                    {
                        continue;
                    }
                    bool flag = true;
                    double num3 = _Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos);
                    if (num3 > Galaxy.DistressSignalResponseMaximumDistance)
                    {
                        ShipGroup shipGroup2 = FindNearestFleet(builtObject.Xpos, builtObject.Ypos);
                        if (shipGroup2 != null && shipGroup2 != shipGroup)
                        {
                            flag = false;
                        }
                    }
                    if (num3 > (double)(Galaxy.SectorSize * 2))
                    {
                        flag = false;
                    }
                    if (flag)
                    {
                        StellarObject stellarObject = _Galaxy.DetermineNearestHabitatIfPossible(builtObject);
                        if (stellarObject == null)
                        {
                            shipGroup.AssignMission(BuiltObjectMissionType.Move, null, null, builtObject.Xpos, builtObject.Ypos, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                        else
                        {
                            shipGroup.AssignMission(BuiltObjectMissionType.Move, stellarObject, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                        shipGroup.AllowImmediateThreatEvaluation = true;
                        shipGroup.AttackRangeSquared = (float)AttackRangeAttack * (float)AttackRangeAttack;
                    }
                }
                else
                {
                    if (!(distressSignal.Source is Habitat))
                    {
                        continue;
                    }
                    Habitat habitat = (Habitat)distressSignal.Source;
                    Galaxy.DetermineHabitatSystemStar(habitat);
                    int num4 = _Galaxy.DetermineDefendingStrength(habitat, this);
                    ShipGroupList shipGroupList2 = ShipGroups.DetermineFleetsTravellingToLocation(habitat.Xpos, habitat.Ypos, 48000.0);
                    num4 += shipGroupList2.CountTotalOverallStrengthFactor();
                    int num5 = (int)((double)distressSignal.AttackStrength * 0.75);
                    if (num4 >= num5)
                    {
                        continue;
                    }
                    ShipGroup shipGroup3 = IdentifyNearestResponseFleet(habitat.Xpos, habitat.Ypos, mustBeWithinFuelRange: true, 0.1, 48000.0);
                    if (shipGroup3 == null)
                    {
                        continue;
                    }
                    bool flag2 = true;
                    double num6 = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, shipGroup3.LeadShip.Xpos, shipGroup3.LeadShip.Ypos);
                    if (num6 > Galaxy.DistressSignalResponseMaximumDistance)
                    {
                        ShipGroup shipGroup4 = FindNearestFleet(habitat.Xpos, habitat.Ypos);
                        if (shipGroup4 != null && shipGroup4 != shipGroup3)
                        {
                            flag2 = false;
                        }
                    }
                    if (num6 > (double)(Galaxy.SectorSize * 2))
                    {
                        flag2 = false;
                    }
                    if (flag2)
                    {
                        StellarObject stellarObject2 = _Galaxy.DetermineNearestHabitatIfPossible(habitat);
                        if (stellarObject2 == null)
                        {
                            shipGroup3.AssignMission(BuiltObjectMissionType.Move, habitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                        else
                        {
                            shipGroup3.AssignMission(BuiltObjectMissionType.Move, stellarObject2, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                        shipGroup3.AllowImmediateThreatEvaluation = true;
                        shipGroup3.AttackRangeSquared = (float)AttackRangeAttack * (float)AttackRangeAttack;
                    }
                }
            }
        }

        public DesignList CheckBasesToBeBuiltAtHabitat(Habitat habitat)
        {
            DesignList designList = new DesignList();
            for (int i = 0; i < ConstructionShips.Count; i++)
            {
                BuiltObject builtObject = ConstructionShips[i];
                if (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Build && builtObject.Mission.TargetHabitat == habitat && builtObject.Mission.Design != null)
                {
                    designList.Add(builtObject.Mission.Design);
                }
                if (builtObject.SubsequentMissions == null || builtObject.SubsequentMissions.Count <= 0)
                {
                    continue;
                }
                for (int j = 0; j < builtObject.SubsequentMissions.Count; j++)
                {
                    if (builtObject.SubsequentMissions[j] != null && builtObject.SubsequentMissions[j].Type == BuiltObjectMissionType.Build && builtObject.SubsequentMissions[j].TargetHabitat == habitat && builtObject.SubsequentMissions[j].Design != null)
                    {
                        designList.Add(builtObject.SubsequentMissions[j].Design);
                    }
                }
            }
            return designList;
        }

        public ShipGroup IdentifyNearestAvailableFleet(double x, double y, bool mustBeAutomated)
        {
            return IdentifyNearestAvailableFleet(x, y, mustBeAutomated, mustBeWithinFuelRange: false, 0.0);
        }

        public ShipGroup IdentifyNearestAvailableFleet(double x, double y, bool mustBeAutomated, bool mustBeWithinFuelRange, double fuelPortionMargin)
        {
            return IdentifyNearestAvailableFleet(x, y, mustBeAutomated, mustBeWithinFuelRange, fuelPortionMargin, 0.0);
        }

        public ShipGroup IdentifyNearestAvailableFleet(double x, double y, bool mustBeAutomated, bool mustBeWithinFuelRange, double fuelPortionMargin, double excludeRange)
        {
            return IdentifyNearestAvailableFleet(x, y, mustBeAutomated, mustBeWithinFuelRange, fuelPortionMargin, excludeRange, defendFleetsMustBeWithinPostureRange: true);
        }

        public ShipGroup IdentifyNearestAvailableFleet(double x, double y, bool mustBeAutomated, bool mustBeWithinFuelRange, double fuelPortionMargin, double excludeRange, bool defendFleetsMustBeWithinPostureRange)
        {
            return IdentifyNearestAvailableFleet(x, y, mustBeAutomated, mustBeWithinFuelRange, fuelPortionMargin, excludeRange, defendFleetsMustBeWithinPostureRange, forceFleetUse: false, 0);
        }

        public ShipGroup IdentifyNearestAvailableFleet(double x, double y, bool mustBeAutomated, bool mustBeWithinFuelRange, double fuelPortionMargin, double excludeRange, bool defendFleetsMustBeWithinPostureRange, bool forceFleetUse, int minimumShipCount)
        {
            double num = excludeRange * excludeRange;
            bool atWar = CheckAtWar();
            ShipGroupList shipGroupList = GenerateDistanceOrderedFleetList(x, y, ShipGroups);
            for (int i = 0; i < shipGroupList.Count; i++)
            {
                ShipGroup shipGroup = shipGroupList[i];
                if (shipGroup == null || shipGroup.LeadShip == null)
                {
                    continue;
                }
                bool flag = true;
                if (mustBeAutomated && !shipGroup.LeadShip.IsAutoControlled)
                {
                    flag = false;
                }
                if (!flag || shipGroup.Ships.Count < minimumShipCount || (!forceFleetUse && !CheckFleetDefenseReponse(shipGroup, x, y, atWar)))
                {
                    continue;
                }
                bool flag2 = true;
                if (shipGroup.Mission != null)
                {
                    if (forceFleetUse)
                    {
                        if (shipGroup.Mission.Priority == BuiltObjectMissionPriority.High || shipGroup.Mission.Priority == BuiltObjectMissionPriority.VeryHigh || shipGroup.Mission.Priority == BuiltObjectMissionPriority.Unavailable)
                        {
                            flag2 = false;
                        }
                    }
                    else
                    {
                        flag2 = false;
                        if (shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup.Mission.Type == BuiltObjectMissionType.MoveAndWait || shipGroup.Mission.Type == BuiltObjectMissionType.Hold || (shipGroup.Mission.Type == BuiltObjectMissionType.Patrol && shipGroup.Mission.Priority == BuiltObjectMissionPriority.Low))
                        {
                            flag2 = true;
                        }
                    }
                }
                if (!flag2)
                {
                    continue;
                }
                bool flag3 = false;
                if (excludeRange > 0.0)
                {
                    double num2 = _Galaxy.CalculateDistanceSquared(x, y, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos);
                    if (num2 < num)
                    {
                        flag3 = true;
                    }
                }
                if (flag3)
                {
                    continue;
                }
                bool flag4 = true;
                if (!forceFleetUse && defendFleetsMustBeWithinPostureRange && shipGroup.Posture == FleetPosture.Defend)
                {
                    flag4 = false;
                    if (shipGroup.GatherPoint != null)
                    {
                        double num3 = _Galaxy.CalculateDistanceSquared(x, y, shipGroup.GatherPoint.Xpos, shipGroup.GatherPoint.Ypos);
                        if (shipGroup.PostureRangeSquared >= num3)
                        {
                            flag4 = true;
                        }
                    }
                }
                if (flag4)
                {
                    if (!mustBeWithinFuelRange)
                    {
                        return shipGroup;
                    }
                    if (shipGroup.CheckFleetTargetWithinFuelRangeAndRefuel(x, y, fuelPortionMargin))
                    {
                        return shipGroup;
                    }
                }
            }
            return null;
        }

        public bool CheckFleetDefenseReponse(ShipGroup fleet, double attackX, double attackY)
        {
            bool atWar = CheckAtWar();
            return CheckFleetDefenseReponse(fleet, attackX, attackY, atWar);
        }

        public bool CheckFleetDefenseReponse(ShipGroup fleet, double attackX, double attackY, bool atWar)
        {
            if (fleet != null && fleet.LeadShip != null && (fleet.Posture == FleetPosture.Defend || !atWar) && (fleet.Mission == null || fleet.Mission.Type == BuiltObjectMissionType.Undefined || fleet.Mission.Priority == BuiltObjectMissionPriority.Low))
            {
                if (fleet.Posture == FleetPosture.Attack)
                {
                    return true;
                }
                double xpos = fleet.LeadShip.Xpos;
                double ypos = fleet.LeadShip.Ypos;
                if (fleet.GatherPoint != null)
                {
                    xpos = fleet.GatherPoint.Xpos;
                    ypos = fleet.GatherPoint.Ypos;
                }
                double num = _Galaxy.CalculateDistanceSquared(xpos, ypos, attackX, attackY);
                if (fleet.PostureRangeSquared >= num)
                {
                    return true;
                }
            }
            return false;
        }

        public ShipGroup IdentifyNearestResponseFleet(double x, double y, bool mustBeWithinFuelRange, double fuelPortionMargin, double excludeRange)
        {
            ShipGroup shipGroup = null;
            double num = excludeRange * excludeRange;
            bool atWar = CheckAtWar();
            ShipGroupList shipGroupList = GenerateDistanceOrderedFleetList(x, y, ShipGroups);
            for (int i = 0; i < shipGroupList.Count; i++)
            {
                ShipGroup shipGroup2 = shipGroupList[i];
                if (shipGroup2 == null || shipGroup2.LeadShip == null)
                {
                    continue;
                }
                bool flag = true;
                if (shipGroup2.Posture == FleetPosture.Attack && !shipGroup2.LeadShip.IsAutoControlled)
                {
                    flag = false;
                }
                if (!flag || !CheckFleetDefenseReponse(shipGroup2, x, y, atWar) || (shipGroup2.Mission != null && shipGroup2.Mission.Type != 0 && shipGroup2.Mission.Type != BuiltObjectMissionType.MoveAndWait && shipGroup2.Mission.Type != BuiltObjectMissionType.Hold && (shipGroup2.Mission.Type != BuiltObjectMissionType.Patrol || shipGroup2.Mission.Priority != BuiltObjectMissionPriority.Low)))
                {
                    continue;
                }
                bool flag2 = false;
                if (excludeRange > 0.0)
                {
                    double num2 = _Galaxy.CalculateDistanceSquared(x, y, shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos);
                    if (num2 < num)
                    {
                        flag2 = true;
                    }
                }
                if (flag2)
                {
                    continue;
                }
                bool flag3 = false;
                if (mustBeWithinFuelRange)
                {
                    if (shipGroup2.CheckFleetTargetWithinFuelRangeAndRefuel(x, y, fuelPortionMargin))
                    {
                        flag3 = true;
                    }
                }
                else
                {
                    flag3 = true;
                }
                if (flag3)
                {
                    if (shipGroup2.Posture == FleetPosture.Defend)
                    {
                        return shipGroup2;
                    }
                    if (shipGroup == null)
                    {
                        shipGroup = shipGroup2;
                    }
                }
            }
            if (shipGroup != null)
            {
                return shipGroup;
            }
            return null;
        }

        public string ResolveFeelingDescription(PirateRelation pirateRelation)
        {
            string result = string.Empty;
            if (pirateRelation == null)
            {
                return result;
            }
            int num = (int)pirateRelation.Evaluation;
            if (num <= -45)
            {
                result = TextResolver.GetText("Furious");
            }
            if (num >= -44 && num <= -20)
            {
                result = TextResolver.GetText("Angry");
            }
            if (num >= -19 && num <= -5)
            {
                result = TextResolver.GetText("Annoyed");
            }
            if (num >= -4 && num <= 7)
            {
                result = TextResolver.GetText("Cautious");
            }
            if (num >= 8 && num <= 20)
            {
                result = TextResolver.GetText("Pleased");
            }
            if (num >= 21 && num <= 44)
            {
                result = TextResolver.GetText("Friendly");
            }
            if (num >= 45)
            {
                result = TextResolver.GetText("Delighted");
            }
            return result;
        }

        public string ResolveFeelingDescription(EmpireEvaluation evaluation)
        {
            string result = string.Empty;
            if (evaluation == null)
            {
                return result;
            }
            int overallAttitude = evaluation.OverallAttitude;
            if (overallAttitude <= -45)
            {
                result = TextResolver.GetText("Furious");
            }
            if (overallAttitude >= -44 && overallAttitude <= -20)
            {
                result = TextResolver.GetText("Angry");
            }
            if (overallAttitude >= -19 && overallAttitude <= -5)
            {
                result = TextResolver.GetText("Annoyed");
            }
            if (overallAttitude >= -4 && overallAttitude <= 7)
            {
                result = TextResolver.GetText("Cautious");
            }
            if (overallAttitude >= 8 && overallAttitude <= 20)
            {
                result = TextResolver.GetText("Pleased");
            }
            if (overallAttitude >= 21 && overallAttitude <= 44)
            {
                result = TextResolver.GetText("Friendly");
            }
            if (overallAttitude >= 45)
            {
                result = TextResolver.GetText("Delighted");
            }
            return result;
        }

        public DiplomaticRelationType ResolveDesiredDiplomaticRelationType(Empire empire, double galaxyIntoleranceLevel)
        {
            return ResolveDesiredDiplomaticRelationType(empire, galaxyIntoleranceLevel, 1.0);
        }

        public DiplomaticRelationType ResolveDesiredDiplomaticRelationType(Empire empire, double galaxyIntoleranceLevel, double diplomacyFactor)
        {
            DiplomaticRelation currentDiplomaticRelation = ObtainDiplomaticRelation(empire);
            EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(empire);
            return ResolveDesiredDiplomaticRelationType(currentDiplomaticRelation, empireEvaluation.OverallAttitude, DominantRace.IntelligenceLevel, DominantRace.FriendlinessLevel, DominantRace.LoyaltyLevel, DominantRace.AggressionLevel, WarWeariness, galaxyIntoleranceLevel, diplomacyFactor);
        }

        public EmpireEvaluation ObtainEmpireEvaluation(Empire empire)
        {
            if (empire == null)
            {
                return new EmpireEvaluation(empire, _Galaxy);
            }
            if (empire == _Galaxy.IndependentEmpire)
            {
                return new EmpireEvaluation(empire, _Galaxy);
            }
            if (empire.PirateEmpireBaseHabitat != null || PirateEmpireBaseHabitat != null)
            {
                return new EmpireEvaluation(empire, _Galaxy);
            }
            if (EmpireEvaluations != null && empire != null)
            {
                EmpireEvaluation empireEvaluation = EmpireEvaluations[empire];
                if (empireEvaluation == null)
                {
                    empireEvaluation = new EmpireEvaluation(empire, _Galaxy);
                    empireEvaluation.Bias = Galaxy.ResolveStandardRaceBias(DominantRace, empire.DominantRace);
                    if (empire.Active)
                    {
                        EmpireEvaluations.Add(empireEvaluation);
                    }
                }
                return empireEvaluation;
            }
            return new EmpireEvaluation(empire, _Galaxy);
        }

        public DiplomaticRelation ObtainDiplomaticRelation(Empire empire)
        {
            if (empire == null)
            {
                return new DiplomaticRelation(DiplomaticRelationType.None, this, this, empire, tradeRestrictedResources: true);
            }
            if (empire == _Galaxy.IndependentEmpire)
            {
                return new DiplomaticRelation(DiplomaticRelationType.None, this, this, empire, tradeRestrictedResources: true);
            }
            if (empire.PirateEmpireBaseHabitat != null || PirateEmpireBaseHabitat != null)
            {
                return new DiplomaticRelation(DiplomaticRelationType.None, this, this, empire, tradeRestrictedResources: true);
            }
            if (empire == this)
            {
                return new DiplomaticRelation(DiplomaticRelationType.None, this, this, empire, tradeRestrictedResources: true);
            }
            if (DiplomaticRelations != null)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[empire];
                if (diplomaticRelation == null)
                {
                    diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.NotMet, this, this, empire, tradeRestrictedResources: false);
                    if (empire.Active)
                    {
                        DiplomaticRelations.Add(diplomaticRelation);
                    }
                }
                return diplomaticRelation;
            }
            return new DiplomaticRelation(DiplomaticRelationType.None, this, this, empire, tradeRestrictedResources: true);
        }

        private int CalculateMinimumOrderFulfillmentThreshhold(Order order)
        {
            //int num = 0;
            int num2 = 1000;
            int amountOutstandingToContract = order.AmountOutstandingToContract;
            if (amountOutstandingToContract > num2)
            {
                return num2;
            }
            return amountOutstandingToContract;
        }

        private void AttemptToFulfillOrderAtTradingPost(BuiltObject tradingPost, double x, double y, Order order, ref int largestAmount, ref StellarObject bestTradingPost, ref int bestTradingPostCargoIndex, BuiltObjectList availableIndependentFreighters)
        {
            if (!tradingPost.IsSpacePort)
            {
                return;
            }
            int num = -1;
            if (tradingPost.NearestSystemStar != null)
            {
                num = tradingPost.NearestSystemStar.SystemIndex;
            }
            Empire empire = null;
            if (order.RequestingColony != null)
            {
                empire = order.RequestingColony.Empire;
                if (tradingPost.ParentHabitat != null && tradingPost.ParentHabitat == order.RequestingColony)
                {
                    return;
                }
            }
            else if (order.RequestingBuiltObject != null)
            {
                empire = order.RequestingBuiltObject.ActualEmpire;
                if (tradingPost == order.RequestingBuiltObject)
                {
                    return;
                }
            }
            if (empire != _Galaxy.IndependentEmpire)
            {
                if (num >= 0 && empire != null)
                {
                    if (!CheckSystemExplored(num))
                    {
                        return;
                    }
                }
                else if (empire == null || !empire.IsObjectVisibleToThisEmpire(tradingPost, includeLongRangeScanners: true, includeShipsOutsideSystems: false))
                {
                    return;
                }
            }
            int num2 = -1;
            if (tradingPost.Cargo != null)
            {
                if (order.CommodityResource != null && tradingPost.Cargo.GetExists(order.CommodityResource))
                {
                    Resource commodityResource = order.CommodityResource;
                    num2 = tradingPost.Cargo.IndexOf(commodityResource, tradingPost.Empire);
                }
                else if (order.CommodityComponent != null && tradingPost.Cargo.GetExists(order.CommodityComponent))
                {
                    Component commodityComponent = order.CommodityComponent;
                    num2 = tradingPost.Cargo.IndexOf(commodityComponent, tradingPost.Empire);
                }
            }
            if (num2 >= 0)
            {
                _ = tradingPost.Cargo[num2].Amount;
                int available = tradingPost.Cargo[num2].Available;
                int num3 = Galaxy.CalculateResourceLevel(tradingPost.Cargo[num2], tradingPost);
                available -= num3;
                if (available > largestAmount)
                {
                    largestAmount = available;
                    bestTradingPost = tradingPost;
                    bestTradingPostCargoIndex = num2;
                }
            }
        }

        private void AttemptToFulfillOrderAtTradingPost(Habitat tradingPost, double x, double y, Order order, ref int largestAmount, ref StellarObject bestTradingPost, BuiltObjectList availableIndependentFreighters)
        {
            int num = -1;
            num = tradingPost.SystemIndex;
            Empire empire = null;
            if (order.RequestingColony != null)
            {
                empire = order.RequestingColony.Empire;
                if (tradingPost == order.RequestingColony)
                {
                    return;
                }
            }
            else if (order.RequestingBuiltObject != null)
            {
                empire = order.RequestingBuiltObject.ActualEmpire;
                if (order.RequestingBuiltObject.ParentHabitat != null && tradingPost == order.RequestingBuiltObject.ParentHabitat)
                {
                    return;
                }
            }
            if (this != _Galaxy.IndependentEmpire)
            {
                if (num >= 0 && empire != null)
                {
                    if (!CheckSystemExplored(num))
                    {
                        return;
                    }
                }
                else if (empire == null || !empire.IsObjectVisibleToThisEmpire(tradingPost, includeLongRangeScanners: true, includeShipsOutsideSystems: false))
                {
                    return;
                }
            }
            int num2 = -1;
            Empire empire2 = tradingPost.Empire;
            if (empire2 == null)
            {
                empire2 = _Galaxy.IndependentEmpire;
            }
            if (order.CommodityResource != null)
            {
                Resource commodityResource = order.CommodityResource;
                if (tradingPost.Cargo != null && tradingPost.Cargo.GetExists(commodityResource))
                {
                    num2 = tradingPost.Cargo.IndexOf(commodityResource, empire2);
                }
            }
            else if (order.CommodityComponent != null)
            {
                Component commodityComponent = order.CommodityComponent;
                if (tradingPost.Cargo != null && tradingPost.Cargo.GetExists(commodityComponent))
                {
                    num2 = tradingPost.Cargo.IndexOf(commodityComponent, empire2);
                }
            }
            if (num2 < 0)
            {
                return;
            }
            _ = tradingPost.Cargo[num2].Amount;
            int available = tradingPost.Cargo[num2].Available;
            int num3 = 0;
            if (tradingPost.Empire == _Galaxy.IndependentEmpire)
            {
                if (tradingPost.Cargo[num2].CommodityIsResource)
                {
                    num3 = Galaxy.CalculateResourceLevel(tradingPost.Cargo[num2].CommodityResource, tradingPost, isMiningStation: false, isIndependent: true);
                }
            }
            else
            {
                num3 = Galaxy.CalculateResourceLevel(tradingPost.Cargo[num2], tradingPost);
            }
            available -= num3;
            if (available > largestAmount)
            {
                largestAmount = available;
                bestTradingPost = tradingPost;
            }
        }

        private int FindFreighterToFulfillOrder(Order order, int available, StellarObject tradingPost, Empire requestor, BuiltObjectList availableFreighters, int[] empireTotalFreighterCount, ref int[] empireAvailableFreighterCount, BuiltObjectList availableIndependentFreighters)
        {
            int num = Math.Min(order.AmountOutstandingToContract, available);
            Empire empire = null;
            StellarObject destination = null;
            if (order.RequestingBuiltObject != null)
            {
                empire = order.RequestingBuiltObject.ActualEmpire;
                destination = order.RequestingBuiltObject;
            }
            else if (order.RequestingColony != null)
            {
                empire = order.RequestingColony.Owner;
                destination = order.RequestingColony;
            }
            int freighterTypeIndex = 0;
            BuiltObject builtObject = FindFreighterForContract(empire, tradingPost.Empire, Galaxy.MinimumContractSize, tradingPost, destination, availableFreighters, empireTotalFreighterCount, ref empireAvailableFreighterCount, availableIndependentFreighters, ref freighterTypeIndex);
            if (num > 0 && builtObject != null)
            {
                ContractList contracts = new ContractList();
                int num2 = Math.Min(num, builtObject.CargoSpace);
                Contract contract = null;
                if (order.CommodityResource != null)
                {
                    contract = new Contract(tradingPost, num2, order.CommodityResource.ResourceID, -1, empire.EmpireId);
                }
                else if (order.CommodityComponent != null)
                {
                    contract = new Contract(tradingPost, num2, -1, order.CommodityComponent.ComponentID, empire.EmpireId);
                }
                contract.Freighter = builtObject;
                contracts.Add(contract);
                num -= num2;
                long currentStarDate = _Galaxy.CurrentStarDate;
                InitiateContract(tradingPost, order, contract, tradingPost.Empire, currentStarDate);
                CargoList cargoList = new CargoList();
                Cargo cargo = null;
                if (order.CommodityResource != null)
                {
                    cargo = new Cargo(order.CommodityResource, num2, empire);
                }
                else if (order.CommodityComponent != null)
                {
                    cargo = new Cargo(order.CommodityComponent, num2, empire);
                }
                cargoList.Add(cargo);
                FreighterFulfillOrdersForDestination(destination, tradingPost, builtObject, cargoList, currentStarDate, ref contracts, order);
                object target = null;
                if (order.RequestingBuiltObject != null)
                {
                    target = order.RequestingBuiltObject;
                }
                else if (order.RequestingColony != null)
                {
                    target = order.RequestingColony;
                }
                if (tradingPost is BuiltObject)
                {
                    builtObject.AssignMission(BuiltObjectMissionType.Transport, (BuiltObject)tradingPost, target, cargoList, BuiltObjectMissionPriority.Normal);
                }
                else if (tradingPost is Habitat)
                {
                    builtObject.AssignMission(BuiltObjectMissionType.Transport, (Habitat)tradingPost, target, cargoList, BuiltObjectMissionPriority.Normal);
                }
                switch (freighterTypeIndex)
                {
                    case 0:
                        availableFreighters.Remove(builtObject);
                        break;
                    case 1:
                        availableIndependentFreighters.Remove(builtObject);
                        break;
                }
                builtObject.ContractsToFulfill.AddRange(contracts);
                return num2;
            }
            return 0;
        }

        private bool CheckOrderIsAffordable(Order order)
        {
            bool result = true;
            double num = 0.0;
            double num2 = 0.0;
            if (order.CommodityResource != null)
            {
                Resource commodityResource = order.CommodityResource;
                num = _Galaxy.ResourceCurrentPrices[commodityResource.ResourceID];
            }
            else if (order.CommodityComponent != null)
            {
                Component commodityComponent = order.CommodityComponent;
                num = _Galaxy.ComponentCurrentPrices[commodityComponent.ComponentID];
            }
            num2 = num * (double)order.AmountOutstandingToContract;
            if (order.IsStateOrder)
            {
                if (num2 > StateMoney)
                {
                    result = false;
                }
            }
            else if (num2 > GetPrivateFunds())
            {
                result = false;
            }
            return result;
        }

        private SortableStellarObjectList GenerateValidSpaceports(Empire empire)
        {
            SortableStellarObjectList sortableStellarObjectList = new SortableStellarObjectList();
            int num = 100;
            for (int i = 0; i < empire.SpacePorts.Count; i++)
            {
                BuiltObject builtObject = empire.SpacePorts[i];
                if (builtObject != null && builtObject.IsSpacePort && !builtObject.IsBlockaded && builtObject.DockingBayWaitQueue != null && builtObject.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(builtObject))
                {
                    sortableStellarObjectList.Add(new SortableStellarObject(builtObject));
                }
            }
            return sortableStellarObjectList;
        }

        private SortableStellarObjectList GenerateValidTradingPosts(Empire empire)
        {
            SortableStellarObjectList sortableStellarObjectList = new SortableStellarObjectList();
            int num = 50;
            for (int i = 0; i < empire.SpacePorts.Count; i++)
            {
                BuiltObject builtObject = empire.SpacePorts[i];
                if (builtObject != null && builtObject.IsSpacePort && !builtObject.IsBlockaded && builtObject.DockingBayWaitQueue != null && builtObject.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(builtObject))
                {
                    sortableStellarObjectList.Add(new SortableStellarObject(builtObject));
                }
            }
            for (int j = 0; j < empire.MiningStations.Count; j++)
            {
                BuiltObject builtObject2 = empire.MiningStations[j];
                if (builtObject2 != null && builtObject2.IsResourceExtractor && builtObject2.IsSpacePort && !builtObject2.IsBlockaded && builtObject2.DockingBayWaitQueue != null && builtObject2.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(builtObject2))
                {
                    sortableStellarObjectList.Add(new SortableStellarObject(builtObject2));
                }
            }
            if (empire.PirateEmpireBaseHabitat == null)
            {
                for (int k = 0; k < empire.Colonies.Count; k++)
                {
                    Habitat habitat = empire.Colonies[k];
                    if (habitat.IsBlockaded)
                    {
                        continue;
                    }
                    bool flag = false;
                    if (habitat.BasesAtHabitat != null && habitat.BasesAtHabitat.Count > 0)
                    {
                        for (int l = 0; l < habitat.BasesAtHabitat.Count; l++)
                        {
                            if (habitat.BasesAtHabitat[l].IsSpacePort && (habitat.BasesAtHabitat[l].SubRole == BuiltObjectSubRole.SmallSpacePort || habitat.BasesAtHabitat[l].SubRole == BuiltObjectSubRole.MediumSpacePort || habitat.BasesAtHabitat[l].SubRole == BuiltObjectSubRole.LargeSpacePort))
                            {
                                flag = true;
                                break;
                            }
                        }
                    }
                    if (!flag && habitat.DockingBayWaitQueue != null && habitat.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(habitat))
                    {
                        sortableStellarObjectList.Add(new SortableStellarObject(habitat));
                    }
                }
            }
            if (empire.Policy != null && empire.Policy.TradeWithOtherEmpires)
            {
                if (empire.PirateEmpireBaseHabitat == null)
                {
                    for (int m = 0; m < _Galaxy.Empires.Count; m++)
                    {
                        Empire empire2 = _Galaxy.Empires[m];
                        if (empire2 == empire || empire2 == null || empire2.Policy == null || !empire2.Policy.TradeWithOtherEmpires)
                        {
                            continue;
                        }
                        DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(empire2);
                        if (diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions || diplomaticRelation.Type == DiplomaticRelationType.War)
                        {
                            continue;
                        }
                        for (int n = 0; n < empire2.SpacePorts.Count; n++)
                        {
                            BuiltObject builtObject3 = empire2.SpacePorts[n];
                            if (builtObject3 != null && builtObject3.IsSpacePort)
                            {
                                bool flag2 = false;
                                if (builtObject3.NearestSystemStar != null && empire.CheckSystemExplored(builtObject3.NearestSystemStar.SystemIndex))
                                {
                                    flag2 = true;
                                }
                                if (flag2 && !builtObject3.IsBlockaded && builtObject3.DockingBayWaitQueue != null && builtObject3.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(builtObject3))
                                {
                                    sortableStellarObjectList.Add(new SortableStellarObject(builtObject3));
                                }
                            }
                        }
                        for (int num2 = 0; num2 < empire2.MiningStations.Count; num2++)
                        {
                            BuiltObject builtObject4 = empire2.MiningStations[num2];
                            if (builtObject4 != null && builtObject4.IsSpacePort && builtObject4.IsResourceExtractor)
                            {
                                bool flag3 = false;
                                if (builtObject4.NearestSystemStar != null && empire.CheckSystemExplored(builtObject4.NearestSystemStar.SystemIndex))
                                {
                                    flag3 = true;
                                }
                                if (flag3 && !builtObject4.IsBlockaded && builtObject4.DockingBayWaitQueue != null && builtObject4.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(builtObject4))
                                {
                                    sortableStellarObjectList.Add(new SortableStellarObject(builtObject4));
                                }
                            }
                        }
                    }
                }
                for (int num3 = 0; num3 < empire.PirateRelations.Count; num3++)
                {
                    PirateRelation pirateRelation = empire.PirateRelations[num3];
                    if (pirateRelation == null || pirateRelation.Type != PirateRelationType.Protection)
                    {
                        continue;
                    }
                    Empire otherEmpire = pirateRelation.OtherEmpire;
                    if (otherEmpire == empire || otherEmpire == null || otherEmpire.Policy == null || !otherEmpire.Policy.TradeWithOtherEmpires)
                    {
                        continue;
                    }
                    for (int num4 = 0; num4 < otherEmpire.SpacePorts.Count; num4++)
                    {
                        BuiltObject builtObject5 = otherEmpire.SpacePorts[num4];
                        if (builtObject5 != null && builtObject5.IsSpacePort)
                        {
                            bool flag4 = false;
                            if (builtObject5.NearestSystemStar != null && empire.CheckSystemExplored(builtObject5.NearestSystemStar.SystemIndex))
                            {
                                flag4 = true;
                            }
                            if (flag4 && !builtObject5.IsBlockaded && builtObject5.DockingBayWaitQueue != null && builtObject5.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(builtObject5))
                            {
                                sortableStellarObjectList.Add(new SortableStellarObject(builtObject5));
                            }
                        }
                    }
                    for (int num5 = 0; num5 < otherEmpire.MiningStations.Count; num5++)
                    {
                        BuiltObject builtObject6 = otherEmpire.MiningStations[num5];
                        if (builtObject6 != null && builtObject6.IsSpacePort && builtObject6.IsResourceExtractor)
                        {
                            bool flag5 = false;
                            if (builtObject6.NearestSystemStar != null && empire.CheckSystemExplored(builtObject6.NearestSystemStar.SystemIndex))
                            {
                                flag5 = true;
                            }
                            if (flag5 && !builtObject6.IsBlockaded && builtObject6.DockingBayWaitQueue != null && builtObject6.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(builtObject6))
                            {
                                sortableStellarObjectList.Add(new SortableStellarObject(builtObject6));
                            }
                        }
                    }
                }
            }
            if (empire == _Galaxy.IndependentEmpire)
            {
                for (int num6 = 0; num6 < _Galaxy.IndependentColonies.Count; num6++)
                {
                    Habitat habitat2 = _Galaxy.IndependentColonies[num6];
                    if (habitat2 != null && habitat2.DockingBayWaitQueue != null && habitat2.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(habitat2))
                    {
                        sortableStellarObjectList.Add(new SortableStellarObject(habitat2));
                    }
                }
            }
            else
            {
                for (int num7 = 0; num7 < _Galaxy.Systems.Count; num7++)
                {
                    if (!empire.CheckSystemExplored(_Galaxy.Systems[num7].SystemStar.SystemIndex) || _Galaxy.Systems[num7].Habitats.Count <= 0)
                    {
                        continue;
                    }
                    for (int num8 = 0; num8 < _Galaxy.Systems[num7].Habitats.Count; num8++)
                    {
                        Habitat habitat3 = _Galaxy.Systems[num7].Habitats[num8];
                        if (habitat3 != null && habitat3.Population.Count > 0 && habitat3.Empire == _Galaxy.IndependentEmpire && habitat3.DockingBayWaitQueue != null && habitat3.DockingBayWaitQueue.Count < num && !sortableStellarObjectList.Contains(habitat3))
                        {
                            sortableStellarObjectList.Add(new SortableStellarObject(habitat3));
                        }
                    }
                }
            }
            return sortableStellarObjectList;
        }

        private SortableStellarObjectList SortTradingPostsByDistance(SortableStellarObjectList tradingPosts, double x, double y)
        {
            for (int i = 0; i < tradingPosts.Count; i++)
            {
                tradingPosts[i].SortTag = _Galaxy.CalculateDistanceSquared(x, y, tradingPosts[i].StellarObject.Xpos, tradingPosts[i].StellarObject.Ypos);
            }
            tradingPosts.Sort();
            return tradingPosts;
        }

        public BuiltObjectList DetermineAvailableFreighters(out int totalFreighters)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            totalFreighters = 0;
            for (int i = 0; i < Freighters.Count; i++)
            {
                if (Freighters[i].BuiltAt == null && !Freighters[i].HasBeenDestroyed)
                {
                    totalFreighters++;
                    if ((Freighters[i].Mission == null || Freighters[i].Mission.Type == BuiltObjectMissionType.Undefined) && !Freighters[i].RetireForNextMission && !Freighters[i].RepairForNextMission && !Freighters[i].RefuelForNextMission && !Freighters[i].RetrofitForNextMission)
                    {
                        builtObjectList.Add(Freighters[i]);
                    }
                }
            }
            return builtObjectList;
        }

        private void SendFreightersToSmugglingDestinations(HabitatList colonies, ref BuiltObjectList availableFreighters, List<byte> resourceTypesToSupply)
        {
            int freightersToSend = Math.Max(1, (int)((double)availableFreighters.Count * 0.6 / (double)colonies.Count));
            for (int i = 0; i < colonies.Count; i++)
            {
                SendFreightersToSmugglingDestination(colonies[i], ref availableFreighters, freightersToSend, resourceTypesToSupply[i]);
            }
        }

        private void SendFreightersToSmugglingDestination(Habitat colony, ref BuiltObjectList availableFreighters, int freightersToSend, byte resourceTypeToSupply)
        {
            BuiltObject builtObject = _Galaxy.FastFindNearestSpacePort(colony.Xpos, colony.Ypos, this);
            if (builtObject == null || builtObject.Cargo == null)
            {
                return;
            }
            for (int i = 0; i < freightersToSend; i++)
            {
                int highestAvailable = 0;
                Cargo cargo = null;
                if (resourceTypeToSupply == byte.MaxValue)
                {
                    cargo = builtObject.Cargo.GetHighestAvailableResource(this, builtObject, out highestAvailable);
                }
                else
                {
                    Resource resource = new Resource(resourceTypeToSupply);
                    cargo = builtObject.Cargo.GetCargoOptimized(resource, builtObject.Empire.EmpireId);
                    if (cargo != null)
                    {
                        highestAvailable = cargo.Available;
                    }
                    int num = Galaxy.CalculateResourceLevel(resource, builtObject);
                    highestAvailable -= num;
                }
                if (cargo != null && highestAvailable > 0)
                {
                    int index = 0;
                    BuiltObject nearestBuiltObjectWithinRange = availableFreighters.GetNearestBuiltObjectWithinRange(builtObject.Xpos, builtObject.Ypos, 0.1, mustBeAvailable: true, out index);
                    if (nearestBuiltObjectWithinRange != null && nearestBuiltObjectWithinRange.Role == BuiltObjectRole.Freight && cargo != null && cargo.Available > 0 && highestAvailable > 0)
                    {
                        int num2 = Math.Min(nearestBuiltObjectWithinRange.CargoCapacity, highestAvailable);
                        CargoList cargoList = new CargoList();
                        cargoList.Add(new Cargo(cargo.Resource, num2, colony.Empire));
                        Contract contract = new Contract(builtObject, num2, cargo.Resource.ResourceID, -1, colony.Empire.EmpireId);
                        contract.Freighter = nearestBuiltObjectWithinRange;
                        nearestBuiltObjectWithinRange.ContractsToFulfill.Add(contract);
                        double transactionAmount = CalculateCurrentContractValue(cargo.Resource, num2);
                        InitiateContract(builtObject, colony, colony.Owner, isState: false, cargo.Resource, null, transactionAmount, contract, this, _Galaxy.CurrentStarDate);
                        nearestBuiltObjectWithinRange.AssignMission(BuiltObjectMissionType.Transport, builtObject, colony, cargoList, BuiltObjectMissionPriority.Normal);
                        availableFreighters.Remove(nearestBuiltObjectWithinRange);
                    }
                }
            }
        }

        public void CheckMarketOrders()
        {
            SortableStellarObjectList tradingPosts = GenerateValidTradingPosts(this);
            SortableStellarObjectList tradingPosts2 = GenerateValidSpaceports(this);
            OrderList orderList = new OrderList();
            int totalFreighters = 0;
            BuiltObjectList ships = DetermineAvailableFreighters(out totalFreighters);
            ships = BaconEmpire.RemoveStateShips(this, ships);
            int totalFreighters2 = 0;
            BuiltObjectList availableIndependentFreighters = _Galaxy.IndependentEmpire.DetermineAvailableFreighters(out totalFreighters2);
            HabitatList habitatList = new HabitatList();
            List<byte> list = new List<byte>();
            EmpireActivityList empireActivityList = _PirateMissions.ResolveActivitiesByType(EmpireActivityType.Smuggle);
            if (empireActivityList.Count > 0 && ships.Count > 0)
            {
                for (int i = 0; i < empireActivityList.Count; i++)
                {
                    EmpireActivity empireActivity = empireActivityList[i];
                    if (empireActivity == null || empireActivity.Target == null || !(empireActivity.Target is Habitat) || empireActivity.RequestingEmpire == this)
                    {
                        continue;
                    }
                    Habitat habitat = (Habitat)empireActivity.Target;
                    //bool flag = false;
                    if (!((PirateEmpireBaseHabitat == null) ? _Galaxy.IsStellarObjectDockable(habitat, this) : _Galaxy.IsStellarObjectDockable(habitat, _Galaxy.IndependentEmpire)))
                    {
                        continue;
                    }
                    OrderList orders = _Galaxy.Orders.GetOrders(habitat);
                    if (empireActivity.ResourceId == byte.MaxValue)
                    {
                        if (orders == null || orders.Count <= 0)
                        {
                            habitatList.Add(habitat);
                            list.Add(byte.MaxValue);
                        }
                        else
                        {
                            orderList.AddRange(orders);
                        }
                        continue;
                    }
                    OrderList orders2 = orders.GetOrders(empireActivity.ResourceId);
                    if (habitat.Empire == _Galaxy.IndependentEmpire)
                    {
                        if (orders2 == null || orders2.Count <= 0)
                        {
                            habitatList.Add(habitat);
                            list.Add(empireActivity.ResourceId);
                        }
                        else
                        {
                            orderList.AddRange(orders2);
                        }
                    }
                    else
                    {
                        orderList.AddRange(orders2);
                    }
                }
                orderList.MergeRange(_Galaxy.Orders.GetOrders(this));
            }
            else
            {
                orderList = _Galaxy.Orders.GetOrders(this);
            }
            _EmpireOrderCount = orderList.Count;
            if (habitatList != null && habitatList.Count > 0)
            {
                SendFreightersToSmugglingDestinations(habitatList, ref ships, list);
            }
            bool useOptimizedSorting = false;
            if (CheckEmpireHasHyperDriveTech(this))
            {
                useOptimizedSorting = true;
            }
            Dictionary<int, SortableStellarObjectList> sortedTradingPosts = new Dictionary<int, SortableStellarObjectList>();
            Dictionary<int, SortableStellarObjectList> sortedTradingPosts2 = new Dictionary<int, SortableStellarObjectList>();
            int[] empireAvailableFreighterCount = new int[Galaxy.MaximumEmpireCount + 1];
            int[] array = new int[Galaxy.MaximumEmpireCount + 1];
            for (int j = 0; j < _Galaxy.Empires.Count; j++)
            {
                Empire empire = _Galaxy.Empires[j];
                if (empire != null)
                {
                    int totalFreighters3 = 0;
                    BuiltObjectList builtObjectList = empire.DetermineAvailableFreighters(out totalFreighters3);
                    empireAvailableFreighterCount[empire.EmpireId] = builtObjectList.Count;
                    array[empire.EmpireId] = totalFreighters3;
                }
            }
            double allowableRangeSquared = (double)Galaxy.SectorSize * 5.0 * ((double)Galaxy.SectorSize * 5.0);
            Design design = _Designs.FindNewest(BuiltObjectSubRole.MediumFreighter);
            if (design != null && design.WarpSpeed > 0)
            {
                allowableRangeSquared = design.MaximumRange();
                allowableRangeSquared *= allowableRangeSquared;
            }
            orderList.SplitOrdersByType(out var standardOrders, out var constructionShortageOrders, out var constructionShortageMobileOrders, out var retrofitResourcesForBaseOrders);
            FulfillOrdersAtTradingPosts(constructionShortageMobileOrders, tradingPosts, ships, allowableRangeSquared, array, ref empireAvailableFreighterCount, availableIndependentFreighters, useOptimizedSorting, ref sortedTradingPosts);
            FulfillOrdersAtTradingPosts(constructionShortageOrders, tradingPosts, ships, allowableRangeSquared, array, ref empireAvailableFreighterCount, availableIndependentFreighters, useOptimizedSorting, ref sortedTradingPosts);
            FulfillOrdersAtTradingPosts(retrofitResourcesForBaseOrders, tradingPosts2, ships, allowableRangeSquared, array, ref empireAvailableFreighterCount, availableIndependentFreighters, useOptimizedSorting, ref sortedTradingPosts2);
            FulfillOrdersAtTradingPosts(standardOrders, tradingPosts, ships, allowableRangeSquared, array, ref empireAvailableFreighterCount, availableIndependentFreighters, useOptimizedSorting, ref sortedTradingPosts);
        }

        public void FulfillOrdersAtTradingPosts(OrderList orders, SortableStellarObjectList tradingPosts, BuiltObjectList availableFreighters, double allowableRangeSquared, int[] empireTotalFreighterCount, ref int[] empireAvailableFreighterCount, BuiltObjectList availableIndependentFreighters, bool useOptimizedSorting, ref Dictionary<int, SortableStellarObjectList> sortedTradingPosts)
        {
            for (int i = 0; i < orders.Count; i++)
            {
                Order order = orders[i];
                if (order.AmountOutstandingToContract <= 0 || (this != _Galaxy.IndependentEmpire && PirateEmpireBaseHabitat == null && !CheckOrderIsAffordable(order)))
                {
                    continue;
                }
                bool requesterIsConstructionShip = false;
                if (order.RequestingBuiltObject != null)
                {
                    if (order.RequestingBuiltObject.HasBeenDestroyed)
                    {
                        continue;
                    }
                    if (order.RequestingBuiltObject.SubRole == BuiltObjectSubRole.ConstructionShip)
                    {
                        requesterIsConstructionShip = true;
                    }
                }
                if (order.RequestingBuiltObject != null)
                {
                    if (order.RequestingBuiltObject.IsBlockaded)
                    {
                        continue;
                    }
                }
                else if (order.RequestingColony != null && order.RequestingColony.IsBlockaded)
                {
                    continue;
                }
                Habitat habitat = null;
                Empire empire = null;
                StellarObject stellarObject = null;
                double x = 0.0;
                double y = 0.0;
                if (order.RequestingBuiltObject != null)
                {
                    stellarObject = order.RequestingBuiltObject;
                    empire = order.RequestingBuiltObject.ActualEmpire;
                    x = order.RequestingBuiltObject.Xpos;
                    y = order.RequestingBuiltObject.Ypos;
                    if (useOptimizedSorting)
                    {
                        habitat = order.RequestingBuiltObject.NearestSystemStar;
                    }
                }
                else if (order.RequestingColony != null)
                {
                    stellarObject = order.RequestingColony;
                    empire = order.RequestingColony.Empire;
                    x = order.RequestingColony.Xpos;
                    y = order.RequestingColony.Ypos;
                    if (useOptimizedSorting)
                    {
                        habitat = Galaxy.DetermineHabitatSystemStar(order.RequestingColony);
                    }
                }
                if (empire == null)
                {
                    _Galaxy.Orders.Remove(order);
                    continue;
                }
                SortableStellarObjectList value = tradingPosts;
                if (habitat != null)
                {
                    if (!sortedTradingPosts.TryGetValue(habitat.SystemIndex, out value))
                    {
                        value = SortTradingPostsByDistance(tradingPosts, habitat.Xpos, habitat.Ypos);
                        sortedTradingPosts.Add(habitat.SystemIndex, value);
                    }
                }
                else
                {
                    value = SortTradingPostsByDistance(tradingPosts, x, y);
                }
                Resource commodityResource = order.CommodityResource;
                bool resourceIsRestricted = false;
                bool resourceIsLuxury = false;
                if (commodityResource != null)
                {
                    resourceIsRestricted = commodityResource.IsRestrictedResource;
                    resourceIsLuxury = commodityResource.IsLuxuryResource;
                }
                for (int j = 0; j < value.Count; j++)
                {
                    if (value[j].StellarObject != stellarObject)
                    {
                        AttemptToFulfillOrderAtTradingPost(value[j].StellarObject, order, commodityResource, resourceIsRestricted, resourceIsLuxury, availableFreighters, allowableRangeSquared, empireTotalFreighterCount, ref empireAvailableFreighterCount, availableIndependentFreighters, requesterIsConstructionShip);
                        if (order.AmountOutstandingToContract <= 0)
                        {
                            break;
                        }
                    }
                }
            }
        }

        private int AttemptToFulfillOrderAtTradingPost(StellarObject tradingPost, Order order, Resource orderResource, bool resourceIsRestricted, bool resourceIsLuxury, BuiltObjectList availableFreighters, double allowableRangeSquared, int[] empireTotalFreighterCount, ref int[] empireAvailableFreighterCount, BuiltObjectList availableIndependentFreighters, bool requesterIsConstructionShip)
        {
            if (tradingPost == null || order == null)
            {
                return 0;
            }
            if (tradingPost is BuiltObject && !((BuiltObject)tradingPost).IsFunctional)
            {
                return 0;
            }
            Empire empire = null;
            double x = 0.0;
            double y = 0.0;
            Habitat requestingColony = order.RequestingColony;
            BuiltObject requestingBuiltObject = order.RequestingBuiltObject;
            if (requestingColony != null)
            {
                empire = requestingColony.Empire;
                if (tradingPost is Habitat)
                {
                    Habitat habitat = (Habitat)tradingPost;
                    x = requestingColony.Xpos;
                    y = requestingColony.Ypos;
                    if (habitat == requestingColony)
                    {
                        return 0;
                    }
                }
                else if (tradingPost is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)tradingPost;
                    x = requestingColony.Xpos;
                    y = requestingColony.Ypos;
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat == requestingColony)
                    {
                        return 0;
                    }
                }
            }
            else if (requestingBuiltObject != null)
            {
                empire = requestingBuiltObject.ActualEmpire;
                x = requestingBuiltObject.Xpos;
                y = requestingBuiltObject.Ypos;
                if (tradingPost == requestingBuiltObject)
                {
                    return 0;
                }
            }
            if (orderResource != null && resourceIsRestricted)
            {
                if (tradingPost.Empire != null && tradingPost.Empire != empire)
                {
                    if (tradingPost.Empire.PirateEmpireBaseHabitat != null || empire.PirateEmpireBaseHabitat != null)
                    {
                        return 0;
                    }
                    DiplomaticRelation diplomaticRelation = tradingPost.Empire.ObtainDiplomaticRelation(empire);
                    if (!diplomaticRelation.SupplyRestrictedResources)
                    {
                        return 0;
                    }
                }
                allowableRangeSquared = (double)Galaxy.SizeX * 1.415 * ((double)Galaxy.SizeX * 1.415);
            }
            double num = _Galaxy.CalculateDistanceSquared(tradingPost.Xpos, tradingPost.Ypos, x, y);
            if (num > allowableRangeSquared)
            {
                return 0;
            }
            Cargo cargo = null;
            int num2 = 0;
            CargoList cargo2 = tradingPost.Cargo;
            if (cargo2 != null)
            {
                if (orderResource != null && cargo2.GetExists(orderResource))
                {
                    Empire empire2 = tradingPost.Empire;
                    if (empire2 != null)
                    {
                        cargo = cargo2.GetCargoOptimized(orderResource, empire2.EmpireId);
                        if (resourceIsLuxury && tradingPost is Habitat)
                        {
                            Habitat habitat2 = (Habitat)tradingPost;
                            num2 = ((!resourceIsRestricted) ? habitat2.CalculateMinimumLuxuryResourceLevel() : habitat2.CalculateMinimumLuxuryResourceLevelRestricted());
                        }
                    }
                }
                else if (order.CommodityComponent != null && cargo2.GetExists(order.CommodityComponent))
                {
                    Component commodityComponent = order.CommodityComponent;
                    cargo = cargo2.GetCargo(commodityComponent, tradingPost.Empire);
                }
            }
            if (cargo != null)
            {
                _ = cargo.Amount;
                int available = cargo.Available;
                if (available > 0)
                {
                    int num3 = 0;
                    if ((requesterIsConstructionShip || order.Type == OrderType.ConstructionShortage || order.Type == OrderType.ConstructionShortageMobile || order.Type == OrderType.RetrofitResourcesForBase) && tradingPost.Empire == empire)
                    {
                        num3 = 0;
                    }
                    else if (tradingPost is BuiltObject)
                    {
                        num3 = Galaxy.CalculateResourceLevel(cargo, (BuiltObject)tradingPost);
                    }
                    else if (tradingPost is Habitat)
                    {
                        num3 = ((num2 <= 0) ? Galaxy.CalculateResourceLevel(cargo, (Habitat)tradingPost) : num2);
                    }
                    available -= num3;
                    if (available > 0 && available > Math.Min(order.AmountOutstandingToContract, Galaxy.MinimumContractSize))
                    {
                        return FindFreighterToFulfillOrder(order, available, tradingPost, empire, availableFreighters, empireTotalFreighterCount, ref empireAvailableFreighterCount, availableIndependentFreighters);
                    }
                }
            }
            return 0;
        }

        private double CalculateCurrentContractValue(Resource resource, int amount)
        {
            double num = 0.0;
            if (resource != null)
            {
                num = _Galaxy.ResourceCurrentPrices[resource.ResourceID];
            }
            return num * (double)amount;
        }

        private double CalculateCurrentContractValue(Order order, int amount)
        {
            double num = 0.0;
            if (order.CommodityResource != null)
            {
                Resource commodityResource = order.CommodityResource;
                num = _Galaxy.ResourceCurrentPrices[commodityResource.ResourceID];
            }
            else if (order.CommodityComponent != null)
            {
                Component commodityComponent = order.CommodityComponent;
                num = _Galaxy.ComponentCurrentPrices[commodityComponent.ComponentID];
            }
            return num * (double)amount;
        }

        private void PayForFreight(StellarObject sellingPoint, Contract contract, double requestorX, double requestorY, bool requestorIsState, Empire requestingEmpire)
        {
            _Galaxy.CalculateDistance(sellingPoint.Xpos, sellingPoint.Ypos, requestorX, requestorY);
            double num = 0.0;
            if (contract.Freighter.Owner != null)
            {
                if (requestingEmpire != null)
                {
                    if (requestorIsState)
                    {
                        requestingEmpire.StateMoney -= num;
                    }
                    else
                    {
                        requestingEmpire.PerformPrivateTransaction(0.0 - num);
                    }
                }
                contract.Freighter.Owner.StateMoney += num;
            }
            else
            {
                if (contract.Freighter.Empire == null)
                {
                    return;
                }
                if (requestingEmpire != null)
                {
                    if (requestorIsState)
                    {
                        requestingEmpire.StateMoney -= num;
                    }
                    else
                    {
                        requestingEmpire.PerformPrivateTransaction(0.0 - num);
                    }
                }
                contract.Freighter.Empire.PerformPrivateTransaction(num);
            }
        }

        private void InitiateContract(StellarObject sellingPoint, Order order, Contract contract, Empire empire, long starDate)
        {
            StellarObject destination = null;
            Empire requestingEmpire = null;
            bool isStateOrder = order.IsStateOrder;
            Resource commodityResource = order.CommodityResource;
            Component commodityComponent = order.CommodityComponent;
            if (order.RequestingBuiltObject != null)
            {
                destination = order.RequestingBuiltObject;
                requestingEmpire = order.RequestingBuiltObject.ActualEmpire;
            }
            else if (order.RequestingColony != null)
            {
                destination = order.RequestingColony;
                requestingEmpire = order.RequestingColony.Owner;
            }
            order.Contracts.Add(contract);
            double transactionAmount = CalculateCurrentContractValue(order, contract.AmountToFulfill);
            InitiateContract(sellingPoint, destination, requestingEmpire, isStateOrder, commodityResource, commodityComponent, transactionAmount, contract, empire, starDate);
        }

        private void InitiateContract(StellarObject sellingPoint, StellarObject destination, Empire requestingEmpire, bool isState, Resource resource, Component component, double transactionAmount, Contract contract, Empire empire, long starDate)
        {
            if (requestingEmpire == null)
            {
                return;
            }
            double num = 0.0;
            if (sellingPoint is BuiltObject)
            {
                num = transactionAmount * (double)((BuiltObject)sellingPoint).TradeBonuses;
            }
            if (empire.DominantRace != null)
            {
                num *= empire.DominantRace.FreeTradeIncomeFactor;
            }
            if (sellingPoint.Empire != null && sellingPoint.Empire.Leader != null)
            {
                double num2 = 1.0 + (double)sellingPoint.Empire.Leader.TradeIncome / 100.0;
                num *= num2;
            }
            if (sellingPoint.Characters != null && sellingPoint.Characters.Count > 0)
            {
                int highestSkillLevelExcludeLeaders = sellingPoint.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TradeIncome);
                double num3 = 1.0 + (double)highestSkillLevelExcludeLeaders / 100.0;
                num *= num3;
            }
            empire.StateMoney += empire.ApplyCorruptionToIncome(num);
            double num4 = empire.ApplyCorruptionToIncome(transactionAmount);
            empire.PerformPrivateTransaction(num4);
            empire.PirateEconomy.PerformIncome(num4, PirateIncomeType.Mining, starDate);
            if (requestingEmpire != null)
            {
                if (isState || requestingEmpire.PirateEmpireBaseHabitat != null)
                {
                    requestingEmpire.StateMoney -= transactionAmount;
                    requestingEmpire.PirateEconomy.PerformExpense(transactionAmount, PirateExpenseType.PurchaseResources, starDate);
                }
                else
                {
                    requestingEmpire.PerformPrivateTransaction(0.0 - transactionAmount);
                }
            }
            if (sellingPoint is BuiltObject)
            {
                ((BuiltObject)sellingPoint).PerformFinancialTransaction(transactionAmount, starDate, incomeFromTax: true);
            }
            PayForFreight(sellingPoint, contract, destination.Xpos, destination.Ypos, isState, requestingEmpire);
            Cargo cargo = null;
            Cargo cargo2 = null;
            if (sellingPoint.Cargo != null)
            {
                if (resource != null)
                {
                    cargo = sellingPoint.Cargo.GetCargo(resource, sellingPoint.Empire);
                    cargo2 = new Cargo(resource, contract.AmountToFulfill, requestingEmpire, contract.AmountToFulfill);
                }
                else if (component != null)
                {
                    cargo = sellingPoint.Cargo.GetCargo(component, sellingPoint.Empire);
                    cargo2 = new Cargo(component, contract.AmountToFulfill, requestingEmpire, contract.AmountToFulfill);
                }
                if (cargo != null)
                {
                    if (cargo.Amount > contract.AmountToFulfill)
                    {
                        cargo.Amount -= contract.AmountToFulfill;
                    }
                    else
                    {
                        sellingPoint.Cargo.Remove(cargo);
                    }
                }
                sellingPoint.Cargo.Add(cargo2);
            }
            if (requestingEmpire != _Galaxy.IndependentEmpire && sellingPoint.Empire != _Galaxy.IndependentEmpire && requestingEmpire != sellingPoint.Empire && requestingEmpire.PirateEmpireBaseHabitat == null && sellingPoint.Empire.PirateEmpireBaseHabitat == null)
            {
                DiplomaticRelation diplomaticRelation = sellingPoint.Empire.DiplomaticRelations[requestingEmpire];
                if (diplomaticRelation == null)
                {
                    diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.NotMet, sellingPoint.Empire, sellingPoint.Empire, requestingEmpire, tradeRestrictedResources: false);
                    sellingPoint.Empire.DiplomaticRelations.Add(diplomaticRelation);
                }
                diplomaticRelation.PerformTradeTransaction(transactionAmount, starDate);
                DiplomaticRelation diplomaticRelation2 = requestingEmpire.DiplomaticRelations[sellingPoint.Empire];
                if (diplomaticRelation2 == null)
                {
                    diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.NotMet, sellingPoint.Empire, requestingEmpire, sellingPoint.Empire, tradeRestrictedResources: false);
                    DiplomaticRelations.Add(diplomaticRelation2);
                }
                diplomaticRelation2.PerformTradeTransaction(transactionAmount, starDate);
            }
        }

        private void FreighterFulfillOrdersForDestination(StellarObject destination, StellarObject supplier, BuiltObject freighter, CargoList freighterMissionCargo, long starDate, ref ContractList contracts, Order orderToExclude)
        {
            OrderList orderList = null;
            if (destination is BuiltObject)
            {
                orderList = _Galaxy.Orders.GetOrders((BuiltObject)destination);
            }
            else if (destination is Habitat)
            {
                orderList = _Galaxy.Orders.GetOrders((Habitat)destination);
            }
            if (orderList == null)
            {
                return;
            }
            for (int i = 0; i < orderList.Count; i++)
            {
                Order order = orderList[i];
                if (order == orderToExclude || order.AmountOutstandingToContract <= 0)
                {
                    continue;
                }
                int num = -1;
                Cargo cargo = null;
                if (supplier.Cargo == null)
                {
                    continue;
                }
                if (order.CommodityResource != null && supplier.Cargo.GetExists(order.CommodityResource))
                {
                    Resource commodityResource = order.CommodityResource;
                    num = supplier.Cargo.IndexOf(commodityResource, supplier.Empire);
                    cargo = new Cargo(commodityResource, 0, destination.Empire, 0);
                }
                else if (order.CommodityComponent != null && supplier.Cargo.GetExists(order.CommodityComponent))
                {
                    Component commodityComponent = order.CommodityComponent;
                    num = supplier.Cargo.IndexOf(commodityComponent, supplier.Empire);
                    cargo = new Cargo(commodityComponent, 0, destination.Empire, 0);
                }
                if (num < 0)
                {
                    continue;
                }
                int num2 = freighter.CargoSpace - freighterMissionCargo.TotalUnits;
                if (num2 <= 0)
                {
                    break;
                }
                int available = supplier.Cargo[num].Available;
                int num3 = 0;
                if (supplier is Habitat)
                {
                    num3 = Galaxy.CalculateResourceLevel(supplier.Cargo[num], (Habitat)supplier);
                }
                else if (supplier is BuiltObject)
                {
                    num3 = Galaxy.CalculateResourceLevel(supplier.Cargo[num], (BuiltObject)supplier);
                }
                available = Math.Max(0, available - num3);
                int val = Math.Min(order.AmountOutstandingToContract, available);
                val = Math.Min(val, num2);
                if (val > 0)
                {
                    Contract contract = null;
                    if (order.CommodityResource != null)
                    {
                        contract = new Contract(supplier, val, order.CommodityResource.ResourceID, -1, destination.Empire.EmpireId);
                    }
                    else if (order.CommodityComponent != null)
                    {
                        contract = new Contract(supplier, val, -1, order.CommodityComponent.ComponentID, destination.Empire.EmpireId);
                    }
                    cargo.Amount = val;
                    freighterMissionCargo.Add(cargo);
                    contract.Freighter = freighter;
                    contracts.Add(contract);
                    InitiateContract(supplier, order, contract, supplier.Empire, starDate);
                }
            }
        }

        private int DetermineNumberOfAvailableFreighters(Empire empire, int minimumCargoSpaceRequired)
        {
            int num = 0;
            for (int i = 0; i < empire.Freighters.Count; i++)
            {
                BuiltObject builtObject = empire.Freighters[i];
                if ((builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined) && builtObject.BuiltAt == null && builtObject.CargoCapacity > minimumCargoSpaceRequired)
                {
                    num++;
                }
            }
            return num;
        }

        private BuiltObject FindFreighterForContract(Empire buyer, Empire seller, int minimumCargoSpaceRequired, StellarObject pickupPoint, StellarObject destination, BuiltObjectList availableFreighters, int[] empireTotalFreighterCount, ref int[] empireAvailableFreighterCount, BuiltObjectList availableIndependentFreighters, ref int freighterTypeIndex)
        {
            if (buyer != null && seller != null && pickupPoint != null && destination != null)
            {
                BuiltObject builtObject = null;
                double num = double.MaxValue;
                double rangeFactor = 0.0;
                freighterTypeIndex = 0;
                int num2 = 0;
                if (availableFreighters != null && availableFreighters.Count > 0)
                {
                    num2 = Galaxy.Rnd.Next(0, availableFreighters.Count);
                    for (int i = num2; i < availableFreighters.Count; i++)
                    {
                        BuiltObject builtObject2 = availableFreighters[i];
                        if (builtObject2 == null)
                        {
                            continue;
                        }
                        BuiltObjectMission mission = builtObject2.Mission;
                        if ((mission == null || mission.Type == BuiltObjectMissionType.Undefined) && builtObject2.BuiltAt == null && !builtObject2.HasBeenDestroyed && builtObject2.CargoCapacity > minimumCargoSpaceRequired)
                        {
                            if (builtObject2.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.0, out rangeFactor) && builtObject2.WithinFuelRange(destination.Xpos, destination.Ypos, 0.0, out rangeFactor))
                            {
                                return builtObject2;
                            }
                            if (rangeFactor < num)
                            {
                                builtObject = builtObject2;
                                num = rangeFactor;
                            }
                        }
                    }
                    for (int j = 0; j < num2; j++)
                    {
                        BuiltObject builtObject3 = availableFreighters[j];
                        if (builtObject3 == null)
                        {
                            continue;
                        }
                        BuiltObjectMission mission2 = builtObject3.Mission;
                        if ((mission2 == null || mission2.Type == BuiltObjectMissionType.Undefined) && builtObject3.BuiltAt == null && !builtObject3.HasBeenDestroyed && builtObject3.CargoCapacity > minimumCargoSpaceRequired)
                        {
                            if (builtObject3.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.0, out rangeFactor) && builtObject3.WithinFuelRange(destination.Xpos, destination.Ypos, 0.0, out rangeFactor))
                            {
                                return builtObject3;
                            }
                            if (rangeFactor < num)
                            {
                                builtObject = builtObject3;
                                num = rangeFactor;
                            }
                        }
                    }
                }
                freighterTypeIndex = 1;
                if (availableIndependentFreighters != null && availableIndependentFreighters.Count > 0)
                {
                    num2 = Galaxy.Rnd.Next(0, availableIndependentFreighters.Count);
                    for (int k = num2; k < availableIndependentFreighters.Count; k++)
                    {
                        BuiltObject builtObject4 = availableIndependentFreighters[k];
                        if (builtObject4 == null)
                        {
                            continue;
                        }
                        BuiltObjectMission mission3 = builtObject4.Mission;
                        if ((mission3 != null && mission3.Type != 0) || builtObject4.BuiltAt != null || builtObject4.HasBeenDestroyed || builtObject4.CargoCapacity <= minimumCargoSpaceRequired)
                        {
                            continue;
                        }
                        if (buyer.PirateEmpireBaseHabitat != null)
                        {
                            double num3 = _Galaxy.CalculateDistance(builtObject4.Xpos, builtObject4.Ypos, pickupPoint.Xpos, pickupPoint.Ypos);
                            if ((int)num3 <= Galaxy.IndependentTraderFreightRange && builtObject4.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.1) && builtObject4.WithinFuelRange(destination.Xpos, destination.Ypos, 0.1) && builtObject4.Role == BuiltObjectRole.Freight)
                            {
                                return builtObject4;
                            }
                        }
                        else
                        {
                            double num4 = _Galaxy.CalculateDistance(builtObject4.Xpos, builtObject4.Ypos, pickupPoint.Xpos, pickupPoint.Ypos);
                            if ((int)num4 <= Galaxy.IndependentTraderFreightRange && builtObject4.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.1) && builtObject4.WithinFuelRange(destination.Xpos, destination.Ypos, 0.1) && builtObject4.Role == BuiltObjectRole.Freight)
                            {
                                return builtObject4;
                            }
                        }
                    }
                    for (int l = 0; l < num2; l++)
                    {
                        BuiltObject builtObject5 = availableIndependentFreighters[l];
                        if (builtObject5 == null)
                        {
                            continue;
                        }
                        BuiltObjectMission mission4 = builtObject5.Mission;
                        if ((mission4 != null && mission4.Type != 0) || builtObject5.BuiltAt != null || builtObject5.HasBeenDestroyed || builtObject5.CargoCapacity <= minimumCargoSpaceRequired)
                        {
                            continue;
                        }
                        if (buyer.PirateEmpireBaseHabitat != null)
                        {
                            double num5 = _Galaxy.CalculateDistance(builtObject5.Xpos, builtObject5.Ypos, pickupPoint.Xpos, pickupPoint.Ypos);
                            if ((int)num5 <= Galaxy.IndependentTraderFreightRange && builtObject5.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.1) && builtObject5.WithinFuelRange(destination.Xpos, destination.Ypos, 0.1) && builtObject5.Role == BuiltObjectRole.Freight)
                            {
                                return builtObject5;
                            }
                        }
                        else
                        {
                            double num6 = _Galaxy.CalculateDistance(builtObject5.Xpos, builtObject5.Ypos, pickupPoint.Xpos, pickupPoint.Ypos);
                            if ((int)num6 <= Galaxy.IndependentTraderFreightRange && builtObject5.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.1) && builtObject5.WithinFuelRange(destination.Xpos, destination.Ypos, 0.1) && builtObject5.Role == BuiltObjectRole.Freight)
                            {
                                return builtObject5;
                            }
                        }
                    }
                }
                if (buyer != _Galaxy.IndependentEmpire)
                {
                    freighterTypeIndex = 2;
                    double num7 = 0.0;
                    if (seller != null)
                    {
                        BuiltObjectList freighters = seller.Freighters;
                        if (freighters != null)
                        {
                            num7 = (double)empireAvailableFreighterCount[seller.EmpireId] / Math.Max(1.0, empireTotalFreighterCount[seller.EmpireId]);
                            if (num7 > 0.5)
                            {
                                Habitat habitat = null;
                                if (destination is Habitat)
                                {
                                    habitat = Galaxy.DetermineHabitatSystemStar((Habitat)destination);
                                }
                                else if (destination is BuiltObject)
                                {
                                    habitat = ((BuiltObject)destination).NearestSystemStar;
                                }
                                if (habitat != null && seller.CheckSystemExplored(habitat))
                                {
                                    for (int m = 0; m < freighters.Count; m++)
                                    {
                                        BuiltObject builtObject6 = freighters[m];
                                        if (builtObject6 == null)
                                        {
                                            continue;
                                        }
                                        BuiltObjectMission mission5 = builtObject6.Mission;
                                        if ((mission5 != null && mission5.Type != 0) || builtObject6.BuiltAt != null || builtObject6.HasBeenDestroyed || builtObject6.CargoCapacity <= minimumCargoSpaceRequired)
                                        {
                                            continue;
                                        }
                                        if (buyer.PirateEmpireBaseHabitat != null)
                                        {
                                            if (!builtObject6.CheckPirateRelationOk(buyer))
                                            {
                                                continue;
                                            }
                                            if (builtObject6.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.0) && builtObject6.WithinFuelRange(destination.Xpos, destination.Ypos, 0.0))
                                            {
                                                empireAvailableFreighterCount[seller.EmpireId]--;
                                                return builtObject6;
                                            }
                                            if (rangeFactor < num)
                                            {
                                                if (builtObject == null)
                                                {
                                                    empireAvailableFreighterCount[seller.EmpireId]--;
                                                }
                                                builtObject = builtObject6;
                                                num = rangeFactor;
                                            }
                                            continue;
                                        }
                                        if (builtObject6.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.0) && builtObject6.WithinFuelRange(destination.Xpos, destination.Ypos, 0.0))
                                        {
                                            empireAvailableFreighterCount[seller.EmpireId]--;
                                            return builtObject6;
                                        }
                                        if (rangeFactor < num)
                                        {
                                            if (builtObject == null)
                                            {
                                                empireAvailableFreighterCount[seller.EmpireId]--;
                                            }
                                            builtObject = builtObject6;
                                            num = rangeFactor;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (builtObject != null && builtObject.WithinFuelRange(pickupPoint.Xpos, pickupPoint.Ypos, 0.0) && builtObject.WithinFuelRange(destination.Xpos, destination.Ypos, 0.0))
                {
                    return builtObject;
                }
            }
            return null;
        }

        public void CancelPirateMission(EmpireActivity mission)
        {
            if (mission != null)
            {
                PirateMissions.RemoveEquivalent(mission);
                if (mission.RequestingEmpire != null && mission.RequestingEmpire.PirateMissions != null)
                {
                    mission.RequestingEmpire.PirateMissions.RemoveEquivalent(mission);
                }
                if (mission.AssignedEmpire != null && mission.AssignedEmpire.PirateMissions != null)
                {
                    mission.AssignedEmpire.PirateMissions.RemoveEquivalent(mission);
                }
            }
        }

        public void CompletePirateMission(EmpireActivity mission)
        {
            if (mission != null && mission.RequestingEmpire != null)
            {
                mission.RequestingEmpire.ChangePirateEvaluation(this, 10f, PirateRelationEvaluationType.PirateMissionsSucceed);
                mission.RequestingEmpire.StateMoney -= mission.Price;
                StateMoney += mission.Price;
                PirateEconomy.PerformIncome(mission.Price, PirateIncomeType.Missions, _Galaxy.CurrentStarDate);
                switch (mission.Type)
                {
                    case EmpireActivityType.Attack:
                        Counters.CompletedPirateMissionAttackCount++;
                        break;
                    case EmpireActivityType.Defend:
                        Counters.CompletedPirateMissionDefendCount++;
                        break;
                }
                PirateMissions.Remove(mission);
                mission.RequestingEmpire.PirateMissions.Remove(mission);
                if (mission.AssignedEmpire != null && mission.AssignedEmpire.PirateMissions != null)
                {
                    mission.AssignedEmpire.PirateMissions.Remove(mission);
                }
                string description = string.Empty;
                EmpireMessageType messageType = EmpireMessageType.PirateAttackMissionCompleted;
                switch (mission.Type)
                {
                    case EmpireActivityType.Attack:
                        description = string.Format(TextResolver.GetText("Pirate Attack Mission Completed Pirate"), mission.RequestingEmpire.Name, mission.Target.Name, mission.Price.ToString("0"));
                        messageType = EmpireMessageType.PirateAttackMissionCompleted;
                        break;
                    case EmpireActivityType.Defend:
                        description = string.Format(TextResolver.GetText("Pirate Defend Mission Completed Pirate"), mission.RequestingEmpire.Name, mission.Target.Name, mission.Price.ToString("0"));
                        messageType = EmpireMessageType.PirateDefendMissionCompleted;
                        break;
                }
                SendMessageToEmpire(this, messageType, mission.Target, description);
                description = string.Empty;
                switch (mission.Type)
                {
                    case EmpireActivityType.Attack:
                        description = string.Format(TextResolver.GetText("Pirate Attack Mission Completed Other"), Name, mission.Target.Name, mission.Price.ToString("0"));
                        break;
                    case EmpireActivityType.Defend:
                        description = string.Format(TextResolver.GetText("Pirate Defend Mission Completed Other"), Name, mission.Target.Name, mission.Price.ToString("0"));
                        break;
                }
                mission.RequestingEmpire.SendMessageToEmpire(mission.RequestingEmpire, messageType, mission.Target, description);
            }
        }

        public double CalculateCostPerTroop(TroopType troopType, Habitat colony, BuiltObject builtObject)
        {
            double num = 0.0;
            double num2 = Galaxy.CalculateDefaultTroopMaintenanceMultiplier(troopType);
            double num3 = 1.0;
            if (Leader != null)
            {
                num3 *= 1.0 + (double)Leader.TroopMaintenance / 100.0;
            }
            num = Galaxy.TroopAnnualMaintenance * num2;
            if (GovernmentAttributes != null)
            {
                num *= GovernmentAttributes.MaintenanceCosts;
            }
            num /= num3;
            if (colony != null)
            {
                if (colony.Characters != null && colony.Characters.Count > 0)
                {
                    int highestSkillLevelExcludeLeaders = colony.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopMaintenance);
                    double num4 = 1.0 + (double)highestSkillLevelExcludeLeaders / 100.0;
                    num /= num4;
                }
            }
            else if (builtObject != null && builtObject.Characters != null && builtObject.Characters.Count > 0)
            {
                int highestSkillLevel = builtObject.Characters.GetHighestSkillLevel(CharacterSkillType.TroopMaintenance);
                double num5 = 1.0 + (double)highestSkillLevel / 100.0;
                num /= num5;
            }
            return num;
        }

        private void DisbandExcessTroops()
        {
            if (Troops == null || DominantRace == null || Colonies == null || BuiltObjects == null)
            {
                return;
            }
            double num = CalculateAccurateAnnualIncome();
            double num2 = (double)DominantRace.AggressionLevel / 100.0;
            double num3 = (double)DominantRace.CautionLevel / 100.0;
            double num4 = (num2 + num3) / 2.0 * Galaxy.SpendingTroopPercentage;
            double num5 = AnnualTroopMaintenanceIncludeRecruiting / num;
            int count = Troops.Count;
            double num6 = AnnualStateMaintenanceExcludingUnderConstruction + AnnualSubjugationTribute + AnnualTroopMaintenanceIncludeRecruiting + AnnualPirateProtection;
            double num7 = StateMoney / num6;
            double num8 = CalculateAccurateAnnualCashflow();
            if (!(num8 < 0.0) || !(num7 < Galaxy.AllowableYearsMaintenanceFromCashOnHand) || !(num5 > num4))
            {
                return;
            }
            int num9 = (int)(1.0 + (num5 - num4) * (double)count);
            if (num9 > count)
            {
                num9 = count;
            }
            int num10 = 0;
            if (num10 < num9)
            {
                StellarObjectList stellarObjectList = ResolveLocationsToDefend(includeBases: false);
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat == null || habitat.Troops == null || stellarObjectList.Contains(habitat) || habitat.Troops.Count <= 0 || habitat.Troops.TotalDefendStrengthExcludeReadiness / 100 <= (int)((double)habitat.TroopLevelRequired * 0.5) || habitat.CheckTroopFacilitiesPresent() || habitat.DefensiveFortressBonus > 0)
                    {
                        continue;
                    }
                    Troop troop = habitat.Troops[0];
                    if (troop != null)
                    {
                        if (troop.Empire != null && troop.Empire.Troops != null)
                        {
                            troop.Empire.Troops.Remove(troop);
                        }
                        troop.Colony = null;
                        troop.BuiltObject = null;
                        troop.Empire = null;
                        habitat.Troops.RemoveAt(0);
                        num10++;
                        if (num10 >= num9)
                        {
                            break;
                        }
                    }
                }
            }
            if (num10 < num9)
            {
                for (int j = 0; j < BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject = BuiltObjects[j];
                    if (builtObject == null || builtObject.Troops == null || builtObject.Troops.Count <= 0 || builtObject.SubRole == BuiltObjectSubRole.TroopTransport || !builtObject.IsAutoControlled)
                    {
                        continue;
                    }
                    bool flag = true;
                    if (builtObject.Mission != null && (builtObject.Mission.Type == BuiltObjectMissionType.Attack || builtObject.Mission.Type == BuiltObjectMissionType.WaitAndAttack) && builtObject.Mission.TargetHabitat != null)
                    {
                        flag = false;
                    }
                    if (!flag || builtObject.Troops.Count <= 0)
                    {
                        continue;
                    }
                    Troop troop2 = builtObject.Troops[0];
                    if (troop2 != null && troop2.Empire != null && troop2.Empire.Troops != null)
                    {
                        troop2.Empire.Troops.Remove(troop2);
                        troop2.BuiltObject = null;
                        troop2.Colony = null;
                        troop2.Empire = null;
                        builtObject.Troops.RemoveAt(0);
                        num10++;
                        if (num10 >= num9)
                        {
                            break;
                        }
                    }
                }
            }
            if (num10 >= num9)
            {
                return;
            }
            for (int k = 0; k < BuiltObjects.Count; k++)
            {
                BuiltObject builtObject2 = BuiltObjects[k];
                if (builtObject2 == null || builtObject2.Troops == null || builtObject2.Troops.Count <= 0 || !builtObject2.IsAutoControlled)
                {
                    continue;
                }
                Troop troop3 = builtObject2.Troops[0];
                if (troop3 != null && troop3.Empire != null && troop3.Empire.Troops != null)
                {
                    troop3.Empire.Troops.Remove(troop3);
                    troop3.BuiltObject = null;
                    troop3.Colony = null;
                    troop3.Empire = null;
                    builtObject2.Troops.RemoveAt(0);
                    num10++;
                    if (num10 >= num9)
                    {
                        break;
                    }
                }
            }
        }

        private void PayMaintenanceForBuiltObjects(double timePassed)
        {
            double num = timePassed / (double)Galaxy.RealSecondsInGalacticYear;
            double num2 = AnnualStateMaintenanceExcludingUnderConstruction * num;
            _StateMoney -= num2;
            PirateEconomy.PerformExpense(num2, PirateExpenseType.ShipMaintenance, _Galaxy.CurrentStarDate);
            if (PirateEmpireBaseHabitat == null)
            {
                double num3 = AnnualPrivateMaintenanceExcludingUnderConstruction * num;
                PerformPrivateTransaction(0.0 - num3);
            }
            BaconEmpire.PayAnnualMaintenanceCostForFreeTraders(this, timePassed);
        }

        public double GetPrivateFunds()
        {
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                return _StateMoney;
            }
            return _PrivateMoney;
        }

        public double PerformPrivateTransaction(double transactionAmount)
        {
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                _StateMoney += transactionAmount;
                return _StateMoney;
            }
            if (PirateEmpireBaseHabitat != null)
            {
                _StateMoney += transactionAmount;
                return _StateMoney;
            }
            Counters.ProcessColonyRevenue(transactionAmount);
            _PrivateMoney += transactionAmount;
            return _PrivateMoney;
        }

        private void EvaluateViabilityOfPrivateEnterprises()
        {
            for (int i = 0; i < PrivateBuiltObjects.Count; i++)
            {
                BuiltObject builtObject = PrivateBuiltObjects[i];
                if (builtObject.ConsecutiveUnprofitableYears >= 3)
                {
                    AssignScrapMission(builtObject);
                }
            }
        }

        private void EvaluateViabilityOfStateEnterprises()
        {
            int num = Math.Max(1, Colonies.Count / 10);
            int num2 = Math.Max(1, Colonies.Count / 10);
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject.ConsecutiveUnprofitableYears < 3)
                {
                    continue;
                }
                if (builtObject.IsSpacePort)
                {
                    if (SpacePorts.Count > num)
                    {
                        AssignScrapMission(builtObject);
                    }
                }
                else if (builtObject.IsShipYard)
                {
                    if (_ConstructionYards.Count > num2)
                    {
                        AssignScrapMission(builtObject);
                    }
                }
                else if (builtObject.Role != BuiltObjectRole.Military && builtObject.Role != BuiltObjectRole.Exploration && builtObject.Role != BuiltObjectRole.Colony)
                {
                    AssignScrapMission(builtObject);
                }
            }
        }

        public void IdentifyUnavailableLuxuryResources()
        {
            bool canExtract = false;
            if (Research != null && Research.EvaluateDesiredComponent(ComponentType.ExtractorLuxury, ShipDesignFocus.Balanced) != null)
            {
                canExtract = true;
            }
            if (_SelfSuppliedLuxuryResources == null)
            {
                _SelfSuppliedLuxuryResources = new ResourceList();
            }
            _SelfSuppliedLuxuryResources.Clear();
            _UnavailableLuxuryResources.Clear();
            for (int i = 0; i < _Galaxy.ResourceSystem.LuxuryResources.Count; i++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.LuxuryResources[i];
                if (resourceDefinition != null && !CheckResourceAvailable(resourceDefinition.ResourceID, canExtract))
                {
                    _UnavailableLuxuryResources.Add(new Resource(resourceDefinition.ResourceID));
                }
            }
        }

        private bool CheckResourceAvailable(byte resourceId, bool canExtract)
        {
            if (CheckResourceSelfSupplied(resourceId, canExtract))
            {
                _SelfSuppliedLuxuryResources.Add(new Resource(resourceId));
                return true;
            }
            for (int i = 0; i < _ResourceTargets.Count; i++)
            {
                HabitatPrioritization habitatPrioritization = _ResourceTargets[i];
                if (!canExtract)
                {
                    if (habitatPrioritization.Habitat.Population != null && habitatPrioritization.Habitat.Population.TotalAmount > 0)
                    {
                        int num = habitatPrioritization.Habitat.Resources.IndexOf(resourceId, 0);
                        if (num >= 0)
                        {
                            return true;
                        }
                    }
                }
                else
                {
                    int num2 = habitatPrioritization.Habitat.Resources.IndexOf(resourceId, 0);
                    if (num2 >= 0)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool CheckResourceSelfSupplied(byte resourceId, bool canExtract)
        {
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                int num = habitat.Resources.IndexOf(resourceId, 0);
                if (num >= 0)
                {
                    return true;
                }
            }
            if (canExtract)
            {
                for (int j = 0; j < MiningStations.Count; j++)
                {
                    BuiltObject builtObject = MiningStations[j];
                    if (builtObject.ParentHabitat != null)
                    {
                        int num2 = builtObject.ParentHabitat.Resources.IndexOf(resourceId, 0);
                        if (num2 >= 0)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public HabitatPrioritizationList ResolveResourceSupplyLocations()
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                int num = habitatPrioritizationList.IndexOf(habitat);
                if (num < 0)
                {
                    int priority = (int)DetermineResourceValue(habitat);
                    if (habitat.Resources != null && habitat.Resources.Count > 0)
                    {
                        HabitatPrioritization item = new HabitatPrioritization(habitat, priority);
                        habitatPrioritizationList.Add(item);
                    }
                }
            }
            for (int j = 0; j < MiningStations.Count; j++)
            {
                BuiltObject builtObject = MiningStations[j];
                if (builtObject.ParentHabitat != null)
                {
                    int num2 = habitatPrioritizationList.IndexOf(builtObject.ParentHabitat);
                    if (num2 < 0)
                    {
                        int priority2 = (int)DetermineResourceValue(builtObject.ParentHabitat);
                        HabitatPrioritization item2 = new HabitatPrioritization(builtObject.ParentHabitat, priority2);
                        habitatPrioritizationList.Add(item2);
                    }
                }
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            return habitatPrioritizationList;
        }

        public HabitatPrioritizationList IdentifyResourceCentres(Galaxy galaxy)
        {
            return IdentifyResourceCentres(galaxy, filterOutAssignedHabitats: true, filterOutDangerousTargets: true);
        }

        public HabitatPrioritizationList IdentifyResourceCentres(Galaxy galaxy, bool filterOutAssignedHabitats, bool filterOutDangerousTargets)
        {
            return IdentifyResourceCentres(galaxy, filterOutAssignedHabitats, filterOutDangerousTargets, includeAsteroids: true);
        }

        public HabitatPrioritizationList IdentifyResourceCentres(Galaxy galaxy, bool filterOutAssignedHabitats, bool filterOutDangerousTargets, bool includeAsteroids)
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            StellarObjectList stellarObjectList = new StellarObjectList();
            if (PirateEmpireBaseHabitat != null)
            {
                stellarObjectList.AddRange(SpacePorts);
            }
            else
            {
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject != null && !builtObject.HasBeenDestroyed && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
                    {
                        stellarObjectList.Add(builtObject);
                    }
                }
                for (int j = 0; j < Colonies.Count; j++)
                {
                    Habitat habitat = Colonies[j];
                    if (habitat != null && !habitat.HasBeenDestroyed && !habitat.HasSpacePort && habitat.Population != null && habitat.Population.TotalAmount >= 500000000)
                    {
                        stellarObjectList.Add(habitat);
                    }
                }
            }
            Design design = _Designs.FindNewest(BuiltObjectSubRole.MiningStation);
            int num = 0;
            if (design != null)
            {
                num = design.ExtractionLuxury;
            }
            bool flag = CheckConstructionShipAndMiningStationCanSurviveStorms();
            bool flag2 = true;
            if (Research != null && Research.ResearchedComponents != null && Research.ResearchedComponents.CountByCategory(ComponentCategoryType.HyperDrive) <= 0)
            {
                flag2 = false;
            }
            double num2 = 1.0;
            double num3 = 1.0;
            if (DominantRace != null)
            {
                num2 = (double)DominantRace.AggressionLevel / 100.0;
                num3 = (double)DominantRace.CautionLevel / 100.0;
            }
            int num4 = (int)(1000.0 / (num2 * num2 * num2 / (num3 * num3 * num3)));
            HabitatPrioritizationList habitatPrioritizationList2 = DetermineHabitatsBuildingMiningStations();
            for (int k = 0; k < SystemVisibility.Count; k++)
            {
                if (!CheckSystemExplored(k))
                {
                    continue;
                }
                SystemInfo systemInfo = null;
                if (_Galaxy.Systems.Count > k)
                {
                    systemInfo = _Galaxy.Systems[k];
                }
                if (systemInfo == null || systemInfo.SystemStar == null)
                {
                    continue;
                }
                bool flag3 = false;
                if (PirateEmpireBaseHabitat == null && systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != null && systemInfo.DominantEmpire.Empire != this)
                {
                    flag3 = true;
                }
                bool flag4 = false;
                bool flag5 = false;
                if (filterOutDangerousTargets)
                {
                    flag4 = _Galaxy.CheckInStorm(systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                    if (flag4 && flag)
                    {
                        flag4 = false;
                    }
                    flag5 = CheckNearPirateBase(systemInfo.SystemStar, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos, this);
                }
                if (flag4 || flag5)
                {
                    continue;
                }
                HabitatList habitatList = systemInfo.Habitats;
                StellarObject stellarObject = stellarObjectList.FindNearest(systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                bool flag6 = false;
                if (systemInfo.SystemStar.Category == HabitatCategoryType.GasCloud)
                {
                    habitatList = new HabitatList();
                    habitatList.Add(systemInfo.SystemStar);
                    flag6 = true;
                }
                for (int l = 0; l < habitatList.Count; l++)
                {
                    Habitat habitat2 = habitatList[l];
                    double num5 = 0.0;
                    if (habitat2 == null || habitat2.Resources == null || habitat2.Resources.Count <= 0 || !_ResourceMap.CheckResourcesKnown(habitat2) || (!includeAsteroids && habitat2.Category == HabitatCategoryType.Asteroid) || (habitat2.Owner != null && habitat2.Owner != _Galaxy.IndependentEmpire))
                    {
                        continue;
                    }
                    bool flag7 = true;
                    if (flag6)
                    {
                        if (_Galaxy.DetermineMiningStationAtHabitatForEmpire(habitat2, this) == null)
                        {
                            flag7 = false;
                        }
                    }
                    else if (_Galaxy.DetermineMiningStationAtHabitat(habitat2) == null)
                    {
                        flag7 = false;
                    }
                    if (flag7)
                    {
                        continue;
                    }
                    bool flag8 = true;
                    BuiltObject assignedShip = null;
                    int num6 = habitatPrioritizationList2.IndexOf(habitat2);
                    if (num6 >= 0)
                    {
                        if (filterOutAssignedHabitats)
                        {
                            flag8 = false;
                        }
                        else
                        {
                            assignedShip = habitatPrioritizationList2[num6].AssignedShip;
                        }
                    }
                    if (PirateEmpireBaseHabitat == null && flag8)
                    {
                        flag8 = _Galaxy.CheckEmpireTerritoryCanBuildAtHabitat(this, habitat2);
                    }
                    if (!flag8)
                    {
                        continue;
                    }
                    Habitat habitat3 = habitat2;
                    num5 = ((num <= 0) ? habitat3.CalculateCurrentStrategicResourceValue(_Galaxy) : habitat3.CalculateCurrentCompleteResourceValue(_Galaxy));
                    double x = 0.0;
                    double y = 0.0;
                    if (stellarObject != null)
                    {
                        x = stellarObject.Xpos;
                        y = stellarObject.Ypos;
                    }
                    else if (PirateEmpireBaseHabitat != null)
                    {
                        x = PirateEmpireBaseHabitat.Xpos;
                        y = PirateEmpireBaseHabitat.Ypos;
                    }
                    else if (Capital != null)
                    {
                        x = Capital.Xpos;
                        y = Capital.Ypos;
                    }
                    if (!flag2)
                    {
                        double d = galaxy.CalculateDistance(x, y, habitat3.Xpos, habitat3.Ypos);
                        double num7 = Math.Max(1.0, Math.Sqrt(d) / 10.0);
                        num5 /= num7;
                    }
                    else
                    {
                        double num8 = galaxy.CalculateDistance(x, y, habitat3.Xpos, habitat3.Ypos);
                        num8 -= (double)(Galaxy.MaxSolarSystemSize * 4);
                        num8 = Math.Max(1.0, num8);
                        double num9 = Math.Max(1.0, num8 / 10000.0);
                        num5 /= num9;
                    }
                    if (num5 > 1.0)
                    {
                        bool flag9 = true;
                        if (flag3 && filterOutDangerousTargets && num5 < (double)num4)
                        {
                            flag9 = false;
                        }
                        if (filterOutDangerousTargets && CheckWhetherHabitatIsDangerous(habitat3))
                        {
                            flag9 = false;
                        }
                        if (flag9)
                        {
                            HabitatPrioritization habitatPrioritization = new HabitatPrioritization(habitat3, (int)num5);
                            habitatPrioritization.AssignedShip = assignedShip;
                            habitatPrioritizationList.Add(habitatPrioritization);
                        }
                    }
                }
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            return habitatPrioritizationList;
        }

        private bool CheckWhetherBuildingMiningStationAtHabitat(Habitat habitat)
        {
            for (int i = 0; i < ConstructionShips.Count; i++)
            {
                BuiltObject builtObject = ConstructionShips[i];
                if (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Build && builtObject.Mission.TargetHabitat != null)
                {
                    Habitat targetHabitat = builtObject.Mission.TargetHabitat;
                    if (targetHabitat == habitat)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public HabitatList DetermineHabitatsWithBasesIncludingBuilding(List<BuiltObjectSubRole> subRoles)
        {
            HabitatList habitatList = new HabitatList();
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(BuiltObjects);
            builtObjectList.AddRange(PrivateBuiltObjects);
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject = builtObjectList[i];
                if (builtObject == null || builtObject.HasBeenDestroyed)
                {
                    continue;
                }
                switch (builtObject.SubRole)
                {
                    case BuiltObjectSubRole.ConstructionShip:
                        if (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Build && builtObject.Mission.Design != null && subRoles.Contains(builtObject.Mission.Design.SubRole) && builtObject.Mission.TargetHabitat != null)
                        {
                            habitatList.Add(builtObject.Mission.TargetHabitat);
                        }
                        break;
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                    case BuiltObjectSubRole.ResortBase:
                    case BuiltObjectSubRole.GenericBase:
                    case BuiltObjectSubRole.EnergyResearchStation:
                    case BuiltObjectSubRole.WeaponsResearchStation:
                    case BuiltObjectSubRole.HighTechResearchStation:
                    case BuiltObjectSubRole.MonitoringStation:
                    case BuiltObjectSubRole.DefensiveBase:
                        if (builtObject.ParentHabitat != null)
                        {
                            habitatList.Add(builtObject.ParentHabitat);
                        }
                        break;
                }
            }
            return habitatList;
        }

        public HabitatList DetermineHabitatsBeingMinedIncludingBuildingMiningStations(bool includeMiningShips)
        {
            HabitatList habitatList = new HabitatList();
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(BuiltObjects);
            builtObjectList.AddRange(PrivateBuiltObjects);
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject = builtObjectList[i];
                if (builtObject == null || builtObject.HasBeenDestroyed)
                {
                    continue;
                }
                switch (builtObject.SubRole)
                {
                    case BuiltObjectSubRole.ConstructionShip:
                        if (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Build && builtObject.Mission.Design != null && (builtObject.Mission.Design.SubRole == BuiltObjectSubRole.GasMiningStation || builtObject.Mission.Design.SubRole == BuiltObjectSubRole.MiningStation) && builtObject.Mission.TargetHabitat != null)
                        {
                            habitatList.Add(builtObject.Mission.TargetHabitat);
                        }
                        break;
                    case BuiltObjectSubRole.GasMiningShip:
                    case BuiltObjectSubRole.MiningShip:
                        if (includeMiningShips && builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.ExtractResources && builtObject.Mission.TargetHabitat != null)
                        {
                            habitatList.Add(builtObject.Mission.TargetHabitat);
                        }
                        break;
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                        if (builtObject.ParentHabitat != null)
                        {
                            habitatList.Add(builtObject.ParentHabitat);
                        }
                        break;
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                        if ((builtObject.ExtractionGas > 0 || builtObject.ExtractionMine > 0 || builtObject.ExtractionLuxury > 0) && builtObject.ParentHabitat != null)
                        {
                            habitatList.Add(builtObject.ParentHabitat);
                        }
                        break;
                }
            }
            return habitatList;
        }

        private HabitatList DetermineHabitatsBeingMined(HabitatList minedHabitats, BuiltObjectList builtObjects)
        {
            for (int i = 0; i < builtObjects.Count; i++)
            {
                BuiltObject builtObject = builtObjects[i];
                if (builtObject.IsResourceExtractor && builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.ExtractResources && builtObject.Mission.TargetHabitat != null)
                {
                    minedHabitats.Add(builtObject.Mission.TargetHabitat);
                }
                if ((builtObject.SubRole == BuiltObjectSubRole.GasMiningStation || builtObject.SubRole == BuiltObjectSubRole.MiningStation) && builtObject.ParentHabitat != null)
                {
                    minedHabitats.Add(builtObject.ParentHabitat);
                }
            }
            return minedHabitats;
        }

        private HabitatPrioritizationList DetermineHabitatsBuildingMiningStations()
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            for (int i = 0; i < ConstructionShips.Count; i++)
            {
                BuiltObject builtObject = ConstructionShips[i];
                if (builtObject.Mission == null || builtObject.Mission.Type != BuiltObjectMissionType.Build)
                {
                    continue;
                }
                if (builtObject.Mission.TargetHabitat != null)
                {
                    HabitatPrioritization habitatPrioritization = new HabitatPrioritization(builtObject.Mission.TargetHabitat, 0);
                    habitatPrioritization.AssignedShip = builtObject;
                    habitatPrioritizationList.Add(habitatPrioritization);
                }
                if (builtObject.SubsequentMissions == null || builtObject.SubsequentMissions.Count <= 0)
                {
                    continue;
                }
                foreach (BuiltObjectMission subsequentMission in builtObject.SubsequentMissions)
                {
                    if (subsequentMission != null && subsequentMission.Type == BuiltObjectMissionType.Build && subsequentMission.TargetHabitat != null)
                    {
                        HabitatPrioritization habitatPrioritization2 = new HabitatPrioritization(subsequentMission.TargetHabitat, 0);
                        habitatPrioritization2.AssignedShip = builtObject;
                        habitatPrioritizationList.Add(habitatPrioritization2);
                    }
                }
            }
            return habitatPrioritizationList;
        }

        private HabitatList DetermineHabitatsBeingColonized()
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject.IsColony && builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Colonize && builtObject.Mission.TargetHabitat != null)
                {
                    Habitat targetHabitat = builtObject.Mission.TargetHabitat;
                    if (!habitatList.Contains(targetHabitat))
                    {
                        habitatList.Add(targetHabitat);
                    }
                }
            }
            return habitatList;
        }

        private void MaintainColonyCriticalResourceLevels(BuiltObject spacePort, Habitat colony)
        {
            if (colony == null || colony.HasBeenDestroyed)
            {
                return;
            }
            ResourceList resourceList = colony.DetermineCriticalResources();
            if (resourceList.Count <= 0)
            {
                return;
            }
            OrderList orders = _Galaxy.Orders.GetOrders(colony);
            if (spacePort != null && spacePort.IsSpacePort)
            {
                OrderList orders2 = _Galaxy.Orders.GetOrders(spacePort);
                if (orders2.Count > 0)
                {
                    orders.AddRange(orders2);
                }
            }
            for (int i = 0; i < resourceList.Count; i++)
            {
                Resource resource = resourceList[i];
                CheckAndOrderResource(colony, orders, spacePort, resource, isCriticalResource: true);
            }
        }

        private void MaintainColonyResourceLevels(BuiltObject spacePort, Habitat colony)
        {
            OrderList orders = _Galaxy.Orders.GetOrders(colony);
            if (spacePort != null && spacePort.IsSpacePort)
            {
                OrderList orders2 = _Galaxy.Orders.GetOrders(spacePort);
                if (orders2.Count > 0)
                {
                    orders.AddRange(orders2);
                }
            }
            int num = 0;
            if (ShipGroups != null)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup != null && shipGroup.GatherPoint != null && shipGroup.GatherPoint == colony)
                    {
                        num += shipGroup.TotalFuelCapacity;
                    }
                }
            }
            Resource resource = null;
            for (int j = 0; j < _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; j++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance[j];
                if (resourceDefinition != null)
                {
                    resource = new Resource(resourceDefinition.ResourceID);
                    if (resourceDefinition.IsFuel)
                    {
                        CheckAndOrderResource(colony, orders, spacePort, resource, isCriticalResource: false, num);
                    }
                    else
                    {
                        CheckAndOrderResource(colony, orders, spacePort, resource);
                    }
                }
            }
        }

        private void MaintainPirateSpaceportResourceLevels()
        {
            if (PirateEmpireBaseHabitat == null || SpacePorts == null)
            {
                return;
            }
            for (int i = 0; i < SpacePorts.Count; i++)
            {
                BuiltObject builtObject = SpacePorts[i];
                if (builtObject == null || builtObject.HasBeenDestroyed || !builtObject.IsFunctional || !builtObject.IsSpacePort)
                {
                    continue;
                }
                OrderList orders = _Galaxy.Orders.GetOrders(builtObject);
                Resource resource = null;
                for (int j = 0; j < _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; j++)
                {
                    ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance[j];
                    if (resourceDefinition != null)
                    {
                        resource = new Resource(resourceDefinition.ResourceID);
                        CheckAndOrderResourcePirates(orders, builtObject, resource);
                    }
                }
            }
        }

        private void CheckAndOrderResourcePirates(OrderList spaceportOrders, BuiltObject pirateSpaceport, Resource resource)
        {
            int amountToOrder = 0;
            int num = Galaxy.CalculateResourceLevelPirates(resource, pirateSpaceport);
            int minimumResourceLevel = (int)((double)num * 0.6);
            if (!CheckResourceMeetsMinimumLevel(resource, minimumResourceLevel, num, pirateSpaceport, spaceportOrders, out amountToOrder))
            {
                double num2 = (double)amountToOrder * _Galaxy.ResourceCurrentPrices[resource.ResourceID];
                if (num2 < GetPrivateFunds())
                {
                    CreateOrder(pirateSpaceport, resource, amountToOrder, isState: false, OrderType.Standard);
                }
            }
        }

        private bool CheckResourceMeetsMinimumLevel(Resource resource, int minimumResourceLevel, int maximumResourceLevel, BuiltObject pirateSpaceport, OrderList spaceportOrders, out int amountToOrder)
        {
            bool result = false;
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            int num4 = -1;
            if (pirateSpaceport.Cargo != null && pirateSpaceport.Cargo.GetExists(resource))
            {
                num4 = pirateSpaceport.Cargo.IndexOf(resource, pirateSpaceport.Owner);
            }
            if (num4 >= 0)
            {
                num = pirateSpaceport.Cargo[num4].Available;
                num2 = num;
            }
            int num5;
            for (num5 = spaceportOrders.IndexOf(resource.ResourceID, 0); num5 >= 0; num5 = spaceportOrders.IndexOf(resource.ResourceID, num5))
            {
                num3 = spaceportOrders[num5].AmountRequested;
                num2 += num3;
                num5++;
            }
            amountToOrder = Math.Max(0, maximumResourceLevel - num2);
            if (amountToOrder > 0)
            {
                if (resource.IsRestrictedResource)
                {
                    amountToOrder = Math.Max(amountToOrder, Galaxy.MinimumRestrictedResourceReorderAmount);
                }
                else
                {
                    amountToOrder = Math.Max(amountToOrder, Galaxy.MinimumContractSize);
                }
            }
            if (num2 >= minimumResourceLevel)
            {
                result = true;
            }
            return result;
        }

        private void CheckAndOrderResource(Habitat colony, OrderList colonyOrders, BuiltObject colonySpacePort, Resource resource)
        {
            CheckAndOrderResource(colony, colonyOrders, colonySpacePort, resource, isCriticalResource: false);
        }

        private void CheckAndOrderResource(Habitat colony, OrderList colonyOrders, BuiltObject colonySpacePort, Resource resource, bool isCriticalResource)
        {
            CheckAndOrderResource(colony, colonyOrders, colonySpacePort, resource, isCriticalResource: false, 0);
        }

        private void CheckAndOrderResource(Habitat colony, OrderList colonyOrders, BuiltObject colonySpacePort, Resource resource, bool isCriticalResource, int fleetFuelAmount)
        {
            int amountToOrder = 0;
            int num = Galaxy.CalculateResourceLevel(resource, colony, isMiningStation: false, isIndependent: false, isCriticalResource, fleetFuelAmount);
            int minimumResourceLevel = (int)((double)num * 0.6);
            if (CheckResourceMeetsMinimumLevel(resource, minimumResourceLevel, num, colony, colonyOrders, out amountToOrder))
            {
                return;
            }
            double num2 = (double)amountToOrder * _Galaxy.ResourceCurrentPrices[resource.ResourceID];
            if (num2 < GetPrivateFunds())
            {
                if (colonySpacePort != null && colonySpacePort.IsSpacePort)
                {
                    CreateOrder(colonySpacePort, resource, amountToOrder, isState: false, OrderType.Standard);
                }
                else
                {
                    CreateOrder(colony, resource, amountToOrder, isState: false, OrderType.Standard);
                }
            }
        }

        private void CheckForStrandedShips()
        {
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject.DamagedComponentCount > 0 && builtObject.Role != BuiltObjectRole.Base && builtObject.WarpSpeed <= 0 && builtObject.BuiltAt == null && !builtObject.StrandedMessageSent)
                {
                    string arg = string.Empty;
                    if (builtObject.NearestSystemStar != null)
                    {
                        arg = builtObject.NearestSystemStar.Name;
                    }
                    string description = string.Format(TextResolver.GetText("Stranded Ship SHIPTYPE NAME SYSTEM"), Galaxy.ResolveDescription(builtObject.SubRole), builtObject.Name, arg);
                    SendMessageToEmpire(this, EmpireMessageType.ShipNeedsRepair, builtObject, description);
                    builtObject.StrandedMessageSent = true;
                }
            }
            for (int j = 0; j < PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject2 = PrivateBuiltObjects[j];
                if (builtObject2.DamagedComponentCount > 0 && builtObject2.Role != BuiltObjectRole.Base && builtObject2.WarpSpeed <= 0 && builtObject2.BuiltAt == null && !builtObject2.StrandedMessageSent)
                {
                    string arg2 = string.Empty;
                    if (builtObject2.NearestSystemStar != null)
                    {
                        arg2 = builtObject2.NearestSystemStar.Name;
                    }
                    string description2 = string.Format(TextResolver.GetText("Stranded Ship SHIPTYPE NAME SYSTEM"), Galaxy.ResolveDescription(builtObject2.SubRole), builtObject2.Name, arg2);
                    SendMessageToEmpire(this, EmpireMessageType.ShipNeedsRepair, builtObject2, description2);
                    builtObject2.StrandedMessageSent = true;
                }
            }
        }

        public void CalculateColonyTaxResistance()
        {
            long num = 20000000000L;
            long num2 = 200000000000L;
            long num3 = num2 - num;
            long totalPopulation = TotalPopulation;
            double num4 = (double)Math.Max(0L, totalPopulation - num) / (double)num3;
            if (double.IsNaN(num4))
            {
                num4 = 0.0;
            }
            num4 = Math.Min(num4, 1.0);
            _TaxResistanceThreshold = 5000000000L - (long)(num4 * 2000000000.0);
            _TaxResistanceRate = 1.05 + num4 * 0.45;
            if (double.IsNaN(_TaxResistanceRate))
            {
                _TaxResistanceRate = 1.05;
            }
        }

        public void CheckColoniesForBaseFacilities()
        {
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                habitat.CheckForSpacePortFacilities(_Galaxy);
            }
        }

        private void EvaluateColonyVariablesPirate(Galaxy galaxy, double timePassed)
        {
            long num = 0L;
            double troopStrengthNeutralizationAmount = (double)Galaxy.TroopStrengthAnnualNeutralizationAmount * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            double troopSizeRegenerationAmount = (double)Galaxy.TroopSizeAnnualRegenerationAmount * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            double troopRecruitmentAmount = (double)Galaxy.TroopAnnualRecruitmentAmount * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            Troop strongestEmpireTroop = IdentifyStrongestRaceAttackTroop();
            double totalIncome = CalculateAccurateAnnualIncome();
            double annualStateMaintenance = AnnualStateMaintenance;
            double annualFacilityMaintenance = AnnualFacilityMaintenance;
            double minimumShipSpending = MinimumShipSpending;
            ResourceList resourceList = _Galaxy.ShowCheapestLuxuryResources();
            ResourceList resourceList2 = _Galaxy.ShowAvailableRestrictedResourcesForEmpire(this);
            ResourceList resourceList3 = _Galaxy.ShowAvailableRestrictedResourcesForEmpireSelfSupplied(this);
            if (_SelfSuppliedLuxuryResources == null)
            {
                _SelfSuppliedLuxuryResources = new ResourceList();
            }
            Resource[] array = resourceList.ToArray();
            for (int num2 = array.Length - 1; num2 > 0; num2--)
            {
                if (_SelfSuppliedLuxuryResources.Contains(array[num2]))
                {
                    resourceList.RemoveAt(num2);
                    resourceList.Insert(0, array[num2]);
                }
            }
            for (int i = 0; i < array.Length; i++)
            {
                if (_UnavailableLuxuryResources.Contains(array[i]))
                {
                    resourceList.RemoveAt(i);
                    resourceList.Add(array[i]);
                }
            }
            for (int j = 0; j < Colonies.Count; j++)
            {
                Habitat habitat = Colonies[j];
                if (habitat != null && habitat.Owner == this)
                {
                    if (habitat.HasBeenDestroyed)
                    {
                        if (habitat.Explosion != null)
                        {
                            continue;
                        }
                        if (_Galaxy.Habitats.Contains(habitat))
                        {
                            if (!habitat.DoingRemove)
                            {
                                habitat.DoPlanetRemove();
                            }
                        }
                        else
                        {
                            Colonies.Remove(habitat);
                        }
                        continue;
                    }
                    double num3 = Math.Max(0.2, (15.0 + habitat.TaxApproval) / 30.0);
                    BuiltObject builtObject = null;
                    for (int k = 0; k < SpacePorts.Count; k++)
                    {
                        BuiltObject builtObject2 = SpacePorts[k];
                        if (builtObject2.ParentHabitat == habitat && builtObject2.IsSpacePort)
                        {
                            builtObject = builtObject2;
                            break;
                        }
                    }
                    bool flag = true;
                    if (_ControlColonyStockLevels)
                    {
                        MaintainColonyCriticalResourceLevels(builtObject, habitat);
                        MaintainColonyResourceLevels(builtObject, habitat);
                    }
                    habitat.RecalculateCriticalResourceSupplyBonuses();
                    int num4 = 0;
                    int num5 = 0;
                    if (habitat.Cargo != null)
                    {
                        num4 = habitat.Cargo.ResourceGroupCount(ResourceGroup.Luxury, habitat.Owner);
                        num5 = habitat.Cargo.RestrictedResourceCount(habitat.Owner);
                    }
                    Race dominantRace = habitat.Population.DominantRace;
                    if (dominantRace == null)
                    {
                        dominantRace = DominantRace;
                    }
                    galaxy.CalculateMaximumOrderFulfillmentDistance(habitat);
                    int num6 = habitat.CalculateMinimumLuxuryResourceLevel();
                    int num7 = habitat.CalculateMinimumLuxuryResourceLevelRestricted();
                    int val = (int)((double)num7 * 1.5);
                    double num8 = habitat.CalculateStrategicResourceSupplyGrowthFactor();
                    if (num8 > 0.0)
                    {
                        double num9 = timePassed / (double)Galaxy.RealSecondsInGalacticYear * (double)Galaxy.ColonyDevelopmentLevelMaximumAnnualChange;
                        num9 *= _EconomyEfficiency;
                        num9 *= num8;
                        int num10 = habitat.GetDevelopmentLevel() / 5;
                        double num11 = num4 - num10;
                        if (num5 > 0)
                        {
                            habitat.RestrictedResourcesPresent = true;
                        }
                        else
                        {
                            habitat.RestrictedResourcesPresent = false;
                        }
                        double num12 = 0.0;
                        num12 = ((num11 == 0.0) ? 0.0 : ((!(num11 < 0.0)) ? Math.Min(num9, num11) : Math.Max(num9, num11)));
                        if (_EconomyEfficiency < 0.9)
                        {
                            num12 = -1.0;
                        }
                        int developmentLevel = Math.Max(0, habitat.GetDevelopmentLevel() + (int)num12);
                        habitat.SetDevelopmentLevel(developmentLevel);
                        if ((int)num12 >= 1)
                        {
                            _Galaxy.DoCharacterEvent(CharacterEventType.ColonyDevelopmentIncrease, habitat, habitat.Characters, includeLeader: true, this);
                        }
                        else if ((int)num12 <= -1)
                        {
                            _Galaxy.DoCharacterEvent(CharacterEventType.ColonyDevelopmentDecrease, habitat, habitat.Characters, includeLeader: true, this);
                        }
                    }
                    double num13 = 1.0 + habitat.EmpireApprovalRating / 200.0;
                    if (num8 > 0.0 && flag)
                    {
                        double num14 = 1.0;
                        if (Characters != null)
                        {
                            CharacterList characterList = Characters.FindCharactersAtLocationNotTransferring(habitat, CharacterRole.ColonyGovernor);
                            int num15 = -100;
                            for (int l = 0; l < characterList.Count; l++)
                            {
                                num15 = Math.Max(num15, characterList[l].PopulationGrowth);
                            }
                            if (num15 <= -100)
                            {
                                num15 = 0;
                            }
                            num14 *= 1.0 + (double)num15 / 100.0;
                            CharacterList charactersByRole = Characters.GetCharactersByRole(CharacterRole.Leader);
                            int num16 = -100;
                            for (int m = 0; m < charactersByRole.Count; m++)
                            {
                                if (charactersByRole[m].Location != null && charactersByRole[m].Location is BuiltObject && ((BuiltObject)charactersByRole[m].Location).ParentHabitat != null && ((BuiltObject)charactersByRole[m].Location).ParentHabitat == PirateEmpireBaseHabitat)
                                {
                                    num16 = Math.Max(num16, charactersByRole[m].PopulationGrowth);
                                }
                            }
                            if (num16 <= -100)
                            {
                                num16 = 0;
                            }
                            num14 *= 1.0 + (double)num16 / 100.0;
                        }
                        for (int n = 0; n < habitat.Population.Count; n++)
                        {
                            Population population = habitat.Population[n];
                            double num17 = (double)Math.Min(5, Math.Max(1, num4)) / 5.0 * num3 * (population.Race.ReproductiveRate - 1.0) * num13 * (double)habitat.Quality;
                            float num18 = CalculateColonyGrowthRateMultiplier(population.Race, habitat);
                            num17 *= (double)num18;
                            num17 *= habitat.GrowthFactor;
                            if (GovernmentAttributes != null)
                            {
                                num17 *= GovernmentAttributes.PopulationGrowth;
                            }
                            num17 *= _EconomyEfficiency;
                            num17 *= PopulationGrowthRate;
                            num17 = Math.Min(1.0, Math.Max(num17, 0.01));
                            if (habitat.Population.TotalAmount < 500000000)
                            {
                                num17 += num17 * 0.5;
                            }
                            if (SpecialBonusPopulationGrowth > 0.0)
                            {
                                num17 *= 1.0 + SpecialBonusPopulationGrowth;
                            }
                            double bonusTotalByEffectType = habitat.ResourceBonuses.GetBonusTotalByEffectType(ColonyResourceEffect.PopulationGrowthRate);
                            double num19 = 1.0 + bonusTotalByEffectType / 100.0;
                            num17 *= num19;
                            if (habitat.Population != null && dominantRace.ColonyPopulationPolicyGrowthFactorExterminate != 1.0)
                            {
                                bool flag2 = false;
                                for (int num20 = 0; num20 < habitat.Population.Count; num20++)
                                {
                                    Population population2 = habitat.Population[num20];
                                    if (population2 != null && population2.Race != null)
                                    {
                                        if (habitat.ColonyPopulationPolicyRaceFamily == ColonyPopulationPolicy.Exterminate && population2.Race != dominantRace && population2.Race.FamilyId == dominantRace.FamilyId)
                                        {
                                            flag2 = true;
                                            break;
                                        }
                                        if (habitat.ColonyPopulationPolicy == ColonyPopulationPolicy.Exterminate && population2.Race != dominantRace && population2.Race.FamilyId != dominantRace.FamilyId)
                                        {
                                            flag2 = true;
                                            break;
                                        }
                                    }
                                }
                                if (flag2)
                                {
                                    num17 *= dominantRace.ColonyPopulationPolicyGrowthFactorExterminate;
                                }
                            }
                            num17 *= num14;
                            num17 *= num8;
                            ColonyPopulationPolicy colonyPopulationPolicy = ColonyPopulationPolicy.Assimilate;
                            if (DominantRace != null && population.Race != DominantRace)
                            {
                                colonyPopulationPolicy = habitat.ColonyPopulationPolicy;
                                if (population.Race.FamilyId == DominantRace.FamilyId)
                                {
                                    colonyPopulationPolicy = habitat.ColonyPopulationPolicyRaceFamily;
                                }
                            }
                            switch (colonyPopulationPolicy)
                            {
                                case ColonyPopulationPolicy.Resettle:
                                case ColonyPopulationPolicy.Enslave:
                                case ColonyPopulationPolicy.Exterminate:
                                    num17 = 0.0;
                                    break;
                            }
                            population.GrowthRate = 1f + (float)num17;
                            num += population.Amount;
                        }
                    }
                    else
                    {
                        foreach (Population item in habitat.Population)
                        {
                            item.GrowthRate = 1f;
                            num += item.Amount;
                        }
                    }
                    habitat.Population.RecalculateTotalAmount();
                    OrderList orders = _Galaxy.Orders.GetOrders(habitat);
                    if (builtObject != null)
                    {
                        OrderList orders2 = _Galaxy.Orders.GetOrders(builtObject);
                        if (orders2 != null)
                        {
                            orders.AddRange(orders2);
                        }
                    }
                    int num21 = 10;
                    if (habitat.Population.TotalAmount < 200000000)
                    {
                        num21 = 5;
                    }
                    int num22 = 0;
                    num22 += CheckResourcesMeetingMinimumLevel(ResourceGroup.Luxury, num6, habitat, orders);
                    int num23 = num21 - num22;
                    Resource resource = null;
                    if (_ControlColonyDevelopment)
                    {
                        for (int num24 = 0; num24 < num23; num24++)
                        {
                            resource = resourceList[num24];
                            int iterationCount = 0;
                            bool flag3 = false;
                            do
                            {
                                flag3 = false;
                                resource = resourceList[num24];
                                foreach (HabitatResource resource5 in habitat.Resources)
                                {
                                    if (resource5.ResourceID == resource.ResourceID)
                                    {
                                        flag3 = true;
                                        num24++;
                                    }
                                }
                            }
                            while (Galaxy.ConditionCheckLimit(flag3, 100, ref iterationCount));
                            int amountToOrder = 0;
                            int maximumResourceLevel = (int)((double)num6 * 1.5);
                            CheckResourceMeetsMinimumLevel(resource, num6, maximumResourceLevel, habitat, orders, out amountToOrder);
                            if (amountToOrder <= 0)
                            {
                                continue;
                            }
                            double num25 = (double)amountToOrder * _Galaxy.ResourceCurrentPrices[resource.ResourceID];
                            if (num25 < GetPrivateFunds())
                            {
                                if (builtObject != null && builtObject.IsSpacePort)
                                {
                                    CreateOrder(builtObject, resource, amountToOrder, isState: false, OrderType.Standard, allowExpiry: true);
                                }
                                else
                                {
                                    CreateOrder(habitat, resource, amountToOrder, isState: false, OrderType.Standard, allowExpiry: true);
                                }
                            }
                        }
                        if (resourceList2.Count > 0 && habitat.DevelopmentLevel >= 80)
                        {
                            int num26 = 0;
                            int maximumResourceLevel2 = num7 * 2;
                            Resource resource2 = null;
                            int num27 = 0;
                            if (resourceList3 != null && resourceList3.Count > 0)
                            {
                                for (int num28 = 0; num28 < _Galaxy.ResourceSystem.SuperLuxuryResources.Count; num28++)
                                {
                                    Resource resource3 = new Resource(_Galaxy.ResourceSystem.SuperLuxuryResources[num28].ResourceID);
                                    if (resourceList3.Contains(resource3))
                                    {
                                        int amountToOrder2 = 0;
                                        CheckResourceMeetsMinimumLevel(resource3, num7, maximumResourceLevel2, habitat, orders, out amountToOrder2);
                                        if (amountToOrder2 > num26)
                                        {
                                            num26 = amountToOrder2;
                                            resource2 = resource3;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (int num29 = 0; num29 < _Galaxy.ResourceSystem.SuperLuxuryResources.Count; num29++)
                                {
                                    Resource resource4 = new Resource(_Galaxy.ResourceSystem.SuperLuxuryResources[num29].ResourceID);
                                    if (resourceList2.Contains(resource4))
                                    {
                                        int amountToOrder3 = 0;
                                        CheckResourceMeetsMinimumLevel(resource4, num7, maximumResourceLevel2, habitat, orders, out amountToOrder3);
                                        if (amountToOrder3 > num26)
                                        {
                                            num26 = amountToOrder3;
                                            resource2 = resource4;
                                        }
                                    }
                                }
                            }
                            num27 = Math.Max(val, num26);
                            if (resource2 != null && num27 > 0)
                            {
                                double num30 = (double)num27 * _Galaxy.ResourceCurrentPrices[resource2.ResourceID];
                                if (num30 < GetPrivateFunds())
                                {
                                    if (builtObject != null && builtObject.IsSpacePort)
                                    {
                                        CreateOrder(builtObject, resource2, num27, isState: false, OrderType.Standard, allowExpiry: true);
                                    }
                                    else
                                    {
                                        CreateOrder(habitat, resource2, num27, isState: false, OrderType.Standard, allowExpiry: true);
                                    }
                                }
                            }
                        }
                    }
                    habitat.RecalculateAnnualTaxRevenue();
                    ProcessColonyTroops(habitat, strongestEmpireTroop, troopStrengthNeutralizationAmount, troopSizeRegenerationAmount, troopRecruitmentAmount, totalIncome, annualStateMaintenance, 0.0, annualFacilityMaintenance, 0.0, 0.0, minimumShipSpending, atWar: false, null, performRecruitment: true);
                }
                _TotalPopulation = num;
            }
        }

        private void EvaluateColonyVariables(Galaxy galaxy, double timePassed)
        {
            long num = 0L;
            bool atWar = CheckAtWar();
            StellarObjectList defendColonies = ResolveLocationsToDefend(includeBases: false);
            double troopStrengthNeutralizationAmount = (double)Galaxy.TroopStrengthAnnualNeutralizationAmount * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            double troopSizeRegenerationAmount = (double)Galaxy.TroopSizeAnnualRegenerationAmount * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            double troopRecruitmentAmount = (double)Galaxy.TroopAnnualRecruitmentAmount * (timePassed / (double)Galaxy.RealSecondsInGalacticYear);
            Troop strongestEmpireTroop = IdentifyStrongestRaceAttackTroop();
            double totalIncome = CalculateAccurateAnnualIncome();
            double annualStateMaintenance = AnnualStateMaintenance;
            double annualPirateProtection = AnnualPirateProtection;
            double tribute = AnnualSubjugationTribute + AnnualPirateProtection;
            double annualFacilityMaintenance = AnnualFacilityMaintenance;
            double minimumIntelligenceAgentSpending = MinimumIntelligenceAgentSpending;
            double minimumShipSpending = MinimumShipSpending;
            ResourceList resourceList = _Galaxy.ShowCheapestLuxuryResources();
            ResourceList resourceList2 = _Galaxy.ShowAvailableRestrictedResourcesForEmpire(this);
            ResourceList resourceList3 = _Galaxy.ShowAvailableRestrictedResourcesForEmpireSelfSupplied(this);
            if (_SelfSuppliedLuxuryResources == null)
            {
                _SelfSuppliedLuxuryResources = new ResourceList();
            }
            Resource[] array = resourceList.ToArray();
            for (int num2 = array.Length - 1; num2 > 0; num2--)
            {
                if (_SelfSuppliedLuxuryResources.Contains(array[num2]))
                {
                    resourceList.RemoveAt(num2);
                    resourceList.Insert(0, array[num2]);
                }
            }
            for (int i = 0; i < array.Length; i++)
            {
                if (_UnavailableLuxuryResources.Contains(array[i]))
                {
                    resourceList.RemoveAt(i);
                    resourceList.Add(array[i]);
                }
            }
            for (int j = 0; j < Colonies.Count; j++)
            {
                Habitat habitat = Colonies[j];
                if (habitat.HasBeenDestroyed)
                {
                    if (habitat.Explosion != null)
                    {
                        continue;
                    }
                    if (_Galaxy.Habitats.Contains(habitat))
                    {
                        if (!habitat.DoingRemove)
                        {
                            habitat.DoPlanetRemove();
                        }
                    }
                    else
                    {
                        Colonies.Remove(habitat);
                    }
                    continue;
                }
                double num3 = Math.Max(0.2, (15.0 + habitat.TaxApproval) / 30.0);
                BuiltObject builtObject = null;
                for (int k = 0; k < SpacePorts.Count; k++)
                {
                    BuiltObject builtObject2 = SpacePorts[k];
                    if (builtObject2.ParentHabitat == habitat && builtObject2.IsSpacePort)
                    {
                        builtObject = builtObject2;
                        break;
                    }
                }
                bool flag = true;
                if (_ControlColonyStockLevels)
                {
                    MaintainColonyCriticalResourceLevels(builtObject, habitat);
                    MaintainColonyResourceLevels(builtObject, habitat);
                }
                habitat.RecalculateCriticalResourceSupplyBonuses();
                int num4 = 0;
                int num5 = 0;
                if (habitat.Cargo != null)
                {
                    num4 = habitat.Cargo.ResourceGroupCount(ResourceGroup.Luxury, habitat.Owner);
                    num5 = habitat.Cargo.RestrictedResourceCount(habitat.Owner);
                }
                Race dominantRace = habitat.Population.DominantRace;
                if (dominantRace == null)
                {
                    dominantRace = DominantRace;
                }
                galaxy.CalculateMaximumOrderFulfillmentDistance(habitat);
                int num6 = habitat.CalculateMinimumLuxuryResourceLevel();
                int num7 = habitat.CalculateMinimumLuxuryResourceLevelRestricted();
                int val = (int)((double)num7 * 1.5);
                double num8 = habitat.CalculateStrategicResourceSupplyGrowthFactor();
                if (num8 > 0.0)
                {
                    double num9 = timePassed / (double)Galaxy.RealSecondsInGalacticYear * (double)Galaxy.ColonyDevelopmentLevelMaximumAnnualChange;
                    num9 *= _EconomyEfficiency;
                    num9 *= num8;
                    int num10 = habitat.GetDevelopmentLevel() / 5;
                    double num11 = num4 - num10;
                    if (num5 > 0)
                    {
                        habitat.RestrictedResourcesPresent = true;
                    }
                    else
                    {
                        habitat.RestrictedResourcesPresent = false;
                    }
                    double num12 = 0.0;
                    num12 = ((num11 == 0.0) ? 0.0 : ((!(num11 < 0.0)) ? Math.Min(num9, num11) : Math.Max(num9, num11)));
                    if (_EconomyEfficiency < 0.9)
                    {
                        num12 = -1.0;
                    }
                    int developmentLevel = Math.Max(0, habitat.GetDevelopmentLevel() + (int)num12);
                    habitat.SetDevelopmentLevel(developmentLevel);
                    if ((int)num12 >= 1)
                    {
                        _Galaxy.DoCharacterEvent(CharacterEventType.ColonyDevelopmentIncrease, habitat, habitat.Characters, includeLeader: true, this);
                    }
                    else if ((int)num12 <= -1)
                    {
                        _Galaxy.DoCharacterEvent(CharacterEventType.ColonyDevelopmentDecrease, habitat, habitat.Characters, includeLeader: true, this);
                    }
                }
                double num13 = 1.0 + habitat.EmpireApprovalRating / 200.0;
                if (num8 > 0.0 && flag)
                {
                    double num14 = 1.0;
                    if (Characters != null)
                    {
                        CharacterList characterList = Characters.FindCharactersAtLocationNotTransferring(habitat, CharacterRole.ColonyGovernor);
                        int num15 = -100;
                        for (int l = 0; l < characterList.Count; l++)
                        {
                            num15 = Math.Max(num15, characterList[l].PopulationGrowth);
                        }
                        if (num15 <= -100)
                        {
                            num15 = 0;
                        }
                        num14 *= 1.0 + (double)num15 / 100.0;
                        CharacterList charactersByRole = Characters.GetCharactersByRole(CharacterRole.Leader);
                        int num16 = -100;
                        for (int m = 0; m < charactersByRole.Count; m++)
                        {
                            if (charactersByRole[m].Location != null && charactersByRole[m].Location is Habitat && Capitals.Contains((Habitat)charactersByRole[m].Location))
                            {
                                num16 = Math.Max(num16, charactersByRole[m].PopulationGrowth);
                            }
                        }
                        if (num16 <= -100)
                        {
                            num16 = 0;
                        }
                        num14 *= 1.0 + (double)num16 / 100.0;
                    }
                    for (int n = 0; n < habitat.Population.Count; n++)
                    {
                        Population population = habitat.Population[n];
                        double num17 = (double)Math.Min(5, Math.Max(1, num4)) / 5.0 * num3 * (population.Race.ReproductiveRate - 1.0) * num13 * (double)habitat.Quality;
                        float num18 = CalculateColonyGrowthRateMultiplier(population.Race, habitat);
                        num17 *= (double)num18;
                        num17 *= habitat.GrowthFactor;
                        if (GovernmentAttributes != null)
                        {
                            num17 *= GovernmentAttributes.PopulationGrowth;
                        }
                        num17 *= _EconomyEfficiency;
                        num17 *= PopulationGrowthRate;
                        num17 = Math.Min(1.0, Math.Max(num17, 0.01));
                        if (habitat.Population.TotalAmount < 500000000)
                        {
                            num17 += num17 * 0.5;
                        }
                        if (SpecialBonusPopulationGrowth > 0.0)
                        {
                            num17 *= 1.0 + SpecialBonusPopulationGrowth;
                        }
                        double bonusTotalByEffectType = habitat.ResourceBonuses.GetBonusTotalByEffectType(ColonyResourceEffect.PopulationGrowthRate);
                        double num19 = 1.0 + bonusTotalByEffectType / 100.0;
                        num17 *= num19;
                        if (habitat.Population != null && dominantRace.ColonyPopulationPolicyGrowthFactorExterminate != 1.0)
                        {
                            bool flag2 = false;
                            for (int num20 = 0; num20 < habitat.Population.Count; num20++)
                            {
                                Population population2 = habitat.Population[num20];
                                if (population2 != null && population2.Race != null)
                                {
                                    if (habitat.ColonyPopulationPolicyRaceFamily == ColonyPopulationPolicy.Exterminate && population2.Race != dominantRace && population2.Race.FamilyId == dominantRace.FamilyId)
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                    if (habitat.ColonyPopulationPolicy == ColonyPopulationPolicy.Exterminate && population2.Race != dominantRace && population2.Race.FamilyId != dominantRace.FamilyId)
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                }
                            }
                            if (flag2)
                            {
                                num17 *= dominantRace.ColonyPopulationPolicyGrowthFactorExterminate;
                            }
                        }
                        num17 *= num14;
                        num17 *= num8;
                        ColonyPopulationPolicy colonyPopulationPolicy = ColonyPopulationPolicy.Assimilate;
                        if (DominantRace != null && population.Race != DominantRace)
                        {
                            colonyPopulationPolicy = habitat.ColonyPopulationPolicy;
                            if (population.Race.FamilyId == DominantRace.FamilyId)
                            {
                                colonyPopulationPolicy = habitat.ColonyPopulationPolicyRaceFamily;
                            }
                        }
                        switch (colonyPopulationPolicy)
                        {
                            case ColonyPopulationPolicy.Resettle:
                            case ColonyPopulationPolicy.Enslave:
                            case ColonyPopulationPolicy.Exterminate:
                                num17 = 0.0;
                                break;
                        }
                        population.GrowthRate = 1f + (float)num17;
                        num += population.Amount;
                    }
                }
                else
                {
                    foreach (Population item in habitat.Population)
                    {
                        item.GrowthRate = 1f;
                        num += item.Amount;
                    }
                }
                habitat.Population.RecalculateTotalAmount();
                OrderList orders = _Galaxy.Orders.GetOrders(habitat);
                if (builtObject != null)
                {
                    OrderList orders2 = _Galaxy.Orders.GetOrders(builtObject);
                    if (orders2 != null)
                    {
                        orders.AddRange(orders2);
                    }
                }
                int num21 = 10;
                if (habitat.Population.TotalAmount < 200000000)
                {
                    num21 = 5;
                }
                int num22 = 0;
                num22 += CheckResourcesMeetingMinimumLevel(ResourceGroup.Luxury, num6, habitat, orders);
                int num23 = num21 - num22;
                Resource resource = null;
                if (_ControlColonyDevelopment)
                {
                    for (int num24 = 0; num24 < num23; num24++)
                    {
                        resource = resourceList[num24];
                        int iterationCount = 0;
                        bool flag3 = false;
                        do
                        {
                            flag3 = false;
                            resource = resourceList[num24];
                            foreach (HabitatResource resource5 in habitat.Resources)
                            {
                                if (resource5.ResourceID == resource.ResourceID)
                                {
                                    flag3 = true;
                                    num24++;
                                }
                            }
                        }
                        while (Galaxy.ConditionCheckLimit(flag3, 100, ref iterationCount));
                        int amountToOrder = 0;
                        int maximumResourceLevel = (int)((double)num6 * 1.5);
                        CheckResourceMeetsMinimumLevel(resource, num6, maximumResourceLevel, habitat, orders, out amountToOrder);
                        if (amountToOrder <= 0)
                        {
                            continue;
                        }
                        double num25 = (double)amountToOrder * _Galaxy.ResourceCurrentPrices[resource.ResourceID];
                        if (num25 < GetPrivateFunds())
                        {
                            if (builtObject != null && builtObject.IsSpacePort)
                            {
                                CreateOrder(builtObject, resource, amountToOrder, isState: false, OrderType.Standard, allowExpiry: true);
                            }
                            else
                            {
                                CreateOrder(habitat, resource, amountToOrder, isState: false, OrderType.Standard, allowExpiry: true);
                            }
                        }
                    }
                    if (resourceList2.Count > 0 && habitat.DevelopmentLevel >= 80)
                    {
                        int num26 = 0;
                        int maximumResourceLevel2 = num7 * 2;
                        Resource resource2 = null;
                        int num27 = 0;
                        if (resourceList3 != null && resourceList3.Count > 0)
                        {
                            for (int num28 = 0; num28 < _Galaxy.ResourceSystem.SuperLuxuryResources.Count; num28++)
                            {
                                Resource resource3 = new Resource(_Galaxy.ResourceSystem.SuperLuxuryResources[num28].ResourceID);
                                if (resourceList3.Contains(resource3))
                                {
                                    int amountToOrder2 = 0;
                                    CheckResourceMeetsMinimumLevel(resource3, num7, maximumResourceLevel2, habitat, orders, out amountToOrder2);
                                    if (amountToOrder2 > num26)
                                    {
                                        num26 = amountToOrder2;
                                        resource2 = resource3;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int num29 = 0; num29 < _Galaxy.ResourceSystem.SuperLuxuryResources.Count; num29++)
                            {
                                Resource resource4 = new Resource(_Galaxy.ResourceSystem.SuperLuxuryResources[num29].ResourceID);
                                if (resourceList2.Contains(resource4))
                                {
                                    int amountToOrder3 = 0;
                                    CheckResourceMeetsMinimumLevel(resource4, num7, maximumResourceLevel2, habitat, orders, out amountToOrder3);
                                    if (amountToOrder3 > num26)
                                    {
                                        num26 = amountToOrder3;
                                        resource2 = resource4;
                                    }
                                }
                            }
                        }
                        num27 = Math.Max(val, num26);
                        if (resource2 != null && num27 > 0)
                        {
                            double num30 = (double)num27 * _Galaxy.ResourceCurrentPrices[resource2.ResourceID];
                            if (num30 < GetPrivateFunds())
                            {
                                if (builtObject != null && builtObject.IsSpacePort)
                                {
                                    CreateOrder(builtObject, resource2, num27, isState: false, OrderType.Standard, allowExpiry: true);
                                }
                                else
                                {
                                    CreateOrder(habitat, resource2, num27, isState: false, OrderType.Standard, allowExpiry: true);
                                }
                            }
                        }
                    }
                }
                habitat.RecalculateAnnualTaxRevenue();
                ProcessColonyTroops(habitat, strongestEmpireTroop, troopStrengthNeutralizationAmount, troopSizeRegenerationAmount, troopRecruitmentAmount, totalIncome, annualStateMaintenance, tribute, annualFacilityMaintenance, annualPirateProtection, minimumIntelligenceAgentSpending, minimumShipSpending, atWar, defendColonies, performRecruitment: true);
            }
            _TotalPopulation = num;
        }

        public float CalculateColonyGrowthRateMultiplier(Race race, Habitat colony)
        {
            float result = 1f;
            switch (colony.Type)
            {
                case HabitatType.Continental:
                    result = ColonyGrowthRateContinental;
                    break;
                case HabitatType.MarshySwamp:
                    result = ColonyGrowthRateMarshySwamp;
                    break;
                case HabitatType.Desert:
                    result = ColonyGrowthRateDesert;
                    break;
                case HabitatType.Ocean:
                    result = ColonyGrowthRateOcean;
                    break;
                case HabitatType.Ice:
                    result = ColonyGrowthRateIce;
                    break;
                case HabitatType.Volcanic:
                    result = ColonyGrowthRateVolcanic;
                    break;
            }
            if (race.NativeHabitatType == colony.Type)
            {
                result = 1f;
            }
            return result;
        }

        public HabitatList IdentifyEmpireCapitals()
        {
            HabitatList habitatList = new HabitatList();
            if (Capital != null && !Capital.HasBeenDestroyed)
            {
                habitatList.Add(Capital);
            }
            HabitatList habitatList2 = IdentifyEmpireRegionalCapitals();
            if (habitatList2 != null && habitatList2.Count > 0)
            {
                habitatList.AddRange(habitatList2);
            }
            return habitatList;
        }

        public HabitatList IdentifyEmpireRegionalCapitals()
        {
            return IdentifyEmpireRegionalCapitals(includeUnderConstruction: false);
        }

        public HabitatList IdentifyEmpireRegionalCapitals(bool includeUnderConstruction)
        {
            HabitatList habitatList = new HabitatList();
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    if (Colonies[i] == Capital || Colonies[i].HasBeenDestroyed || Colonies[i].Facilities == null || Colonies[i].Facilities.Count <= 0)
                    {
                        continue;
                    }
                    for (int j = 0; j < Colonies[i].Facilities.Count; j++)
                    {
                        if (Colonies[i].Facilities[j].Type == PlanetaryFacilityType.RegionalCapital && (includeUnderConstruction || Colonies[i].Facilities[j].ConstructionProgress >= 1f))
                        {
                            habitatList.Add(Colonies[i]);
                            break;
                        }
                    }
                }
            }
            return habitatList;
        }

        public void RecalculateColonyDistancesFromCapital()
        {
            HabitatList empireCapitals = IdentifyEmpireCapitals();
            if (Colonies != null && Colonies.Count > 0)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Colonies[i].RecalculateDistanceFactor(empireCapitals);
                }
            }
        }

        public double ApplyCorruptionToIncome(double incomeAmount)
        {
            if (PirateEmpireBaseHabitat != null)
            {
                double num = incomeAmount * Corruption;
                return incomeAmount - num;
            }
            return incomeAmount;
        }

        public void PirateRecalculateEmpireCorruption()
        {
            BaconEmpire.PirateRecalculateEmpireCorruption(this);
        }

        public void RecalculateEmpireCorruption()
        {
            double num = 0.0;
            long totalPopulation = TotalPopulation;
            long num2 = 10000000000L;
            if (PirateEmpireBaseHabitat != null)
            {
                num2 = 0L;
            }
            if (totalPopulation > num2)
            {
                long num3 = 300000000000L;
                double num4 = 0.5;
                if (PirateEmpireBaseHabitat != null)
                {
                    num4 = 0.65;
                }
                long num5 = totalPopulation - num2;
                long num6 = num3 - num2;
                double val = (double)num5 / (double)num6;
                val = Math.Max(0.0, Math.Min(1.0, val));
                double val2 = num4 * val;
                val2 = Math.Min(num4, Math.Max(0.0, val2));
                double num7 = (double)num2 * 1.0 + (double)num5 * (1.0 - val2);
                num = num7 / (double)totalPopulation;
                num = 1.0 - num;
                num *= ColonyCorruptionFactor;
                num = Math.Min(1.0, Math.Max(0.0, num));
            }
            if (_EconomyEfficiency < 1.0)
            {
                num += 1.0 - _EconomyEfficiency;
                num = Math.Min(1.0, Math.Max(0.0, num));
            }
            Corruption = num;
        }

        public void RecalculateEmpirePopulation()
        {
            long num = 0L;
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat.Population != null)
                {
                    habitat.Population.RecalculateTotalAmount();
                }
                num += habitat.Population.TotalAmount;
            }
            _TotalPopulation = num;
        }

        public void ProcessColonyTroops(Habitat colony, Troop strongestEmpireTroop, double troopStrengthNeutralizationAmount, double troopSizeRegenerationAmount, double troopRecruitmentAmount)
        {
            double totalIncome = CalculateAccurateAnnualIncome();
            ProcessColonyTroops(colony, strongestEmpireTroop, troopStrengthNeutralizationAmount, troopSizeRegenerationAmount, troopRecruitmentAmount, totalIncome, AnnualStateMaintenance, AnnualSubjugationTribute + AnnualPirateProtection, AnnualFacilityMaintenance, AnnualPirateProtection, MinimumIntelligenceAgentSpending, MinimumShipSpending, atWar: false, new StellarObjectList(), performRecruitment: true);
        }

        public void ProcessColonyTroops(Habitat colony, Troop strongestEmpireTroop, double troopStrengthNeutralizationAmount, double troopSizeRegenerationAmount, double troopRecruitmentAmount, double totalIncome, double shipMaintenance, double tribute, double facilityMaintenance, double pirateProtection, double minAgentSpending, double minShipSpending, bool atWar, StellarObjectList defendColonies, bool performRecruitment)
        {
            troopRecruitmentAmount *= BaconEmpire.MultiplyTroopRecruitment(this);
            if (colony == null || colony.Troops == null || colony.TroopsToRecruit == null || colony.Population == null)
            {
                return;
            }
            Race race = null;
            if (colony.Population != null)
            {
                race = colony.Population.DominantRace;
            }
            if (race == null)
            {
                race = DominantRace;
            }
            int num = 100;
            if (race != null)
            {
                num = race.TroopStrength;
            }
            if (colony.Ruin != null)
            {
                num = (int)((double)num * (1.0 + colony.Ruin.BonusDefensive));
            }
            double num2 = 1.0 + Math.Max(-0.9, colony.EmpireApprovalRating / 50.0);
            double d = 1.0;
            if (colony.Population != null)
            {
                d = (double)Math.Min(colony.Population.TotalAmount, 2000000000L) / 1000000.0;
            }
            d = Math.Sqrt(d);
            d /= 20.0;
            num2 *= d;
            if (colony.Ruin != null)
            {
                num2 *= 1.0 + colony.Ruin.BonusDefensive;
            }
            troopRecruitmentAmount *= num2;
            troopSizeRegenerationAmount *= num2;
            if (race != null)
            {
                troopSizeRegenerationAmount *= race.TroopRegenerationFactor;
            }
            if (colony.RaceEventType == RaceEventType.WarriorWaveTroopRecruitment)
            {
                troopSizeRegenerationAmount *= 1.2;
            }
            if (GovernmentAttributes != null)
            {
                troopRecruitmentAmount *= GovernmentAttributes.TroopRecruitment;
                troopSizeRegenerationAmount *= GovernmentAttributes.TroopRecruitment;
            }
            if (Leader != null)
            {
                troopRecruitmentAmount *= 1.0 + (double)Leader.TroopRecruitmentRate / 100.0;
                troopSizeRegenerationAmount *= 1.0 + (double)Leader.TroopRecoveryRate / 100.0;
            }
            if (colony.Characters != null && colony.Characters.Count > 0)
            {
                int highestSkillLevelExcludeLeaders = colony.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopRecruitment);
                int highestSkillLevelExcludeLeaders2 = colony.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopRecoveryRate);
                troopRecruitmentAmount *= 1.0 + (double)highestSkillLevelExcludeLeaders / 100.0;
                troopSizeRegenerationAmount *= 1.0 + (double)highestSkillLevelExcludeLeaders2 / 100.0;
            }
            if (colony.InvadingTroops != null && colony.InvadingTroops.Count > 0)
            {
                troopSizeRegenerationAmount *= 0.5;
            }
            int num3 = 0;
            int num4 = 0;
            if (colony.TroopsToRecruit.Count > 0)
            {
                int iterationCount = 0;
                while (Galaxy.ConditionCheckLimit(troopRecruitmentAmount > 0.0 && colony.TroopsToRecruit.Count > 0, 100, ref iterationCount))
                {
                    Troop troop = colony.TroopsToRecruit[0];
                    if (troop == null)
                    {
                        continue;
                    }
                    float num5 = (float)troopRecruitmentAmount;
                    if (troop.Type == TroopType.Infantry && troop.MaintenanceMultiplier == 0.25f && troop.PictureRef == _Galaxy.Races.Count)
                    {
                        num5 *= 2f;
                    }
                    troop.Readiness += num5;
                    troopRecruitmentAmount = 0.0;
                    if (troop.Readiness >= 100f)
                    {
                        troopRecruitmentAmount = troop.Readiness - 100f;
                        troop.Readiness = 100f;
                        troop.Colony = colony;
                        colony.ResolveInvasionEmpires(out var _, out var invader);
                        if (invader == this && colony.InvadingTroops != null)
                        {
                            colony.InvadingTroops.Add(troop);
                        }
                        else
                        {
                            colony.Troops.Add(troop);
                        }
                        if (_Troops != null && !_Troops.Contains(troop))
                        {
                            _Troops.Add(troop);
                        }
                        colony.TroopsToRecruit.Remove(troop);
                        _Galaxy.DoCharacterEvent(CharacterEventType.TroopComplete, troop, colony.Characters, includeLeader: true, colony.Empire);
                        _Galaxy.ChanceNewTroopGeneralFromRecruitment(troop, this, colony);
                    }
                }
            }
            for (int i = 0; i < colony.Troops.Count; i++)
            {
                Troop troop2 = colony.Troops[i];
                if (troop2 != null)
                {
                    troop2.Readiness += (float)troopSizeRegenerationAmount;
                    if (troop2.Readiness > 100f)
                    {
                        troop2.Readiness = 100f;
                    }
                    if (troop2.AttackStrength > 900)
                    {
                        troop2.SetAttackStrength(900);
                    }
                    num3 += (int)((double)troop2.DefendStrength * ((double)troop2.Readiness / 100.0));
                    num4 += troop2.DefendStrength;
                }
            }
            if (!performRecruitment)
            {
                return;
            }
            for (int j = 0; j < colony.TroopsToRecruit.Count; j++)
            {
                Troop troop3 = colony.TroopsToRecruit[j];
                if (troop3 != null)
                {
                    num3 += troop3.DefendStrength;
                    num4 += troop3.DefendStrength;
                }
            }
            int num6 = colony.TroopLevelRequired;
            if (colony.CheckTroopFacilitiesPresent())
            {
                num6 = (int)((double)num6 * 1.25);
                num6 = Math.Max(num6, 400);
            }
            else if (colony.DefensiveFortressBonus > 0)
            {
                num6 = (int)((double)num6 * 1.25);
                num6 = Math.Max(num6, 300);
            }
            if (defendColonies != null && defendColonies.Contains(colony))
            {
                num6 = (int)((double)num6 * 1.5);
                num6 = Math.Max(num6, 300);
            }
            if (Policy != null)
            {
                if (Policy.ColonyPopulationThresholdTroopRecruitment > 0 && colony.Population != null && colony.Population.TotalAmount < (long)Policy.ColonyPopulationThresholdTroopRecruitment * 1000000L)
                {
                    num6 = 0;
                }
                num6 = Math.Max(num6, Policy.TroopGarrisonMinimumPerColony * 100);
            }
            if (num6 > 0 && num6 < 200 && colony.Empire != null)
            {
                bool flag = true;
                SystemInfo systemInfo = null;
                if (_Galaxy.Systems.Count > colony.SystemIndex)
                {
                    systemInfo = _Galaxy.Systems[colony.SystemIndex];
                }
                if (atWar)
                {
                    flag = false;
                }
                else if ((systemInfo != null && systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != colony.Empire) || (systemInfo != null && systemInfo.OtherEmpires != null && systemInfo.OtherEmpires.Count > 0) || (systemInfo != null && systemInfo.IndependentColonyCount > 0))
                {
                    flag = false;
                }
                else if (colony.AnnualTaxRevenue > Galaxy.TroopAnnualMaintenance)
                {
                    flag = false;
                }
                else if (colony.BasesAtHabitat != null && colony.BasesAtHabitat.Count > 0)
                {
                    for (int k = 0; k < colony.BasesAtHabitat.Count; k++)
                    {
                        BuiltObject builtObject = colony.BasesAtHabitat[k];
                        if (builtObject != null && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
                        {
                            flag = false;
                        }
                    }
                }
                if (flag && Policy != null && Policy.TroopGarrisonMinimumPerColony <= 0)
                {
                    num6 = 0;
                }
            }
            if (!_ControlTroopGeneration)
            {
                return;
            }
            if (num3 < num6)
            {
                double num7 = AnnualTroopMaintenanceIncludeRecruiting + Galaxy.TroopAnnualMaintenance;
                num7 += shipMaintenance + tribute + facilityMaintenance + pirateProtection;
                double num8 = StateMoney / num7;
                double num9 = Math.Max(shipMaintenance, minShipSpending);
                double num10 = totalIncome - (num9 + tribute + facilityMaintenance + pirateProtection);
                double num11 = num10 - AnnualTroopMaintenanceIncludeRecruiting;
                bool flag2 = false;
                if (totalIncome > num7)
                {
                    flag2 = true;
                }
                else if (num8 >= Galaxy.AllowableYearsMaintenanceFromCashOnHand)
                {
                    flag2 = true;
                }
                else if (num8 < Galaxy.AllowableYearsMaintenanceFromCashOnHand && num11 >= Galaxy.TroopAnnualMaintenance)
                {
                    flag2 = true;
                }
                if (num11 < Galaxy.TroopAnnualMaintenance)
                {
                    int num12 = colony.Troops.TotalDefendStrengthExcludeReadiness / 100;
                    num12 += colony.TroopsToRecruit.TotalDefendStrengthExcludeReadiness / 100;
                    if (num12 >= colony.TroopLevelMinimum)
                    {
                        flag2 = false;
                    }
                }
                if (flag2 && TroopCanRecruitInfantry)
                {
                    Troop item = colony.GenerateNewTroop(strongestEmpireTroop, recruitDefaultTroops: false);
                    colony.TroopsToRecruit.Add(item);
                    if (Troops != null && !Troops.Contains(item))
                    {
                        Troops.Add(item);
                    }
                }
            }
            if (TroopCanRecruitArtillery)
            {
                int num13 = colony.Troops.CountByType(TroopType.Artillery);
                num13 += colony.TroopsToRecruit.CountByType(TroopType.Artillery);
                int num14 = (int)((double)num6 / 800.0 * Policy.TroopRecruitArtilleryLevel);
                if (num13 < num14)
                {
                    double num15 = CalculateCostPerTroop(TroopType.Artillery, colony, null);
                    double num16 = AnnualTroopMaintenanceIncludeRecruiting + num15;
                    num16 += shipMaintenance + tribute + facilityMaintenance;
                    double num17 = StateMoney / num16;
                    bool flag3 = false;
                    if (totalIncome > num16)
                    {
                        flag3 = true;
                    }
                    else if (num17 >= Galaxy.AllowableYearsMaintenanceFromCashOnHand)
                    {
                        flag3 = true;
                    }
                    else if (num17 < Galaxy.AllowableYearsMaintenanceFromCashOnHand)
                    {
                        double num18 = Math.Max(shipMaintenance, minShipSpending);
                        double num19 = totalIncome - (num18 + tribute + facilityMaintenance);
                        double num20 = num19 - AnnualTroopMaintenanceIncludeRecruiting;
                        if (num20 >= num15)
                        {
                            flag3 = true;
                        }
                    }
                    if (flag3)
                    {
                        Troop item2 = colony.GenerateNewTroop(TroopType.Artillery, strongestEmpireTroop, recruitDefaultTroops: false);
                        colony.TroopsToRecruit.Add(item2);
                        if (Troops != null && !Troops.Contains(item2))
                        {
                            Troops.Add(item2);
                        }
                    }
                }
            }
            ReviewColonyTroopGarrison(colony, num6, num4);
        }

        public void ReviewColonyTroopGarrison(Habitat colony)
        {
            int num = colony.TroopLevelRequired;
            int num2 = 0;
            num2 += colony.Troops.TotalDefendStrengthExcludeReadiness;
            num2 += colony.TroopsToRecruit.TotalDefendStrengthExcludeReadiness;
            if (colony.CheckTroopFacilitiesPresent())
            {
                num = (int)((double)num * 1.25);
                num = Math.Max(num, 400);
            }
            else if (colony.DefensiveFortressBonus > 0)
            {
                num = (int)((double)num * 1.25);
                num = Math.Max(num, 300);
            }
            if (Policy != null)
            {
                if (Policy.ColonyPopulationThresholdTroopRecruitment > 0 && colony.Population != null && colony.Population.TotalAmount < (long)Policy.ColonyPopulationThresholdTroopRecruitment * 1000000L)
                {
                    num = 0;
                }
                num = Math.Max(num, Policy.TroopGarrisonMinimumPerColony * 100);
            }
            if (num > 0 && num < 200 && colony.Empire != null)
            {
                bool flag = true;
                SystemInfo systemInfo = null;
                if (_Galaxy.Systems.Count > colony.SystemIndex)
                {
                    systemInfo = _Galaxy.Systems[colony.SystemIndex];
                }
                if (CheckAtWar())
                {
                    flag = false;
                }
                else if ((systemInfo != null && systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != colony.Empire) || (systemInfo != null && systemInfo.OtherEmpires != null && systemInfo.OtherEmpires.Count > 0) || (systemInfo != null && systemInfo.IndependentColonyCount > 0))
                {
                    flag = false;
                }
                else if (colony.AnnualTaxRevenue > Galaxy.TroopAnnualMaintenance)
                {
                    flag = false;
                }
                else if (colony.BasesAtHabitat != null && colony.BasesAtHabitat.Count > 0)
                {
                    for (int i = 0; i < colony.BasesAtHabitat.Count; i++)
                    {
                        BuiltObject builtObject = colony.BasesAtHabitat[i];
                        if (builtObject != null && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
                        {
                            flag = false;
                        }
                    }
                }
                if (flag && Policy != null && Policy.TroopGarrisonMinimumPerColony <= 0)
                {
                    num = 0;
                }
            }
            ReviewColonyTroopGarrison(colony, num, num2);
        }

        public void ReviewColonyTroopGarrison(Habitat colony, int requiredTroopLevel, int currentTroopLevelCompleteTroops)
        {
            if (colony == null)
            {
                return;
            }
            int val = (int)((double)Math.Min(requiredTroopLevel, currentTroopLevelCompleteTroops) * 0.5 * 100.0);
            val = Math.Max(val, Policy.TroopGarrisonMinimumPerColony * 10000);
            TroopList byType = colony.Troops.GetByType(TroopType.Infantry);
            TroopList byType2 = colony.Troops.GetByType(TroopType.Artillery);
            int totalDefendStrengthExcludeReadiness = byType.TotalDefendStrengthExcludeReadiness;
            int totalDefendStrengthExcludeReadiness2 = byType2.TotalDefendStrengthExcludeReadiness;
            int num = 0;
            TroopList troopList = new TroopList();
            if (totalDefendStrengthExcludeReadiness2 > 0 && byType2.Count > 0)
            {
                int num2 = 0;
                if (totalDefendStrengthExcludeReadiness > 0 && byType.Count > 0)
                {
                    num2 = ((totalDefendStrengthExcludeReadiness < val / 2) ? totalDefendStrengthExcludeReadiness : (val / 2));
                }
                for (int i = 0; i < byType2.Count; i++)
                {
                    Troop troop = byType2[i];
                    if (troop != null)
                    {
                        num += (int)troop.OverallDefendStrengthExcludeReadiness;
                        troopList.Add(troop);
                        if (num >= val - num2)
                        {
                            break;
                        }
                    }
                }
            }
            for (int j = 0; j < byType.Count; j++)
            {
                Troop troop2 = byType[j];
                if (troop2 != null)
                {
                    num += (int)troop2.OverallDefendStrengthExcludeReadiness;
                    troopList.Add(troop2);
                    if (num >= val)
                    {
                        break;
                    }
                }
            }
            if (num < val)
            {
                TroopList byType3 = colony.Troops.GetByType(TroopType.SpecialForces);
                if (byType3.Count > 0)
                {
                    for (int k = 0; k < byType3.Count; k++)
                    {
                        Troop troop3 = byType3[k];
                        if (troop3 != null)
                        {
                            num += (int)troop3.OverallDefendStrengthExcludeReadiness;
                            troopList.Add(troop3);
                            if (num >= val)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            for (int l = 0; l < colony.Troops.Count; l++)
            {
                Troop troop4 = colony.Troops[l];
                if (troop4 != null)
                {
                    if (troopList.Contains(troop4))
                    {
                        troop4.Garrisoned = true;
                    }
                    else
                    {
                        troop4.Garrisoned = false;
                    }
                }
            }
        }

        private void RecruitAttackTroops()
        {
            if (!_ControlTroopGeneration || Colonies == null || Troops == null)
            {
                return;
            }
            int num = Troops.CountByType(TroopType.Armored);
            int num2 = Troops.CountByType(TroopType.SpecialForces);
            int val = (int)((double)Colonies.Count * 1.0 * Policy.TroopRecruitArmorLevel);
            int num3 = Math.Max(val, (int)((double)TotalColonyStrategicValue / 150000.0 * Policy.TroopRecruitArmorLevel));
            int val2 = (int)((double)Colonies.Count * 0.3 * Policy.TroopRecruitSpecialForcesLevel);
            int num4 = Math.Max(val2, (int)((double)TotalColonyStrategicValue / 600000.0 * Policy.TroopRecruitSpecialForcesLevel));
            double num5 = CalculateCostPerTroop(TroopType.Armored, null, null);
            CalculateCostPerTroop(TroopType.Artillery, null, null);
            CalculateCostPerTroop(TroopType.SpecialForces, null, null);
            int num6 = Math.Max(0, num3 - num);
            int num7 = Math.Max(0, num4 - num2);
            if (!TroopCanRecruitArmored)
            {
                num6 = 0;
            }
            if (!TroopCanRecruitSpecialForces)
            {
                num7 = 0;
            }
            double num8 = (double)num6 * num5;
            double num9 = (double)num7 * num5;
            double num10 = num8 + num9;
            double annualEmpireExpenses = 0.0;
            double num11 = CalculateAccurateAnnualCashflowIncludingUnderConstruction(out annualEmpireExpenses);
            double num12 = StateMoney / annualEmpireExpenses;
            double num13 = 1.0;
            bool flag = false;
            double num14 = num11 - num10;
            if (num14 > 0.0)
            {
                flag = true;
            }
            else if (num12 >= Galaxy.AllowableYearsMaintenanceFromCashOnHand)
            {
                flag = true;
            }
            else if (num11 > 0.0)
            {
                num13 = num11 / num10;
                flag = true;
            }
            if (!flag)
            {
                return;
            }
            if (num6 > 0 && TroopCanRecruitArmored)
            {
                HabitatList habitatsWithCompletedFacilities = Colonies.GetHabitatsWithCompletedFacilities(PlanetaryFacilityType.ArmoredFactory);
                for (int i = 0; i < habitatsWithCompletedFacilities.Count; i++)
                {
                    Habitat habitat = habitatsWithCompletedFacilities[i];
                    if (habitat != null && !habitat.HasBeenDestroyed && habitat.Empire == this && habitat.TroopsToRecruit != null && habitat.Population != null && habitat.Population.DominantRace != null)
                    {
                        Race dominantRace = habitat.Population.DominantRace;
                        int troopStrength = dominantRace.TroopStrength;
                        Troop troop = Galaxy.GenerateNewTroop(GenerateTroopDescription(dominantRace.TroopNameArmored), TroopType.Armored, troopStrength, this, dominantRace);
                        if (troop != null)
                        {
                            troop.Colony = habitat;
                            troop.Readiness = 0f;
                            habitat.TroopsToRecruit.Add(troop);
                            Troops.Add(troop);
                        }
                        num6--;
                        if (num6 <= 0)
                        {
                            break;
                        }
                    }
                }
            }
            if (num7 <= 0 || !TroopCanRecruitSpecialForces)
            {
                return;
            }
            HabitatList habitatsWithCompletedFacilities2 = Colonies.GetHabitatsWithCompletedFacilities(PlanetaryFacilityType.MilitaryAcademy);
            for (int j = 0; j < habitatsWithCompletedFacilities2.Count; j++)
            {
                Habitat habitat2 = habitatsWithCompletedFacilities2[j];
                if (habitat2 != null && !habitat2.HasBeenDestroyed && habitat2.Empire == this && habitat2.TroopsToRecruit != null && habitat2.Population != null && habitat2.Population.DominantRace != null)
                {
                    Race dominantRace2 = habitat2.Population.DominantRace;
                    int troopStrength2 = dominantRace2.TroopStrength;
                    Troop troop2 = Galaxy.GenerateNewTroop(GenerateTroopDescription(dominantRace2.TroopNameSpecialForces), TroopType.SpecialForces, troopStrength2, this, dominantRace2);
                    if (troop2 != null)
                    {
                        troop2.Colony = habitat2;
                        troop2.Readiness = 0f;
                        habitat2.TroopsToRecruit.Add(troop2);
                        Troops.Add(troop2);
                    }
                    num7--;
                    if (num7 <= 0)
                    {
                        break;
                    }
                }
            }
        }

        public Troop IdentifyStrongestRaceAttackTroop()
        {
            return IdentifyStrongestRaceAttackTroop(TroopType.Infantry);
        }

        public Troop IdentifyStrongestRaceAttackTroop(TroopType troopType)
        {
            Troop troop = null;
            if (Troops != null)
            {
                for (int i = 0; i < Troops.Count; i++)
                {
                    Troop troop2 = Troops[i];
                    if (troop2 != null && (troop == null || troop2.AttackStrength > troop.AttackStrength) && troop2.Race != null && troop2.Type == troopType)
                    {
                        troop = troop2;
                    }
                }
            }
            return troop;
        }

        public string GenerateTroopDescription()
        {
            return GenerateTroopDescription(_TroopDescription);
        }

        public string GenerateTroopDescription(string troopLabel)
        {
            _TroopCount++;
            string text = Galaxy.OrderedNumberDescription(_TroopCount);
            return text + " " + troopLabel;
        }

        public Order CreateOrder(Habitat colony, Resource resource, int amount, bool isState, OrderType type)
        {
            return CreateOrder(colony, resource, amount, isState, type, allowExpiry: false);
        }

        public Order CreateOrder(Habitat colony, Resource resource, int amount, bool isState, OrderType type, bool allowExpiry)
        {
            long expiryDate = _Galaxy.CurrentStarDate + (long)(Galaxy.OrderExpiryYearsLuxury * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            if (!allowExpiry || !resource.IsLuxuryResource)
            {
                expiryDate = _Galaxy.CurrentStarDate + (long)(1000.0 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            }
            return CreateOrder(colony, resource, amount, isState, type, expiryDate);
        }

        public Order CreateOrder(Habitat colony, Resource resource, int amount, bool isState, OrderType type, long expiryDate)
        {
            int maximumFulfillmentDistance = _Galaxy.CalculateMaximumOrderFulfillmentDistance(colony);
            Order order = new Order(_Galaxy, colony, resource, amount, expiryDate, maximumFulfillmentDistance);
            order.Type = type;
            order.MinimumContractSize = Galaxy.MinimumContractSize;
            order.IsStateOrder = isState;
            _Galaxy.Orders.Add(order);
            return order;
        }

        public Order CreateOrder(BuiltObject builtObject, Resource resource, int amount, bool isState, OrderType type)
        {
            return CreateOrder(builtObject, resource, amount, isState, type, allowExpiry: false);
        }

        public Order CreateOrder(BuiltObject builtObject, Resource resource, int amount, bool isState, OrderType type, bool allowExpiry)
        {
            long expiryDate = _Galaxy.CurrentStarDate + (long)(Galaxy.OrderExpiryYearsLuxury * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            if (!allowExpiry || !resource.IsLuxuryResource)
            {
                expiryDate = _Galaxy.CurrentStarDate + (long)(1000.0 * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            }
            return CreateOrder(builtObject, resource, amount, isState, type, expiryDate);
        }

        public Order CreateOrder(BuiltObject builtObject, Resource resource, int amount, bool isState, OrderType type, long expiryDate)
        {
            int maximumFulfillmentDistance = _Galaxy.CalculateMaximumOrderFulfillmentDistance(builtObject);
            _ = _Galaxy.ResourceCurrentPrices[resource.ResourceID];
            Order order = new Order(_Galaxy, builtObject, resource, amount, expiryDate, maximumFulfillmentDistance);
            order.Type = type;
            order.MinimumContractSize = Galaxy.MinimumContractSize;
            order.IsStateOrder = isState;
            _Galaxy.Orders.Add(order);
            return order;
        }

        private bool CheckResourceMeetsMinimumLevel(Resource resource, int minimumResourceLevel, int maximumResourceLevel, Habitat colony, OrderList colonyOrders, out int amountToOrder)
        {
            bool result = false;
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            int num4 = -1;
            if (colony.Cargo != null && colony.Cargo.GetExists(resource))
            {
                num4 = colony.Cargo.IndexOf(resource, colony.Owner);
            }
            if (num4 >= 0)
            {
                num = colony.Cargo[num4].Available;
                num2 = num;
            }
            int num5;
            for (num5 = colonyOrders.IndexOf(resource.ResourceID, 0); num5 >= 0; num5 = colonyOrders.IndexOf(resource.ResourceID, num5))
            {
                num3 = colonyOrders[num5].AmountRequested;
                num2 += num3;
                num5++;
            }
            amountToOrder = Math.Max(0, maximumResourceLevel - num2);
            if (amountToOrder > 0)
            {
                if (resource.IsRestrictedResource)
                {
                    amountToOrder = Math.Max(amountToOrder, Galaxy.MinimumRestrictedResourceReorderAmount);
                }
                else
                {
                    amountToOrder = Math.Max(amountToOrder, Galaxy.MinimumContractSize);
                }
                amountToOrder = Math.Min(20000, amountToOrder);
            }
            if (num2 >= minimumResourceLevel)
            {
                result = true;
            }
            return result;
        }

        private int CheckResourcesMeetingMinimumLevel(ResourceGroup resourceGroup, int minimumResourceLevel, Habitat colony, OrderList colonyOrders)
        {
            int num = 0;
            int num2 = 0;
            int num3 = -1;
            int num4 = 0;
            ResourceList resourceList = new ResourceList();
            List<int> list = new List<int>();
            int num5 = -1;
            if (colony.Cargo != null)
            {
                num5 = colony.Cargo.IndexOf(resourceGroup, colony.Owner, 0);
            }
            while (num5 >= 0)
            {
                num2 = colony.Cargo[num5].Amount - colony.Cargo[num5].Reserved;
                num3 = resourceList.IndexOf(colony.Cargo[num5].CommodityResource);
                if (num3 < 0)
                {
                    resourceList.Add(colony.Cargo[num5].CommodityResource);
                    list.Add(num2);
                }
                else
                {
                    list[num3] += num2;
                }
                num5++;
                num5 = colony.Cargo.IndexOf(resourceGroup, colony.Owner, num5);
            }
            int num6;
            for (num6 = colonyOrders.IndexOf(resourceGroup, 0); num6 >= 0; num6 = colonyOrders.IndexOf(resourceGroup, num6))
            {
                num4 = colonyOrders[num6].AmountRequested;
                num3 = resourceList.IndexOf(colonyOrders[num6].CommodityResource);
                if (num3 < 0)
                {
                    resourceList.Add(colonyOrders[num6].CommodityResource);
                    list.Add(num4);
                }
                else
                {
                    list[num3] += num4;
                }
                num6++;
            }
            for (int i = 0; i < list.Count; i++)
            {
                if (list[i] > minimumResourceLevel)
                {
                    num++;
                }
            }
            return num;
        }

        public int DetermineColonizationValue(Habitat habitat)
        {
            double num = 0.0;
            num = (int)((double)(habitat.Quality * habitat.Quality) * 20000.0);
            double num2 = 1.0;
            if (habitat.Population != null && habitat.Population.Count > 0 && (habitat.Empire == _Galaxy.IndependentEmpire || habitat.Empire == null))
            {
                int val = _Galaxy.CheckColonizationLikeliness(habitat, DominantRace);
                val = Math.Min(105, val);
                double num3 = 1.0 + (double)val / 100.0;
                num3 *= num3;
                num3 *= num3;
                num3 *= 1.0 + Math.Sqrt(habitat.Population.TotalAmount / 10000000);
                num *= num3;
                num2 = 3.0;
            }
            if (habitat.Ruin != null)
            {
                num *= 1.0 + habitat.Ruin.DevelopmentBonus;
                if (habitat.Ruin.BonusDefensive > 0.0 || habitat.Ruin.BonusDiplomacy > 0.0 || habitat.Ruin.BonusHappiness > 0.0 || habitat.Ruin.BonusResearchEnergy > 0.0 || habitat.Ruin.BonusResearchHighTech > 0.0 || habitat.Ruin.BonusResearchWeapons > 0.0 || habitat.Ruin.BonusWealth > 0.0)
                {
                    num *= 30.0;
                }
                num *= Policy.ColonizeRuinsPriority;
            }
            double d = DetermineResourceValue(habitat);
            d = Math.Sqrt(d);
            num *= d;
            double num4 = 1.0;
            switch (habitat.Type)
            {
                case HabitatType.Continental:
                    num4 = Policy.ColonizeContinentalPriority;
                    break;
                case HabitatType.MarshySwamp:
                    num4 = Policy.ColonizeMarshySwampPriority;
                    break;
                case HabitatType.Ocean:
                    num4 = Policy.ColonizeOceanPriority;
                    break;
                case HabitatType.Desert:
                    num4 = Policy.ColonizeDesertPriority;
                    break;
                case HabitatType.Ice:
                    num4 = Policy.ColonizeIcePriority;
                    break;
                case HabitatType.Volcanic:
                    num4 = Policy.ColonizeVolcanicPriority;
                    break;
            }
            num *= num4;
            num /= DetermineProximityFromMajorColony(habitat, 50000) / num2;
            return (int)num;
        }

        public bool DetermineColonizeLowQualityHabitat(Habitat habitat)
        {
            bool result = true;
            if (habitat.Quality < 0.5f)
            {
                result = false;
                if (habitat.Resources != null && habitat.Resources.Count > 0 && habitat.Resources.HasSuperLuxuryResources())
                {
                    result = true;
                }
                if (habitat.Ruin != null && (habitat.Ruin.BonusDefensive > 0.0 || habitat.Ruin.BonusDiplomacy > 0.0 || habitat.Ruin.BonusHappiness > 0.0 || habitat.Ruin.BonusResearchEnergy > 0.0 || habitat.Ruin.BonusResearchHighTech > 0.0 || habitat.Ruin.BonusResearchWeapons > 0.0 || habitat.Ruin.BonusWealth > 0.0))
                {
                    result = true;
                }
            }
            return result;
        }

        public double DetermineResourceValue(Habitat habitat)
        {
            double num = 1.0;
            if (ResourceMap != null && ResourceMap.CheckResourcesKnown(habitat))
            {
                HabitatResourceList habitatResourceList = new HabitatResourceList();
                if (habitat.Resources != null)
                {
                    habitatResourceList = habitat.Resources.Clone();
                }
                for (int i = 0; i < habitatResourceList.Count; i++)
                {
                    HabitatResource habitatResource = habitatResourceList[i];
                    if (habitatResource != null)
                    {
                        double num2 = _Galaxy.ResourceCurrentPrices[habitatResource.ResourceID] / 10.0;
                        double num3 = 100.0;
                        if (Policy != null && habitatResource.IsRestrictedResource)
                        {
                            num2 *= 50.0;
                            num3 = 2000.0;
                            num2 *= Policy.ControlRestrictedResourcesPriority;
                            num3 *= Policy.ControlRestrictedResourcesPriority;
                        }
                        if (num2 > num3)
                        {
                            num2 = num3;
                        }
                        if (num2 < 0.1)
                        {
                            num2 = 0.1;
                        }
                        num += num2;
                    }
                }
            }
            return num;
        }

        private void ReviewRestrictedResourceTrading()
        {
            if (!CheckEmpireSuppliesRestrictedResources() || Reclusive)
            {
                return;
            }
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.OtherEmpire == this)
                {
                    continue;
                }
                bool flag = DetermineWhetherTradeRestrictedResourcesWithEmpire(diplomaticRelation.OtherEmpire);
                if (flag == diplomaticRelation.SupplyRestrictedResources)
                {
                    continue;
                }
                AdvisorMessageType advisorMessageType = AdvisorMessageType.AllowTradeRestrictedResources;
                if (!flag)
                {
                    advisorMessageType = AdvisorMessageType.DisallowTradeRestrictedResources;
                }
                if (CheckTaskAuthorized(_ControlDiplomacyTreaties, GenerateAutomationMessageTradeRestrictedResources(diplomaticRelation.OtherEmpire, flag), diplomaticRelation.OtherEmpire, advisorMessageType))
                {
                    string empty = string.Empty;
                    EmpireMessageType empireMessageType = EmpireMessageType.RestrictedResourceTradingAllowed;
                    if (flag)
                    {
                        empty = string.Format(TextResolver.GetText("Trade Restricted Resource EMPIRE"), Name);
                        empireMessageType = EmpireMessageType.RestrictedResourceTradingAllowed;
                    }
                    else
                    {
                        empty = string.Format(TextResolver.GetText("Trade Restricted Resource Refuse EMPIRE"), Name);
                        empireMessageType = EmpireMessageType.RestrictedResourceTradingBlocked;
                    }
                    SendMessageToEmpire(diplomaticRelation.OtherEmpire, empireMessageType, this, empty);
                    diplomaticRelation.SupplyRestrictedResources = flag;
                }
            }
        }

        public bool DetermineWhetherTradeRestrictedResourcesWithEmpire(Empire otherEmpire)
        {
            bool result = false;
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            switch (diplomaticRelation.Strategy)
            {
                case DiplomaticStrategy.Befriend:
                case DiplomaticStrategy.Placate:
                case DiplomaticStrategy.Ally:
                case DiplomaticStrategy.DefendPlacate:
                    result = true;
                    break;
            }
            return result;
        }

        public double DetermineProximityFromMajorColony(Habitat habitat, int strategicThreshold)
        {
            if (habitat != null)
            {
                Habitat habitat2 = _Galaxy.FastFindNearestColony(habitat.Xpos, habitat.Ypos, this, strategicThreshold);
                if (habitat2 == null)
                {
                    habitat2 = Capital;
                }
                if (habitat2 != null)
                {
                    double distance = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                    return Galaxy.CalculateDistanceFactor(distance);
                }
            }
            return 1.0;
        }

        public double DetermineProximityFromCapital(Habitat habitat)
        {
            //double num = 0.0;
            if (PirateEmpireBaseHabitat == null)
            {
                return 1.0 + Math.Sqrt(Math.Sqrt(1.0 + _Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, habitat.Xpos, habitat.Ypos)) / 100.0);
            }
            return 1.0 + Math.Sqrt(Math.Sqrt(1.0 + _Galaxy.CalculateDistance(PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos, habitat.Xpos, habitat.Ypos)) / 100.0);
        }

        public double DetermineProximityFromCapital(BuiltObject builtObject)
        {
            double num = 0.0;
            if (PirateEmpireBaseHabitat == null)
            {
                return Math.Sqrt(Math.Sqrt(1.0 + _Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, builtObject.Xpos, builtObject.Ypos)) / 100.0);
            }
            return Math.Sqrt(Math.Sqrt(1.0 + _Galaxy.CalculateDistance(PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos, builtObject.Xpos, builtObject.Ypos)) / 100.0);
        }

        public bool CanEmpireColonizeHabitatRange(Empire empire, Habitat habitat)
        {
            bool result = false;
            if (_Galaxy.ColonizationRangeEnforceLimit)
            {
                Habitat habitat2 = _Galaxy.FastFindNearestColony(habitat.Xpos, habitat.Ypos, empire, 0);
                if (habitat2 != null)
                {
                    double num = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                    if (num <= (double)_Galaxy.ColonizationRange)
                    {
                        result = true;
                    }
                }
                else
                {
                    result = true;
                }
            }
            else
            {
                result = true;
            }
            return result;
        }

        public bool CanEmpireColonizeHabitat(Empire empire, Habitat habitat, List<HabitatType> colonizableHabitatTypes, Design latestColonyShip)
        {
            return CanEmpireColonizeHabitat(empire, habitat, colonizableHabitatTypes, latestColonyShip, checkRange: true);
        }

        public bool CanEmpireColonizeHabitat(Empire empire, Habitat habitat, List<HabitatType> colonizableHabitatTypes, Design latestColonyShip, bool checkRange)
        {
            bool result = false;
            if (empire.CheckSystemExplored(habitat.SystemIndex) && (habitat.Owner == null || habitat.Owner == _Galaxy.IndependentEmpire) && _Galaxy.CheckEmpireTerritoryCanColonizeHabitat(empire, habitat) && ((latestColonyShip != null && CanDesignColonizeHabitat(latestColonyShip, habitat)) || colonizableHabitatTypes.Contains(habitat.Type)) && (habitat.Category == HabitatCategoryType.Planet || habitat.Category == HabitatCategoryType.Moon))
            {
                result = !checkRange || CanEmpireColonizeHabitatRange(this, habitat);
            }
            return result;
        }

        private void InvadeUnwillingColonizationTargets(Galaxy galaxy)
        {
            int refusalCount = 0;
            int num = (int)(100.0 + Galaxy.Rnd.NextDouble() * 10.0);
            if (DominantRace.AggressionLevel <= num)
            {
                return;
            }
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            int num2 = Math.Min(10, _ColonizationTargets.Count);
            for (int i = 0; i < num2; i++)
            {
                if (_ColonizationTargets[i].AssignedShip != null)
                {
                    continue;
                }
                Habitat habitat = _ColonizationTargets[i].Habitat;
                if (habitat == null)
                {
                    continue;
                }
                int num3 = galaxy.CheckColonizationLikeliness(habitat, DominantRace);
                if (num3 < -3 && DetermineColonizeLowQualityHabitat(habitat))
                {
                    ShipGroup shipGroup = FindNearestAvailableFleet(habitat.Xpos, habitat.Ypos, BuiltObjectMissionPriority.Low, 0, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 40000);
                    if (shipGroup != null && (shipGroup.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageInvadeIndependent(habitat, shipGroup), habitat, AdvisorMessageType.InvadeIndependent, shipGroup, null))
                    {
                        shipGroup.AssignMission(BuiltObjectMissionType.Attack, habitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        habitatPrioritizationList.Add(_ColonizationTargets[i]);
                    }
                }
            }
            foreach (HabitatPrioritization item in habitatPrioritizationList)
            {
                _ColonizationTargets.Remove(item);
            }
        }

        public bool CheckShipCanSurviveStorms(BuiltObject ship)
        {
            if (ship != null && ship.ArmorReactive >= 5)
            {
                return true;
            }
            return false;
        }

        public bool CheckPassengerShipsCanSurviveStorms()
        {
            BuiltObject builtObject = null;
            for (int num = PrivateBuiltObjects.Count - 1; num >= 0; num--)
            {
                builtObject = PrivateBuiltObjects[num];
                if (builtObject.UnbuiltOrDamagedComponentCount == 0 && builtObject.SubRole == BuiltObjectSubRole.PassengerShip)
                {
                    break;
                }
            }
            if (builtObject != null && builtObject.ArmorReactive >= 5)
            {
                return true;
            }
            return false;
        }

        public bool CheckMiningShipsCanSurviveStorms()
        {
            BuiltObject builtObject = null;
            if (ResourceExtractors.Count > 0)
            {
                for (int num = ResourceExtractors.Count - 1; num >= 0; num--)
                {
                    builtObject = ResourceExtractors[num];
                    if (builtObject.UnbuiltOrDamagedComponentCount == 0 && (builtObject.SubRole == BuiltObjectSubRole.MiningShip || builtObject.SubRole == BuiltObjectSubRole.GasMiningShip))
                    {
                        break;
                    }
                }
            }
            if (builtObject != null && builtObject.ArmorReactive >= 5)
            {
                return true;
            }
            return false;
        }

        public bool CheckConstructionShipAndMiningStationCanSurviveStorms()
        {
            BuiltObject builtObject = null;
            if (ConstructionShips.Count > 0)
            {
                builtObject = ConstructionShips[ConstructionShips.Count - 1];
            }
            Design design = Designs.FindNewest(BuiltObjectSubRole.MiningStation);
            if (design != null && builtObject != null && design.ArmorReactive >= 5 && builtObject.ArmorReactive >= 5)
            {
                return true;
            }
            return false;
        }

        public bool CheckEmpireTechCanSurviveStorms()
        {
            Component component = Research.EvaluateDesiredComponent(ComponentCategoryType.Armor, ShipDesignFocus.Balanced);
            if (component != null && component.Value2 >= 5)
            {
                return true;
            }
            return false;
        }

        public bool CanEmpireColonizeHabitat(Habitat habitat, out string explanation)
        {
            if (!_Galaxy.CheckEmpireTerritoryCanColonizeHabitat(this, habitat))
            {
                explanation = TextResolver.GetText("Colonization Not Possible - Foreign Territory");
                return false;
            }
            if (habitat.Empire == _Galaxy.IndependentEmpire && habitat.Population != null && habitat.Population.TotalAmount > 0)
            {
                if (!CanEmpireColonizeHabitatRange(this, habitat))
                {
                    explanation = TextResolver.GetText("Colonization Not Possible - Outside Range Limit");
                    return false;
                }
                int num = _Galaxy.CheckColonizationLikeliness(habitat, DominantRace);
                if (num <= -20)
                {
                    explanation = TextResolver.GetText("Colonization Probability Most unlikely");
                }
                else if (num <= -5)
                {
                    explanation = TextResolver.GetText("Colonization Probability Unlikely");
                }
                else if (num <= 5)
                {
                    explanation = TextResolver.GetText("Colonization Probability Possible");
                }
                else
                {
                    explanation = TextResolver.GetText("Colonization Probability Probable");
                }
                return true;
            }
            Design design = Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
            if (design == null)
            {
                design = Designs.FindNewest(BuiltObjectSubRole.ColonyShip);
            }
            if (CanDesignColonizeHabitat(design, habitat))
            {
                if (!CanEmpireColonizeHabitatRange(this, habitat))
                {
                    explanation = TextResolver.GetText("Colonization Not Possible - Outside Range Limit");
                    return false;
                }
                explanation = TextResolver.GetText("Colonization - Yes, using current colonization tech");
                return true;
            }
            List<HabitatType> list = ColonizableHabitatTypesNonTechForEmpire(this);
            if (list.Contains(habitat.Type))
            {
                if (!CanEmpireColonizeHabitatRange(this, habitat))
                {
                    explanation = TextResolver.GetText("Colonization Not Possible - Outside Range Limit");
                    return false;
                }
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat2 = Colonies[i];
                    if (habitat2.Population != null && habitat2.Population.DominantRace != null && habitat2.Population.DominantRace.NativeHabitatType == habitat.Type && (habitat.Category == HabitatCategoryType.Planet || habitat.Category == HabitatCategoryType.Moon))
                    {
                        explanation = string.Format(TextResolver.GetText("Colonization - Yes, native type for RACE"), habitat2.Population.DominantRace.Name);
                        return true;
                    }
                }
            }
            list = ColonizableHabitatTypesFromColonyShips(this, list);
            if (list.Contains(habitat.Type))
            {
                if (!CanEmpireColonizeHabitatRange(this, habitat))
                {
                    explanation = TextResolver.GetText("Colonization Not Possible - Outside Range Limit");
                    return false;
                }
                for (int j = 0; j < BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject = BuiltObjects[j];
                    if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip)
                    {
                        int newPopulationAmount = 0;
                        if (CanBuiltObjectColonizeHabitat(builtObject, habitat, out newPopulationAmount))
                        {
                            explanation = string.Format(TextResolver.GetText("Colonization - Yes, using colony ship NAME"), builtObject.Name);
                            return true;
                        }
                    }
                }
            }
            explanation = TextResolver.GetText("No, unable to colonize");
            return false;
        }

        public HabitatPrioritizationList IdentifyColonizationTargets(Galaxy galaxy)
        {
            return IdentifyColonizationTargets(galaxy, filterOutDangerousTargets: true, 1, int.MaxValue);
        }

        public HabitatPrioritizationList IdentifyColonizationTargets(Galaxy galaxy, bool filterOutDangerousTargets, int thresholdValue, int maximumListSize)
        {
            return IdentifyColonizationTargets(galaxy, filterOutDangerousTargets, thresholdValue, maximumListSize, includeLowQualityTargets: true, includeDistantTargets: false);
        }

        public HabitatPrioritizationList IdentifyColonizationTargets(Galaxy galaxy, bool filterOutDangerousTargets, int thresholdValue, int maximumListSize, bool includeLowQualityTargets, bool includeDistantTargets)
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            Design design = Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
            if (design == null)
            {
                design = Designs.FindNewest(BuiltObjectSubRole.ColonyShip);
            }
            bool flag = false;
            if (filterOutDangerousTargets)
            {
                flag = CheckEmpireTechCanSurviveStorms();
            }
            double num = (double)DominantRace.AggressionLevel / 100.0;
            double num2 = (double)DominantRace.CautionLevel / 100.0;
            int num3 = (int)(2000.0 / (num * num / (num2 * num2)));
            List<HabitatType> empireHabitatTypes = ColonizableHabitatTypesForEmpire(this);
            empireHabitatTypes = ColonizableHabitatTypesFromColonyShips(this, empireHabitatTypes);
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                if (!CheckSystemExplored(i))
                {
                    continue;
                }
                bool flag2 = false;
                if (_Galaxy.Systems[i].DominantEmpire != null && _Galaxy.Systems[i].DominantEmpire.Empire != null && _Galaxy.Systems[i].DominantEmpire.Empire != this)
                {
                    flag2 = true;
                }
                if (!flag2 && _Galaxy.Systems[i].SystemStar != null)
                {
                    bool disputed = false;
                    int num4 = _Galaxy.EmpireTerritory.CheckSystemOwnership(_Galaxy, _Galaxy.Systems[i].SystemStar, out disputed);
                    if (num4 >= 0 && num4 != EmpireId)
                    {
                        flag2 = true;
                    }
                }
                bool flag3 = false;
                if (filterOutDangerousTargets)
                {
                    flag3 = _Galaxy.CheckInStorm(_Galaxy.Systems[i].SystemStar.Xpos, _Galaxy.Systems[i].SystemStar.Ypos);
                    if (flag3 && flag)
                    {
                        flag3 = false;
                    }
                }
                if (flag3)
                {
                    continue;
                }
                for (int j = 0; j < _Galaxy.Systems[SystemVisibility[i].SystemStar.SystemIndex].Habitats.Count; j++)
                {
                    Habitat habitat = _Galaxy.Systems[SystemVisibility[i].SystemStar.SystemIndex].Habitats[j];
                    if ((habitat.Category != HabitatCategoryType.Planet && habitat.Category != HabitatCategoryType.Moon) || habitat.Type == HabitatType.BarrenRock || habitat.Type == HabitatType.FrozenGasGiant || habitat.Type == HabitatType.GasGiant || (!includeLowQualityTargets && !(habitat.Quality >= 0.5f) && (_ResourceMap == null || !_ResourceMap.CheckResourcesKnown(habitat) || habitat.Resources == null || !habitat.Resources.HasSuperLuxuryResources()) && (habitat.Ruin == null || !habitat.Ruin.PlayerEmpireEncountered || (!(habitat.Ruin.BonusDefensive > 0.0) && !(habitat.Ruin.BonusDiplomacy > 0.0) && !(habitat.Ruin.BonusHappiness > 0.0) && !(habitat.Ruin.BonusResearchEnergy > 0.0) && !(habitat.Ruin.BonusResearchHighTech > 0.0) && !(habitat.Ruin.BonusResearchWeapons > 0.0) && !(habitat.Ruin.BonusWealth > 0.0)))))
                    {
                        continue;
                    }
                    double num5 = 0.0;
                    if (((habitat.Empire != _Galaxy.IndependentEmpire || habitat.Population == null || habitat.Population.TotalAmount <= 0) && !CanEmpireColonizeHabitat(this, habitat, empireHabitatTypes, design, checkRange: false)) || (!includeDistantTargets && !CanEmpireColonizeHabitatRange(this, habitat)) || !_Galaxy.CheckEmpireTerritoryCanColonizeHabitat(this, habitat) || habitatPrioritizationList.IndexOf(habitat) >= 0 || (filterOutDangerousTargets && CheckNearPirateBase(habitat, habitat.Xpos, habitat.Ypos)))
                    {
                        continue;
                    }
                    Habitat habitat2 = habitat;
                    num5 = DetermineColonizationValue(habitat2);
                    if (!(num5 >= (double)thresholdValue))
                    {
                        continue;
                    }
                    bool flag4 = true;
                    if (flag2 && filterOutDangerousTargets && num5 < (double)num3)
                    {
                        flag4 = false;
                    }
                    if (filterOutDangerousTargets && CheckWhetherHabitatIsDangerous(habitat2))
                    {
                        flag4 = false;
                        if (_DangerousHabitats == null)
                        {
                            _DangerousHabitats = new HabitatList();
                        }
                        if (_DangerousHabitats.Count < 20 && !_DangerousHabitats.Contains(habitat2))
                        {
                            _DangerousHabitats.Add(habitat2);
                        }
                    }
                    if (flag4)
                    {
                        HabitatPrioritization item = new HabitatPrioritization(habitat2, (int)num5);
                        habitatPrioritizationList.Add(item);
                    }
                }
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            for (int k = 0; k < BuiltObjects.Count; k++)
            {
                BuiltObject builtObject = BuiltObjects[k];
                if (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Colonize && builtObject.Mission.TargetHabitat != null)
                {
                    Habitat targetHabitat = builtObject.Mission.TargetHabitat;
                    int num6 = habitatPrioritizationList.IndexOf(targetHabitat);
                    if (num6 >= 0)
                    {
                        habitatPrioritizationList[num6].AssignedShip = builtObject;
                    }
                }
            }
            if (maximumListSize < int.MaxValue && habitatPrioritizationList.Count > maximumListSize)
            {
                HabitatPrioritization[] sourceArray = habitatPrioritizationList.ToArray();
                HabitatPrioritization[] array = new HabitatPrioritization[maximumListSize];
                Array.Copy(sourceArray, 0, array, 0, maximumListSize);
                habitatPrioritizationList.Clear();
                habitatPrioritizationList.AddRange(array);
            }
            return habitatPrioritizationList;
        }

        public BuiltObject CheckColonizingHabitat(Habitat habitat)
        {
            BuiltObject result = null;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip && builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Colonize && builtObject.Mission.TargetHabitat == habitat)
                {
                    result = builtObject;
                    break;
                }
            }
            return result;
        }

        private void AssignShipMissions()
        {
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                habitat.CurrentDefensiveForceAssigned = 0;
            }
            for (int j = 0; j < BuiltObjects.Count; j++)
            {
                BuiltObject builtObject = BuiltObjects[j];
                if (builtObject.Role == BuiltObjectRole.Base && builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == this)
                {
                    builtObject.ParentHabitat.CurrentDefensiveForceAssigned += builtObject.FirepowerRaw;
                }
                else if (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Patrol && builtObject.Mission.TargetHabitat != null)
                {
                    builtObject.Mission.TargetHabitat.CurrentDefensiveForceAssigned += builtObject.FirepowerRaw;
                }
            }
            Colonies.Sort();
            Colonies.Reverse();
            for (int k = 0; k < PrivateBuiltObjects.Count; k++)
            {
                BuiltObject builtObject2 = PrivateBuiltObjects[k];
                if (builtObject2.IsColony || builtObject2.IsResourceExtractor)
                {
                    builtObject2.CurrentEscortForceAssigned = 0;
                }
            }
            for (int l = 0; l < BuiltObjects.Count; l++)
            {
                BuiltObject builtObject3 = BuiltObjects[l];
                if (builtObject3.IsColony || builtObject3.IsResourceExtractor)
                {
                    builtObject3.CurrentEscortForceAssigned = 0;
                }
            }
            for (int m = 0; m < PrivateBuiltObjects.Count; m++)
            {
                BuiltObject builtObject4 = PrivateBuiltObjects[m];
                if (builtObject4.Mission != null && (builtObject4.Mission.Type == BuiltObjectMissionType.Escort || builtObject4.Mission.Type == BuiltObjectMissionType.Patrol) && builtObject4.Mission.TargetBuiltObject != null)
                {
                    BuiltObject targetBuiltObject = builtObject4.Mission.TargetBuiltObject;
                    targetBuiltObject.CurrentEscortForceAssigned += builtObject4.FirepowerRaw;
                }
            }
            for (int n = 0; n < BuiltObjects.Count; n++)
            {
                BuiltObject builtObject5 = BuiltObjects[n];
                if (builtObject5.Mission != null && (builtObject5.Mission.Type == BuiltObjectMissionType.Escort || builtObject5.Mission.Type == BuiltObjectMissionType.Patrol) && builtObject5.Mission.TargetBuiltObject != null)
                {
                    BuiltObject targetBuiltObject2 = builtObject5.Mission.TargetBuiltObject;
                    targetBuiltObject2.CurrentEscortForceAssigned += builtObject5.FirepowerRaw;
                }
            }
            int militaryStrength = 0;
            EmpireList empireList = DetermineEmpiresAtWarWith(out militaryStrength);
            bool atWar = false;
            if (empireList.Count > 0)
            {
                atWar = true;
            }
            BuiltObjectList patrolMiningStations = ResolvePrioritizedPatrolMiningStations();
            AssignMissionsToBuiltObjectList(BuiltObjects, atWar, patrolMiningStations);
            AssignMissionsToBuiltObjectList(PrivateBuiltObjects, atWar, patrolMiningStations);
        }

        public bool AssignRepairMission(BuiltObject builtObject)
        {
            Empire actualEmpire = builtObject.ActualEmpire;
            if (actualEmpire == null || actualEmpire == _Galaxy.IndependentEmpire)
            {
                return false;
            }
            if (builtObject.Role != BuiltObjectRole.Base && builtObject.TopSpeed <= 0)
            {
                return false;
            }
            StellarObject stellarObject = FindNearestShipYard(builtObject, canRepairOrBuild: true, includeVerySmallYards: true);
            if (stellarObject != null)
            {
                double num = _Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, stellarObject.Xpos, stellarObject.Ypos);
                if (builtObject.WarpSpeed <= 0 && num > (double)Galaxy.HyperJumpThreshhold && (builtObject.TopSpeed <= 0 || !(num < (double)Galaxy.MaxSolarSystemSize)))
                {
                    return false;
                }
            }
            if (stellarObject != null)
            {
                if (builtObject.UnbuiltComponentCount > 0)
                {
                    ComponentList componentList = ResolveUnbuiltComponents(builtObject);
                    if (componentList.Count > 0)
                    {
                        CargoList resourcesToOrder;
                        if (stellarObject is BuiltObject)
                        {
                            ProcureConstructionComponents(builtObject, (BuiltObject)stellarObject, orderPreciseResourceAmounts: true, out resourcesToOrder, componentList);
                            foreach (Cargo item in resourcesToOrder)
                            {
                                CreateOrder((BuiltObject)stellarObject, item.CommodityResource, item.Amount, isState: false, OrderType.ConstructionShortage);
                            }
                        }
                        else if (stellarObject is Habitat)
                        {
                            ProcureConstructionComponents(builtObject, (Habitat)stellarObject, out resourcesToOrder, componentList);
                            foreach (Cargo item2 in resourcesToOrder)
                            {
                                CreateOrder((Habitat)stellarObject, item2.CommodityResource, item2.Amount, isState: false, OrderType.ConstructionShortage);
                            }
                        }
                    }
                }
                builtObject.ClearPreviousMissionRequirements();
                builtObject.AssignMission(BuiltObjectMissionType.Repair, stellarObject, null, BuiltObjectMissionPriority.VeryHigh);
                return true;
            }
            return false;
        }

        private ComponentList ResolveUnbuiltComponents(BuiltObject builtObject)
        {
            ComponentList componentList = new ComponentList();
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                BuiltObjectComponent builtObjectComponent = builtObject.Components[i];
                if (builtObjectComponent.Status == ComponentStatus.Unbuilt)
                {
                    componentList.Add(new Component(builtObjectComponent.ComponentID));
                }
            }
            return componentList;
        }

        private double CalculateRetrofitCost(BuiltObject builtObject)
        {
            Design design = Designs.FindNewestCanBuild(builtObject.SubRole, builtObject.ParentHabitat);
            ComponentList componentsToProcure = null;
            double cost = 0.0;
            DetermineRetrofitAffordability(builtObject, design, out cost, out componentsToProcure);
            return cost;
        }

        public bool AssignRetrofitMission(BuiltObject builtObject)
        {
            Design design = Designs.FindNewestCanBuild(builtObject.SubRole, builtObject.ParentHabitat);
            return AssignRetrofitMission(builtObject, design);
        }

        public bool AssignRetrofitMission(BuiltObject builtObject, Design design)
        {
            return AssignRetrofitMission(builtObject, design, null);
        }

        public bool DetermineRetrofitAffordability(BuiltObject builtObject, Design design, out double cost, out ComponentList componentsToProcure)
        {
            cost = 0.0;
            componentsToProcure = null;
            if (design != null && builtObject != null && builtObject.Design != design)
            {
                componentsToProcure = builtObject.Components.ResolveComponentList().Diff(design.Components);
                foreach (Component item in componentsToProcure)
                {
                    cost += _Galaxy.ComponentCurrentPrices[item.ComponentID];
                }
                if (PirateEmpireBaseHabitat != null)
                {
                    cost *= Galaxy.ShipMarkupFactorPirates;
                }
                else
                {
                    cost *= Galaxy.ShipMarkupFactor;
                }
                if (builtObject.Owner == null)
                {
                    if (cost > builtObject.Empire.GetPrivateFunds())
                    {
                        return false;
                    }
                }
                else if (cost > builtObject.Owner.StateMoney)
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public double CalculateRetrofitCost(BuiltObjectList builtObjects, Design design)
        {
            double num = 0.0;
            if (design != null)
            {
                List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
                list.AddRange(new BuiltObjectSubRole[3]
                {
                BuiltObjectSubRole.SmallSpacePort,
                BuiltObjectSubRole.MediumSpacePort,
                BuiltObjectSubRole.LargeSpacePort
                });
                for (int i = 0; i < builtObjects.Count; i++)
                {
                    BuiltObject builtObject = builtObjects[i];
                    double num2 = 0.0;
                    if (design != builtObject.Design && (design.SubRole == builtObject.SubRole || (list.Contains(builtObject.SubRole) && list.Contains(design.SubRole))))
                    {
                        ComponentList componentList = builtObject.Components.ResolveComponentList().Diff(design.Components);
                        foreach (Component item in componentList)
                        {
                            num2 += _Galaxy.ComponentCurrentPrices[item.ComponentID];
                        }
                        num2 = ((PirateEmpireBaseHabitat == null) ? (num2 * Galaxy.ShipMarkupFactor) : (num2 * Galaxy.ShipMarkupFactorPirates));
                    }
                    num += num2;
                }
            }
            else
            {
                for (int j = 0; j < builtObjects.Count; j++)
                {
                    BuiltObject builtObject2 = builtObjects[j];
                    design = Designs.FindNewestCanBuildFullEvaluate(builtObject2.SubRole);
                    double num3 = 0.0;
                    if (design != null && design != builtObject2.Design)
                    {
                        ComponentList componentList2 = builtObject2.Components.ResolveComponentList().Diff(design.Components);
                        foreach (Component item2 in componentList2)
                        {
                            num3 += _Galaxy.ComponentCurrentPrices[item2.ComponentID];
                        }
                        num3 = ((PirateEmpireBaseHabitat == null) ? (num3 * Galaxy.ShipMarkupFactor) : (num3 * Galaxy.ShipMarkupFactorPirates));
                    }
                    num += num3;
                }
            }
            return num;
        }

        public bool AssignRetrofitMission(BuiltObject builtObject, Design design, StellarObject location)
        {
            return AssignRetrofitMission(builtObject, design, location, forceUseOfYard: false);
        }

        public bool AssignRetrofitMission(BuiltObject builtObject, Design design, StellarObject location, bool forceUseOfYard)
        {
            //IL_0186: Expected O, but got F8
            builtObject.RetrofitForNextMission = false;
            if (builtObject.Empire == null || (builtObject.Empire == _Galaxy.IndependentEmpire && builtObject.PirateEmpireId == 0))
            {
                return false;
            }
            if (builtObject.Role != BuiltObjectRole.Base && builtObject.TopSpeed <= 0)
            {
                return false;
            }
            if (builtObject.BuiltAt != null)
            {
                return false;
            }
            CargoList resourcesToOrder = null;
            if (design != null && builtObject.Design != design)
            {
                double cost = 0.0;
                ComponentList componentsToProcure = null;
                if (DetermineRetrofitAffordability(builtObject, design, out cost, out componentsToProcure))
                {
                    if (builtObject.Role == BuiltObjectRole.Base)
                    {
                        if (builtObject.ParentHabitat == null || builtObject.ParentHabitat.Empire != builtObject.Empire)
                        {
                            if (builtObject.RetrofitBaseManufacturingQueue == null)
                            {
                                ManufacturingQueue manufacturingQueue = new ManufacturingQueue(builtObject, _Galaxy);
                                manufacturingQueue.Redefine(builtObject, forceSingleManufacturerOfEachType: true);
                                builtObject.RetrofitBaseManufacturingQueue = manufacturingQueue;
                            }
                            if (builtObject.RetrofitBaseConstructionQueue == null)
                            {
                                ConstructionQueue constructionQueue = new ConstructionQueue(builtObject, _Galaxy);
                                constructionQueue.Redefine(builtObject, forceSingleConstructionYard: true);
                                builtObject.RetrofitBaseConstructionQueue = constructionQueue;
                            }
                            if (builtObject.Empire != null && builtObject.Empire.PirateEmpireBaseHabitat != null)
                            {
                                builtObject.Empire.StateMoney -= cost;
                                builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                            }
                            else if (builtObject.Owner == null)
                            {
                                builtObject.Empire.PerformPrivateTransaction(0.0 - cost);
                                builtObject.Empire.StateMoney += BaconBuiltObject.PrivateSectorBuildOrRefitInvestInInfrastructure(builtObject, cost);
                            }
                            else
                            {
                                builtObject.Empire.StateMoney -= cost;
                                builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                            }
                            builtObject.PurchasePrice = cost;
                            ProcureConstructionComponents(builtObject, builtObject, orderPreciseResourceAmounts: true, out resourcesToOrder, componentsToProcure, forBaseRetrofit: true);
                            foreach (Cargo item in resourcesToOrder)
                            {
                                CreateOrder(builtObject, item.CommodityResource, item.Amount, isState: false, OrderType.RetrofitResourcesForBase);
                            }
                            if (builtObject.RetrofitBaseConstructionQueue != null && builtObject.RetrofitBaseConstructionQueue.AddBuiltObjectToRetrofit(builtObject, design))
                            {
                                design.BuildCount++;
                            }
                            return true;
                        }
                        Habitat parentHabitat = builtObject.ParentHabitat;
                        bool flag = false;
                        if (parentHabitat.ConstructionQueue != null && parentHabitat.ConstructionQueue.ConstructionYards != null)
                        {
                            for (int i = 0; i < parentHabitat.ConstructionQueue.ConstructionYards.Count; i++)
                            {
                                if (parentHabitat.ConstructionQueue.ConstructionYards[i].ShipUnderConstruction == null)
                                {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        if (flag || forceUseOfYard)
                        {
                            if (builtObject.Empire != null && builtObject.Empire.PirateEmpireBaseHabitat != null)
                            {
                                builtObject.Empire.StateMoney -= cost;
                                builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                            }
                            else if (builtObject.Owner == null)
                            {
                                builtObject.Empire.PerformPrivateTransaction(0.0 - cost);
                                builtObject.Empire.StateMoney += BaconBuiltObject.PrivateSectorBuildOrRefitInvestInInfrastructure(builtObject, cost);
                            }
                            else
                            {
                                builtObject.Empire.StateMoney -= cost;
                                builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                            }
                            builtObject.PurchasePrice = cost;
                            ProcureConstructionComponents(builtObject, parentHabitat, out resourcesToOrder, componentsToProcure);
                            foreach (Cargo item2 in resourcesToOrder)
                            {
                                CreateOrder(parentHabitat, item2.CommodityResource, item2.Amount, isState: false, OrderType.ConstructionShortage);
                            }
                            if (builtObject.ParentHabitat.ConstructionQueue != null && builtObject.ParentHabitat.ConstructionQueue.AddBuiltObjectToRetrofit(builtObject, design))
                            {
                                design.BuildCount++;
                            }
                            return true;
                        }
                    }
                    else if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip || builtObject.SubRole == BuiltObjectSubRole.ConstructionShip || builtObject.SubRole == BuiltObjectSubRole.ResupplyShip)
                    {
                        StellarObject stellarObject = null;
                        if (location is Habitat)
                        {
                            stellarObject = (Habitat)location;
                        }
                        else if (location is BuiltObject && PirateEmpireBaseHabitat != null)
                        {
                            stellarObject = location;
                        }
                        if (stellarObject == null)
                        {
                            stellarObject = Colonies.FindShortestConstructionWaitQueueCloseToBuiltObject(builtObject, out var shortestWaitQueueTime);
                            double num = shortestWaitQueueTime / (double)Galaxy.RealSecondsInGalacticYear;
                            num /= 2000.0;
                            if (num >= Galaxy.MaximumConstructionQueueWaitTimeYears && !forceUseOfYard)
                            {
                                stellarObject = null;
                            }
                        }
                        if (stellarObject != null)
                        {
                            bool flag2 = false;
                            if (stellarObject.ConstructionQueue != null && stellarObject.ConstructionQueue.ConstructionYards != null)
                            {
                                for (int j = 0; j < stellarObject.ConstructionQueue.ConstructionYards.Count; j++)
                                {
                                    if (stellarObject.ConstructionQueue.ConstructionYards[j].ShipUnderConstruction == null)
                                    {
                                        flag2 = true;
                                        break;
                                    }
                                }
                            }
                            if (flag2 || forceUseOfYard)
                            {
                                if (builtObject.Empire != null && builtObject.Empire.PirateEmpireBaseHabitat != null)
                                {
                                    builtObject.Empire.StateMoney -= cost;
                                    builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                                }
                                else if (builtObject.Owner == null)
                                {
                                    builtObject.Empire.PerformPrivateTransaction(0.0 - cost);
                                    builtObject.Empire.StateMoney += BaconBuiltObject.PrivateSectorBuildOrRefitInvestInInfrastructure(builtObject, cost);
                                }
                                else
                                {
                                    builtObject.Empire.StateMoney -= cost;
                                    builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                                }
                                builtObject.PurchasePrice = cost;
                                if (stellarObject is Habitat)
                                {
                                    Habitat habitat = (Habitat)stellarObject;
                                    ProcureConstructionComponents(builtObject, habitat, out resourcesToOrder, componentsToProcure);
                                    foreach (Cargo item3 in resourcesToOrder)
                                    {
                                        CreateOrder(habitat, item3.CommodityResource, item3.Amount, isState: false, OrderType.ConstructionShortage);
                                    }
                                }
                                else if (stellarObject is BuiltObject)
                                {
                                    BuiltObject builtObject2 = (BuiltObject)stellarObject;
                                    ProcureConstructionComponents(builtObject, builtObject2, orderPreciseResourceAmounts: true, out resourcesToOrder, componentsToProcure);
                                    foreach (Cargo item4 in resourcesToOrder)
                                    {
                                        CreateOrder(builtObject2, item4.CommodityResource, item4.Amount, isState: false, OrderType.ConstructionShortage);
                                    }
                                }
                                builtObject.ClearPreviousMissionRequirements();
                                builtObject.AssignMission(BuiltObjectMissionType.Retrofit, stellarObject, null, design, BuiltObjectMissionPriority.VeryHigh);
                                return true;
                            }
                        }
                    }
                    else
                    {
                        BuiltObject builtObject3 = null;
                        if (location is BuiltObject)
                        {
                            builtObject3 = (BuiltObject)location;
                        }
                        if (builtObject3 == null)
                        {
                            builtObject3 = SpacePorts.FindShortestConstructionWaitQueueCloseToBuiltObject(builtObject, out var shortestWaitQueueTime2);
                            double num2 = shortestWaitQueueTime2 / (double)Galaxy.RealSecondsInGalacticYear;
                            num2 /= 2000.0;
                            if (num2 >= Galaxy.MaximumConstructionQueueWaitTimeYears && !forceUseOfYard)
                            {
                                builtObject3 = null;
                            }
                        }
                        if (builtObject3 != null)
                        {
                            bool flag3 = false;
                            if (builtObject3.ConstructionQueue != null && builtObject3.ConstructionQueue.ConstructionYards != null)
                            {
                                for (int k = 0; k < builtObject3.ConstructionQueue.ConstructionYards.Count; k++)
                                {
                                    if (builtObject3.ConstructionQueue.ConstructionYards[k].ShipUnderConstruction == null)
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }
                            }
                            if (flag3 || forceUseOfYard)
                            {
                                if (builtObject.Empire != null && builtObject.Empire.PirateEmpireBaseHabitat != null)
                                {
                                    builtObject.Empire.StateMoney -= cost;
                                    builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                                }
                                else if (builtObject.Owner == null)
                                {
                                    builtObject.Empire.PerformPrivateTransaction(0.0 - cost);
                                    builtObject.Empire.StateMoney += BaconBuiltObject.PrivateSectorBuildOrRefitInvestInInfrastructure(builtObject, cost);
                                }
                                else
                                {
                                    builtObject.Empire.StateMoney -= cost;
                                    builtObject.Empire.PirateEconomy.PerformExpense(cost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                                }
                                builtObject.PurchasePrice = cost;
                                ProcureConstructionComponents(builtObject, builtObject3, orderPreciseResourceAmounts: true, out resourcesToOrder, componentsToProcure);
                                foreach (Cargo item5 in resourcesToOrder)
                                {
                                    CreateOrder(builtObject3, item5.CommodityResource, item5.Amount, isState: false, OrderType.ConstructionShortage);
                                }
                                builtObject.ClearPreviousMissionRequirements();
                                builtObject.AssignMission(BuiltObjectMissionType.Retrofit, builtObject3, null, design, BuiltObjectMissionPriority.VeryHigh);
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        public BuiltObject FindNearestShipYardBase(BuiltObject ship)
        {
            BuiltObject result = null;
            double num = double.MaxValue;
            for (int i = 0; i < ConstructionYards.Count; i++)
            {
                BuiltObject builtObject = ConstructionYards[i];
                if (builtObject.Role == BuiltObjectRole.Base)
                {
                    double num2 = _Galaxy.CalculateDistanceSquared(ship.Xpos, ship.Ypos, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public StellarObject FindNearestShipYard(BuiltObject ship, bool canRepairOrBuild, bool includeVerySmallYards)
        {
            StellarObject result = null;
            double num = double.MaxValue;
            bool flag = false;
            Empire actualEmpire = ship.ActualEmpire;
            if (actualEmpire != null && actualEmpire.PirateEmpireBaseHabitat != null)
            {
                flag = true;
            }
            for (int i = 0; i < ConstructionYards.Count; i++)
            {
                BuiltObject builtObject = ConstructionYards[i];
                if (builtObject.Role != BuiltObjectRole.Base)
                {
                    continue;
                }
                bool flag2 = true;
                if (!includeVerySmallYards)
                {
                    int num2 = 0;
                    if (builtObject.ConstructionQueue != null && builtObject.ConstructionQueue.ConstructionYards != null)
                    {
                        num2 = builtObject.ConstructionQueue.ConstructionYards.Count;
                    }
                    if (builtObject.ExtractionGas > 0 && num2 <= 1 && !flag)
                    {
                        flag2 = false;
                    }
                }
                if (flag2)
                {
                    double num3 = _Galaxy.CalculateDistanceSquared(ship.Xpos, ship.Ypos, builtObject.Xpos, builtObject.Ypos);
                    if (num3 < num)
                    {
                        result = builtObject;
                        num = num3;
                    }
                }
            }
            if (canRepairOrBuild && (ship.SubRole == BuiltObjectSubRole.ColonyShip || ship.SubRole == BuiltObjectSubRole.ConstructionShip || ship.SubRole == BuiltObjectSubRole.ResupplyShip) && !flag)
            {
                result = null;
                num = double.MaxValue;
                for (int j = 0; j < Colonies.Count; j++)
                {
                    Habitat habitat = Colonies[j];
                    double num4 = _Galaxy.CalculateDistanceSquared(ship.Xpos, ship.Ypos, habitat.Xpos, habitat.Ypos);
                    if (num4 < num)
                    {
                        result = habitat;
                        num = num4;
                    }
                }
            }
            return result;
        }

        public BuiltObject FindNearestSpaceportWithCargo(double x, double y, CargoList cargoItems)
        {
            BuiltObject builtObject = null;
            BuiltObject builtObject2 = null;
            double num = double.MaxValue;
            double num2 = double.MaxValue;
            if (cargoItems != null && SpacePorts != null)
            {
                for (int i = 0; i < SpacePorts.Count; i++)
                {
                    BuiltObject builtObject3 = SpacePorts[i];
                    if (builtObject3 == null || builtObject3.Cargo == null)
                    {
                        continue;
                    }
                    double num3 = _Galaxy.CalculateDistanceSquared(x, y, builtObject3.Xpos, builtObject3.Ypos);
                    if (!(num3 < num2))
                    {
                        continue;
                    }
                    bool flag = true;
                    for (int j = 0; j < cargoItems.Count; j++)
                    {
                        Cargo cargo = cargoItems[j];
                        if (cargo == null)
                        {
                            continue;
                        }
                        bool flag2 = false;
                        Cargo cargo2 = null;
                        if (cargo.CommodityResource != null)
                        {
                            builtObject3.Cargo.GetCargo(cargo.CommodityResource, cargo.EmpireId);
                            if (cargo2 != null && cargo2.Available >= cargo.Amount)
                            {
                                flag2 = true;
                            }
                        }
                        else if (cargo.Component != null)
                        {
                            builtObject3.Cargo.GetCargo(cargo.Component, cargo.EmpireId);
                            if (cargo2 != null && cargo2.Available >= cargo.Amount)
                            {
                                flag2 = true;
                            }
                        }
                        if (!flag2)
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        if (num3 < num2)
                        {
                            builtObject2 = builtObject3;
                            num2 = num3;
                        }
                    }
                    else if (num3 < num)
                    {
                        builtObject = builtObject3;
                        num = num3;
                    }
                }
            }
            if (builtObject2 == null)
            {
                builtObject2 = builtObject;
            }
            return builtObject2;
        }

        public Habitat FindNearestColonyWithExcessTroops(BuiltObject ship)
        {
            return FindNearestColonyWithExcessTroops(ship, enforceMinimumTroopLimits: false);
        }

        public Habitat FindNearestColonyWithExcessTroops(BuiltObject ship, bool enforceMinimumTroopLimits)
        {
            TroopList prefilteredTroopsNotBeingPickedUp = new TroopList();
            return FindNearestColonyWithExcessTroops(ship, enforceMinimumTroopLimits, out prefilteredTroopsNotBeingPickedUp);
        }

        public Habitat FindNearestColonyWithExcessTroops(BuiltObject ship, bool enforceMinimumTroopLimits, out TroopList prefilteredTroopsNotBeingPickedUp)
        {
            return FindNearestColonyWithExcessTroops(ship, enforceMinimumTroopLimits, out prefilteredTroopsNotBeingPickedUp, allowTroopTypeFallback: false);
        }

        public Habitat FindNearestColonyWithExcessTroops(BuiltObject ship, bool enforceMinimumTroopLimits, out TroopList prefilteredTroopsNotBeingPickedUp, bool allowTroopTypeFallback)
        {
            double num = double.MaxValue;
            Habitat habitat = null;
            prefilteredTroopsNotBeingPickedUp = new TroopList();
            if (ship != null && ship.Troops != null && ship.Empire != null)
            {
                int infantryAmount = 0;
                int armorAmount = 0;
                int artilleryAmount = 0;
                int specialForcesAmount = 0;
                if (ship.ShipGroup != null)
                {
                    ship.ShipGroup.GetTroopLoadoutTargetAmounts(out infantryAmount, out artilleryAmount, out armorAmount, out specialForcesAmount);
                }
                else
                {
                    ship.GetTroopLoadoutTargetAmounts(out infantryAmount, out artilleryAmount, out armorAmount, out specialForcesAmount);
                }
                int infantryCount = 0;
                int armorCount = 0;
                int artilleryCount = 0;
                int specialForcesCount = 0;
                if (ship.ShipGroup != null)
                {
                    ship.ShipGroup.GetTroopCountsByType(out infantryCount, out artilleryCount, out armorCount, out specialForcesCount);
                }
                else
                {
                    infantryCount = ship.Troops.CountByType(TroopType.Infantry);
                    artilleryCount = ship.Troops.CountByType(TroopType.Artillery);
                    armorCount = ship.Troops.CountByType(TroopType.Armored);
                    specialForcesCount = ship.Troops.CountByType(TroopType.SpecialForces);
                }
                bool flag = infantryAmount > 0 && infantryCount < infantryAmount;
                bool flag2 = armorAmount > 0 && armorCount < armorAmount;
                bool flag3 = artilleryAmount > 0 && artilleryCount < artilleryAmount;
                bool flag4 = specialForcesAmount > 0 && specialForcesCount < specialForcesAmount;
                if (ship.ShipGroup == null && ship.TroopLoadoutInfantry == byte.MaxValue && ship.TroopLoadoutArmored == byte.MaxValue && ship.TroopLoadoutArtillery == byte.MaxValue && ship.TroopLoadoutSpecialForces == byte.MaxValue)
                {
                    flag = true;
                    flag2 = true;
                    flag3 = true;
                    flag4 = true;
                }
                else if (ship.ShipGroup != null && ship.ShipGroup.TroopLoadoutInfantry == byte.MaxValue && ship.ShipGroup.TroopLoadoutArmored == byte.MaxValue && ship.ShipGroup.TroopLoadoutArtillery == byte.MaxValue && ship.ShipGroup.TroopLoadoutSpecialForces == byte.MaxValue)
                {
                    flag = true;
                    flag2 = true;
                    flag3 = true;
                    flag4 = true;
                }
                int num2 = (int)(100.0 * Galaxy.CalculateDefaultTroopMaintenanceMultiplier(TroopType.Infantry));
                int num3 = (int)(100.0 * Galaxy.CalculateDefaultTroopMaintenanceMultiplier(TroopType.Armored));
                int num4 = (int)(100.0 * Galaxy.CalculateDefaultTroopMaintenanceMultiplier(TroopType.Artillery));
                int num5 = (int)(100.0 * Galaxy.CalculateDefaultTroopMaintenanceMultiplier(TroopType.SpecialForces));
                int troopCapacityRemaining = ship.TroopCapacityRemaining;
                if (flag && troopCapacityRemaining < num2)
                {
                    flag = false;
                }
                if (flag3 && troopCapacityRemaining < num4)
                {
                    flag3 = false;
                }
                if (flag2 && troopCapacityRemaining < num3)
                {
                    flag2 = false;
                }
                if (flag4 && troopCapacityRemaining < num5)
                {
                    flag4 = false;
                }
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat2 = Colonies[i];
                    if (habitat2.InvadingTroops != null && habitat2.InvadingTroops.Count > 0)
                    {
                        continue;
                    }
                    int num6 = habitat2.TroopLevelMinimum * 100;
                    if (!enforceMinimumTroopLimits)
                    {
                        num6 = -1;
                    }
                    if (habitat2.Troops == null || habitat2.Troops.TotalDefendStrength <= num6 || habitat2.Troops.Count <= 0 || habitat2.Troops.TotalDefendStrengthNotGarrisonedNotAwaitingPickup <= 0)
                    {
                        continue;
                    }
                    TroopList remainingTroops = new TroopList();
                    int num7 = CalculateTroopStrengthToBePickedUp(habitat2, out remainingTroops);
                    int num8 = habitat2.Troops.TotalDefendStrengthNotGarrisoned;
                    if (enforceMinimumTroopLimits)
                    {
                        int totalDefendStrengthGarrisoned = habitat2.Troops.TotalDefendStrengthGarrisoned;
                        if (num6 > totalDefendStrengthGarrisoned)
                        {
                            num8 -= num6 - totalDefendStrengthGarrisoned;
                        }
                    }
                    num8 -= num7;
                    if (num8 <= 0)
                    {
                        continue;
                    }
                    bool flag5 = false;
                    Troop firstNonGarrisoned = habitat2.Troops.GetFirstNonGarrisoned(TroopType.SpecialForces);
                    Troop firstNonGarrisoned2 = habitat2.Troops.GetFirstNonGarrisoned(TroopType.Armored);
                    Troop firstNonGarrisoned3 = habitat2.Troops.GetFirstNonGarrisoned(TroopType.Artillery);
                    Troop firstNonGarrisoned4 = habitat2.Troops.GetFirstNonGarrisoned(TroopType.Infantry);
                    if (flag4 && firstNonGarrisoned != null)
                    {
                        flag5 = true;
                    }
                    if (flag2 && firstNonGarrisoned2 != null)
                    {
                        flag5 = true;
                    }
                    if (flag3 && firstNonGarrisoned3 != null)
                    {
                        flag5 = true;
                    }
                    if (flag && firstNonGarrisoned4 != null)
                    {
                        flag5 = true;
                    }
                    if (!flag5 && allowTroopTypeFallback && (firstNonGarrisoned4 != null || firstNonGarrisoned3 != null || firstNonGarrisoned2 != null || firstNonGarrisoned != null))
                    {
                        flag5 = true;
                    }
                    if (flag5)
                    {
                        double num9 = _Galaxy.CalculateDistanceSquared(ship.Xpos, ship.Ypos, habitat2.Xpos, habitat2.Ypos);
                        if (num9 < num)
                        {
                            habitat = habitat2;
                            num = num9;
                            prefilteredTroopsNotBeingPickedUp = remainingTroops;
                        }
                    }
                }
                if (habitat == null && !allowTroopTypeFallback)
                {
                    habitat = FindNearestColonyWithExcessTroops(ship, enforceMinimumTroopLimits, out prefilteredTroopsNotBeingPickedUp, allowTroopTypeFallback: true);
                }
            }
            return habitat;
        }

        public int CalculateTroopStrengthToBePickedUp(Habitat colony, out TroopList remainingTroops)
        {
            int num = 0;
            remainingTroops = new TroopList();
            if (colony != null && colony.Troops != null)
            {
                remainingTroops = colony.Troops.GetTroopsNotGarrisonedNotAwaitingPickup();
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject == null || builtObject.TroopCapacity <= 0)
                    {
                        continue;
                    }
                    BuiltObjectMission mission = builtObject.Mission;
                    if (mission == null || mission.Type != BuiltObjectMissionType.LoadTroops || mission.TargetHabitat == null || mission.TargetHabitat != colony || mission.Troops == null)
                    {
                        continue;
                    }
                    num += mission.Troops.TotalDefendStrength;
                    for (int j = 0; j < mission.Troops.Count; j++)
                    {
                        Troop troop = mission.Troops[j];
                        if (troop != null && remainingTroops.Contains(troop))
                        {
                            remainingTroops.Remove(troop);
                        }
                    }
                }
            }
            return num;
        }

        public bool CheckAssignUnloadTroopsAtColonyNeedingThemMission(BuiltObject ship)
        {
            if (ColoniesNeedingTroops != null && ColoniesNeedingTroops.Count > 0 && ship != null && ship.Troops != null && ship.Troops.Count > 0 && !CheckAtWar())
            {
                int num = 65000;
                for (int i = 0; i < ColoniesNeedingTroops.Count; i++)
                {
                    Habitat habitat = ColoniesNeedingTroops[i];
                    if (habitat != null && habitat.Troops != null && habitat.Troops.TotalAttackStrength < num)
                    {
                        return AssignUnloadTroopsAtColonyNeedingThemMission(ship, habitat);
                    }
                }
            }
            return false;
        }

        public bool AssignUnloadTroopsAtColonyNeedingThemMission(BuiltObject ship, Habitat colony)
        {
            if (ship != null && colony != null && colony.Empire == this && ColoniesNeedingTroops != null && ColoniesNeedingTroops.Contains(colony) && ship.Troops.Count > 0)
            {
                ship.AssignMission(BuiltObjectMissionType.UnloadTroops, colony, null, BuiltObjectMissionPriority.Normal);
                ColoniesNeedingTroops.Remove(colony);
                return true;
            }
            return false;
        }

        public bool CheckAssignUnloadTroopsAtColonyNeedingThemMission(ShipGroup fleet)
        {
            if (ColoniesNeedingTroops != null && ColoniesNeedingTroops.Count > 0 && fleet != null && fleet.Ships != null && fleet.TotalTroopCount > 0 && !CheckAtWar())
            {
                int num = 65000;
                for (int i = 0; i < ColoniesNeedingTroops.Count; i++)
                {
                    Habitat habitat = ColoniesNeedingTroops[i];
                    if (habitat != null && habitat.Troops != null && habitat.Troops.TotalAttackStrength < num)
                    {
                        return AssignUnloadTroopsAtColonyNeedingThemMission(fleet, habitat);
                    }
                }
            }
            return false;
        }

        public bool AssignUnloadTroopsAtColonyNeedingThemMission(ShipGroup fleet, Habitat colony)
        {
            if (fleet != null && colony != null && colony.Empire == this && ColoniesNeedingTroops != null && ColoniesNeedingTroops.Contains(colony) && fleet.TotalTroopCount > 0 && AssignFleetUnloadTroops(fleet, colony, manuallyAssigned: false))
            {
                ColoniesNeedingTroops.Remove(colony);
                return true;
            }
            return false;
        }

        public bool CheckAssignGarrisonTroopsAtPenalColonyMission(BuiltObject ship)
        {
            if (ship != null && ship.Troops != null && ship.Troops.Count > 0 && PenalColonies != null)
            {
                for (int i = 0; i < PenalColonies.Count; i++)
                {
                    Habitat habitat = PenalColonies[i];
                    if (habitat != null && habitat.Troops != null && habitat.Troops.TotalDefendStrength / 100 < habitat.TroopLevelRequired)
                    {
                        return AssignGarrisonTroopsAtPenalColonyMission(ship, habitat);
                    }
                }
            }
            return false;
        }

        public bool AssignGarrisonTroopsAtPenalColonyMission(BuiltObject ship, Habitat penalColony)
        {
            if (ship != null && penalColony != null && penalColony.Empire == this && PenalColonies != null && PenalColonies.Contains(penalColony) && ship.Troops.Count > 0)
            {
                ship.AssignMission(BuiltObjectMissionType.UnloadTroops, penalColony, null, BuiltObjectMissionPriority.Normal);
                return true;
            }
            return false;
        }

        public bool AssignLoadTroopsMission(BuiltObject ship)
        {
            return AssignLoadTroopsMission(ship, null);
        }

        public bool AssignLoadTroopsMission(BuiltObject ship, Habitat colony)
        {
            return AssignLoadTroopsMission(ship, colony, queueMission: false, enforceMinimumTroopLimits: true);
        }

        public bool AssignLoadTroopsMission(BuiltObject ship, Habitat colony, bool queueMission, bool enforceMinimumTroopLimits)
        {
            return AssignLoadTroopsMission(ship, colony, queueMission, enforceMinimumTroopLimits, manuallyAssigned: false);
        }

        public bool AssignLoadTroopsMission(BuiltObject ship, Habitat colony, bool queueMission, bool enforceMinimumTroopLimits, bool manuallyAssigned)
        {
            if (ship.Troops != null && ship.TroopCapacity - ship.Troops.TotalSize >= 100)
            {
                Habitat habitat = colony;
                TroopList prefilteredTroopsNotBeingPickedUp = new TroopList();
                if (colony == null)
                {
                    habitat = FindNearestColonyWithExcessTroops(ship, enforceMinimumTroopLimits, out prefilteredTroopsNotBeingPickedUp, allowTroopTypeFallback: false);
                }
                if (habitat != null)
                {
                    bool flag = false;
                    if (habitat.Empire != ship.Empire && habitat.InvadingTroops != null && habitat.InvadingTroops.Count > 0 && habitat.InvadingTroops[0].Empire == ship.Empire)
                    {
                        flag = true;
                        enforceMinimumTroopLimits = false;
                    }
                    if (flag)
                    {
                        for (int i = 0; i < habitat.InvadingTroops.Count; i++)
                        {
                            Troop troop = habitat.InvadingTroops[i];
                            if (troop != null && troop.Empire == ship.Empire)
                            {
                                prefilteredTroopsNotBeingPickedUp.Add(troop);
                            }
                        }
                    }
                    else if (prefilteredTroopsNotBeingPickedUp == null || prefilteredTroopsNotBeingPickedUp.Count <= 0)
                    {
                        prefilteredTroopsNotBeingPickedUp = habitat.Troops.GetTroopsNotGarrisonedNotAwaitingPickup();
                    }
                    if (prefilteredTroopsNotBeingPickedUp.Count > 0)
                    {
                        int num = ship.TroopCapacityRemaining;
                        int num2 = 0;
                        if (flag)
                        {
                            num2 = habitat.InvadingTroops.TotalDefendStrength;
                        }
                        else
                        {
                            num2 = habitat.Troops.TotalDefendStrength;
                            if (enforceMinimumTroopLimits)
                            {
                                int num3 = habitat.TroopLevelMinimum * 100;
                                num2 -= num3;
                            }
                        }
                        TroopList troopList = new TroopList();
                        bool flag2 = false;
                        for (int j = 0; j < prefilteredTroopsNotBeingPickedUp.Count; j++)
                        {
                            Troop troop2 = prefilteredTroopsNotBeingPickedUp[j];
                            if (troop2 != null && num2 - (int)((float)troop2.DefendStrength * troop2.Readiness) >= 0 && num >= troop2.Size)
                            {
                                troopList.Add(troop2);
                                flag2 = true;
                                num -= troop2.Size;
                                num2 -= (int)((float)troop2.DefendStrength * troop2.Readiness);
                                if (num <= 0 || num2 <= 0)
                                {
                                    break;
                                }
                            }
                        }
                        if (flag2 && ship.WithinFuelRange(habitat.Xpos, habitat.Ypos, 0.0))
                        {
                            if (queueMission)
                            {
                                ship.QueueMission(BuiltObjectMissionType.LoadTroops, habitat, null, troopList, BuiltObjectMissionPriority.Normal);
                            }
                            else
                            {
                                ship.ClearPreviousMissionRequirements();
                                ship.AssignMission(BuiltObjectMissionType.LoadTroops, habitat, null, troopList, BuiltObjectMissionPriority.Normal, manuallyAssigned);
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private ShipGroup FindShipGroupAssignedNearPoint(double x, double y)
        {
            double num = 1000.0;
            double num2 = x - num;
            double num3 = x + num;
            double num4 = y - num;
            double num5 = y + num;
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup.Mission != null && shipGroup.Mission.Type != 0)
                {
                    Point point = shipGroup.Mission.ResolveTargetCoordinates(shipGroup.Mission);
                    if ((double)point.X > num2 && (double)point.X < num3 && (double)point.Y > num4 && (double)point.Y < num5)
                    {
                        return shipGroup;
                    }
                }
            }
            return null;
        }

        private ShipGroup FindShipGroupAssignedToLocation(GalaxyLocation location)
        {
            double num = (double)location.Xpos - (double)location.Width / 2.0;
            double num2 = (double)location.Xpos + (double)location.Width / 2.0;
            double num3 = (double)location.Ypos - (double)location.Height / 2.0;
            double num4 = (double)location.Ypos + (double)location.Height / 2.0;
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup.Mission != null && shipGroup.Mission.Type != 0 && (double)shipGroup.Mission.X > num && (double)shipGroup.Mission.X < num2 && (double)shipGroup.Mission.Y > num3 && (double)shipGroup.Mission.Y < num4)
                {
                    return shipGroup;
                }
            }
            return null;
        }

        private void SendAvailableFleetsToGuardSingleStrategicLocation(GalaxyLocation location)
        {
            location.ResolveLocationCenter(out var x, out var y);
            SendAvailableFleetsToGuardSingleStrategicLocation(x, y);
        }

        private void SendAvailableFleetsToGuardSingleStrategicLocation(double x, double y)
        {
            if (!_ControlMilitaryFleets)
            {
                return;
            }
            ShipGroup shipGroup = FindShipGroupAssignedNearPoint(x, y);
            if (shipGroup != null)
            {
                return;
            }
            Habitat habitat = _Galaxy.FastFindNearestColony(x, y, this, 0);
            if (habitat == null)
            {
                return;
            }
            double num = _Galaxy.CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            if (!(num < (double)(Galaxy.SectorSize * 2)))
            {
                return;
            }
            shipGroup = FindNearestAvailableFleet(x, y, BuiltObjectMissionPriority.Low, 0, FleetPosture.Defend, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: true, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0);
            if (shipGroup == null)
            {
                shipGroup = FindNearestAvailableFleet(x, y, BuiltObjectMissionPriority.Low, 0, FleetPosture.Defend, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: true, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: false, 0);
            }
            if (shipGroup != null)
            {
                Habitat habitat2 = _Galaxy.FindLonelyHabitat(x, y);
                if (habitat2 != null)
                {
                    double num2 = _Galaxy.CalculateDistance(habitat2.Xpos, habitat2.Ypos, x, y);
                    if (num2 > 1000.0)
                    {
                        habitat2 = null;
                    }
                }
                long starDate = _Galaxy.CurrentStarDate + Galaxy.Rnd.Next(400000, 550000);
                if (habitat2 != null)
                {
                    shipGroup.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat2, null, starDate, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                }
                else
                {
                    shipGroup.AssignMission(BuiltObjectMissionType.MoveAndWait, null, null, null, null, x, y, starDate, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                }
            }
            else
            {
                SetDefendFleetForLocation(x, y);
            }
        }

        private void SendAvailableFleetsToGuardStrategicLocations()
        {
            if (ShipGroups != null && ShipGroups.Count > 3 && Policy.BuildPlanetDestroyers)
            {
                BuiltObjectList constructionShipsBuildingPlanetDestroyers = ConstructionShips.GetConstructionShipsBuildingPlanetDestroyers();
                for (int i = 0; i < constructionShipsBuildingPlanetDestroyers.Count; i++)
                {
                    BuiltObject builtObject = constructionShipsBuildingPlanetDestroyers[i];
                    if (builtObject != null && builtObject.Mission != null)
                    {
                        Point point = builtObject.Mission.ResolveTargetCoordinates(builtObject.Mission);
                        SendAvailableFleetsToGuardSingleStrategicLocation(point.X, point.Y);
                    }
                }
            }
            if (CheckAtWar())
            {
                return;
            }
            for (int j = 0; j < KnownGalaxyLocations.Count; j++)
            {
                if (KnownGalaxyLocations[j] != null && KnownGalaxyLocations[j].Type == GalaxyLocationType.DebrisField)
                {
                    SendAvailableFleetsToGuardSingleStrategicLocation(KnownGalaxyLocations[j]);
                }
            }
            for (int k = 0; k < KnownGalaxyLocations.Count; k++)
            {
                if (KnownGalaxyLocations[k] != null && KnownGalaxyLocations[k].Type == GalaxyLocationType.PlanetDestroyer)
                {
                    SendAvailableFleetsToGuardSingleStrategicLocation(KnownGalaxyLocations[k]);
                }
            }
        }

        private GalaxyLocation CheckWhetherAtLocation(double x, double y)
        {
            for (int i = 0; i < KnownGalaxyLocations.Count; i++)
            {
                double num = (double)KnownGalaxyLocations[i].Xpos - (double)KnownGalaxyLocations[i].Width / 2.0;
                double num2 = (double)KnownGalaxyLocations[i].Xpos + (double)KnownGalaxyLocations[i].Width / 2.0;
                double num3 = (double)KnownGalaxyLocations[i].Ypos - (double)KnownGalaxyLocations[i].Height / 2.0;
                double num4 = (double)KnownGalaxyLocations[i].Ypos + (double)KnownGalaxyLocations[i].Height / 2.0;
                if (x > num && x < num2 && y > num3 && y < num4)
                {
                    return KnownGalaxyLocations[i];
                }
            }
            return null;
        }

        private BuiltObject SelectBestSalvageableShip(GalaxyLocation location)
        {
            BuiltObject builtObject = null;
            if (location != null && location.Type == GalaxyLocationType.DebrisField)
            {
                BuiltObjectList builtObjectList = _Galaxy.FindAbandonedShipsInDebrisField(location);
                for (int i = 0; i < builtObjectList.Count; i++)
                {
                    if (builtObjectList[i].BuiltAt == null)
                    {
                        if (builtObject == null)
                        {
                            builtObject = builtObjectList[i];
                        }
                        else if (builtObjectList[i].Size > builtObject.Size)
                        {
                            builtObject = builtObjectList[i];
                        }
                    }
                }
            }
            return builtObject;
        }

        public EmpirePriorityList ResolveEnemyEmpires(int attitudeThreshold)
        {
            EmpirePriorityList empirePriorityList = new EmpirePriorityList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                bool flag = false;
                switch (diplomaticRelation.Strategy)
                {
                    case DiplomaticStrategy.Conquer:
                    case DiplomaticStrategy.Undermine:
                    case DiplomaticStrategy.DefendUndermine:
                    case DiplomaticStrategy.Punish:
                        flag = true;
                        break;
                }
                if (flag && diplomaticRelation.Type != 0)
                {
                    EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(diplomaticRelation.OtherEmpire);
                    double val = (double)(empireEvaluation.OverallAttitude - attitudeThreshold) * -1.0;
                    val = Math.Max(0.0, val);
                    double priority = (double)empireEvaluation.Empire.MilitaryPotency * val;
                    empirePriorityList.Add(new EmpirePriority(empireEvaluation.Empire, priority));
                }
            }
            empirePriorityList.Sort();
            empirePriorityList.Reverse();
            return empirePriorityList;
        }

        public double CalculatePirateAttackCost(Empire empireToAttack)
        {
            double value = (double)empireToAttack.TotalColonyStrategicValue / 100.0;
            value = Math.Round(value, 0);
            return Math.Max(2000.0, Math.Min(value, 15000.0));
        }

        public void DetermineEmpiresPirateWillingToAttack(Empire pirateFaction, Empire requestingEmpire, bool onlyUnfriendlyEmpires, out EmpireList empiresWillingToAttack, out List<double> attackCosts)
        {
            empiresWillingToAttack = new EmpireList();
            attackCosts = new List<double>();
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == requestingEmpire)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation = requestingEmpire.ObtainDiplomaticRelation(empire);
                if (diplomaticRelation.Type == DiplomaticRelationType.NotMet || pirateFaction.PirateMissions.Contains(empire, EmpireActivityType.Attack) || !_Galaxy.DetermineEmpireColonyNearPoint(pirateFaction.PirateEmpireBaseHabitat.Xpos, pirateFaction.PirateEmpireBaseHabitat.Ypos, empire, Galaxy.PirateEmpireAttackDistance))
                {
                    continue;
                }
                bool flag = true;
                if (onlyUnfriendlyEmpires)
                {
                    flag = false;
                    if (diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                    {
                        flag = true;
                    }
                    else
                    {
                        EmpireEvaluation empireEvaluation = requestingEmpire.ObtainEmpireEvaluation(empire);
                        int num = -6;
                        num -= (int)empireEvaluation.Bias;
                        if (empireEvaluation.OverallAttitude <= num)
                        {
                            flag = true;
                        }
                    }
                }
                if (flag)
                {
                    empiresWillingToAttack.Add(empire);
                    double item = CalculatePirateAttackCost(empire);
                    attackCosts.Add(item);
                }
            }
        }

        public void GenerateSaleableInfoForEmpire(Empire pirateFaction, Empire buyingEmpire, out EmpireList unmetEmpires, out HabitatList unexploredSystems, out HabitatList independentColonies, out HabitatList ruinHabitats, out GalaxyLocationList debrisFieldLocations, out GalaxyLocationList planetDestroyerLocations, out GalaxyLocationList restrictedAreaLocations)
        {
            unmetEmpires = new EmpireList();
            unexploredSystems = new HabitatList();
            independentColonies = new HabitatList();
            ruinHabitats = new HabitatList();
            debrisFieldLocations = new GalaxyLocationList();
            planetDestroyerLocations = new GalaxyLocationList();
            restrictedAreaLocations = new GalaxyLocationList();
            if (buyingEmpire == null || pirateFaction == null || pirateFaction.PirateEmpireBaseHabitat == null)
            {
                return;
            }
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == null || empire == buyingEmpire)
                {
                    continue;
                }
                bool flag = false;
                if (pirateFaction.PirateEmpireBaseHabitat != null)
                {
                    PirateRelation pirateRelation = pirateFaction.ObtainPirateRelation(empire);
                    if (pirateRelation.Type != 0)
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    continue;
                }
                if (buyingEmpire.PirateEmpireBaseHabitat != null)
                {
                    PirateRelation pirateRelation2 = buyingEmpire.ObtainPirateRelation(empire);
                    if (pirateRelation2.Type == PirateRelationType.NotMet)
                    {
                        unmetEmpires.Add(empire);
                    }
                    continue;
                }
                DiplomaticRelation diplomaticRelation = buyingEmpire.ObtainDiplomaticRelation(empire);
                if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
                {
                    PirateRelation pirateRelation3 = pirateFaction.ObtainPirateRelation(empire);
                    if (pirateRelation3.Type != 0)
                    {
                        unmetEmpires.Add(empire);
                    }
                }
            }
            if (buyingEmpire.Capital != null)
            {
                Habitat habitat = _Galaxy.FindNearestUnexploredSystem(buyingEmpire.Capital.Xpos, buyingEmpire.Capital.Ypos, buyingEmpire);
                if (habitat != null && pirateFaction.CheckSystemExplored(habitat.SystemIndex))
                {
                    unexploredSystems.Add(habitat);
                }
            }
            else if (buyingEmpire.PirateEmpireBaseHabitat != null)
            {
                Habitat habitat2 = _Galaxy.FindNearestUnexploredSystem(buyingEmpire.PirateEmpireBaseHabitat.Xpos, buyingEmpire.PirateEmpireBaseHabitat.Ypos, buyingEmpire);
                if (habitat2 != null && pirateFaction.CheckSystemExplored(habitat2.SystemIndex))
                {
                    unexploredSystems.Add(habitat2);
                }
            }
            for (int j = 0; j < _Galaxy.Habitats.Count; j++)
            {
                Habitat habitat3 = _Galaxy.Habitats[j];
                if (habitat3.Empire == _Galaxy.IndependentEmpire && pirateFaction.CheckSystemExplored(habitat3.SystemIndex) && !buyingEmpire.CheckSystemExplored(habitat3.SystemIndex))
                {
                    independentColonies.Add(habitat3);
                }
            }
            for (int k = 0; k < _Galaxy.Habitats.Count; k++)
            {
                Habitat habitat4 = _Galaxy.Habitats[k];
                if (habitat4.Ruin != null && (habitat4.Empire == null || habitat4.Empire == _Galaxy.IndependentEmpire) && pirateFaction.CheckSystemExplored(habitat4.SystemIndex))
                {
                    double num = _Galaxy.CalculateDistance(habitat4.Xpos, habitat4.Ypos, pirateFaction.PirateEmpireBaseHabitat.Xpos, pirateFaction.PirateEmpireBaseHabitat.Ypos);
                    if (num < (double)Galaxy.SectorSize * 2.0 && !buyingEmpire.CheckSystemExplored(habitat4.SystemIndex))
                    {
                        ruinHabitats.Add(habitat4);
                    }
                }
            }
            if (buyingEmpire.KnownGalaxyLocations == null)
            {
                return;
            }
            for (int l = 0; l < pirateFaction.KnownGalaxyLocations.Count; l++)
            {
                GalaxyLocation galaxyLocation = pirateFaction.KnownGalaxyLocations[l];
                if (galaxyLocation == null)
                {
                    continue;
                }
                if (galaxyLocation.Type == GalaxyLocationType.DebrisField)
                {
                    if (!buyingEmpire.KnownGalaxyLocations.Contains(galaxyLocation))
                    {
                        galaxyLocation.ResolveLocationCenter(out var x, out var y);
                        double num2 = _Galaxy.CalculateDistance(x, y, pirateFaction.PirateEmpireBaseHabitat.Xpos, pirateFaction.PirateEmpireBaseHabitat.Ypos);
                        if (num2 < (double)Galaxy.SectorSize * 3.0)
                        {
                            debrisFieldLocations.Add(galaxyLocation);
                        }
                    }
                }
                else if (galaxyLocation.Type == GalaxyLocationType.PlanetDestroyer)
                {
                    if (!buyingEmpire.KnownGalaxyLocations.Contains(galaxyLocation))
                    {
                        galaxyLocation.ResolveLocationCenter(out var x2, out var y2);
                        double num3 = _Galaxy.CalculateDistance(x2, y2, pirateFaction.PirateEmpireBaseHabitat.Xpos, pirateFaction.PirateEmpireBaseHabitat.Ypos);
                        if (num3 < (double)Galaxy.SectorSize * 3.0)
                        {
                            planetDestroyerLocations.Add(galaxyLocation);
                        }
                    }
                }
                else if (galaxyLocation.Type == GalaxyLocationType.RestrictedArea && (_Galaxy.StoryCluesEnabled || (galaxyLocation.Name != TextResolver.GetText("Dead Zone") && galaxyLocation.Name != string.Format(TextResolver.GetText("NAME Weapons Testing Range"), "Pozdac"))) && !buyingEmpire.KnownGalaxyLocations.Contains(galaxyLocation))
                {
                    galaxyLocation.ResolveLocationCenter(out var x3, out var y3);
                    double num4 = _Galaxy.CalculateDistance(x3, y3, pirateFaction.PirateEmpireBaseHabitat.Xpos, pirateFaction.PirateEmpireBaseHabitat.Ypos);
                    if (num4 < (double)Galaxy.SectorSize * 3.0)
                    {
                        restrictedAreaLocations.Add(galaxyLocation);
                    }
                }
            }
        }

        private void ReviewIndependentColonyTargets()
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            HabitatList habitatList = DetermineHabitatsBeingColonized();
            for (int i = 0; i < habitatList.Count; i++)
            {
                Habitat habitat = habitatList[i];
                if (habitat.Empire == _Galaxy.IndependentEmpire)
                {
                    HabitatPrioritization habitatPrioritization = new HabitatPrioritization(habitat, 0);
                    BuiltObject builtObject = (habitatPrioritization.AssignedShip = DetermineShipGuarding(habitat));
                    habitatPrioritizationList.Add(habitatPrioritization);
                }
            }
            _IndependentColonyTargets = habitatPrioritizationList;
        }

        private BuiltObject DetermineShipGuarding(Habitat habitat)
        {
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject.Role == BuiltObjectRole.Military && builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.MoveAndWait && builtObject.Mission.TargetHabitat == habitat)
                {
                    return builtObject;
                }
            }
            return null;
        }

        public BuiltObjectList ResolvePrioritizedPatrolMiningStations()
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            bool flag = CheckEmpireHasHyperDriveTech(this);
            for (int i = 0; i < MiningStations.Count; i++)
            {
                BuiltObject builtObject = MiningStations[i];
                if (builtObject != null && (builtObject.SubRole == BuiltObjectSubRole.MiningStation || builtObject.SubRole == BuiltObjectSubRole.GasMiningStation) && builtObject.ParentHabitat != null)
                {
                    double num = 0.0;
                    num = ((builtObject.ExtractionLuxury <= 0) ? builtObject.ParentHabitat.CalculateCurrentStrategicResourceValue(_Galaxy) : builtObject.ParentHabitat.CalculateCurrentCompleteResourceValue(_Galaxy));
                    if (builtObject.ParentHabitat.Resources.HasFuelResources())
                    {
                        num *= 5.0;
                    }
                    else if (!flag)
                    {
                        num /= 5.0;
                    }
                    num /= 50.0;
                    num = Math.Min(num, 60.0);
                    if (builtObject.CurrentEscortForceAssigned < (int)num)
                    {
                        builtObject.SortTag = num;
                        builtObjectList.Add(builtObject);
                    }
                }
            }
            builtObjectList.Sort();
            builtObjectList.Reverse();
            return builtObjectList;
        }

        public void AssignMissionsToBuiltObjectList(BuiltObjectList builtObjectList, bool atWar, BuiltObjectList patrolMiningStations)
        {
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject ship = builtObjectList[i];
                AssignMissionToBuiltObject(ship, atWar, patrolMiningStations);
            }
        }

        public void AssignMissionToBuiltObject(BuiltObject ship, bool atWar, BuiltObjectList patrolMiningStations)
        {
            int refusalCount = 0;
            if (ship == null || ship.TopSpeed <= 0 || ship.BuiltAt != null || !ship.IsAutoControlled || (ship.Mission != null && ship.Mission.Type != 0))
            {
                return;
            }
            if (ship.Empire != null && ship.Empire != _Galaxy.IndependentEmpire && !_Galaxy.PirateEmpires.Contains(ship.Empire))
            {
                if (ship.RetireForNextMission)
                {
                    if (ship.ShipGroup != null)
                    {
                        if (ship.ShipGroup.Mission == null || ship.ShipGroup.Mission.Type == BuiltObjectMissionType.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Low)
                        {
                            ship.LeaveShipGroup();
                            if (AssignScrapMission(ship))
                            {
                                ship.RetireForNextMission = false;
                                return;
                            }
                        }
                    }
                    else if (AssignScrapMission(ship))
                    {
                        ship.RetireForNextMission = false;
                        return;
                    }
                }
                if (ship.RetrofitForNextMission)
                {
                    if (ship.ShipGroup != null)
                    {
                        if ((ship.ShipGroup.Mission == null || ship.ShipGroup.Mission.Type == BuiltObjectMissionType.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Undefined || ship.ShipGroup.Mission.Priority == BuiltObjectMissionPriority.Low) && AssignRetrofitMission(ship))
                        {
                            ship.RetrofitForNextMission = false;
                            return;
                        }
                    }
                    else if (AssignRetrofitMission(ship))
                    {
                        ship.RetrofitForNextMission = false;
                        return;
                    }
                }
                if (ship.RepairForNextMission)
                {
                    if (ship.DamagedComponentCount > 0)
                    {
                        if (AssignRepairMission(ship))
                        {
                            ship.RepairForNextMission = false;
                            return;
                        }
                    }
                    else
                    {
                        ship.RepairForNextMission = false;
                    }
                }
            }
            if (ship.RefuelForNextMission)
            {
                bool flag = true;
                if (ship.ShipGroup != null)
                {
                    flag = false;
                    double num = ship.CurrentFuel / Math.Max(1.0, ship.FuelCapacity);
                    if (num < 0.05)
                    {
                        flag = true;
                    }
                }
                if (flag)
                {
                    ship.SetupRefuelling();
                    return;
                }
            }
            if (ship.Empire == null || ship.Empire == _Galaxy.IndependentEmpire || _Galaxy.PirateEmpires.Contains(ship.Empire))
            {
                return;
            }
            bool flag2 = true;
            if (DominantRace != null)
            {
                flag2 = DominantRace.Expanding;
            }
            if (ship.ShipGroup != null)
            {
                return;
            }
            switch (ship.SubRole)
            {
                case BuiltObjectSubRole.SmallFreighter:
                case BuiltObjectSubRole.MediumFreighter:
                case BuiltObjectSubRole.LargeFreighter:
                    {
                        float num5 = 1f;
                        if (Freighters != null)
                        {
                            num5 = (float)Math.Max(1, Freighters.Count) / (float)Math.Max(1, _EmpireOrderCount);
                        }
                        double num6 = 0.67;
                        if (ship.WarpSpeed > 0)
                        {
                            num6 = 0.33;
                        }
                        num6 /= Math.Sqrt(Math.Max(0.25, num5));
                        num6 = Math.Max(0.25, Math.Min(0.8, num6));
                        bool flag4 = false;
                        if (Galaxy.Rnd.NextDouble() > num6)
                        {
                            flag4 = true;
                        }
                        bool flag5 = false;
                        if (flag4)
                        {
                            int num7 = 0;
                            HabitatList habitatList = new HabitatList();
                            HabitatList habitatList2 = new HabitatList();
                            for (int k = 0; k < SpacePorts.Count; k++)
                            {
                                BuiltObject builtObject3 = SpacePorts[k];
                                if (builtObject3 != null && builtObject3.IsSpacePort && builtObject3.ParentHabitat != null)
                                {
                                    habitatList2.Add(builtObject3.ParentHabitat);
                                }
                            }
                            for (int l = 0; l < Colonies.Count; l++)
                            {
                                Habitat item = Colonies[l];
                                if (!habitatList2.Contains(item))
                                {
                                    habitatList.Add(item);
                                }
                            }
                            num7 = Galaxy.Rnd.Next(0, habitatList.Count);
                            for (int m = num7; m < habitatList.Count; m++)
                            {
                                if (CheckColonyForResourceClearance(ship, habitatList[m]))
                                {
                                    flag5 = true;
                                    break;
                                }
                            }
                            if (!flag5)
                            {
                                for (int n = 0; n < num7; n++)
                                {
                                    if (CheckColonyForResourceClearance(ship, habitatList[n]))
                                    {
                                        flag5 = true;
                                        break;
                                    }
                                }
                            }
                            if (!flag5)
                            {
                                ResourceList empireDeficientResources = IdentifyDeficientEmpireResources();
                                num7 = Galaxy.Rnd.Next(0, MiningStations.Count);
                                for (int num8 = num7; num8 < MiningStations.Count; num8++)
                                {
                                    BuiltObject builtObject4 = MiningStations[num8];
                                    if (builtObject4 != null && builtObject4.IsSpacePort && builtObject4.IsResourceExtractor && CheckMiningStationForResourceClearance(ship, builtObject4, empireDeficientResources))
                                    {
                                        flag5 = true;
                                        break;
                                    }
                                }
                                if (!flag5)
                                {
                                    for (int num9 = 0; num9 < num7; num9++)
                                    {
                                        BuiltObject builtObject5 = MiningStations[num9];
                                        if (builtObject5 != null && builtObject5.IsSpacePort && builtObject5.IsResourceExtractor && CheckMiningStationForResourceClearance(ship, builtObject5, empireDeficientResources))
                                        {
                                            flag5 = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (flag5 || (ship.Mission != null && ship.Mission.Type != 0))
                        {
                            break;
                        }
                        StellarObject stellarObject2 = _Galaxy.FastFindNearestColony((int)ship.Xpos, (int)ship.Ypos, ship.Empire, 0);
                        if (stellarObject2 == null)
                        {
                            break;
                        }
                        double num10 = _Galaxy.CalculateDistance(ship.Xpos, ship.Ypos, stellarObject2.Xpos, stellarObject2.Ypos);
                        double num11 = (double)Galaxy.SectorSize * 2.5;
                        if (ship.WarpSpeed <= 0)
                        {
                            StellarObject stellarObject3 = _Galaxy.FindNearestStationaryStellarObject(ship.Xpos, ship.Ypos, ship.Empire);
                            num11 = 2000.0;
                            if (stellarObject3 != null)
                            {
                                num10 = _Galaxy.CalculateDistance(ship.Xpos, ship.Ypos, stellarObject3.Xpos, stellarObject3.Ypos);
                                stellarObject2 = stellarObject3;
                            }
                        }
                        if (num10 > num11 && stellarObject2 != null && ship.WithinFuelRange(stellarObject2.Xpos, stellarObject2.Ypos, 0.0))
                        {
                            ship.AssignMission(BuiltObjectMissionType.Move, stellarObject2, null, BuiltObjectMissionPriority.Normal);
                        }
                        break;
                    }
                case BuiltObjectSubRole.ColonyShip:
                    {
                        if (DominantRace == null || !DominantRace.Expanding)
                        {
                            break;
                        }
                        _ColonizationTargets.Sort();
                        _ColonizationTargets.Reverse();
                        for (int num12 = 0; num12 < _ColonizationTargets.Count; num12++)
                        {
                            HabitatPrioritization habitatPrioritization = _ColonizationTargets[num12];
                            if (habitatPrioritization.AssignedShip != null)
                            {
                                if (habitatPrioritization.AssignedShip.BuiltAt == null || habitatPrioritization.AssignedShip == ship)
                                {
                                    continue;
                                }
                                int newPopulationAmount = 0;
                                if (CanBuiltObjectColonizeHabitat(ship, habitatPrioritization.Habitat, out newPopulationAmount) && habitatPrioritization.Priority >= Galaxy.HabitatColonizationThreshhold && DetermineColonizeLowQualityHabitat(habitatPrioritization.Habitat) && ship.WithinFuelRange(habitatPrioritization.Habitat.Xpos, habitatPrioritization.Habitat.Ypos, 0.0) && _ControlColonization == AutomationLevel.FullyAutomated)
                                {
                                    if (habitatPrioritization.AssignedShip != null)
                                    {
                                        habitatPrioritization.AssignedShip.Mission.Clear();
                                    }
                                    ship.AssignMission(BuiltObjectMissionType.Colonize, habitatPrioritization.Habitat, null, BuiltObjectMissionPriority.Normal);
                                    habitatPrioritization.AssignedShip = ship;
                                    break;
                                }
                            }
                            else
                            {
                                int newPopulationAmount2 = 0;
                                if (CanBuiltObjectColonizeHabitat(ship, habitatPrioritization.Habitat, out newPopulationAmount2) && habitatPrioritization.Priority >= Galaxy.HabitatColonizationThreshhold && DetermineColonizeLowQualityHabitat(habitatPrioritization.Habitat) && ship.WithinFuelRange(habitatPrioritization.Habitat.Xpos, habitatPrioritization.Habitat.Ypos, 0.0) && CheckColonizingHabitat(habitatPrioritization.Habitat) == null && CheckTaskAuthorized(_ControlColonization, ref refusalCount, GenerateAutomationMessageColonization(habitatPrioritization.Habitat, ship, null), habitatPrioritization.Habitat, AdvisorMessageType.Colonization, ship, null))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.Colonize, habitatPrioritization.Habitat, null, BuiltObjectMissionPriority.Normal);
                                    habitatPrioritization.AssignedShip = ship;
                                    break;
                                }
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.Escort:
                case BuiltObjectSubRole.Frigate:
                case BuiltObjectSubRole.Destroyer:
                case BuiltObjectSubRole.Cruiser:
                case BuiltObjectSubRole.CapitalShip:
                case BuiltObjectSubRole.Carrier:
                    {
                        if (ship.IsPlanetDestroyer && ship.ShipGroup == null)
                        {
                            if (Galaxy.Rnd.Next(0, 2) == 1)
                            {
                                Habitat habitat12 = _Galaxy.FastFindNearestColony((int)ship.Xpos, (int)ship.Ypos, ship.Empire, 0);
                                if (habitat12 != null)
                                {
                                    _Galaxy.SelectRelativeParkingPoint(250.0, out var x6, out var y6);
                                    ship.AssignMission(BuiltObjectMissionType.Move, habitat12, null, x6, y6, BuiltObjectMissionPriority.Low);
                                }
                                break;
                            }
                            Habitat habitat13 = _Galaxy.FindNearestUncolonizedExploredSystem(ship.Xpos, ship.Ypos, ship.Empire);
                            if (habitat13 != null)
                            {
                                Habitat habitat14 = null;
                                HabitatList habitats = _Galaxy.Systems[habitat13.SystemIndex].Habitats;
                                if (habitats != null && habitats.Count > 0)
                                {
                                    habitat14 = habitats[Galaxy.Rnd.Next(0, habitats.Count)];
                                }
                                if (habitat14 != null)
                                {
                                    _Galaxy.SelectRelativeParkingPoint(250.0, out var x7, out var y7);
                                    ship.AssignMission(BuiltObjectMissionType.Move, habitat14, null, x7, y7, BuiltObjectMissionPriority.Low);
                                }
                            }
                            break;
                        }
                        if (_DangerousHabitats != null && _DangerousHabitats.Count > 0 && Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            int index = Galaxy.Rnd.Next(0, _DangerousHabitats.Count);
                            Habitat habitat15 = _DangerousHabitats[index];
                            if (habitat15 != null && ship.WithinFuelRangeAndRefuel(habitat15.Xpos, habitat15.Ypos, 0.1) && _Galaxy.CheckMilitaryShipWelcomeAtTerritoryLocation(habitat15.Xpos, habitat15.Ypos, ship.Empire))
                            {
                                long starDate = _Galaxy.CurrentStarDate + (long)((double)Galaxy.RealSecondsInGalacticYear * 0.25 * 1000.0);
                                ship.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat15, null, -2000000001.0, -2000000001.0, starDate, BuiltObjectMissionPriority.Normal, allowReprocessing: false);
                                _DangerousHabitats.Remove(habitat15);
                                break;
                            }
                        }
                        if (_IndependentColonyTargets.Count > 0)
                        {
                            for (int num51 = 0; num51 < _IndependentColonyTargets.Count; num51++)
                            {
                                HabitatPrioritization habitatPrioritization4 = _IndependentColonyTargets[num51];
                                if (habitatPrioritization4.AssignedShip == null && habitatPrioritization4.Habitat != null && _Galaxy.CheckMilitaryShipWelcomeAtTerritoryLocation(habitatPrioritization4.Habitat.Xpos, habitatPrioritization4.Habitat.Ypos, ship.Empire) && ship.WithinFuelRangeAndRefuel(habitatPrioritization4.Habitat.Xpos, habitatPrioritization4.Habitat.Ypos, 0.1))
                                {
                                    long starDate2 = _Galaxy.CurrentStarDate + (long)((double)Galaxy.RealSecondsInGalacticYear * 0.5 * 1000.0);
                                    ship.AssignMission(BuiltObjectMissionType.MoveAndWait, habitatPrioritization4.Habitat, null, -2000000001.0, -2000000001.0, starDate2, BuiltObjectMissionPriority.Low, allowReprocessing: false);
                                    habitatPrioritization4.AssignedShip = ship;
                                    return;
                                }
                            }
                        }
                        if (_EmpiresToAttack.Count > 0)
                        {
                            Habitat habitat16 = _Galaxy.FastFindNearestColony((int)ship.Xpos, (int)ship.Ypos, _EmpiresToAttack[0], 100);
                            if (habitat16 != null && CheckSystemExplored(habitat16.SystemIndex) && ship.WithinFuelRangeAndRefuel(habitat16.Xpos, habitat16.Ypos, 0.1))
                            {
                                ship.AssignMission(BuiltObjectMissionType.Move, habitat16, null, BuiltObjectMissionPriority.Normal);
                                break;
                            }
                        }
                        if (!Reclusive && ship.Troops != null && ship.TroopCapacity - ship.Troops.TotalSize >= 100 && Galaxy.Rnd.Next(0, 2) == 1 && AssignLoadTroopsMission(ship))
                        {
                            break;
                        }
                        int num52 = Galaxy.Rnd.Next(0, 8);
                        if ((ship.SubRole == BuiltObjectSubRole.Cruiser || ship.SubRole == BuiltObjectSubRole.CapitalShip || ship.SubRole == BuiltObjectSubRole.Carrier) && num52 < 3)
                        {
                            num52 = 4;
                        }
                        bool flag15 = CheckEmpireHasHyperDriveTech(this);
                        if (!flag15)
                        {
                            num52 = 4;
                        }
                        if (atWar)
                        {
                            num52 += 2;
                            num52 = Math.Min(num52, 7);
                        }
                        switch (num52)
                        {
                            case 0:
                            case 1:
                            case 2:
                                {
                                    for (int num61 = 0; num61 < BuiltObjects.Count; num61++)
                                    {
                                        BuiltObject builtObject17 = BuiltObjects[num61];
                                        if (builtObject17.IsColony && builtObject17.Mission != null && builtObject17.Mission.Type != 0 && builtObject17.CurrentEscortForceAssigned < builtObject17.Size / 50 && builtObject17 != ship && ship.WithinFuelRangeAndRefuel(builtObject17.Xpos, builtObject17.Ypos, 0.1) && (ship.WarpSpeed > 0 || builtObject17.WarpSpeed <= 0))
                                        {
                                            Point point2 = builtObject17.Mission.ResolveTargetCoordinates(builtObject17.Mission);
                                            if (_Galaxy.CheckMilitaryShipWelcomeAtTerritoryLocation(point2.X, point2.Y, ship.Empire))
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Escort, builtObject17, null, BuiltObjectMissionPriority.Normal);
                                                builtObject17.CurrentEscortForceAssigned += ship.FirepowerRaw;
                                                break;
                                            }
                                        }
                                    }
                                    for (int num62 = 0; num62 < BuiltObjects.Count; num62++)
                                    {
                                        BuiltObject builtObject18 = BuiltObjects[num62];
                                        if (builtObject18.SubRole == BuiltObjectSubRole.ConstructionShip && builtObject18.Mission != null && builtObject18.Mission.Type != 0 && builtObject18.CurrentEscortForceAssigned < builtObject18.Size / 10 && builtObject18 != ship && ship.WithinFuelRangeAndRefuel(builtObject18.Xpos, builtObject18.Ypos, 0.1) && (ship.WarpSpeed > 0 || builtObject18.WarpSpeed <= 0))
                                        {
                                            Point point3 = builtObject18.Mission.ResolveTargetCoordinates(builtObject18.Mission);
                                            if (_Galaxy.CheckMilitaryShipWelcomeAtTerritoryLocation(point3.X, point3.Y, ship.Empire))
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Escort, builtObject18, null, BuiltObjectMissionPriority.Normal);
                                                builtObject18.CurrentEscortForceAssigned += ship.FirepowerRaw;
                                                break;
                                            }
                                        }
                                    }
                                    for (int num63 = 0; num63 < ResourceExtractors.Count; num63++)
                                    {
                                        BuiltObject builtObject19 = ResourceExtractors[num63];
                                        if (builtObject19.IsResourceExtractor && builtObject19.Mission != null && builtObject19.Mission.Type != 0 && builtObject19.CurrentEscortForceAssigned < builtObject19.Size / 50 && builtObject19 != ship && ship.WithinFuelRangeAndRefuel(builtObject19.Xpos, builtObject19.Ypos, 0.1) && (ship.WarpSpeed > 0 || builtObject19.WarpSpeed <= 0))
                                        {
                                            Point point4 = builtObject19.Mission.ResolveTargetCoordinates(builtObject19.Mission);
                                            if (_Galaxy.CheckMilitaryShipWelcomeAtTerritoryLocation(point4.X, point4.Y, ship.Empire))
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Escort, builtObject19, null, BuiltObjectMissionPriority.Normal);
                                                builtObject19.CurrentEscortForceAssigned += ship.FirepowerRaw;
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                {
                                    if (ship.Mission != null && ship.Mission.Type == BuiltObjectMissionType.Patrol)
                                    {
                                        break;
                                    }
                                    bool flag16 = false;
                                    if (flag15)
                                    {
                                        if (patrolMiningStations == null)
                                        {
                                            patrolMiningStations = ResolvePrioritizedPatrolMiningStations();
                                        }
                                        for (int num53 = 0; num53 < patrolMiningStations.Count; num53++)
                                        {
                                            BuiltObject builtObject15 = patrolMiningStations[num53];
                                            if (builtObject15 != null && builtObject15.CurrentEscortForceAssigned < (int)builtObject15.SortTag && ship.WithinFuelRangeAndRefuel(builtObject15.Xpos, builtObject15.Ypos, 0.1) && _Galaxy.CheckMilitaryShipWelcomeAtTerritoryLocation(builtObject15.Xpos, builtObject15.Ypos, ship.Empire))
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Patrol, builtObject15, null, BuiltObjectMissionPriority.Low);
                                                builtObject15.CurrentEscortForceAssigned += ship.FirepowerRaw;
                                                flag16 = true;
                                                break;
                                            }
                                        }
                                        if (flag16)
                                        {
                                            break;
                                        }
                                        int num54 = Galaxy.Rnd.Next(0, Colonies.Count);
                                        for (int num55 = num54; num55 < Colonies.Count; num55++)
                                        {
                                            Habitat habitat17 = Colonies[num55];
                                            if (habitat17.CurrentDefensiveForceAssigned < habitat17.EstimatedDefensiveForceRequired(atWar) && ship.WithinFuelRangeAndRefuel(habitat17.Xpos, habitat17.Ypos, 0.1))
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Patrol, habitat17, null, BuiltObjectMissionPriority.Low);
                                                habitat17.CurrentDefensiveForceAssigned += ship.FirepowerRaw;
                                                flag16 = true;
                                                break;
                                            }
                                        }
                                        if (flag16)
                                        {
                                            break;
                                        }
                                        for (int num56 = 0; num56 < num54; num56++)
                                        {
                                            Habitat habitat18 = Colonies[num56];
                                            if (habitat18.CurrentDefensiveForceAssigned < habitat18.EstimatedDefensiveForceRequired(atWar) && ship.WithinFuelRangeAndRefuel(habitat18.Xpos, habitat18.Ypos, 0.1))
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Patrol, habitat18, null, BuiltObjectMissionPriority.Low);
                                                habitat18.CurrentDefensiveForceAssigned += ship.FirepowerRaw;
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                    int num57 = Galaxy.Rnd.Next(0, Colonies.Count);
                                    for (int num58 = num57; num58 < Colonies.Count; num58++)
                                    {
                                        Habitat habitat19 = Colonies[num58];
                                        if (habitat19 != null && habitat19.CurrentDefensiveForceAssigned < habitat19.EstimatedDefensiveForceRequired(atWar) && ship.WithinFuelRangeAndRefuel(habitat19.Xpos, habitat19.Ypos, 0.1))
                                        {
                                            ship.AssignMission(BuiltObjectMissionType.Patrol, habitat19, null, BuiltObjectMissionPriority.Low);
                                            habitat19.CurrentDefensiveForceAssigned += ship.FirepowerRaw;
                                            flag16 = true;
                                            break;
                                        }
                                    }
                                    if (!flag16)
                                    {
                                        for (int num59 = 0; num59 < num57; num59++)
                                        {
                                            Habitat habitat20 = Colonies[num59];
                                            if (habitat20 != null && habitat20.CurrentDefensiveForceAssigned < habitat20.EstimatedDefensiveForceRequired(atWar) && ship.WithinFuelRangeAndRefuel(habitat20.Xpos, habitat20.Ypos, 0.1))
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Patrol, habitat20, null, BuiltObjectMissionPriority.Low);
                                                habitat20.CurrentDefensiveForceAssigned += ship.FirepowerRaw;
                                                flag16 = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (flag16)
                                    {
                                        break;
                                    }
                                    if (patrolMiningStations == null)
                                    {
                                        patrolMiningStations = ResolvePrioritizedPatrolMiningStations();
                                    }
                                    for (int num60 = 0; num60 < patrolMiningStations.Count; num60++)
                                    {
                                        BuiltObject builtObject16 = patrolMiningStations[num60];
                                        if (builtObject16 != null && builtObject16.CurrentEscortForceAssigned < (int)builtObject16.SortTag && ship.WithinFuelRangeAndRefuel(builtObject16.Xpos, builtObject16.Ypos, 0.1) && _Galaxy.CheckMilitaryShipWelcomeAtTerritoryLocation(builtObject16.Xpos, builtObject16.Ypos, ship.Empire))
                                        {
                                            ship.AssignMission(BuiltObjectMissionType.Patrol, builtObject16, null, BuiltObjectMissionPriority.Low);
                                            builtObject16.CurrentEscortForceAssigned += ship.FirepowerRaw;
                                            flag16 = true;
                                            break;
                                        }
                                    }
                                    break;
                                }
                        }
                        break;
                    }
                case BuiltObjectSubRole.TroopTransport:
                    if (!CheckAssignUnloadTroopsAtColonyNeedingThemMission(ship) && !CheckAssignGarrisonTroopsAtPenalColonyMission(ship) && ship.Troops != null && ship.TroopCapacity - ship.Troops.TotalSize >= 100)
                    {
                        AssignLoadTroopsMission(ship);
                    }
                    break;
                case BuiltObjectSubRole.GasMiningShip:
                case BuiltObjectSubRole.MiningShip:
                    {
                        bool flag6 = CheckShipCanSurviveStorms(ship);
                        List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
                        list.Add(BuiltObjectSubRole.MiningShip);
                        list.Add(BuiltObjectSubRole.GasMiningShip);
                        List<BuiltObjectSubRole> subRoles = list;
                        if (_EmpireResourceTargets != null && _EmpireResourceTargets.Count > 0)
                        {
                            bool flag7 = false;
                            int num13 = 0;
                            for (int iterationCount = 0; Galaxy.ConditionCheckLimit(!flag7 && num13 < _EmpireResourceTargets.Count, 1000, ref iterationCount); num13++)
                            {
                                _ = _EmpireResourceTargets[num13];
                                if (!ship.IsResourceExtractor)
                                {
                                    continue;
                                }
                                Habitat habitat4 = _EmpireResourceTargets[num13].Habitat;
                                if (!flag6 && _Galaxy.CheckInStorm(habitat4.Xpos, habitat4.Ypos))
                                {
                                    continue;
                                }
                                switch (habitat4.Type)
                                {
                                    case HabitatType.BarrenRock:
                                        if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                    case HabitatType.GasGiant:
                                    case HabitatType.FrozenGasGiant:
                                    case HabitatType.Hydrogen:
                                    case HabitatType.Helium:
                                    case HabitatType.Argon:
                                    case HabitatType.Ammonia:
                                    case HabitatType.CarbonDioxide:
                                    case HabitatType.Oxygen:
                                    case HabitatType.NitrogenOxygen:
                                    case HabitatType.Chlorine:
                                        if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                    case HabitatType.Volcanic:
                                        if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                    case HabitatType.Continental:
                                        if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                    case HabitatType.Ice:
                                        if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                    case HabitatType.MarshySwamp:
                                        if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                    case HabitatType.Ocean:
                                        if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                    case HabitatType.Desert:
                                        if (ship.ExtractionMine > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Mineral))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionGas > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Gas))
                                        {
                                            flag7 = true;
                                        }
                                        else if (ship.ExtractionLuxury > 0 && habitat4.Resources.ContainsGroup(ResourceGroup.Luxury))
                                        {
                                            flag7 = true;
                                        }
                                        break;
                                }
                                if (!flag7)
                                {
                                    continue;
                                }
                                if (ship.WithinFuelRangeAndRefuel(habitat4.Xpos, habitat4.Ypos, 0.1))
                                {
                                    int num14 = PrivateBuiltObjects.CountBuiltObjectsWithTargetHabitat(habitat4, subRoles);
                                    if (num14 < 3)
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.ExtractResources, habitat4, null, BuiltObjectMissionPriority.Normal);
                                        _EmpireResourceTargets.RemoveAt(num13);
                                    }
                                }
                                else
                                {
                                    flag7 = false;
                                }
                            }
                        }
                        if ((ship.Mission != null && ship.Mission.Type != 0) || _ResourceTargets == null || _ResourceTargets.Count <= 0)
                        {
                            break;
                        }
                        bool flag8 = false;
                        int num15 = 0;
                        for (int iterationCount2 = 0; Galaxy.ConditionCheckLimit(!flag8 && num15 < _ResourceTargets.Count, 1000, ref iterationCount2); num15++)
                        {
                            HabitatPrioritization habitatPrioritization2 = _ResourceTargets[num15];
                            if (!ship.IsResourceExtractor || CheckNearPirateBase(habitatPrioritization2.Habitat, habitatPrioritization2.Habitat.Xpos, habitatPrioritization2.Habitat.Ypos) || (!flag6 && _Galaxy.CheckInStorm(habitatPrioritization2.Habitat.Xpos, habitatPrioritization2.Habitat.Ypos)))
                            {
                                continue;
                            }
                            Habitat habitat5 = _ResourceTargets[num15].Habitat;
                            if (habitat5 == null || _Galaxy.CheckAlreadyHaveMiningStationAtHabitat(habitat5, this))
                            {
                                continue;
                            }
                            switch (habitat5.Type)
                            {
                                case HabitatType.BarrenRock:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                                case HabitatType.GasGiant:
                                case HabitatType.FrozenGasGiant:
                                case HabitatType.Hydrogen:
                                case HabitatType.Helium:
                                case HabitatType.Argon:
                                case HabitatType.Ammonia:
                                case HabitatType.CarbonDioxide:
                                case HabitatType.Oxygen:
                                case HabitatType.NitrogenOxygen:
                                case HabitatType.Chlorine:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                                case HabitatType.Volcanic:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                                case HabitatType.Continental:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                                case HabitatType.Ice:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                                case HabitatType.MarshySwamp:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                                case HabitatType.Ocean:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                                case HabitatType.Desert:
                                    if (ship.ExtractionMine > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Mineral))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionGas > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Gas))
                                    {
                                        flag8 = true;
                                    }
                                    else if (ship.ExtractionLuxury > 0 && habitat5.Resources.ContainsGroup(ResourceGroup.Luxury))
                                    {
                                        flag8 = true;
                                    }
                                    break;
                            }
                            if (!flag8)
                            {
                                continue;
                            }
                            if (ship.WithinFuelRangeAndRefuel(habitat5.Xpos, habitat5.Ypos, 0.1))
                            {
                                int num16 = PrivateBuiltObjects.CountBuiltObjectsWithTargetHabitat(habitat5, subRoles);
                                if (num16 < 3)
                                {
                                    ship.AssignMission(BuiltObjectMissionType.ExtractResources, habitat5, null, BuiltObjectMissionPriority.Normal);
                                }
                            }
                            else
                            {
                                flag8 = false;
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.ConstructionShip:
                    {
                        if (flag2)
                        {
                            if (Policy.BuildPlanetDestroyers)
                            {
                                Design design = Designs.FindNewestPlanetDestroyer();
                                if (design != null && CanBuildDesign(design))
                                {
                                    int num17 = ConstructionShips.CountConstructionShipsBuildingPlanetDestroyers();
                                    int num18 = Math.Min(5, Math.Max(2, (int)((double)ConstructionShips.Count * 0.3)));
                                    if (num17 < num18)
                                    {
                                        _Galaxy.SelectRelativePoint(2000000.0, out var x2, out var y2);
                                        Habitat habitat6 = _Galaxy.FindNearestLonelyHabitat(Capital.Xpos + x2, Capital.Ypos + y2, this);
                                        if (habitat6 != null)
                                        {
                                            _Galaxy.SelectRelativeParkingPoint(Math.Max(200.0, (double)habitat6.Diameter * 0.7), out x2, out y2);
                                            ship.AssignMission(BuiltObjectMissionType.Build, habitat6, null, design, x2, y2, BuiltObjectMissionPriority.High);
                                            break;
                                        }
                                    }
                                }
                            }
                            GalaxyLocation galaxyLocation = CheckWhetherAtLocation(ship.Xpos, ship.Ypos);
                            if (galaxyLocation != null && galaxyLocation.Type == GalaxyLocationType.DebrisField && Galaxy.Rnd.Next(0, 2) == 1)
                            {
                                if (galaxyLocation == null)
                                {
                                    for (int num19 = 0; num19 < KnownGalaxyLocations.Count; num19++)
                                    {
                                        if (KnownGalaxyLocations[num19].Type == GalaxyLocationType.DebrisField)
                                        {
                                            galaxyLocation = KnownGalaxyLocations[num19];
                                            break;
                                        }
                                    }
                                }
                                if (galaxyLocation != null)
                                {
                                    BuiltObject builtObject6 = SelectBestSalvageableShip(galaxyLocation);
                                    if (builtObject6 != null && ship.WithinFuelRangeAndRefuel(builtObject6.Xpos, builtObject6.Ypos, 0.1))
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.Build, null, builtObject6, builtObject6.Xpos, builtObject6.Ypos, BuiltObjectMissionPriority.High);
                                        break;
                                    }
                                }
                            }
                            GalaxyLocationList galaxyLocationList = KnownGalaxyLocations.FindLocations(GalaxyLocationType.PlanetDestroyer);
                            if (galaxyLocationList.Count > 0)
                            {
                                for (int num20 = 0; num20 < galaxyLocationList.Count; num20++)
                                {
                                    BuiltObject relatedBuiltObject = galaxyLocationList[num20].RelatedBuiltObject;
                                    if (relatedBuiltObject == null || relatedBuiltObject.UnbuiltComponentCount <= 0 || relatedBuiltObject.BuiltAt != null || relatedBuiltObject.Empire != null || relatedBuiltObject.HasBeenDestroyed)
                                    {
                                        continue;
                                    }
                                    bool flag12 = false;
                                    for (int num21 = 0; num21 < ConstructionShips.Count; num21++)
                                    {
                                        BuiltObject builtObject7 = ConstructionShips[num21];
                                        if (builtObject7.Mission != null && (builtObject7.Mission.Type == BuiltObjectMissionType.Build || builtObject7.Mission.Type == BuiltObjectMissionType.BuildRepair || builtObject7.Mission.Type == BuiltObjectMissionType.Repair) && builtObject7.Mission.SecondaryTargetBuiltObject == relatedBuiltObject)
                                        {
                                            flag12 = true;
                                            break;
                                        }
                                    }
                                    if (!flag12 && ship.WithinFuelRangeAndRefuel(relatedBuiltObject.Xpos, relatedBuiltObject.Ypos, 0.1))
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.Build, null, relatedBuiltObject, relatedBuiltObject.Xpos, relatedBuiltObject.Ypos, BuiltObjectMissionPriority.High);
                                        return;
                                    }
                                }
                            }
                        }
                        BuiltObjectList builtObjectList2 = new BuiltObjectList();
                        builtObjectList2.AddRange(BuiltObjects);
                        builtObjectList2.AddRange(PrivateBuiltObjects);
                        if (Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            int num22 = Galaxy.Rnd.Next(0, builtObjectList2.Count);
                            for (int num23 = num22; num23 < builtObjectList2.Count; num23++)
                            {
                                BuiltObject builtObject8 = builtObjectList2[num23];
                                if (DetermineWhetherShouldRepair(ship, builtObject8) && ship.WithinFuelRangeAndRefuel(builtObject8.Xpos, builtObject8.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.BuildRepair, null, builtObject8, BuiltObjectMissionPriority.Normal);
                                    return;
                                }
                            }
                            for (int num24 = 0; num24 < num22; num24++)
                            {
                                BuiltObject builtObject9 = builtObjectList2[num24];
                                if (DetermineWhetherShouldRepair(ship, builtObject9) && ship.WithinFuelRangeAndRefuel(builtObject9.Xpos, builtObject9.Ypos, 0.1))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.BuildRepair, null, builtObject9, BuiltObjectMissionPriority.Normal);
                                    return;
                                }
                            }
                        }
                        if (_ResearchHabitats != null && _ResearchHabitats.Count > 0)
                        {
                            bool flag13 = false;
                            if (Policy.ResearchPriority < 1.0)
                            {
                                if (Galaxy.Rnd.Next(0, 2) == 1)
                                {
                                    flag13 = true;
                                }
                            }
                            else if (Policy.ResearchPriority == 1.0)
                            {
                                if (Galaxy.Rnd.Next(0, 4) > 0)
                                {
                                    flag13 = true;
                                }
                            }
                            else if (Policy.ResearchPriority > 1.0)
                            {
                                flag13 = true;
                            }
                            if (flag13)
                            {
                                Design weaponsResearchStation;
                                Design energyResearchStation;
                                Design highTechResearchStation;
                                Design design2 = AnalyzeNewResearchFacilities(out weaponsResearchStation, out energyResearchStation, out highTechResearchStation);
                                if (design2 != null)
                                {
                                    IndustryType industryType = IndustryType.Undefined;
                                    if (design2.SubRole == BuiltObjectSubRole.WeaponsResearchStation)
                                    {
                                        industryType = IndustryType.Weapon;
                                    }
                                    else if (design2.SubRole == BuiltObjectSubRole.EnergyResearchStation)
                                    {
                                        industryType = IndustryType.Energy;
                                    }
                                    else if (design2.SubRole == BuiltObjectSubRole.HighTechResearchStation)
                                    {
                                        industryType = IndustryType.HighTech;
                                    }
                                    double num25 = CalculateSupportCost(design2);
                                    double num26 = design2.CalculateCurrentPurchasePrice(_Galaxy);
                                    if (num26 <= StateMoney && num25 <= CalculateSpareAnnualRevenueComplete())
                                    {
                                        Habitat habitat7 = null;
                                        for (int num27 = 0; num27 < _ResearchHabitats.Count; num27++)
                                        {
                                            if (_ResearchHabitats[num27].ResearchBonusIndustry == industryType && ship.WithinFuelRangeAndRefuel(_ResearchHabitats[num27].Xpos, _ResearchHabitats[num27].Ypos, 0.0))
                                            {
                                                habitat7 = _ResearchHabitats[num27];
                                                break;
                                            }
                                        }
                                        if (habitat7 != null && ship.WithinFuelRangeAndRefuel(habitat7.Xpos, habitat7.Ypos, 0.0))
                                        {
                                            float num28 = (float)(int)habitat7.ResearchBonus / 100f;
                                            switch (habitat7.ResearchBonusIndustry)
                                            {
                                                case IndustryType.Weapon:
                                                    if (num28 > ResearchBonusWeapons)
                                                    {
                                                        design2 = weaponsResearchStation;
                                                    }
                                                    break;
                                                case IndustryType.Energy:
                                                    if (num28 > ResearchBonusEnergy)
                                                    {
                                                        design2 = energyResearchStation;
                                                    }
                                                    break;
                                                case IndustryType.HighTech:
                                                    if (num28 > ResearchBonusHighTech)
                                                    {
                                                        design2 = highTechResearchStation;
                                                    }
                                                    break;
                                            }
                                            double x3;
                                            double y3;
                                            if (habitat7.Category == HabitatCategoryType.Star)
                                            {
                                                double num29 = 0.0;
                                                Habitat habitat8 = null;
                                                for (int num30 = 0; num30 < _Galaxy.AsteroidFields.Count; num30++)
                                                {
                                                    HabitatList habitatList3 = _Galaxy.AsteroidFields[num30];
                                                    if (habitatList3.Count <= 0 || habitatList3[0].Parent != habitat7)
                                                    {
                                                        continue;
                                                    }
                                                    int num31 = 0;
                                                    while (habitat8 == null && num31 < 20)
                                                    {
                                                        habitat8 = habitatList3[Galaxy.Rnd.Next(0, habitatList3.Count)];
                                                        BuiltObject builtObject10 = _Galaxy.FindNearestBuiltObject((int)habitat8.Xpos, (int)habitat8.Ypos, BuiltObjectRole.Base);
                                                        if (builtObject10 != null)
                                                        {
                                                            double num32 = _Galaxy.CalculateDistance(habitat8.Xpos, habitat8.Ypos, builtObject10.Xpos, builtObject10.Ypos);
                                                            if (num32 < 200.0)
                                                            {
                                                                habitat8 = null;
                                                            }
                                                        }
                                                        num31++;
                                                    }
                                                }
                                                if (habitat8 != null)
                                                {
                                                    habitat7 = habitat8;
                                                    _Galaxy.SelectRelativeHabitatSurfacePoint(habitat7, out x3, out y3);
                                                }
                                                else
                                                {
                                                    num29 = habitat7.Diameter;
                                                    if (habitat7.Type == HabitatType.BlackHole)
                                                    {
                                                        num29 = (double)habitat7.Diameter * 0.7;
                                                    }
                                                    else if (habitat7.Type == HabitatType.SuperNova)
                                                    {
                                                        num29 = (double)habitat7.Diameter * 0.1;
                                                    }
                                                    else if (habitat7.Type == HabitatType.Neutron)
                                                    {
                                                        num29 = (double)habitat7.Diameter * 2.0;
                                                    }
                                                    _Galaxy.SelectRelativeParkingPoint(num29, out x3, out y3);
                                                }
                                            }
                                            else
                                            {
                                                _Galaxy.SelectRelativeHabitatSurfacePoint(habitat7, out x3, out y3);
                                            }
                                            if (!CheckResearchStationAtLocation(habitat7))
                                            {
                                                bool flag14 = false;
                                                DesignList designList = CheckBasesToBeBuiltAtHabitat(habitat7);
                                                if (designList != null && designList.Count > 0)
                                                {
                                                    for (int num33 = 0; num33 < designList.Count; num33++)
                                                    {
                                                        if (designList[num33].SubRole == BuiltObjectSubRole.EnergyResearchStation || designList[num33].SubRole == BuiltObjectSubRole.HighTechResearchStation || designList[num33].SubRole == BuiltObjectSubRole.WeaponsResearchStation)
                                                        {
                                                            flag14 = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ResearchHabitats.Remove(habitat7);
                                                if (!flag14)
                                                {
                                                    ship.AssignMission(BuiltObjectMissionType.Build, habitat7, null, design2, x3, y3, BuiltObjectMissionPriority.Normal);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        HabitatList habitatList4 = DetermineHabitatsBeingMinedIncludingBuildingMiningStations(includeMiningShips: false);
                        if (_ResourceTargets != null && _ResourceTargets.Count > 0 && BuildStrategicResourceSupply(ship, habitatList4))
                        {
                            break;
                        }
                        if (_ResortBaseBuildLocations != null && _ResortBaseBuildLocations.Count > 0 && Policy.EngageInTourism && flag2 && Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            int num34 = Math.Min(20, 1 + Colonies.Count / 6);
                            num34 = (int)((double)num34 * Policy.TourismPriority);
                            if (ResortBases.Count < num34)
                            {
                                Design design3 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.ResortBase);
                                if (design3 != null)
                                {
                                    double num35 = CalculateSupportCost(design3);
                                    double num36 = design3.CalculateCurrentPurchasePrice(_Galaxy);
                                    if (num36 <= StateMoney && num35 <= CalculateSpareAnnualRevenueComplete() && AssignBuildResortBaseMissionToBuiltObject(ship, design3))
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        if (_MonitoringHabitats != null && _MonitoringPoints != null && (_MonitoringHabitats.Count > 0 || _MonitoringPoints.Count > 0))
                        {
                            Design design4 = Designs.FindNewestCanBuild(BuiltObjectSubRole.MonitoringStation);
                            if (design4 != null && Galaxy.Rnd.Next(0, 2) == 1)
                            {
                                double num37 = CalculateSupportCost(design4);
                                double num38 = design4.CalculateCurrentPurchasePrice(_Galaxy);
                                if (num38 <= StateMoney && num37 <= CalculateSpareAnnualRevenueComplete())
                                {
                                    int num39 = Math.Min(40, Math.Max(1, Colonies.Count / 3));
                                    if (LongRangeScanners.Count < num39)
                                    {
                                        if (_MonitoringHabitats.Count > _MonitoringPoints.Count)
                                        {
                                            Habitat habitat9 = null;
                                            for (int num40 = 0; num40 < _MonitoringHabitats.Count; num40++)
                                            {
                                                Habitat habitat10 = _MonitoringHabitats[num40];
                                                if (!ship.WithinFuelRangeAndRefuel(habitat10.Xpos, habitat10.Ypos, 0.0))
                                                {
                                                    continue;
                                                }
                                                double num41 = double.MaxValue;
                                                BuiltObject builtObject11 = _Galaxy.FastFindNearestLongRangeScannerBase((int)habitat10.Xpos, (int)habitat10.Ypos, this);
                                                if (builtObject11 != null)
                                                {
                                                    num41 = _Galaxy.CalculateDistance(habitat10.Xpos, habitat10.Ypos, builtObject11.Xpos, builtObject11.Ypos);
                                                }
                                                if (num41 > (double)Galaxy.MaxSolarSystemSize * 2.1)
                                                {
                                                    DesignList designList2 = CheckBasesToBeBuiltAtHabitat(habitat10);
                                                    if (designList2 == null || designList2.Count <= 0)
                                                    {
                                                        habitat9 = habitat10;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (habitat9 != null)
                                            {
                                                double x4;
                                                double y4;
                                                if (habitat9.Category == HabitatCategoryType.Star)
                                                {
                                                    _Galaxy.SelectRelativeParkingPoint(habitat9.Diameter, out x4, out y4);
                                                }
                                                else
                                                {
                                                    _Galaxy.SelectRelativeHabitatSurfacePoint(habitat9, out x4, out y4);
                                                }
                                                BuiltObject builtObject12 = _Galaxy.FindNearestBuiltObject((int)(habitat9.Xpos + x4), (int)(habitat9.Ypos + y4), BuiltObjectRole.Base);
                                                double num42 = double.MaxValue;
                                                if (builtObject12 != null)
                                                {
                                                    num42 = _Galaxy.CalculateDistance(habitat9.Xpos + x4, habitat9.Ypos + y4, builtObject12.Xpos, builtObject12.Ypos);
                                                }
                                                int num43 = 0;
                                                while (num42 < (double)Galaxy.MinimumDistanceBetweenBases)
                                                {
                                                    _Galaxy.SelectRelativeHabitatSurfacePoint(habitat9, out x4, out y4);
                                                    builtObject12 = _Galaxy.FindNearestBuiltObject((int)(habitat9.Xpos + x4), (int)(habitat9.Ypos + y4), BuiltObjectRole.Base);
                                                    num42 = _Galaxy.CalculateDistance(habitat9.Xpos + x4, habitat9.Ypos + y4, builtObject12.Xpos, builtObject12.Ypos);
                                                    num43++;
                                                    if (num43 > 5)
                                                    {
                                                        break;
                                                    }
                                                }
                                                ship.AssignMission(BuiltObjectMissionType.Build, habitat9, null, design4, x4, y4, BuiltObjectMissionPriority.Normal);
                                                _MonitoringHabitats.Remove(habitat9);
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            Point item2 = Point.Empty;
                                            for (int num44 = 0; num44 < _MonitoringPoints.Count; num44++)
                                            {
                                                Point point = _MonitoringPoints[num44];
                                                if (ship.WithinFuelRangeAndRefuel(point.X, point.Y, 0.0))
                                                {
                                                    double num45 = double.MaxValue;
                                                    BuiltObject builtObject13 = _Galaxy.FastFindNearestLongRangeScannerBase(point.X, point.Y, this);
                                                    if (builtObject13 != null)
                                                    {
                                                        num45 = _Galaxy.CalculateDistance(point.X, point.Y, builtObject13.Xpos, builtObject13.Ypos);
                                                    }
                                                    if (num45 > (double)Galaxy.MaxSolarSystemSize * 2.1)
                                                    {
                                                        item2 = point;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (!item2.IsEmpty)
                                            {
                                                ship.AssignMission(BuiltObjectMissionType.Build, null, null, design4, _MonitoringPoints[0].X, _MonitoringPoints[0].Y, BuiltObjectMissionPriority.Normal);
                                                _MonitoringPoints.Remove(item2);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (!flag2 || _ResourceTargets == null || _ResourceTargets.Count <= 0)
                        {
                            break;
                        }
                        StellarObject stellarObject4 = _Galaxy.FastFindNearestSpacePort(ship.Xpos, ship.Ypos, this);
                        if (stellarObject4 == null)
                        {
                            stellarObject4 = ((PirateEmpireBaseHabitat != null) ? PirateEmpireBaseHabitat : Capital);
                        }
                        double privateAnnualCashflow = GetPrivateAnnualCashflow();
                        int num46 = 0;
                        Design design5 = null;
                        for (int iterationCount3 = 0; Galaxy.ConditionCheckLimit(design5 == null && num46 < _ResourceTargets.Count, 1000, ref iterationCount3); num46++)
                        {
                            HabitatPrioritization habitatPrioritization3 = _ResourceTargets[num46];
                            Habitat habitat11 = _ResourceTargets[num46].Habitat;
                            if (habitatList4.Contains(habitat11) || (habitat11.Empire != null && habitat11.Empire != _Galaxy.IndependentEmpire) || !habitat11.Resources.HasLuxuryResources() || stellarObject4 == null || !ship.DistanceWithinRange(stellarObject4.Xpos, stellarObject4.Ypos, habitat11.Xpos, habitat11.Ypos, 0.1))
                            {
                                continue;
                            }
                            if (habitat11.Resources.ContainsGroup(ResourceGroup.Gas))
                            {
                                design5 = Designs.FindNewestCanBuild(BuiltObjectSubRole.GasMiningStation);
                            }
                            if (habitat11.Resources.ContainsGroup(ResourceGroup.Mineral))
                            {
                                design5 = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                            }
                            if (design5 == null && habitat11.Resources.ContainsGroup(ResourceGroup.Luxury))
                            {
                                design5 = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                            }
                            if (design5 == null)
                            {
                                continue;
                            }
                            double num47 = design5.CalculateMaintenanceCosts(_Galaxy, this);
                            double num48 = design5.CalculateCurrentPurchasePrice(_Galaxy);
                            if (!(PrivateMoney > num48) || !(privateAnnualCashflow > num47) || habitatPrioritization3.Priority <= Galaxy.MiningStationResourceThreshhold || CheckNearPirateBase(habitatPrioritization3.Habitat, habitatPrioritization3.Habitat.Xpos, habitatPrioritization3.Habitat.Ypos))
                            {
                                continue;
                            }
                            _Galaxy.SelectRelativeHabitatSurfacePoint(habitat11, out var x5, out var y5);
                            BuiltObject builtObject14 = _Galaxy.FindNearestBuiltObject((int)(habitat11.Xpos + x5), (int)(habitat11.Ypos + y5), BuiltObjectRole.Base);
                            double num49 = double.MaxValue;
                            if (builtObject14 != null)
                            {
                                num49 = _Galaxy.CalculateDistance(habitat11.Xpos + x5, habitat11.Ypos + y5, builtObject14.Xpos, builtObject14.Ypos);
                            }
                            int num50 = 0;
                            while (num49 < (double)Galaxy.MinimumDistanceBetweenBases)
                            {
                                _Galaxy.SelectRelativeHabitatSurfacePoint(habitat11, out x5, out y5);
                                builtObject14 = _Galaxy.FindNearestBuiltObject((int)(habitat11.Xpos + x5), (int)(habitat11.Ypos + y5), BuiltObjectRole.Base);
                                num49 = _Galaxy.CalculateDistance(habitat11.Xpos + x5, habitat11.Ypos + y5, builtObject14.Xpos, builtObject14.Ypos);
                                num50++;
                                if (num50 > 5)
                                {
                                    break;
                                }
                            }
                            ship.AssignMission(BuiltObjectMissionType.Build, habitat11, null, design5, x5, y5, BuiltObjectMissionPriority.Normal);
                            habitatList4.Add(habitat11);
                            _ResourceTargets.RemoveAt(num46);
                        }
                        break;
                    }
                case BuiltObjectSubRole.PassengerShip:
                    {
                        bool flag9 = false;
                        bool flag10 = false;
                        if (_MigrationDestinations != null && _MigrationSources != null && _MigrationDestinations.Count > 0 && _MigrationSources.Count > 0 && flag2)
                        {
                            flag9 = true;
                        }
                        if (_TourismDestinations != null && _TourismSources != null && _TourismDestinations.Count > 0 && _TourismSources.Count > 0 && Policy.EngageInTourism && flag2)
                        {
                            flag10 = true;
                        }
                        if ((!flag9 || (flag10 && Galaxy.Rnd.Next(0, 2) != 1) || !AssignMigrationMissionToBuiltObject(ship)) && flag10)
                        {
                            bool flag11 = false;
                            if ((!flag9 || Galaxy.Rnd.Next(0, 3) > 0) && AssignTourismMissionToBuiltObject(ship))
                            {
                                flag11 = true;
                            }
                            else if (!flag11 && flag9 && !AssignMigrationMissionToBuiltObject(ship))
                            {
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.ExplorationShip:
                    {
                        if (_SystemScouts == null)
                        {
                            _SystemScouts = new BuiltObjectList();
                        }
                        int num2 = Math.Max(1, (int)((double)_ExplorationShipCount * 0.38));
                        if (_ExplorationShipCount <= 1)
                        {
                            num2 = 0;
                        }
                        BuiltObjectList builtObjectList = new BuiltObjectList();
                        for (int i = 0; i < _SystemScouts.Count; i++)
                        {
                            BuiltObject builtObject = _SystemScouts[i];
                            if (builtObject == null || builtObject.HasBeenDestroyed || !builtObject.IsFunctional || builtObject.TopSpeed <= 0 || builtObject.WarpSpeed <= 0 || !builtObject.IsAutoControlled)
                            {
                                builtObjectList.Add(builtObject);
                            }
                            else if (builtObject != null && _SystemScouts.Count - builtObjectList.Count > num2)
                            {
                                builtObjectList.Add(builtObject);
                            }
                        }
                        for (int j = 0; j < builtObjectList.Count; j++)
                        {
                            BuiltObject builtObject2 = builtObjectList[j];
                            if (builtObject2 != null)
                            {
                                _SystemScouts.Remove(builtObject2);
                            }
                        }
                        if (_SystemScouts.Count < num2 && !_SystemScouts.Contains(ship) && ship != null && !ship.HasBeenDestroyed && ship.IsFunctional && ship.TopSpeed > 0 && ship.WarpSpeed > 0 && ship.IsAutoControlled)
                        {
                            _SystemScouts.Add(ship);
                        }
                        Point location = Point.Empty;
                        if (_SystemScouts.Contains(ship))
                        {
                            double num3 = (double)_SystemExploredCount / (double)_Galaxy.StarCount;
                            if (num3 > 0.015 && num3 < 0.4 && _ExplorationShipCount > 1)
                            {
                                Habitat habitat = _Galaxy.FindNextSystemToScout(this, ship, out location);
                                if (!location.IsEmpty)
                                {
                                    if (ship.WithinFuelRangeAndRefuel(location.X, location.Y, 0.0))
                                    {
                                        ship.AssignMission(BuiltObjectMissionType.Move, null, null, location.X, location.Y, BuiltObjectMissionPriority.Normal);
                                        ship.Mission.AddCommandToEnd(new Command(CommandAction.ReassignMission));
                                        break;
                                    }
                                }
                                else if (habitat != null && ship.WithinFuelRangeAndRefuel(habitat.Xpos, habitat.Ypos, 0.0))
                                {
                                    ship.AssignMission(BuiltObjectMissionType.Move, habitat, null, BuiltObjectMissionPriority.Normal);
                                    ship.Mission.AddCommandToEnd(new Command(CommandAction.ReassignMission));
                                    break;
                                }
                            }
                        }
                        bool flag3 = false;
                        location = Point.Empty;
                        Habitat habitat2 = _Galaxy.FindNextHabitatToExplore(ship.Xpos, ship.Ypos, ship.Empire, ship, out location);
                        if (location != Point.Empty)
                        {
                            if (ship.WithinFuelRangeAndRefuel(location.X, location.Y, 0.0))
                            {
                                ship.AssignMission(BuiltObjectMissionType.Move, null, null, location.X, location.Y, BuiltObjectMissionPriority.Normal);
                                flag3 = true;
                            }
                        }
                        else if (habitat2 != null && ship.WithinFuelRangeAndRefuel(habitat2.Xpos, habitat2.Ypos, 0.0))
                        {
                            ship.AssignMission(BuiltObjectMissionType.Explore, habitat2, null, BuiltObjectMissionPriority.Normal);
                            flag3 = true;
                        }
                        if (habitat2 == null && location.IsEmpty && Galaxy.Rnd.Next(0, 10) == 1)
                        {
                            GalaxyLocation location2 = null;
                            Habitat habitat3 = _Galaxy.FindUnexploredRuinsOrLocations(ship.Xpos, ship.Ypos, ship.Empire, out location2);
                            if (habitat3 != null)
                            {
                                ship.AssignMission(BuiltObjectMissionType.Move, habitat3, null, BuiltObjectMissionPriority.Normal);
                                flag3 = true;
                            }
                            else if (location2 != null)
                            {
                                location2.ResolveLocationCenter(out var x, out var y);
                                ship.AssignMission(BuiltObjectMissionType.Move, null, null, x, y, BuiltObjectMissionPriority.Normal);
                                flag3 = true;
                            }
                        }
                        if (flag3)
                        {
                            break;
                        }
                        double num4 = ship.CurrentFuel / (double)ship.FuelCapacity;
                        if (num4 < 0.9)
                        {
                            ResourceList fuelTypes = ship.DetermineFuelRequired();
                            StellarObject stellarObject = _Galaxy.FastFindNearestRefuellingPoint(ship.Xpos, ship.Ypos, fuelTypes, this, ship);
                            if (stellarObject != null)
                            {
                                ship.AssignMission(BuiltObjectMissionType.Refuel, stellarObject, null, BuiltObjectMissionPriority.Unavailable);
                            }
                        }
                        break;
                    }
                case BuiltObjectSubRole.ResupplyShip:
                    break;
            }
        }

        public PrioritizedTargetList DetermineResortBaseBuildLocations()
        {
            PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
            bool flag = CheckConstructionShipAndMiningStationCanSurviveStorms();
            for (int i = 0; i < _Galaxy.Systems.Count; i++)
            {
                SystemInfo systemInfo = _Galaxy.Systems[i];
                if (!systemInfo.HasScenery || !CheckSystemExplored(systemInfo.SystemStar))
                {
                    continue;
                }
                HabitatList habitatList = new HabitatList();
                habitatList.Add(systemInfo.SystemStar);
                habitatList.AddRange(systemInfo.Habitats);
                for (int j = 0; j < habitatList.Count; j++)
                {
                    Habitat habitat = habitatList[j];
                    double num = habitat.CalculateScenicFactorIncludingRuinsWonders();
                    if (!(num > 0.0) || (!flag && _Galaxy.CheckInStorm(habitat.Xpos, habitat.Ypos)) || !_Galaxy.CheckEmpireTerritoryCanBuildAtHabitat(this, habitat))
                    {
                        continue;
                    }
                    if (habitat.Category == HabitatCategoryType.Star || habitat.Category == HabitatCategoryType.GasCloud)
                    {
                        bool flag2 = true;
                        for (int k = 0; k < _TourismDestinations.Count; k++)
                        {
                            PrioritizedTarget prioritizedTarget = _TourismDestinations[k];
                            if (prioritizedTarget.Target is BuiltObject)
                            {
                                BuiltObject builtObject = (BuiltObject)prioritizedTarget.Target;
                                if (builtObject.NearestSystemStar == habitat)
                                {
                                    flag2 = false;
                                    break;
                                }
                            }
                        }
                        if (_Galaxy.DetermineResortBaseAtHabitat(habitat) != null)
                        {
                            flag2 = false;
                        }
                        if (flag2)
                        {
                            prioritizedTargetList.Add(new PrioritizedTarget(habitat, (int)(num * 1000.0)));
                        }
                    }
                    else if ((habitat.Empire == null || habitat.Empire == _Galaxy.IndependentEmpire) && habitat.BasesAtHabitat.CountBySubRole(BuiltObjectSubRole.ResortBase) == 0 && !_Galaxy.CheckForeignBaseAtHabitat(habitat, this))
                    {
                        prioritizedTargetList.Add(new PrioritizedTarget(habitat, (int)(num * 1000.0)));
                    }
                }
            }
            return prioritizedTargetList;
        }

        private bool AssignBuildResortBaseMissionToBuiltObject(BuiltObject builtObject, Design resortBaseDesign)
        {
            if (builtObject.SubRole == BuiltObjectSubRole.ConstructionShip && resortBaseDesign != null && Policy.EngageInTourism && _ResortBaseBuildLocations.Count > 0 && _TourismSources.Count > 0)
            {
                int maxValue = Math.Min(5, _TourismSources.Count);
                int index = Galaxy.Rnd.Next(0, maxValue);
                Habitat habitat = (Habitat)_TourismSources[index].Target;
                PrioritizedTarget prioritizedTarget = null;
                HabitatPrioritizationList habitatPrioritizationList = DetermineHabitatsBuildingMiningStations();
                double num = (double)Galaxy.SectorSize * 3.0;
                double num2 = 0.0;
                for (int i = 0; i < 10 && i < _ResortBaseBuildLocations.Count; i++)
                {
                    double num3 = 0.0;
                    double num4 = 0.0;
                    Habitat habitat2 = null;
                    if (_ResortBaseBuildLocations[i].Target is Habitat)
                    {
                        habitat2 = (Habitat)_ResortBaseBuildLocations[i].Target;
                        num3 = habitat2.Xpos;
                        num4 = habitat2.Ypos;
                    }
                    double num5 = _Galaxy.CalculateDistance(num3, num4, habitat.Xpos, habitat.Ypos);
                    if (!(num5 <= num))
                    {
                        continue;
                    }
                    double num6 = Math.Sqrt(num - num5) * (double)_ResortBaseBuildLocations[i].Priority;
                    num6 *= 0.9 + Galaxy.Rnd.NextDouble() * 0.2;
                    if (!(num6 > num2))
                    {
                        continue;
                    }
                    bool flag = false;
                    if (habitat2 != null)
                    {
                        int num7 = habitatPrioritizationList.IndexOf(habitat2);
                        if (num7 >= 0)
                        {
                            flag = true;
                        }
                    }
                    if (!flag && builtObject.WithinFuelRangeAndRefuel(num3, num4, 0.1))
                    {
                        num6 = num2;
                        prioritizedTarget = _ResortBaseBuildLocations[i];
                    }
                }
                if (prioritizedTarget != null && prioritizedTarget.Target is Habitat)
                {
                    Habitat habitat3 = (Habitat)prioritizedTarget.Target;
                    double x;
                    double y;
                    if (habitat3.Category == HabitatCategoryType.Star)
                    {
                        double num8 = 0.0;
                        num8 = habitat3.Diameter;
                        if (habitat3.Type == HabitatType.BlackHole)
                        {
                            num8 = (double)habitat3.Diameter * 0.7;
                        }
                        else if (habitat3.Type == HabitatType.SuperNova)
                        {
                            num8 = (double)habitat3.Diameter * 0.1;
                        }
                        else if (habitat3.Type == HabitatType.Neutron)
                        {
                            num8 = (double)habitat3.Diameter * 2.0;
                        }
                        _Galaxy.SelectRelativeParkingPoint(num8, out x, out y);
                    }
                    else
                    {
                        _Galaxy.SelectRelativeHabitatSurfacePoint(habitat3, out x, out y);
                    }
                    builtObject.ClearPreviousMissionRequirements();
                    builtObject.AssignMission(BuiltObjectMissionType.Build, habitat3, null, resortBaseDesign, x, y, BuiltObjectMissionPriority.Normal);
                    _ResortBaseBuildLocations.Remove(prioritizedTarget);
                    return true;
                }
            }
            return false;
        }

        private bool AssignMigrationMissionToBuiltObject(BuiltObject builtObject)
        {
            if (builtObject.SubRole == BuiltObjectSubRole.PassengerShip)
            {
                int num = 0;
                if (_ResettleSources.Count > 0 && _MigrationSources.Count > 0 && _MigrationDestinations.Count > 0)
                {
                    num = Galaxy.Rnd.Next(0, 2);
                }
                else if (_MigrationSources.Count > 0 && _MigrationDestinations.Count > 0)
                {
                    num = 0;
                }
                else if (_ResettleSources.Count > 0)
                {
                    num = 1;
                }
                if (num == 1 && _ResettleSources.Count > 0)
                {
                    int index = Galaxy.Rnd.Next(0, _ResettleSources.Count);
                    Habitat habitat = null;
                    if (_ResettleSources[index].Target is Habitat)
                    {
                        habitat = (Habitat)_ResettleSources[index].Target;
                    }
                    if (habitat != null && builtObject.WithinFuelRangeAndRefuel(habitat.Xpos, habitat.Ypos, 0.0))
                    {
                        Race race = null;
                        long amount = 0L;
                        if (habitat.HasPopulationToResettle(out race, out amount))
                        {
                            Habitat habitat2 = DetermineResettleDestination(race, builtObject, habitat);
                            if (habitat2 != null)
                            {
                                long amount2 = Math.Min(builtObject.PopulationCapacity, amount);
                                PopulationList populationList = new PopulationList();
                                populationList.Add(new Population(race, amount2));
                                builtObject.AssignMission(BuiltObjectMissionType.Transport, habitat, habitat2, populationList, BuiltObjectMissionPriority.Normal);
                                return true;
                            }
                        }
                    }
                }
                else if (num == 0 && _MigrationDestinations.Count > 0 && _MigrationSources.Count > 0)
                {
                    PopulationList populationList2 = new PopulationList();
                    int index2 = Galaxy.Rnd.Next(0, _MigrationDestinations.Count);
                    Habitat habitat3 = (Habitat)_MigrationDestinations[index2].Target;
                    PrioritizedTarget prioritizedTarget = null;
                    double num2 = (double)Galaxy.SectorSize * 3.0;
                    double num3 = 0.0;
                    for (int i = 0; i < 10 && i < _MigrationSources.Count; i++)
                    {
                        double num4 = 0.0;
                        double num5 = 0.0;
                        if (_MigrationSources[i].Target is Habitat)
                        {
                            Habitat habitat4 = (Habitat)_MigrationSources[i].Target;
                            num4 = habitat4.Xpos;
                            num5 = habitat4.Ypos;
                            if (habitat4.Population != null && habitat4.Population.DominantRace != null && !habitat3.AcceptsPopulation(builtObject.Empire, habitat4.Population.DominantRace))
                            {
                                continue;
                            }
                        }
                        if (!builtObject.WithinFuelRangeAndRefuel(num4, num5, 0.0))
                        {
                            continue;
                        }
                        double num6 = _Galaxy.CalculateDistance(num4, num5, habitat3.Xpos, habitat3.Ypos);
                        if (num6 <= num2)
                        {
                            double num7 = Math.Sqrt(num2 - num6) * (double)_MigrationSources[i].Priority;
                            num7 *= 0.75 + Galaxy.Rnd.NextDouble() * 0.5;
                            if (num7 < num3)
                            {
                                num7 = num3;
                                prioritizedTarget = _MigrationSources[i];
                            }
                        }
                    }
                    if (prioritizedTarget != null && prioritizedTarget.Target is Habitat)
                    {
                        Habitat habitat5 = (Habitat)prioritizedTarget.Target;
                        if (habitat5 != null && habitat5.Population != null && habitat5.Population.Count > 0 && habitat5.Population.DominantRace != null)
                        {
                            Race dominantRace = habitat5.Population.DominantRace;
                            long amount3 = Math.Min(builtObject.PopulationCapacity, habitat5.Population[dominantRace].Amount / 50);
                            populationList2.Add(new Population(dominantRace, amount3));
                            builtObject.AssignMission(BuiltObjectMissionType.Transport, habitat5, habitat3, populationList2, BuiltObjectMissionPriority.Normal);
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private bool AssignTourismMissionToBuiltObject(BuiltObject builtObject)
        {
            if (builtObject.SubRole == BuiltObjectSubRole.PassengerShip && _TourismDestinations.Count > 0 && _TourismSources.Count > 0)
            {
                PopulationList populationList = new PopulationList();
                int index = Galaxy.Rnd.Next(0, _TourismSources.Count);
                Habitat habitat = (Habitat)_TourismSources[index].Target;
                PrioritizedTarget prioritizedTarget = null;
                if (!habitat.HasBeenDestroyed)
                {
                    double num = (double)Galaxy.SectorSize * 5.0;
                    double num2 = 0.0;
                    for (int i = 0; i < 50 && i < _TourismDestinations.Count; i++)
                    {
                        StellarObject stellarObject = null;
                        if (_TourismDestinations[i].Target is BuiltObject)
                        {
                            stellarObject = (BuiltObject)_TourismDestinations[i].Target;
                        }
                        else if (_TourismDestinations[i].Target is Habitat)
                        {
                            stellarObject = (Habitat)_TourismDestinations[i].Target;
                        }
                        if (stellarObject == null || !builtObject.WithinFuelRangeAndRefuel(stellarObject.Xpos, stellarObject.Ypos, 0.0))
                        {
                            continue;
                        }
                        double num3 = _Galaxy.CalculateDistance(stellarObject.Xpos, stellarObject.Ypos, habitat.Xpos, habitat.Ypos);
                        if (!(num3 <= num))
                        {
                            continue;
                        }
                        bool flag = true;
                        if (stellarObject.DockingBays.CountDocked >= stellarObject.DockingBays.Count)
                        {
                            flag = false;
                        }
                        if (flag)
                        {
                            double num4 = (Math.Sqrt(num) - Math.Sqrt(num3)) * Math.Sqrt(_TourismDestinations[i].Priority);
                            num4 *= 0.1 + Galaxy.Rnd.NextDouble() * 1.8;
                            if (num4 > num2)
                            {
                                num2 = num4;
                                prioritizedTarget = _TourismDestinations[i];
                            }
                        }
                    }
                    if (prioritizedTarget != null)
                    {
                        if (prioritizedTarget.Target is BuiltObject)
                        {
                            BuiltObject builtObject2 = (BuiltObject)prioritizedTarget.Target;
                            if (builtObject2.IsFunctional && builtObject2.PopulationCapacity > 0)
                            {
                                Race dominantRace = habitat.Population.DominantRace;
                                if (dominantRace != null)
                                {
                                    long val = Math.Min(builtObject.PopulationCapacity / 100, habitat.Population[dominantRace].Amount / 50);
                                    val = Math.Min(20000L, val);
                                    populationList.Add(new Population(dominantRace, val));
                                    builtObject.ClearPreviousMissionRequirements();
                                    builtObject.AssignMission(BuiltObjectMissionType.Transport, habitat, builtObject2, populationList, BuiltObjectMissionPriority.Normal);
                                    return true;
                                }
                            }
                        }
                        else if (prioritizedTarget.Target is Habitat)
                        {
                            Habitat target = (Habitat)prioritizedTarget.Target;
                            Race dominantRace2 = habitat.Population.DominantRace;
                            if (dominantRace2 != null)
                            {
                                long val2 = Math.Min(builtObject.PopulationCapacity / 100, habitat.Population[dominantRace2].Amount / 50);
                                val2 = Math.Min(20000L, val2);
                                populationList.Add(new Population(dominantRace2, val2));
                                builtObject.ClearPreviousMissionRequirements();
                                builtObject.AssignMission(BuiltObjectMissionType.Transport, habitat, target, populationList, BuiltObjectMissionPriority.Normal);
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        private void ReviewMigrationTourism()
        {
            _ResettleSources = DetermineResettleSources();
            _MigrationDestinations = DetermineMigrationDestinations();
            _MigrationSources = DetermineMigrationSources();
            _TourismDestinations = DetermineTourismDestinations();
            _TourismSources = DetermineTourismSources();
            _ResortBaseBuildLocations = DetermineResortBaseBuildLocations();
        }

        private PrioritizedTargetList DetermineTourismDestinations()
        {
            PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
            if (Policy.EngageInTourism)
            {
                bool flag = CheckPassengerShipsCanSurviveStorms();
                for (int i = 0; i < _Galaxy.Empires.Count; i++)
                {
                    Empire empire = _Galaxy.Empires[i];
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                    if (empire != this && (diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions))
                    {
                        continue;
                    }
                    for (int j = 0; j < empire.Colonies.Count; j++)
                    {
                        Habitat habitat = empire.Colonies[j];
                        if (habitat == null || habitat.HasBeenDestroyed)
                        {
                            continue;
                        }
                        Habitat systemStar = Galaxy.DetermineHabitatSystemStar(habitat);
                        if (!CheckSystemExplored(systemStar))
                        {
                            continue;
                        }
                        int num = 0;
                        double num2 = habitat.CalculateScenicFactorIncludingRuinsWonders();
                        if (num2 > 0.0)
                        {
                            if (flag || !_Galaxy.CheckInStorm(habitat.Xpos, habitat.Ypos))
                            {
                                num = (int)(num2 * 1000.0);
                            }
                            if (num > 0)
                            {
                                prioritizedTargetList.Add(new PrioritizedTarget(habitat, num));
                            }
                        }
                    }
                    for (int k = 0; k < empire.ResortBases.Count; k++)
                    {
                        BuiltObject builtObject = empire.ResortBases[k];
                        if (!builtObject.IsFunctional || builtObject.PopulationCapacity <= 0 || builtObject.NearestSystemStar == null || !CheckSystemExplored(builtObject.NearestSystemStar))
                        {
                            continue;
                        }
                        int num3 = 0;
                        if (builtObject.ParentHabitat != null)
                        {
                            double num4 = builtObject.ParentHabitat.CalculateScenicFactorIncludingRuinsWonders();
                            if (num4 > 0.0 && (flag || !_Galaxy.CheckInStorm(builtObject.Xpos, builtObject.Ypos)))
                            {
                                num3 = (int)(num4 * 1000.0);
                            }
                        }
                        else if (builtObject.NearestSystemStar.ScenicFactor > 0f && (flag || !_Galaxy.CheckInStorm(builtObject.Xpos, builtObject.Ypos)))
                        {
                            num3 = (int)((double)builtObject.NearestSystemStar.ScenicFactor * 1000.0);
                        }
                        if (num3 > 0)
                        {
                            prioritizedTargetList.Add(new PrioritizedTarget(builtObject, num3));
                        }
                    }
                }
                for (int l = 0; l < _Galaxy.PirateEmpires.Count; l++)
                {
                    Empire empire2 = _Galaxy.PirateEmpires[l];
                    if (empire2 == null || empire2.ResortBases == null)
                    {
                        continue;
                    }
                    for (int m = 0; m < empire2.ResortBases.Count; m++)
                    {
                        BuiltObject builtObject2 = empire2.ResortBases[m];
                        if (builtObject2 == null || !builtObject2.IsFunctional || builtObject2.PopulationCapacity <= 0 || builtObject2.NearestSystemStar == null || !CheckSystemExplored(builtObject2.NearestSystemStar))
                        {
                            continue;
                        }
                        int num5 = 0;
                        if (builtObject2.ParentHabitat != null)
                        {
                            double num6 = builtObject2.ParentHabitat.CalculateScenicFactorIncludingRuinsWonders();
                            if (num6 > 0.0 && (flag || !_Galaxy.CheckInStorm(builtObject2.Xpos, builtObject2.Ypos)))
                            {
                                num5 = (int)(num6 * 1000.0);
                            }
                        }
                        else if (builtObject2.NearestSystemStar.ScenicFactor > 0f && (flag || !_Galaxy.CheckInStorm(builtObject2.Xpos, builtObject2.Ypos)))
                        {
                            num5 = (int)((double)builtObject2.NearestSystemStar.ScenicFactor * 1000.0);
                        }
                        if (num5 > 0)
                        {
                            prioritizedTargetList.Add(new PrioritizedTarget(builtObject2, num5));
                        }
                    }
                }
                prioritizedTargetList.Sort();
                prioritizedTargetList.Reverse();
            }
            return prioritizedTargetList;
        }

        private PrioritizedTargetList DetermineTourismSources()
        {
            PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && habitat.DevelopmentLevel >= 70 && habitat.Population.TotalAmount >= 300000000)
                {
                    int priority = habitat.DevelopmentLevel * (int)(habitat.Population.TotalAmount / 10000000);
                    prioritizedTargetList.Add(new PrioritizedTarget(habitat, priority));
                }
            }
            if (PirateEmpireBaseHabitat != null)
            {
                for (int j = 0; j < _Galaxy.IndependentColonies.Count; j++)
                {
                    Habitat habitat2 = _Galaxy.IndependentColonies[j];
                    if (habitat2 != null && CheckSystemExplored(habitat2.SystemIndex))
                    {
                        int priority2 = habitat2.DevelopmentLevel * (int)(habitat2.Population.TotalAmount / 10000000);
                        prioritizedTargetList.Add(new PrioritizedTarget(habitat2, priority2));
                    }
                }
            }
            prioritizedTargetList.Sort();
            prioritizedTargetList.Reverse();
            return prioritizedTargetList;
        }

        private PrioritizedTargetList DetermineMigrationSources()
        {
            PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
            bool flag = CheckPassengerShipsCanSurviveStorms();
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                if ((empire != this && (diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)) || empire.DominantRace == null || !empire.DominantRace.Expanding)
                {
                    continue;
                }
                for (int j = 0; j < empire.Colonies.Count; j++)
                {
                    Habitat habitat = empire.Colonies[j];
                    if (CheckSystemExplored(habitat.SystemIndex) && habitat.MigrationFactor < 0f && (flag || !_Galaxy.CheckInStorm(habitat.Xpos, habitat.Ypos)))
                    {
                        prioritizedTargetList.Add(new PrioritizedTarget(habitat, (int)((double)habitat.MigrationFactor * 1000.0)));
                    }
                }
            }
            for (int k = 0; k < _Galaxy.IndependentColonies.Count; k++)
            {
                Habitat habitat2 = _Galaxy.IndependentColonies[k];
                if (CheckSystemExplored(habitat2.SystemIndex) && habitat2.MigrationFactor < 0f && (flag || !_Galaxy.CheckInStorm(habitat2.Xpos, habitat2.Ypos)))
                {
                    prioritizedTargetList.Add(new PrioritizedTarget(habitat2, (int)((double)habitat2.MigrationFactor * 1000.0)));
                }
            }
            for (int l = 0; l < _Galaxy.PirateEmpires.Count; l++)
            {
                Empire empire2 = _Galaxy.PirateEmpires[l];
                if (empire2 == null)
                {
                    continue;
                }
                PirateRelation pirateRelation = ObtainPirateRelation(empire2);
                if ((empire2 != this && pirateRelation.Type != PirateRelationType.Protection) || empire2.DominantRace == null || !empire2.DominantRace.Expanding)
                {
                    continue;
                }
                for (int m = 0; m < empire2.Colonies.Count; m++)
                {
                    Habitat habitat3 = empire2.Colonies[m];
                    if (habitat3 != null && habitat3.Empire == empire2 && CheckSystemExplored(habitat3.SystemIndex) && habitat3.MigrationFactor < 0f && (flag || !_Galaxy.CheckInStorm(habitat3.Xpos, habitat3.Ypos)))
                    {
                        prioritizedTargetList.Add(new PrioritizedTarget(habitat3, (int)((double)habitat3.MigrationFactor * 1000.0)));
                    }
                }
            }
            prioritizedTargetList.Sort();
            return prioritizedTargetList;
        }

        public Habitat DetermineResettleDestination(Race race, BuiltObject passengerShip, Habitat sourceColony)
        {
            return BaconEmpire.DetermineResettleDestination(this, race, passengerShip, sourceColony);
        }

        private PrioritizedTargetList DetermineResettleSources()
        {
            PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && habitat.Empire == this)
                {
                    Race race = null;
                    long amount = 0L;
                    if (habitat.HasPopulationToResettle(out race, out amount))
                    {
                        prioritizedTargetList.Add(new PrioritizedTarget(habitat, (int)(amount / 1000000)));
                    }
                }
            }
            prioritizedTargetList.Sort();
            prioritizedTargetList.Reverse();
            return prioritizedTargetList;
        }

        private PrioritizedTargetList DetermineMigrationDestinations()
        {
            return BaconEmpire.DetermineMigrationDestinations(this);
        }

        private bool DetermineWhetherShouldRepair(BuiltObject repairShip, BuiltObject builtObject)
        {
            if (builtObject.UnbuiltOrDamagedComponentCount > 0 && builtObject.Role == BuiltObjectRole.Base && builtObject.BuiltAt == null)
            {
                if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Owner == this)
                {
                    return false;
                }
                if (CheckTargetOfRepairMission(builtObject))
                {
                    return false;
                }
                if (CheckNearPirateBase(repairShip, builtObject.Xpos, builtObject.Ypos))
                {
                    return false;
                }
                if (!CheckShipCanSurviveStorms(repairShip) && _Galaxy.CheckInStorm(builtObject.Xpos, builtObject.Ypos))
                {
                    return false;
                }
                return true;
            }
            if (builtObject.DamagedComponentCount > 0 && builtObject.Role != BuiltObjectRole.Base && builtObject.BuiltAt == null && builtObject.WarpSpeed <= 0 && builtObject.CurrentSpeed <= 0f && (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined))
            {
                if (CheckTargetOfRepairMission(builtObject))
                {
                    return false;
                }
                if (CheckNearPirateBase(repairShip, builtObject.Xpos, builtObject.Ypos))
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public bool CheckTargetOfRepairMission(BuiltObject target)
        {
            for (int i = 0; i < ConstructionShips.Count; i++)
            {
                BuiltObject builtObject = ConstructionShips[i];
                if (builtObject.Mission != null)
                {
                    if (builtObject.Mission.Type == BuiltObjectMissionType.BuildRepair && builtObject.Mission.SecondaryTargetBuiltObject == target)
                    {
                        return true;
                    }
                    if (builtObject.Mission.Type == BuiltObjectMissionType.Build && builtObject.Mission.SecondaryTargetBuiltObject == target)
                    {
                        return true;
                    }
                }
                if (builtObject.SubsequentMissions == null || builtObject.SubsequentMissions.Count <= 0)
                {
                    continue;
                }
                for (int j = 0; j < builtObject.SubsequentMissions.Count; j++)
                {
                    BuiltObjectMission builtObjectMission = builtObject.SubsequentMissions[j];
                    if (builtObjectMission.Type == BuiltObjectMissionType.BuildRepair && builtObjectMission.SecondaryTargetBuiltObject == target)
                    {
                        return true;
                    }
                    if (builtObjectMission.Type == BuiltObjectMissionType.Build && builtObjectMission.SecondaryTargetBuiltObject == target)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool CheckNearPirateBase(BuiltObject ship, double x, double y)
        {
            if (ship != null)
            {
                int scanRange = Math.Max(ship.SensorProximityArrayRange, (int)((double)Galaxy.MaxSolarSystemSize * 2.1));
                return CheckNearPirateBase(ship, scanRange, x, y);
            }
            return false;
        }

        public bool CheckNearPirateBase(Habitat habitat, double x, double y)
        {
            int scanRange = (int)((double)Galaxy.MaxSolarSystemSize * 2.1);
            return CheckNearPirateBase(habitat, scanRange, x, y);
        }

        private bool CheckNearPirateBase(StellarObject stellarObject, int scanRange, double x, double y)
        {
            return CheckNearPirateBase(stellarObject, scanRange, x, y, null);
        }

        private bool CheckNearPirateBase(StellarObject stellarObject, double x, double y, Empire empireToExclude)
        {
            int scanRange = (int)((double)Galaxy.MaxSolarSystemSize * 2.1);
            return CheckNearPirateBase(stellarObject, scanRange, x, y, empireToExclude);
        }

        private bool CheckNearPirateBase(StellarObject stellarObject, int scanRange, double x, double y, Empire empireToExclude)
        {
            Empire empire = _Galaxy.FindNearestPirateFaction(x, y, empireToExclude, includeSuperPirates: true);
            if (empire != null && empire.PirateEmpireBaseHabitat != null)
            {
                BuiltObject builtObject = null;
                if (empire.PirateEmpireBaseHabitat.BasesAtHabitat != null && empire.PirateEmpireBaseHabitat.BasesAtHabitat.Count > 0)
                {
                    for (int i = 0; i < empire.PirateEmpireBaseHabitat.BasesAtHabitat.Count; i++)
                    {
                        BuiltObject builtObject2 = empire.PirateEmpireBaseHabitat.BasesAtHabitat[i];
                        if (builtObject2 != null && builtObject2.Empire == empire && (builtObject2.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject2.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject2.SubRole == BuiltObjectSubRole.LargeSpacePort))
                        {
                            builtObject = builtObject2;
                            break;
                        }
                    }
                }
                if (KnownPirateBases != null && KnownPirateBases.Contains(builtObject) && stellarObject != null && builtObject != null)
                {
                    double num = _Galaxy.CalculateDistance(stellarObject.Xpos, stellarObject.Ypos, builtObject.Xpos, builtObject.Ypos);
                    if (num < (double)scanRange)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public Design AnalyzeNewResearchFacilities()
        {
            Design weaponsResearchStation;
            Design energyResearchStation;
            Design highTechResearchStation;
            return AnalyzeNewResearchFacilities(out weaponsResearchStation, out energyResearchStation, out highTechResearchStation);
        }

        public Design AnalyzeNewResearchFacilities(out Design weaponsResearchStation, out Design energyResearchStation, out Design highTechResearchStation)
        {
            Design result = null;
            energyResearchStation = Designs.FindNewestCanBuild(BuiltObjectSubRole.EnergyResearchStation);
            weaponsResearchStation = Designs.FindNewestCanBuild(BuiltObjectSubRole.WeaponsResearchStation);
            highTechResearchStation = Designs.FindNewestCanBuild(BuiltObjectSubRole.HighTechResearchStation);
            double num = ResearchEnergyPotential;
            double num2 = ResearchHighTechPotential;
            double num3 = ResearchWeaponsPotential;
            for (int i = 0; i < ConstructionShips.Count; i++)
            {
                BuiltObject builtObject = ConstructionShips[i];
                if (builtObject.Mission != null && builtObject.Mission.Type != 0 && builtObject.Mission.Type == BuiltObjectMissionType.Build && builtObject.Mission.Design != null)
                {
                    Design design = builtObject.Mission.Design;
                    if (design.SubRole == BuiltObjectSubRole.GenericBase || design.SubRole == BuiltObjectSubRole.EnergyResearchStation || design.SubRole == BuiltObjectSubRole.WeaponsResearchStation || design.SubRole == BuiltObjectSubRole.HighTechResearchStation)
                    {
                        num += (double)design.ResearchEnergy;
                        num2 += (double)design.ResearchHighTech;
                        num3 += (double)design.ResearchWeapons;
                    }
                }
            }
            List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
            list.Add(BuiltObjectSubRole.EnergyResearchStation);
            list.Add(BuiltObjectSubRole.HighTechResearchStation);
            list.Add(BuiltObjectSubRole.WeaponsResearchStation);
            list.Add(BuiltObjectSubRole.GenericBase);
            list.Add(BuiltObjectSubRole.SmallSpacePort);
            list.Add(BuiltObjectSubRole.MediumSpacePort);
            list.Add(BuiltObjectSubRole.LargeSpacePort);
            List<BuiltObjectSubRole> subRoles = list;
            for (int j = 0; j < Colonies.Count; j++)
            {
                Habitat habitat = Colonies[j];
                if (habitat == null || habitat.ConstructionQueue == null)
                {
                    continue;
                }
                BuiltObjectList underConstruction = habitat.ConstructionQueue.GetUnderConstruction(subRoles);
                if (underConstruction == null || underConstruction.Count <= 0)
                {
                    continue;
                }
                for (int k = 0; k < underConstruction.Count; k++)
                {
                    BuiltObject builtObject2 = underConstruction[k];
                    if (builtObject2 != null && builtObject2.Design != null)
                    {
                        num += (double)builtObject2.Design.ResearchEnergy;
                        num2 += (double)builtObject2.Design.ResearchHighTech;
                        num3 += (double)builtObject2.Design.ResearchWeapons;
                    }
                }
            }
            double num4 = num + num2 + num3;
            double num5 = AnnualResearchPotential * 1.25;
            num5 *= Policy.ResearchPriority;
            if (num5 > num4)
            {
                if (Policy.ResearchIndustryFocus != 0)
                {
                    switch (Policy.ResearchIndustryFocus)
                    {
                        case IndustryType.Weapon:
                            num3 /= 2.0;
                            break;
                        case IndustryType.Energy:
                            num /= 2.0;
                            break;
                        case IndustryType.HighTech:
                            num2 /= 2.0;
                            break;
                    }
                }
                result = ((num <= num3 && num <= num2) ? energyResearchStation : ((!(num3 <= num) || !(num3 <= num2)) ? highTechResearchStation : weaponsResearchStation));
            }
            return result;
        }

        public HabitatList DetermineResearchStationLocation(bool allowOccupiedSystems, bool mustHaveBuildableResearchStationDesign)
        {
            return DetermineResearchStationLocation(allowOccupiedSystems, mustHaveBuildableResearchStationDesign, assignToResearchHabitats: true);
        }

        public HabitatList DetermineResearchStationLocation(bool allowOccupiedSystems, bool mustHaveBuildableResearchStationDesign, bool assignToResearchHabitats)
        {
            if (mustHaveBuildableResearchStationDesign)
            {
                Design design = Designs.FindNewestCanBuild(BuiltObjectSubRole.EnergyResearchStation);
                Design design2 = Designs.FindNewestCanBuild(BuiltObjectSubRole.WeaponsResearchStation);
                Design design3 = Designs.FindNewestCanBuild(BuiltObjectSubRole.HighTechResearchStation);
                if (design == null && design3 == null && design2 == null)
                {
                    return new HabitatList();
                }
            }
            bool flag = CheckConstructionShipAndMiningStationCanSurviveStorms();
            HabitatList habitatList = new HabitatList();
            List<double> list = new List<double>();
            for (int i = 0; i < _Galaxy.Systems.Count; i++)
            {
                SystemInfo systemInfo = _Galaxy.Systems[i];
                if (!systemInfo.HasResearchBonus || !CheckSystemExplored(systemInfo.SystemStar.SystemIndex))
                {
                    continue;
                }
                bool flag2 = true;
                Empire empire = _Galaxy.CheckSystemOwnership(systemInfo.SystemStar);
                if (empire != null && empire != this)
                {
                    flag2 = false;
                }
                if (allowOccupiedSystems)
                {
                    flag2 = true;
                }
                if (!flag2 || CheckNearPirateBase(systemInfo.SystemStar, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos) || (!flag && _Galaxy.CheckInStorm(systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos)))
                {
                    continue;
                }
                HabitatList habitatList2 = new HabitatList();
                List<double> list2 = new List<double>();
                for (int j = 0; j < systemInfo.Habitats.Count; j++)
                {
                    if (systemInfo.Habitats[j].ResearchBonus > 0)
                    {
                        habitatList2.Add(systemInfo.Habitats[j]);
                        list2.Add((double)(int)systemInfo.Habitats[j].ResearchBonus / 100.0);
                    }
                }
                if (habitatList2.Count <= 0 && systemInfo.SystemStar.ResearchBonus > 0)
                {
                    habitatList2.Add(systemInfo.SystemStar);
                    list2.Add((double)(int)systemInfo.SystemStar.ResearchBonus / 100.0);
                }
                for (int k = 0; k < habitatList2.Count; k++)
                {
                    Habitat habitat = habitatList2[k];
                    double num = list2[k];
                    if (habitat == null || CheckResearchStationAtLocation(habitat) || !_Galaxy.CheckEmpireTerritoryCanBuildAtHabitat(this, habitat))
                    {
                        continue;
                    }
                    if (Policy.ResearchIndustryFocus != 0)
                    {
                        switch (habitat.ResearchBonusIndustry)
                        {
                            case IndustryType.Weapon:
                                if (Policy.ResearchIndustryFocus == IndustryType.Weapon)
                                {
                                    num *= 1.5;
                                }
                                break;
                            case IndustryType.Energy:
                                if (Policy.ResearchIndustryFocus == IndustryType.Energy)
                                {
                                    num *= 1.5;
                                }
                                break;
                            case IndustryType.HighTech:
                                if (Policy.ResearchIndustryFocus == IndustryType.HighTech)
                                {
                                    num *= 1.5;
                                }
                                break;
                        }
                    }
                    double item = 1.0 - num;
                    list.Add(item);
                    habitatList.Add(habitat);
                }
            }
            Habitat[] items = habitatList.ToArray();
            double[] keys = list.ToArray();
            Array.Sort(keys, items);
            HabitatList habitatList3 = new HabitatList();
            habitatList3.AddRange(items);
            if (assignToResearchHabitats)
            {
                _ResearchHabitats = habitatList3;
            }
            return habitatList3;
        }

        public bool CheckResearchStationAtLocation(Habitat habitat)
        {
            if (habitat.Category == HabitatCategoryType.Asteroid)
            {
                habitat = Galaxy.DetermineHabitatSystemStar(habitat);
            }
            if (habitat.Category == HabitatCategoryType.Star)
            {
                BuiltObjectList builtObjectsAtLocation = _Galaxy.GetBuiltObjectsAtLocation(habitat.Xpos, habitat.Ypos, (int)((double)Galaxy.MaxSolarSystemSize * 2.1));
                for (int i = 0; i < builtObjectsAtLocation.Count; i++)
                {
                    BuiltObject builtObject = builtObjectsAtLocation[i];
                    if (((builtObject != null && builtObject.ResearchWeapons > 0) || builtObject.ResearchEnergy > 0 || builtObject.ResearchHighTech > 0) && builtObject.Role == BuiltObjectRole.Base && builtObject.SubRole != BuiltObjectSubRole.SmallSpacePort && builtObject.SubRole != BuiltObjectSubRole.MediumSpacePort && builtObject.SubRole != BuiltObjectSubRole.LargeSpacePort && builtObject.NearestSystemStar == habitat)
                    {
                        return true;
                    }
                }
            }
            else if (habitat.BasesAtHabitat != null && habitat.BasesAtHabitat.Count > 0)
            {
                for (int j = 0; j < habitat.BasesAtHabitat.Count; j++)
                {
                    if (habitat.BasesAtHabitat[j].ResearchWeapons > 0 || habitat.BasesAtHabitat[j].ResearchEnergy > 0 || habitat.BasesAtHabitat[j].ResearchHighTech > 0)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public PrioritizedTargetList DetermineResortBaseLocation(bool allowAnyDistanceFromColonies)
        {
            PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
            Design design = _Designs.FindNewestCanBuild(BuiltObjectSubRole.ResortBase);
            if (design == null)
            {
                return prioritizedTargetList;
            }
            double num = Galaxy.SectorSize;
            double num2 = Math.Sqrt(num);
            for (int i = 0; i < _Galaxy.Systems.Count; i++)
            {
                SystemInfo systemInfo = _Galaxy.Systems[i];
                if (!CheckSystemExplored(systemInfo.SystemStar.SystemIndex) || CheckNearPirateBase(systemInfo.SystemStar, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos))
                {
                    continue;
                }
                for (int j = 0; j < systemInfo.Habitats.Count; j++)
                {
                    Habitat habitat = systemInfo.Habitats[j];
                    if (!(habitat.ScenicFactor > 0f) || !_ResourceMap.CheckResourcesKnown(habitat))
                    {
                        continue;
                    }
                    Habitat habitat2 = _Galaxy.FindNearestColony(habitat.Xpos, habitat.Ypos, null, 100000);
                    if (habitat2 == null)
                    {
                        continue;
                    }
                    double num3 = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                    if (!allowAnyDistanceFromColonies && !(num3 < num))
                    {
                        continue;
                    }
                    BuiltObject builtObject = _Galaxy.FindNearestBuiltObject((int)habitat.Xpos, (int)habitat.Ypos, BuiltObjectRole.Base);
                    double num4 = double.MaxValue;
                    if (builtObject != null)
                    {
                        num4 = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                    }
                    if (num4 > 1000.0)
                    {
                        double num5 = 1.0;
                        if (systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != null && systemInfo.DominantEmpire.Empire != this)
                        {
                            num5 = 0.3;
                        }
                        double num6 = num2 - Math.Sqrt(num3);
                        int priority = (int)((double)habitat.ScenicFactor * num6 * num5);
                        prioritizedTargetList.Add(new PrioritizedTarget(habitat, priority));
                    }
                }
            }
            prioritizedTargetList.Sort();
            prioritizedTargetList.Reverse();
            return prioritizedTargetList;
        }

        private void DetermineMonitoringStationLocation()
        {
            Component component = Research.EvaluateDesiredComponent(ComponentType.SensorLongRange, ShipDesignFocus.Balanced);
            Design design = Designs.FindNewestCanBuild(BuiltObjectSubRole.MonitoringStation);
            if (design == null || design.SensorLongRange <= 0 || component == null)
            {
                return;
            }
            bool flag = CheckConstructionShipAndMiningStationCanSurviveStorms();
            HabitatList habitatList = new HabitatList();
            List<double> list = new List<double>();
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                if (diplomaticRelation.Type == DiplomaticRelationType.NotMet || empire == this)
                {
                    continue;
                }
                bool flag2 = false;
                switch (diplomaticRelation.Strategy)
                {
                    case DiplomaticStrategy.Conquer:
                    case DiplomaticStrategy.Defend:
                    case DiplomaticStrategy.DefendPlacate:
                    case DiplomaticStrategy.DefendUndermine:
                        flag2 = true;
                        break;
                }
                if (empire.Colonies.Count >= 5)
                {
                    EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(this);
                    if (empireEvaluation.OverallAttitude < 0)
                    {
                        flag2 = true;
                    }
                }
                if (!flag2)
                {
                    continue;
                }
                Habitat habitat = _Galaxy.FastFindNearestColony((int)Capital.Xpos, (int)Capital.Ypos, empire, 0);
                if (habitat != null)
                {
                    SystemVisibilityStatus systemVisibilityStatus = CheckSystemVisibilityStatus(habitat.SystemIndex);
                    if (systemVisibilityStatus == SystemVisibilityStatus.Explored && !IsObjectVisibleToThisEmpire(habitat))
                    {
                        Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                        habitatList.Add(habitat2);
                        double item = _Galaxy.CalculateDistance(Capital.Xpos, Capital.Ypos, habitat2.Xpos, habitat2.Ypos);
                        list.Add(item);
                    }
                }
            }
            Habitat[] array = habitatList.ToArray();
            double[] keys = list.ToArray();
            Array.Sort(keys, array);
            HabitatList habitatList2 = new HabitatList();
            List<Point> list2 = new List<Point>();
            for (int j = 0; j < array.Length; j++)
            {
                bool flag3 = false;
                Habitat habitat3 = array[j];
                Habitat habitat4 = _Galaxy.FindNearestUncolonizedExploredSystem(habitat3.Xpos, habitat3.Ypos, this);
                if (habitat4 != null)
                {
                    double num = _Galaxy.CalculateDistance(habitat4.Xpos, habitat4.Ypos, habitat3.Xpos, habitat3.Ypos);
                    if (num < (double)design.SensorLongRange - (double)Galaxy.MaxSolarSystemSize * 2.1 && _Galaxy.Systems[habitat4.SystemIndex].Habitats.Count > 0 && !CheckNearPirateBase(habitat4, habitat4.Xpos, habitat4.Ypos) && (flag || !_Galaxy.CheckInStorm(habitat4.Xpos, habitat4.Ypos)))
                    {
                        bool flag4 = false;
                        BuiltObject builtObject = _Galaxy.FastFindNearestLongRangeScannerBase((int)habitat4.Xpos, (int)habitat4.Ypos, this);
                        if (builtObject != null)
                        {
                            double num2 = _Galaxy.CalculateDistance(habitat4.Xpos, habitat4.Ypos, builtObject.Xpos, builtObject.Ypos);
                            if (num2 < (double)Galaxy.MaxSolarSystemSize * 2.1)
                            {
                                flag4 = true;
                            }
                        }
                        if (!flag4)
                        {
                            bool flag5 = false;
                            SystemInfo systemInfo = _Galaxy.Systems[habitat3];
                            Empire empire2 = null;
                            if (systemInfo != null && systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != null)
                            {
                                empire2 = systemInfo.DominantEmpire.Empire;
                            }
                            if (empire2 != null)
                            {
                                if (empire2.IsObjectVisibleToThisEmpire(habitat4, includeLongRangeScanners: false, includeShipsOutsideSystems: false))
                                {
                                    flag5 = true;
                                }
                                else if (empire2.FindLongRangeScannerThatCanSeePoint(habitat4.Xpos, habitat4.Ypos, design.Stealth) != null)
                                {
                                    flag5 = true;
                                }
                            }
                            if (!flag5)
                            {
                                flag3 = true;
                                int index = Galaxy.Rnd.Next(0, _Galaxy.Systems[habitat4.SystemIndex].Habitats.Count);
                                Habitat item2 = _Galaxy.Systems[habitat4.SystemIndex].Habitats[index];
                                habitatList2.Add(item2);
                            }
                        }
                    }
                }
                if (flag3)
                {
                    continue;
                }
                double angle = _Galaxy.SelectRandomHeading();
                double num3 = (double)design.SensorLongRange - (double)Galaxy.MaxSolarSystemSize * 2.1;
                num3 -= (double)Galaxy.MaxSolarSystemSize * 3.0;
                ObtainCoordinatesFromPoint(angle, habitat3.Xpos, habitat3.Ypos, num3, out var x, out var y);
                int num4 = 0;
                bool flag6 = false;
                while ((!CheckCoordsWithinGalaxy(x, y) || !flag6) && (flag || !_Galaxy.CheckInStorm(x, y)) && num4 < 20)
                {
                    angle = _Galaxy.SelectRandomHeading();
                    ObtainCoordinatesFromPoint(angle, habitat3.Xpos, habitat3.Ypos, num3, out x, out y);
                    num4++;
                    flag6 = true;
                    BuiltObject builtObject2 = _Galaxy.FastFindNearestLongRangeScannerBase((int)x, (int)y, this);
                    if (builtObject2 != null)
                    {
                        double num5 = _Galaxy.CalculateDistance(builtObject2.Xpos, builtObject2.Ypos, x, y);
                        if (num5 < (double)Galaxy.MaxSolarSystemSize * 2.1)
                        {
                            flag6 = false;
                        }
                    }
                    if (flag6)
                    {
                        SystemInfo systemInfo2 = _Galaxy.Systems[habitat3];
                        Empire empire3 = null;
                        if (systemInfo2 != null && systemInfo2.DominantEmpire != null && systemInfo2.DominantEmpire.Empire != null)
                        {
                            empire3 = systemInfo2.DominantEmpire.Empire;
                        }
                        if (empire3 != null && empire3.FindLongRangeScannerThatCanSeePoint(x, y, design.Stealth) != null)
                        {
                            flag6 = false;
                        }
                    }
                }
                if (CheckCoordsWithinGalaxy(x, y) && !flag6)
                {
                    list2.Add(new Point((int)x, (int)y));
                }
            }
            _MonitoringHabitats = habitatList2;
            _MonitoringPoints = list2;
        }

        private bool CheckCoordsWithinGalaxy(double x, double y)
        {
            if (x < 0.0 || y < 0.0)
            {
                return false;
            }
            if (x > (double)Galaxy.SizeX || y > (double)Galaxy.SizeY)
            {
                return false;
            }
            return true;
        }

        public void ObtainCoordinatesFromPoint(double angle, double startX, double startY, double distance, out double x, out double y)
        {
            double num = Math.Cos(angle) * distance;
            double num2 = Math.Sin(angle) * distance;
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num *= -1.0;
            }
            if (Galaxy.Rnd.Next(0, 2) == 1)
            {
                num2 *= -1.0;
            }
            x = startX + num;
            y = startY + num2;
        }

        private bool CheckMiningStationForResourceClearance(BuiltObject ship, BuiltObject miningStation, ResourceList empireDeficientResources)
        {
            if (miningStation.Empire == null)
            {
                return false;
            }
            bool result = false;
            if (miningStation != null && miningStation.Role == BuiltObjectRole.Base && miningStation.IsResourceExtractor && miningStation.SubRole != BuiltObjectSubRole.SmallSpacePort && miningStation.SubRole != BuiltObjectSubRole.MediumSpacePort && miningStation.SubRole != BuiltObjectSubRole.LargeSpacePort)
            {
                if (!ship.WithinFuelRangeAndRefuel(miningStation.Xpos, miningStation.Ypos, 0.0))
                {
                    return false;
                }
                HabitatResourceList habitatResourceList = ((miningStation.ParentHabitat == null || miningStation.ParentHabitat.Resources == null) ? new HabitatResourceList() : miningStation.ParentHabitat.Resources);
                CargoList cargo = miningStation.Cargo;
                int num = 0;
                if (cargo != null)
                {
                    num = cargo.GetTotalUnitsAvailable(this, habitatResourceList);
                }
                int num2 = Galaxy.MiningStationResourceTransportThreshhold;
                if (cargo != null)
                {
                    num2 = Math.Max(num2, miningStation.Cargo.GetTotalUnits(this) / 4);
                }
                if (num > 0 && num >= num2)
                {
                    double num3 = double.MaxValue;
                    BuiltObject builtObject = null;
                    for (int i = 0; i < miningStation.Empire.SpacePorts.Count; i++)
                    {
                        BuiltObject builtObject2 = miningStation.Empire.SpacePorts[i];
                        if (builtObject2 != null && builtObject2 != miningStation && builtObject2.IsSpacePort && builtObject2.Cargo != null && builtObject2.CargoSpace >= builtObject2.CargoCapacity / 4)
                        {
                            double num4 = _Galaxy.CalculateDistanceSquared(builtObject2.Xpos, builtObject2.Ypos, miningStation.Xpos, miningStation.Ypos);
                            if (num4 < num3)
                            {
                                num3 = num4;
                                builtObject = builtObject2;
                            }
                        }
                    }
                    if (builtObject != null && cargo != null)
                    {
                        CargoList cargoList = new CargoList();
                        Cargo cargo2 = null;
                        foreach (Cargo item2 in cargo)
                        {
                            if (item2.EmpireId == EmpireId && item2.CommodityResource != null && item2.Available > 0 && habitatResourceList.ContainsId(item2.CommodityResource.ResourceID))
                            {
                                int num5 = empireDeficientResources.IndexOf(item2.CommodityResource.ResourceID);
                                if (num5 >= 0 && num5 < 5)
                                {
                                    cargo2 = item2;
                                }
                            }
                        }
                        if (cargo2 != null)
                        {
                            Resource commodityResource = cargo2.CommodityResource;
                            int num6 = Math.Min(cargo2.Available, ship.CargoSpace);
                            if (num6 > 0)
                            {
                                Cargo cargo3 = new Cargo(commodityResource, num6, miningStation.Empire);
                                cargoList.Add(cargo3);
                                cargo2.Reserved += num6;
                            }
                        }
                        else
                        {
                            double num7 = (double)ship.CargoSpace / (double)cargo.GetTotalUnitsAvailable(this, habitatResourceList);
                            if (num7 > 1.0)
                            {
                                num7 = 1.0;
                            }
                            foreach (Cargo item3 in cargo)
                            {
                                if (item3.EmpireId == EmpireId && item3.CommodityResource != null && habitatResourceList.ContainsId(item3.CommodityResource.ResourceID))
                                {
                                    Resource commodityResource2 = item3.CommodityResource;
                                    int val = (int)((double)item3.Available * num7);
                                    val = Math.Min(val, item3.Available);
                                    if (val > 0)
                                    {
                                        Cargo cargo4 = new Cargo(commodityResource2, val, miningStation.Empire);
                                        cargoList.Add(cargo4);
                                        item3.Reserved += val;
                                    }
                                }
                            }
                        }
                        for (int j = 0; j < cargoList.Count; j++)
                        {
                            Cargo cargo5 = cargoList[j];
                            if (cargo5 != null)
                            {
                                Contract item = new Contract(miningStation, cargo5.Amount, cargo5.Resource.ResourceID, -1, EmpireId);
                                ship.ContractsToFulfill.Add(item);
                            }
                        }
                        ship.AssignMission(BuiltObjectMissionType.Transport, miningStation, builtObject, cargoList, BuiltObjectMissionPriority.Normal);
                        result = true;
                    }
                }
            }
            return result;
        }

        private bool CheckColonyForResourceClearance(BuiltObject ship, Habitat colony)
        {
            bool result = false;
            CargoList cargo = colony.Cargo;
            if (cargo != null)
            {
                if (!ship.WithinFuelRangeAndRefuel(colony.Xpos, colony.Ypos, 0.0, ship.CachedRefuellingLocation))
                {
                    return false;
                }
                {
                    foreach (Cargo item2 in cargo)
                    {
                        if (item2.EmpireId != EmpireId || item2.CommodityResource == null)
                        {
                            continue;
                        }
                        Resource commodityResource = item2.CommodityResource;
                        int num = 0;
                        num = ((!commodityResource.IsLuxuryResource) ? (item2.Available - Galaxy.CalculateResourceLevel(item2, colony)) : ((!commodityResource.IsRestrictedResource) ? (item2.Available - colony.CalculateMinimumLuxuryResourceLevel()) : (item2.Available - colony.CalculateMinimumLuxuryResourceLevelRestricted())));
                        if (num <= Galaxy.ColonyResourceTransportThreshhold)
                        {
                            continue;
                        }
                        int val = num;
                        int num2 = Math.Min(val, ship.CargoSpace);
                        if (num2 <= 0)
                        {
                            continue;
                        }
                        double num3 = double.MaxValue;
                        BuiltObject builtObject = null;
                        for (int i = 0; i < colony.Empire.SpacePorts.Count; i++)
                        {
                            BuiltObject builtObject2 = colony.Empire.SpacePorts[i];
                            if (builtObject2.IsSpacePort && builtObject2.Cargo != null && builtObject2.CargoSpace >= builtObject2.CargoCapacity / 4)
                            {
                                double num4 = _Galaxy.CalculateDistanceSquared(builtObject2.Xpos, builtObject2.Ypos, colony.Xpos, colony.Ypos);
                                if (num4 < num3)
                                {
                                    num3 = num4;
                                    builtObject = builtObject2;
                                }
                            }
                        }
                        if (builtObject != null)
                        {
                            CargoList cargoList = new CargoList();
                            cargoList.Add(new Cargo(commodityResource, num2, this));
                            item2.Reserved += num2;
                            Contract item = new Contract(colony, num2, commodityResource.ResourceID, -1, EmpireId);
                            ship.ContractsToFulfill.Add(item);
                            ship.AssignMission(BuiltObjectMissionType.Transport, colony, builtObject, cargoList, BuiltObjectMissionPriority.Normal);
                            return true;
                        }
                    }
                    return result;
                }
            }
            return result;
        }

        private int DetermineDiplomaticMissionDifficulty(Empire targetEmpire, DiplomaticRelationType desiredDiplomaticRelationType, Empire subjectEmpire)
        {
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            EmpireEvaluation empireEvaluation = targetEmpire.EmpireEvaluations[subjectEmpire];
            if (empireEvaluation != null)
            {
                num3 = empireEvaluation.OverallAttitude;
            }
            ResolveTypicalAttitudeLevel(desiredDiplomaticRelationType, out var lowerLevel, out var upperLevel);
            if (num3 < lowerLevel)
            {
                num2 = (lowerLevel - num3) * 3;
            }
            else if (num3 > upperLevel)
            {
                num2 = (upperLevel - num3) * 3;
            }
            return 100 + num2;
        }

        public double CalculateIntelligenceMissionBonusFromLeaderAndAmbassador(IntelligenceMissionType missionType, Empire targetEmpire)
        {
            double num = 1.0;
            double num2 = 1.0;
            double num3 = 1.0;
            if (Characters != null)
            {
                CharacterList ambassadorsForEmpire = Characters.GetAmbassadorsForEmpire(targetEmpire);
                int highestSkillLevel = ambassadorsForEmpire.GetHighestSkillLevel(CharacterSkillType.Espionage);
                int highestSkillLevel2 = ambassadorsForEmpire.GetHighestSkillLevel(CharacterSkillType.CounterEspionage);
                num2 = 1.0 + (double)highestSkillLevel / 100.0;
                num3 = 1.0 + (double)highestSkillLevel2 / 100.0;
            }
            switch (missionType)
            {
                case IntelligenceMissionType.StealGalaxyMap:
                case IntelligenceMissionType.StealOperationsMap:
                case IntelligenceMissionType.StealTechData:
                case IntelligenceMissionType.StealTerritoryMap:
                    if (Leader != null)
                    {
                        num *= 1.0 + (double)Leader.Espionage / 100.0;
                    }
                    num *= num2;
                    break;
                case IntelligenceMissionType.CounterIntelligence:
                    if (Leader != null)
                    {
                        num *= 1.0 + (double)Leader.CounterEspionage / 100.0;
                    }
                    num *= num3;
                    break;
            }
            return num;
        }

        public void CalculateIntelligenceMissionSkill(Character agent, IntelligenceMissionType missionType, Empire targetEmpire, out double oneYearDifficulty, out double threeMonthDifficulty, out double oneMonthDifficulty)
        {
            double num = (double)DominantRace.CautionLevel / 100.0;
            double num2 = num * 1.4;
            int num3 = 0;
            switch (missionType)
            {
                case IntelligenceMissionType.CounterIntelligence:
                    num3 = agent.CounterEspionageFactored;
                    break;
                case IntelligenceMissionType.AssassinateCharacter:
                    num3 = agent.AssassinationFactored;
                    break;
                case IntelligenceMissionType.DeepCover:
                    num3 = agent.ConcealmentFactored;
                    break;
                case IntelligenceMissionType.InciteRevolution:
                    num3 = agent.PsyOpsFactored;
                    break;
                case IntelligenceMissionType.SabotageConstruction:
                case IntelligenceMissionType.SabotageColony:
                case IntelligenceMissionType.DestroyBase:
                    num3 = agent.SabotageFactored;
                    break;
                case IntelligenceMissionType.StealGalaxyMap:
                case IntelligenceMissionType.StealOperationsMap:
                case IntelligenceMissionType.StealTechData:
                case IntelligenceMissionType.StealTerritoryMap:
                    num3 = agent.EspionageFactored;
                    if (missionType == IntelligenceMissionType.StealTechData && targetEmpire != null && targetEmpire.Characters != null)
                    {
                        if (targetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.ForeignSpy))
                        {
                            num3 *= 2;
                        }
                        else if (targetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.Patriot))
                        {
                            num3 /= 2;
                        }
                    }
                    break;
            }
            double num4 = CalculateIntelligenceMissionBonusFromLeaderAndAmbassador(missionType, targetEmpire);
            num3 = (int)((double)num3 * num4);
            oneYearDifficulty = (double)num3 * 4.0 / num2;
            threeMonthDifficulty = (double)num3 * 2.0 / num2;
            oneMonthDifficulty = (double)num3 / num2;
        }

        private IntelligenceMission DetermineSabotageMission(Empire targetEmpire, EmpireEvaluation evaluation, DiplomaticRelation relation, PirateRelation pirateRelation, Character agent)
        {
            IntelligenceMission result = null;
            List<IntelligenceMissionType> list = new List<IntelligenceMissionType>();
            if (relation != null)
            {
                if (relation.Type == DiplomaticRelationType.War)
                {
                    list.AddRange(new IntelligenceMissionType[6]
                    {
                    IntelligenceMissionType.DeepCover,
                    IntelligenceMissionType.StealOperationsMap,
                    IntelligenceMissionType.DestroyBase,
                    IntelligenceMissionType.AssassinateCharacter,
                    IntelligenceMissionType.SabotageConstruction,
                    IntelligenceMissionType.SabotageColony
                    });
                }
                else
                {
                    switch (relation.Strategy)
                    {
                        case DiplomaticStrategy.Conquer:
                            list.AddRange(new IntelligenceMissionType[5]
                            {
                        IntelligenceMissionType.DeepCover,
                        IntelligenceMissionType.StealOperationsMap,
                        IntelligenceMissionType.SabotageConstruction,
                        IntelligenceMissionType.DestroyBase,
                        IntelligenceMissionType.AssassinateCharacter
                            });
                            break;
                        case DiplomaticStrategy.Undermine:
                            list.AddRange(new IntelligenceMissionType[8]
                            {
                        IntelligenceMissionType.StealTerritoryMap,
                        IntelligenceMissionType.StealOperationsMap,
                        IntelligenceMissionType.StealTechData,
                        IntelligenceMissionType.SabotageColony,
                        IntelligenceMissionType.DestroyBase,
                        IntelligenceMissionType.AssassinateCharacter,
                        IntelligenceMissionType.InciteRevolution,
                        IntelligenceMissionType.DeepCover
                            });
                            break;
                        case DiplomaticStrategy.DefendUndermine:
                            list.AddRange(new IntelligenceMissionType[4]
                            {
                        IntelligenceMissionType.StealTerritoryMap,
                        IntelligenceMissionType.StealGalaxyMap,
                        IntelligenceMissionType.StealTechData,
                        IntelligenceMissionType.DeepCover
                            });
                            break;
                        case DiplomaticStrategy.Punish:
                            list.AddRange(new IntelligenceMissionType[4]
                            {
                        IntelligenceMissionType.SabotageConstruction,
                        IntelligenceMissionType.SabotageColony,
                        IntelligenceMissionType.DestroyBase,
                        IntelligenceMissionType.InciteRevolution
                            });
                            break;
                    }
                }
            }
            else if (pirateRelation != null)
            {
                switch (pirateRelation.Type)
                {
                    case PirateRelationType.None:
                        list.AddRange(new IntelligenceMissionType[9]
                        {
                    IntelligenceMissionType.DeepCover,
                    IntelligenceMissionType.StealOperationsMap,
                    IntelligenceMissionType.StealTerritoryMap,
                    IntelligenceMissionType.StealGalaxyMap,
                    IntelligenceMissionType.StealTechData,
                    IntelligenceMissionType.DestroyBase,
                    IntelligenceMissionType.AssassinateCharacter,
                    IntelligenceMissionType.SabotageConstruction,
                    IntelligenceMissionType.SabotageColony
                        });
                        break;
                    case PirateRelationType.Protection:
                        list.AddRange(new IntelligenceMissionType[5]
                        {
                    IntelligenceMissionType.DeepCover,
                    IntelligenceMissionType.StealOperationsMap,
                    IntelligenceMissionType.StealTerritoryMap,
                    IntelligenceMissionType.StealGalaxyMap,
                    IntelligenceMissionType.StealTechData
                        });
                        break;
                }
            }
            long timeLength = Galaxy.RealSecondsInGalacticYear * 1000 / 12;
            long timeLength2 = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
            long timeLength3 = Galaxy.RealSecondsInGalacticYear * 1000;
            double oneYearDifficulty = 0.0;
            double threeMonthDifficulty = 0.0;
            double oneMonthDifficulty = 0.0;
            if (CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.InciteRevolution))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.InciteRevolution, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                IntelligenceMission intelligenceMission = new IntelligenceMission(this, null, IntelligenceMissionType.InciteRevolution, _Galaxy.CurrentStarDate, targetEmpire);
                if (!CheckWhetherTargetOfIntelligenceMission(targetEmpire, targetEmpire, IntelligenceMissionType.InciteRevolution) && !CheckForIntelligenceMissionsOfTypeAgainstEmpire(targetEmpire, IntelligenceMissionType.InciteRevolution) && list.Contains(IntelligenceMissionType.InciteRevolution) && intelligenceMission.Difficulty <= (int)oneYearDifficulty)
                {
                    result = intelligenceMission;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            CharacterList characterList = ResolveKnownCharacters(targetEmpire);
            if (characterList.Count > 0 && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.AssassinateCharacter))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.AssassinateCharacter, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                int num = Galaxy.Rnd.Next(0, characterList.Count);
                for (int i = num; i < characterList.Count; i++)
                {
                    Character character = characterList[i];
                    if (character == null || !character.Active)
                    {
                        continue;
                    }
                    IntelligenceMission intelligenceMission2 = new IntelligenceMission(this, null, IntelligenceMissionType.AssassinateCharacter, _Galaxy.CurrentStarDate, character);
                    if (CheckWhetherTargetOfIntelligenceMission(targetEmpire, character, IntelligenceMissionType.AssassinateCharacter) || !list.Contains(IntelligenceMissionType.AssassinateCharacter) || intelligenceMission2.Difficulty > (int)oneYearDifficulty)
                    {
                        continue;
                    }
                    result = intelligenceMission2;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission2.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission2;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission2.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission2;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
                for (int j = 0; j < num; j++)
                {
                    Character character2 = characterList[j];
                    if (character2 == null || !character2.Active)
                    {
                        continue;
                    }
                    IntelligenceMission intelligenceMission3 = new IntelligenceMission(this, null, IntelligenceMissionType.AssassinateCharacter, _Galaxy.CurrentStarDate, character2);
                    if (CheckWhetherTargetOfIntelligenceMission(targetEmpire, character2, IntelligenceMissionType.AssassinateCharacter) || !list.Contains(IntelligenceMissionType.AssassinateCharacter) || intelligenceMission3.Difficulty > (int)oneYearDifficulty)
                    {
                        continue;
                    }
                    result = intelligenceMission3;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission3.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission3;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission3.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission3;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            List<StellarObject> list2 = ResolveKnownBases(targetEmpire);
            if (list2.Count > 0 && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.DestroyBase))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.DestroyBase, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                int num2 = Galaxy.Rnd.Next(0, list2.Count);
                for (int k = num2; k < list2.Count; k++)
                {
                    BuiltObject builtObject = (BuiltObject)list2[k];
                    if (builtObject == null || builtObject.HasBeenDestroyed)
                    {
                        continue;
                    }
                    IntelligenceMission intelligenceMission4 = new IntelligenceMission(this, null, IntelligenceMissionType.DestroyBase, _Galaxy.CurrentStarDate, builtObject);
                    if (CheckWhetherTargetOfIntelligenceMission(targetEmpire, builtObject, IntelligenceMissionType.DestroyBase) || !list.Contains(IntelligenceMissionType.DestroyBase) || intelligenceMission4.Difficulty > (int)oneYearDifficulty)
                    {
                        continue;
                    }
                    result = intelligenceMission4;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission4.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission4;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission4.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission4;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
                for (int l = 0; l < num2; l++)
                {
                    BuiltObject builtObject2 = (BuiltObject)list2[l];
                    if (builtObject2 == null || builtObject2.HasBeenDestroyed)
                    {
                        continue;
                    }
                    IntelligenceMission intelligenceMission5 = new IntelligenceMission(this, null, IntelligenceMissionType.DestroyBase, _Galaxy.CurrentStarDate, builtObject2);
                    if (CheckWhetherTargetOfIntelligenceMission(targetEmpire, builtObject2, IntelligenceMissionType.DestroyBase) || !list.Contains(IntelligenceMissionType.DestroyBase) || intelligenceMission5.Difficulty > (int)oneYearDifficulty)
                    {
                        continue;
                    }
                    result = intelligenceMission5;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission5.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission5;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission5.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission5;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            List<StellarObject> list3 = ResolveKnownColonies(targetEmpire);
            if (list3.Count > 0 && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.SabotageColony))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.SabotageColony, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                int num3 = Galaxy.Rnd.Next(0, list3.Count);
                for (int m = num3; m < list3.Count; m++)
                {
                    Habitat habitat = (Habitat)list3[m];
                    if (habitat == null || habitat.HasBeenDestroyed || !(habitat.CulturalDistressFactor > 0f))
                    {
                        continue;
                    }
                    IntelligenceMission intelligenceMission6 = new IntelligenceMission(this, null, IntelligenceMissionType.SabotageColony, _Galaxy.CurrentStarDate, habitat);
                    if (CheckWhetherTargetOfIntelligenceMission(targetEmpire, habitat, IntelligenceMissionType.SabotageColony) || !list.Contains(IntelligenceMissionType.SabotageColony) || intelligenceMission6.Difficulty > (int)oneYearDifficulty)
                    {
                        continue;
                    }
                    result = intelligenceMission6;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission6.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission6;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission6.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission6;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
                for (int n = 0; n < num3; n++)
                {
                    Habitat habitat2 = (Habitat)list3[n];
                    if (habitat2 == null || habitat2.HasBeenDestroyed || !(habitat2.CulturalDistressFactor > 0f))
                    {
                        continue;
                    }
                    IntelligenceMission intelligenceMission7 = new IntelligenceMission(this, null, IntelligenceMissionType.SabotageColony, _Galaxy.CurrentStarDate, habitat2);
                    if (CheckWhetherTargetOfIntelligenceMission(targetEmpire, habitat2, IntelligenceMissionType.SabotageColony) || !list.Contains(IntelligenceMissionType.SabotageColony) || intelligenceMission7.Difficulty > (int)oneYearDifficulty)
                    {
                        continue;
                    }
                    result = intelligenceMission7;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission7.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission7;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission7.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission7;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            if (CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.SabotageConstruction))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.SabotageConstruction, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                List<StellarObject> list4 = ResolveKnownBuiltObjectConstructionYards(targetEmpire);
                if (list4.Count > 0)
                {
                    int num4 = Galaxy.Rnd.Next(0, list4.Count);
                    for (int num5 = num4; num5 < list4.Count; num5++)
                    {
                        BuiltObject builtObject3 = (BuiltObject)list4[num5];
                        if (builtObject3 != null && !builtObject3.HasBeenDestroyed && builtObject3.ConstructionQueue != null && builtObject3.ConstructionQueue.ConstructionYards.CountUnderConstruction > 0)
                        {
                            IntelligenceMission intelligenceMission8 = new IntelligenceMission(this, null, IntelligenceMissionType.SabotageConstruction, _Galaxy.CurrentStarDate, builtObject3);
                            if (!CheckWhetherTargetOfIntelligenceMission(targetEmpire, builtObject3, IntelligenceMissionType.SabotageConstruction) && list.Contains(IntelligenceMissionType.SabotageConstruction) && intelligenceMission8.Difficulty <= (int)oneMonthDifficulty)
                            {
                                result = intelligenceMission8;
                                result.TimeLength = timeLength;
                                return result;
                            }
                        }
                    }
                    for (int num6 = 0; num6 < num4; num6++)
                    {
                        BuiltObject builtObject4 = (BuiltObject)list4[num6];
                        if (builtObject4 != null && !builtObject4.HasBeenDestroyed && builtObject4.ConstructionQueue != null && builtObject4.ConstructionQueue.ConstructionYards.CountUnderConstruction > 0)
                        {
                            IntelligenceMission intelligenceMission9 = new IntelligenceMission(this, null, IntelligenceMissionType.SabotageConstruction, _Galaxy.CurrentStarDate, builtObject4);
                            if (!CheckWhetherTargetOfIntelligenceMission(targetEmpire, builtObject4, IntelligenceMissionType.SabotageConstruction) && list.Contains(IntelligenceMissionType.SabotageConstruction) && intelligenceMission9.Difficulty <= (int)oneMonthDifficulty)
                            {
                                result = intelligenceMission9;
                                result.TimeLength = timeLength;
                                return result;
                            }
                        }
                    }
                }
                if (list3.Count > 0)
                {
                    int num7 = Galaxy.Rnd.Next(0, list3.Count);
                    for (int num8 = num7; num8 < list3.Count; num8++)
                    {
                        Habitat habitat3 = (Habitat)list3[num8];
                        if (habitat3 != null && !habitat3.HasBeenDestroyed && habitat3.ConstructionQueue != null && habitat3.ConstructionQueue.ConstructionYards.CountUnderConstruction > 0)
                        {
                            IntelligenceMission intelligenceMission10 = new IntelligenceMission(this, null, IntelligenceMissionType.SabotageConstruction, _Galaxy.CurrentStarDate, habitat3);
                            if (!CheckWhetherTargetOfIntelligenceMission(targetEmpire, habitat3, IntelligenceMissionType.SabotageConstruction) && list.Contains(IntelligenceMissionType.SabotageConstruction) && intelligenceMission10.Difficulty <= (int)oneMonthDifficulty)
                            {
                                result = intelligenceMission10;
                                result.TimeLength = timeLength;
                                return result;
                            }
                        }
                    }
                    for (int num9 = 0; num9 < num7; num9++)
                    {
                        Habitat habitat4 = (Habitat)list3[num9];
                        if (habitat4 != null && !habitat4.HasBeenDestroyed && habitat4.ConstructionQueue != null && habitat4.ConstructionQueue.ConstructionYards.CountUnderConstruction > 0)
                        {
                            IntelligenceMission intelligenceMission11 = new IntelligenceMission(this, null, IntelligenceMissionType.SabotageConstruction, _Galaxy.CurrentStarDate, habitat4);
                            if (!CheckWhetherTargetOfIntelligenceMission(targetEmpire, habitat4, IntelligenceMissionType.SabotageConstruction) && list.Contains(IntelligenceMissionType.SabotageConstruction) && intelligenceMission11.Difficulty <= (int)oneMonthDifficulty)
                            {
                                result = intelligenceMission11;
                                result.TimeLength = timeLength;
                                return result;
                            }
                        }
                    }
                }
            }
            return result;
        }

        public List<StellarObject> ResolveKnownColonies(Empire targetEmpire)
        {
            List<StellarObject> list = new List<StellarObject>();
            for (int i = 0; i < targetEmpire.Colonies.Count; i++)
            {
                Habitat habitat = targetEmpire.Colonies[i];
                if (CheckSystemExplored(habitat.SystemIndex) && habitat.Owner == targetEmpire)
                {
                    list.Add(habitat);
                }
            }
            return list;
        }

        public CharacterList ResolveKnownCharacters(Empire targetEmpire)
        {
            CharacterList characterList = new CharacterList();
            for (int i = 0; i < targetEmpire.Characters.Count; i++)
            {
                Character character = targetEmpire.Characters[i];
                if (character == null || !character.Active || character.Role == CharacterRole.IntelligenceAgent)
                {
                    continue;
                }
                if (character.Role == CharacterRole.Leader || character.Role == CharacterRole.PirateLeader)
                {
                    if (IsObjectAreaKnownToThisEmpire(character.Location))
                    {
                        characterList.Add(character);
                    }
                }
                else if (character.Location != null && IsObjectVisibleToThisEmpire(character.Location))
                {
                    characterList.Add(character);
                }
            }
            return characterList;
        }

        public List<StellarObject> ResolveKnownBases(Empire targetEmpire)
        {
            List<StellarObject> list = new List<StellarObject>();
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(targetEmpire.BuiltObjects);
            builtObjectList.AddRange(targetEmpire.PrivateBuiltObjects);
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject = builtObjectList[i];
                if (builtObject.Role != BuiltObjectRole.Base)
                {
                    continue;
                }
                if (builtObject.ParentHabitat != null)
                {
                    if (CheckSystemExplored(builtObject.ParentHabitat.SystemIndex))
                    {
                        list.Add(builtObject);
                    }
                }
                else if (IsObjectVisibleToThisEmpire(builtObject))
                {
                    list.Add(builtObject);
                }
            }
            return list;
        }

        public List<StellarObject> ResolveKnownBuiltObjectConstructionYards(Empire targetEmpire)
        {
            List<StellarObject> list = new List<StellarObject>();
            for (int i = 0; i < targetEmpire.ConstructionYards.Count; i++)
            {
                BuiltObject builtObject = targetEmpire.ConstructionYards[i];
                if (builtObject.ParentHabitat != null)
                {
                    if (CheckSystemExplored(builtObject.ParentHabitat.SystemIndex))
                    {
                        list.Add(builtObject);
                    }
                }
                else if (IsObjectVisibleToThisEmpire(builtObject))
                {
                    list.Add(builtObject);
                }
            }
            return list;
        }

        public List<StellarObject> ResolveKnownConstructionYards(Empire targetEmpire)
        {
            List<StellarObject> list = new List<StellarObject>();
            for (int i = 0; i < targetEmpire.Colonies.Count; i++)
            {
                Habitat habitat = targetEmpire.Colonies[i];
                if (CheckSystemExplored(habitat.SystemIndex) && habitat.Owner == targetEmpire)
                {
                    list.Add(habitat);
                }
            }
            for (int j = 0; j < targetEmpire.ConstructionYards.Count; j++)
            {
                BuiltObject builtObject = targetEmpire.ConstructionYards[j];
                if (builtObject.ParentHabitat != null)
                {
                    if (CheckSystemExplored(builtObject.ParentHabitat.SystemIndex))
                    {
                        list.Add(builtObject);
                    }
                }
                else if (IsObjectVisibleToThisEmpire(builtObject))
                {
                    list.Add(builtObject);
                }
            }
            return list;
        }

        private int DetermineEspionageMissionStrengthAssigned(Empire targetEmpire)
        {
            int num = 0;
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Mission != null && character.Mission.Type != 0 && character.Mission.TargetEmpire == targetEmpire)
                {
                    switch (character.Mission.Type)
                    {
                        case IntelligenceMissionType.StealGalaxyMap:
                        case IntelligenceMissionType.StealOperationsMap:
                        case IntelligenceMissionType.StealTechData:
                        case IntelligenceMissionType.DeepCover:
                        case IntelligenceMissionType.StealTerritoryMap:
                            num += character.EspionageFactored;
                            break;
                    }
                }
            }
            return num;
        }

        private int DetermineSabotageMissionStrengthAssigned(Empire targetEmpire)
        {
            int num = 0;
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Mission != null && character.Mission.Type != 0 && character.Mission.TargetEmpire == targetEmpire)
                {
                    switch (character.Mission.Type)
                    {
                        case IntelligenceMissionType.SabotageConstruction:
                        case IntelligenceMissionType.SabotageColony:
                        case IntelligenceMissionType.InciteRevolution:
                            num += character.SabotageFactored;
                            break;
                    }
                }
            }
            return num;
        }

        private bool CheckWhetherTargetOfIntelligenceMission(Empire targetEmpire, object potentialTarget, IntelligenceMissionType missionType)
        {
            if (potentialTarget is Habitat)
            {
                for (int i = 0; i < Characters.Count; i++)
                {
                    Character character = Characters[i];
                    if (character.Mission != null && character.Mission.Target is Habitat && character.Mission.Target == potentialTarget && character.Mission.Type == missionType)
                    {
                        return true;
                    }
                }
            }
            else if (potentialTarget is BuiltObject)
            {
                for (int j = 0; j < Characters.Count; j++)
                {
                    Character character2 = Characters[j];
                    if (character2.Mission != null && character2.Mission.Target is BuiltObject && character2.Mission.Target == potentialTarget && character2.Mission.Type == missionType)
                    {
                        return true;
                    }
                }
            }
            else if (potentialTarget is Character)
            {
                for (int k = 0; k < Characters.Count; k++)
                {
                    Character character3 = Characters[k];
                    if (character3.Mission != null && character3.Mission.Target is Character && character3.Mission.Target == potentialTarget && character3.Mission.Type == missionType)
                    {
                        return true;
                    }
                }
            }
            else
            {
                if (missionType == IntelligenceMissionType.CounterIntelligence)
                {
                    return false;
                }
                for (int l = 0; l < Characters.Count; l++)
                {
                    Character character4 = Characters[l];
                    if (character4.Mission != null && character4.Mission.Type == missionType && character4.Mission.TargetEmpire == targetEmpire)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private IntelligenceMission DetermineEspionageMission(Empire targetEmpire, EmpireEvaluation evaluation, DiplomaticRelation relation, PirateRelation pirateRelation, Character agent)
        {
            IntelligenceMission result = null;
            List<IntelligenceMissionType> list = new List<IntelligenceMissionType>();
            if (relation != null)
            {
                if (relation.Type == DiplomaticRelationType.War)
                {
                    list.AddRange(new IntelligenceMissionType[6]
                    {
                    IntelligenceMissionType.DeepCover,
                    IntelligenceMissionType.StealOperationsMap,
                    IntelligenceMissionType.DestroyBase,
                    IntelligenceMissionType.AssassinateCharacter,
                    IntelligenceMissionType.SabotageConstruction,
                    IntelligenceMissionType.SabotageColony
                    });
                }
                else
                {
                    switch (relation.Strategy)
                    {
                        case DiplomaticStrategy.Conquer:
                            list.AddRange(new IntelligenceMissionType[5]
                            {
                        IntelligenceMissionType.DeepCover,
                        IntelligenceMissionType.StealOperationsMap,
                        IntelligenceMissionType.SabotageConstruction,
                        IntelligenceMissionType.DestroyBase,
                        IntelligenceMissionType.AssassinateCharacter
                            });
                            break;
                        case DiplomaticStrategy.Undermine:
                            list.AddRange(new IntelligenceMissionType[8]
                            {
                        IntelligenceMissionType.StealTerritoryMap,
                        IntelligenceMissionType.StealOperationsMap,
                        IntelligenceMissionType.StealTechData,
                        IntelligenceMissionType.SabotageColony,
                        IntelligenceMissionType.DestroyBase,
                        IntelligenceMissionType.AssassinateCharacter,
                        IntelligenceMissionType.InciteRevolution,
                        IntelligenceMissionType.DeepCover
                            });
                            break;
                        case DiplomaticStrategy.DefendUndermine:
                            list.AddRange(new IntelligenceMissionType[4]
                            {
                        IntelligenceMissionType.StealTerritoryMap,
                        IntelligenceMissionType.StealGalaxyMap,
                        IntelligenceMissionType.StealTechData,
                        IntelligenceMissionType.DeepCover
                            });
                            break;
                        case DiplomaticStrategy.Punish:
                            list.AddRange(new IntelligenceMissionType[4]
                            {
                        IntelligenceMissionType.SabotageConstruction,
                        IntelligenceMissionType.SabotageColony,
                        IntelligenceMissionType.DestroyBase,
                        IntelligenceMissionType.InciteRevolution
                            });
                            break;
                    }
                }
            }
            else if (pirateRelation != null)
            {
                switch (pirateRelation.Type)
                {
                    case PirateRelationType.None:
                        list.AddRange(new IntelligenceMissionType[9]
                        {
                    IntelligenceMissionType.DeepCover,
                    IntelligenceMissionType.StealOperationsMap,
                    IntelligenceMissionType.StealTerritoryMap,
                    IntelligenceMissionType.StealGalaxyMap,
                    IntelligenceMissionType.StealTechData,
                    IntelligenceMissionType.DestroyBase,
                    IntelligenceMissionType.AssassinateCharacter,
                    IntelligenceMissionType.SabotageConstruction,
                    IntelligenceMissionType.SabotageColony
                        });
                        break;
                    case PirateRelationType.Protection:
                        list.AddRange(new IntelligenceMissionType[5]
                        {
                    IntelligenceMissionType.DeepCover,
                    IntelligenceMissionType.StealOperationsMap,
                    IntelligenceMissionType.StealTerritoryMap,
                    IntelligenceMissionType.StealGalaxyMap,
                    IntelligenceMissionType.StealTechData
                        });
                        break;
                }
            }
            long timeLength = Galaxy.RealSecondsInGalacticYear * 1000 / 12;
            long timeLength2 = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
            long timeLength3 = Galaxy.RealSecondsInGalacticYear * 1000;
            bool flag = false;
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Role == CharacterRole.IntelligenceAgent && character.Mission != null && character.Mission.Type == IntelligenceMissionType.DeepCover && character.Mission.TargetEmpire == targetEmpire)
                {
                    flag = true;
                    break;
                }
            }
            IntelligenceMission intelligenceMission = new IntelligenceMission(this, null, IntelligenceMissionType.StealTerritoryMap, _Galaxy.CurrentStarDate, targetEmpire);
            IntelligenceMission intelligenceMission2 = new IntelligenceMission(this, null, IntelligenceMissionType.StealOperationsMap, _Galaxy.CurrentStarDate, targetEmpire);
            IntelligenceMission intelligenceMission3 = new IntelligenceMission(this, null, IntelligenceMissionType.StealGalaxyMap, _Galaxy.CurrentStarDate, targetEmpire);
            IntelligenceMission intelligenceMission4 = new IntelligenceMission(this, null, _Galaxy.CurrentStarDate, targetEmpire, null);
            ResearchNodeList researchNodeList = Research.ResolveMoreAdvancedProjects(targetEmpire, includeSpecialTech: false);
            if (researchNodeList != null && researchNodeList.Count > 0)
            {
                int index = Galaxy.Rnd.Next(0, researchNodeList.Count);
                intelligenceMission4.ResetResearchProject(researchNodeList[index]);
            }
            else
            {
                intelligenceMission4 = null;
            }
            IntelligenceMission intelligenceMission5 = new IntelligenceMission(this, null, IntelligenceMissionType.DeepCover, _Galaxy.CurrentStarDate, targetEmpire);
            double oneYearDifficulty = 0.0;
            double threeMonthDifficulty = 0.0;
            double oneMonthDifficulty = 0.0;
            if (!flag && !CheckForIntelligenceMissionsOfTypeAgainstEmpire(targetEmpire, IntelligenceMissionType.DeepCover) && list.Contains(IntelligenceMissionType.DeepCover) && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.DeepCover))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.DeepCover, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                if (intelligenceMission5.Difficulty <= (int)oneYearDifficulty)
                {
                    result = intelligenceMission5;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission5.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission5;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission5.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission5;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            if (intelligenceMission4 != null && !CheckForIntelligenceMissionsOfTypeAgainstEmpire(targetEmpire, IntelligenceMissionType.StealTechData) && list.Contains(IntelligenceMissionType.StealTechData) && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.StealTechData))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.StealTechData, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                if (intelligenceMission4.Difficulty <= (int)oneYearDifficulty)
                {
                    result = intelligenceMission4;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission4.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission4;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission4.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission4;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            if (!flag)
            {
                HabitatList habitatList = DetermineEmpireSystems(targetEmpire);
                int num = 0;
                foreach (Habitat item in habitatList)
                {
                    if (CheckSystemExplored(item.SystemIndex))
                    {
                        num++;
                    }
                }
                double num2 = (double)num / (double)habitatList.Count;
                if (num2 < 0.9 && !CheckForIntelligenceMissionsOfTypeAgainstEmpire(targetEmpire, IntelligenceMissionType.StealTerritoryMap) && list.Contains(IntelligenceMissionType.StealTerritoryMap) && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.StealTerritoryMap))
                {
                    CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.StealTerritoryMap, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                    if (intelligenceMission.Difficulty <= (int)oneYearDifficulty)
                    {
                        result = intelligenceMission;
                        result.TimeLength = timeLength3;
                        if (intelligenceMission.Difficulty <= (int)threeMonthDifficulty)
                        {
                            result = intelligenceMission;
                            result.TimeLength = timeLength2;
                            if (intelligenceMission.Difficulty <= (int)oneMonthDifficulty)
                            {
                                result = intelligenceMission;
                                result.TimeLength = timeLength;
                            }
                        }
                        return result;
                    }
                }
            }
            if (!flag && !CheckForIntelligenceMissionsOfTypeAgainstEmpire(targetEmpire, IntelligenceMissionType.StealOperationsMap) && list.Contains(IntelligenceMissionType.StealOperationsMap) && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.StealOperationsMap))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.StealOperationsMap, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                if (intelligenceMission2.Difficulty <= (int)oneYearDifficulty)
                {
                    result = intelligenceMission2;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission2.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission2;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission2.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission2;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            if (!flag && !CheckForIntelligenceMissionsOfTypeAgainstEmpire(targetEmpire, IntelligenceMissionType.StealGalaxyMap) && list.Contains(IntelligenceMissionType.StealGalaxyMap) && CanAssignIntelligenceMissionAgainstEmpire(targetEmpire, evaluation, relation, pirateRelation, IntelligenceMissionType.StealGalaxyMap))
            {
                CalculateIntelligenceMissionSkill(agent, IntelligenceMissionType.StealGalaxyMap, targetEmpire, out oneYearDifficulty, out threeMonthDifficulty, out oneMonthDifficulty);
                if (intelligenceMission3.Difficulty <= (int)oneYearDifficulty)
                {
                    result = intelligenceMission3;
                    result.TimeLength = timeLength3;
                    if (intelligenceMission3.Difficulty <= (int)threeMonthDifficulty)
                    {
                        result = intelligenceMission3;
                        result.TimeLength = timeLength2;
                        if (intelligenceMission3.Difficulty <= (int)oneMonthDifficulty)
                        {
                            result = intelligenceMission3;
                            result.TimeLength = timeLength;
                        }
                    }
                    return result;
                }
            }
            return result;
        }

        private bool CheckEspionageMissionAllowedAgainstEmpire(DiplomaticRelation relation, EmpireEvaluation evaluation, PirateRelation pirateRelation)
        {
            if (CheckEspionageMissionAllowedAgainstEmpirePolicy(relation, evaluation, pirateRelation))
            {
                if (pirateRelation == null)
                {
                    if (relation.Type == DiplomaticRelationType.War)
                    {
                        return true;
                    }
                    switch (relation.Strategy)
                    {
                        case DiplomaticStrategy.Conquer:
                        case DiplomaticStrategy.Undermine:
                        case DiplomaticStrategy.DefendUndermine:
                        case DiplomaticStrategy.Punish:
                            return true;
                        default:
                            return false;
                    }
                }
                if (pirateRelation.Type == PirateRelationType.None)
                {
                    return true;
                }
                if (pirateRelation.Evaluation < -15f)
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckEspionageMissionAllowedAgainstEmpirePolicy(DiplomaticRelation relation, EmpireEvaluation evaluation, PirateRelation pirateRelation)
        {
            if (Policy != null)
            {
                if (pirateRelation != null)
                {
                    switch (Policy.IntelligenceUseEspionageAgainstEmpireWhen)
                    {
                        case 0:
                            return true;
                        case 1:
                            if (pirateRelation.Evaluation <= -10f)
                            {
                                return true;
                            }
                            break;
                        case 2:
                        case 3:
                        case 4:
                            if (pirateRelation.Type == PirateRelationType.None)
                            {
                                return true;
                            }
                            break;
                    }
                }
                else if (relation != null)
                {
                    switch (Policy.IntelligenceUseEspionageAgainstEmpireWhen)
                    {
                        case 0:
                            return true;
                        case 1:
                            if (evaluation != null && evaluation.OverallAttitude <= -10)
                            {
                                return true;
                            }
                            break;
                        case 2:
                            if (relation.Type == DiplomaticRelationType.None || relation.Type == DiplomaticRelationType.TradeSanctions || relation.Type == DiplomaticRelationType.War)
                            {
                                return true;
                            }
                            break;
                        case 3:
                            if (relation.Type == DiplomaticRelationType.TradeSanctions || relation.Type == DiplomaticRelationType.War)
                            {
                                return true;
                            }
                            break;
                        case 4:
                            if (relation.Type == DiplomaticRelationType.War)
                            {
                                return true;
                            }
                            break;
                    }
                }
            }
            return false;
        }

        private bool CheckSabotageMissionAllowedAgainstEmpire(DiplomaticRelation relation, EmpireEvaluation evaluation, PirateRelation pirateRelation)
        {
            if (CheckSabotageMissionAllowedAgainstEmpirePolicy(relation, evaluation, pirateRelation))
            {
                if (pirateRelation == null)
                {
                    if (relation.Type == DiplomaticRelationType.War)
                    {
                        return true;
                    }
                    DiplomaticStrategy strategy = relation.Strategy;
                    if (strategy == DiplomaticStrategy.Conquer || strategy == DiplomaticStrategy.Undermine || strategy == DiplomaticStrategy.Punish)
                    {
                        return true;
                    }
                    return false;
                }
                if (pirateRelation.Type == PirateRelationType.None)
                {
                    return true;
                }
                if (pirateRelation.Evaluation < -20f)
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckSabotageMissionAllowedAgainstEmpirePolicy(DiplomaticRelation relation, EmpireEvaluation evaluation, PirateRelation pirateRelation)
        {
            if (Policy != null)
            {
                if (pirateRelation != null)
                {
                    switch (Policy.IntelligenceUseSabotageAgainstEmpireWhen)
                    {
                        case 0:
                            return true;
                        case 1:
                            if (pirateRelation.Evaluation <= -10f)
                            {
                                return true;
                            }
                            break;
                        case 2:
                        case 3:
                        case 4:
                            if (pirateRelation.Type == PirateRelationType.None)
                            {
                                return true;
                            }
                            break;
                    }
                }
                else if (relation != null)
                {
                    switch (Policy.IntelligenceUseSabotageAgainstEmpireWhen)
                    {
                        case 0:
                            return true;
                        case 1:
                            if (evaluation != null && evaluation.OverallAttitude <= -10)
                            {
                                return true;
                            }
                            break;
                        case 2:
                            if (relation.Type == DiplomaticRelationType.None || relation.Type == DiplomaticRelationType.TradeSanctions || relation.Type == DiplomaticRelationType.War)
                            {
                                return true;
                            }
                            break;
                        case 3:
                            if (relation.Type == DiplomaticRelationType.TradeSanctions || relation.Type == DiplomaticRelationType.War)
                            {
                                return true;
                            }
                            break;
                        case 4:
                            if (relation.Type == DiplomaticRelationType.War)
                            {
                                return true;
                            }
                            break;
                    }
                }
            }
            return false;
        }

        private bool CanAssignIntelligenceMissionAgainstEmpire(Empire empire, EmpireEvaluation evaluation, DiplomaticRelation relation, PirateRelation pirateRelation, IntelligenceMissionType missionType)
        {
            switch (missionType)
            {
                case IntelligenceMissionType.CounterIntelligence:
                    return true;
                case IntelligenceMissionType.DeepCover:
                    if (Policy.IntelligenceAllowMissionDeepCover)
                    {
                        return CheckEspionageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.AssassinateCharacter:
                    if (Policy.IntelligenceAllowMissionAssassinateCharacter)
                    {
                        return CheckSabotageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.DestroyBase:
                    if (Policy.IntelligenceAllowMissionDestroyBase)
                    {
                        return CheckSabotageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.InciteRevolution:
                    if (Policy.IntelligenceAllowMissionInciteRevolution)
                    {
                        return CheckSabotageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.SabotageColony:
                    if (Policy.IntelligenceAllowMissionSabotageColony)
                    {
                        return CheckSabotageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.SabotageConstruction:
                    if (Policy.IntelligenceAllowMissionSabotageConstruction)
                    {
                        return CheckSabotageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.StealGalaxyMap:
                    if (Policy.IntelligenceAllowMissionStealGalaxyMap)
                    {
                        return CheckEspionageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.StealOperationsMap:
                    if (Policy.IntelligenceAllowMissionStealOperationsMap)
                    {
                        return CheckEspionageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.StealTechData:
                    if (Policy.IntelligenceAllowMissionStealTechData)
                    {
                        return CheckEspionageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
                case IntelligenceMissionType.StealTerritoryMap:
                    if (Policy.IntelligenceAllowMissionStealTerritoryMap)
                    {
                        return CheckEspionageMissionAllowedAgainstEmpire(relation, evaluation, pirateRelation);
                    }
                    break;
            }
            return false;
        }

        private void AssignSpecialMissionAgainstEmpire(Empire targetEmpire, EmpireEvaluation evaluation, out bool assignEspionageMission, out bool assignSabotageMission, double aggression, double caution, int empiresAtWarWith, double galaxyIntoleranceLevel, ref int refusalCount)
        {
            assignEspionageMission = false;
            assignSabotageMission = false;
            if (targetEmpire == this || targetEmpire == null)
            {
                return;
            }
            DiplomaticRelation diplomaticRelation = null;
            PirateRelation pirateRelation = null;
            if (PirateEmpireBaseHabitat == null && targetEmpire.PirateEmpireBaseHabitat == null)
            {
                diplomaticRelation = ObtainDiplomaticRelation(targetEmpire);
            }
            else
            {
                pirateRelation = ObtainPirateRelation(targetEmpire);
            }
            int num = 0;
            if ((diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.War) || (pirateRelation != null && pirateRelation.Type == PirateRelationType.None && pirateRelation.Evaluation < -5f))
            {
                switch (Galaxy.Rnd.Next(0, 3))
                {
                    case 0:
                        if (AssignAgentForEspionageMission(targetEmpire, evaluation, diplomaticRelation, pirateRelation, ref refusalCount))
                        {
                            assignEspionageMission = true;
                        }
                        break;
                    case 1:
                        if (AssignAgentForSabotageMission(targetEmpire, evaluation, diplomaticRelation, pirateRelation, ref refusalCount))
                        {
                            assignSabotageMission = true;
                        }
                        break;
                }
            }
            else
            {
                if ((diplomaticRelation == null || (diplomaticRelation.Strategy != DiplomaticStrategy.Punish && diplomaticRelation.Strategy != DiplomaticStrategy.Conquer && diplomaticRelation.Strategy != DiplomaticStrategy.DefendUndermine && diplomaticRelation.Strategy != DiplomaticStrategy.Undermine)) && (pirateRelation == null || pirateRelation.Type != PirateRelationType.None || !(pirateRelation.Evaluation < -5f)))
                {
                    return;
                }
                switch (Galaxy.Rnd.Next(0, 3))
                {
                    case 0:
                        if (AssignAgentForEspionageMission(targetEmpire, evaluation, diplomaticRelation, pirateRelation, ref refusalCount))
                        {
                            assignEspionageMission = true;
                        }
                        break;
                    case 1:
                        if (diplomaticRelation != null && diplomaticRelation.Strategy != DiplomaticStrategy.DefendUndermine && AssignAgentForSabotageMission(targetEmpire, evaluation, diplomaticRelation, pirateRelation, ref refusalCount))
                        {
                            assignSabotageMission = true;
                        }
                        break;
                }
            }
        }

        private void CountAgentsAssigned(out int attackAgentsOnAssignment, out int defendAgentsOnAssignment, out int unassignedAgents)
        {
            attackAgentsOnAssignment = 0;
            defendAgentsOnAssignment = 0;
            unassignedAgents = 0;
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Mission != null && character.Mission.Type != 0)
                {
                    if (character.Mission.Type == IntelligenceMissionType.CounterIntelligence)
                    {
                        defendAgentsOnAssignment++;
                    }
                    else
                    {
                        attackAgentsOnAssignment++;
                    }
                }
                else
                {
                    unassignedAgents++;
                }
            }
        }

        private void AssignSpecialMissions()
        {
            int refusalCount = 0;
            CharacterList characterList = new CharacterList();
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Role == CharacterRole.IntelligenceAgent)
                {
                    characterList.Add(character);
                }
            }
            double num = Policy.IntelligenceCounterIntelligenceProportion / 100f;
            int num2 = (int)Math.Max(1.0, (double)characterList.Count * num);
            int num3 = characterList.Count - num2;
            double aggression = CalculateAggressionFactor();
            double caution = CalculateCautionFactor();
            double intoleranceLevel = _Galaxy.IntoleranceLevel;
            int attackAgentsOnAssignment = 0;
            int defendAgentsOnAssignment = 0;
            int unassignedAgents = 0;
            CountAgentsAssigned(out attackAgentsOnAssignment, out defendAgentsOnAssignment, out unassignedAgents);
            int num4 = num3 - attackAgentsOnAssignment;
            if (num4 > 0)
            {
                int empiresAtWarWith = CountEmpiresWeDeclaredWarOn() + CountEmpiresWhoDeclaredWarOnUs();
                if (PirateEmpireBaseHabitat == null)
                {
                    int num5 = Galaxy.Rnd.Next(0, EmpireEvaluations.Count);
                    for (int j = num5; j < EmpireEvaluations.Count; j++)
                    {
                        EmpireEvaluation empireEvaluation = EmpireEvaluations[j];
                        bool assignEspionageMission = false;
                        bool assignSabotageMission = false;
                        AssignSpecialMissionAgainstEmpire(empireEvaluation.Empire, empireEvaluation, out assignEspionageMission, out assignSabotageMission, aggression, caution, empiresAtWarWith, intoleranceLevel, ref refusalCount);
                        if (assignEspionageMission || assignSabotageMission)
                        {
                            num4--;
                        }
                        if (num4 <= 0)
                        {
                            break;
                        }
                    }
                    if (num4 > 0)
                    {
                        for (int k = 0; k < num5; k++)
                        {
                            EmpireEvaluation empireEvaluation2 = EmpireEvaluations[k];
                            bool assignEspionageMission2 = false;
                            bool assignSabotageMission2 = false;
                            AssignSpecialMissionAgainstEmpire(empireEvaluation2.Empire, empireEvaluation2, out assignEspionageMission2, out assignSabotageMission2, aggression, caution, empiresAtWarWith, intoleranceLevel, ref refusalCount);
                            if (assignEspionageMission2 || assignSabotageMission2)
                            {
                                num4--;
                            }
                            if (num4 <= 0)
                            {
                                break;
                            }
                        }
                    }
                    if (num4 > 0)
                    {
                        num5 = Galaxy.Rnd.Next(0, PirateRelations.Count);
                        for (int l = num5; l < PirateRelations.Count; l++)
                        {
                            PirateRelation pirateRelation = PirateRelations[l];
                            bool assignEspionageMission3 = false;
                            bool assignSabotageMission3 = false;
                            AssignSpecialMissionAgainstEmpire(pirateRelation.OtherEmpire, null, out assignEspionageMission3, out assignSabotageMission3, aggression, caution, empiresAtWarWith, intoleranceLevel, ref refusalCount);
                            if (assignEspionageMission3 || assignSabotageMission3)
                            {
                                num4--;
                            }
                            if (num4 <= 0)
                            {
                                break;
                            }
                        }
                        if (num4 > 0)
                        {
                            for (int m = 0; m < num5; m++)
                            {
                                PirateRelation pirateRelation2 = PirateRelations[m];
                                bool assignEspionageMission4 = false;
                                bool assignSabotageMission4 = false;
                                AssignSpecialMissionAgainstEmpire(pirateRelation2.OtherEmpire, null, out assignEspionageMission4, out assignSabotageMission4, aggression, caution, empiresAtWarWith, intoleranceLevel, ref refusalCount);
                                if (assignEspionageMission4 || assignSabotageMission4)
                                {
                                    num4--;
                                }
                                if (num4 <= 0)
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    int num6 = Galaxy.Rnd.Next(0, PirateRelations.Count);
                    for (int n = num6; n < PirateRelations.Count; n++)
                    {
                        PirateRelation pirateRelation3 = PirateRelations[n];
                        bool assignEspionageMission5 = false;
                        bool assignSabotageMission5 = false;
                        AssignSpecialMissionAgainstEmpire(pirateRelation3.OtherEmpire, null, out assignEspionageMission5, out assignSabotageMission5, aggression, caution, empiresAtWarWith, intoleranceLevel, ref refusalCount);
                        if (assignEspionageMission5 || assignSabotageMission5)
                        {
                            num4--;
                        }
                        if (num4 <= 0)
                        {
                            break;
                        }
                    }
                    if (num4 > 0)
                    {
                        for (int num7 = 0; num7 < num6; num7++)
                        {
                            PirateRelation pirateRelation4 = PirateRelations[num7];
                            bool assignEspionageMission6 = false;
                            bool assignSabotageMission6 = false;
                            AssignSpecialMissionAgainstEmpire(pirateRelation4.OtherEmpire, null, out assignEspionageMission6, out assignSabotageMission6, aggression, caution, empiresAtWarWith, intoleranceLevel, ref refusalCount);
                            if (assignEspionageMission6 || assignSabotageMission6)
                            {
                                num4--;
                            }
                            if (num4 <= 0)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            for (int num8 = 0; num8 < Characters.Count; num8++)
            {
                Character character2 = Characters[num8];
                if (character2.Role == CharacterRole.IntelligenceAgent && (character2.Mission == null || character2.Mission.Type == IntelligenceMissionType.Undefined))
                {
                    IntelligenceMission intelligenceMission = new IntelligenceMission(this, character2, _Galaxy.CurrentStarDate);
                    intelligenceMission.TimeLength = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
                    character2.Mission = intelligenceMission;
                }
            }
        }

        public int GetIntelligenceMissionSkillLevel(Character agent, IntelligenceMission mission)
        {
            int num = 0;
            if (agent != null && mission != null)
            {
                switch (mission.Type)
                {
                    case IntelligenceMissionType.CounterIntelligence:
                        num = agent.CounterEspionageFactored;
                        break;
                    case IntelligenceMissionType.DeepCover:
                        num = agent.ConcealmentFactored;
                        break;
                    case IntelligenceMissionType.AssassinateCharacter:
                        num = agent.AssassinationFactored;
                        break;
                    case IntelligenceMissionType.StealGalaxyMap:
                    case IntelligenceMissionType.StealOperationsMap:
                    case IntelligenceMissionType.StealTechData:
                    case IntelligenceMissionType.StealTerritoryMap:
                        num = agent.EspionageFactored;
                        if (mission.Type == IntelligenceMissionType.StealTechData && mission.TargetEmpire != null && mission.TargetEmpire.Characters != null)
                        {
                            if (mission.TargetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.ForeignSpy))
                            {
                                num *= 2;
                            }
                            else if (mission.TargetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.Patriot))
                            {
                                num /= 2;
                            }
                        }
                        break;
                    case IntelligenceMissionType.InciteRevolution:
                        num = agent.PsyOpsFactored;
                        break;
                    case IntelligenceMissionType.SabotageConstruction:
                    case IntelligenceMissionType.SabotageColony:
                    case IntelligenceMissionType.DestroyBase:
                        num = agent.SabotageFactored;
                        break;
                }
            }
            return num;
        }

        private void PerformIntelligenceMissions()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = Galaxy.RealSecondsInGalacticYear * 1000 / 12;
            long num2 = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
            long num3 = Galaxy.RealSecondsInGalacticYear * 1000;
            CharacterList characterList = new CharacterList();
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == this)
                {
                    continue;
                }
                for (int j = 0; j < empire.Characters.Count; j++)
                {
                    Character character = empire.Characters[j];
                    if (character != null && character.Role == CharacterRole.IntelligenceAgent)
                    {
                        IntelligenceMission mission = character.Mission;
                        if (mission != null && mission.Type != 0 && mission.TargetEmpire == this)
                        {
                            characterList.Add(character);
                        }
                    }
                }
            }
            for (int k = 0; k < _Galaxy.PirateEmpires.Count; k++)
            {
                Empire empire2 = _Galaxy.PirateEmpires[k];
                if (empire2 == this)
                {
                    continue;
                }
                for (int l = 0; l < empire2.Characters.Count; l++)
                {
                    Character character2 = empire2.Characters[l];
                    if (character2 != null && character2.Role == CharacterRole.IntelligenceAgent)
                    {
                        IntelligenceMission mission2 = character2.Mission;
                        if (mission2 != null && mission2.Type != 0 && mission2.TargetEmpire == this)
                        {
                            characterList.Add(character2);
                        }
                    }
                }
            }
            CharacterList characterList2 = new CharacterList();
            for (int m = 0; m < Characters.Count; m++)
            {
                Character character3 = Characters[m];
                if (character3 == null || character3.Role != CharacterRole.IntelligenceAgent)
                {
                    continue;
                }
                IntelligenceMission mission3 = character3.Mission;
                if (mission3 == null || mission3.Type == IntelligenceMissionType.Undefined)
                {
                    continue;
                }
                int num4 = 0;
                switch (mission3.Type)
                {
                    case IntelligenceMissionType.CounterIntelligence:
                        num4 = character3.CounterEspionageFactored;
                        break;
                    case IntelligenceMissionType.DeepCover:
                        num4 = character3.ConcealmentFactored;
                        break;
                    case IntelligenceMissionType.AssassinateCharacter:
                        num4 = character3.AssassinationFactored;
                        break;
                    case IntelligenceMissionType.StealGalaxyMap:
                    case IntelligenceMissionType.StealOperationsMap:
                    case IntelligenceMissionType.StealTechData:
                    case IntelligenceMissionType.StealTerritoryMap:
                        num4 = character3.EspionageFactored;
                        if (mission3.Type == IntelligenceMissionType.StealTechData && mission3.TargetEmpire != null && mission3.TargetEmpire.Characters != null)
                        {
                            if (mission3.TargetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.ForeignSpy))
                            {
                                num4 *= 2;
                            }
                            else if (mission3.TargetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.Patriot))
                            {
                                num4 /= 2;
                            }
                        }
                        break;
                    case IntelligenceMissionType.InciteRevolution:
                        num4 = character3.PsyOpsFactored;
                        break;
                    case IntelligenceMissionType.SabotageConstruction:
                    case IntelligenceMissionType.SabotageColony:
                    case IntelligenceMissionType.DestroyBase:
                        num4 = character3.SabotageFactored;
                        break;
                }
                double num5 = CalculateIntelligenceMissionBonusFromLeaderAndAmbassador(mission3.Type, mission3.TargetEmpire);
                num4 = (int)((double)num4 * num5);
                int num6 = num4;
                if (mission3.TimeLength <= num)
                {
                    num6 = num6;
                }
                else if (mission3.TimeLength <= num2)
                {
                    num6 *= 2;
                }
                else if (mission3.TimeLength <= num3)
                {
                    num6 *= 4;
                }
                num6 = (int)((double)num6 * (1.0 + EspionageBonus));
                long num7 = mission3.StartDate + mission3.TimeLength;
                bool flag = true;
                if (PirateEmpireBaseHabitat == null && mission3.TargetEmpire.PirateEmpireBaseHabitat == null)
                {
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(mission3.TargetEmpire);
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        flag = false;
                    }
                }
                else
                {
                    PirateRelation pirateRelation = ObtainPirateRelation(mission3.TargetEmpire);
                    if (pirateRelation.Type == PirateRelationType.None)
                    {
                        flag = false;
                    }
                }
                IntelligenceMissionType type = mission3.Type;
                if (type == IntelligenceMissionType.CounterIntelligence)
                {
                    if (characterList.Count > 0)
                    {
                        int num8 = 150;
                        if (mission3.TimeLength >= num3)
                        {
                            num8 *= 12;
                        }
                        else if (mission3.TimeLength >= num2)
                        {
                            num8 *= 3;
                        }
                        int num9 = Galaxy.Rnd.Next(0, num8);
                        int num10 = (int)((double)num4 * (1.0 + EspionageBonus));
                        if (RaceEventType == RaceEventType.PredictiveHistory)
                        {
                            num9 = Galaxy.Rnd.Next(0, 100);
                        }
                        if (num10 > num9)
                        {
                            int index = Galaxy.Rnd.Next(0, characterList.Count);
                            Character character4 = characterList[index];
                            if (character4.Mission != null)
                            {
                                double num11 = CalculateIntelligenceMissionSuccessChance(character4.Mission, character4);
                                double num12 = 0.85;
                                if (RaceEventType == RaceEventType.PredictiveHistory)
                                {
                                    num12 = 1.15;
                                }
                                int intelligenceMissionSkillLevel = GetIntelligenceMissionSkillLevel(character4, character4.Mission);
                                double num13 = Math.Max(5.0, (double)intelligenceMissionSkillLevel - 10.0);
                                double num14 = Galaxy.Rnd.NextDouble() * num12 * Math.Sqrt((double)num10 / num13);
                                if (num14 > num11 && BaconEmpire.PerformIntelligenceMission(this))
                                {
                                    bool flag2 = false;
                                    bool flag3 = false;
                                    if (character4.Mission != null && character4.Mission.Type == IntelligenceMissionType.DeepCover && character4.Mission.Outcome == IntelligenceMissionOutcome.SucceedNotDetect)
                                    {
                                        int maxValue = 4;
                                        if (RaceEventType == RaceEventType.PredictiveHistory)
                                        {
                                            maxValue = 2;
                                        }
                                        if (Galaxy.Rnd.Next(0, maxValue) == 1)
                                        {
                                            flag2 = true;
                                        }
                                        flag3 = true;
                                    }
                                    else
                                    {
                                        flag2 = true;
                                    }
                                    if (!flag2)
                                    {
                                        continue;
                                    }
                                    int num15 = 5;
                                    if (character4.Mission != null)
                                    {
                                        num15 = Math.Min(30, character4.Mission.Difficulty / 30);
                                    }
                                    if (character4.Empire.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                                    {
                                        EmpireEvaluation empireEvaluation = EmpireEvaluations[character4.Empire];
                                        if (empireEvaluation != null)
                                        {
                                            empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - (double)num15;
                                        }
                                        DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(character4.Empire);
                                        if (diplomaticRelation2.Type != DiplomaticRelationType.War && character4.Empire != null)
                                        {
                                            character4.Empire.CivilityRating -= 1 + num15 / 8;
                                        }
                                    }
                                    else if (character4.Empire != null)
                                    {
                                        PirateRelation pirateRelation2 = ObtainPirateRelation(character4.Empire);
                                        pirateRelation2.EvaluationDetectedIntelligenceMissions -= num15;
                                        if (pirateRelation2.Type == PirateRelationType.Protection && character4.Empire != null)
                                        {
                                            character4.Empire.CivilityRating -= 1 + num15 / 8;
                                        }
                                    }
                                    if (character4.Mission != null && character4.Mission.Type == IntelligenceMissionType.DeepCover)
                                    {
                                        int num16 = character4.Empire.EmpiresViewable.IndexOf(this);
                                        while (num16 >= 0 && character4.Empire.EmpiresViewableExpiry[num16] != long.MaxValue)
                                        {
                                            num16 = character4.Empire.EmpiresViewable.IndexOf(this, num16 + 1);
                                        }
                                        if (num16 >= 0)
                                        {
                                            character4.Empire.EmpiresViewable.RemoveAt(num16);
                                            character4.Empire.EmpiresViewableExpiry.RemoveAt(num16);
                                        }
                                    }
                                    if (character4.Mission != null && character4.Mission.Type == IntelligenceMissionType.AssassinateCharacter && character4.Mission.Target is Character)
                                    {
                                        Character character5 = (Character)character4.Mission.Target;
                                        if (character5 != null)
                                        {
                                            _Galaxy.DoCharacterEvent(CharacterEventType.TargetOfFailedAssassination, character4, character5);
                                        }
                                    }
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionInterceptEnemy, character4, character3, includeLeader: true, character3.Empire);
                                    Counters.ProcessIntelligenceMissionOutcome(mission3, IntelligenceMissionOutcome.SucceedNotDetect);
                                    character4.Empire.Counters.ProcessIntelligenceMissionOutcome(character4.Mission, IntelligenceMissionOutcome.Capture);
                                    if (character4.Empire != null)
                                    {
                                        string arg = Galaxy.ResolveDescription(character4.Mission, character4.Empire);
                                        string description = string.Format(TextResolver.GetText("Our Agent Captured"), character4.Name, arg);
                                        character4.Empire.SendMessageToEmpire(character4.Empire, EmpireMessageType.CharacterDeath, character4, description);
                                        arg = Galaxy.ResolveDescription(character4.Mission, this);
                                        description = string.Format(TextResolver.GetText("Enemy Agent Captured"), character4.Name, character4.Empire.Name, arg);
                                        if (flag3)
                                        {
                                            description = string.Format(TextResolver.GetText("Enemy Deep Cover Agent Captured"), character4.Name, character4.Empire.Name);
                                        }
                                        SendMessageToEmpire(this, EmpireMessageType.CharacterDeath, character4, description);
                                    }
                                    if (Counters != null)
                                    {
                                        Counters.ProcessCharacterDeath(character4);
                                    }
                                    character4.Kill(_Galaxy);
                                    continue;
                                }
                            }
                        }
                    }
                    if (currentStarDate >= num7)
                    {
                        character3.Mission = null;
                        IntelligenceMission intelligenceMission = new IntelligenceMission(this, character3, _Galaxy.CurrentStarDate);
                        intelligenceMission.TimeLength = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
                        character3.Mission = intelligenceMission;
                    }
                }
                else if (mission3.Type == IntelligenceMissionType.DeepCover && mission3.Outcome == IntelligenceMissionOutcome.SucceedNotDetect)
                {
                    _Galaxy.MergeGalaxyMap(mission3.TargetEmpire, this);
                }
                else
                {
                    if (currentStarDate < num7)
                    {
                        continue;
                    }
                    IntelligenceMissionOutcome intelligenceMissionOutcome = DetermineIntelligenceMissionOutcome(mission3, character3);
                    Counters.ProcessIntelligenceMissionOutcome(mission3, intelligenceMissionOutcome);
                    if (mission3.Type != IntelligenceMissionType.CounterIntelligence)
                    {
                        switch (intelligenceMissionOutcome)
                        {
                            case IntelligenceMissionOutcome.FailDetect:
                            case IntelligenceMissionOutcome.Capture:
                                if (mission3.TargetEmpire != null && mission3.TargetEmpire.Counters != null)
                                {
                                    mission3.TargetEmpire.Counters.IntelligenceMissionSuccessCounterIntelligenceCount++;
                                }
                                break;
                        }
                    }
                    int num17 = Math.Min(30, mission3.Difficulty / 8);
                    mission3.Outcome = intelligenceMissionOutcome;
                    EmpireEvaluation empireEvaluation2 = null;
                    PirateRelation pirateRelation3 = null;
                    if (mission3.TargetEmpire.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                    {
                        empireEvaluation2 = mission3.TargetEmpire.ObtainEmpireEvaluation(this);
                    }
                    else
                    {
                        pirateRelation3 = mission3.TargetEmpire.ObtainPirateRelation(this);
                    }
                    string empty = string.Empty;
                    Galaxy.Rnd.NextDouble();
                    _ = EspionageBonus;
                    _ = (double)mission3.Difficulty / 10.0;
                    switch (intelligenceMissionOutcome)
                    {
                        case IntelligenceMissionOutcome.Capture:
                            MarkEmpireAsRecentSpy(character3.Empire, mission3.TargetEmpire);
                            if (empireEvaluation2 != null)
                            {
                                empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw - (double)num17;
                            }
                            else if (pirateRelation3 != null)
                            {
                                pirateRelation3.EvaluationDetectedIntelligenceMissions -= num17;
                            }
                            if (flag)
                            {
                                character3.Empire.CivilityRating -= 1 + num17 / 8;
                            }
                            characterList2.Add(character3);
                            _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceAgentOursCaptured, character3, character3, includeLeader: true, character3.Empire);
                            if (mission3 != null && mission3.Type == IntelligenceMissionType.AssassinateCharacter && mission3.Target is Character)
                            {
                                Character character7 = (Character)mission3.Target;
                                if (character7 != null)
                                {
                                    _Galaxy.DoCharacterEvent(CharacterEventType.TargetOfFailedAssassination, character3, character7);
                                }
                            }
                            empty = string.Format(TextResolver.GetText("Our Agent Captured In Act"), character3.Name, Galaxy.ResolveDescription(mission3, this));
                            SendMessageToEmpire(this, EmpireMessageType.CharacterDeath, character3, empty);
                            empty = string.Format(TextResolver.GetText("Enemy Agent Captured In Act"), character3.Name, Name, Galaxy.ResolveDescription(mission3, mission3.TargetEmpire));
                            mission3.TargetEmpire.SendMessageToEmpire(mission3.TargetEmpire, EmpireMessageType.CharacterDeath, character3, empty);
                            break;
                        case IntelligenceMissionOutcome.FailDetect:
                            MarkEmpireAsRecentSpy(character3.Empire, mission3.TargetEmpire);
                            if (empireEvaluation2 != null)
                            {
                                empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw - (double)num17;
                            }
                            else if (pirateRelation3 != null)
                            {
                                pirateRelation3.EvaluationDetectedIntelligenceMissions -= num17;
                            }
                            if (flag)
                            {
                                character3.Empire.CivilityRating -= 1 + num17 / 8;
                            }
                            switch (mission3.Type)
                            {
                                case IntelligenceMissionType.StealGalaxyMap:
                                case IntelligenceMissionType.StealOperationsMap:
                                case IntelligenceMissionType.StealTechData:
                                case IntelligenceMissionType.DeepCover:
                                case IntelligenceMissionType.StealTerritoryMap:
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionFailEspionage, mission3, character3, includeLeader: true, character3.Empire);
                                    break;
                                case IntelligenceMissionType.SabotageConstruction:
                                case IntelligenceMissionType.SabotageColony:
                                case IntelligenceMissionType.InciteRevolution:
                                case IntelligenceMissionType.AssassinateCharacter:
                                case IntelligenceMissionType.DestroyBase:
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionFailSabotage, mission3, character3, includeLeader: true, character3.Empire);
                                    break;
                            }
                            if (mission3 != null && mission3.Type == IntelligenceMissionType.AssassinateCharacter && mission3.Target is Character)
                            {
                                Character character6 = (Character)mission3.Target;
                                if (character6 != null)
                                {
                                    _Galaxy.DoCharacterEvent(CharacterEventType.TargetOfFailedAssassination, character3, character6);
                                }
                            }
                            empty = string.Format(TextResolver.GetText("Our Agent Detect Fail"), character3.Name, Galaxy.ResolveDescription(mission3, this));
                            SendMessageToEmpire(this, EmpireMessageType.CharacterMissionFailure, character3, empty);
                            empty = string.Format(TextResolver.GetText("Enemy Agent Detect Fail"), character3.Name, Name, Galaxy.ResolveDescription(mission3, mission3.TargetEmpire));
                            mission3.TargetEmpire.SendMessageToEmpire(mission3.TargetEmpire, EmpireMessageType.CharacterMissionFailure, character3, empty);
                            break;
                        case IntelligenceMissionOutcome.SucceedDetect:
                            MarkEmpireAsRecentSpy(character3.Empire, mission3.TargetEmpire);
                            switch (mission3.Type)
                            {
                                case IntelligenceMissionType.StealGalaxyMap:
                                case IntelligenceMissionType.StealOperationsMap:
                                case IntelligenceMissionType.StealTechData:
                                case IntelligenceMissionType.DeepCover:
                                case IntelligenceMissionType.CounterIntelligence:
                                case IntelligenceMissionType.StealTerritoryMap:
                                    {
                                        CharacterList characterList3 = new CharacterList();
                                        characterList3.Add(character3);
                                        if (mission3.Type == IntelligenceMissionType.StealTechData && mission3.TargetEmpire != null && mission3.TargetEmpire.Characters != null)
                                        {
                                            characterList3.AddRange(mission3.TargetEmpire.Characters.GetCharactersByRole(CharacterRole.Scientist));
                                        }
                                        _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionSucceedEspionage, mission3, characterList3, includeLeader: true, character3.Empire);
                                        break;
                                    }
                                case IntelligenceMissionType.SabotageConstruction:
                                case IntelligenceMissionType.SabotageColony:
                                case IntelligenceMissionType.InciteRevolution:
                                case IntelligenceMissionType.AssassinateCharacter:
                                case IntelligenceMissionType.DestroyBase:
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionSucceedSabotage, mission3, character3);
                                    break;
                            }
                            if (empireEvaluation2 != null)
                            {
                                empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw - (double)num17;
                            }
                            else if (pirateRelation3 != null)
                            {
                                pirateRelation3.EvaluationDetectedIntelligenceMissions -= num17;
                            }
                            if (flag)
                            {
                                character3.Empire.CivilityRating -= 1 + num17 / 8;
                            }
                            empty = string.Format(TextResolver.GetText("Our Agent Detect Succeed"), character3.Name, Galaxy.ResolveDescription(mission3, this));
                            CompleteIntelligenceMission(mission3);
                            SendMessageToEmpire(this, EmpireMessageType.CharacterMissionAccomplished, character3, empty);
                            empty = string.Format(TextResolver.GetText("Enemy Agent Detect Succeed"), character3.Name, Name, Galaxy.ResolveDescription(mission3, mission3.TargetEmpire));
                            mission3.TargetEmpire.SendMessageToEmpire(mission3.TargetEmpire, EmpireMessageType.CharacterMissionFailure, character3, empty);
                            break;
                        case IntelligenceMissionOutcome.FailNotDetect:
                            switch (mission3.Type)
                            {
                                case IntelligenceMissionType.StealGalaxyMap:
                                case IntelligenceMissionType.StealOperationsMap:
                                case IntelligenceMissionType.StealTechData:
                                case IntelligenceMissionType.DeepCover:
                                case IntelligenceMissionType.StealTerritoryMap:
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionFailEspionage, mission3, character3, includeLeader: true, character3.Empire);
                                    break;
                                case IntelligenceMissionType.SabotageConstruction:
                                case IntelligenceMissionType.SabotageColony:
                                case IntelligenceMissionType.InciteRevolution:
                                case IntelligenceMissionType.AssassinateCharacter:
                                case IntelligenceMissionType.DestroyBase:
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionFailSabotage, mission3, character3, includeLeader: true, character3.Empire);
                                    break;
                            }
                            empty = string.Format(TextResolver.GetText("Our Agent Fail"), character3.Name, Galaxy.ResolveDescription(mission3, this));
                            SendMessageToEmpire(this, EmpireMessageType.CharacterMissionFailure, character3, empty);
                            break;
                        case IntelligenceMissionOutcome.SucceedNotDetect:
                            switch (mission3.Type)
                            {
                                case IntelligenceMissionType.StealGalaxyMap:
                                case IntelligenceMissionType.StealOperationsMap:
                                case IntelligenceMissionType.StealTechData:
                                case IntelligenceMissionType.DeepCover:
                                case IntelligenceMissionType.CounterIntelligence:
                                case IntelligenceMissionType.StealTerritoryMap:
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionSucceedEspionage, mission3, character3);
                                    break;
                                case IntelligenceMissionType.SabotageConstruction:
                                case IntelligenceMissionType.SabotageColony:
                                case IntelligenceMissionType.InciteRevolution:
                                case IntelligenceMissionType.AssassinateCharacter:
                                case IntelligenceMissionType.DestroyBase:
                                    _Galaxy.DoCharacterEvent(CharacterEventType.IntelligenceMissionSucceedSabotage, mission3, character3);
                                    break;
                            }
                            empty = string.Format(TextResolver.GetText("Our Agent Succeed"), character3.Name, Galaxy.ResolveDescription(mission3, this));
                            CompleteIntelligenceMission(mission3);
                            SendMessageToEmpire(this, EmpireMessageType.CharacterMissionAccomplished, character3, empty);
                            if (mission3.TargetEmpire.PirateEmpireBaseHabitat != null)
                            {
                                break;
                            }
                            if (mission3.Type == IntelligenceMissionType.InciteRevolution)
                            {
                                string description2 = string.Format(TextResolver.GetText("Agent Revolution"), mission3.TargetEmpire.GovernmentAttributes.Name);
                                mission3.TargetEmpire.SendMessageToEmpire(mission3.TargetEmpire, EmpireMessageType.Revolution, null, description2);
                            }
                            else if (mission3.Type == IntelligenceMissionType.SabotageColony && mission3.Target != null && mission3.Target is Habitat)
                            {
                                Habitat habitat = (Habitat)mission3.Target;
                                if (habitat != null)
                                {
                                    string description3 = string.Format(TextResolver.GetText("Agent Rebellion"), habitat.Name);
                                    mission3.TargetEmpire.SendMessageToEmpire(mission3.TargetEmpire, EmpireMessageType.ColonyRebelling, habitat, description3);
                                }
                            }
                            break;
                    }
                    if (mission3.Type != IntelligenceMissionType.DeepCover || mission3.Outcome != IntelligenceMissionOutcome.SucceedNotDetect)
                    {
                        BaconEmpire.ResetSpyMission(characterList2, character3);
                    }
                }
            }
            foreach (Character item in characterList2)
            {
                if (Counters != null)
                {
                    Counters.ProcessCharacterDeath(item);
                }
                item.Kill(_Galaxy);
            }
        }

        private void MarkEmpireAsRecentSpy(Empire spy, Empire target)
        {
            if (target != null && target != _Galaxy.IndependentEmpire && spy != null && spy != _Galaxy.IndependentEmpire && !target.RecentSpyingEmpires.Contains(spy))
            {
                target.RecentSpyingEmpires.Add(spy);
            }
        }

        private IntelligenceMissionOutcome DetermineIntelligenceMissionOutcome(IntelligenceMission mission, Character agent)
        {
            return BaconEmpire.DetermineIntelligenceMissionOutcome(this, mission, agent);
        }

        public double CalculateIntelligenceMissionSuccessChance(IntelligenceMission mission, Character agent)
        {
            double result = 0.0;
            if (mission != null && agent != null)
            {
                long num = Galaxy.RealSecondsInGalacticYear * 1000 / 12;
                long num2 = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
                long num3 = Galaxy.RealSecondsInGalacticYear * 1000;
                int num4 = 1;
                if (mission.TimeLength <= num)
                {
                    num4 = 1;
                }
                else if (mission.TimeLength <= num2)
                {
                    num4 = 2;
                }
                else if (mission.TimeLength <= num3)
                {
                    num4 = 4;
                }
                int num5 = 0;
                switch (mission.Type)
                {
                    case IntelligenceMissionType.CounterIntelligence:
                        num5 = agent.CounterEspionageFactored;
                        break;
                    case IntelligenceMissionType.DeepCover:
                        num5 = agent.ConcealmentFactored;
                        break;
                    case IntelligenceMissionType.StealGalaxyMap:
                    case IntelligenceMissionType.StealOperationsMap:
                    case IntelligenceMissionType.StealTechData:
                    case IntelligenceMissionType.StealTerritoryMap:
                        num5 = agent.EspionageFactored;
                        if (mission.Type == IntelligenceMissionType.StealTechData && mission.TargetEmpire != null && mission.TargetEmpire.Characters != null)
                        {
                            if (mission.TargetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.ForeignSpy))
                            {
                                num5 *= 2;
                            }
                            else if (mission.TargetEmpire.Characters.CheckCharactersForTrait(CharacterRole.Scientist, CharacterTraitType.Patriot))
                            {
                                num5 /= 2;
                            }
                        }
                        break;
                    case IntelligenceMissionType.InciteRevolution:
                        num5 = agent.PsyOpsFactored;
                        break;
                    case IntelligenceMissionType.SabotageConstruction:
                    case IntelligenceMissionType.SabotageColony:
                    case IntelligenceMissionType.DestroyBase:
                        num5 = agent.SabotageFactored;
                        break;
                    case IntelligenceMissionType.AssassinateCharacter:
                        num5 = agent.AssassinationFactored;
                        break;
                }
                double num6 = CalculateIntelligenceMissionBonusFromLeaderAndAmbassador(mission.Type, mission.TargetEmpire);
                num5 = (int)((double)num5 * num6);
                double num7 = (double)num5 * (double)num4;
                num7 *= 1.0 + EspionageBonus;
                double num8 = num7 / (double)mission.Difficulty;
                result = ((!(num8 > 1.0)) ? (0.7 * num8) : (1.0 - 0.3 / num8));
            }
            return result;
        }

        public void CancelIntelligenceMission(IntelligenceMission mission)
        {
            IntelligenceMissionType type = mission.Type;
            if (type != IntelligenceMissionType.DeepCover)
            {
                return;
            }
            int num = 0;
            bool flag = false;
            int num2 = _EmpiresViewable.IndexOf(mission.TargetEmpire);
            while (num2 >= 0 && _EmpiresViewableExpiry.Count > num2 && !flag && num < 10)
            {
                long num3 = _EmpiresViewableExpiry[num2];
                if (num3 == long.MaxValue)
                {
                    _EmpiresViewable.RemoveAt(num2);
                    _EmpiresViewableExpiry.RemoveAt(num2);
                    flag = true;
                }
                else if (_EmpiresViewable.Count > num2 + 1)
                {
                    num2 = _EmpiresViewable.IndexOf(mission.TargetEmpire, num2 + 1);
                }
                num++;
            }
        }

        private void CompleteIntelligenceMission(IntelligenceMission mission)
        {
            switch (mission.Type)
            {
                case IntelligenceMissionType.DeepCover:
                    {
                        long item = long.MaxValue;
                        _EmpiresViewable.Add(mission.TargetEmpire);
                        _EmpiresViewableExpiry.Add(item);
                        break;
                    }
                case IntelligenceMissionType.InciteRevolution:
                    if (mission.TargetEmpire.PirateEmpireBaseHabitat == null)
                    {
                        mission.TargetEmpire.HaveRevolution(mission.TargetEmpire.DominantRace);
                    }
                    break;
                case IntelligenceMissionType.AssassinateCharacter:
                    if (mission.Target is Character)
                    {
                        Character character = (Character)mission.Target;
                        if (character != null && character.Active)
                        {
                            character.SendDeathMessage(CharacterDeathType.Assassination, _Galaxy);
                            character.Kill(_Galaxy);
                        }
                    }
                    break;
                case IntelligenceMissionType.DestroyBase:
                    {
                        if (!(mission.Target is BuiltObject))
                        {
                            break;
                        }
                        BuiltObject builtObject2 = (BuiltObject)mission.Target;
                        if (builtObject2 == null || builtObject2.HasBeenDestroyed)
                        {
                            break;
                        }
                        if (builtObject2.Empire != null)
                        {
                            Habitat habitat4 = null;
                            if (builtObject2.ParentHabitat != null)
                            {
                                habitat4 = Galaxy.DetermineHabitatSystemStar(builtObject2.ParentHabitat);
                            }
                            else if (builtObject2.NearestSystemStar != null)
                            {
                                habitat4 = builtObject2.NearestSystemStar;
                            }
                            string arg2 = string.Empty;
                            if (habitat4 != null)
                            {
                                arg2 = habitat4.Name;
                            }
                            string description2 = string.Format(TextResolver.GetText("Base Destroyed Sabotage Description"), builtObject2.Name, arg2);
                            string title2 = TextResolver.GetText("Base Destroyed Sabotage") + "!";
                            builtObject2.Empire.SendMessageToEmpire(builtObject2.Empire, EmpireMessageType.BattleUnderAttack, builtObject2, description2, new Point((int)builtObject2.Xpos, (int)builtObject2.Ypos), string.Empty, title2);
                        }
                        builtObject2.InflictDamage(builtObject2, null, 100000.0, _Galaxy.CurrentDateTime, _Galaxy, 0f, allowRecursion: true, 0.0, allowArmorInvulnerability: false);
                        break;
                    }
                case IntelligenceMissionType.SabotageColony:
                    {
                        if (mission.TargetEmpire == null || mission.TargetEmpire.PirateEmpireBaseHabitat != null)
                        {
                            break;
                        }
                        Habitat habitat = (Habitat)mission.Target;
                        if (habitat.Population != null && habitat.Population.Count > 0)
                        {
                            int num3 = Galaxy.Rnd.Next(0, 20);
                            long num4 = habitat.Population.TotalAmount / 15;
                            if (num4 > 2000000000)
                            {
                                num4 = 2000000000L;
                            }
                            int num5 = Galaxy.Rnd.Next(0, (int)num4);
                            int val = habitat.GetDevelopmentLevel() - num3;
                            val = Math.Max(val, 0);
                            habitat.SetDevelopmentLevel(val);
                            habitat.Population[0].Amount -= num5;
                            if (habitat.Population[0].Amount < 10000000)
                            {
                                habitat.Population[0].Amount = 10000000L;
                            }
                            habitat.Population.RecalculateTotalAmount();
                            habitat.HappinessModifier = (float)(-15.0 + Galaxy.Rnd.NextDouble() * -10.0);
                            habitat.StartRebelling();
                            _Galaxy.DoCharacterEvent(CharacterEventType.ColonyDevelopmentDecrease, habitat, habitat.Characters, includeLeader: true, habitat.Empire);
                        }
                        break;
                    }
                case IntelligenceMissionType.SabotageConstruction:
                    {
                        ConstructionQueue constructionQueue = null;
                        Empire empire = null;
                        Habitat habitat2 = null;
                        StellarObject stellarObject = null;
                        if (mission.Target is Habitat)
                        {
                            Habitat habitat3 = (Habitat)mission.Target;
                            constructionQueue = habitat3.ConstructionQueue;
                            empire = habitat3.Empire;
                            habitat2 = Galaxy.DetermineHabitatSystemStar(habitat3);
                            stellarObject = habitat3;
                        }
                        else if (mission.Target is BuiltObject)
                        {
                            BuiltObject builtObject = (BuiltObject)mission.Target;
                            constructionQueue = builtObject.ConstructionQueue;
                            empire = builtObject.Empire;
                            habitat2 = builtObject.NearestSystemStar;
                            stellarObject = builtObject;
                        }
                        bool flag = false;
                        if (constructionQueue != null && constructionQueue.ConstructionYards != null && constructionQueue.ConstructionYards.Count > 0)
                        {
                            for (int i = 0; i < constructionQueue.ConstructionYards.Count; i++)
                            {
                                ConstructionYard constructionYard = constructionQueue.ConstructionYards[i];
                                if (constructionYard.ShipUnderConstruction == null)
                                {
                                    continue;
                                }
                                if (Galaxy.Rnd.Next(0, 4) == 1)
                                {
                                    for (int j = 0; j < constructionYard.ShipUnderConstruction.Components.Count; j++)
                                    {
                                        BuiltObjectComponent builtObjectComponent = constructionYard.ShipUnderConstruction.Components[j];
                                        if (builtObjectComponent.Status == ComponentStatus.Normal && Galaxy.Rnd.Next(0, 6) > 1)
                                        {
                                            builtObjectComponent.Status = ComponentStatus.Damaged;
                                            flag = true;
                                        }
                                    }
                                }
                                else
                                {
                                    BuiltObject shipUnderConstruction = constructionYard.ShipUnderConstruction;
                                    shipUnderConstruction.InflictDamage(shipUnderConstruction, null, 10000.0, _Galaxy.CurrentDateTime, _Galaxy, 0f, allowRecursion: false, double.MinValue, allowArmorInvulnerability: false);
                                    flag = true;
                                }
                            }
                        }
                        if (flag && empire != null && stellarObject != null)
                        {
                            string arg = string.Empty;
                            if (habitat2 != null)
                            {
                                arg = habitat2.Name;
                            }
                            string description = string.Format(TextResolver.GetText("Construction Sabotaged Description"), stellarObject.Name, arg);
                            string title = TextResolver.GetText("Construction Sabotaged") + "!";
                            empire.SendMessageToEmpire(empire, EmpireMessageType.BattleUnderAttack, stellarObject, description, new Point((int)stellarObject.Xpos, (int)stellarObject.Ypos), string.Empty, title);
                        }
                        break;
                    }
                case IntelligenceMissionType.StealTerritoryMap:
                    _Galaxy.GiveTerritoryMap(mission.TargetEmpire, this);
                    break;
                case IntelligenceMissionType.StealGalaxyMap:
                    _Galaxy.MergeGalaxyMap(mission.TargetEmpire, this);
                    break;
                case IntelligenceMissionType.StealOperationsMap:
                    {
                        long item2 = _Galaxy.CurrentStarDate + 30000;
                        _EmpiresViewable.Add(mission.TargetEmpire);
                        _EmpiresViewableExpiry.Add(item2);
                        break;
                    }
                case IntelligenceMissionType.StealTechData:
                    {
                        ResearchNode researchNode = null;
                        if (mission.Target is ResearchNode)
                        {
                            researchNode = (ResearchNode)mission.Target;
                            if (researchNode == null)
                            {
                                ResearchNodeList researchNodeList = Research.ResolveMoreAdvancedProjects(mission.TargetEmpire, includeSpecialTech: false);
                                if (researchNodeList != null && researchNodeList.Count > 0)
                                {
                                    int index = Galaxy.Rnd.Next(0, researchNodeList.Count);
                                    researchNode = researchNodeList[index];
                                }
                            }
                        }
                        else
                        {
                            ResearchNodeList researchNodeList2 = Research.ResolveMoreAdvancedProjects(mission.TargetEmpire, includeSpecialTech: false);
                            if (researchNodeList2 != null && researchNodeList2.Count > 0)
                            {
                                int index2 = Galaxy.Rnd.Next(0, researchNodeList2.Count);
                                researchNode = researchNodeList2[index2];
                            }
                        }
                        if (researchNode == null)
                        {
                            break;
                        }
                        ResearchNode equivalent = Research.TechTree.GetEquivalent(researchNode);
                        if (equivalent != null)
                        {
                            float num = (float)((double)_Galaxy.BaseTechCost * 0.5 * ((double)mission.Agent.EspionageFactored / 25.0));
                            if (mission.Agent != null)
                            {
                                num *= (float)((double)mission.Agent.EspionageFactored / 25.0);
                            }
                            float num2 = 1f;
                            if (equivalent.AllowedRaces != null && equivalent.AllowedRaces.Count > 0 && !equivalent.AllowedRaces.Contains(DominantRace))
                            {
                                num2 = 2f;
                            }
                            num /= num2;
                            equivalent.Progress += num;
                            if (equivalent.Progress >= equivalent.Cost)
                            {
                                DoResearchBreakthrough(equivalent, selfResearched: true, blockMessages: false, suppressUpdate: false);
                            }
                            mission.ResetResearchProject(equivalent);
                        }
                        break;
                    }
                case IntelligenceMissionType.CounterIntelligence:
                    break;
            }
        }

        public int NewAgentsCanRecruit()
        {
            int num = 0;
            int desiredIntelligenceAgentAmount = DesiredIntelligenceAgentAmount;
            CharacterList characterList = new CharacterList();
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Role == CharacterRole.IntelligenceAgent)
                {
                    characterList.Add(character);
                }
            }
            if (characterList.Count < desiredIntelligenceAgentAmount)
            {
                double num2 = CalculateAccurateAnnualIncome();
                double num3 = Math.Max(AnnualStateMaintenance, MinimumShipSpending);
                double num4 = Math.Max(AnnualTroopMaintenanceIncludeRecruiting, MinimumTroopSpending);
                double num5 = AnnualAgentMaintenance + num3 + num4 + AnnualSubjugationTribute + AnnualPirateProtection;
                double num6 = num2 - num5;
                if (num6 > 0.0)
                {
                    num = (int)(num6 / Galaxy.AgentAnnualMaintenance);
                }
                num = Math.Min(desiredIntelligenceAgentAmount - characterList.Count, num);
                double num7 = Galaxy.AgentAnnualMaintenance * 5.0;
                if (num7 * (double)num > StateMoney)
                {
                    num = (int)(StateMoney / num7);
                }
            }
            return num;
        }

        private void GenerateIntelligenceAgents()
        {
            int num = NewAgentsCanRecruit();
            bool flag = false;
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                if (DiplomaticRelations[i].Type != 0)
                {
                    flag = true;
                    break;
                }
            }
            if (!flag)
            {
                num = 0;
            }
            double num2 = Galaxy.AgentAnnualMaintenance * 5.0;
            if (num > 0)
            {
                for (int j = 0; j < num; j++)
                {
                    bool isRandomCharacter = false;
                    Character character = GenerateNewCharacter(CharacterRole.IntelligenceAgent, Capital, out isRandomCharacter);
                    StateMoney -= num2;
                    _Galaxy.DoCharacterEventLeader(CharacterEventType.IntelligenceAgentRecruited, character, this);
                    IntelligenceMission intelligenceMission = new IntelligenceMission(this, character, _Galaxy.CurrentStarDate);
                    intelligenceMission.TimeLength = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
                    character.Mission = intelligenceMission;
                }
            }
        }

        public string GenerateAgentName()
        {
            return GenerateAgentName(DominantRace);
        }

        public string GenerateAgentName(Race race)
        {
            string result = string.Empty;
            if (race != null)
            {
                result = _Galaxy.GenerateUniqueAgentName(race.FamilyId);
            }
            return result;
        }

        private bool AssignAgentForEspionageMission(Empire targetEmpire, EmpireEvaluation evaluation, DiplomaticRelation relation, PirateRelation pirateRelation, ref int refusalCount)
        {
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Role != CharacterRole.IntelligenceAgent || (character.Mission != null && character.Mission.Type != 0 && character.Mission.Type != IntelligenceMissionType.CounterIntelligence))
                {
                    continue;
                }
                IntelligenceMission mission = DetermineEspionageMission(targetEmpire, evaluation, relation, pirateRelation, character);
                mission = BaconEmpire.OverrideTimeForMission(this, mission);
                if (mission != null)
                {
                    mission.Agent = character;
                    if (CheckTaskAuthorized(_ControlAgentAssignment, ref refusalCount, GenerateAutomationMessageAgentMission(mission), mission, AdvisorMessageType.IntelligenceMission, mission.TargetEmpire, character, null))
                    {
                        character.Mission = mission;
                        return true;
                    }
                    mission.Agent = null;
                }
            }
            return false;
        }

        private bool CheckForIntelligenceMissionsOfTypeAgainstEmpire(Empire targetEmpire, IntelligenceMissionType missionType)
        {
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Mission != null && character.Mission.Type != 0 && character.Mission.TargetEmpire == targetEmpire && character.Mission.Type == missionType)
                {
                    return true;
                }
            }
            return false;
        }

        private bool AssignAgentForSabotageMission(Empire targetEmpire, EmpireEvaluation evaluation, DiplomaticRelation relation, PirateRelation pirateRelation, ref int refusalCount)
        {
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character.Role != CharacterRole.IntelligenceAgent || (character.Mission != null && character.Mission.Type != 0 && character.Mission.Type != IntelligenceMissionType.CounterIntelligence))
                {
                    continue;
                }
                IntelligenceMission intelligenceMission = DetermineSabotageMission(targetEmpire, evaluation, relation, pirateRelation, character);
                if (intelligenceMission != null)
                {
                    intelligenceMission.Agent = character;
                    if (CheckTaskAuthorized(_ControlAgentAssignment, ref refusalCount, GenerateAutomationMessageAgentMission(intelligenceMission), intelligenceMission, AdvisorMessageType.IntelligenceMission, intelligenceMission.TargetEmpire, character, null))
                    {
                        character.Mission = intelligenceMission;
                        return true;
                    }
                    intelligenceMission.Agent = null;
                }
            }
            return false;
        }

        public bool AssignScrapMission(BuiltObject builtObject)
        {
            return AssignScrapMission(builtObject, allowImmediateScrappingIfYardsFull: true);
        }

        public bool AssignScrapMission(BuiltObject builtObject, bool allowImmediateScrappingIfYardsFull)
        {
            return AssignScrapMission(builtObject, allowImmediateScrappingIfYardsFull, allowImmediateScrappingIfNoWarpSpeed: true);
        }

        public bool AssignScrapMission(BuiltObject builtObject, bool allowImmediateScrappingIfYardsFull, bool allowImmediateScrappingIfNoWarpSpeed)
        {
            builtObject.RetireForNextMission = false;
            if (builtObject.Empire == null || (builtObject.Empire == _Galaxy.IndependentEmpire && builtObject.PirateEmpireId == 0))
            {
                builtObject.CompleteTeardown(_Galaxy);
                return true;
            }
            if (builtObject.Role != BuiltObjectRole.Base && builtObject.TopSpeed <= 0)
            {
                builtObject.CompleteTeardown(_Galaxy);
                return true;
            }
            if (allowImmediateScrappingIfNoWarpSpeed && builtObject.Role != BuiltObjectRole.Base && builtObject.WarpSpeed <= 0)
            {
                builtObject.CompleteTeardown(_Galaxy);
                return true;
            }
            if (builtObject.Role == BuiltObjectRole.Base && builtObject.SubRole != BuiltObjectSubRole.SmallSpacePort && builtObject.SubRole != BuiltObjectSubRole.MediumSpacePort && builtObject.SubRole != BuiltObjectSubRole.LargeSpacePort)
            {
                builtObject.InflictDamage(builtObject, null, 100000.0, _Galaxy.CurrentDateTime, _Galaxy, 0f, allowRecursion: false, 0.0, allowArmorInvulnerability: false);
                return true;
            }
            double shortestWaitQueueTime;
            BuiltObject builtObject2 = SpacePorts.FindShortestConstructionWaitQueueCloseToBuiltObject(builtObject, out shortestWaitQueueTime);
            if (builtObject2 != null)
            {
                bool flag = false;
                for (int i = 0; i < builtObject2.ConstructionQueue.ConstructionYards.Count; i++)
                {
                    if (builtObject2.ConstructionQueue.ConstructionYards[i].ShipUnderConstruction == null)
                    {
                        flag = true;
                        break;
                    }
                }
                if (flag || !allowImmediateScrappingIfYardsFull)
                {
                    builtObject.ClearPreviousMissionRequirements();
                    builtObject.AssignMission(BuiltObjectMissionType.Retire, builtObject2, null, BuiltObjectMissionPriority.Normal);
                    return true;
                }
                builtObject.ClearPreviousMissionRequirements();
                builtObject.CompleteTeardown(_Galaxy);
                return true;
            }
            return false;
        }

        public double GetPrivateAnnualRevenue()
        {
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                return AnnualTaxRevenue;
            }
            return PrivateAnnualRevenue;
        }

        public double GetPrivateAnnualCashflow()
        {
            return GetPrivateAnnualCashflow(excludeRetirees: false);
        }

        public double GetPrivateAnnualCashflow(bool excludeRetirees)
        {
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                double num = 0.0;
                double num2 = 0.0;
                if (excludeRetirees)
                {
                    num = AnnualStateMaintenanceWithoutRetirees;
                    num2 = AnnualPrivateMaintenanceWithoutRetirees;
                }
                else
                {
                    num = AnnualStateMaintenance;
                    num2 = AnnualPrivateMaintenance;
                }
                double num3 = num + AnnualTroopMaintenance;
                double num4 = num2;
                double annualTaxRevenue = AnnualTaxRevenue;
                return annualTaxRevenue - (num3 + num4);
            }
            double num5 = 0.0;
            num5 = ((!excludeRetirees) ? (AnnualPrivateMaintenance + AnnualTaxRevenue) : (AnnualPrivateMaintenanceWithoutRetirees + AnnualTaxRevenue));
            return PrivateAnnualRevenue - num5;
        }

        private void RetireOldBuiltObjects()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            _ = Galaxy.RealSecondsInGalacticYear;
            _ = Galaxy.RetirementYears;
            long num = Galaxy.RealSecondsInGalacticYear * 1000 * Galaxy.RetirementYears;
            int num2 = 0;
            double num3 = GetPrivateFunds() / (AnnualPrivateMaintenance + 1.0);
            double num4 = StateMoney / (AnnualStateMaintenance + 1.0);
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(PrivateBuiltObjects);
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            builtObjectList2.AddRange(BuiltObjects);
            int num5 = Math.Min(700, 1 + (int)((double)Colonies.Count * 1.5));
            int num6 = Math.Min(100, 1 + (int)((double)Colonies.Count * 0.5));
            int num7 = Math.Min(50, 2 + (int)((double)Colonies.Count * 0.3));
            int num8 = Math.Min(100, 2 + (int)((double)Colonies.Count * 0.5));
            if (num3 < Galaxy.AllowableYearsMaintenanceFromCashOnHand)
            {
                double privateAnnualCashflow = GetPrivateAnnualCashflow(excludeRetirees: true);
                if (privateAnnualCashflow < 0.0)
                {
                    double val = 1.0 - Math.Abs(privateAnnualCashflow) / AnnualPrivateMaintenanceWithoutRetirees;
                    val = Math.Max(0.0, Math.Min(1.0, val));
                    num2 = (int)((double)PrivateBuiltObjects.Count - (double)PrivateBuiltObjects.Count * val);
                    for (int i = 0; i < builtObjectList.Count; i++)
                    {
                        if (builtObjectList[i] != null && builtObjectList[i].Design != null)
                        {
                            builtObjectList[i].SortTag = builtObjectList[i].Design.DateCreated;
                        }
                    }
                    builtObjectList.Sort();
                }
            }
            if (num4 < Galaxy.AllowableYearsMaintenanceFromCashOnHand)
            {
                double num9 = CalculateSpareAnnualRevenueComplete();
                if (num9 < 0.0)
                {
                    double val2 = 1.0 - Math.Abs(num9) / AnnualStateMaintenanceWithoutRetirees;
                    val2 = Math.Max(0.0, Math.Min(1.0, val2));
                    _ = BuiltObjects.Count;
                    _ = BuiltObjects.Count;
                    for (int j = 0; j < builtObjectList2.Count; j++)
                    {
                        if (builtObjectList2[j] != null && builtObjectList2[j].Design != null)
                        {
                            builtObjectList2[j].SortTag = builtObjectList2[j].Design.DateCreated;
                        }
                    }
                    builtObjectList2.Sort();
                }
            }
            BuiltObjectList builtObjectList3 = new BuiltObjectList();
            builtObjectList3.AddRange(BuiltObjects);
            builtObjectList3.AddRange(builtObjectList);
            int empireOrderCount = 0;
            OrderList orders = _Galaxy.Orders.GetOrders(this);
            if (orders != null)
            {
                empireOrderCount = orders.Count;
            }
            int num10 = 0;
            int num11 = 0;
            int num12 = 0;
            int num13 = 0;
            for (int k = 0; k < PrivateBuiltObjects.Count; k++)
            {
                BuiltObject builtObject = PrivateBuiltObjects[k];
                if (builtObject.UnbuiltComponentCount <= 0)
                {
                    if (builtObject.Role == BuiltObjectRole.Freight)
                    {
                        num10++;
                    }
                    else if (builtObject.SubRole == BuiltObjectSubRole.PassengerShip)
                    {
                        num11++;
                    }
                    else if (builtObject.SubRole == BuiltObjectSubRole.MiningShip || builtObject.SubRole == BuiltObjectSubRole.GasMiningShip)
                    {
                        num12++;
                    }
                    else if (builtObject.SubRole == BuiltObjectSubRole.MiningStation || builtObject.SubRole == BuiltObjectSubRole.GasMiningStation)
                    {
                        num13++;
                    }
                }
            }
            CheckAtWar();
            int num14 = 0;
            for (int l = 0; l < builtObjectList.Count; l++)
            {
                BuiltObject builtObject2 = builtObjectList[l];
                if (!builtObject2.IsAutoControlled || builtObject2.RetireForNextMission || builtObject2.Scrap || (currentStarDate - builtObject2.DateBuilt <= num && num14 >= num2) || !CanBuildBuiltObject(builtObject2))
                {
                    continue;
                }
                if (builtObject2.Role == BuiltObjectRole.Freight)
                {
                    if (num10 > 0 && num10 > num5 && ShouldRetireFreighter(builtObject2, empireOrderCount, num10))
                    {
                        builtObject2.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                        num10--;
                        num14++;
                    }
                }
                else if ((builtObject2.SubRole != BuiltObjectSubRole.MiningStation && builtObject2.SubRole != BuiltObjectSubRole.GasMiningStation) || num13 <= num8)
                {
                    if ((builtObject2.SubRole == BuiltObjectSubRole.MiningShip || builtObject2.SubRole == BuiltObjectSubRole.GasMiningShip) && num12 > num7)
                    {
                        builtObject2.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                        num12--;
                        num14++;
                    }
                    else if (builtObject2.SubRole == BuiltObjectSubRole.PassengerShip && num11 > num6)
                    {
                        builtObject2.CompleteTeardown(_Galaxy, removeFromEmpire: true);
                        num11--;
                        num14++;
                    }
                    else if (builtObject2.Role != BuiltObjectRole.Base || builtObject2.IsShipYard || builtObject2.IsResourceExtractor)
                    {
                        builtObject2.RetireForNextMission = true;
                        num14++;
                    }
                }
            }
        }

        private bool ShouldRetireFreighter(BuiltObject builtObject, int empireOrderCount, int empireFreighterCount)
        {
            if (builtObject.Role == BuiltObjectRole.Freight && (double)empireOrderCount / (double)empireFreighterCount > 1.5)
            {
                return false;
            }
            return true;
        }

        private BuiltObject GenerateNewShip(BuiltObjectSubRole subRole, Habitat location)
        {
            Design design = Designs.FindNewestCanBuild(subRole, location);
            if (design != null)
            {
                double purchasePrice = design.CalculateCurrentPurchasePrice(_Galaxy);
                design.BuildCount++;
                BuiltObject builtObject = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design), _Galaxy);
                builtObject.PurchasePrice = purchasePrice;
                return GenerateNewBuiltObject(design, location);
            }
            return null;
        }

        private void DirectPrivateConstruction()
        {
            List<CargoList> list = new List<CargoList>();
            BuiltObjectList builtObjectList = new BuiltObjectList();
            CargoList resourcesToOrder = null;
            double privateAnnualCashflow = GetPrivateAnnualCashflow();
            double annualSupportCosts = 0.0;
            ForceStructureProjectionList forceStructureProjectionList = CurrentPrivateForceStructure(out annualSupportCosts);
            ForceStructureProjectionList forceStructureProjectionList2 = _PrivateForceStructureProjections.Diff(forceStructureProjectionList);
            forceStructureProjectionList2.Sort();
            double num = 0.0;
            double num2 = 0.0;
            foreach (ForceStructureProjection item2 in forceStructureProjectionList2)
            {
                Design design = Designs.FindNewestCanBuild(item2.SubRole);
                if (design == null || item2.Amount <= 0)
                {
                    continue;
                }
                for (int i = 0; i < item2.Amount; i++)
                {
                    double num3 = design.CalculateCurrentPurchasePrice(_Galaxy);
                    double num4 = design.CalculateMaintenanceCosts(_Galaxy, this);
                    if (!(num2 + num4 <= privateAnnualCashflow) || !(num + num3 <= GetPrivateFunds()))
                    {
                        continue;
                    }
                    design.BuildCount++;
                    BuiltObject builtObject = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design), _Galaxy);
                    builtObject.PurchasePrice = num3;
                    double shortestWaitQueueTime;
                    BuiltObject builtObject2 = SpacePorts.FindShortestConstructionWaitQueue(builtObject, out shortestWaitQueueTime);
                    double num5 = shortestWaitQueueTime / (double)Galaxy.RealSecondsInGalacticYear;
                    if (builtObject2 != null && num5 < Galaxy.MaximumConstructionQueueWaitTimeYears)
                    {
                        if (builtObject2.ConstructionQueue != null)
                        {
                            if (builtObject2.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                            {
                                if (builtObject2.ParentHabitat != null)
                                {
                                    Habitat habitat = Galaxy.DetermineHabitatSystemStar(builtObject2.ParentHabitat);
                                    builtObject.Name = _Galaxy.GenerateBuiltObjectName(design, habitat);
                                }
                                AddBuiltObjectToGalaxy(builtObject, builtObject2, offsetLocationFromParent: false, isStateOwned: false);
                                num += num3;
                                num2 += num4;
                                builtObject2.PerformFinancialTransaction(num3, _Galaxy.CurrentStarDate, incomeFromTax: false);
                                builtObject.BuiltAt = builtObject2;
                                ProcureConstructionComponents(builtObject, builtObject2, orderPreciseResourceAmounts: true, out resourcesToOrder);
                                list.Add(resourcesToOrder);
                                builtObjectList.Add(builtObject2);
                            }
                            else
                            {
                                design.BuildCount--;
                            }
                        }
                        else
                        {
                            design.BuildCount--;
                        }
                    }
                    else
                    {
                        design.BuildCount--;
                    }
                }
            }
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            for (int j = 0; j < builtObjectList.Count; j++)
            {
                BuiltObject item = builtObjectList[j];
                if (!builtObjectList2.Contains(item))
                {
                    builtObjectList2.Add(item);
                }
            }
            foreach (BuiltObject item3 in builtObjectList2)
            {
                CargoList cargoList = new CargoList();
                for (int k = 0; k < builtObjectList.Count; k++)
                {
                    if (builtObjectList[k] != item3)
                    {
                        continue;
                    }
                    foreach (Cargo item4 in list[k])
                    {
                        cargoList.Add(item4);
                    }
                }
                foreach (Cargo item5 in cargoList)
                {
                    CreateOrder(item3, item5.CommodityResource, item5.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
            _StateMoney += BaconEmpire.PrivateConstructionAddToInfrastructure(this, num);
            PerformPrivateTransaction(0.0 - num);
        }

        public void ObtainBuildResourcesForConstructionShip(BuiltObject constructionShip, BuiltObject newBuiltObject)
        {
            if (constructionShip.SubRole == BuiltObjectSubRole.ConstructionShip && constructionShip.Cargo != null)
            {
                foreach (Cargo item in constructionShip.Cargo)
                {
                    item.Reserved = 0;
                }
            }
            CargoList resourcesToOrder = null;
            ProcureConstructionComponents(newBuiltObject, constructionShip, orderPreciseResourceAmounts: true, out resourcesToOrder);
            foreach (Cargo item2 in resourcesToOrder)
            {
                CreateOrder(constructionShip, item2.CommodityResource, item2.Amount, isState: false, OrderType.ConstructionShortageMobile);
            }
        }

        public void ProcureConstructionComponents(BuiltObject builtObjectToBuild, BuiltObject constructionYard, bool orderPreciseResourceAmounts, out CargoList resourcesToOrder)
        {
            ComponentList componentList = new ComponentList();
            if (builtObjectToBuild != null && builtObjectToBuild.Components != null)
            {
                foreach (BuiltObjectComponent component in builtObjectToBuild.Components)
                {
                    if (component.Status == ComponentStatus.Unbuilt)
                    {
                        componentList.Add(component);
                    }
                }
            }
            ProcureConstructionComponents(builtObjectToBuild, constructionYard, orderPreciseResourceAmounts, out resourcesToOrder, componentList);
        }

        public void ProcureConstructionComponents(BuiltObject builtObjectToBuild, BuiltObject constructionYard, bool orderPreciseResourceAmounts, out CargoList resourcesToOrder, ComponentList components)
        {
            ProcureConstructionComponents(builtObjectToBuild, constructionYard, orderPreciseResourceAmounts, out resourcesToOrder, components, forBaseRetrofit: false);
        }

        public void ProcureConstructionComponents(BuiltObject builtObjectToBuild, BuiltObject constructionYard, bool orderPreciseResourceAmounts, out CargoList resourcesToOrder, ComponentList components, bool forBaseRetrofit)
        {
            resourcesToOrder = new CargoList();
            ComponentList componentsToFind = components;
            if (constructionYard == null)
            {
                return;
            }
            if (constructionYard.SubRole == BuiltObjectSubRole.ConstructionShip)
            {
                CheckCargoForComponentSupply(builtObjectToBuild, ref componentsToFind, constructionYard);
            }
            if (forBaseRetrofit)
            {
                if (constructionYard.RetrofitBaseManufacturingQueue == null || constructionYard.RetrofitBaseManufacturingQueue.ComponentWaitQueue == null)
                {
                    return;
                }
                CheckCargoForComponentResourceSupply(builtObjectToBuild, componentsToFind, constructionYard, orderPreciseResourceAmounts, out resourcesToOrder);
                {
                    foreach (Component item in componentsToFind)
                    {
                        constructionYard.RetrofitBaseManufacturingQueue.ComponentWaitQueue.Add(item);
                    }
                    return;
                }
            }
            if (constructionYard.ManufacturingQueue == null || constructionYard.ManufacturingQueue.ComponentWaitQueue == null)
            {
                return;
            }
            CheckCargoForComponentResourceSupply(builtObjectToBuild, componentsToFind, constructionYard, orderPreciseResourceAmounts, out resourcesToOrder);
            foreach (Component item2 in componentsToFind)
            {
                constructionYard.ManufacturingQueue.ComponentWaitQueue.Add(item2);
            }
        }

        public void ProcureConstructionComponents(BuiltObject builtObjectToBuild, Habitat constructionColony, out CargoList resourcesToOrder)
        {
            ComponentList components = builtObjectToBuild.Design.Components.Clone();
            ProcureConstructionComponents(builtObjectToBuild, constructionColony, out resourcesToOrder, components);
        }

        public void ProcureConstructionComponents(BuiltObject builtObjectToBuild, Habitat constructionColony, out CargoList resourcesToOrder, ComponentList components)
        {
            CheckCargoForComponentResourceSupply(builtObjectToBuild, components, constructionColony, orderPreciseAmount: true, out resourcesToOrder);
            if (constructionColony == null || constructionColony.ManufacturingQueue == null || constructionColony.ManufacturingQueue.ComponentWaitQueue == null)
            {
                return;
            }
            foreach (Component component in components)
            {
                constructionColony.ManufacturingQueue.ComponentWaitQueue.Add(component);
            }
        }

        private void CheckCargoForComponentResourceSupply(BuiltObject builtObjectToBuild, ComponentList componentsToFind, Habitat constructionColony, bool orderPreciseAmount, out CargoList resourcesToOrder)
        {
            resourcesToOrder = new CargoList();
            if (builtObjectToBuild == null || componentsToFind == null || constructionColony == null)
            {
                return;
            }
            new ComponentResourceList();
            for (int i = 0; i < componentsToFind.Count; i++)
            {
                Component component = componentsToFind[i];
                for (int j = 0; j < component.RequiredResources.Count; j++)
                {
                    ComponentResource componentResource = component.RequiredResources[j];
                    Cargo cargo = null;
                    int num = 0;
                    if (constructionColony.Cargo == null)
                    {
                        continue;
                    }
                    int num2 = constructionColony.Cargo.IndexOf(componentResource, this);
                    if (num2 >= 0)
                    {
                        cargo = constructionColony.Cargo[num2];
                        num = Math.Max(0, componentResource.Quantity - Math.Max(0, cargo.Available));
                        cargo.Reserved += componentResource.Quantity;
                    }
                    if (cargo == null)
                    {
                        int num3 = 0;
                        Cargo cargo2 = new Cargo(amount: (!orderPreciseAmount) ? Math.Max(Galaxy.MinimumOrderAmount, componentResource.Quantity) : componentResource.Quantity, resource: new Resource(componentResource.ResourceID), empire: this);
                        resourcesToOrder.Add(cargo2);
                        cargo = new Cargo(componentResource, 0, this, componentResource.Quantity);
                        constructionColony.Cargo.Add(cargo);
                    }
                    else if (num > 0)
                    {
                        if (!orderPreciseAmount)
                        {
                            num = Math.Max(num, Galaxy.MinimumOrderAmount);
                        }
                        Cargo cargo3 = new Cargo(new Resource(componentResource.ResourceID), num, this);
                        resourcesToOrder.Add(cargo3);
                    }
                }
            }
        }

        public ComponentResourceList ResolveResourcesFromComponents(ComponentList components)
        {
            ComponentResourceList componentResourceList = new ComponentResourceList();
            foreach (Component component in components)
            {
                foreach (ComponentResource requiredResource in component.RequiredResources)
                {
                    int num = componentResourceList.IndexOf(requiredResource);
                    if (num >= 0)
                    {
                        componentResourceList[num].Quantity += requiredResource.Quantity;
                    }
                    else
                    {
                        componentResourceList.Add(new ComponentResource(requiredResource.ResourceID, requiredResource.Quantity));
                    }
                }
            }
            return componentResourceList;
        }

        private void CheckCargoForComponentResourceSupply(BuiltObject builtObjectToBuild, ComponentList componentsToFind, BuiltObject constructionYard, bool orderPreciseAmount, out CargoList resourcesToOrder)
        {
            resourcesToOrder = new CargoList();
            if (builtObjectToBuild == null || componentsToFind == null || constructionYard == null)
            {
                return;
            }
            new ComponentResourceList();
            for (int i = 0; i < componentsToFind.Count; i++)
            {
                Component component = componentsToFind[i];
                for (int j = 0; j < component.RequiredResources.Count; j++)
                {
                    ComponentResource componentResource = component.RequiredResources[j];
                    Cargo cargo = null;
                    int num = 0;
                    if (constructionYard.Cargo != null)
                    {
                        int num2 = constructionYard.Cargo.IndexOf(componentResource, this);
                        if (num2 >= 0)
                        {
                            cargo = constructionYard.Cargo[num2];
                            num = Math.Max(0, componentResource.Quantity - Math.Max(0, cargo.Available));
                            cargo.Reserved += componentResource.Quantity;
                        }
                        if (cargo == null)
                        {
                            int quantity = componentResource.Quantity;
                            Cargo cargo2 = new Cargo(new Resource(componentResource.ResourceID), quantity, this);
                            resourcesToOrder.Add(cargo2);
                            cargo = new Cargo(componentResource, 0, this, componentResource.Quantity);
                            constructionYard.Cargo.Add(cargo);
                        }
                        else if (num > 0)
                        {
                            Cargo cargo3 = new Cargo(new Resource(componentResource.ResourceID), num, this);
                            resourcesToOrder.Add(cargo3);
                        }
                    }
                }
            }
            if (orderPreciseAmount)
            {
                return;
            }
            foreach (Cargo item in resourcesToOrder)
            {
                item.Amount = Math.Max(item.Amount, Galaxy.MinimumOrderAmount);
            }
        }

        private bool CheckCargoForComponentSupply(BuiltObject builtObjectToBuild, ref ComponentList componentsToFind, Habitat cargoProvider)
        {
            bool result = false;
            ComponentList componentList = new ComponentList();
            if (builtObjectToBuild == null || componentsToFind == null || cargoProvider == null || cargoProvider.Cargo == null)
            {
                return false;
            }
            for (int i = 0; i < componentsToFind.Count; i++)
            {
                Component component = componentsToFind[i];
                Component component2 = null;
                int num = cargoProvider.Cargo.IndexOf(component, this);
                if (num >= 0 && cargoProvider.Cargo[num].Available > 0)
                {
                    cargoProvider.Cargo[num].Reserved++;
                    component2 = cargoProvider.Cargo[num].CommodityComponent;
                    result = true;
                }
                if (component2 != null)
                {
                    componentList.Add(component2);
                }
            }
            foreach (Component item in componentList)
            {
                componentsToFind.Remove(item);
            }
            return result;
        }

        private bool CheckCargoForComponentSupply(BuiltObject builtObjectToBuild, ref ComponentList componentsToFind, BuiltObject cargoProvider)
        {
            bool result = false;
            ComponentList componentList = new ComponentList();
            if (builtObjectToBuild == null || componentsToFind == null || cargoProvider == null || cargoProvider.Cargo == null)
            {
                return false;
            }
            for (int i = 0; i < componentsToFind.Count; i++)
            {
                Component component = componentsToFind[i];
                Component component2 = null;
                int num = cargoProvider.Cargo.IndexOf(component, this);
                if (num >= 0 && cargoProvider.Cargo[num].Available > 0)
                {
                    cargoProvider.Cargo[num].Reserved++;
                    component2 = cargoProvider.Cargo[num].CommodityComponent;
                    result = true;
                }
                if (component2 != null)
                {
                    componentList.Add(component2);
                }
            }
            foreach (Component item in componentList)
            {
                int num2 = componentsToFind.IndexById(item);
                if (num2 >= 0)
                {
                    componentsToFind.RemoveAt(num2);
                }
            }
            return result;
        }

        public StellarObjectList DetermineRestrictedResourceSupplyLocations()
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                HabitatResourceList habitatResourceList = new HabitatResourceList();
                if (habitat.Resources != null)
                {
                    habitatResourceList = habitat.Resources.Clone();
                }
                for (int j = 0; j < habitatResourceList.Count; j++)
                {
                    if (habitatResourceList[j].IsRestrictedResource)
                    {
                        stellarObjectList.Add(habitat);
                    }
                }
            }
            for (int k = 0; k < MiningStations.Count; k++)
            {
                BuiltObject builtObject = MiningStations[k];
                if (builtObject.ParentHabitat == null)
                {
                    continue;
                }
                HabitatResourceList habitatResourceList2 = new HabitatResourceList();
                if (builtObject.ParentHabitat.Resources != null)
                {
                    habitatResourceList2 = builtObject.ParentHabitat.Resources.Clone();
                }
                for (int l = 0; l < habitatResourceList2.Count; l++)
                {
                    if (habitatResourceList2[l].IsRestrictedResource)
                    {
                        stellarObjectList.Add(builtObject);
                    }
                }
            }
            return stellarObjectList;
        }

        public BuiltObjectList DetermineShipsMovingToDestination(StellarObject destination)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            if (destination != null)
            {
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (CheckShipTravellingToDestination(builtObject, destination))
                    {
                        builtObjectList.Add(builtObject);
                    }
                }
                for (int j = 0; j < PrivateBuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = PrivateBuiltObjects[j];
                    if (CheckShipTravellingToDestination(builtObject2, destination))
                    {
                        builtObjectList.Add(builtObject2);
                    }
                }
            }
            return builtObjectList;
        }

        public bool CheckShipTravellingToDestination(BuiltObject builtObject, StellarObject destination)
        {
            if (builtObject != null && !builtObject.HasBeenDestroyed && destination != null && !destination.HasBeenDestroyed && builtObject.Mission != null && builtObject.Mission.Type != 0)
            {
                StellarObject stellarObject = null;
                if (builtObject.Mission.Target != null && builtObject.Mission.Target is StellarObject)
                {
                    stellarObject = (StellarObject)builtObject.Mission.Target;
                }
                StellarObject stellarObject2 = null;
                if (builtObject.Mission.SecondaryTarget != null && builtObject.Mission.SecondaryTarget is StellarObject)
                {
                    stellarObject2 = (StellarObject)builtObject.Mission.SecondaryTarget;
                }
                if (stellarObject == destination)
                {
                    BuiltObjectMissionType type = builtObject.Mission.Type;
                    if (type == BuiltObjectMissionType.Transport)
                    {
                        return false;
                    }
                    return true;
                }
                if (stellarObject2 == destination)
                {
                    BuiltObjectMissionType type2 = builtObject.Mission.Type;
                    if (type2 == BuiltObjectMissionType.Transport)
                    {
                        return true;
                    }
                    return false;
                }
            }
            return false;
        }

        public int CountShipsAssignedToMission(EmpireActivity mission, out int firepowerAssigned)
        {
            BuiltObjectList builtObjectList = DetermineShipsAssignedToMission(mission);
            firepowerAssigned = builtObjectList.TotalMobileMilitaryFirepower();
            return builtObjectList.Count;
        }

        public BuiltObjectList DetermineShipsAssignedToMission(EmpireActivity mission)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            if (mission != null)
            {
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (CheckShipPerformingMission(builtObject, mission))
                    {
                        builtObjectList.Add(builtObject);
                    }
                }
                for (int j = 0; j < PrivateBuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = PrivateBuiltObjects[j];
                    if (CheckShipPerformingMission(builtObject2, mission))
                    {
                        builtObjectList.Add(builtObject2);
                    }
                }
            }
            return builtObjectList;
        }

        public bool CheckShipPerformingMission(BuiltObject builtObject, EmpireActivity mission)
        {
            if (builtObject != null && !builtObject.HasBeenDestroyed && mission != null)
            {
                switch (mission.Type)
                {
                    case EmpireActivityType.Smuggle:
                        if (builtObject.Role == BuiltObjectRole.Freight && builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Transport && builtObject.Mission.SecondaryTargetHabitat == mission.Target && (mission.ResourceId == byte.MaxValue || builtObject.Mission.Cargo.IndexOf(mission.ResourceId) >= 0))
                        {
                            return true;
                        }
                        break;
                    case EmpireActivityType.Attack:
                        if (builtObject.Role == BuiltObjectRole.Military && builtObject.Mission != null && (builtObject.Mission.Type == BuiltObjectMissionType.Attack || builtObject.Mission.Type == BuiltObjectMissionType.Capture) && builtObject.Mission.Target == mission.Target)
                        {
                            return true;
                        }
                        break;
                    case EmpireActivityType.Defend:
                        if (builtObject.Role != BuiltObjectRole.Military)
                        {
                            break;
                        }
                        if (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.MoveAndWait && builtObject.Mission.Target == mission.Target)
                        {
                            return true;
                        }
                        if (builtObject.BuiltAt == null)
                        {
                            double num = _Galaxy.CalculateDistanceSquared(mission.Target.Xpos, mission.Target.Ypos, builtObject.Xpos, builtObject.Ypos);
                            if (num < 2250000.0)
                            {
                                return true;
                            }
                        }
                        break;
                }
            }
            return false;
        }

        public int CountIdleFreighters()
        {
            int num = 0;
            for (int i = 0; i < PrivateBuiltObjects.Count; i++)
            {
                BuiltObject builtObject = PrivateBuiltObjects[i];
                if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.UnbuiltComponentCount <= 0 && builtObject.Role == BuiltObjectRole.Freight && (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined))
                {
                    num++;
                }
            }
            return num;
        }

        public int CountResourceSupplyLocations(byte resourceId, bool includeIndependentColonies)
        {
            int num = 0;
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(BuiltObjects);
            builtObjectList.AddRange(PrivateBuiltObjects);
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat.Empire != this)
                {
                    continue;
                }
                foreach (HabitatResource resource in habitat.Resources)
                {
                    if (resource.ResourceID == resourceId)
                    {
                        num++;
                    }
                }
            }
            for (int j = 0; j < builtObjectList.Count; j++)
            {
                BuiltObject builtObject = builtObjectList[j];
                if (builtObject.SubRole == BuiltObjectSubRole.GasMiningStation || builtObject.SubRole == BuiltObjectSubRole.MiningStation)
                {
                    if (builtObject.ParentHabitat == null)
                    {
                        continue;
                    }
                    foreach (HabitatResource resource2 in builtObject.ParentHabitat.Resources)
                    {
                        if (resource2.ResourceID == resourceId)
                        {
                            num++;
                        }
                    }
                }
                else
                {
                    if (PirateEmpireBaseHabitat == null || (builtObject.SubRole != BuiltObjectSubRole.SmallSpacePort && builtObject.SubRole != BuiltObjectSubRole.MediumSpacePort && builtObject.SubRole != BuiltObjectSubRole.LargeSpacePort) || builtObject.ParentHabitat == null || builtObject.ParentHabitat.Empire == this)
                    {
                        continue;
                    }
                    foreach (HabitatResource resource3 in builtObject.ParentHabitat.Resources)
                    {
                        if (resource3.ResourceID == resourceId)
                        {
                            num++;
                        }
                    }
                }
            }
            if (includeIndependentColonies)
            {
                for (int k = 0; k < _Galaxy.IndependentColonies.Count; k++)
                {
                    Habitat habitat2 = _Galaxy.IndependentColonies[k];
                    if (habitat2.Empire != _Galaxy.IndependentEmpire || !CheckSystemExplored(habitat2.SystemIndex))
                    {
                        continue;
                    }
                    foreach (HabitatResource resource4 in habitat2.Resources)
                    {
                        if (resource4.ResourceID == resourceId)
                        {
                            num++;
                        }
                    }
                }
            }
            return num;
        }

        public ResourceList DetermineResourcesEmpireSupplies()
        {
            ResourceList resourceList = new ResourceList();
            Resource resource = null;
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat == null || habitat.Resources == null)
                    {
                        continue;
                    }
                    foreach (HabitatResource resource2 in habitat.Resources)
                    {
                        int num = resourceList.IndexOf(resource2.ResourceID);
                        if (num < 0)
                        {
                            resource = new Resource(resource2.ResourceID);
                            resourceList.Add(resource);
                        }
                    }
                }
            }
            for (int j = 0; j < PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject = PrivateBuiltObjects[j];
                if (builtObject == null || (builtObject.SubRole != BuiltObjectSubRole.GasMiningStation && builtObject.SubRole != BuiltObjectSubRole.MiningStation) || builtObject.ParentHabitat == null || builtObject.ParentHabitat.Resources == null)
                {
                    continue;
                }
                foreach (HabitatResource resource3 in builtObject.ParentHabitat.Resources)
                {
                    int num2 = resourceList.IndexOf(resource3.ResourceID);
                    if (num2 < 0)
                    {
                        resource = new Resource(resource3.ResourceID);
                        resourceList.Add(resource);
                    }
                }
            }
            return resourceList;
        }

        private ResourceList ResolveOrderedNonFuelNonCriticalResources(ResourceList criticalResources)
        {
            ResourceList resourceList = new ResourceList();
            Resource resource = null;
            for (int i = 0; i < _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null && !resourceDefinition.IsFuel)
                {
                    resource = new Resource(resourceDefinition.ResourceID);
                    if (!criticalResources.Contains(resource))
                    {
                        resourceList.Add(resource);
                    }
                }
            }
            return resourceList;
        }

        public bool BuildStrategicResourceSupply(BuiltObject constructionShip, HabitatList empireHabitatsBeingMined)
        {
            StellarObject stellarObject = _Galaxy.FastFindNearestSpacePort(constructionShip.Xpos, constructionShip.Ypos, this);
            if (stellarObject == null)
            {
                stellarObject = ((PirateEmpireBaseHabitat != null) ? PirateEmpireBaseHabitat : Capital);
            }
            for (int i = 0; i < _Galaxy.ResourceSystem.FuelResources.Count; i++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.FuelResources[i];
                if (resourceDefinition != null && CheckResourceAssignBuild(constructionShip, new Resource(resourceDefinition.ResourceID), empireHabitatsBeingMined, stellarObject))
                {
                    return true;
                }
            }
            ResourceList resourceList = new ResourceList();
            if (PirateEmpireBaseHabitat == null && DominantRace != null && DominantRace.CriticalResources.Count > 0)
            {
                resourceList.AddRange(DominantRace.CriticalResources.ResolveResources());
            }
            for (int j = 0; j < resourceList.Count; j++)
            {
                if (CheckResourceAssignBuild(constructionShip, resourceList[j], empireHabitatsBeingMined, stellarObject))
                {
                    return true;
                }
            }
            ResourceList resourceList2 = ResolveOrderedNonFuelNonCriticalResources(resourceList);
            for (int k = 0; k < resourceList2.Count; k++)
            {
                if (CheckResourceAssignBuild(constructionShip, resourceList2[k], empireHabitatsBeingMined, stellarObject))
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckResourceAssignBuild(BuiltObject constructionShip, Resource resource, HabitatList empireHabitatsBeingMined, StellarObject buildResourcePickupPoint)
        {
            return CheckResourceAssignBuild(constructionShip, resource, empireHabitatsBeingMined, buildResourcePickupPoint, isCriticalEmpireResource: false);
        }

        private bool CheckResourceAssignBuild(BuiltObject constructionShip, Resource resource, HabitatList empireHabitatsBeingMined, StellarObject buildResourcePickupPoint, bool isCriticalEmpireResource)
        {
            Habitat habitat = CheckResourceSupplyMeetsExpected(resource, isCriticalEmpireResource, empireHabitatsBeingMined);
            if (habitat != null && buildResourcePickupPoint != null && constructionShip.DistanceWithinRange(buildResourcePickupPoint.Xpos, buildResourcePickupPoint.Ypos, habitat.Xpos, habitat.Ypos, 0.1) && !empireHabitatsBeingMined.Contains(habitat))
            {
                HabitatResourceList habitatResourceList = new HabitatResourceList();
                if (habitat.Resources != null)
                {
                    habitatResourceList = habitat.Resources.Clone();
                }
                if (constructionShip.SubRole == BuiltObjectSubRole.ConstructionShip && constructionShip.IsAutoControlled && constructionShip.IsShipYard && (constructionShip.Mission == null || constructionShip.Mission.Type == BuiltObjectMissionType.Undefined))
                {
                    Design design = null;
                    if (habitatResourceList.ContainsGroup(ResourceGroup.Gas))
                    {
                        design = Designs.FindNewestCanBuild(BuiltObjectSubRole.GasMiningStation);
                    }
                    if (habitatResourceList.ContainsGroup(ResourceGroup.Mineral))
                    {
                        design = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                    }
                    if (design == null && habitat.Resources.ContainsGroup(ResourceGroup.Luxury))
                    {
                        design = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                    }
                    if (design != null)
                    {
                        _Galaxy.SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
                        constructionShip.AssignMission(BuiltObjectMissionType.Build, habitat, null, design, x, y, BuiltObjectMissionPriority.Normal);
                        int num = _ResourceTargets.IndexOf(habitat);
                        if (num >= 0)
                        {
                            _ResourceTargets.RemoveAt(num);
                        }
                        empireHabitatsBeingMined.Add(habitat);
                        return true;
                    }
                }
            }
            return false;
        }

        public bool CheckResourceSupplyMeetsExpected(Resource resource, bool isCriticalEmpireResource)
        {
            return CheckResourceSupplyMeetsExpected(resource, isCriticalEmpireResource, 1.0);
        }

        public bool CheckResourceSupplyMeetsExpected(Resource resource, bool isCriticalEmpireResource, double oversupplyFactor)
        {
            int num = 1;
            if (PirateEmpireBaseHabitat == null)
            {
                int num2 = 3;
                int num3 = 3;
                int num4 = 2;
                if (!CheckEmpireHasHyperDriveTech(this))
                {
                    num2 = 2;
                    num3 = 1;
                    num4 = 1;
                }
                if (resource.IsFuel)
                {
                    num = num2 + (int)((double)Colonies.Count / 2.0);
                    num = Math.Min(50, num);
                }
                else if ((double)resource.RelativeImportance > 0.5)
                {
                    num = num3 + (int)((double)Colonies.Count / 3.0);
                    num = Math.Min(50, num);
                }
                else if ((double)resource.RelativeImportance > 0.25)
                {
                    num = num4 + (int)((double)Colonies.Count / 4.0);
                    num = Math.Min(50, num);
                }
                else
                {
                    num = 1 + Colonies.Count / 6;
                }
                if (isCriticalEmpireResource)
                {
                    num = Math.Max(num, num4 + Colonies.Count / 3);
                    num = Math.Min(40, num);
                }
            }
            else if (resource.IsFuel)
            {
                num = 2 + (int)((double)SpacePorts.Count / 2.0);
                num = Math.Min(50, num);
            }
            else if ((double)resource.RelativeImportance > 0.5)
            {
                num = 1 + (int)((double)SpacePorts.Count / 4.0);
                num = Math.Min(50, num);
            }
            else
            {
                num = 1;
            }
            num = (int)((double)num * oversupplyFactor);
            int num5 = _Galaxy.CountResourceSourcesForEmpire(this, resource.ResourceID, includeConstructionShipsBuildingMiningStations: true);
            if (num5 < num)
            {
                return false;
            }
            return true;
        }

        public Habitat CheckResourceSupplyMeetsExpected(Resource resource)
        {
            return CheckResourceSupplyMeetsExpected(resource, isCriticalEmpireResource: false, null);
        }

        public Habitat CheckResourceSupplyMeetsExpected(Resource resource, bool isCriticalEmpireResource, HabitatList empireHabitatsBeingMined)
        {
            Habitat habitat = null;
            if (!CheckResourceSupplyMeetsExpected(resource, isCriticalEmpireResource))
            {
                int num = 0;
                while (habitat == null && num < 50)
                {
                    habitat = IdentifyStrategicResourceSupplySource(resource);
                    if (habitat == null)
                    {
                        break;
                    }
                    if (CheckNearPirateBase(habitat, habitat.Xpos, habitat.Ypos, this))
                    {
                        int num2 = _ResourceTargets.IndexOf(habitat);
                        if (num2 >= 0)
                        {
                            _ResourceTargets.RemoveAt(num2);
                        }
                        habitat = null;
                    }
                    else if (empireHabitatsBeingMined == null)
                    {
                        if (_Galaxy.DetermineMiningStationAtHabitatForEmpire(habitat, this) != null)
                        {
                            int num3 = _ResourceTargets.IndexOf(habitat);
                            if (num3 >= 0)
                            {
                                _ResourceTargets.RemoveAt(num3);
                            }
                            habitat = null;
                        }
                    }
                    else if (empireHabitatsBeingMined.Contains(habitat))
                    {
                        int num4 = _ResourceTargets.IndexOf(habitat);
                        if (num4 >= 0)
                        {
                            _ResourceTargets.RemoveAt(num4);
                        }
                        habitat = null;
                    }
                    num++;
                }
            }
            return habitat;
        }

        public void EnsureStrategicResourceSupply()
        {
            ResourceList resourcesAlreadySupplied = DetermineResourcesEmpireSupplies();
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < _Galaxy.ResourceSystem.FuelResources.Count; i++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.FuelResources[i];
                if (resourceDefinition != null)
                {
                    int num = 2 + Colonies.Count / 3;
                    int num2 = _Galaxy.CountResourceSourcesForEmpire(this, resourceDefinition.ResourceID);
                    if (num2 < num)
                    {
                        ForceResourceSupply(new Resource(resourceDefinition.ResourceID), habitatList);
                    }
                }
            }
            for (int j = 0; j < _Galaxy.ResourceSystem.FuelResources.Count; j++)
            {
                ResourceDefinition resourceDefinition2 = _Galaxy.ResourceSystem.FuelResources[j];
                if (resourceDefinition2 != null && !resourceDefinition2.IsFuel)
                {
                    CheckResourceSupply(new Resource(resourceDefinition2.ResourceID), resourcesAlreadySupplied, habitatList);
                }
            }
            for (int k = 0; k < ConstructionShips.Count; k++)
            {
                BuiltObject builtObject = ConstructionShips[k];
                if (builtObject.SubRole == BuiltObjectSubRole.ConstructionShip && builtObject.IsShipYard && builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Build && builtObject.Mission.TargetHabitat != null)
                {
                    Habitat targetHabitat = builtObject.Mission.TargetHabitat;
                    while (habitatList.Contains(targetHabitat))
                    {
                        habitatList.Remove(targetHabitat);
                    }
                }
            }
            for (int l = 0; l < MiningStations.Count; l++)
            {
                BuiltObject builtObject2 = MiningStations[l];
                if ((builtObject2.SubRole == BuiltObjectSubRole.GasMiningStation || builtObject2.SubRole == BuiltObjectSubRole.MiningStation) && builtObject2.ParentHabitat != null)
                {
                    while (habitatList.Contains(builtObject2.ParentHabitat))
                    {
                        habitatList.Remove(builtObject2.ParentHabitat);
                    }
                }
            }
            int num3 = 0;
            for (int m = 0; m < ConstructionShips.Count; m++)
            {
                BuiltObject builtObject3 = ConstructionShips[m];
                if (builtObject3.SubRole == BuiltObjectSubRole.ConstructionShip && builtObject3.IsAutoControlled && builtObject3.IsShipYard && (builtObject3.Mission == null || builtObject3.Mission.Type == BuiltObjectMissionType.Undefined) && num3 < habitatList.Count)
                {
                    Design design = null;
                    HabitatResourceList habitatResourceList = new HabitatResourceList();
                    if (habitatList[num3].Resources != null)
                    {
                        habitatResourceList = habitatList[num3].Resources.Clone();
                    }
                    if (habitatResourceList.ContainsGroup(ResourceGroup.Gas))
                    {
                        design = Designs.FindNewestCanBuild(BuiltObjectSubRole.GasMiningStation);
                    }
                    if (habitatResourceList.ContainsGroup(ResourceGroup.Mineral))
                    {
                        design = Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                    }
                    if (design != null)
                    {
                        _Galaxy.SelectRelativeHabitatSurfacePoint(habitatList[num3], out var x, out var y);
                        builtObject3.AssignMission(BuiltObjectMissionType.Build, habitatList[num3], null, design, x, y, BuiltObjectMissionPriority.Normal);
                    }
                    num3++;
                }
            }
        }

        private void ForceResourceSupply(Resource resource, HabitatList resourceHabitats)
        {
            Habitat habitat = IdentifyStrategicResourceSupplySource(resource);
            if (habitat != null && !resourceHabitats.Contains(habitat))
            {
                resourceHabitats.Add(habitat);
            }
        }

        private void CheckResourceSupply(Resource resource, ResourceList resourcesAlreadySupplied, HabitatList resourceHabitats)
        {
            if (!resourcesAlreadySupplied.Contains(resource))
            {
                Habitat habitat = IdentifyStrategicResourceSupplySource(resource);
                if (habitat != null && !resourceHabitats.Contains(habitat))
                {
                    resourceHabitats.Add(habitat);
                }
            }
        }

        private Habitat IdentifyStrategicResourceSupplySource(Resource resource)
        {
            int num = 0;
            Habitat result = null;
            for (int i = 0; i < _ResourceTargets.Count; i++)
            {
                HabitatPrioritization habitatPrioritization = _ResourceTargets[i];
                if (habitatPrioritization != null && habitatPrioritization.Habitat != null && habitatPrioritization.Habitat.Resources != null)
                {
                    int num2 = habitatPrioritization.Habitat.Resources.IndexOf(resource.ResourceID, 0);
                    if (num2 >= 0 && habitatPrioritization.Priority > num)
                    {
                        num = habitatPrioritization.Priority;
                        result = habitatPrioritization.Habitat;
                        break;
                    }
                }
            }
            return result;
        }

        public void WarnOfIncomingEnemyFleetsAndPlanetDestroyers(Empire attackedEmpire)
        {
            if (ObtainDiplomaticRelation(attackedEmpire).Type != DiplomaticRelationType.War)
            {
                return;
            }
            if (PlanetDestroyers != null)
            {
                for (int i = 0; i < PlanetDestroyers.Count; i++)
                {
                    BuiltObject builtObject = PlanetDestroyers[i];
                    bool flag = false;
                    if (builtObject.Mission != null)
                    {
                        if (builtObject.Mission.Type == BuiltObjectMissionType.Attack)
                        {
                            flag = true;
                        }
                        else if (builtObject.Mission.Type == BuiltObjectMissionType.WaitAndAttack)
                        {
                            Command command = builtObject.Mission.FastPeekCurrentCommand();
                            if (command != null && command.Action == CommandAction.Attack)
                            {
                                flag = true;
                            }
                        }
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    Empire empire = BuiltObjectMission.ResolveMissionTargetEmpire(builtObject.Mission);
                    if (empire != attackedEmpire)
                    {
                        continue;
                    }
                    bool flag2 = false;
                    if (_Galaxy.GlobalVictoryConditions != null)
                    {
                        if (_Galaxy.GlobalVictoryConditions.DefendHabitat != null && _Galaxy.GlobalVictoryConditions.DefendHabitat == builtObject.Mission.Target)
                        {
                            flag2 = true;
                        }
                        else if (_Galaxy.GlobalVictoryConditions.TargetHabitat != null && _Galaxy.GlobalVictoryConditions.TargetHabitat == builtObject.Mission.Target)
                        {
                            flag2 = true;
                        }
                    }
                    int num = empire.IncomingEnemyFleetsAndPlanetDestroyers.IndexOf(builtObject);
                    if (num >= 0)
                    {
                        FleetAttack fleetAttack = empire.IncomingEnemyFleetsAndPlanetDestroyers[num];
                        if (fleetAttack.Target == builtObject.Mission.Target || builtObject.Mission.Target == null || empire.ObtainDiplomaticRelation(builtObject.Empire).Type != DiplomaticRelationType.War || !empire.IsObjectVisibleToThisEmpire(builtObject))
                        {
                            continue;
                        }
                        fleetAttack.Target = builtObject.Mission.Target;
                        fleetAttack.WarningDate = _Galaxy.CurrentStarDate;
                        string description = ResolveAttackWarningDescription(fleetAttack, empire);
                        empire.SendMessageToEmpire(empire, EmpireMessageType.IncomingEnemyFleet, builtObject, description);
                        if (!flag2)
                        {
                            continue;
                        }
                        for (int j = 0; j < empire.DiplomaticRelations.Count; j++)
                        {
                            DiplomaticRelation diplomaticRelation = empire.DiplomaticRelations[j];
                            if (diplomaticRelation.OtherEmpire != empire && diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact)
                            {
                                if (diplomaticRelation.OtherEmpire.IncomingEnemyFleetsAndPlanetDestroyers.IndexOf(builtObject) < 0)
                                {
                                    FleetAttack item = new FleetAttack(builtObject, builtObject.Mission.Target, _Galaxy.CurrentStarDate);
                                    diplomaticRelation.OtherEmpire.IncomingEnemyFleetsAndPlanetDestroyers.Add(item);
                                }
                                empire.SendMessageToEmpire(diplomaticRelation.OtherEmpire, EmpireMessageType.IncomingEnemyFleet, builtObject, description);
                            }
                        }
                    }
                    else
                    {
                        if (empire.ObtainDiplomaticRelation(builtObject.Empire).Type != DiplomaticRelationType.War || !empire.IsObjectVisibleToThisEmpire(builtObject))
                        {
                            continue;
                        }
                        FleetAttack fleetAttack2 = new FleetAttack(builtObject, builtObject.Mission.Target, _Galaxy.CurrentStarDate);
                        empire.IncomingEnemyFleetsAndPlanetDestroyers.Add(fleetAttack2);
                        string description2 = ResolveAttackWarningDescription(fleetAttack2, empire);
                        empire.SendMessageToEmpire(empire, EmpireMessageType.IncomingEnemyFleet, builtObject, description2);
                        if (!flag2)
                        {
                            continue;
                        }
                        for (int k = 0; k < empire.DiplomaticRelations.Count; k++)
                        {
                            DiplomaticRelation diplomaticRelation2 = empire.DiplomaticRelations[k];
                            if (diplomaticRelation2.OtherEmpire != empire && diplomaticRelation2.Type == DiplomaticRelationType.MutualDefensePact)
                            {
                                if (diplomaticRelation2.OtherEmpire.IncomingEnemyFleetsAndPlanetDestroyers.IndexOf(builtObject) < 0)
                                {
                                    FleetAttack item2 = new FleetAttack(builtObject, builtObject.Mission.Target, _Galaxy.CurrentStarDate);
                                    diplomaticRelation2.OtherEmpire.IncomingEnemyFleetsAndPlanetDestroyers.Add(item2);
                                }
                                empire.SendMessageToEmpire(diplomaticRelation2.OtherEmpire, EmpireMessageType.IncomingEnemyFleet, builtObject, description2);
                            }
                        }
                    }
                }
            }
            for (int l = 0; l < ShipGroups.Count; l++)
            {
                ShipGroup shipGroup = ShipGroups[l];
                if (shipGroup.Mission == null || shipGroup.LeadShip == null)
                {
                    continue;
                }
                bool flag3 = false;
                if (shipGroup.Mission.Type == BuiltObjectMissionType.Attack || shipGroup.Mission.Type == BuiltObjectMissionType.Bombard)
                {
                    flag3 = true;
                }
                else if (shipGroup.Mission.Type == BuiltObjectMissionType.WaitAndAttack || shipGroup.Mission.Type == BuiltObjectMissionType.WaitAndBombard)
                {
                    Command command2 = shipGroup.LeadShip.Mission.FastPeekCurrentCommand();
                    if (command2 != null && command2.Action == CommandAction.Attack)
                    {
                        flag3 = true;
                    }
                }
                if (!flag3)
                {
                    continue;
                }
                _ = shipGroup.LeadShip.CurrentSpeed;
                _ = (float)shipGroup.LeadShip.TopSpeed;
                Empire empire2 = BuiltObjectMission.ResolveMissionTargetEmpire(shipGroup.Mission);
                if (empire2 != attackedEmpire)
                {
                    continue;
                }
                int num2 = empire2.IncomingEnemyFleetsAndPlanetDestroyers.IndexOf(shipGroup);
                if (num2 >= 0)
                {
                    FleetAttack fleetAttack3 = empire2.IncomingEnemyFleetsAndPlanetDestroyers[num2];
                    if (fleetAttack3.Target != shipGroup.Mission.Target && shipGroup.Mission.Target != null && empire2.ObtainDiplomaticRelation(shipGroup.Empire).Type == DiplomaticRelationType.War && empire2.IsObjectVisibleToThisEmpire(shipGroup.LeadShip))
                    {
                        fleetAttack3.Target = shipGroup.Mission.Target;
                        fleetAttack3.WarningDate = _Galaxy.CurrentStarDate;
                        string description3 = ResolveAttackWarningDescription(fleetAttack3, empire2);
                        empire2.SendMessageToEmpire(empire2, EmpireMessageType.IncomingEnemyFleet, shipGroup, description3);
                    }
                }
                else if (empire2.ObtainDiplomaticRelation(shipGroup.Empire).Type == DiplomaticRelationType.War && empire2.IsObjectVisibleToThisEmpire(shipGroup.LeadShip))
                {
                    FleetAttack fleetAttack4 = new FleetAttack(shipGroup, shipGroup.Mission.Target, _Galaxy.CurrentStarDate);
                    empire2.IncomingEnemyFleetsAndPlanetDestroyers.Add(fleetAttack4);
                    string description4 = ResolveAttackWarningDescription(fleetAttack4, empire2);
                    empire2.SendMessageToEmpire(empire2, EmpireMessageType.IncomingEnemyFleet, shipGroup, description4);
                }
            }
        }

        private string ResolveAttackWarningDescription(FleetAttack fleetAttack, Empire targetEmpire)
        {
            string result = string.Empty;
            if (fleetAttack.Fleet != null && fleetAttack.Fleet.Mission != null)
            {
                string arg = string.Empty;
                if (fleetAttack.Fleet.Mission.TargetBuiltObject != null)
                {
                    arg = fleetAttack.Fleet.Mission.TargetBuiltObject.Name;
                }
                else if (fleetAttack.Fleet.Mission.TargetCreature != null)
                {
                    arg = fleetAttack.Fleet.Mission.TargetCreature.Name;
                }
                else if (fleetAttack.Fleet.Mission.TargetHabitat != null)
                {
                    Habitat targetHabitat = fleetAttack.Fleet.Mission.TargetHabitat;
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar(targetHabitat);
                    string text = Galaxy.ResolveSectorDescription(Galaxy.ResolveSector(targetHabitat.Xpos, targetHabitat.Ypos));
                    arg = string.Format(TextResolver.GetText("Location Planet"), Galaxy.ResolveDescription(targetHabitat.Type).ToLower(CultureInfo.InvariantCulture), Galaxy.ResolveDescription(targetHabitat.Category).ToLower(CultureInfo.InvariantCulture), targetHabitat.Name, habitat.Name, text);
                }
                else if (fleetAttack.Fleet.Mission.TargetShipGroup != null)
                {
                    arg = fleetAttack.Fleet.Mission.TargetShipGroup.Name;
                }
                result = string.Format(TextResolver.GetText("Incoming Enemy Fleet"), fleetAttack.Fleet.Name, fleetAttack.Fleet.Empire.Name, arg);
            }
            else if (fleetAttack.PlanetDestroyer != null && fleetAttack.PlanetDestroyer.Mission != null)
            {
                string arg2 = string.Empty;
                if (fleetAttack.PlanetDestroyer.Mission.TargetBuiltObject != null)
                {
                    arg2 = fleetAttack.PlanetDestroyer.Mission.TargetBuiltObject.Name;
                }
                else if (fleetAttack.PlanetDestroyer.Mission.TargetCreature != null)
                {
                    arg2 = fleetAttack.PlanetDestroyer.Mission.TargetCreature.Name;
                }
                else if (fleetAttack.PlanetDestroyer.Mission.TargetHabitat != null)
                {
                    Habitat targetHabitat2 = fleetAttack.PlanetDestroyer.Mission.TargetHabitat;
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(targetHabitat2);
                    string text2 = Galaxy.ResolveSectorDescription(Galaxy.ResolveSector(targetHabitat2.Xpos, targetHabitat2.Ypos));
                    arg2 = string.Format(TextResolver.GetText("Location Planet"), Galaxy.ResolveDescription(targetHabitat2.Type).ToLower(CultureInfo.InvariantCulture), Galaxy.ResolveDescription(targetHabitat2.Category).ToLower(CultureInfo.InvariantCulture), targetHabitat2.Name, habitat2.Name, text2);
                }
                else if (fleetAttack.PlanetDestroyer.Mission.TargetShipGroup != null)
                {
                    arg2 = fleetAttack.PlanetDestroyer.Mission.TargetShipGroup.Name;
                }
                result = string.Format(TextResolver.GetText("Incoming Enemy Planet Destroyer"), fleetAttack.PlanetDestroyer.Name, fleetAttack.PlanetDestroyer.Empire.Name, arg2);
            }
            return result;
        }

        public BuiltObject PurchaseNewBuiltObject(Design design, Habitat constructionYard, bool isStateOwned, bool isAutoControlled)
        {
            return PurchaseNewBuiltObject(design, constructionYard, (int)constructionYard.Xpos, (int)constructionYard.Ypos, isStateOwned, isAutoControlled);
        }

        public BuiltObject PurchaseNewBuiltObject(Design design, Habitat constructionYard, int x, int y, bool isStateOwned, bool isAutoControlled)
        {
            BuiltObject builtObject = null;
            CargoList resourcesToOrder = new CargoList();
            double num = design.CalculateCurrentPurchasePrice(_Galaxy);
            bool flag = false;
            if (isStateOwned)
            {
                if (num <= StateMoney)
                {
                    flag = true;
                }
            }
            else if (num <= GetPrivateFunds())
            {
                flag = true;
            }
            if (flag)
            {
                design.BuildCount++;
                builtObject = ((design.SubRole != BuiltObjectSubRole.SmallSpacePort && design.SubRole != BuiltObjectSubRole.MediumSpacePort && design.SubRole != BuiltObjectSubRole.LargeSpacePort) ? new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design, constructionYard), _Galaxy) : new BuiltObject(design, constructionYard.Name + " " + TextResolver.GetText("Space Port"), _Galaxy));
                builtObject.IsAutoControlled = isAutoControlled;
                builtObject.PurchasePrice = num;
                if (constructionYard.ConstructionQueue != null && constructionYard.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                {
                    double x2 = 0.0;
                    double y2 = 0.0;
                    if (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort || builtObject.SubRole == BuiltObjectSubRole.EnergyResearchStation || builtObject.SubRole == BuiltObjectSubRole.WeaponsResearchStation || builtObject.SubRole == BuiltObjectSubRole.HighTechResearchStation || builtObject.SubRole == BuiltObjectSubRole.MonitoringStation || builtObject.SubRole == BuiltObjectSubRole.DefensiveBase || builtObject.SubRole == BuiltObjectSubRole.GenericBase)
                    {
                        builtObject.ParentHabitat = constructionYard;
                        if (Math.Abs((double)x - constructionYard.Xpos) < 3.0 && Math.Abs((double)y - constructionYard.Ypos) < 3.0)
                        {
                            _Galaxy.SelectRelativeHabitatSurfacePoint(constructionYard, out x2, out y2);
                            switch (builtObject.SubRole)
                            {
                                case BuiltObjectSubRole.SmallSpacePort:
                                case BuiltObjectSubRole.MediumSpacePort:
                                case BuiltObjectSubRole.LargeSpacePort:
                                    {
                                        double range = (double)(constructionYard.Diameter / 6) + 15.0;
                                        _Galaxy.SelectRelativePoint(range, out x2, out y2);
                                        break;
                                    }
                                default:
                                    DetermineOrbitalBaseLocation(constructionYard, out x2, out y2);
                                    break;
                            }
                        }
                        else
                        {
                            x2 = (double)x - constructionYard.Xpos;
                            y2 = (double)y - constructionYard.Ypos;
                            double num2 = (double)(constructionYard.Diameter / 2) + 250.0;
                            if (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort)
                            {
                                num2 = (double)(constructionYard.Diameter / 8) + 10.0;
                            }
                            double num3 = _Galaxy.CalculateDistance(x2, y2, 0.0, 0.0);
                            if (num3 > num2)
                            {
                                double num4 = _Galaxy.CalculateAngleFromCoords(x2, y2, 0.0, 0.0, num3);
                                x2 = Math.Cos(num4) * num2;
                                y2 = Math.Sin(num4) * num2;
                            }
                        }
                        builtObject.ParentOffsetX = x2;
                        builtObject.ParentOffsetY = y2;
                        builtObject.Heading = _Galaxy.SelectRandomHeading();
                        builtObject.TargetHeading = builtObject.Heading;
                        builtObject.NearestSystemStar = Galaxy.DetermineHabitatSystemStar(constructionYard);
                    }
                    AddBuiltObjectToGalaxy(builtObject, constructionYard, offsetLocationFromParent: false, isStateOwned, (int)x2, (int)y2);
                    builtObject.BuiltAt = constructionYard;
                    ProcureConstructionComponents(builtObject, constructionYard, out resourcesToOrder);
                    if (PirateEmpireBaseHabitat != null)
                    {
                        StateMoney -= num;
                        PirateEconomy.PerformExpense(num, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                    }
                    else if (isStateOwned)
                    {
                        StateMoney -= num;
                        PirateEconomy.PerformExpense(num, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                    }
                    else
                    {
                        PerformPrivateTransaction(0.0 - num);
                    }
                }
                else
                {
                    design.BuildCount--;
                    builtObject = null;
                }
            }
            foreach (Cargo item in resourcesToOrder)
            {
                CreateOrder(constructionYard, item.CommodityResource, item.Amount, isState: false, OrderType.ConstructionShortage);
            }
            return builtObject;
        }

        public BuiltObject PurchaseNewBuiltObject(Design design, BuiltObject constructionYard, bool isStateOwned, bool isAutoControlled)
        {
            BuiltObject builtObject = null;
            CargoList resourcesToOrder = new CargoList();
            if (design.SubRole == BuiltObjectSubRole.SmallSpacePort || design.SubRole == BuiltObjectSubRole.MediumSpacePort || design.SubRole == BuiltObjectSubRole.LargeSpacePort)
            {
                return null;
            }
            double num = design.CalculateCurrentPurchasePrice(_Galaxy);
            bool flag = false;
            if (isStateOwned)
            {
                if (num <= StateMoney)
                {
                    flag = true;
                }
            }
            else if (num <= GetPrivateFunds())
            {
                flag = true;
            }
            if (flag)
            {
                design.BuildCount++;
                if (design.SubRole == BuiltObjectSubRole.MiningStation)
                {
                    builtObject = new BuiltObject(design, constructionYard.Name + " " + TextResolver.GetText("Mining Station"), _Galaxy);
                }
                else if (design.SubRole == BuiltObjectSubRole.GasMiningStation)
                {
                    builtObject = new BuiltObject(design, constructionYard.Name + " " + TextResolver.GetText("Gas Mining Station"), _Galaxy);
                }
                else
                {
                    builtObject = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design), _Galaxy);
                    if (constructionYard.ParentHabitat != null)
                    {
                        builtObject.Name = _Galaxy.GenerateBuiltObjectName(design, constructionYard.ParentHabitat);
                    }
                }
                builtObject.IsAutoControlled = isAutoControlled;
                builtObject.PurchasePrice = num;
                if (constructionYard.ConstructionQueue != null && constructionYard.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                {
                    if (builtObject.SubRole == BuiltObjectSubRole.MiningStation || builtObject.SubRole == BuiltObjectSubRole.GasMiningStation)
                    {
                        builtObject.ParentHabitat = constructionYard.ParentHabitat;
                        _Galaxy.SelectRelativeHabitatSurfacePoint(constructionYard.ParentHabitat, out var x, out var y);
                        builtObject.ParentOffsetX = x;
                        builtObject.ParentOffsetY = y;
                        builtObject.Heading = _Galaxy.SelectRandomHeading();
                        builtObject.TargetHeading = builtObject.Heading;
                        builtObject.NearestSystemStar = Galaxy.DetermineHabitatSystemStar(constructionYard.ParentHabitat);
                    }
                    AddBuiltObjectToGalaxy(builtObject, constructionYard, offsetLocationFromParent: false, isStateOwned);
                    builtObject.BuiltAt = constructionYard;
                    ProcureConstructionComponents(builtObject, constructionYard, orderPreciseResourceAmounts: true, out resourcesToOrder);
                    if (PirateEmpireBaseHabitat != null)
                    {
                        StateMoney -= num;
                        PirateEconomy.PerformExpense(num, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                    }
                    else if (isStateOwned)
                    {
                        StateMoney -= num;
                        PirateEconomy.PerformExpense(num, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                    }
                    else
                    {
                        PerformPrivateTransaction(0.0 - num);
                    }
                }
                else
                {
                    design.BuildCount--;
                    builtObject = null;
                }
            }
            foreach (Cargo item in resourcesToOrder)
            {
                CreateOrder(constructionYard, item.CommodityResource, item.Amount, isState: false, OrderType.ConstructionShortage);
            }
            return builtObject;
        }

        public void AddResortIncome(double amount)
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate % (Galaxy.RealSecondsInGalacticYear * 1000);
            long num2 = currentStarDate - num;
            if (_LastResortIncomeAddDate < num2)
            {
                _ThisYearsResortIncome = 0.0;
            }
            _ThisYearsResortIncome += amount;
            _LastResortIncomeAddDate = currentStarDate;
        }

        public void CheckAgeVariableIncome()
        {
            _UseAveragedVariableIncome = true;
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate % (Galaxy.RealSecondsInGalacticYear * 1000);
            long num2 = currentStarDate - num;
            if (_LastVariableIncomeUpdate < num2)
            {
                AgeVariableIncomeValues(ThisYearsSpacePortIncome + ThisYearsResortIncome);
                ResetYearlyIncome();
                _LastVariableIncomeUpdate = num2;
            }
        }

        private void ResetYearlyIncome()
        {
            for (int i = 0; i < SpacePorts.Count; i++)
            {
                SpacePorts[i].CurrentYearsIncome = 0.0;
            }
            for (int j = 0; j < MiningStations.Count; j++)
            {
                MiningStations[j].CurrentYearsIncome = 0.0;
            }
            for (int k = 0; k < ResortBases.Count; k++)
            {
                ResortBases[k].CurrentYearsIncome = 0.0;
            }
        }

        private void AgeVariableIncomeValues(double thisYearsVariableIncome)
        {
            if (_VariableIncome == null)
            {
                _VariableIncome = new List<double>();
            }
            int num = 3;
            _VariableIncome.Insert(0, thisYearsVariableIncome);
            if (_VariableIncome.Count > num)
            {
                _VariableIncome.RemoveAt(_VariableIncome.Count - 1);
            }
        }

        public double ObtainAveragedVariableIncome()
        {
            double num = 0.0;
            double num2 = 0.0;
            double num3 = 0.7;
            for (int i = 0; i < _VariableIncome.Count; i++)
            {
                num += _VariableIncome[i] * num3;
                num2 += num3;
                num3 *= 0.7;
            }
            return num / num2;
        }

        public void PurchaseStateFuel(double fuelCost)
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate % (Galaxy.RealSecondsInGalacticYear * 1000);
            long num2 = currentStarDate - num;
            if (_DateOfLastStateFuelCost < num2)
            {
                _ThisYearsStateFuelCosts = 0.0;
            }
            _DateOfLastStateFuelCost = currentStarDate;
            _ThisYearsStateFuelCosts += fuelCost;
        }

        public void PurchasePrivateFuel(double fuelCost)
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate % (Galaxy.RealSecondsInGalacticYear * 1000);
            long num2 = currentStarDate - num;
            if (_DateOfLastPrivateFuelCost < num2)
            {
                _ThisYearsPrivateFuelCosts = 0.0;
            }
            _DateOfLastPrivateFuelCost = currentStarDate;
            _ThisYearsPrivateFuelCosts += fuelCost;
        }

        public bool CheckShouldAttemptColonization(Habitat habitat)
        {
            bool result = true;
            EmpireSystemSummary dominantEmpire = _Galaxy.Systems[habitat.SystemIndex].DominantEmpire;
            if (dominantEmpire != null && dominantEmpire.Empire != null && dominantEmpire.Empire != this && dominantEmpire.TotalStrategicValue > 100000 && (habitat.Population == null || habitat.Population.TotalAmount < 20000000))
            {
                result = false;
            }
            if (!DetermineColonizeLowQualityHabitat(habitat))
            {
                result = false;
            }
            int num = _Galaxy.CheckColonizationLikeliness(habitat, DominantRace);
            if (num < -3)
            {
                result = false;
            }
            return result;
        }

        public ForceStructureProjectionList RefactorForceStructureProjectionsToCosts(ForceStructureProjectionList projections)
        {
            return RefactorForceStructureProjectionsToCosts(projections, includeCashflowCheck: true);
        }

        public ForceStructureProjectionList RefactorForceStructureProjectionsToCosts(ForceStructureProjectionList projections, bool includeCashflowCheck)
        {
            double availableRevenue = CalculateAccurateAnnualCashflow();
            return RefactorForceStructureProjectionsToCosts(projections, availableRevenue, 0.0, 0.0, includeCashflowCheck);
        }

        public ForceStructureProjectionList RefactorForceStructureProjectionsToCosts(ForceStructureProjectionList projections, bool includeCashflowCheck, out double totalSupportCosts, out double totalPurchaseCosts, bool randomizedOrder)
        {
            double availableRevenue = CalculateAccurateAnnualCashflow();
            return RefactorForceStructureProjectionsToCosts(projections, availableRevenue, 0.0, 0.0, includeCashflowCheck, out totalSupportCosts, out totalPurchaseCosts, randomizedOrder);
        }

        public ForceStructureProjectionList RefactorForceStructureProjectionsToCosts(ForceStructureProjectionList projections, double availableRevenue, double otherSupportCosts, double otherPurchaseCosts, bool includeCashflowCheck)
        {
            double totalSupportCosts = 0.0;
            double totalPurchaseCosts = 0.0;
            return RefactorForceStructureProjectionsToCosts(projections, availableRevenue, otherSupportCosts, otherPurchaseCosts, includeCashflowCheck, out totalSupportCosts, out totalPurchaseCosts, randomizedOrder: true);
        }

        public ForceStructureProjectionList RefactorForceStructureProjectionsToCosts(ForceStructureProjectionList projections, double availableRevenue, double otherSupportCosts, double otherPurchaseCosts, bool includeCashflowCheck, out double totalSupportCosts, out double totalPurchaseCosts, bool randomizedOrder)
        {
            ForceStructureProjectionList forceStructureProjectionList = new ForceStructureProjectionList();
            totalSupportCosts = otherSupportCosts;
            totalPurchaseCosts = otherPurchaseCosts;
            ForceStructureProjectionList forceStructureProjectionList2 = new ForceStructureProjectionList();
            forceStructureProjectionList2.AddRange(projections);
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(forceStructureProjectionList2.Count > 0, 100, ref iterationCount))
            {
                ForceStructureProjection forceStructureProjection = null;
                forceStructureProjection = ((!randomizedOrder) ? forceStructureProjectionList2[0] : forceStructureProjectionList2[Galaxy.Rnd.Next(0, forceStructureProjectionList2.Count)]);
                if (forceStructureProjection != null)
                {
                    Design design = Designs.FindNewestCanBuild(forceStructureProjection.SubRole);
                    if (design != null)
                    {
                        int num = 0;
                        if (forceStructureProjection.Amount > 0)
                        {
                            double num2 = design.CalculateCurrentPurchasePrice(_Galaxy);
                            double num3 = CalculateSupportCost(design);
                            for (int i = 0; i < forceStructureProjection.Amount; i++)
                            {
                                if (!(totalPurchaseCosts + num2 <= StateMoney))
                                {
                                    break;
                                }
                                if (includeCashflowCheck && !(availableRevenue - totalSupportCosts >= num3))
                                {
                                    break;
                                }
                                totalPurchaseCosts += num2;
                                totalSupportCosts += num3;
                                num++;
                            }
                        }
                        if (num > 0)
                        {
                            ForceStructureProjection item = new ForceStructureProjection(forceStructureProjection.SubRole, num, forceStructureProjection.ProjectionDate);
                            forceStructureProjectionList.Add(item);
                        }
                    }
                }
                forceStructureProjectionList2.Remove(forceStructureProjection);
            }
            return forceStructureProjectionList;
        }

        private void DirectConstruction()
        {
            int refusalCount = 0;
            List<CargoList> list = new List<CargoList>();
            BuiltObjectList builtObjectList = new BuiltObjectList();
            List<CargoList> list2 = new List<CargoList>();
            HabitatList habitatList = new HabitatList();
            CargoList resourcesToOrder = null;
            int num = 0;
            int num2 = 0;
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            builtObjectList2.AddRange(BuiltObjects);
            builtObjectList2.AddRange(PrivateBuiltObjects);
            for (int i = 0; i < builtObjectList2.Count; i++)
            {
                BuiltObject builtObject = builtObjectList2[i];
                if (builtObject.Role == BuiltObjectRole.Military)
                {
                    if (builtObject.UnbuiltOrDamagedComponentCount == 0)
                    {
                        num2++;
                    }
                }
                else if (builtObject.Role == BuiltObjectRole.Freight && builtObject.UnbuiltOrDamagedComponentCount == 0)
                {
                    num++;
                }
            }
            int num3 = 0;
            if (_PrivateForceStructureProjections != null)
            {
                ForceStructureProjection bySubRole = _PrivateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.SmallFreighter);
                ForceStructureProjection bySubRole2 = _PrivateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.MediumFreighter);
                ForceStructureProjection bySubRole3 = _PrivateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.LargeFreighter);
                if (bySubRole != null)
                {
                    num3 += bySubRole.Amount;
                }
                if (bySubRole2 != null)
                {
                    num3 += bySubRole2.Amount;
                }
                if (bySubRole3 != null)
                {
                    num3 += bySubRole3.Amount;
                }
            }
            int num4 = 0;
            if (_StateForceStructureProjections != null)
            {
                ForceStructureProjection bySubRole4 = _StateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.Escort);
                ForceStructureProjection bySubRole5 = _StateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.Frigate);
                ForceStructureProjection bySubRole6 = _StateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.Destroyer);
                ForceStructureProjection bySubRole7 = _StateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.Cruiser);
                ForceStructureProjection bySubRole8 = _StateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.CapitalShip);
                ForceStructureProjection bySubRole9 = _StateForceStructureProjections.GetBySubRole(BuiltObjectSubRole.Carrier);
                if (bySubRole4 != null)
                {
                    num4 += bySubRole4.Amount;
                }
                if (bySubRole5 != null)
                {
                    num4 += bySubRole5.Amount;
                }
                if (bySubRole6 != null)
                {
                    num4 += bySubRole6.Amount;
                }
                if (bySubRole7 != null)
                {
                    num4 += bySubRole7.Amount;
                }
                if (bySubRole8 != null)
                {
                    num4 += bySubRole8.Amount;
                }
                if (bySubRole9 != null)
                {
                    num4 += bySubRole9.Amount;
                }
            }
            int num5 = (int)((double)num3 * 0.4);
            int num6 = (int)((double)num4 * 0.25);
            bool flag = false;
            if (num >= num5 && num2 >= num6)
            {
                flag = true;
            }
            if (DominantRace != null && !DominantRace.Expanding)
            {
                flag = false;
            }
            _ = ThisYearsSpacePortIncome;
            CalculateAccurateAnnualIncome();
            double annualSupportCosts = 0.0;
            ForceStructureProjectionList forceStructureProjectionList = CurrentStateForceStructure(out annualSupportCosts);
            double num7 = CalculateAccurateAnnualCashflow();
            ForceStructureProjectionList forceStructureProjectionList2 = _StateForceStructureProjections.Diff(forceStructureProjectionList);
            forceStructureProjectionList2.Sort();
            double num8 = EstimateForceStructureSupportCost(forceStructureProjectionList2);
            double num9 = annualSupportCosts + num8;
            double num10 = StateMoney / num9;
            double num11 = 5.0;
            if (CheckAtWar())
            {
                num11 = 2.0;
            }
            if (num10 > num11)
            {
                num7 = Math.Max(num7, num8);
            }
            double num12 = 0.0;
            double num13 = 0.0;
            if (_ControlStateConstruction != 0)
            {
                int num14 = 0;
                for (int j = 0; j < BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = BuiltObjects[j];
                    if (builtObject2.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject2.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject2.SubRole == BuiltObjectSubRole.LargeSpacePort)
                    {
                        num14++;
                    }
                }
                int val = 1 + (int)((double)Colonies.Count / 3.0);
                int val2 = 1 + (int)(TotalPopulation / 5000000000L);
                val = Math.Min(val, val2);
                int newSpacePortAmount = val - num14;
                HabitatList habitatList2 = DetermineNewSpacePortLocations(Colonies, newSpacePortAmount, excludeColoniesWithEnemiesPresent: true);
                long num15 = (long)Policy.ConstructionSpaceportLargeColonyPopulationThreshold * 1000000L;
                long num16 = (long)Policy.ConstructionSpaceportMediumColonyPopulationThreshold * 1000000L;
                long num17 = (long)Policy.ConstructionSpaceportSmallColonyPopulationThreshold * 1000000L;
                foreach (Habitat item in habitatList2)
                {
                    if (!CheckSafeToBuildAtLocation(item))
                    {
                        continue;
                    }
                    Design design = null;
                    Design design2 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.SmallSpacePort);
                    Design design3 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
                    Design design4 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.LargeSpacePort);
                    if (design4 != null && item.Population.TotalAmount > num15)
                    {
                        design = design4;
                    }
                    else if (design3 != null && item.Population.TotalAmount > num16)
                    {
                        design = design3;
                    }
                    else if (design2 != null && item.Population.TotalAmount > num17)
                    {
                        design = design2;
                    }
                    if (design == null)
                    {
                        continue;
                    }
                    double num18 = design.CalculateCurrentPurchasePrice(_Galaxy);
                    double num19 = design.CalculateMaintenanceCosts(_Galaxy, this);
                    if (num13 + num19 > num7)
                    {
                        if (design.SubRole == BuiltObjectSubRole.LargeSpacePort)
                        {
                            design = _Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
                        }
                        else if (design.SubRole == BuiltObjectSubRole.MediumSpacePort)
                        {
                            design = _Designs.FindNewestCanBuild(BuiltObjectSubRole.SmallSpacePort);
                        }
                        if (design != null)
                        {
                            num18 = design.CalculateCurrentPurchasePrice(_Galaxy);
                            num19 = design.CalculateMaintenanceCosts(_Galaxy, this);
                        }
                    }
                    if (design == null || !(num13 + num19 <= num7) || !(num12 + num18 <= StateMoney))
                    {
                        continue;
                    }
                    design.BuildCount++;
                    BuiltObject builtObject3 = new BuiltObject(design, item.Name + " " + TextResolver.GetText("Space Port"), _Galaxy);
                    builtObject3.PurchasePrice = num18;
                    if (CheckTaskAuthorized(_ControlStateConstruction, ref refusalCount, GenerateAutomationMessageConstruction(builtObject3, item, num18), item, AdvisorMessageType.BuildOneOff, design, null))
                    {
                        if (item.ConstructionQueue != null && item.ConstructionQueue.AddBuiltObjectToConstruct(builtObject3))
                        {
                            builtObject3.ParentHabitat = item;
                            double range = (double)(item.Diameter / 6) + 15.0;
                            _Galaxy.SelectRelativePoint(range, out var x, out var y);
                            builtObject3.ParentOffsetX = x;
                            builtObject3.ParentOffsetY = y;
                            builtObject3.Heading = _Galaxy.SelectRandomHeading();
                            builtObject3.TargetHeading = builtObject3.Heading;
                            builtObject3.NearestSystemStar = Galaxy.DetermineHabitatSystemStar(item);
                            AddBuiltObjectToGalaxy(builtObject3, item, offsetLocationFromParent: false, isStateOwned: true);
                            builtObject3.BuiltAt = item;
                            num12 += num18;
                            num13 += num19;
                            ProcureConstructionComponents(builtObject3, item, out resourcesToOrder);
                            list2.Add(resourcesToOrder);
                            habitatList.Add(item);
                        }
                        else
                        {
                            design.BuildCount--;
                        }
                    }
                    else
                    {
                        design.BuildCount--;
                    }
                }
            }
            Design researchStationDesignToBuild = null;
            Habitat colonyToBuildAt = null;
            if (CheckBuildoutResearchCapacityAtColonies(out researchStationDesignToBuild, out colonyToBuildAt) && researchStationDesignToBuild != null && colonyToBuildAt != null)
            {
                double num20 = researchStationDesignToBuild.CalculateCurrentPurchasePrice(_Galaxy);
                double num21 = researchStationDesignToBuild.CalculateMaintenanceCosts(_Galaxy, this);
                if (num13 + num21 <= num7 && num12 + num20 <= StateMoney && CheckSafeToBuildAtLocation(colonyToBuildAt))
                {
                    researchStationDesignToBuild.BuildCount++;
                    string name = _Galaxy.SelectUniqueBuiltObjectName(researchStationDesignToBuild, colonyToBuildAt);
                    BuiltObject builtObject4 = new BuiltObject(researchStationDesignToBuild, name, _Galaxy);
                    builtObject4.PurchasePrice = num20;
                    if (CheckTaskAuthorized(_ControlStateConstruction, ref refusalCount, GenerateAutomationMessageConstruction(builtObject4, colonyToBuildAt, num20), colonyToBuildAt, AdvisorMessageType.BuildOneOff, researchStationDesignToBuild, null))
                    {
                        if (colonyToBuildAt.ConstructionQueue != null && colonyToBuildAt.ConstructionQueue.AddBuiltObjectToConstruct(builtObject4))
                        {
                            builtObject4.ParentHabitat = colonyToBuildAt;
                            DetermineOrbitalBaseLocation(colonyToBuildAt, out var offsetX, out var offsetY);
                            builtObject4.ParentOffsetX = offsetX;
                            builtObject4.ParentOffsetY = offsetY;
                            builtObject4.Heading = _Galaxy.SelectRandomHeading();
                            builtObject4.TargetHeading = builtObject4.Heading;
                            builtObject4.NearestSystemStar = Galaxy.DetermineHabitatSystemStar(colonyToBuildAt);
                            AddBuiltObjectToGalaxy(builtObject4, colonyToBuildAt, offsetLocationFromParent: false, isStateOwned: true, (int)offsetX, (int)offsetY);
                            builtObject4.BuiltAt = colonyToBuildAt;
                            num12 += num20;
                            num13 += num21;
                            ProcureConstructionComponents(builtObject4, colonyToBuildAt, out resourcesToOrder);
                            list2.Add(resourcesToOrder);
                            habitatList.Add(colonyToBuildAt);
                        }
                        else
                        {
                            researchStationDesignToBuild.BuildCount--;
                        }
                    }
                    else
                    {
                        researchStationDesignToBuild.BuildCount--;
                    }
                }
            }
            if (flag && _ControlColonization != 0)
            {
                HabitatList habitatList3 = DetermineHabitatsBeingColonized();
                _ColonizationTargets.Sort();
                _ColonizationTargets.Reverse();
                List<HabitatType> list3 = ColonizableHabitatTypesForEmpire(this);
                for (int k = 0; k < _ColonizationTargets.Count; k++)
                {
                    HabitatPrioritization habitatPrioritization = _ColonizationTargets[k];
                    if (!CheckShouldAttemptColonization(habitatPrioritization.Habitat) || habitatPrioritization.AssignedShip != null || habitatList3.Contains(habitatPrioritization.Habitat) || (habitatPrioritization.Habitat.Empire != null && habitatPrioritization.Habitat.Empire != _Galaxy.IndependentEmpire))
                    {
                        continue;
                    }
                    bool flag2 = false;
                    for (int l = 0; l < BuiltObjects.Count; l++)
                    {
                        BuiltObject builtObject5 = BuiltObjects[l];
                        if (builtObject5.Role == BuiltObjectRole.Colony && (builtObject5.Mission == null || builtObject5.Mission.Type == BuiltObjectMissionType.Undefined))
                        {
                            int newPopulationAmount = 0;
                            if (CanBuiltObjectColonizeHabitat(builtObject5, habitatPrioritization.Habitat, out newPopulationAmount) && habitatPrioritization.Priority >= Galaxy.HabitatColonizationThreshhold && builtObject5.WithinFuelRange(habitatPrioritization.Habitat.Xpos, habitatPrioritization.Habitat.Ypos, 0.0) && CheckTaskAuthorized(_ControlColonization, ref refusalCount, GenerateAutomationMessageColonization(habitatPrioritization.Habitat, builtObject5, null), habitatPrioritization.Habitat, AdvisorMessageType.Colonization, builtObject5, null))
                            {
                                habitatPrioritization.AssignedShip = builtObject5;
                                builtObject5.AssignMission(BuiltObjectMissionType.Colonize, habitatPrioritization.Habitat, null, BuiltObjectMissionPriority.Normal);
                                flag2 = true;
                                break;
                            }
                        }
                    }
                    if (flag2)
                    {
                        continue;
                    }
                    Design design5 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
                    if (design5 == null)
                    {
                        continue;
                    }
                    bool flag3 = CanDesignColonizeHabitat(design5, habitatPrioritization.Habitat);
                    if ((!flag3 && !list3.Contains(habitatPrioritization.Habitat.Type)) || habitatPrioritization.Priority < Galaxy.HabitatColonizationThreshhold)
                    {
                        continue;
                    }
                    double num22 = design5.CalculateCurrentPurchasePrice(_Galaxy);
                    if (!(num12 + num22 <= StateMoney))
                    {
                        continue;
                    }
                    design5.BuildCount++;
                    BuiltObject builtObject6 = new BuiltObject(design5, _Galaxy.GenerateBuiltObjectName(design5), _Galaxy);
                    builtObject6.PurchasePrice = num22;
                    Habitat habitat = null;
                    double shortestWaitQueueTime;
                    if (flag3)
                    {
                        habitat = Colonies.FindShortestConstructionWaitQueue(builtObject6, out shortestWaitQueueTime, allowLongWaitQueues: false, allowUnsafeLocations: false);
                    }
                    else
                    {
                        HabitatList habitatList4 = new HabitatList();
                        foreach (Habitat colony in Colonies)
                        {
                            Race dominantRace = colony.Population.DominantRace;
                            if (dominantRace != null && dominantRace.NativeHabitatType == habitatPrioritization.Habitat.Type)
                            {
                                habitatList4.Add(colony);
                            }
                        }
                        habitat = habitatList4.FindShortestConstructionWaitQueue(builtObject6, out shortestWaitQueueTime, allowLongWaitQueues: false, allowUnsafeLocations: false);
                    }
                    double num23 = shortestWaitQueueTime / (double)Galaxy.RealSecondsInGalacticYear;
                    if (habitat != null && num23 < Galaxy.MaximumConstructionQueueWaitTimeYears)
                    {
                        double num24 = _Galaxy.CalculateDistance(habitatPrioritization.Habitat.Xpos, habitatPrioritization.Habitat.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num24 <= design5.MaximumRange())
                        {
                            if (CheckTaskAuthorized(_ControlColonization, ref refusalCount, GenerateAutomationMessageColonization(habitatPrioritization.Habitat, null, habitat), habitatPrioritization.Habitat, AdvisorMessageType.Colonization, habitat, null))
                            {
                                if (habitat.ConstructionQueue != null && habitat.ConstructionQueue.AddBuiltObjectToConstruct(builtObject6))
                                {
                                    builtObject6.Name = _Galaxy.GenerateBuiltObjectName(design5, habitat);
                                    habitatPrioritization.AssignedShip = builtObject6;
                                    AddBuiltObjectToGalaxy(builtObject6, habitat, offsetLocationFromParent: false, isStateOwned: true);
                                    num12 += num22;
                                    builtObject6.AssignMission(BuiltObjectMissionType.Colonize, habitatPrioritization.Habitat, null, BuiltObjectMissionPriority.Normal);
                                    builtObject6.BuiltAt = habitat;
                                    ProcureConstructionComponents(builtObject6, habitat, out resourcesToOrder);
                                    list2.Add(resourcesToOrder);
                                    habitatList.Add(habitat);
                                }
                                else
                                {
                                    design5.BuildCount--;
                                }
                            }
                            else
                            {
                                design5.BuildCount--;
                            }
                        }
                        else
                        {
                            design5.BuildCount--;
                        }
                    }
                    else
                    {
                        design5.BuildCount--;
                    }
                }
            }
            if (_ControlStateConstruction != 0)
            {
                ForceStructureProjectionList forceStructureProjectionList3 = RefactorForceStructureProjectionsToCosts(forceStructureProjectionList2, num7, num13, num12, includeCashflowCheck: true);
                double num25 = 0.0;
                foreach (ForceStructureProjection item2 in forceStructureProjectionList3)
                {
                    Design design6 = Designs.FindNewestCanBuild(item2.SubRole, this, null, includePlanetDestroyers: false);
                    if (design6 != null && ((ConstructionYards != null && ConstructionYards.Count > 0) || design6.SubRole == BuiltObjectSubRole.ColonyShip || design6.SubRole == BuiltObjectSubRole.ConstructionShip || design6.SubRole == BuiltObjectSubRole.ResupplyShip))
                    {
                        double num26 = design6.CalculateCurrentPurchasePrice(_Galaxy);
                        num25 += num26 * (double)item2.Amount;
                    }
                }
                if (forceStructureProjectionList3.Count > 0 && forceStructureProjectionList3.TotalAmount > 0)
                {
                    if (_ControlStateConstruction == AutomationLevel.SemiAutomated)
                    {
                        EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.AdvisorSuggestion, null);
                        empireMessage.AdvisorMessageType = AdvisorMessageType.BuildOrder;
                        empireMessage.Description = string.Format(TextResolver.GetText("Build new ships for X credits"), num25.ToString("###,###,###,##0"));
                        empireMessage.StarDate = _Galaxy.CurrentStarDate;
                        SendMessageToEmpire(empireMessage, this);
                    }
                    else if (_ControlStateConstruction == AutomationLevel.FullyAutomated)
                    {
                        foreach (ForceStructureProjection item3 in forceStructureProjectionList3)
                        {
                            Design design7 = Designs.FindNewestCanBuild(item3.SubRole, this, null, includePlanetDestroyers: false);
                            if (design7 == null || item3.Amount <= 0)
                            {
                                continue;
                            }
                            for (int m = 0; m < item3.Amount; m++)
                            {
                                double num27 = design7.CalculateCurrentPurchasePrice(_Galaxy);
                                double num28 = design7.CalculateMaintenanceCosts(_Galaxy, this);
                                if (!(num13 + num28 <= num7) || !(num12 + num27 <= StateMoney))
                                {
                                    continue;
                                }
                                design7.BuildCount++;
                                BuiltObject builtObject7 = new BuiltObject(design7, _Galaxy.GenerateBuiltObjectName(design7), _Galaxy);
                                builtObject7.PurchasePrice = num27;
                                double shortestWaitQueueTime2;
                                if (builtObject7.SubRole == BuiltObjectSubRole.ConstructionShip || builtObject7.SubRole == BuiltObjectSubRole.ResupplyShip)
                                {
                                    Habitat habitat2 = Colonies.FindShortestConstructionWaitQueue(builtObject7, out shortestWaitQueueTime2);
                                    double num29 = shortestWaitQueueTime2 / (double)Galaxy.RealSecondsInGalacticYear;
                                    if (habitat2 != null && num29 < Galaxy.MaximumConstructionQueueWaitTimeYears)
                                    {
                                        if (habitat2.ConstructionQueue != null && habitat2.ConstructionQueue.AddBuiltObjectToConstruct(builtObject7))
                                        {
                                            num12 += num27;
                                            num13 += num28;
                                            builtObject7.Name = _Galaxy.GenerateBuiltObjectName(design7, habitat2);
                                            AddBuiltObjectToGalaxy(builtObject7, habitat2, offsetLocationFromParent: false, isStateOwned: true);
                                            builtObject7.BuiltAt = habitat2;
                                            builtObject7.IsAutoControlled = NewBuiltObjectShouldBeAutomated(builtObject7.SubRole);
                                            ProcureConstructionComponents(builtObject7, habitat2, out resourcesToOrder);
                                            list2.Add(resourcesToOrder);
                                            habitatList.Add(habitat2);
                                        }
                                        else
                                        {
                                            design7.BuildCount--;
                                        }
                                    }
                                    else
                                    {
                                        design7.BuildCount--;
                                    }
                                    continue;
                                }
                                BuiltObject builtObject8 = SpacePorts.FindShortestConstructionWaitQueue(builtObject7, out shortestWaitQueueTime2);
                                double num30 = shortestWaitQueueTime2 / (double)Galaxy.RealSecondsInGalacticYear;
                                if (builtObject8 != null && num30 < Galaxy.MaximumConstructionQueueWaitTimeYears)
                                {
                                    if (builtObject8.ConstructionQueue != null && builtObject8.ConstructionQueue.AddBuiltObjectToConstruct(builtObject7))
                                    {
                                        num12 += num27;
                                        num13 += num28;
                                        if (builtObject8.ParentHabitat != null)
                                        {
                                            builtObject7.Name = _Galaxy.GenerateBuiltObjectName(design7, builtObject8.ParentHabitat);
                                        }
                                        AddBuiltObjectToGalaxy(builtObject7, builtObject8, offsetLocationFromParent: false, isStateOwned: true);
                                        builtObject7.BuiltAt = builtObject8;
                                        builtObject7.IsAutoControlled = NewBuiltObjectShouldBeAutomated(builtObject7.SubRole);
                                        ProcureConstructionComponents(builtObject7, builtObject8, orderPreciseResourceAmounts: true, out resourcesToOrder);
                                        list.Add(resourcesToOrder);
                                        builtObjectList.Add(builtObject8);
                                    }
                                    else
                                    {
                                        design7.BuildCount--;
                                    }
                                }
                                else
                                {
                                    design7.BuildCount--;
                                }
                            }
                        }
                    }
                }
            }
            StateMoney -= num12;
            PirateEconomy.PerformExpense(num12, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
            BuiltObjectList builtObjectList3 = new BuiltObjectList();
            foreach (BuiltObject item4 in builtObjectList)
            {
                if (!builtObjectList3.Contains(item4))
                {
                    builtObjectList3.Add(item4);
                }
            }
            foreach (BuiltObject item5 in builtObjectList3)
            {
                CargoList cargoList = new CargoList();
                for (int n = 0; n < builtObjectList.Count; n++)
                {
                    if (builtObjectList[n] != item5)
                    {
                        continue;
                    }
                    foreach (Cargo item6 in list[n])
                    {
                        cargoList.Add(item6);
                    }
                }
                foreach (Cargo item7 in cargoList)
                {
                    CreateOrder(item5, item7.CommodityResource, item7.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
            HabitatList habitatList5 = new HabitatList();
            foreach (Habitat item8 in habitatList)
            {
                if (!habitatList5.Contains(item8))
                {
                    habitatList5.Add(item8);
                }
            }
            foreach (Habitat item9 in habitatList5)
            {
                CargoList cargoList2 = new CargoList();
                for (int num31 = 0; num31 < habitatList.Count; num31++)
                {
                    if (habitatList[num31] != item9)
                    {
                        continue;
                    }
                    foreach (Cargo item10 in list2[num31])
                    {
                        cargoList2.Add(item10);
                    }
                }
                foreach (Cargo item11 in cargoList2)
                {
                    CreateOrder(item9, item11.CommodityResource, item11.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
        }

        public void BuildNewShipsPirate(DesignList designs, List<int> amounts)
        {
            if (designs == null || designs.Count <= 0 || amounts == null || amounts.Count <= 0 || designs.Count != amounts.Count)
            {
                return;
            }
            if (DominantRace != null)
            {
                _ = DominantRace.Expanding;
            }
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = new HabitatList();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && !habitat.HasBeenDestroyed && habitat.Empire == this)
                {
                    habitatList.Add(habitat);
                    if (habitat.Population != null && habitat.Population.TotalAmount > Galaxy.BuildColonyShipPopulationRequirement && habitat.ConstructionQueue != null && habitat.ConstructionQueue.ConstructionWaitQueue != null && habitat.ConstructionQueue.ConstructionWaitQueue.Count <= 0)
                    {
                        habitatList2.Add(habitat);
                    }
                }
            }
            _ = habitatList2.Count;
            _ = 0;
            double purchaseCost = 0.0;
            List<CargoList> builtObjectResourcesToOrder = new List<CargoList>();
            BuiltObjectList builtObjectConstructionYards = new BuiltObjectList();
            List<CargoList> colonyResourcesToOrder = new List<CargoList>();
            HabitatList colonyConstructionYards = new HabitatList();
            CargoList resourcesToOrder = null;
            for (int j = 0; j < designs.Count; j++)
            {
                Design design = designs[j];
                if (design == null)
                {
                    continue;
                }
                int num = amounts[j];
                if (num > 0)
                {
                    switch (design.SubRole)
                    {
                        case BuiltObjectSubRole.ResupplyShip:
                        case BuiltObjectSubRole.ColonyShip:
                        case BuiltObjectSubRole.ConstructionShip:
                            PirateBuildNewShipsAtColony(design, num, StateMoney, ref purchaseCost, habitatList, ref resourcesToOrder, ref colonyResourcesToOrder, ref colonyConstructionYards);
                            break;
                        default:
                            PirateBuildNewShips(design, num, StateMoney, ref purchaseCost, ref resourcesToOrder, ref builtObjectResourcesToOrder, ref builtObjectConstructionYards);
                            break;
                    }
                }
            }
            StateMoney -= purchaseCost;
            PirateEconomy.PerformExpense(purchaseCost, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
            BuiltObjectList builtObjectList = new BuiltObjectList();
            foreach (BuiltObject item in builtObjectConstructionYards)
            {
                if (!builtObjectList.Contains(item))
                {
                    builtObjectList.Add(item);
                }
            }
            foreach (BuiltObject item2 in builtObjectList)
            {
                CargoList cargoList = new CargoList();
                for (int k = 0; k < builtObjectConstructionYards.Count; k++)
                {
                    if (builtObjectConstructionYards[k] != item2)
                    {
                        continue;
                    }
                    foreach (Cargo item3 in builtObjectResourcesToOrder[k])
                    {
                        cargoList.Add(item3);
                    }
                }
                foreach (Cargo item4 in cargoList)
                {
                    CreateOrder(item2, item4.CommodityResource, item4.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
            HabitatList habitatList3 = new HabitatList();
            foreach (Habitat item5 in colonyConstructionYards)
            {
                if (!habitatList3.Contains(item5))
                {
                    habitatList3.Add(item5);
                }
            }
            foreach (Habitat item6 in habitatList3)
            {
                CargoList cargoList2 = new CargoList();
                for (int l = 0; l < colonyConstructionYards.Count; l++)
                {
                    if (colonyConstructionYards[l] != item6)
                    {
                        continue;
                    }
                    foreach (Cargo item7 in colonyResourcesToOrder[l])
                    {
                        cargoList2.Add(item7);
                    }
                }
                foreach (Cargo item8 in cargoList2)
                {
                    CreateOrder(item6, item8.CommodityResource, item8.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
        }

        public void BuildNewShips(DesignList designs, List<int> amounts)
        {
            if (designs == null || designs.Count <= 0 || amounts == null || amounts.Count <= 0 || designs.Count != amounts.Count)
            {
                return;
            }
            double num = 0.0;
            List<CargoList> list = new List<CargoList>();
            BuiltObjectList builtObjectList = new BuiltObjectList();
            List<CargoList> list2 = new List<CargoList>();
            HabitatList habitatList = new HabitatList();
            CargoList resourcesToOrder = null;
            for (int i = 0; i < designs.Count; i++)
            {
                Design design = designs[i];
                if (design == null)
                {
                    continue;
                }
                int num2 = amounts[i];
                if (num2 <= 0)
                {
                    continue;
                }
                for (int j = 0; j < num2; j++)
                {
                    double num3 = design.CalculateCurrentPurchasePrice(_Galaxy);
                    if (!(num + num3 <= StateMoney))
                    {
                        continue;
                    }
                    design.BuildCount++;
                    BuiltObject builtObject = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design), _Galaxy);
                    builtObject.PurchasePrice = num3;
                    double shortestWaitQueueTime;
                    if (builtObject.SubRole == BuiltObjectSubRole.ConstructionShip || builtObject.SubRole == BuiltObjectSubRole.ResupplyShip)
                    {
                        Habitat habitat = Colonies.FindShortestConstructionWaitQueue(builtObject, out shortestWaitQueueTime, allowLongWaitQueues: true);
                        if (habitat != null)
                        {
                            if (habitat.ConstructionQueue != null && habitat.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                            {
                                num += num3;
                                builtObject.Name = _Galaxy.GenerateBuiltObjectName(design, habitat);
                                AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: false, isStateOwned: true);
                                builtObject.BuiltAt = habitat;
                                builtObject.IsAutoControlled = NewBuiltObjectShouldBeAutomated(builtObject.SubRole);
                                ProcureConstructionComponents(builtObject, habitat, out resourcesToOrder);
                                list2.Add(resourcesToOrder);
                                habitatList.Add(habitat);
                            }
                            else
                            {
                                design.BuildCount--;
                            }
                        }
                        else
                        {
                            design.BuildCount--;
                        }
                        continue;
                    }
                    BuiltObject builtObject2 = SpacePorts.FindShortestConstructionWaitQueue(builtObject, out shortestWaitQueueTime, includeVerySmallYards: false);
                    if (builtObject2 != null)
                    {
                        if (builtObject2.ConstructionQueue != null && builtObject2.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                        {
                            num += num3;
                            if (builtObject2.ParentHabitat != null)
                            {
                                builtObject.Name = _Galaxy.GenerateBuiltObjectName(design, builtObject2.ParentHabitat);
                            }
                            AddBuiltObjectToGalaxy(builtObject, builtObject2, offsetLocationFromParent: false, isStateOwned: true);
                            builtObject.BuiltAt = builtObject2;
                            builtObject.IsAutoControlled = NewBuiltObjectShouldBeAutomated(builtObject.SubRole);
                            ProcureConstructionComponents(builtObject, builtObject2, orderPreciseResourceAmounts: true, out resourcesToOrder);
                            list.Add(resourcesToOrder);
                            builtObjectList.Add(builtObject2);
                        }
                        else
                        {
                            design.BuildCount--;
                        }
                    }
                    else
                    {
                        design.BuildCount--;
                    }
                }
            }
            StateMoney -= num;
            PirateEconomy.PerformExpense(num, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            foreach (BuiltObject item in builtObjectList)
            {
                if (!builtObjectList2.Contains(item))
                {
                    builtObjectList2.Add(item);
                }
            }
            foreach (BuiltObject item2 in builtObjectList2)
            {
                CargoList cargoList = new CargoList();
                for (int k = 0; k < builtObjectList.Count; k++)
                {
                    if (builtObjectList[k] != item2)
                    {
                        continue;
                    }
                    foreach (Cargo item3 in list[k])
                    {
                        cargoList.Add(item3);
                    }
                }
                foreach (Cargo item4 in cargoList)
                {
                    CreateOrder(item2, item4.CommodityResource, item4.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
            HabitatList habitatList2 = new HabitatList();
            foreach (Habitat item5 in habitatList)
            {
                if (!habitatList2.Contains(item5))
                {
                    habitatList2.Add(item5);
                }
            }
            foreach (Habitat item6 in habitatList2)
            {
                CargoList cargoList2 = new CargoList();
                for (int l = 0; l < habitatList.Count; l++)
                {
                    if (habitatList[l] != item6)
                    {
                        continue;
                    }
                    foreach (Cargo item7 in list2[l])
                    {
                        cargoList2.Add(item7);
                    }
                }
                foreach (Cargo item8 in cargoList2)
                {
                    CreateOrder(item6, item8.CommodityResource, item8.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
        }

        public int CheckSystemEnemyShipLevel(SystemVisibility system)
        {
            int num = 0;
            if (system != null && system.Threats != null)
            {
                for (int i = 0; i < system.Threats.Count; i++)
                {
                    StellarObject stellarObject = system.Threats[i];
                    if (!(stellarObject is BuiltObject))
                    {
                        continue;
                    }
                    BuiltObject builtObject = (BuiltObject)stellarObject;
                    if (builtObject.Role == BuiltObjectRole.Base || builtObject.TopSpeed <= 0 || !builtObject.IsFunctional || stellarObject.Empire == null || stellarObject.Empire == this)
                    {
                        continue;
                    }
                    if (stellarObject.Empire.PirateEmpireBaseHabitat != null)
                    {
                        PirateRelation pirateRelation = ObtainPirateRelation(stellarObject.Empire);
                        if (pirateRelation != null && pirateRelation.Type != PirateRelationType.Protection)
                        {
                            num += stellarObject.FirepowerRaw;
                        }
                        continue;
                    }
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(stellarObject.Empire);
                    if (diplomaticRelation != null)
                    {
                        DiplomaticRelationType type = diplomaticRelation.Type;
                        if (type == DiplomaticRelationType.War)
                        {
                            num += stellarObject.FirepowerRaw;
                        }
                    }
                }
            }
            return num;
        }

        public HabitatList DetermineNewSpacePortLocations(HabitatList colonies, int newSpacePortAmount, bool excludeColoniesWithEnemiesPresent)
        {
            HabitatList habitatList = new HabitatList();
            if (newSpacePortAmount > 0)
            {
                HabitatList habitatList2 = new HabitatList();
                habitatList2.AddRange(colonies);
                habitatList2.Sort();
                habitatList2.Reverse();
                HabitatList habitatList3 = new HabitatList();
                for (int i = 0; i < SpacePorts.Count; i++)
                {
                    BuiltObject builtObject = SpacePorts[i];
                    if (builtObject.ParentHabitat != null)
                    {
                        Habitat habitat = Galaxy.DetermineHabitatSystemStar(builtObject.ParentHabitat);
                        if (habitat != null && !habitatList3.Contains(habitat))
                        {
                            habitatList3.Add(habitat);
                        }
                    }
                }
                for (int j = 0; j < colonies.Count; j++)
                {
                    Habitat habitat2 = colonies[j];
                    foreach (BuiltObject item2 in habitat2.ConstructionQueue.ConstructionWaitQueue)
                    {
                        if (item2.SubRole == BuiltObjectSubRole.SmallSpacePort || item2.SubRole == BuiltObjectSubRole.MediumSpacePort || item2.SubRole == BuiltObjectSubRole.LargeSpacePort)
                        {
                            Habitat habitat3 = Galaxy.DetermineHabitatSystemStar(habitat2);
                            if (habitat3 != null && !habitatList3.Contains(habitat3))
                            {
                                habitatList3.Add(habitat3);
                            }
                        }
                    }
                }
                for (int k = 0; k < BuiltObjects.Count; k++)
                {
                    BuiltObject builtObject2 = BuiltObjects[k];
                    if (builtObject2.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject2.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject2.SubRole == BuiltObjectSubRole.LargeSpacePort)
                    {
                        Habitat habitat4 = Galaxy.DetermineHabitatSystemStar(builtObject2.ParentHabitat);
                        if (habitat4 != null && !habitatList3.Contains(habitat4))
                        {
                            habitatList3.Add(habitat4);
                        }
                    }
                }
                HabitatList habitatList4 = new HabitatList();
                foreach (Habitat item3 in habitatList2)
                {
                    Habitat item = Galaxy.DetermineHabitatSystemStar(item3);
                    if (habitatList3.Contains(item))
                    {
                        habitatList4.Add(item3);
                    }
                }
                foreach (Habitat item4 in habitatList4)
                {
                    habitatList2.Remove(item4);
                }
                int num = 0;
                double num2 = (double)Policy.ConstructionSpaceportMinimumDistance * 1000.0;
                {
                    foreach (Habitat item5 in habitatList2)
                    {
                        BuiltObject builtObject3 = _Galaxy.FastFindNearestSpacePort(item5.Xpos, item5.Ypos, this);
                        if (builtObject3 != null)
                        {
                            double num3 = _Galaxy.CalculateDistance(item5.Xpos, item5.Ypos, builtObject3.Xpos, builtObject3.Ypos);
                            if (!(num3 > num2))
                            {
                                continue;
                            }
                            bool flag = false;
                            foreach (Habitat item6 in habitatList)
                            {
                                num3 = _Galaxy.CalculateDistance(item5.Xpos, item5.Ypos, item6.Xpos, item6.Ypos);
                                if (num3 <= num2)
                                {
                                    flag = true;
                                    break;
                                }
                            }
                            if (!flag)
                            {
                                bool flag2 = true;
                                if (excludeColoniesWithEnemiesPresent)
                                {
                                    flag2 = false;
                                    int num4 = CheckSystemEnemyShipLevel(SystemVisibility[item5.SystemIndex]);
                                    if (num4 <= 0 && (item5.InvadingTroops == null || item5.InvadingTroops.Count <= 0))
                                    {
                                        flag2 = true;
                                    }
                                }
                                if (flag2)
                                {
                                    habitatList.Add(item5);
                                    num++;
                                }
                            }
                            if (num >= newSpacePortAmount)
                            {
                                return habitatList;
                            }
                            continue;
                        }
                        bool flag3 = true;
                        if (excludeColoniesWithEnemiesPresent)
                        {
                            flag3 = false;
                            int num5 = CheckSystemEnemyShipLevel(SystemVisibility[item5.SystemIndex]);
                            if (num5 <= 0 && (item5.InvadingTroops == null || item5.InvadingTroops.Count <= 0))
                            {
                                flag3 = true;
                            }
                        }
                        if (flag3)
                        {
                            habitatList.Add(item5);
                            num++;
                        }
                        if (num >= newSpacePortAmount)
                        {
                            return habitatList;
                        }
                    }
                    return habitatList;
                }
            }
            return habitatList;
        }

        private void RetrofitBuiltObjects()
        {
            long stateRetrofitAge = Galaxy.RealSecondsInGalacticYear * 1000 * Galaxy.RetrofitYears;
            long privateRetrofitAge = Galaxy.RealSecondsInGalacticYear * 2000;
            RetrofitBuiltObjects(stateRetrofitAge, privateRetrofitAge, breakthroughInitiated: false);
        }

        private void RetrofitBuiltObjects(long stateRetrofitAge, long privateRetrofitAge, bool breakthroughInitiated)
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(PrivateBuiltObjects);
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            bool flag = true;
            if (this == _Galaxy.PlayerEmpire)
            {
                flag = false;
            }
            if (breakthroughInitiated && Policy.ResearchDesignAutoRetrofit)
            {
                flag = false;
                BuiltObjectList builtObjectList3 = BuiltObjects;
                double num = StateMoney * 0.7;
                if (Research != null && Research.RecentProjects != null && Research.RecentProjects.ContainsBySpecialFunctionCode(2))
                {
                    num = StateMoney;
                    builtObjectList3 = BuiltObjects.GetBuiltObjectsBySubRole(new List<BuiltObjectSubRole>
                {
                    BuiltObjectSubRole.ConstructionShip,
                    BuiltObjectSubRole.ExplorationShip,
                    BuiltObjectSubRole.Escort,
                    BuiltObjectSubRole.Frigate,
                    BuiltObjectSubRole.Destroyer
                });
                }
                else if (CheckEmpireHasHyperDriveTech(this))
                {
                    builtObjectList3 = BuiltObjects.GetShipsWithoutWarpDrives();
                    if (builtObjectList3.Count > 0)
                    {
                        num = StateMoney;
                    }
                    else
                    {
                        builtObjectList3 = BuiltObjects;
                    }
                }
                double num2 = CalculateRetrofitCosts(builtObjectList3);
                if (num2 > 0.0 && num > 0.0 && num2 > num)
                {
                    double num3 = num2 / num;
                    if (num3 < 10.0)
                    {
                        double num4 = 0.0;
                        int num5 = 1 + Math.Max(1, (int)(num3 * 8.0 + 0.999));
                        int num6 = Math.Max(1, builtObjectList3.Count / num5);
                        int i = 0;
                        for (int iterationCount = 0; Galaxy.ConditionCheckLimit(i < builtObjectList3.Count, 200, ref iterationCount); i += num6)
                        {
                            int count = Math.Min(num6, builtObjectList3.Count - i);
                            BuiltObjectList range = builtObjectList3.GetRange(i, count);
                            double num7 = CalculateRetrofitCosts(range);
                            if (!(num4 + num7 < num))
                            {
                                break;
                            }
                            num4 += num7;
                            builtObjectList2.AddRange(range);
                        }
                        num2 = num4;
                    }
                }
                else
                {
                    builtObjectList2.AddRange(builtObjectList3);
                }
                if (this == _Galaxy.PlayerEmpire)
                {
                    if (StateMoney >= num2)
                    {
                        double num8 = Math.Max(0.0, num2);
                        ComponentList componentList = new ComponentList();
                        if (Research != null && Research.RecentProjects != null && Research.RecentProjects.Count > 0)
                        {
                            for (int j = 0; j < Research.RecentProjects.Count; j++)
                            {
                                ResearchNode researchNode = Research.RecentProjects[j];
                                if (researchNode.Components != null && researchNode.Components.Count > 0)
                                {
                                    for (int k = 0; k < researchNode.Components.Count; k++)
                                    {
                                        componentList.Add(researchNode.Components[k]);
                                    }
                                }
                            }
                        }
                        string empty = string.Empty;
                        if (componentList.Count > 0)
                        {
                            string text = string.Empty;
                            for (int l = 0; l < componentList.Count; l++)
                            {
                                text = text + "    " + componentList[l].Name + "\n";
                            }
                            empty = string.Format(TextResolver.GetText("Retrofit Recommendation Message Components"), text);
                        }
                        else
                        {
                            empty = TextResolver.GetText("Retrofit Recommendation Message");
                        }
                        if (CheckTaskAuthorized(taskDescription: (builtObjectList2.Count == BuiltObjects.Count) ? (empty + string.Format(TextResolver.GetText("Retrofit Recommendation Explanation"), num8.ToString("###,###,###,##0"))) : (empty + string.Format(TextResolver.GetText("Retrofit Recommendation Explanation Partial"), num8.ToString("###,###,###,##0"))), automationLevel: _ControlStateConstruction, taskTarget: builtObjectList2, advisorMessageType: AdvisorMessageType.Retrofit))
                        {
                            flag = true;
                            if (_ControlStateConstruction != AutomationLevel.FullyAutomated)
                            {
                                stateRetrofitAge = 0L;
                            }
                        }
                        if (Research != null && Research.RecentProjects != null)
                        {
                            Research.RecentProjects.Clear();
                        }
                    }
                }
                else
                {
                    if (num2 < StateMoney * 0.7)
                    {
                        flag = true;
                        stateRetrofitAge = Math.Max(stateRetrofitAge, Galaxy.RealSecondsInGalacticYear * 2000);
                    }
                    if (Research != null && Research.RecentProjects != null)
                    {
                        Research.RecentProjects.Clear();
                    }
                }
            }
            if (flag)
            {
                builtObjectList.AddRange(builtObjectList2);
            }
            DoRetrofit(builtObjectList, currentStarDate, privateRetrofitAge, stateRetrofitAge, flag, breakthroughInitiated, manuallyInitiated: false);
        }

        public void DoRetrofit(BuiltObjectList builtObjects, long starDate, long privateRetrofitAge, long stateRetrofitAge, bool stateRetrofitPermitted, bool breakthroughInitiated, bool manuallyInitiated)
        {
            bool flag = CheckAtWar();
            long num = (long)Policy.ConstructionSpaceportLargeColonyPopulationThreshold * 1000000L;
            long num2 = (long)Policy.ConstructionSpaceportMediumColonyPopulationThreshold * 1000000L;
            long num3 = (long)Policy.ConstructionSpaceportSmallColonyPopulationThreshold * 1000000L;
            if (!flag && stateRetrofitPermitted)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup == null || shipGroup.LeadShip == null || (!breakthroughInitiated && !shipGroup.LeadShip.IsAutoControlled) || starDate - shipGroup.LeadShip.DateRetrofit <= stateRetrofitAge || !CheckFleetNeedsRetrofit(shipGroup, !manuallyInitiated))
                    {
                        continue;
                    }
                    BuiltObjectMission mission = shipGroup.Mission;
                    if (mission == null || mission.Type == BuiltObjectMissionType.Undefined || mission.Priority == BuiltObjectMissionPriority.Low)
                    {
                        if (mission == null || mission.Type != BuiltObjectMissionType.Retrofit)
                        {
                            AssignFleetRetrofit(shipGroup, !manuallyInitiated);
                        }
                    }
                    else if ((mission == null || mission.Type != BuiltObjectMissionType.Retrofit) && !shipGroup.SubsequentMissions.ContainsType(BuiltObjectMissionType.Retrofit))
                    {
                        shipGroup.QueueMission(BuiltObjectMissionType.Retrofit, null, null, BuiltObjectMissionPriority.Normal);
                    }
                }
            }
            for (int j = 0; j < builtObjects.Count; j++)
            {
                BuiltObject builtObject = builtObjects[j];
                if ((!builtObject.IsAutoControlled && !breakthroughInitiated) || builtObject.RetrofitForNextMission || builtObject.RetrofitDesign != null)
                {
                    continue;
                }
                long num4 = stateRetrofitAge;
                if (builtObject.Owner == null)
                {
                    num4 = privateRetrofitAge;
                }
                switch (builtObject.SubRole)
                {
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                    case BuiltObjectSubRole.ResortBase:
                    case BuiltObjectSubRole.GenericBase:
                    case BuiltObjectSubRole.EnergyResearchStation:
                    case BuiltObjectSubRole.WeaponsResearchStation:
                    case BuiltObjectSubRole.HighTechResearchStation:
                    case BuiltObjectSubRole.MonitoringStation:
                        num4 = privateRetrofitAge * 2;
                        break;
                }
                if (starDate - builtObject.DateRetrofit <= num4 || builtObject.BuiltAt != null || builtObject.ShipGroup != null || (builtObject.Role == BuiltObjectRole.Military && flag))
                {
                    continue;
                }
                double num5 = Galaxy.ResolveBuildSpeed(this, _Galaxy, builtObject);
                bool flag2 = true;
                if (num5 > 1.0)
                {
                    Design design = _Designs.FindNewestCanBuild(builtObject.SubRole);
                    if (design == null || design.WarpSpeed <= 0 || builtObject.Design == null || builtObject.Design.WarpSpeed > 0)
                    {
                        flag2 = false;
                    }
                }
                if (!flag2 || builtObject.SuppressAutoRetrofit)
                {
                    continue;
                }
                if (builtObject.ParentHabitat != null)
                {
                    if (!CanBuildBuiltObject(builtObject, builtObject.ParentHabitat))
                    {
                        continue;
                    }
                    builtObject.RetrofitForNextMission = true;
                    if (builtObject.Role == BuiltObjectRole.Base)
                    {
                        if (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort)
                        {
                            if (PirateEmpireBaseHabitat != null)
                            {
                                Design design2 = _Designs.FindNewestCanBuild(builtObject.SubRole);
                                BuiltObject builtObject2 = _Galaxy.IdentifyPirateSpaceport(this);
                                if (builtObject == builtObject2)
                                {
                                    if (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort)
                                    {
                                        Design design3 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
                                        if (design3 != null && CanBuildDesign(design3))
                                        {
                                            design2 = design3;
                                        }
                                    }
                                    else if (builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort)
                                    {
                                        Design design4 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.LargeSpacePort);
                                        if (design4 != null && CanBuildDesign(design4))
                                        {
                                            design2 = design4;
                                        }
                                    }
                                    if (design2 != null && design2 != builtObject.Design && AssignRetrofitMission(builtObject, design2, null, forceUseOfYard: true))
                                    {
                                        builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                                    }
                                    builtObject.RetrofitForNextMission = false;
                                }
                                else
                                {
                                    if (design2 != null && design2 != builtObject.Design && AssignRetrofitMission(builtObject, design2, null, forceUseOfYard: true))
                                    {
                                        builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                                    }
                                    builtObject.RetrofitForNextMission = false;
                                }
                                continue;
                            }
                            Design design5 = _Designs.FindNewestCanBuild(builtObject.SubRole);
                            if (builtObject.ParentHabitat.Population.TotalAmount > num)
                            {
                                design5 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.LargeSpacePort);
                            }
                            else if (builtObject.ParentHabitat.Population.TotalAmount > num2)
                            {
                                if (builtObject.SubRole != BuiltObjectSubRole.LargeSpacePort)
                                {
                                    design5 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
                                }
                            }
                            else if (builtObject.ParentHabitat.Population.TotalAmount > num3 && builtObject.SubRole != BuiltObjectSubRole.LargeSpacePort && builtObject.SubRole != BuiltObjectSubRole.MediumSpacePort)
                            {
                                design5 = _Designs.FindNewestCanBuild(BuiltObjectSubRole.SmallSpacePort);
                            }
                            if (design5 != null && design5 != builtObject.Design && AssignRetrofitMission(builtObject, design5, null, forceUseOfYard: true))
                            {
                                builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                            }
                            builtObject.RetrofitForNextMission = false;
                        }
                        else
                        {
                            Design design6 = _Designs.FindNewestCanBuild(builtObject.SubRole, builtObject.ActualEmpire, builtObject.ParentHabitat);
                            if (design6 != null && design6 != builtObject.Design && AssignRetrofitMission(builtObject, design6, null, forceUseOfYard: true))
                            {
                                builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                            }
                        }
                    }
                    else if ((builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined) && AssignRetrofitMission(builtObject))
                    {
                        builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                    }
                    continue;
                }
                bool flag3 = true;
                switch (builtObject.SubRole)
                {
                    case BuiltObjectSubRole.ResupplyShip:
                    case BuiltObjectSubRole.ColonyShip:
                    case BuiltObjectSubRole.ConstructionShip:
                        flag3 = PirateEmpireBaseHabitat != null || CanBuildBuiltObject(builtObject, Capital);
                        break;
                    default:
                        flag3 = CanBuildBuiltObject(builtObject);
                        break;
                }
                if (builtObject.Role == BuiltObjectRole.Base)
                {
                    flag3 = CanBuildBuiltObject(builtObject, builtObject.ParentHabitat);
                }
                if (!flag3)
                {
                    continue;
                }
                builtObject.RetrofitForNextMission = true;
                if (builtObject.Role == BuiltObjectRole.Base)
                {
                    if (AssignRetrofitMission(builtObject))
                    {
                        builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                    }
                    continue;
                }
                BuiltObjectMission mission2 = builtObject.Mission;
                if (mission2 == null || mission2.Type == BuiltObjectMissionType.Undefined)
                {
                    if (AssignRetrofitMission(builtObject))
                    {
                        builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                    }
                }
                else
                {
                    if (mission2.Type == BuiltObjectMissionType.Retrofit || builtObject.SubsequentMissions.ContainsType(BuiltObjectMissionType.Retrofit))
                    {
                        continue;
                    }
                    Design design7 = _Designs.FindNewestCanBuild(builtObject.SubRole, builtObject.ActualEmpire);
                    if (design7 != null && design7 != builtObject.Design)
                    {
                        StellarObject stellarObject = null;
                        switch (builtObject.SubRole)
                        {
                            case BuiltObjectSubRole.ResupplyShip:
                            case BuiltObjectSubRole.ColonyShip:
                            case BuiltObjectSubRole.ConstructionShip:
                                stellarObject = FindNearestShipYard(builtObject, canRepairOrBuild: true, includeVerySmallYards: true);
                                break;
                            default:
                                stellarObject = FindNearestShipYard(builtObject, canRepairOrBuild: true, includeVerySmallYards: false);
                                break;
                        }
                        builtObject.QueueMission(BuiltObjectMissionType.Retrofit, stellarObject, null, design7, BuiltObjectMissionPriority.Normal);
                    }
                }
            }
        }

        private double CalculateRetrofitCosts(BuiltObjectList builtObjects)
        {
            double num = 0.0;
            if (builtObjects != null)
            {
                for (int i = 0; i < builtObjects.Count; i++)
                {
                    BuiltObject builtObject = builtObjects[i];
                    if (builtObject != null && builtObject.RetrofitDesign == null && builtObject.BuiltAt == null)
                    {
                        double num2 = Galaxy.ResolveBuildSpeed(this, _Galaxy, builtObject);
                        if (num2 <= 1.0 && !builtObject.SuppressAutoRetrofit)
                        {
                            num += CalculateRetrofitCost(builtObject);
                        }
                    }
                }
            }
            return num;
        }

        public StellarObject UltraFastFindNearestRefuellingLocation(double x, double y, ResourceList fuelTypes, BuiltObject shipToRefuel, bool mustHaveActualSupply)
        {
            return UltraFastFindNearestRefuellingLocation(x, y, fuelTypes, shipToRefuel, mustHaveActualSupply, includeResupplyShips: false);
        }

        public StellarObject UltraFastFindNearestRefuellingLocation(double x, double y, ResourceList fuelTypes, BuiltObject shipToRefuel, bool mustHaveActualSupply, bool includeResupplyShips)
        {
            return UltraFastFindNearestRefuellingLocation(x, y, fuelTypes, shipToRefuel, mustHaveActualSupply, includeResupplyShips, 1);
        }

        public StellarObject UltraFastFindNearestRefuellingLocation(double x, double y, ResourceList fuelTypes, BuiltObject shipToRefuel, bool mustHaveActualSupply, bool includeResupplyShips, int shipsToRefuel)
        {
            StellarObject result = null;
            double num = double.MaxValue;
            int num2 = 50;
            StellarObject stellarObject = null;
            if (includeResupplyShips)
            {
                StellarObject[] array = _Galaxy.SortStellarObjectsByDistanceThreadsafe(x, y, _RefuellingLocationsMilitaryOnly);
                foreach (StellarObject stellarObject2 in array)
                {
                    if (stellarObject2 == null || !(stellarObject2 is BuiltObject))
                    {
                        continue;
                    }
                    BuiltObject builtObject = (BuiltObject)stellarObject2;
                    if (_Galaxy.CheckFuelSuppliedAtLocation(fuelTypes, builtObject, this, mustHaveActualSupply))
                    {
                        if (builtObject.DockingBayWaitQueue != null && builtObject.DockingBayWaitQueue.Count < num2 && builtObject.DockingBays != null && builtObject.DockingBays.Count > 0)
                        {
                            result = builtObject;
                            num = _Galaxy.CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
                            break;
                        }
                        if (stellarObject == null)
                        {
                            stellarObject = builtObject;
                        }
                    }
                }
            }
            StellarObject[] array2 = _Galaxy.SortStellarObjectsByDistanceThreadsafe(x, y, _RefuellingLocations);
            foreach (StellarObject stellarObject3 in array2)
            {
                if (stellarObject3 == null || !_Galaxy.CheckEmpireCanRefuelAtEmpire(shipToRefuel, this, stellarObject3.Empire))
                {
                    continue;
                }
                if (stellarObject3 is BuiltObject)
                {
                    BuiltObject builtObject2 = (BuiltObject)stellarObject3;
                    if (!_Galaxy.CheckFuelSuppliedAtLocation(fuelTypes, builtObject2, this, mustHaveActualSupply))
                    {
                        continue;
                    }
                    bool flag = false;
                    if (shipsToRefuel <= 1)
                    {
                        if ((builtObject2.DockingBays != null && builtObject2.DockingBays.Count >= 4) || (builtObject2.DockingBayWaitQueue != null && builtObject2.DockingBayWaitQueue.Count <= 3))
                        {
                            flag = true;
                        }
                    }
                    else if (builtObject2.DockingBays != null && builtObject2.DockingBays.Count >= 4)
                    {
                        flag = true;
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    if (builtObject2.DockingBayWaitQueue != null && builtObject2.DockingBayWaitQueue.Count < num2 && builtObject2.DockingBays != null && builtObject2.DockingBays.Count > 0)
                    {
                        double num3 = _Galaxy.CalculateDistance(x, y, builtObject2.Xpos, builtObject2.Ypos);
                        if (num3 < num)
                        {
                            return builtObject2;
                        }
                        return result;
                    }
                    if (stellarObject == null)
                    {
                        stellarObject = builtObject2;
                    }
                }
                else
                {
                    if (!(stellarObject3 is Habitat))
                    {
                        continue;
                    }
                    Habitat habitat = (Habitat)stellarObject3;
                    if (!_Galaxy.CheckEmpireCanRefuelAtEmpire(shipToRefuel, this, habitat.Empire) || !_Galaxy.CheckSufficientFuelAvailable(this, fuelTypes, habitat, habitat.Empire))
                    {
                        continue;
                    }
                    if (habitat.DockingBayWaitQueue != null && habitat.DockingBayWaitQueue.Count < num2)
                    {
                        double num4 = _Galaxy.CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
                        if (num4 < num)
                        {
                            return habitat;
                        }
                        return result;
                    }
                    if (stellarObject == null)
                    {
                        stellarObject = habitat;
                    }
                }
            }
            if (stellarObject != null)
            {
                return stellarObject;
            }
            return null;
        }

        public void UpdateEmpireRefuellingLocations()
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            StellarObjectList stellarObjectList2 = new StellarObjectList();
            for (int i = 0; i < ResupplyShips.Count; i++)
            {
                BuiltObject builtObject = ResupplyShips[i];
                if (builtObject != null && builtObject.IsFunctional && builtObject.IsDeployed && !builtObject.HasBeenDestroyed)
                {
                    stellarObjectList.Add(builtObject);
                }
            }
            for (int j = 0; j < RefuellingDepots.Count; j++)
            {
                BuiltObject builtObject2 = RefuellingDepots[j];
                if (builtObject2 != null && !builtObject2.HasBeenDestroyed && (builtObject2.SubRole != BuiltObjectSubRole.ResupplyShip || builtObject2.IsDeployed) && builtObject2.ParentHabitat == null && builtObject2.IsFunctional)
                {
                    stellarObjectList.Add(builtObject2);
                }
            }
            for (int k = 0; k < _Galaxy.Systems.Count; k++)
            {
                SystemInfo systemInfo = _Galaxy.Systems[k];
                if (systemInfo == null || systemInfo.SystemStar == null)
                {
                    continue;
                }
                SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Visible;
                if (this != _Galaxy.IndependentEmpire)
                {
                    systemVisibilityStatus = CheckSystemVisibilityStatus(systemInfo.SystemStar.SystemIndex);
                }
                if (systemVisibilityStatus != SystemVisibilityStatus.Explored && systemVisibilityStatus != SystemVisibilityStatus.Visible)
                {
                    continue;
                }
                if (systemInfo.SystemStar.Category == HabitatCategoryType.GasCloud)
                {
                    if (systemInfo.SystemStar.BasesAtHabitat.Count <= 0)
                    {
                        continue;
                    }
                    for (int l = 0; l < systemInfo.SystemStar.BasesAtHabitat.Count; l++)
                    {
                        BuiltObject builtObject3 = systemInfo.SystemStar.BasesAtHabitat[l];
                        if (builtObject3 != null && !builtObject3.HasBeenDestroyed && builtObject3.IsRefuellingDepot && builtObject3.Empire != null)
                        {
                            bool flag = true;
                            if (PirateEmpireBaseHabitat == null && this != _Galaxy.IndependentEmpire)
                            {
                                flag = IsObjectVisibleToThisEmpire(builtObject3, includeLongRangeScanners: true, includeShipsOutsideSystems: false);
                            }
                            if (flag && _Galaxy.IsStellarObjectDockable(builtObject3, this))
                            {
                                stellarObjectList2.Add(builtObject3);
                            }
                        }
                    }
                    continue;
                }
                for (int m = 0; m < systemInfo.Habitats.Count; m++)
                {
                    Habitat habitat = systemInfo.Habitats[m];
                    if (habitat == null)
                    {
                        continue;
                    }
                    if (habitat.BasesAtHabitat.Count > 0)
                    {
                        for (int n = 0; n < habitat.BasesAtHabitat.Count; n++)
                        {
                            BuiltObject builtObject4 = habitat.BasesAtHabitat[n];
                            if (builtObject4 != null && !builtObject4.HasBeenDestroyed && builtObject4.IsRefuellingDepot && builtObject4.Empire != null && _Galaxy.IsStellarObjectDockable(builtObject4, this))
                            {
                                bool flag2 = true;
                                if (this != _Galaxy.IndependentEmpire && builtObject4.SubRole != BuiltObjectSubRole.SmallSpacePort && builtObject4.SubRole != BuiltObjectSubRole.MediumSpacePort && builtObject4.SubRole != BuiltObjectSubRole.LargeSpacePort)
                                {
                                    flag2 = IsObjectVisibleToThisEmpire(builtObject4, includeLongRangeScanners: true, includeShipsOutsideSystems: false);
                                }
                                if (flag2)
                                {
                                    stellarObjectList2.Add(builtObject4);
                                }
                            }
                        }
                    }
                    if (habitat.Population.Count > 0 && habitat.IsRefuellingDepot && habitat.Empire != null && _Galaxy.IsStellarObjectDockable(habitat, this))
                    {
                        stellarObjectList2.Add(habitat);
                    }
                }
            }
            _RefuellingLocations = stellarObjectList2;
            _RefuellingLocationsMilitaryOnly = stellarObjectList;
        }

        private void ProcessCharacters(double timePassed)
        {
            if (Characters != null)
            {
                for (int i = 0; i < Characters.Count; i++)
                {
                    Character character = Characters[i];
                    character.DoTasks(_Galaxy);
                }
            }
        }

        public int CharactersCanGenerateAmountIntelligenceAgent()
        {
            int agentCount = 0;
            return CharactersCanGenerateAmountIntelligenceAgent(out agentCount);
        }

        public int CharactersCanGenerateAmountIntelligenceAgent(out int agentCount)
        {
            agentCount = Characters.CountCharactersByRole(CharacterRole.IntelligenceAgent);
            int maximumAgentCount = MaximumAgentCount;
            return maximumAgentCount - agentCount;
        }

        public int MaximumCharactersAllowedNonIntelligenceAgent()
        {
            int num = 0;
            if (PirateEmpireBaseHabitat == null)
            {
                return Math.Min(20, (int)(Math.Sqrt(TotalColonyStrategicValue) / 150.0));
            }
            return Math.Min(20, (int)(Math.Sqrt(BuiltObjects.Count) + 2.0));
        }

        public int CharactersCanGenerateAmountNonIntelligenceAgent()
        {
            int otherCharacterCount = 0;
            return CharactersCanGenerateAmountNonIntelligenceAgent(out otherCharacterCount);
        }

        public int CharactersCanGenerateAmountNonIntelligenceAgent(out int otherCharacterCount)
        {
            int num = Characters.CountCharactersByRole(CharacterRole.IntelligenceAgent);
            otherCharacterCount = Characters.Count - num;
            int num2 = MaximumCharactersAllowedNonIntelligenceAgent();
            return num2 - otherCharacterCount;
        }

        private void CheckForCharacterAppearance()
        {
            if (Characters == null || DominantRace == null || this == _Galaxy.IndependentEmpire || _Galaxy.DeferEventsForGameStart)
            {
                return;
            }
            int otherCharacterCount = 0;
            int agentCount = 0;
            int num = CharactersCanGenerateAmountNonIntelligenceAgent(out otherCharacterCount);
            CharactersCanGenerateAmountIntelligenceAgent(out agentCount);
            if (num <= 0 && agentCount <= 0)
            {
                return;
            }
            double num2 = 11.5;
            double num3 = 1.0;
            double num4 = 1.0;
            double num5 = 2.0;
            double num6 = 2.0;
            double num7 = 1.0;
            double num8 = 1.0;
            double num9 = 3.5;
            double num10 = 1.0;
            if (DominantRace != null)
            {
                num3 = ((PirateEmpireBaseHabitat != null) ? (num3 * DominantRace.CharacterRandomAppearanceChancePirateLeader) : (num3 * DominantRace.CharacterRandomAppearanceChanceLeader));
                num4 *= DominantRace.CharacterRandomAppearanceChanceAmbassador;
                num5 *= DominantRace.CharacterRandomAppearanceChanceGovernor;
                num6 *= DominantRace.CharacterRandomAppearanceChanceAdmiral;
                num7 *= DominantRace.CharacterRandomAppearanceChanceGeneral;
                num8 *= DominantRace.CharacterRandomAppearanceChanceScientist;
                num9 *= DominantRace.CharacterRandomAppearanceChanceIntelligenceAgent;
                num10 *= DominantRace.CharacterRandomAppearanceChanceShipCaptain;
            }
            double num11 = Math.Min(2.0, 1.0 + (double)CumulateFacilityValue1(PlanetaryFacilityType.MilitaryAcademy, mustBeCompleted: true) / 100.0);
            double num12 = Math.Min(2.0, 1.0 + (double)CumulateFacilityValue1(PlanetaryFacilityType.NavalAcademy, mustBeCompleted: true) / 100.0);
            double num13 = Math.Min(2.0, 1.0 + (double)CumulateFacilityValue1(PlanetaryFacilityType.ScienceAcademy, mustBeCompleted: true) / 100.0);
            double num14 = Math.Min(2.0, 1.0 + (double)CumulateFacilityValue1(PlanetaryFacilityType.SpyAcademy, mustBeCompleted: true) / 100.0);
            num7 *= num11;
            num6 *= num12;
            num8 *= num13;
            num9 *= num14;
            int num15 = 0;
            num15 = ((PirateEmpireBaseHabitat != null) ? Characters.CountCharactersByRole(CharacterRole.PirateLeader) : Characters.CountCharactersByRole(CharacterRole.Leader));
            if (num15 > 0)
            {
                num3 = 0.0;
            }
            if (Characters.CountCharactersByRole(CharacterRole.Ambassador) <= 0)
            {
                num4 *= 1.3;
            }
            if (Characters.CountCharactersByRole(CharacterRole.ColonyGovernor) <= 0)
            {
                num5 *= 1.3;
            }
            if (Characters.CountCharactersByRole(CharacterRole.FleetAdmiral) <= 0)
            {
                num6 *= 1.3;
            }
            if (Characters.CountCharactersByRole(CharacterRole.TroopGeneral) <= 0)
            {
                num7 *= 1.3;
            }
            if (Characters.CountCharactersByRole(CharacterRole.Scientist) <= 0)
            {
                num8 *= 1.3;
            }
            if (Characters.CountCharactersByRole(CharacterRole.IntelligenceAgent) <= 0)
            {
                num9 *= 1.8;
            }
            bool flag = false;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    if (DiplomaticRelations[i].Type != 0)
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (PirateRelations != null)
            {
                for (int j = 0; j < PirateRelations.Count; j++)
                {
                    if (PirateRelations[j].Type != 0)
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (!flag)
            {
                num4 = 0.0;
                num9 = 0.0;
                num2 -= 4.5;
            }
            if (BuiltObjects.CountByRole(BuiltObjectRole.Military) <= 0)
            {
                num6 = 0.0;
                num2 -= 2.0;
            }
            if (Colonies != null && Colonies.Count < 2)
            {
                num5 = 0.0;
                num2 -= 2.0;
            }
            if (PirateEmpireBaseHabitat != null)
            {
                num3 = 0.0;
                num4 = 0.0;
                num5 = 0.0;
                num6 = 2.0;
                num7 = 0.0;
                num8 = 1.0;
                num9 = 5.0;
                num10 = 5.0;
                num6 *= DominantRace.CharacterRandomAppearanceChanceAdmiral;
                num8 *= DominantRace.CharacterRandomAppearanceChanceScientist;
                num9 *= DominantRace.CharacterRandomAppearanceChanceIntelligenceAgent;
                num10 *= DominantRace.CharacterRandomAppearanceChanceShipCaptain;
                num2 = 13.0;
            }
            double num16 = num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10;
            int num17 = 25;
            num17 = Math.Min(num17, Math.Max(2, (int)((double)num17 / (num16 / num2))));
            if (Galaxy.Rnd.Next(0, num17) != 1)
            {
                return;
            }
            CharacterRole characterRole = CharacterRole.Undefined;
            int num18 = 0;
            int num19 = 20;
            while (characterRole == CharacterRole.Undefined && num18 < num19)
            {
                double num20 = 0.0;
                double num21 = num3;
                double num22 = num21;
                double num23 = num22 + num4;
                double num24 = num23;
                double num25 = num24 + num5;
                double num26 = num25;
                double num27 = num26 + num6;
                double num28 = num27;
                double num29 = num28 + num7;
                double num30 = num29;
                double num31 = num30 + num8;
                double num32 = num31;
                double num33 = num32 + num9;
                double num34 = num33;
                double num35 = num34 + num10;
                double num36 = Galaxy.Rnd.NextDouble() * num16;
                int num37 = 0;
                if (num36 >= num20 && num36 < num21)
                {
                    characterRole = CharacterRole.Leader;
                    num37 = 1;
                }
                else if (num36 >= num22 && num36 < num23)
                {
                    characterRole = CharacterRole.Ambassador;
                    num37 = Math.Max(1, (int)((double)CountEmpiresWeHaveMet() * 0.2));
                }
                else if (num36 >= num24 && num36 < num25)
                {
                    characterRole = CharacterRole.ColonyGovernor;
                    num37 = Math.Max(1, (int)((double)Colonies.Count * 0.34));
                }
                else if (num36 >= num26 && num36 < num27)
                {
                    characterRole = CharacterRole.FleetAdmiral;
                    num37 = Math.Max(1, (int)((double)Colonies.Count * 0.34));
                }
                else if (num36 >= num28 && num36 < num29)
                {
                    characterRole = CharacterRole.TroopGeneral;
                    num37 = Math.Max(1, (int)((double)Colonies.Count * 0.34));
                }
                else if (num36 >= num30 && num36 < num31)
                {
                    characterRole = CharacterRole.Scientist;
                    num37 = Math.Max(1, (int)((double)Colonies.Count * 0.25));
                }
                else if (num36 >= num32 && num36 < num33)
                {
                    characterRole = CharacterRole.IntelligenceAgent;
                    num37 = MaximumAgentCount;
                }
                else if (num36 >= num34 && num36 < num35)
                {
                    characterRole = CharacterRole.ShipCaptain;
                    num37 = Math.Max(1, (int)(Math.Sqrt(BuiltObjects.Count) + 1.0));
                }
                int num38 = Characters.CountCharactersByRole(characterRole);
                if (num38 >= num37)
                {
                    characterRole = CharacterRole.Undefined;
                }
                else
                {
                    double num39 = (double)num38 / (double)otherCharacterCount;
                    if (num39 > 0.4)
                    {
                        characterRole = CharacterRole.Undefined;
                    }
                }
                num18++;
            }
            if (characterRole == CharacterRole.Undefined)
            {
                return;
            }
            bool isRandomCharacter = false;
            Character character = GenerateNewCharacter(characterRole, null, activate: false, out isRandomCharacter);
            StellarObject stellarObject = Capital;
            switch (characterRole)
            {
                case CharacterRole.Leader:
                    stellarObject = Capital;
                    break;
                case CharacterRole.Ambassador:
                    stellarObject = Capital;
                    break;
                case CharacterRole.ColonyGovernor:
                    stellarObject = ReviewCharacterLocation(character, transferToLocation: false);
                    break;
                case CharacterRole.FleetAdmiral:
                    stellarObject = ReviewCharacterLocation(character, transferToLocation: false);
                    break;
                case CharacterRole.TroopGeneral:
                    stellarObject = ReviewCharacterLocation(character, transferToLocation: false);
                    break;
                case CharacterRole.IntelligenceAgent:
                    {
                        if (PirateEmpireBaseHabitat == null)
                        {
                            stellarObject = Capital;
                            break;
                        }
                        BuiltObject builtObject2 = _Galaxy.IdentifyPirateBase(this);
                        if (builtObject2 != null && !builtObject2.HasBeenDestroyed)
                        {
                            stellarObject = builtObject2;
                            break;
                        }
                        for (int k = 0; k < BuiltObjects.Count; k++)
                        {
                            BuiltObject builtObject3 = BuiltObjects[k];
                            if (builtObject3 != null && !builtObject3.HasBeenDestroyed && builtObject3.Role == BuiltObjectRole.Base)
                            {
                                stellarObject = builtObject3;
                                break;
                            }
                        }
                        break;
                    }
                case CharacterRole.Scientist:
                    stellarObject = ReviewCharacterLocation(character, transferToLocation: false);
                    break;
                case CharacterRole.PirateLeader:
                    {
                        BuiltObject builtObject = _Galaxy.IdentifyPirateBase(this);
                        if (builtObject != null && !builtObject.HasBeenDestroyed)
                        {
                            stellarObject = builtObject;
                        }
                        break;
                    }
                case CharacterRole.ShipCaptain:
                    stellarObject = ReviewCharacterLocation(character, transferToLocation: false);
                    break;
            }
            if (stellarObject == null)
            {
                if (PirateEmpireBaseHabitat == null)
                {
                    stellarObject = Capital;
                }
                else
                {
                    if (BuiltObjects.Count > 0)
                    {
                        stellarObject = BuiltObjects[0];
                    }
                    if (stellarObject == null && PrivateBuiltObjects.Count > 0)
                    {
                        stellarObject = PrivateBuiltObjects[0];
                    }
                }
            }
            if (stellarObject != null)
            {
                character.Activate(_Galaxy, this, stellarObject);
                _Galaxy.DoCharacterEvent(CharacterEventType.CharacterStart, character, character);
                if (character.Role == CharacterRole.IntelligenceAgent)
                {
                    _Galaxy.DoCharacterEventLeader(CharacterEventType.IntelligenceAgentRecruited, character, this);
                    IntelligenceMission intelligenceMission = new IntelligenceMission(this, character, _Galaxy.CurrentStarDate);
                    intelligenceMission.TimeLength = Galaxy.RealSecondsInGalacticYear * 1000 / 4;
                    character.Mission = intelligenceMission;
                }
                string description = string.Format(TextResolver.GetText("New Character Appeared Message ROLE NAME LOCATION"), Galaxy.ResolveDescription(character.Role), character.Name, stellarObject.Name);
                SendMessageToEmpire(this, EmpireMessageType.CharacterAppearance, character, description);
            }
            else
            {
                character.Kill(_Galaxy);
            }
        }

        public void GenerateStartingCharacters()
        {
            GenerateStartingCharacters(null);
        }

        public void GenerateStartingCharacters(StellarObject startLocation)
        {
            if (startLocation == null)
            {
                startLocation = Capital;
            }
            CharacterList characterList = new CharacterList();
            if (PirateEmpireBaseHabitat == null)
            {
                characterList = AvailableCharacters.ObtainStartingCharacters();
                if (_Galaxy.AllowRaceStartingCharacters && DominantRace != null && DominantRace.AvailableCharacters != null)
                {
                    characterList.AddRange(DominantRace.AvailableCharacters.ObtainStartingCharacters());
                }
            }
            else
            {
                List<CharacterRole> list = new List<CharacterRole>();
                list.Add(CharacterRole.Ambassador);
                list.Add(CharacterRole.ColonyGovernor);
                list.Add(CharacterRole.Leader);
                list.Add(CharacterRole.TroopGeneral);
                List<CharacterRole> rolesToExclude = list;
                characterList = AvailableCharacters.ObtainStartingCharactersExcludingRoles(rolesToExclude);
                if (_Galaxy.AllowRaceStartingCharacters && DominantRace != null && DominantRace.AvailableCharacters != null)
                {
                    characterList.AddRange(DominantRace.AvailableCharacters.ObtainStartingCharactersExcludingRoles(rolesToExclude));
                }
            }
            if (PirateEmpireBaseHabitat == null)
            {
                if (characterList.CountCharactersByRole(CharacterRole.Leader) <= 0)
                {
                    bool isRandomCharacter = false;
                    Character item = GenerateNewCharacter(CharacterRole.Leader, startLocation, activate: false, out isRandomCharacter);
                    characterList.Add(item);
                }
            }
            else if (characterList.CountCharactersByRole(CharacterRole.PirateLeader) <= 0)
            {
                bool isRandomCharacter2 = false;
                Character item2 = GenerateNewCharacter(CharacterRole.PirateLeader, startLocation, activate: false, out isRandomCharacter2);
                characterList.Add(item2);
            }
            int num = 1;
            if (DominantRace != null)
            {
                num = 1 + DominantRace.IntelligenceAgentAdditional;
            }
            int num2 = characterList.CountCharactersByRole(CharacterRole.IntelligenceAgent);
            if (num2 < num)
            {
                int num3 = num - num2;
                for (int i = 0; i < num3; i++)
                {
                    bool isRandomCharacter3 = false;
                    Character item3 = GenerateNewCharacter(CharacterRole.IntelligenceAgent, startLocation, activate: false, out isRandomCharacter3);
                    characterList.Add(item3);
                }
            }
            for (int j = 0; j < characterList.Count; j++)
            {
                Character character = characterList[j];
                StellarObject stellarObject = ReviewCharacterLocation(character, transferToLocation: false);
                if (stellarObject == null)
                {
                    stellarObject = startLocation;
                }
                character.Activate(_Galaxy, this, stellarObject);
                _Galaxy.DoCharacterEvent(CharacterEventType.CharacterStart, character, character);
                if (character.Role == CharacterRole.Leader || character.Role == CharacterRole.Scientist || character.Role == CharacterRole.PirateLeader)
                {
                    character.BonusesKnown = true;
                }
            }
        }

        public bool GenerateNewCharacterFromCustom(Character character, StellarObject location)
        {
            if (DominantRace != null && DominantRace.AvailableCharacters != null && DominantRace.AvailableCharacters.ActivateAndRemoveCharacter(character, _Galaxy, this, location))
            {
                if (character.Role == CharacterRole.Leader || character.Role == CharacterRole.Scientist || character.Role == CharacterRole.PirateLeader)
                {
                    character.BonusesKnown = true;
                }
                _Galaxy.DoCharacterEvent(CharacterEventType.CharacterStart, character, character);
                short matchingGameEventIdCharacterAppears = _Galaxy.GetMatchingGameEventIdCharacterAppears(character);
                _Galaxy.CheckTriggerEvent(matchingGameEventIdCharacterAppears, this, EventTriggerType.CharacterAppears, character);
                return true;
            }
            return false;
        }

        public Character GenerateNewCharacter(CharacterRole role, StellarObject location)
        {
            bool isRandomCharacter = false;
            return GenerateNewCharacter(role, location, activate: true, out isRandomCharacter);
        }

        public Character GenerateNewCharacter(CharacterRole role, StellarObject location, out bool isRandomCharacter)
        {
            return GenerateNewCharacter(role, location, activate: true, out isRandomCharacter);
        }

        public Character GenerateNewCharacter(CharacterRole role, StellarObject location, bool activate, out bool isRandomCharacter)
        {
            isRandomCharacter = false;
            Character character = AvailableCharacters.ObtainNextCharacter(role);
            if (character == null && _Galaxy.AllowRaceStartingCharacters && DominantRace != null && DominantRace.AvailableCharacters != null)
            {
                character = DominantRace.AvailableCharacters.ObtainNextCharacter(role);
            }
            if (character == null)
            {
                Race race = DominantRace;
                if (role != CharacterRole.Leader && role != CharacterRole.PirateLeader && Galaxy.Rnd.Next(0, 4) == 1)
                {
                    race = SelectRandomRaceFromColoniesPreferNonDominant();
                    if (race == null)
                    {
                        race = DominantRace;
                    }
                }
                if (race == null)
                {
                    race = _Galaxy.SelectRandomRace(0);
                }
                string name = GenerateAgentName(race);
                character = new Character(name, role, string.Empty, race, this, location, 0);
                isRandomCharacter = true;
            }
            if (character != null)
            {
                if (isRandomCharacter)
                {
                    ApplyRandomCharacterSkillsTraits(character, boostSkillLevels: false);
                }
                if (character.Role == CharacterRole.Leader || character.Role == CharacterRole.Scientist || character.Role == CharacterRole.PirateLeader)
                {
                    character.BonusesKnown = true;
                }
                if (activate && location != null)
                {
                    character.Activate(_Galaxy, this, location);
                    _Galaxy.DoCharacterEvent(CharacterEventType.CharacterStart, character, character);
                    short matchingGameEventIdCharacterAppears = _Galaxy.GetMatchingGameEventIdCharacterAppears(character);
                    _Galaxy.CheckTriggerEvent(matchingGameEventIdCharacterAppears, this, EventTriggerType.CharacterAppears, character);
                }
            }
            BaconEmpire.EnhanceCharacter(this, character);
            return character;
        }

        public Character GenerateNewCharacterRandom(CharacterRole role, StellarObject location, bool activate)
        {
            Race race = DominantRace;
            if (role != CharacterRole.Leader && role != CharacterRole.PirateLeader && Galaxy.Rnd.Next(0, 4) == 1)
            {
                race = SelectRandomRaceFromColoniesPreferNonDominant();
                if (race == null)
                {
                    race = DominantRace;
                }
            }
            if (race == null)
            {
                race = _Galaxy.SelectRandomRace(0);
            }
            string name = GenerateAgentName(race);
            Character character = new Character(name, role, string.Empty, race, this, location, 0);
            ApplyRandomCharacterSkillsTraits(character, boostSkillLevels: false);
            if (character.Role == CharacterRole.Leader || character.Role == CharacterRole.Scientist || character.Role == CharacterRole.PirateLeader)
            {
                character.BonusesKnown = true;
            }
            if (activate && location != null)
            {
                character.Activate(_Galaxy, this, location);
                _Galaxy.DoCharacterEvent(CharacterEventType.CharacterStart, character, character);
                short matchingGameEventIdCharacterAppears = _Galaxy.GetMatchingGameEventIdCharacterAppears(character);
                _Galaxy.CheckTriggerEvent(matchingGameEventIdCharacterAppears, this, EventTriggerType.CharacterAppears, character);
            }
            return character;
        }

        public Race SelectRandomRaceFromColoniesPreferNonDominant()
        {
            Race race = null;
            if (Colonies != null && Colonies.Count > 0 && DominantRace != null)
            {
                int num = 0;
                while ((race == null || race == DominantRace) && num < 10)
                {
                    int index = Galaxy.Rnd.Next(0, Colonies.Count);
                    Habitat habitat = Colonies[index];
                    if (habitat != null && habitat.Population != null && habitat.Population.Count > 0)
                    {
                        int index2 = Galaxy.Rnd.Next(0, habitat.Population.Count);
                        Population population = habitat.Population[index2];
                        if (population != null)
                        {
                            race = population.Race;
                            if (race != null)
                            {
                                if (race == DominantRace)
                                {
                                    race = null;
                                }
                                else if (race.FamilyId == DominantRace.FamilyId)
                                {
                                    if (habitat.ColonyPopulationPolicyRaceFamily != 0)
                                    {
                                        race = null;
                                    }
                                }
                                else if (habitat.ColonyPopulationPolicy != 0)
                                {
                                    race = null;
                                }
                            }
                        }
                    }
                    num++;
                }
            }
            return race;
        }

        public RaceList DetermineEmpireRaces(out List<long> populationAmounts)
        {
            RaceList raceList = new RaceList();
            populationAmounts = new List<long>();
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat == null || habitat.Population == null)
                    {
                        continue;
                    }
                    for (int j = 0; j < habitat.Population.Count; j++)
                    {
                        Population population = habitat.Population[j];
                        if (population != null)
                        {
                            int num = raceList.IndexOf(population.Race);
                            if (num >= 0)
                            {
                                populationAmounts[num] += population.Amount;
                                continue;
                            }
                            raceList.Add(population.Race);
                            populationAmounts.Add(population.Amount);
                        }
                    }
                }
            }
            return raceList;
        }

        public void ApplyRandomCharacterSkillsTraits(Character character, bool boostSkillLevels)
        {
            if (character == null)
            {
                return;
            }
            CharacterRole role = character.Role;
            List<CharacterSkillType> list = Character.DetermineValidSkillsForRole(role, primarySkills: true, secondarySkills: false);
            List<CharacterSkillType> list2 = Character.DetermineValidSkillsForRole(role, primarySkills: false, secondarySkills: true);
            int num = 4;
            int num2 = 1;
            if (PirateEmpireBaseHabitat != null && role == CharacterRole.IntelligenceAgent)
            {
                num2++;
                boostSkillLevels = true;
            }
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(Galaxy.Rnd.Next(0, 2) == 1, 50, ref iterationCount))
            {
                num2++;
                if (num2 >= list.Count + list2.Count || num2 >= num)
                {
                    break;
                }
            }
            List<CharacterSkillType> list3 = new List<CharacterSkillType>();
            for (int i = 0; i < num2; i++)
            {
                CharacterSkillType characterSkillType = CharacterSkillType.Undefined;
                int num3 = 0;
                while (characterSkillType == CharacterSkillType.Undefined && num3 < 20)
                {
                    if (list2.Count > 0 && Galaxy.Rnd.Next(0, 3) == 1)
                    {
                        int index = Galaxy.Rnd.Next(0, list2.Count);
                        characterSkillType = list2[index];
                    }
                    else if (list.Count > 0)
                    {
                        int index2 = Galaxy.Rnd.Next(0, list.Count);
                        characterSkillType = list[index2];
                    }
                    if (list3.Contains(characterSkillType))
                    {
                        characterSkillType = CharacterSkillType.Undefined;
                    }
                    num3++;
                }
                if (characterSkillType != 0 && !list3.Contains(characterSkillType))
                {
                    list3.Add(characterSkillType);
                }
            }
            for (int j = 0; j < list3.Count; j++)
            {
                int num4 = 0;
                int maxValue = 4;
                if (boostSkillLevels)
                {
                    maxValue = 6;
                }
                character.AddSkill(level: (character.Role != CharacterRole.Leader && character.Role != CharacterRole.PirateLeader) ? ((Galaxy.Rnd.Next(0, maxValue) != 1) ? ((!boostSkillLevels) ? Galaxy.Rnd.Next(5, 16) : Galaxy.Rnd.Next(7, 21)) : ((!boostSkillLevels) ? Galaxy.Rnd.Next(-5, -1) : Galaxy.Rnd.Next(-3, -1))) : ((Galaxy.Rnd.Next(0, maxValue) != 1) ? ((!boostSkillLevels) ? Galaxy.Rnd.Next(2, 10) : Galaxy.Rnd.Next(5, 13)) : ((!boostSkillLevels) ? Galaxy.Rnd.Next(-5, -1) : Galaxy.Rnd.Next(-3, -1))), skillType: list3[j], galaxy: null);
            }
            List<CharacterTraitType> list4 = Character.DetermineValidTraitsForRole(role, includeStartingTraits: true, includeHighlyNegativeTraits: false);
            int num5 = 2;
            int num6 = 1;
            if (PirateEmpireBaseHabitat != null && role == CharacterRole.IntelligenceAgent)
            {
                num6++;
            }
            int iterationCount2 = 0;
            while (Galaxy.ConditionCheckLimit(Galaxy.Rnd.Next(0, 2) == 1, 50, ref iterationCount2))
            {
                num6++;
                if (num6 >= list4.Count || num6 >= num5)
                {
                    break;
                }
            }
            List<CharacterTraitType> list5 = new List<CharacterTraitType>();
            for (int k = 0; k < num6; k++)
            {
                CharacterTraitType characterTraitType = CharacterTraitType.Undefined;
                int num7 = 0;
                while (characterTraitType == CharacterTraitType.Undefined && num7 < 20)
                {
                    if (list4.Count > 0)
                    {
                        int index3 = Galaxy.Rnd.Next(0, list4.Count);
                        characterTraitType = list4[index3];
                    }
                    if (list5.Contains(characterTraitType))
                    {
                        characterTraitType = CharacterTraitType.Undefined;
                    }
                    num7++;
                }
                if (characterTraitType != 0 && !list5.Contains(characterTraitType))
                {
                    list5.Add(characterTraitType);
                }
            }
            for (int l = 0; l < list5.Count; l++)
            {
                character.AddTrait(list5[l], starting: true, null);
            }
            if (DominantRace != null)
            {
                CharacterTraitType characterTraitType2 = CharacterTraitType.Undefined;
                switch (role)
                {
                    case CharacterRole.Ambassador:
                        characterTraitType2 = DominantRace.CharacterStartingTraitAmbassador;
                        break;
                    case CharacterRole.ColonyGovernor:
                        characterTraitType2 = DominantRace.CharacterStartingTraitGovernor;
                        break;
                    case CharacterRole.FleetAdmiral:
                        characterTraitType2 = DominantRace.CharacterStartingTraitAdmiral;
                        break;
                    case CharacterRole.IntelligenceAgent:
                        characterTraitType2 = DominantRace.CharacterStartingTraitIntelligenceAgent;
                        break;
                    case CharacterRole.Leader:
                        characterTraitType2 = DominantRace.CharacterStartingTraitLeader;
                        break;
                    case CharacterRole.Scientist:
                        characterTraitType2 = DominantRace.CharacterStartingTraitScientist;
                        break;
                    case CharacterRole.TroopGeneral:
                        characterTraitType2 = DominantRace.CharacterStartingTraitGeneral;
                        break;
                    case CharacterRole.PirateLeader:
                        characterTraitType2 = DominantRace.CharacterStartingTraitPirateLeader;
                        break;
                    case CharacterRole.ShipCaptain:
                        characterTraitType2 = DominantRace.CharacterStartingTraitShipCaptain;
                        break;
                }
                if (characterTraitType2 != 0 && !character.Traits.Contains(characterTraitType2))
                {
                    character.AddTrait(characterTraitType2, starting: true, null);
                }
            }
        }

        private void ReviewCharacterBonusesKnown()
        {
            if (Characters == null)
            {
                return;
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate - Galaxy.RealSecondsInGalacticYear * 1000;
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (character == null || character.BonusesKnown)
                {
                    continue;
                }
                switch (character.Role)
                {
                    case CharacterRole.Ambassador:
                        if (character.Location != null && character.Location is Habitat)
                        {
                            Habitat habitat2 = (Habitat)character.Location;
                            if (habitat2.Empire != character.Empire && habitat2.Empire != null && habitat2.Empire.Capital != null && habitat2.Empire.Capital == habitat2 && character.TransferArrivalDate < num)
                            {
                                character.BonusesKnown = true;
                            }
                        }
                        break;
                    case CharacterRole.ColonyGovernor:
                        if (character.Location != null && character.Location is Habitat)
                        {
                            Habitat habitat = (Habitat)character.Location;
                            if (habitat.Empire == character.Empire && character.TransferArrivalDate < num)
                            {
                                character.BonusesKnown = true;
                            }
                        }
                        break;
                }
            }
        }

        public long NextAllowableLeaderChangeDatePortion(double portion)
        {
            long nextAllowableLeaderChangeDate = NextAllowableLeaderChangeDate;
            long num = nextAllowableLeaderChangeDate - LastLeaderChangeDate;
            if (num > 0 && portion > 0.0)
            {
                long num2 = (long)((double)num * portion);
                return LastLeaderChangeDate + num2;
            }
            return nextAllowableLeaderChangeDate;
        }

        private void ReviewCharacterLeaderChange(double timePassed)
        {
            if (Characters == null || _Galaxy.DeferEventsForGameStart)
            {
                return;
            }
            if (Leader == null)
            {
                if (DominantRace != null && DominantRace.VictoryConditions != null && !DominantRace.VictoryConditions.ContainsConditionType(RaceVictoryConditionType.KeepLeaderAlive))
                {
                    double num = 0.0;
                    double leaderChangeInfluence = 0.0;
                    if (_GovernmentAttributes != null)
                    {
                        leaderChangeInfluence = _GovernmentAttributes.LeaderReplacementBoost;
                        num = _GovernmentAttributes.LeaderReplacementDisruptionLevel;
                    }
                    if (num > 0.0)
                    {
                        _LeaderChangeInfluence = num * -1.0;
                    }
                    else
                    {
                        _LeaderChangeInfluence = leaderChangeInfluence;
                    }
                    PerformChangeLeader(2);
                }
            }
            else
            {
                if (DominantRace == null || DominantRace.VictoryConditions == null || DominantRace.VictoryConditions.ContainsConditionType(RaceVictoryConditionType.KeepLeaderAlive) || _LeaderChangeInfluence != 0.0)
                {
                    return;
                }
                double num2 = 1.0;
                int num3 = 0;
                if (_GovernmentAttributes != null)
                {
                    num2 = _GovernmentAttributes.LeaderReplacementLikeliness;
                    num3 = _GovernmentAttributes.LeaderReplacementCharacterPool;
                }
                _ = 1.0 / Math.Max(0.001, num2);
                num2 *= 0.2;
                num2 *= timePassed / (double)Galaxy.RealSecondsInGalacticYear;
                switch (num3)
                {
                    case 1:
                        {
                            double num9 = Math.Max(0.1, (double)Colonies.Count * 0.34);
                            double num10 = Math.Max(0.1, (double)Characters.CountCharactersByRole(CharacterRole.ColonyGovernor) / num9);
                            num2 *= num10;
                            break;
                        }
                    case 2:
                        {
                            double num6 = Math.Max(0.1, (double)Colonies.Count * 0.4);
                            double num7 = (double)Characters.CountCharactersByRole(CharacterRole.FleetAdmiral) + (double)Characters.CountCharactersByRole(CharacterRole.TroopGeneral);
                            double num8 = Math.Max(0.1, num7 / num6);
                            num2 *= num8;
                            break;
                        }
                    case 3:
                        {
                            double num4 = Math.Max(0.1, (double)Colonies.Count * 0.34);
                            double num5 = Math.Max(0.1, (double)Characters.CountCharactersByRole(CharacterRole.Scientist) / num4);
                            num2 *= num5;
                            break;
                        }
                }
                if (WarWeariness > 0.0)
                {
                    double num11 = 1.0 + WarWeariness / 15.0;
                    num2 *= num11;
                }
                int num12 = Math.Max(1, Leader.GetSkillLevelTotal());
                double num13 = Math.Min(2.5, 50.0 / (double)num12);
                num2 *= num13;
                if (Leader.Traits.Contains(CharacterTraitType.Demoralizing))
                {
                    num2 *= 3.0;
                }
                if (Galaxy.Rnd.NextDouble() * 2.0 < num2 && _Galaxy.CurrentStarDate > NextAllowableLeaderChangeDate)
                {
                    PerformChangeLeader();
                    double num14 = 0.0;
                    double leaderChangeInfluence2 = 0.0;
                    if (_GovernmentAttributes != null)
                    {
                        num14 = _GovernmentAttributes.LeaderReplacementDisruptionLevel;
                        leaderChangeInfluence2 = _GovernmentAttributes.LeaderReplacementBoost;
                    }
                    if (num14 > 0.0)
                    {
                        _LeaderChangeInfluence = num14 * -1.0;
                    }
                    else
                    {
                        _LeaderChangeInfluence = leaderChangeInfluence2;
                    }
                }
            }
        }

        public Character PerformChangeLeader()
        {
            return PerformChangeLeader(int.MinValue);
        }

        public Character PerformChangeLeader(int changeTypeOverride)
        {
            CharacterList characterList = new CharacterList();
            CharacterTraitType characterTraitType = CharacterTraitType.Undefined;
            int num = 1;
            if (GovernmentAttributes != null)
            {
                switch (GovernmentAttributes.LeaderReplacementTypicalManner)
                {
                    case 0:
                        num = 0;
                        break;
                    case 1:
                        num = -1;
                        break;
                    case 2:
                        num = 1;
                        break;
                }
                switch (GovernmentAttributes.LeaderReplacementCharacterPool)
                {
                    case 1:
                        characterList = Characters.GetCharactersByRole(CharacterRole.ColonyGovernor);
                        break;
                    case 2:
                        characterList = Characters.GetCharactersByRole(CharacterRole.FleetAdmiral);
                        characterList.AddRange(Characters.GetCharactersByRole(CharacterRole.TroopGeneral));
                        break;
                    case 3:
                        characterList = Characters.GetCharactersByRole(CharacterRole.Scientist);
                        break;
                }
            }
            if (num == -1 && Galaxy.Rnd.Next(0, 3) == 1)
            {
                characterTraitType = CharacterTraitType.Courageous;
            }
            if (PirateEmpireBaseHabitat != null)
            {
                characterList = Characters.GetCharactersByRole(CharacterRole.FleetAdmiral);
                characterList.AddRange(Characters.GetCharactersByRole(CharacterRole.ShipCaptain));
                num = -1;
            }
            if (changeTypeOverride != int.MinValue)
            {
                num = changeTypeOverride;
            }
            Character character = ChangeLeader(characterList, num);
            if (character != null && characterTraitType != 0)
            {
                character.AddTrait(characterTraitType, starting: true, null);
            }
            LastLeaderChangeDate = _Galaxy.CurrentStarDate;
            return character;
        }

        private Character ChangeLeader(CharacterList newLeaderPool, int changeType)
        {
            Character leader = Leader;
            string text = string.Empty;
            if (leader != null)
            {
                text = leader.Name;
            }
            if (Leader != null)
            {
                Leader.Kill(_Galaxy);
                Leader = null;
            }
            if (newLeaderPool != null && newLeaderPool.Count > 0)
            {
                Character character = newLeaderPool[Galaxy.Rnd.Next(0, newLeaderPool.Count)];
                CharacterRole role = character.Role;
                if (PirateEmpireBaseHabitat != null)
                {
                    BuiltObject builtObject = _Galaxy.IdentifyPirateBase(this);
                    if (builtObject != null)
                    {
                        character.CompleteLocationTransfer(builtObject, _Galaxy);
                    }
                    else if (BuiltObjects.Count > 0)
                    {
                        character.CompleteLocationTransfer(BuiltObjects[0], _Galaxy);
                    }
                    else if (PrivateBuiltObjects.Count > 0)
                    {
                        character.CompleteLocationTransfer(PrivateBuiltObjects[0], _Galaxy);
                    }
                }
                else
                {
                    character.CompleteLocationTransfer(Capital, _Galaxy);
                }
                if (PirateEmpireBaseHabitat == null || role != CharacterRole.FleetAdmiral)
                {
                    character.RemoveAllSkillsAndTraits();
                }
                if (PirateEmpireBaseHabitat != null)
                {
                    character.Role = CharacterRole.PirateLeader;
                }
                else
                {
                    character.Role = CharacterRole.Leader;
                }
                ApplyRandomCharacterSkillsTraits(character, boostSkillLevels: true);
                character.BonusesKnown = true;
                Leader = character;
                switch (changeType)
                {
                    case -1:
                        {
                            string text5 = TextResolver.GetText("Leader Change Coup Title");
                            string message4 = string.Format(TextResolver.GetText("Leader Change Coup From Existing"), text, character.Name, Galaxy.ResolveDescription(role));
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text5, message4, character, Capital);
                            break;
                        }
                    case 0:
                        {
                            string text4 = TextResolver.GetText("Leader Change Replaced Title");
                            string message3 = string.Format(TextResolver.GetText("Leader Change Replaced From Existing"), text, character.Name, Galaxy.ResolveDescription(role));
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text4, message3, character, Capital);
                            break;
                        }
                    case 1:
                        {
                            string text3 = TextResolver.GetText("Leader Change Election Title");
                            string message2 = string.Format(TextResolver.GetText("Leader Change Election From Existing"), text, character.Name, Galaxy.ResolveDescription(role));
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text3, message2, character, Capital);
                            break;
                        }
                    default:
                        {
                            string text2 = TextResolver.GetText("Leader New Title");
                            string message = string.Format(TextResolver.GetText("Leader New From Existing"), character.Name, Galaxy.ResolveDescription(role));
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text2, message, character, Capital);
                            break;
                        }
                }
                return character;
            }
            Character character2 = null;
            if (PirateEmpireBaseHabitat != null)
            {
                BuiltObject builtObject2 = _Galaxy.IdentifyPirateBase(this);
                if (builtObject2 != null)
                {
                    character2 = GenerateNewCharacter(CharacterRole.PirateLeader, builtObject2);
                }
                else if (BuiltObjects.Count > 0)
                {
                    character2 = GenerateNewCharacter(CharacterRole.PirateLeader, BuiltObjects[0]);
                }
                else if (PrivateBuiltObjects.Count > 0)
                {
                    character2 = GenerateNewCharacter(CharacterRole.PirateLeader, PrivateBuiltObjects[0]);
                }
            }
            else
            {
                character2 = GenerateNewCharacter(CharacterRole.Leader, Capital);
            }
            if (character2 != null)
            {
                int num = 0;
                while (character2.Name == text && num < 20)
                {
                    character2.Name = GenerateAgentName();
                    num++;
                }
                Leader = character2;
                switch (changeType)
                {
                    case -1:
                        {
                            string text9 = TextResolver.GetText("Leader Change Coup Title");
                            string message8 = string.Format(TextResolver.GetText("Leader Change Coup"), text, character2.Name);
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text9, message8, character2, Capital);
                            break;
                        }
                    case 0:
                        {
                            string text8 = TextResolver.GetText("Leader Change Replaced Title");
                            string message7 = string.Format(TextResolver.GetText("Leader Change Replaced"), text, character2.Name);
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text8, message7, character2, Capital);
                            break;
                        }
                    case 1:
                        {
                            string text7 = TextResolver.GetText("Leader Change Election Title");
                            string message6 = string.Format(TextResolver.GetText("Leader Change Election"), text, character2.Name);
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text7, message6, character2, Capital);
                            break;
                        }
                    default:
                        {
                            string text6 = TextResolver.GetText("Leader New Title");
                            string message5 = string.Format(TextResolver.GetText("Leader New"), character2.Name);
                            SendEventMessageToEmpire(EventMessageType.LeaderChange, text6, message5, character2, Capital);
                            break;
                        }
                }
                return character2;
            }
            return null;
        }

        private void ProcessLeaderChangeInfluence(double timePassed)
        {
            double num = timePassed / ((double)Galaxy.RealSecondsInGalacticYear / 2.0);
            if (_LeaderChangeInfluence < 0.0)
            {
                if (PirateEmpireBaseHabitat == null && Colonies != null && Colonies.Count > 1)
                {
                    for (int i = 0; i < Colonies.Count; i++)
                    {
                        Habitat habitat = Colonies[i];
                        if (habitat != null && !habitat.Rebelling && Galaxy.Rnd.NextDouble() * 2.0 < Math.Abs(_LeaderChangeInfluence) && Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            habitat.HappinessModifier = (float)(-15.0 + Galaxy.Rnd.NextDouble() * -15.0);
                            habitat.StartRebelling();
                            string description = string.Format(TextResolver.GetText("Leader Change Disruption Colony Rebel"), habitat.Name);
                            SendMessageToEmpire(this, EmpireMessageType.ColonyRebelling, habitat, description);
                        }
                    }
                }
                long num2 = LastLeaderChangeDate + (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * 0.5);
                if (_Galaxy.CurrentStarDate > num2 && Galaxy.Rnd.NextDouble() * 10.0 < Math.Abs(_LeaderChangeInfluence))
                {
                    ChangeLeader(null, -1);
                }
                _LeaderChangeInfluence += num;
                if (_LeaderChangeInfluence >= 0.0)
                {
                    _LeaderChangeInfluence = 0.0;
                }
            }
            else
            {
                if (!(_LeaderChangeInfluence > 0.0))
                {
                    return;
                }
                if (WarWearinessRaw > 0.0)
                {
                    double num3 = timePassed / (double)Galaxy.RealSecondsInGalacticYear * 15.0 * _LeaderChangeInfluence;
                    WarWearinessRaw -= num3;
                    if (WarWearinessRaw < 0.0)
                    {
                        WarWearinessRaw = 0.0;
                    }
                }
                _LeaderChangeInfluence -= num;
                if (_LeaderChangeInfluence <= 0.0)
                {
                    _LeaderChangeInfluence = 0.0;
                }
            }
        }

        private void ReviewCharacterTraits()
        {
            if (Characters == null)
            {
                return;
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            double stateMoney = StateMoney;
            double num = CalculateAccurateAnnualCashflow();
            double num2 = AverageHappiness();
            double num3 = AverageStateCashPerPopulation();
            double num4 = AverageCashflowPerPopulation();
            double num5 = AverageShipMaintenancePerPopulation();
            double num6 = AverageSpaceportsPerColony();
            double num7 = AverageResearchStationsPerColony();
            double num8 = AverageCapitalShipsPerColony();
            double num9 = AverageMiningStationsPerColony();
            double num10 = AverageConstructionShipsPerColony();
            double num11 = _Galaxy.CalculateAverageHappiness();
            double num12 = _Galaxy.CalculateAverageCashflowPerPopulation();
            double num13 = _Galaxy.CalculateAverageStateCashPerPopulation();
            double num14 = _Galaxy.CalculateAverageShipMaintenancePerPopulation();
            double num15 = _Galaxy.CalculateAverageSpaceportsPerColony();
            double num16 = _Galaxy.CalculateAverageResearchStationsPerColony();
            double num17 = _Galaxy.CalculateAverageCapitalShipsPerColony();
            double num18 = _Galaxy.CalculateAverageMiningStationsPerColony();
            double num19 = _Galaxy.CalculateAverageConstructionShipsPerColony();
            double num20 = _Galaxy.CalculateAverageCorruption();
            CharacterList characterList = new CharacterList();
            int num21 = Galaxy.Rnd.Next(0, Characters.Count);
            for (int i = num21; i < Characters.Count; i++)
            {
                characterList.Add(Characters[i]);
            }
            for (int j = 0; j < num21; j++)
            {
                characterList.Add(Characters[j]);
            }
            for (int k = 0; k < characterList.Count; k++)
            {
                Character character = characterList[k];
                if (character == null || !character.BonusesKnown)
                {
                    continue;
                }
                if (Galaxy.Rnd.Next(0, 90) == 1)
                {
                    List<CharacterTraitType> traits = Character.DetermineValidTraitsForRole(character.Role);
                    double num22 = 0.0;
                    double num23 = 0.0;
                    double num24 = 0.0;
                    double num25 = 0.0;
                    double num26 = 0.0;
                    double num27 = 0.0;
                    bool flag = true;
                    long val = currentStarDate;
                    int num28 = 0;
                    long val2 = currentStarDate;
                    long val3 = currentStarDate;
                    switch (character.Role)
                    {
                        case CharacterRole.PirateLeader:
                            num22 = num;
                            break;
                        case CharacterRole.Leader:
                            num23 = num2;
                            num22 = num;
                            num24 = num4;
                            num25 = num3;
                            num26 = num5;
                            num27 = Corruption;
                            break;
                        case CharacterRole.ColonyGovernor:
                            if (character.Location != null && character.Location is Habitat)
                            {
                                Habitat habitat2 = (Habitat)character.Location;
                                if (habitat2 != null && habitat2.Empire == character.Empire && habitat2.Population != null)
                                {
                                    num23 = habitat2.EmpireApprovalRating;
                                    num22 = habitat2.AnnualTaxRevenue;
                                    num24 = num22 / (double)habitat2.Population.TotalAmount;
                                    num25 = num3;
                                    num26 = num5;
                                    num27 = habitat2.Corruption;
                                }
                            }
                            val3 = character.EventHistory.GetDateOfMostRecentEventByType(CharacterEventType.TroopComplete);
                            break;
                        case CharacterRole.Ambassador:
                            flag = false;
                            if (character.Location != null && character.Location is Habitat)
                            {
                                Habitat habitat = (Habitat)character.Location;
                                if (habitat != null && habitat.Empire != null && habitat.Empire != character.Empire && habitat.Empire.Capital != null && habitat.Empire.Capital == habitat)
                                {
                                    flag = true;
                                }
                            }
                            break;
                        case CharacterRole.FleetAdmiral:
                            val = character.EventHistory.GetDateOfMostRecentEventByType(CharacterEventType.SpaceBattle);
                            num28 = character.EventHistory.CountEventsByType(CharacterEventType.HyperjumpExit);
                            val2 = character.EventHistory.GetDateOfMostRecentEventByType(CharacterEventType.HyperjumpExit);
                            break;
                        case CharacterRole.ShipCaptain:
                            val = character.EventHistory.GetDateOfMostRecentEventByType(CharacterEventType.SpaceBattle);
                            num28 = character.EventHistory.CountEventsByType(CharacterEventType.HyperjumpExit);
                            val2 = character.EventHistory.GetDateOfMostRecentEventByType(CharacterEventType.HyperjumpExit);
                            break;
                        case CharacterRole.TroopGeneral:
                            val = character.EventHistory.GetDateOfMostRecentEventByType(CharacterEventType.GroundInvasion);
                            val3 = character.EventHistory.GetDateOfMostRecentEventByType(CharacterEventType.TroopComplete);
                            break;
                    }
                    List<CharacterTraitType> list = new List<CharacterTraitType>();
                    if (PirateEmpireBaseHabitat != null)
                    {
                        if (stateMoney > 0.0 && num22 > 5000.0)
                        {
                            list.Add(CharacterTraitType.GoodAdministrator);
                        }
                        else if (stateMoney < 0.0 && num22 < 0.0)
                        {
                            list.Add(CharacterTraitType.PoorAdministrator);
                        }
                        if (Math.Max(val, character.StartDate) < currentStarDate - Galaxy.RealSecondsInGalacticYear * 1000 * 3)
                        {
                            list.Add(CharacterTraitType.Drunk);
                        }
                        if (num28 > 15 && Math.Max(val2, character.StartDate) > currentStarDate - (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * 0.5))
                        {
                            list.Add(CharacterTraitType.SkilledNavigator);
                            list.Add(CharacterTraitType.GoodSpaceLogistician);
                        }
                        else if (Math.Max(val2, character.StartDate) < currentStarDate - Galaxy.RealSecondsInGalacticYear * 1000 * 2)
                        {
                            list.Add(CharacterTraitType.PoorNavigator);
                            list.Add(CharacterTraitType.PoorSpaceLogistician);
                        }
                    }
                    else
                    {
                        if (num23 > num11 * 1.5)
                        {
                            list.Add(CharacterTraitType.Famous);
                        }
                        else if (num23 < num11 * 0.4)
                        {
                            list.Add(CharacterTraitType.Disliked);
                        }
                        if (num25 > num13 * 1.3 && num24 > num12 * 1.3)
                        {
                            list.Add(CharacterTraitType.GoodAdministrator);
                        }
                        else if (stateMoney < 0.0 && num22 < 0.0)
                        {
                            list.Add(CharacterTraitType.PoorAdministrator);
                        }
                        if (num26 > num14 * 1.3 && num22 > 0.0)
                        {
                            list.Add(CharacterTraitType.BeanCounter);
                        }
                        else if (num26 < num14 * 0.7 && num22 > 0.0)
                        {
                            list.Add(CharacterTraitType.Generous);
                        }
                        if ((Designs != null && Designs.FindNewestCanBuild(BuiltObjectSubRole.CapitalShip) != null && num8 < num17 * 0.33) || num6 < num15 * 0.4 || num7 < num16 * 0.33)
                        {
                            list.Add(CharacterTraitType.Luddite);
                        }
                        if (num10 < num19 * 0.5 || num9 < num18 * 0.5)
                        {
                            list.Add(CharacterTraitType.Environmentalist);
                        }
                        else if (num10 > num19 * 1.5 || num9 > num18 * 1.5)
                        {
                            list.Add(CharacterTraitType.Industrialist);
                        }
                        if (num5 < num14 * 0.4 && num22 > 0.0)
                        {
                            list.Add(CharacterTraitType.Disorganized);
                        }
                        if (num27 > num20 * 1.5)
                        {
                            list.Add(CharacterTraitType.Measured);
                            list.Add(CharacterTraitType.IntelligenceMeasured);
                            if (num27 > num20 * 2.2)
                            {
                                list.Add(CharacterTraitType.Addict);
                                list.Add(CharacterTraitType.Corrupt);
                                list.Add(CharacterTraitType.IntelligenceAddict);
                                list.Add(CharacterTraitType.IntelligenceCorrupt);
                            }
                        }
                        else if (num27 < num20 * 0.5)
                        {
                            list.Add(CharacterTraitType.Sober);
                            list.Add(CharacterTraitType.IntelligenceSober);
                        }
                        if (num23 > num11 * 1.7 && num25 > num13 * 1.7 && num22 > 0.0)
                        {
                            list.Add(CharacterTraitType.Uninhibited);
                            list.Add(CharacterTraitType.Addict);
                            list.Add(CharacterTraitType.IntelligenceUninhibited);
                            list.Add(CharacterTraitType.IntelligenceAddict);
                        }
                        else if (num23 < num11 * 0.5)
                        {
                            list.Add(CharacterTraitType.Measured);
                            list.Add(CharacterTraitType.Sober);
                            list.Add(CharacterTraitType.PoorSpeaker);
                            list.Add(CharacterTraitType.IntelligenceMeasured);
                            list.Add(CharacterTraitType.IntelligenceSober);
                            list.Add(CharacterTraitType.IntelligencePoorSpeaker);
                        }
                        if (Policy.NewColonyPopulationPolicyAllRaces == ColonyPopulationPolicy.Assimilate)
                        {
                            list.Add(CharacterTraitType.Tolerant);
                            list.Add(CharacterTraitType.IntelligenceTolerant);
                        }
                        else if (Policy.NewColonyPopulationPolicyAllRaces == ColonyPopulationPolicy.Enslave || Policy.NewColonyPopulationPolicyAllRaces == ColonyPopulationPolicy.Exterminate)
                        {
                            list.Add(CharacterTraitType.Xenophobic);
                            list.Add(CharacterTraitType.IntelligenceXenophobic);
                        }
                        if (num25 > num13 * 2.2 && num22 > 0.0)
                        {
                            list.Add(CharacterTraitType.Corrupt);
                            list.Add(CharacterTraitType.IntelligenceCorrupt);
                        }
                        else if (num27 < num20 * 0.7)
                        {
                            list.Add(CharacterTraitType.Lawful);
                            list.Add(CharacterTraitType.IntelligenceLawful);
                        }
                        if (num23 > num11 * 3.0)
                        {
                            list.Add(CharacterTraitType.Lazy);
                        }
                        if (!flag)
                        {
                            list.Add(CharacterTraitType.TongueTied);
                        }
                        if (Math.Max(val, character.StartDate) < currentStarDate - Galaxy.RealSecondsInGalacticYear * 1000 * 3)
                        {
                            list.Add(CharacterTraitType.Drunk);
                        }
                        if (num28 > 15 && Math.Max(val2, character.StartDate) > currentStarDate - (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * 0.5))
                        {
                            list.Add(CharacterTraitType.SkilledNavigator);
                            list.Add(CharacterTraitType.GoodSpaceLogistician);
                        }
                        else if (Math.Max(val2, character.StartDate) < currentStarDate - Galaxy.RealSecondsInGalacticYear * 1000 * 2)
                        {
                            list.Add(CharacterTraitType.PoorNavigator);
                            list.Add(CharacterTraitType.PoorSpaceLogistician);
                        }
                        if (Math.Max(val3, character.StartDate) < currentStarDate - Galaxy.RealSecondsInGalacticYear * 1000 * 2)
                        {
                            list.Add(CharacterTraitType.PoorRecruiter);
                            if (Math.Max(val, character.StartDate) < currentStarDate - Galaxy.RealSecondsInGalacticYear * 1000 * 3)
                            {
                                list.Add(CharacterTraitType.PoorGroundLogistician);
                            }
                        }
                    }
                    List<CharacterTraitType> list2 = _Galaxy.IntersectTraitLists(list, traits);
                    if (list2 != null && list2.Count > 0)
                    {
                        CharacterTraitType characterTraitType = list2[Galaxy.Rnd.Next(0, list2.Count)];
                        if (character.AddTrait(characterTraitType, starting: false, _Galaxy))
                        {
                            string description = string.Format(TextResolver.GetText("Character New Trait Review"), Galaxy.ResolveDescription(character.Role), character.Name, Galaxy.ResolveDescription(characterTraitType));
                            character.Empire.SendMessageToEmpire(character.Empire, EmpireMessageType.CharacterSkillTraitChange, character, description);
                            break;
                        }
                    }
                }
                if (character.EventHistory.Count <= 30)
                {
                    continue;
                }
                int num29 = character.EventHistory.Count - 30;
                long num30 = _Galaxy.CurrentStarDate - Galaxy.RealSecondsInGalacticYear * 1000 * 3;
                CharacterEventList characterEventList = new CharacterEventList();
                for (int l = 0; l < character.EventHistory.Count; l++)
                {
                    if (characterEventList.Count < num29)
                    {
                        CharacterEvent characterEvent = character.EventHistory[l];
                        if (characterEvent != null && !Galaxy.DetermineCharacterEventIsPublic(characterEvent.Type) && characterEvent.StarDate < num30)
                        {
                            characterEventList.Add(characterEvent);
                        }
                    }
                }
                for (int m = 0; m < characterEventList.Count; m++)
                {
                    character.EventHistory.Remove(characterEventList[m]);
                }
            }
        }

        private void ReviewDemoralizingCharacters()
        {
            if (!_ControlCharacterLocations)
            {
                return;
            }
            CharacterList characterList = new CharacterList();
            if (Characters != null)
            {
                for (int i = 0; i < Characters.Count; i++)
                {
                    Character character = Characters[i];
                    if (character.Traits.Contains(CharacterTraitType.Demoralizing))
                    {
                        characterList.Add(character);
                    }
                }
            }
            for (int j = 0; j < characterList.Count; j++)
            {
                Character character2 = characterList[j];
                if (character2 != null && character2.GetSkillLevelTotal() < Galaxy.Rnd.Next(15, 30))
                {
                    character2.SendDeathMessage(CharacterDeathType.Dismissed, _Galaxy);
                    character2.Kill(_Galaxy);
                }
            }
        }

        private void ReviewCharacterLocations()
        {
            if (Characters == null)
            {
                return;
            }
            for (int i = 0; i < Characters.Count; i++)
            {
                Character character = Characters[i];
                if (_ControlCharacterLocations)
                {
                    ReviewCharacterLocation(character, transferToLocation: true);
                }
                ApplyCharacterLocationBonusToOtherCharacters(character);
            }
        }

        private void ApplyCharacterLocationBonusToOtherCharacters(Character character)
        {
            if (character == null || character.Location == null || character.Empire == null || character.Empire.Characters == null)
            {
                return;
            }
            bool flag = character.Traits.Contains(CharacterTraitType.InspiringPresence);
            bool flag2 = character.Traits.Contains(CharacterTraitType.Demoralizing);
            if (!flag && !flag2)
            {
                return;
            }
            CharacterList characterList = new CharacterList();
            switch (character.Role)
            {
                case CharacterRole.FleetAdmiral:
                case CharacterRole.TroopGeneral:
                    if (character.Location is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)character.Location;
                        if (builtObject != null)
                        {
                            if (builtObject.ShipGroup != null)
                            {
                                characterList.AddRange(character.Empire.Characters.GetFleetAdmiralsAndGenerals(builtObject.ShipGroup));
                            }
                            else
                            {
                                characterList.AddRange(builtObject.Characters);
                            }
                        }
                    }
                    else
                    {
                        characterList.AddRange(character.Empire.Characters.FindCharactersAtLocation(character.Location));
                    }
                    break;
                default:
                    characterList.AddRange(character.Empire.Characters.FindCharactersAtLocation(character.Location));
                    break;
            }
            if (characterList.Contains(character))
            {
                characterList.Remove(character);
            }
            for (int i = 0; i < characterList.Count; i++)
            {
                if (characterList[i].Skills == null || characterList[i].Skills.Count <= 0)
                {
                    continue;
                }
                CharacterSkill characterSkill = characterList[i].Skills[Galaxy.Rnd.Next(0, characterList[i].Skills.Count)];
                if (characterSkill != null)
                {
                    if (flag)
                    {
                        characterList[i].IncrementSkillProgress(characterSkill.Type, 0.05f, _Galaxy);
                    }
                    else if (flag2)
                    {
                        characterList[i].IncrementSkillProgress(characterSkill.Type, -0.05f, _Galaxy);
                    }
                }
            }
        }

        public bool CheckLocationSafeForDemoralizingCharacter(bool characterIsDemoralizing, StellarObject location, Character characterToExclude)
        {
            if (characterIsDemoralizing)
            {
                return CheckLocationSafeForDemoralizingCharacter(location, characterToExclude);
            }
            return true;
        }

        public bool CheckLocationSafeForDemoralizingCharacter(StellarObject location, Character characterToExclude)
        {
            if (location != null && location.Characters != null)
            {
                CharacterList characterList = location.Characters.FindCharactersAtLocationNotTransferring(location, this, null);
                if (characterList != null && characterList.Count > 0)
                {
                    return false;
                }
            }
            return true;
        }

        public bool CheckLocationSafeForDemoralizingCharacter(bool characterIsDemoralizing, ShipGroup fleet, Character characterToExclude)
        {
            if (characterIsDemoralizing)
            {
                return CheckLocationSafeForDemoralizingCharacter(fleet, characterToExclude);
            }
            return true;
        }

        public bool CheckLocationSafeForDemoralizingCharacter(ShipGroup fleet, Character characterToExclude)
        {
            if (fleet != null)
            {
                CharacterList characterList = fleet.ObtainCharacters();
                if (characterList != null)
                {
                    CharacterList nonTransferringCharacters = characterList.GetNonTransferringCharacters(CharacterRole.Undefined, characterToExclude);
                    if (nonTransferringCharacters != null && nonTransferringCharacters.Count > 0)
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        private StellarObject ReviewCharacterLocation(Character character, bool transferToLocation)
        {
            if (character != null && character.TransferDestination == null && character.TransferTimeRemaining <= 0f)
            {
                _ = character.Location;
                Empire empire = character.DetermineLocationEmpire();
                bool flag = character.Traits.Contains(CharacterTraitType.Demoralizing);
                if (flag && character.Role != CharacterRole.Leader && !CheckLocationSafeForDemoralizingCharacter(character.Location, character))
                {
                    if (PirateEmpireBaseHabitat != null)
                    {
                        for (int i = 0; i < BuiltObjects.Count; i++)
                        {
                            BuiltObject builtObject = BuiltObjects[i];
                            if (builtObject != null && builtObject.Role == BuiltObjectRole.Base && CheckLocationSafeForDemoralizingCharacter(flag, builtObject, character))
                            {
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(builtObject, _Galaxy);
                                }
                                return builtObject;
                            }
                        }
                    }
                    else if (Colonies != null)
                    {
                        HabitatList habitatsPopulationBelowThreshold = Colonies.GetHabitatsPopulationBelowThreshold(500000000L, HabitatType.Undefined);
                        for (int j = 0; j < habitatsPopulationBelowThreshold.Count; j++)
                        {
                            Habitat habitat = habitatsPopulationBelowThreshold[j];
                            if (habitat != null && CheckLocationSafeForDemoralizingCharacter(flag, habitat, character))
                            {
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(habitat, _Galaxy);
                                }
                                return habitat;
                            }
                        }
                        for (int k = 0; k < Colonies.Count; k++)
                        {
                            Habitat habitat2 = Colonies[k];
                            if (habitat2 != null && CheckLocationSafeForDemoralizingCharacter(flag, habitat2, character))
                            {
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(habitat2, _Galaxy);
                                }
                                return habitat2;
                            }
                        }
                    }
                }
                switch (character.Role)
                {
                    case CharacterRole.Ambassador:
                        {
                            CharacterList charactersByRole4 = Characters.GetCharactersByRole(CharacterRole.Ambassador);
                            double num13 = 0.0;
                            Empire empire2 = null;
                            if (Reclusive)
                            {
                                break;
                            }
                            for (int num14 = 0; num14 < DiplomaticRelations.Count; num14++)
                            {
                                DiplomaticRelation diplomaticRelation = DiplomaticRelations[num14];
                                if (diplomaticRelation == null || diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.OtherEmpire == null || diplomaticRelation.OtherEmpire.Reclusive || diplomaticRelation.OtherEmpire.Capital == null)
                                {
                                    continue;
                                }
                                Habitat systemStar = Galaxy.DetermineHabitatSystemStar(diplomaticRelation.OtherEmpire.Capital);
                                if (!CheckSystemExplored(systemStar))
                                {
                                    continue;
                                }
                                bool flag5 = false;
                                for (int num15 = 0; num15 < charactersByRole4.Count; num15++)
                                {
                                    Character character4 = charactersByRole4[num15];
                                    if (character4 != character)
                                    {
                                        Empire empire3 = character4.DetermineLocationEmpireWithTransfer();
                                        if (empire3 == diplomaticRelation.OtherEmpire)
                                        {
                                            flag5 = true;
                                            break;
                                        }
                                    }
                                }
                                if (flag5)
                                {
                                    continue;
                                }
                                double num16 = 0.0;
                                switch (diplomaticRelation.Strategy)
                                {
                                    case DiplomaticStrategy.Ally:
                                        if (diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation.Type != DiplomaticRelationType.Protectorate)
                                        {
                                            num16 = 100.0;
                                        }
                                        break;
                                    case DiplomaticStrategy.Befriend:
                                        if (diplomaticRelation.Type != DiplomaticRelationType.FreeTradeAgreement && diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation.Type != DiplomaticRelationType.Protectorate)
                                        {
                                            num16 = 50.0;
                                        }
                                        break;
                                    case DiplomaticStrategy.DefendPlacate:
                                        if (diplomaticRelation.Type != DiplomaticRelationType.War)
                                        {
                                            num16 = 25.0;
                                        }
                                        break;
                                    case DiplomaticStrategy.Placate:
                                        if (diplomaticRelation.Type != DiplomaticRelationType.War)
                                        {
                                            num16 = 10.0;
                                        }
                                        break;
                                    default:
                                        num16 = 1.0;
                                        break;
                                }
                                num16 *= (double)diplomaticRelation.OtherEmpire.TotalColonyStrategicValue / 1000.0;
                                if (num16 > num13 && CheckLocationSafeForDemoralizingCharacter(flag, diplomaticRelation.OtherEmpire.Capital, character))
                                {
                                    num13 = num16;
                                    empire2 = diplomaticRelation.OtherEmpire;
                                }
                            }
                            if (empire2 != null && empire2.Capital != null && empire2 != empire)
                            {
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(empire2.Capital, _Galaxy);
                                }
                                return empire2.Capital;
                            }
                            break;
                        }
                    case CharacterRole.ColonyGovernor:
                        {
                            CharacterList charactersByRole3 = Characters.GetCharactersByRole(CharacterRole.ColonyGovernor);
                            if ((character.ColonyIncome > character.ColonyHappiness && character.ColonyIncome > character.PopulationGrowth) || (character.ColonyHappiness > character.ColonyIncome && character.ColonyHappiness > character.PopulationGrowth))
                            {
                                HabitatList habitatList = Colonies.OrderByRevenue();
                                for (int num7 = 0; num7 < habitatList.Count; num7++)
                                {
                                    Habitat habitat6 = habitatList[num7];
                                    if (habitat6 == character.Location)
                                    {
                                        break;
                                    }
                                    if (charactersByRole3.FindCharactersAtLocationOrTransferring(habitat6).Count <= 0 && CheckLocationSafeForDemoralizingCharacter(flag, habitat6, character))
                                    {
                                        if (transferToLocation)
                                        {
                                            character.TransferToNewLocation(habitat6, _Galaxy);
                                        }
                                        return habitat6;
                                    }
                                }
                            }
                            else
                            {
                                if (character.PopulationGrowth <= character.ColonyIncome || character.PopulationGrowth <= character.ColonyHappiness)
                                {
                                    break;
                                }
                                Habitat habitat7 = null;
                                if (character.Location != null && character.Location is Habitat && empire == this)
                                {
                                    habitat7 = (Habitat)character.Location;
                                    if (habitat7.Population != null)
                                    {
                                        long num8 = Math.Min(1000000000L, habitat7.MaximumPopulation - 10000000);
                                        if (habitat7.Population.TotalAmount < num8)
                                        {
                                            return habitat7;
                                        }
                                    }
                                }
                                Habitat habitat8 = habitat7;
                                double num9 = 0.0;
                                if (habitat8 != null)
                                {
                                    num9 = DetermineColonizationValue(habitat8);
                                }
                                for (int num10 = 0; num10 < Colonies.Count; num10++)
                                {
                                    Habitat habitat9 = Colonies[num10];
                                    if (habitat9.Population == null)
                                    {
                                        continue;
                                    }
                                    long num11 = Math.Min(1000000000L, habitat9.MaximumPopulation - 10000000);
                                    if (habitat9.Population.TotalAmount < num11)
                                    {
                                        double num12 = DetermineColonizationValue(habitat9);
                                        if (num12 > num9 && charactersByRole3.FindCharactersAtLocationOrTransferring(habitat9).Count <= 0 && CheckLocationSafeForDemoralizingCharacter(flag, habitat9, character))
                                        {
                                            habitat8 = habitat9;
                                            num9 = num12;
                                        }
                                    }
                                }
                                if (habitat8 != null && habitat8 != habitat7)
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(habitat8, _Galaxy);
                                    }
                                    return habitat8;
                                }
                            }
                            break;
                        }
                    case CharacterRole.PirateLeader:
                        {
                            List<CharacterSkillType> skills = Character.DetermineValidSkillsForRole(CharacterRole.FleetAdmiral, primarySkills: true, secondarySkills: false);
                            List<CharacterSkillType> skills2 = Character.DetermineValidSkillsForRole(CharacterRole.Leader, primarySkills: false, secondarySkills: true);
                            int num21 = character.TotalSkillValuesIfPresent(skills);
                            int num22 = character.TotalSkillValuesIfPresent(skills2);
                            if (num22 > num21)
                            {
                                BuiltObject builtObject5 = _Galaxy.IdentifyPirateBase(this);
                                if (builtObject5 != null && !builtObject5.HasBeenDestroyed && character.Location != builtObject5 && CheckLocationSafeForDemoralizingCharacter(flag, builtObject5, character))
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(builtObject5, _Galaxy);
                                    }
                                    return builtObject5;
                                }
                            }
                            else
                            {
                                if (ShipGroups == null || ShipGroups.Count <= 0)
                                {
                                    break;
                                }
                                ShipGroup shipGroup9 = ShipGroups.IdentifyLargestFleet();
                                if (shipGroup9 != null && shipGroup9.LeadShip != null)
                                {
                                    if (character.Location != shipGroup9.LeadShip && CheckLocationSafeForDemoralizingCharacter(flag, shipGroup9, character))
                                    {
                                        if (transferToLocation)
                                        {
                                            character.TransferToNewLocation(shipGroup9.LeadShip, _Galaxy);
                                        }
                                        return shipGroup9.LeadShip;
                                    }
                                    break;
                                }
                                BuiltObject builtObject6 = _Galaxy.IdentifyPirateBase(this);
                                if (builtObject6 != null && !builtObject6.HasBeenDestroyed && character.Location != builtObject6 && CheckLocationSafeForDemoralizingCharacter(flag, builtObject6, character))
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(builtObject6, _Galaxy);
                                    }
                                    return builtObject6;
                                }
                            }
                            break;
                        }
                    case CharacterRole.ShipCaptain:
                        {
                            if (PirateEmpireBaseHabitat == null)
                            {
                                bool flag9 = false;
                                if (!(character.Location is BuiltObject))
                                {
                                    flag9 = true;
                                }
                                if (character.Location is BuiltObject)
                                {
                                    BuiltObject builtObject13 = (BuiltObject)character.Location;
                                    if (builtObject13.Role != BuiltObjectRole.Military)
                                    {
                                        flag9 = true;
                                    }
                                }
                                if (!flag9)
                                {
                                    break;
                                }
                                List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
                                list.Add(BuiltObjectSubRole.Escort);
                                list.Add(BuiltObjectSubRole.Frigate);
                                list.Add(BuiltObjectSubRole.Destroyer);
                                list.Add(BuiltObjectSubRole.Cruiser);
                                list.Add(BuiltObjectSubRole.CapitalShip);
                                list.Add(BuiltObjectSubRole.Carrier);
                                List<BuiltObjectSubRole> subRoles = list;
                                BuiltObjectList builtObjectsBySubRole = BuiltObjects.GetBuiltObjectsBySubRole(subRoles);
                                if (builtObjectsBySubRole.Count <= 0)
                                {
                                    break;
                                }
                                int index = Galaxy.Rnd.Next(0, builtObjectsBySubRole.Count);
                                BuiltObject builtObject14 = builtObjectsBySubRole[index];
                                if (builtObject14 != null && !builtObject14.HasBeenDestroyed && CheckLocationSafeForDemoralizingCharacter(flag, builtObject14, character))
                                {
                                    if (character.Location != builtObject14 && transferToLocation)
                                    {
                                        character.TransferToNewLocation(builtObject14, _Galaxy);
                                    }
                                    return builtObject14;
                                }
                                break;
                            }
                            bool flag10 = false;
                            if (!(character.Location is BuiltObject))
                            {
                                flag10 = true;
                            }
                            if (character.Location is BuiltObject)
                            {
                                BuiltObject builtObject15 = (BuiltObject)character.Location;
                                if (builtObject15.Role != BuiltObjectRole.Military && builtObject15.Role != BuiltObjectRole.Freight)
                                {
                                    flag10 = true;
                                }
                            }
                            if (!flag10)
                            {
                                break;
                            }
                            List<BuiltObjectSubRole> list2 = new List<BuiltObjectSubRole>();
                            list2.Add(BuiltObjectSubRole.Escort);
                            list2.Add(BuiltObjectSubRole.Frigate);
                            list2.Add(BuiltObjectSubRole.Destroyer);
                            list2.Add(BuiltObjectSubRole.Cruiser);
                            list2.Add(BuiltObjectSubRole.CapitalShip);
                            list2.Add(BuiltObjectSubRole.Carrier);
                            list2.Add(BuiltObjectSubRole.SmallFreighter);
                            list2.Add(BuiltObjectSubRole.MediumFreighter);
                            list2.Add(BuiltObjectSubRole.LargeFreighter);
                            List<BuiltObjectSubRole> subRoles2 = list2;
                            BuiltObjectList builtObjectsBySubRole2 = BuiltObjects.GetBuiltObjectsBySubRole(subRoles2);
                            if (builtObjectsBySubRole2.Count <= 0)
                            {
                                break;
                            }
                            int index2 = Galaxy.Rnd.Next(0, builtObjectsBySubRole2.Count);
                            BuiltObject builtObject16 = builtObjectsBySubRole2[index2];
                            if (builtObject16 != null && !builtObject16.HasBeenDestroyed && CheckLocationSafeForDemoralizingCharacter(flag, builtObject16, character))
                            {
                                if (character.Location != builtObject16 && transferToLocation)
                                {
                                    character.TransferToNewLocation(builtObject16, _Galaxy);
                                }
                                return builtObject16;
                            }
                            break;
                        }
                    case CharacterRole.FleetAdmiral:
                        {
                            ShipGroup shipGroup5 = character.DetermineFleet();
                            bool flag3 = true;
                            if (shipGroup5 != null)
                            {
                                flag3 = false;
                                if (shipGroup5.Mission == null || shipGroup5.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup5.Mission.Priority == BuiltObjectMissionPriority.Low || shipGroup5.Mission.Priority == BuiltObjectMissionPriority.Normal)
                                {
                                    flag3 = true;
                                }
                            }
                            if (!flag3)
                            {
                                break;
                            }
                            CharacterList charactersByRole5 = Characters.GetCharactersByRole(CharacterRole.FleetAdmiral);
                            ShipGroupList shipGroupList3 = new ShipGroupList();
                            for (int num17 = 0; num17 < charactersByRole5.Count; num17++)
                            {
                                Character character5 = charactersByRole5[num17];
                                ShipGroup shipGroup6 = character5.DetermineFleet();
                                if (shipGroup6 != null && !shipGroupList3.Contains(shipGroup6))
                                {
                                    shipGroupList3.Add(shipGroup6);
                                }
                            }
                            ShipGroup shipGroup7 = null;
                            if (shipGroup5 != null && shipGroup5.Posture == FleetPosture.Attack && CheckLocationSafeForDemoralizingCharacter(flag, shipGroup5, character))
                            {
                                shipGroup7 = shipGroup5;
                            }
                            double num18 = 0.0;
                            bool flag6 = false;
                            ShipGroupList shipGroupList4 = GenerateOrderedFleetsByOverallStrength();
                            if (character.Fighters > character.Countermeasures && character.Fighters > character.Targeting && character.Fighters > character.ShipManeuvering)
                            {
                                flag6 = true;
                                shipGroupList4 = GenerateOrderedFleetsByFighterStrength();
                                if (shipGroup7 != null)
                                {
                                    num18 = shipGroup7.TotalFighterCount;
                                }
                            }
                            else
                            {
                                shipGroupList4 = GenerateOrderedFleetsByOverallStrength();
                                if (shipGroup7 != null)
                                {
                                    num18 = shipGroup7.TotalOverallStrengthFactor;
                                }
                            }
                            for (int num19 = 0; num19 < shipGroupList4.Count; num19++)
                            {
                                ShipGroup shipGroup8 = shipGroupList4[num19];
                                if (shipGroup8.Posture == FleetPosture.Attack && !shipGroupList3.Contains(shipGroup8))
                                {
                                    double num20 = 0.0;
                                    num20 = ((!flag6) ? ((double)shipGroup8.TotalOverallStrengthFactor) : ((double)shipGroup8.TotalFighterCount));
                                    if (num20 > num18 && CheckLocationSafeForDemoralizingCharacter(flag, shipGroup8, character))
                                    {
                                        shipGroup7 = shipGroup8;
                                        num18 = num20;
                                    }
                                }
                            }
                            if (shipGroup7 != null && shipGroup7 != shipGroup5 && shipGroup7.LeadShip != null)
                            {
                                BuiltObject builtObject3 = shipGroup7.DetermineStrongestShip(null, useFleetIndexing: false, null);
                                if (builtObject3 == null)
                                {
                                    builtObject3 = shipGroup7.LeadShip;
                                }
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(builtObject3, _Galaxy);
                                }
                                return builtObject3;
                            }
                            if (shipGroup5 == null)
                            {
                                break;
                            }
                            BuiltObject builtObject4 = shipGroup5.DetermineStrongestShip(null, useFleetIndexing: false, null);
                            if (character.Location != builtObject4)
                            {
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(builtObject4, _Galaxy);
                                }
                                return builtObject4;
                            }
                            return character.Location;
                        }
                    case CharacterRole.Leader:
                        if (character.Location != Capital)
                        {
                            if (Capital == null)
                            {
                                break;
                            }
                            if (Capital.InvadingTroops == null || Capital.InvadingTroops.Count <= 0)
                            {
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(Capital, _Galaxy);
                                }
                                return Capital;
                            }
                            Habitat habitat10 = null;
                            if (character.Location != null && character.Location is Habitat)
                            {
                                habitat10 = (Habitat)character.Location;
                            }
                            if (habitat10 != null && Capitals.Contains(habitat10))
                            {
                                break;
                            }
                            for (int num24 = 0; num24 < Capitals.Count; num24++)
                            {
                                Habitat habitat11 = Capitals[num24];
                                if (habitat11.InvadingTroops == null || habitat11.InvadingTroops.Count <= 0)
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(habitat11, _Galaxy);
                                    }
                                    return habitat11;
                                }
                            }
                        }
                        else
                        {
                            if (Capital == null || character.Location != Capital || Capital.InvadingTroops == null || Capital.InvadingTroops.Count <= 0)
                            {
                                break;
                            }
                            for (int num25 = 0; num25 < Capitals.Count; num25++)
                            {
                                Habitat habitat12 = Capitals[num25];
                                if (habitat12.InvadingTroops == null || habitat12.InvadingTroops.Count <= 0)
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(habitat12, _Galaxy);
                                    }
                                    return habitat12;
                                }
                            }
                            for (int num26 = 0; num26 < Colonies.Count; num26++)
                            {
                                Habitat habitat13 = Colonies[num26];
                                if (habitat13.InvadingTroops == null || habitat13.InvadingTroops.Count <= 0)
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(habitat13, _Galaxy);
                                    }
                                    return habitat13;
                                }
                            }
                        }
                        break;
                    case CharacterRole.Scientist:
                        {
                            Characters.GetCharactersByRole(CharacterRole.Scientist);
                            BuiltObject builtObject7 = null;
                            BuiltObject builtObject8 = IdentifyResearchStationHighestBonus(IndustryType.Weapon);
                            BuiltObject builtObject9 = IdentifyResearchStationHighestBonus(IndustryType.Energy);
                            BuiltObject builtObject10 = IdentifyResearchStationHighestBonus(IndustryType.HighTech);
                            IndustryType industryType = IndustryType.Undefined;
                            if (character.ResearchWeapons > character.ResearchEnergy && character.ResearchWeapons > character.ResearchHighTech)
                            {
                                industryType = IndustryType.Weapon;
                            }
                            else if (character.ResearchEnergy > character.ResearchWeapons && character.ResearchEnergy > character.ResearchHighTech)
                            {
                                industryType = IndustryType.Energy;
                            }
                            else if (character.ResearchHighTech > character.ResearchWeapons && character.ResearchHighTech > character.ResearchEnergy)
                            {
                                industryType = IndustryType.HighTech;
                            }
                            switch (industryType)
                            {
                                case IndustryType.Weapon:
                                    builtObject7 = builtObject8;
                                    if (builtObject7 != null)
                                    {
                                        break;
                                    }
                                    if (character.ResearchEnergy > 0 && character.ResearchEnergy > character.ResearchHighTech && builtObject9 != null)
                                    {
                                        if (CheckLocationSafeForDemoralizingCharacter(flag, builtObject9, character))
                                        {
                                            builtObject7 = builtObject9;
                                        }
                                    }
                                    else if (character.ResearchHighTech > 0 && character.ResearchHighTech > character.ResearchEnergy && builtObject10 != null && CheckLocationSafeForDemoralizingCharacter(flag, builtObject10, character))
                                    {
                                        builtObject7 = builtObject10;
                                    }
                                    break;
                                case IndustryType.Energy:
                                    builtObject7 = builtObject9;
                                    if (builtObject7 != null)
                                    {
                                        break;
                                    }
                                    if (character.ResearchWeapons > 0 && character.ResearchWeapons > character.ResearchHighTech && builtObject8 != null)
                                    {
                                        if (CheckLocationSafeForDemoralizingCharacter(flag, builtObject8, character))
                                        {
                                            builtObject7 = builtObject8;
                                        }
                                    }
                                    else if (character.ResearchHighTech > 0 && character.ResearchHighTech > character.ResearchWeapons && builtObject10 != null && CheckLocationSafeForDemoralizingCharacter(flag, builtObject10, character))
                                    {
                                        builtObject7 = builtObject10;
                                    }
                                    break;
                                case IndustryType.HighTech:
                                    builtObject7 = builtObject10;
                                    if (builtObject7 != null)
                                    {
                                        break;
                                    }
                                    if (character.ResearchEnergy > 0 && character.ResearchEnergy > character.ResearchWeapons && builtObject9 != null)
                                    {
                                        if (CheckLocationSafeForDemoralizingCharacter(flag, builtObject9, character))
                                        {
                                            builtObject7 = builtObject9;
                                        }
                                    }
                                    else if (character.ResearchWeapons > 0 && character.ResearchWeapons > character.ResearchEnergy && builtObject8 != null && CheckLocationSafeForDemoralizingCharacter(flag, builtObject8, character))
                                    {
                                        builtObject7 = builtObject8;
                                    }
                                    break;
                            }
                            if (builtObject7 != null && character.Location != builtObject7)
                            {
                                if (transferToLocation)
                                {
                                    character.TransferToNewLocation(builtObject7, _Galaxy);
                                }
                                return builtObject7;
                            }
                            bool flag7 = false;
                            if (character.Location != null && character.Location is BuiltObject)
                            {
                                BuiltObject builtObject11 = (BuiltObject)character.Location;
                                if (builtObject11.ResearchWeapons > 0 || builtObject11.ResearchEnergy > 0 || builtObject11.ResearchHighTech > 0)
                                {
                                    flag7 = true;
                                }
                            }
                            if (flag7)
                            {
                                break;
                            }
                            for (int num23 = 0; num23 < ResearchFacilities.Count; num23++)
                            {
                                BuiltObject builtObject12 = ResearchFacilities[num23];
                                bool flag8 = false;
                                switch (industryType)
                                {
                                    case IndustryType.Energy:
                                        if (builtObject12.ResearchEnergy > 0)
                                        {
                                            flag8 = true;
                                        }
                                        break;
                                    case IndustryType.HighTech:
                                        if (builtObject12.ResearchHighTech > 0)
                                        {
                                            flag8 = true;
                                        }
                                        break;
                                    case IndustryType.Weapon:
                                        if (builtObject12.ResearchWeapons > 0)
                                        {
                                            flag8 = true;
                                        }
                                        break;
                                }
                                if (flag8 && CheckLocationSafeForDemoralizingCharacter(flag, builtObject12, character))
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(builtObject12, _Galaxy);
                                    }
                                    return builtObject12;
                                }
                            }
                            break;
                        }
                    case CharacterRole.TroopGeneral:
                        {
                            if (character.TroopGroundAttack >= character.TroopGroundDefense)
                            {
                                ShipGroup shipGroup = character.DetermineFleet();
                                bool flag2 = true;
                                if (shipGroup != null)
                                {
                                    bool flag3 = false;
                                    if (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup.Mission.Priority == BuiltObjectMissionPriority.Low || shipGroup.Mission.Priority == BuiltObjectMissionPriority.Normal)
                                    {
                                        flag2 = true;
                                    }
                                }
                                else if (character.Location != null && character.Location.Empire != null && character.Location.Empire != character.Empire && character.Location is Habitat)
                                {
                                    Habitat habitat3 = (Habitat)character.Location;
                                    if (habitat3.InvadingCharacters != null && habitat3.InvadingCharacters.Contains(character))
                                    {
                                        flag2 = false;
                                    }
                                }
                                if (!flag2)
                                {
                                    break;
                                }
                                CharacterList charactersByRole = Characters.GetCharactersByRole(CharacterRole.TroopGeneral);
                                ShipGroupList shipGroupList = new ShipGroupList();
                                for (int l = 0; l < charactersByRole.Count; l++)
                                {
                                    Character character2 = charactersByRole[l];
                                    ShipGroup shipGroup2 = character2.DetermineFleet();
                                    if (shipGroup2 != null && !shipGroupList.Contains(shipGroup2))
                                    {
                                        shipGroupList.Add(shipGroup2);
                                    }
                                }
                                ShipGroup shipGroup3 = null;
                                if (shipGroup != null && shipGroup.Posture == FleetPosture.Attack && CheckLocationSafeForDemoralizingCharacter(flag, shipGroup, character))
                                {
                                    shipGroup3 = shipGroup;
                                }
                                double num = 0.0;
                                ShipGroupList shipGroupList2 = GenerateOrderedFleetsByTroopAttackStrength();
                                if (shipGroup3 != null)
                                {
                                    num = shipGroup3.TotalTroopAttackStrength;
                                }
                                for (int m = 0; m < shipGroupList2.Count; m++)
                                {
                                    ShipGroup shipGroup4 = shipGroupList2[m];
                                    if (shipGroup4.Posture == FleetPosture.Attack && !shipGroupList.Contains(shipGroup4))
                                    {
                                        double num2 = shipGroup4.TotalTroopAttackStrength;
                                        if (num2 > num && CheckLocationSafeForDemoralizingCharacter(flag, shipGroup4, character))
                                        {
                                            shipGroup3 = shipGroup4;
                                            num = num2;
                                        }
                                    }
                                }
                                if (shipGroup3 == null || shipGroup3 == shipGroup)
                                {
                                    break;
                                }
                                BuiltObject builtObject2 = shipGroup3.DetermineStrongestTroopTransport();
                                if (builtObject2 != null)
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(builtObject2, _Galaxy);
                                    }
                                    return builtObject2;
                                }
                                break;
                            }
                            CharacterList charactersByRole2 = Characters.GetCharactersByRole(CharacterRole.TroopGeneral);
                            StellarObjectList stellarObjectList = ResolveLocationsToDefend();
                            StellarObjectList stellarObjectList2 = new StellarObjectList();
                            for (int n = 0; n < stellarObjectList.Count; n++)
                            {
                                if (!(stellarObjectList[n] is Habitat))
                                {
                                    stellarObjectList2.Add(stellarObjectList[n]);
                                }
                            }
                            for (int num3 = 0; num3 < stellarObjectList2.Count; num3++)
                            {
                                stellarObjectList.Remove(stellarObjectList2[num3]);
                            }
                            for (int num4 = 0; num4 < Colonies.Count; num4++)
                            {
                                Habitat habitat4 = Colonies[num4];
                                int strategicValue = habitat4.StrategicValue;
                                if ((strategicValue > 500000 || Capitals.Contains(habitat4)) && !stellarObjectList.Contains(habitat4))
                                {
                                    stellarObjectList.Add(habitat4);
                                }
                            }
                            for (int num5 = 0; num5 < stellarObjectList.Count; num5++)
                            {
                                if (!(stellarObjectList[num5] is Habitat))
                                {
                                    continue;
                                }
                                Habitat habitat5 = (Habitat)stellarObjectList[num5];
                                if (character.Location == habitat5)
                                {
                                    CharacterList characterList = charactersByRole2.FindCharactersAtLocationOrTransferring(habitat5);
                                    bool flag4 = false;
                                    for (int num6 = 0; num6 < characterList.Count; num6++)
                                    {
                                        Character character3 = characterList[num6];
                                        if (character3 != character && character3.TroopGroundDefense > character3.TroopGroundAttack)
                                        {
                                            flag4 = true;
                                            break;
                                        }
                                    }
                                    if (!flag4)
                                    {
                                        break;
                                    }
                                }
                                if (charactersByRole2.FindCharactersAtLocationOrTransferring(habitat5).Count <= 0 && CheckLocationSafeForDemoralizingCharacter(flag, habitat5, character))
                                {
                                    if (transferToLocation)
                                    {
                                        character.TransferToNewLocation(habitat5, _Galaxy);
                                    }
                                    return habitat5;
                                }
                            }
                            break;
                        }
                }
            }
            return character.Location;
        }

        public BuiltObject GenerateNewBuiltObject(Design design, Habitat parentHabitat)
        {
            return GenerateNewBuiltObject(design, parentHabitat, 0.0, 0.0);
        }

        public BuiltObject GenerateNewBuiltObject(Design design, Habitat parentHabitat, double x, double y)
        {
            design.BuildCount++;
            bool isState = _Galaxy.DetermineBuiltObjectIsState(design.SubRole);
            string name = _Galaxy.GenerateBuiltObjectName(design, parentHabitat);
            if (parentHabitat != null)
            {
                x = parentHabitat.Xpos;
                y = parentHabitat.Ypos;
            }
            BuiltObject builtObject = GenerateBuiltObjectFromDesign(design, name, isState, x, y);
            builtObject.DateBuilt = _Galaxy.CurrentStarDate;
            builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
            if (parentHabitat != null)
            {
                builtObject.ParentHabitat = parentHabitat;
                _Galaxy.SelectRelativeParkingPoint(400.0, out var x2, out var y2);
                builtObject.ParentOffsetX = x2;
                builtObject.ParentOffsetY = y2;
            }
            builtObject.Heading = _Galaxy.SelectRandomHeading();
            builtObject.TargetHeading = builtObject.Heading;
            builtObject.ReDefine();
            builtObject.CurrentFuel = builtObject.FuelCapacity;
            builtObject.CurrentShields = builtObject.ShieldsCapacity;
            if (builtObject.TroopCapacity > 0 && Policy != null)
            {
                builtObject.SetTroopLoadoutsFromPolicy(Policy);
            }
            return builtObject;
        }

        public void AddBuiltObjectToGalaxy(BuiltObject builtObject, object parent, bool offsetLocationFromParent, bool isStateOwned)
        {
            AddBuiltObjectToGalaxy(builtObject, parent, offsetLocationFromParent, isStateOwned, -2000000001, -2000000001, sendMessage: true);
        }

        public void AddBuiltObjectToGalaxy(BuiltObject builtObject, object parent, bool offsetLocationFromParent, bool isStateOwned, bool sendMessage)
        {
            AddBuiltObjectToGalaxy(builtObject, parent, offsetLocationFromParent, isStateOwned, -2000000001, -2000000001, sendMessage);
        }

        public void AddBuiltObjectToGalaxy(BuiltObject builtObject, object parent, bool offsetLocationFromParent, bool isStateOwned, int offsetX, int offsetY)
        {
            AddBuiltObjectToGalaxy(builtObject, parent, offsetLocationFromParent, isStateOwned, offsetX, offsetY, sendMessage: true);
        }

        public void AddBuiltObjectToGalaxy(BuiltObject builtObject, object parent, bool offsetLocationFromParent, bool isStateOwned, int offsetX, int offsetY, bool sendMessage)
        {
            builtObject.BuiltObjectID = _Galaxy.GetNextBuiltObjectID();
            builtObject.DateBuilt = _Galaxy.CurrentStarDate;
            builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
            string arg = string.Empty;
            if (parent != null)
            {
                double num = 0.0;
                if (parent is Habitat)
                {
                    num = ((!offsetLocationFromParent) ? 0.0 : ((double)((Habitat)parent).Diameter / 2.0 - Galaxy.Rnd.NextDouble() * (double)((Habitat)parent).Diameter));
                    builtObject.ParentHabitat = (Habitat)parent;
                    builtObject.Xpos = builtObject.ParentHabitat.Xpos;
                    builtObject.Ypos = builtObject.ParentHabitat.Ypos;
                    arg = builtObject.ParentHabitat.Name;
                    if (builtObject.Role == BuiltObjectRole.Base)
                    {
                        ((Habitat)parent).BasesAtHabitat.Add(builtObject);
                    }
                }
                else
                {
                    if (!(parent is BuiltObject))
                    {
                        throw new ApplicationException("Invalid parent type");
                    }
                    num = 0.0;
                    builtObject.ParentBuiltObject = (BuiltObject)parent;
                    builtObject.Xpos = builtObject.ParentBuiltObject.Xpos;
                    builtObject.Ypos = builtObject.ParentBuiltObject.Ypos;
                    arg = builtObject.ParentBuiltObject.Name;
                }
                if (offsetX > -2000000001 && offsetY > -2000000001)
                {
                    builtObject.ParentOffsetX = offsetX;
                    builtObject.ParentOffsetY = offsetY;
                }
                else
                {
                    builtObject.ParentOffsetX = 0.0;
                    builtObject.ParentOffsetY = 0.0;
                    if (offsetLocationFromParent)
                    {
                        double num2 = Galaxy.Rnd.NextDouble() * Math.PI * 2.0;
                        double parentOffsetX = Math.Cos(num2) * num;
                        double parentOffsetY = Math.Sin(num2) * num;
                        builtObject.ParentOffsetX = parentOffsetX;
                        builtObject.ParentOffsetY = parentOffsetY;
                    }
                }
                builtObject.Xpos += builtObject.ParentOffsetX;
                builtObject.Ypos += builtObject.ParentOffsetY;
            }
            string empty = string.Empty;
            empty = ((builtObject.Role != BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("Ship Purchased NAME LOCATION"), builtObject.Name, arg) : string.Format(TextResolver.GetText("Base Purchased NAME LOCATION"), builtObject.Name, arg));
            GalaxyIndex galaxyIndex = Galaxy.ResolveIndex(builtObject.Xpos, builtObject.Ypos);
            int x = galaxyIndex.X;
            int y = galaxyIndex.Y;
            if (PirateEmpireBaseHabitat != null)
            {
                builtObject.PirateEmpireId = (byte)EmpireId;
            }
            if (isStateOwned)
            {
                BuiltObjects.Add(builtObject);
                builtObject.Owner = this;
            }
            else
            {
                PrivateBuiltObjects.Add(builtObject);
            }
            _Galaxy.BuiltObjects.Add(builtObject);
            _Galaxy.BuiltObjectIndex[x][y].Add(builtObject);
            if ((builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort) && builtObject.IsSpacePort && !builtObject.Empire.SpacePorts.Contains(builtObject))
            {
                builtObject.Empire.SpacePorts.Add(builtObject);
            }
            if ((builtObject.SubRole == BuiltObjectSubRole.GasMiningStation || builtObject.SubRole == BuiltObjectSubRole.MiningStation) && builtObject.IsResourceExtractor && !builtObject.Empire.MiningStations.Contains(builtObject))
            {
                builtObject.Empire.MiningStations.Add(builtObject);
            }
            if (builtObject.NearestSystemStar == null)
            {
                Habitat habitat = _Galaxy.FastFindNearestSystem(builtObject.Xpos, builtObject.Ypos);
                if (habitat != null)
                {
                    double num3 = _Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, habitat.Xpos, habitat.Ypos);
                    if ((int)num3 <= Galaxy.MaxSolarSystemSize + 500)
                    {
                        builtObject.NearestSystemStar = habitat;
                    }
                }
            }
            builtObject.Empire.ResolveSystemVisibility(builtObject.Xpos, builtObject.Ypos, null, null);
            builtObject.ReDefine();
            if (builtObject.TroopCapacity > 0 && Policy != null)
            {
                builtObject.SetTroopLoadoutsFromPolicy(Policy);
            }
            if (sendMessage)
            {
                builtObject.Empire.SendMessageToEmpire(builtObject.Empire, EmpireMessageType.ShipBasePurchased, builtObject, empty);
            }
        }

        public bool CanBuiltObjectColonizeHabitat(BuiltObject builtObject, Habitat habitat, out int newPopulationAmount)
        {
            newPopulationAmount = 0;
            if (builtObject.Role != BuiltObjectRole.Colony)
            {
                return false;
            }
            if (habitat.Category != HabitatCategoryType.Planet && habitat.Category != HabitatCategoryType.Moon)
            {
                return false;
            }
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                BuiltObjectComponent builtObjectComponent = builtObject.Components[i];
                if (builtObjectComponent.Type == ComponentType.HabitationColonization && builtObjectComponent.Status == ComponentStatus.Normal)
                {
                    newPopulationAmount = builtObjectComponent.Value1;
                }
            }
            if (_Galaxy.ShakturiActualRace != null && builtObject.NativeRace != null && builtObject.NativeRace == _Galaxy.ShakturiActualRace)
            {
                newPopulationAmount = 1000000000;
            }
            if (!_Galaxy.CheckEmpireTerritoryCanColonizeHabitat(this, habitat))
            {
                return false;
            }
            if (habitat.Population.TotalAmount > 0 && (habitat.Empire == null || habitat.Empire == _Galaxy.IndependentEmpire))
            {
                return true;
            }
            if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip && builtObject.NativeRace != null && builtObject.NativeRace.NativeHabitatType == habitat.Type)
            {
                if (newPopulationAmount <= 0)
                {
                    newPopulationAmount = 15000000;
                }
                return true;
            }
            return habitat.Type switch
            {
                HabitatType.Continental => CanColonizeContinental,
                HabitatType.MarshySwamp => CanColonizeMarshySwamp,
                HabitatType.Desert => CanColonizeDesert,
                HabitatType.Ocean => CanColonizeOcean,
                HabitatType.Ice => CanColonizeIce,
                HabitatType.Volcanic => CanColonizeVolcanic,
                HabitatType.BarrenRock => false,
                _ => false,
            };
        }

        public int CalculateColonizationPopulation(Design design)
        {
            int num = 0;
            ComponentList componentList = new ComponentList();
            ComponentDefinitionList byType = ComponentDefinition.GetByType(ComponentType.HabitationColonization, Galaxy.ComponentDefinitionsStatic);
            foreach (ComponentDefinition item in byType)
            {
                componentList.Add(new Component(item.ComponentID));
            }
            for (int i = 0; i < componentList.Count; i++)
            {
                Component component = componentList[i];
                for (int j = 0; j < design.Components.Count; j++)
                {
                    Component component2 = design.Components[j];
                    if (component2.ComponentID == component.ComponentID && component2.Value1 > num)
                    {
                        num = component2.Value1;
                    }
                }
            }
            return num;
        }

        public bool CanDesignColonizeHabitat(Design design, Habitat habitat)
        {
            if (design != null && design.Role != BuiltObjectRole.Colony)
            {
                return false;
            }
            if (habitat.Category != HabitatCategoryType.Planet && habitat.Category != HabitatCategoryType.Moon)
            {
                return false;
            }
            if (habitat.Population != null && habitat.Population.TotalAmount > 0 && (habitat.Empire == null || habitat.Empire == _Galaxy.IndependentEmpire))
            {
                return true;
            }
            Empire empire = null;
            if (design != null)
            {
                empire = design.Empire;
            }
            if (empire == null)
            {
                empire = this;
            }
            return habitat.Type switch
            {
                HabitatType.Continental => empire.CanColonizeContinental,
                HabitatType.MarshySwamp => empire.CanColonizeMarshySwamp,
                HabitatType.Desert => empire.CanColonizeDesert,
                HabitatType.Ocean => empire.CanColonizeOcean,
                HabitatType.Ice => empire.CanColonizeIce,
                HabitatType.Volcanic => empire.CanColonizeVolcanic,
                _ => false,
            };
        }

        public List<HabitatType> ColonizableHabitatTypesFromColonyShips(Empire empire, List<HabitatType> empireHabitatTypes)
        {
            for (int i = 0; i < empire.BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = empire.BuiltObjects[i];
                if (builtObject.SubRole != BuiltObjectSubRole.ColonyShip)
                {
                    continue;
                }
                List<HabitatType> list = ColonizableHabitatTypesForBuiltObject(builtObject);
                foreach (HabitatType item in list)
                {
                    if (!empireHabitatTypes.Contains(item))
                    {
                        empireHabitatTypes.Add(item);
                    }
                }
            }
            return empireHabitatTypes;
        }

        public List<HabitatType> ColonizableHabitatTypesForEmpireTechOnly(Empire empire)
        {
            List<HabitatType> list = new List<HabitatType>();
            if (empire.CanColonizeContinental)
            {
                list.Add(HabitatType.Continental);
            }
            if (empire.CanColonizeMarshySwamp)
            {
                list.Add(HabitatType.MarshySwamp);
            }
            if (empire.CanColonizeOcean)
            {
                list.Add(HabitatType.Ocean);
            }
            if (empire.CanColonizeDesert)
            {
                list.Add(HabitatType.Desert);
            }
            if (empire.CanColonizeIce)
            {
                list.Add(HabitatType.Ice);
            }
            if (empire.CanColonizeVolcanic)
            {
                list.Add(HabitatType.Volcanic);
            }
            return list;
        }

        public List<HabitatType> ColonizableHabitatTypesForEmpire(Empire empire)
        {
            List<HabitatType> list = new List<HabitatType>();
            if (empire.CanColonizeContinental)
            {
                list.Add(HabitatType.Continental);
            }
            if (empire.CanColonizeMarshySwamp)
            {
                list.Add(HabitatType.MarshySwamp);
            }
            if (empire.CanColonizeOcean)
            {
                list.Add(HabitatType.Ocean);
            }
            if (empire.CanColonizeDesert)
            {
                list.Add(HabitatType.Desert);
            }
            if (empire.CanColonizeIce)
            {
                list.Add(HabitatType.Ice);
            }
            if (empire.CanColonizeVolcanic)
            {
                list.Add(HabitatType.Volcanic);
            }
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat.Population != null && habitat.Population.TotalAmount >= Galaxy.BuildColonyShipPopulationRequirement)
                {
                    Race dominantRace = habitat.Population.DominantRace;
                    if (dominantRace != null && !list.Contains(dominantRace.NativeHabitatType))
                    {
                        list.Add(dominantRace.NativeHabitatType);
                    }
                }
            }
            return list;
        }

        public List<HabitatType> ColonizableHabitatTypesNonTechForEmpire(Empire empire)
        {
            List<HabitatType> list = new List<HabitatType>();
            List<HabitatType> list2 = ColonizableHabitatTypesForEmpireTechOnly(empire);
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat.Population != null && habitat.Population.TotalAmount >= Galaxy.BuildColonyShipPopulationRequirement)
                {
                    Race dominantRace = habitat.Population.DominantRace;
                    if (dominantRace != null && !list2.Contains(dominantRace.NativeHabitatType) && !list.Contains(dominantRace.NativeHabitatType))
                    {
                        list.Add(dominantRace.NativeHabitatType);
                    }
                }
            }
            return list;
        }

        public List<HabitatType> ColonizableHabitatTypesForBuiltObjectAndEmpire(BuiltObject builtObject)
        {
            List<HabitatType> list = ColonizableHabitatTypesForBuiltObject(builtObject);
            if (builtObject.Empire != null)
            {
                List<HabitatType> list2 = builtObject.Empire.ColonizableHabitatTypesForEmpireTechOnly(builtObject.Empire);
                if (list2 != null)
                {
                    for (int i = 0; i < list2.Count; i++)
                    {
                        if (!list.Contains(list2[i]))
                        {
                            list.Add(list2[i]);
                        }
                    }
                }
            }
            return list;
        }

        public List<HabitatType> ColonizableHabitatTypesForBuiltObject(BuiltObject builtObject)
        {
            List<HabitatType> list = new List<HabitatType>();
            if (builtObject.NativeRace != null && !list.Contains(builtObject.NativeRace.NativeHabitatType))
            {
                list.Add(builtObject.NativeRace.NativeHabitatType);
            }
            return list;
        }

        private void DetermineFriendsAndEnemies(Empire empire, out EmpireList friends, out EmpireList closeFriends, out EmpireList enemies, out EmpireList severeEnemies)
        {
            closeFriends = new EmpireList();
            friends = new EmpireList();
            enemies = new EmpireList();
            severeEnemies = new EmpireList();
            for (int i = 0; i < empire.DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = empire.DiplomaticRelations[i];
                switch (diplomaticRelation.Type)
                {
                    case DiplomaticRelationType.FreeTradeAgreement:
                        friends.Add(diplomaticRelation.OtherEmpire);
                        break;
                    case DiplomaticRelationType.MutualDefensePact:
                    case DiplomaticRelationType.Protectorate:
                        closeFriends.Add(diplomaticRelation.OtherEmpire);
                        break;
                    case DiplomaticRelationType.TradeSanctions:
                        enemies.Add(diplomaticRelation.OtherEmpire);
                        break;
                    case DiplomaticRelationType.War:
                        severeEnemies.Add(diplomaticRelation.OtherEmpire);
                        break;
                }
            }
        }

        private int CalculateRelationshipWithFriends(Empire empire, EmpireList friends, EmpireList closeFriends, out int positiveRelationship, out int negativeRelationship)
        {
            positiveRelationship = 0;
            negativeRelationship = 0;
            foreach (Empire closeFriend in closeFriends)
            {
                DiplomaticRelation diplomaticRelation = closeFriend.DiplomaticRelations[empire];
                if (diplomaticRelation != null)
                {
                    switch (diplomaticRelation.Type)
                    {
                        case DiplomaticRelationType.MutualDefensePact:
                        case DiplomaticRelationType.Protectorate:
                            positiveRelationship += 8;
                            break;
                        case DiplomaticRelationType.FreeTradeAgreement:
                            positiveRelationship += 5;
                            break;
                        case DiplomaticRelationType.SubjugatedDominion:
                            positiveRelationship += 2;
                            break;
                        case DiplomaticRelationType.TradeSanctions:
                        case DiplomaticRelationType.Truce:
                            negativeRelationship -= 7;
                            break;
                        case DiplomaticRelationType.War:
                            negativeRelationship -= 15;
                            break;
                    }
                }
            }
            foreach (Empire friend in friends)
            {
                DiplomaticRelation diplomaticRelation2 = friend.DiplomaticRelations[empire];
                if (diplomaticRelation2 != null)
                {
                    switch (diplomaticRelation2.Type)
                    {
                        case DiplomaticRelationType.MutualDefensePact:
                        case DiplomaticRelationType.Protectorate:
                            positiveRelationship += 5;
                            break;
                        case DiplomaticRelationType.FreeTradeAgreement:
                            positiveRelationship += 3;
                            break;
                        case DiplomaticRelationType.SubjugatedDominion:
                            positiveRelationship++;
                            break;
                        case DiplomaticRelationType.TradeSanctions:
                        case DiplomaticRelationType.Truce:
                            negativeRelationship -= 5;
                            break;
                        case DiplomaticRelationType.War:
                            negativeRelationship -= 10;
                            break;
                    }
                }
            }
            positiveRelationship = Math.Min(positiveRelationship, 30);
            negativeRelationship = Math.Max(negativeRelationship, -30);
            int val = positiveRelationship + negativeRelationship;
            val = Math.Min(20, val);
            return Math.Max(-20, val);
        }

        public TradeOfferResponse EvaluateTradeOffer(Empire offeringEmpire, TradeableItemList offered, TradeableItemList requested, bool disallowCriticalItems)
        {
            if (offeringEmpire != this && !Reclusive && offeringEmpire != null)
            {
                _ = _Galaxy.IntoleranceLevel;
                DiplomaticRelation diplomaticRelation = null;
                EmpireEvaluation empireEvaluation = null;
                PirateRelation pirateRelation = null;
                if (PirateEmpireBaseHabitat == null && offeringEmpire.PirateEmpireBaseHabitat == null)
                {
                    diplomaticRelation = ObtainDiplomaticRelation(offeringEmpire);
                    empireEvaluation = ObtainEmpireEvaluation(offeringEmpire);
                }
                else
                {
                    pirateRelation = ObtainPirateRelation(offeringEmpire);
                }
                double val = (double)(100 + (DominantRace.AggressionLevel - DominantRace.FriendlinessLevel) / 2) / 100.0;
                val = Math.Max(0.97, val);
                int num = (int)((double)requested.TotalValue * val);
                double val2 = (double)(requested.TotalValue + 1) / (double)(offered.TotalValue + 1);
                val2 = Math.Min(10.0, Math.Max(0.2, val2));
                if (diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.War && offered.ContainsType(TradeableItemType.EndWar))
                {
                    if (diplomaticRelation.Locked)
                    {
                        return TradeOfferResponse.Refuse;
                    }
                    DiplomaticRelationType diplomaticRelationType = DetermineDesiredDiplomaticRelationTypical(diplomaticRelation.Strategy, diplomaticRelation.Type);
                    if (diplomaticRelationType != DiplomaticRelationType.War && offered.TotalValue >= requested.TotalValue)
                    {
                        if (CheckForCapitalTradeItems(requested))
                        {
                            return TradeOfferResponse.Refuse;
                        }
                        return TradeOfferResponse.Accept;
                    }
                    if (offered.ContainsType(TradeableItemType.Colony) || offered.ContainsType(TradeableItemType.Base))
                    {
                        if (offered.TotalValue >= requested.TotalValue)
                        {
                            if (CheckForCapitalTradeItems(requested))
                            {
                                return TradeOfferResponse.Refuse;
                            }
                            return TradeOfferResponse.Accept;
                        }
                        if (offered.TotalValue >= num)
                        {
                            if (CheckForCapitalTradeItems(requested))
                            {
                                return TradeOfferResponse.Refuse;
                            }
                            return TradeOfferResponse.Accept;
                        }
                        if (offered.TotalValue >= requested.TotalValue)
                        {
                            if (CheckForCapitalTradeItems(requested))
                            {
                                return TradeOfferResponse.Refuse;
                            }
                            return TradeOfferResponse.PromptForImprovement;
                        }
                        return TradeOfferResponse.Refuse;
                    }
                }
                if (diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions && offered.ContainsType(TradeableItemType.LiftTradeSanctions))
                {
                    if (diplomaticRelation.Locked)
                    {
                        return TradeOfferResponse.Refuse;
                    }
                    DiplomaticRelationType diplomaticRelationType2 = DetermineDesiredDiplomaticRelationTypical(diplomaticRelation.Strategy, diplomaticRelation.Type);
                    if (diplomaticRelationType2 != DiplomaticRelationType.TradeSanctions && diplomaticRelationType2 != DiplomaticRelationType.War && offered.TotalValue >= requested.TotalValue)
                    {
                        if (CheckForCapitalTradeItems(requested))
                        {
                            return TradeOfferResponse.Refuse;
                        }
                        return TradeOfferResponse.Accept;
                    }
                    if (offered.ContainsType(TradeableItemType.Colony) || offered.ContainsType(TradeableItemType.Base))
                    {
                        if (offered.TotalValue >= requested.TotalValue)
                        {
                            if (CheckForCapitalTradeItems(requested))
                            {
                                return TradeOfferResponse.Refuse;
                            }
                            return TradeOfferResponse.Accept;
                        }
                        if (offered.TotalValue >= num)
                        {
                            if (CheckForCapitalTradeItems(requested))
                            {
                                return TradeOfferResponse.Refuse;
                            }
                            return TradeOfferResponse.Accept;
                        }
                        if (offered.TotalValue >= requested.TotalValue)
                        {
                            if (CheckForCapitalTradeItems(requested))
                            {
                                return TradeOfferResponse.Refuse;
                            }
                            return TradeOfferResponse.PromptForImprovement;
                        }
                        return TradeOfferResponse.Refuse;
                    }
                }
                bool flag = true;
                if (disallowCriticalItems && CheckForCriticalTradeItems(requested))
                {
                    flag = false;
                }
                if (diplomaticRelation != null && diplomaticRelation.Type != DiplomaticRelationType.War && offered.ContainsType(TradeableItemType.ThreatenWar))
                {
                    double d = (double)offeringEmpire.WeightedMilitaryPotency / (double)WeightedMilitaryPotency;
                    d = Math.Sqrt(d);
                    d *= 0.7;
                    double num2 = 1.0 + (double)(DominantRace.AggressionLevel - DominantRace.CautionLevel) / 100.0;
                    num2 *= num2;
                    num2 = Math.Max(1.0, num2);
                    offeringEmpire.CivilityRating -= val2 * 0.5;
                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - val2 * 3.0;
                    if (d > num2 && Galaxy.Rnd.Next(0, 3) > 0 && empireEvaluation.OverallAttitude > -50)
                    {
                        if (flag)
                        {
                            return TradeOfferResponse.AcceptUnfair;
                        }
                        return TradeOfferResponse.RefuseUnfair;
                    }
                    if (offered.TotalValue >= requested.TotalValue)
                    {
                        if (flag)
                        {
                            return TradeOfferResponse.Accept;
                        }
                        return TradeOfferResponse.Refuse;
                    }
                    return TradeOfferResponse.RefuseUnfair;
                }
                if (diplomaticRelation != null && diplomaticRelation.Type != DiplomaticRelationType.War && diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions && offered.ContainsType(TradeableItemType.ThreatenTradeSanctions))
                {
                    double d2 = (double)offeringEmpire.WeightedMilitaryPotency / (double)WeightedMilitaryPotency;
                    d2 = Math.Sqrt(d2);
                    d2 *= 0.7;
                    double num3 = 1.0 + (double)(DominantRace.AggressionLevel - DominantRace.CautionLevel) / 100.0;
                    num3 *= num3;
                    num3 = Math.Max(1.0, num3);
                    offeringEmpire.CivilityRating -= val2 * 0.3;
                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - val2 * 2.0;
                    if (d2 > num3 * 2.0 && Galaxy.Rnd.Next(0, 3) > 0 && empireEvaluation.OverallAttitude > -50)
                    {
                        if (flag)
                        {
                            return TradeOfferResponse.AcceptUnfair;
                        }
                        return TradeOfferResponse.RefuseUnfair;
                    }
                    if (offered.TotalValue >= requested.TotalValue)
                    {
                        if (flag)
                        {
                            return TradeOfferResponse.Accept;
                        }
                        return TradeOfferResponse.Refuse;
                    }
                    return TradeOfferResponse.RefuseUnfair;
                }
                if (!flag)
                {
                    return TradeOfferResponse.Refuse;
                }
                if (offered.TotalValue >= num)
                {
                    double num4 = (double)offered.TotalValue / (double)num;
                    if (num4 > 1.0)
                    {
                        int num5 = offered.TotalValue - num;
                        if (num5 >= 1000)
                        {
                            double num6 = Math.Sqrt(Math.Sqrt(Math.Sqrt(num5))) - 1.37;
                            if (PirateEmpireBaseHabitat == null && offeringEmpire.PirateEmpireBaseHabitat == null)
                            {
                                EmpireEvaluation empireEvaluation2 = ObtainEmpireEvaluation(offeringEmpire);
                                empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw + num6;
                            }
                            else if (pirateRelation != null)
                            {
                                pirateRelation.EvaluationOffenseOverRequests += (float)num6;
                            }
                        }
                    }
                    return TradeOfferResponse.Accept;
                }
                if (offered.TotalValue >= requested.TotalValue)
                {
                    return TradeOfferResponse.PromptForImprovement;
                }
                if (offered.TotalValue > 0 && !(val2 < 0.5))
                {
                    return TradeOfferResponse.Refuse;
                }
                double d3 = (double)offeringEmpire.WeightedMilitaryPotency / (double)WeightedMilitaryPotency;
                d3 = Math.Sqrt(d3);
                d3 *= 0.7;
                double num7 = 1.0 + (double)(DominantRace.AggressionLevel - DominantRace.CautionLevel) / 100.0;
                num7 *= num7;
                num7 = Math.Max(1.0, num7);
                double val3 = (double)num / 5000.0;
                val3 = Math.Min(val3, 15.0);
                if (empireEvaluation != null && PirateEmpireBaseHabitat == null && offeringEmpire.PirateEmpireBaseHabitat == null)
                {
                    if (offered.TotalValue <= 0)
                    {
                        empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - val3;
                    }
                    else
                    {
                        empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - (double)offered.TotalValue / (double)num * val3;
                    }
                    if (d3 > num7 * 4.0 && Galaxy.Rnd.Next(0, 3) > 1 && empireEvaluation.OverallAttitude > -20)
                    {
                        return TradeOfferResponse.AcceptUnfair;
                    }
                    return TradeOfferResponse.RefuseUnfair;
                }
                if (pirateRelation != null)
                {
                    if (offered.TotalValue <= 0)
                    {
                        pirateRelation.EvaluationOffenseOverRequests -= (float)val3;
                    }
                    else
                    {
                        pirateRelation.EvaluationOffenseOverRequests -= (float)((double)offered.TotalValue / (double)num * val3);
                    }
                    if (d3 > num7 * 4.0 && Galaxy.Rnd.Next(0, 3) > 1 && pirateRelation.Evaluation > -20f)
                    {
                        return TradeOfferResponse.AcceptUnfair;
                    }
                    return TradeOfferResponse.RefuseUnfair;
                }
            }
            return TradeOfferResponse.Refuse;
        }

        private bool CheckForCapitalTradeItems(TradeableItemList items)
        {
            foreach (TradeableItem item in items)
            {
                if (item.Type == TradeableItemType.Colony)
                {
                    Habitat habitat = (Habitat)item.Item;
                    if (habitat == Capital)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool CheckForCriticalTradeItems(TradeableItemList items)
        {
            foreach (TradeableItem item in items)
            {
                if (item.Type == TradeableItemType.Colony)
                {
                    Habitat habitat = (Habitat)item.Item;
                    if (Capitals.Contains(habitat) || habitat == Capital || CapitalSystemStars.Contains(Galaxy.DetermineHabitatSystemStar(habitat)))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private void ReviewEnemyHelpEnlistment()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            if (this == _Galaxy.PlayerEmpire)
            {
                return;
            }
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == this)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    double num = (double)WeightedMilitaryPotency / (double)empire.WeightedMilitaryPotency;
                    if (empire == _Galaxy.PlayerEmpire)
                    {
                        num /= _Galaxy.PlayerEmpire.DifficultyLevel;
                    }
                    if (!(num < 0.9))
                    {
                        continue;
                    }
                    Empire empire2 = IdentifyBestEmpireToAttackEnemy(empire, DiplomaticRelationType.War, currentStarDate);
                    if (empire2 == null)
                    {
                        continue;
                    }
                    TradeableItemList tradeableItemList = new TradeableItemList();
                    int num2 = _Galaxy.ValueDeclareWarOnEmpire(empire2, empire);
                    if (num2 >= 0)
                    {
                        num2 = _Galaxy.UpdateValueDeclareWarOnEmpire(num2, this, empire2, empire);
                        num2 = _Galaxy.RefactorValueForEmpire(num2, this, empire2);
                        tradeableItemList.Add(new TradeableItem(TradeableItemType.DeclareWarOther, empire, num2));
                        TradeableItemList tradeableItems = _Galaxy.ResolveTradeableItems(this, empire2, includeNearestColony: false, refactorValuesForEmpire: true);
                        TradeableItemList tradeableItemList2 = DetermineOfferedTradeItems(num2, tradeableItems, 6);
                        if (tradeableItemList2 != null && tradeableItemList2.Count > 0)
                        {
                            string description = string.Format(TextResolver.GetText("Request help against EMPIRE"), empire.Name);
                            SendMessageToEmpire(empire2, EmpireMessageType.OfferTrade, new object[2] { tradeableItemList2, tradeableItemList }, description);
                            DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(empire2);
                            diplomaticRelation2.LastDiplomacyTradeOfferDate = currentStarDate;
                        }
                    }
                }
                else
                {
                    if (diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions)
                    {
                        continue;
                    }
                    double num3 = (double)WeightedMilitaryPotency / (double)empire.WeightedMilitaryPotency;
                    if (empire == _Galaxy.PlayerEmpire)
                    {
                        num3 /= _Galaxy.PlayerEmpire.DifficultyLevel;
                    }
                    if (!(num3 < 0.6))
                    {
                        continue;
                    }
                    Empire empire3 = IdentifyBestEmpireToAttackEnemy(empire, DiplomaticRelationType.TradeSanctions, currentStarDate);
                    if (empire3 == null)
                    {
                        continue;
                    }
                    TradeableItemList tradeableItemList3 = new TradeableItemList();
                    int num4 = _Galaxy.ValueInitiateTradeSanctionsAgainstEmpire(empire3, empire);
                    if (num4 >= 0)
                    {
                        num4 = _Galaxy.RefactorValueForEmpire(num4, this, empire3);
                        tradeableItemList3.Add(new TradeableItem(TradeableItemType.InitiateTradeSanctionsOther, empire, num4));
                        TradeableItemList tradeableItems2 = _Galaxy.ResolveTradeableItems(this, empire3, includeNearestColony: false, refactorValuesForEmpire: true);
                        TradeableItemList tradeableItemList4 = DetermineOfferedTradeItems(num4, tradeableItems2, 6);
                        if (tradeableItemList4 != null && tradeableItemList4.Count > 0)
                        {
                            string description2 = string.Format(TextResolver.GetText("Request help against EMPIRE"), empire.Name);
                            SendMessageToEmpire(empire3, EmpireMessageType.OfferTrade, new object[2] { tradeableItemList4, tradeableItemList3 }, description2);
                            DiplomaticRelation diplomaticRelation3 = ObtainDiplomaticRelation(empire3);
                            diplomaticRelation3.LastDiplomacyTradeOfferDate = currentStarDate;
                        }
                    }
                }
            }
        }

        private Empire IdentifyBestEmpireToAttackEnemy(Empire enemyEmpire, DiplomaticRelationType desiredRelationType, long currentStarDate)
        {
            Empire result = null;
            double num = double.MaxValue;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                long num2 = CalculateNextAllowableProposalDate(diplomaticRelation);
                if (currentStarDate < num2 || diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation2 = empire.ObtainDiplomaticRelation(enemyEmpire);
                if (diplomaticRelation2.Type != 0 && diplomaticRelation2.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation2.Type != DiplomaticRelationType.Protectorate && diplomaticRelation2.Type != DiplomaticRelationType.War && diplomaticRelation2.Type != desiredRelationType)
                {
                    double num3 = _Galaxy.CalculateDistance(empire.Capital.Xpos, empire.Capital.Ypos, enemyEmpire.Capital.Xpos, enemyEmpire.Capital.Ypos);
                    EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(enemyEmpire);
                    double num4 = (double)empire.WeightedMilitaryPotency / (double)enemyEmpire.WeightedMilitaryPotency;
                    double num5 = empireEvaluation.OverallAttitude + 50;
                    double num6 = num5 * num3 / num4;
                    if (num6 < num)
                    {
                        result = empire;
                        num = num6;
                    }
                }
            }
            return result;
        }

        public void ReviewPirateSystemInfluence()
        {
            List<int> list = new List<int>();
            if (PirateEmpireBaseHabitat != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat != null && !habitat.HasBeenDestroyed && habitat.GetPirateControl().GetByFaction(this) != null && !list.Contains(habitat.SystemIndex))
                    {
                        list.Add(habitat.SystemIndex);
                    }
                }
                for (int j = 0; j < SpacePorts.Count; j++)
                {
                    BuiltObject builtObject = SpacePorts[j];
                    if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.Empire == this && builtObject.NearestSystemStar != null && !list.Contains(builtObject.NearestSystemStar.SystemIndex))
                    {
                        list.Add(builtObject.NearestSystemStar.SystemIndex);
                    }
                }
            }
            PirateInfluenceSystemIds = list;
        }

        private void ReviewDisputedTerritory()
        {
            if (this == _Galaxy.PlayerEmpire || DominantRace == null)
            {
                return;
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            HabitatList habitatList = DetermineEmpireDominatedSystems(this, includeAllTerritory: true);
            _ = _Galaxy.IntoleranceLevel;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == this)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                if (diplomaticRelation == null || diplomaticRelation.Type == DiplomaticRelationType.NotMet)
                {
                    continue;
                }
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    DiplomaticRelationType diplomaticRelationType = DetermineDesiredDiplomaticRelationTypical(diplomaticRelation.Strategy, diplomaticRelation.Type);
                    if (diplomaticRelationType == DiplomaticRelationType.War)
                    {
                        Galaxy.Rnd.Next(0, 3);
                        _ = 1;
                    }
                }
                long num = CalculateNextAllowableTradeProposalDate(diplomaticRelation);
                if (currentStarDate < num)
                {
                    continue;
                }
                HabitatList habitatList2 = new HabitatList();
                BuiltObjectList builtObjectList = new BuiltObjectList();
                int num2 = 60 - (DominantRace.FriendlinessLevel - DominantRace.CautionLevel);
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(empire);
                if (empireEvaluation != null && empireEvaluation.OverallAttitude < num2)
                {
                    BuiltObjectList builtObjectList2 = new BuiltObjectList();
                    builtObjectList2.AddRange(empire.BuiltObjects);
                    builtObjectList2.AddRange(empire.PrivateBuiltObjects);
                    for (int j = 0; j < builtObjectList2.Count; j++)
                    {
                        BuiltObject builtObject = builtObjectList2[j];
                        if (builtObject == null || builtObject.Role != BuiltObjectRole.Base || builtObject.BuiltAt != null || builtObject.UnbuiltComponentCount > 0 || (builtObject.SubRole != BuiltObjectSubRole.MiningStation && builtObject.SubRole != BuiltObjectSubRole.GasMiningStation && builtObject.SubRole != BuiltObjectSubRole.GenericBase && builtObject.SubRole != BuiltObjectSubRole.EnergyResearchStation && builtObject.SubRole != BuiltObjectSubRole.WeaponsResearchStation && builtObject.SubRole != BuiltObjectSubRole.HighTechResearchStation && builtObject.SubRole != BuiltObjectSubRole.MonitoringStation && builtObject.SubRole != BuiltObjectSubRole.DefensiveBase && builtObject.SubRole != BuiltObjectSubRole.ResortBase) || builtObject.NearestSystemStar == null || !habitatList.Contains(builtObject.NearestSystemStar))
                        {
                            continue;
                        }
                        if (builtObject.SubRole == BuiltObjectSubRole.MiningStation || builtObject.SubRole == BuiltObjectSubRole.GasMiningStation)
                        {
                            if (builtObject.ParentHabitat != null)
                            {
                                builtObject.SortTag = 100.0 * DetermineResourceValue(builtObject.ParentHabitat);
                            }
                            else
                            {
                                builtObject.SortTag = 1000.0;
                            }
                        }
                        else if (builtObject.SubRole == BuiltObjectSubRole.ResortBase)
                        {
                            builtObject.SortTag = 10000.0;
                        }
                        else
                        {
                            builtObject.SortTag = 10000.0;
                        }
                        builtObjectList.Add(builtObject);
                    }
                }
                for (int k = 0; k < habitatList.Count; k++)
                {
                    Habitat habitat = habitatList[k];
                    if (habitat == null || habitat.SystemIndex < 0 || habitat.SystemIndex >= _Galaxy.Systems.Count)
                    {
                        continue;
                    }
                    SystemInfo systemInfo = _Galaxy.Systems[habitat.SystemIndex];
                    if (systemInfo == null || !systemInfo.IsDisputed || systemInfo.DominantEmpire == null || systemInfo.OtherEmpires == null || (systemInfo.DominantEmpire.Empire != empire && !systemInfo.OtherEmpires.Contains(empire)) || systemInfo.DominantEmpire.Empire != this || systemInfo.Habitats == null)
                    {
                        continue;
                    }
                    for (int l = 0; l < systemInfo.Habitats.Count; l++)
                    {
                        Habitat habitat2 = systemInfo.Habitats[l];
                        if (habitat2 != null && habitat2.Owner == empire && habitat2.Owner.Capital != habitat2)
                        {
                            habitatList2.Add(habitat2);
                        }
                    }
                }
                habitatList2.Sort();
                habitatList2.Reverse();
                builtObjectList.Sort();
                builtObjectList.Reverse();
                TradeableItemList tradeableItemList = new TradeableItemList();
                TradeableItemList tradeableItemList2 = new TradeableItemList();
                if (habitatList2.Count > 0 && Galaxy.Rnd.Next(0, 3) > 0)
                {
                    TradeableItemList tradeableItems = _Galaxy.ResolveTradeableItems(this, empire, includeNearestColony: false, refactorValuesForEmpire: true);
                    int num3 = _Galaxy.ValueColonyForEmpire(habitatList2[0], this);
                    if (num3 >= 0)
                    {
                        num3 = _Galaxy.RefactorValueForEmpire(num3, this, empire);
                    }
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.Colony, habitatList2[0], num3));
                    Habitat systemToExclude = Galaxy.DetermineHabitatSystemStar(habitatList2[0]);
                    tradeableItemList2 = DetermineOfferedTradeItemsForTarget(num3, systemToExclude, tradeableItems, diplomaticRelation, empireEvaluation);
                }
                else if (builtObjectList.Count > 0)
                {
                    TradeableItemList tradeableItems2 = _Galaxy.ResolveTradeableItems(this, empire, includeNearestColony: false, refactorValuesForEmpire: true);
                    int num4 = _Galaxy.ValueBaseForEmpire(builtObjectList[0], this);
                    if (num4 >= 0)
                    {
                        num4 = _Galaxy.RefactorValueForEmpire(num4, this, empire);
                    }
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.Base, builtObjectList[0], num4));
                    tradeableItemList2 = DetermineOfferedTradeItemsForTarget(num4, builtObjectList[0].NearestSystemStar, tradeableItems2, diplomaticRelation, empireEvaluation);
                }
                bool flag = true;
                if (DominantRace != null)
                {
                    flag = DominantRace.Expanding;
                }
                if (tradeableItemList.Count > 0 && tradeableItemList2 != null)
                {
                    string empty = string.Empty;
                    if (tradeableItemList2.Count > 0 && flag)
                    {
                        TradeableItemList tradeableItemList3 = tradeableItemList2.ExtractHighOrderedItemsByType(new TradeableItemType[2]
                        {
                        TradeableItemType.ThreatenWar,
                        TradeableItemType.ThreatenTradeSanctions
                        });
                        empty = ((tradeableItemList3.Count <= 0) ? string.Format(TextResolver.GetText("Trade Offer"), tradeableItemList2.ToString(), tradeableItemList.ToString()) : string.Format(TextResolver.GetText("Trade Demand Threat"), tradeableItemList.ToString(), tradeableItemList2.ToString()));
                    }
                    else
                    {
                        empty = string.Format(TextResolver.GetText("Trade Demand"), tradeableItemList.ToString());
                    }
                    SendMessageToEmpire(empire, EmpireMessageType.OfferTrade, new object[2] { tradeableItemList2, tradeableItemList }, empty);
                    diplomaticRelation.LastTradeDealOfferDate = currentStarDate;
                }
            }
        }

        public long CalculateNextAllowableProposalDate(DiplomaticRelation relation)
        {
            long num = (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * (Galaxy.MinimumDiplomacyTradeProposalIntervalYears * _Galaxy.ColonyFillFactor));
            int num2 = _Galaxy.Empires.Count;
            if (relation.OtherEmpire != null && relation.OtherEmpire.DiplomaticRelations != null)
            {
                num2 = relation.OtherEmpire.DiplomaticRelations.CountMet();
            }
            double val = (double)num2 / (double)_Galaxy.Empires.Count;
            val = Math.Max(0.3, Math.Min(1.0, val));
            num = (long)((double)num * val * 2.0);
            return relation.LastDiplomacyTradeOfferDate + num;
        }

        public long CalculateNextAllowableTradeProposalDate(DiplomaticRelation relation)
        {
            long num = (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * (Galaxy.MinimumDiplomacyTradeProposalIntervalYears * _Galaxy.ColonyFillFactor));
            int num2 = _Galaxy.Empires.Count;
            if (relation.OtherEmpire != null && relation.OtherEmpire.DiplomaticRelations != null)
            {
                num2 = relation.OtherEmpire.DiplomaticRelations.CountMet();
            }
            double val = (double)num2 / (double)_Galaxy.Empires.Count;
            val = Math.Max(0.3, Math.Min(1.0, val));
            num = (long)((double)num * val * 2.0);
            return relation.LastTradeDealOfferDate + num;
        }

        public long CalculateNextAllowableProposalDate(PirateRelation relation)
        {
            long num = (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * 1.0);
            int num2 = _Galaxy.PirateEmpires.Count;
            if (relation.OtherEmpire != null && relation.OtherEmpire.PirateRelations != null)
            {
                num2 = relation.OtherEmpire.PirateRelations.CountKnownPirateFactions();
            }
            double val = (double)num2 / (double)_Galaxy.PirateEmpires.Count;
            val = Math.Max(0.3, Math.Min(1.0, val));
            num = (long)((double)num * val * 3.0);
            return relation.LastOfferDate + num;
        }

        public long CalculateNextAllowableChangeDate(PirateRelation relation)
        {
            long num = (long)((double)Galaxy.RealSecondsInGalacticYear * 1000.0 * 1.0);
            int num2 = _Galaxy.PirateEmpires.Count;
            if (relation.OtherEmpire != null && relation.OtherEmpire.PirateRelations != null)
            {
                num2 = relation.OtherEmpire.PirateRelations.CountKnownPirateFactions();
            }
            double val = (double)num2 / (double)_Galaxy.PirateEmpires.Count;
            val = Math.Max(0.3, Math.Min(1.0, val));
            num = (long)((double)num * val * 3.0);
            return relation.LastChangeDate + num;
        }

        private TradeableItemList DetermineOfferedTradeItemsForTarget(int value, Habitat systemToExclude, TradeableItemList tradeableItems, DiplomaticRelation relation, EmpireEvaluation evaluation)
        {
            TradeableItemList tradeableItemList = new TradeableItemList();
            if (systemToExclude != null)
            {
                TradeableItemList tradeableItemList2 = new TradeableItemList();
                foreach (TradeableItem tradeableItem in tradeableItems)
                {
                    if (tradeableItem.Type == TradeableItemType.Base)
                    {
                        BuiltObject builtObject = (BuiltObject)tradeableItem.Item;
                        if (builtObject.NearestSystemStar == systemToExclude)
                        {
                            tradeableItemList2.Add(tradeableItem);
                        }
                    }
                    else if (tradeableItem.Type == TradeableItemType.Colony)
                    {
                        Habitat habitat = (Habitat)tradeableItem.Item;
                        Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                        if (habitat2 == systemToExclude)
                        {
                            tradeableItemList2.Add(tradeableItem);
                        }
                    }
                }
                if (tradeableItemList2.Count > 0)
                {
                    foreach (TradeableItem item in tradeableItemList2)
                    {
                        tradeableItems.Remove(item);
                    }
                }
            }
            double num = Math.Sqrt((double)DominantRace.FriendlinessLevel / 100.0);
            num += Galaxy.Rnd.NextDouble() * 0.05;
            num = Math.Min(1.1, num);
            int valueWillingToPay = (int)((double)value * num);
            if (relation.Type == DiplomaticRelationType.War)
            {
                TradeableItemList tradeableItemList3 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.EndWar);
                if (tradeableItemList3.Count > 0)
                {
                    tradeableItemList.AddRange(tradeableItemList3);
                }
            }
            else if (relation.Type == DiplomaticRelationType.TradeSanctions)
            {
                TradeableItemList tradeableItemList4 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.LiftTradeSanctions);
                if (tradeableItemList4.Count > 0)
                {
                    tradeableItemList.AddRange(tradeableItemList4);
                }
            }
            else if ((DominantRace.AggressionLevel >= 125 || evaluation.OverallAttitude < -45) && relation.Strategy == DiplomaticStrategy.Conquer && Galaxy.Rnd.Next(0, 2) == 1)
            {
                TradeableItemList tradeableItemList5 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.ThreatenWar);
                TradeableItemList tradeableItemList6 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.ThreatenTradeSanctions);
                if (tradeableItemList5.Count > 0)
                {
                    tradeableItemList.AddRange(tradeableItemList5);
                }
                else if (tradeableItemList6.Count > 0)
                {
                    tradeableItemList.AddRange(tradeableItemList6);
                }
            }
            else if ((DominantRace.AggressionLevel < 115 && evaluation.OverallAttitude >= -25) || (relation.Strategy != DiplomaticStrategy.Conquer && relation.Strategy != DiplomaticStrategy.Punish) || Galaxy.Rnd.Next(0, 3) <= 0)
            {
                tradeableItemList = DetermineOfferedTradeItems(valueWillingToPay, tradeableItems, 6);
            }
            return tradeableItemList;
        }

        private TradeableItemList DetermineOfferedTradeItems(int valueWillingToPay, TradeableItemList tradeableItems, int maximumItems)
        {
            TradeableItemList tradeableItemList = new TradeableItemList();
            int num = (int)((double)valueWillingToPay * 1.5);
            TradeableItemList tradeableItemList2 = tradeableItems.ExtractHighOrderedItemsByType(new TradeableItemType[2]
            {
            TradeableItemType.EndWar,
            TradeableItemType.LiftTradeSanctions
            });
            if (tradeableItemList2.Count > 0 && tradeableItemList2.TotalValue >= valueWillingToPay && tradeableItemList2.TotalValue < num)
            {
                if (tradeableItemList.Count < maximumItems)
                {
                    tradeableItemList.AddRange(tradeableItemList2);
                }
                return tradeableItemList;
            }
            if (tradeableItemList.TotalValue < valueWillingToPay)
            {
                TradeableItemList tradeableItemList3 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.Colony);
                for (int i = 0; i < tradeableItemList3.Count; i++)
                {
                    if (tradeableItemList.TotalValue < valueWillingToPay && tradeableItemList.TotalValue + tradeableItemList3[i].Value < num && tradeableItemList.Count < maximumItems)
                    {
                        tradeableItemList.Add(tradeableItemList3[i]);
                    }
                }
            }
            if (tradeableItemList.TotalValue < valueWillingToPay)
            {
                TradeableItemList tradeableItemList4 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.Base);
                for (int j = 0; j < tradeableItemList4.Count; j++)
                {
                    if (tradeableItemList.TotalValue < valueWillingToPay && tradeableItemList.TotalValue + tradeableItemList4[j].Value < num && tradeableItemList.Count < maximumItems)
                    {
                        tradeableItemList.Add(tradeableItemList4[j]);
                    }
                }
            }
            if (tradeableItemList.TotalValue < valueWillingToPay)
            {
                TradeableItemList tradeableItemList5 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.ResearchProject);
                for (int k = 0; k < tradeableItemList5.Count; k++)
                {
                    if (tradeableItemList.TotalValue < valueWillingToPay && tradeableItemList.TotalValue + tradeableItemList5[k].Value < num && tradeableItemList.Count < maximumItems)
                    {
                        tradeableItemList.Add(tradeableItemList5[k]);
                    }
                }
            }
            if (tradeableItemList.TotalValue < valueWillingToPay)
            {
                TradeableItemList tradeableItemList6 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.TerritoryMap);
                TradeableItemList tradeableItemList7 = tradeableItems.ExtractHighOrderedItemsByType(TradeableItemType.GalaxyMap);
                if (tradeableItemList6.Count > 0 && tradeableItemList.TotalValue + tradeableItemList6.TotalValue < num && tradeableItemList.Count < maximumItems)
                {
                    tradeableItemList.AddRange(tradeableItemList6);
                }
                if (tradeableItemList7.Count > 0 && tradeableItemList.TotalValue < valueWillingToPay && tradeableItemList.TotalValue + tradeableItemList7.TotalValue < num)
                {
                    if (tradeableItemList6.Count > 0)
                    {
                        tradeableItemList.Remove(tradeableItemList6[0]);
                    }
                    if (tradeableItemList.Count < maximumItems)
                    {
                        tradeableItemList.AddRange(tradeableItemList7);
                    }
                }
            }
            if (tradeableItemList.TotalValue < valueWillingToPay)
            {
                int num2 = (int)(StateMoney * 0.2);
                if (num2 > 0)
                {
                    int val = valueWillingToPay - tradeableItemList.TotalValue;
                    val = Math.Min(val, num2);
                    if (tradeableItemList.TotalValue + val < num && tradeableItemList.Count < maximumItems)
                    {
                        tradeableItemList.Add(new TradeableItem(TradeableItemType.Money, (double)val, val));
                    }
                }
            }
            if (tradeableItemList.TotalValue < valueWillingToPay)
            {
                tradeableItemList.Clear();
                tradeableItemList = null;
            }
            return tradeableItemList;
        }

        public void TradeItems()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate - (long)(Galaxy.MinimumDiplomacyTradeProposalIntervalYears * _Galaxy.ColonyFillFactor * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            if (this == _Galaxy.PlayerEmpire)
            {
                return;
            }
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions || diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.LastTradeDealOfferDate > num || (diplomaticRelation.Strategy != DiplomaticStrategy.Ally && diplomaticRelation.Strategy != DiplomaticStrategy.Befriend))
                {
                    continue;
                }
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(diplomaticRelation.OtherEmpire);
                int overallAttitude = empireEvaluation.OverallAttitude;
                TradeableItemList tradeableItemList = new TradeableItemList();
                int num2 = Galaxy.TradeResearchThreshhold;
                if (diplomaticRelation.OtherEmpire == _Galaxy.PlayerEmpire)
                {
                    num2 = (int)((double)Galaxy.TradeResearchThreshhold * _Galaxy.DifficultyLevel);
                }
                if (diplomaticRelation.Strategy == DiplomaticStrategy.Ally && overallAttitude >= num2 && _Galaxy.AllowTechTrading)
                {
                    int num3 = Galaxy.TradeResearchSpecialThreshhold;
                    if (diplomaticRelation.OtherEmpire == _Galaxy.PlayerEmpire)
                    {
                        num3 = (int)((double)Galaxy.TradeResearchSpecialThreshhold * _Galaxy.DifficultyLevel);
                    }
                    bool includeSpecialTech = false;
                    if (overallAttitude >= num3)
                    {
                        includeSpecialTech = true;
                    }
                    tradeableItemList.AddRange(_Galaxy.ResolveTradeableItemsResearchProjects(this, diplomaticRelation.OtherEmpire, refactorValuesForEmpire: true, includeSpecialTech));
                }
                if (diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation.Type != DiplomaticRelationType.Protectorate)
                {
                    tradeableItemList.AddRange(_Galaxy.ResolveTradeableItemsMaps(this, diplomaticRelation.OtherEmpire, refactorValuesForEmpire: true));
                }
                if (tradeableItemList.Count <= 0)
                {
                    continue;
                }
                int index = Galaxy.Rnd.Next(0, tradeableItemList.Count);
                TradeableItem tradeableItem = tradeableItemList[index];
                bool flag = true;
                string description = "We offer ";
                switch (tradeableItem.Type)
                {
                    case TradeableItemType.TerritoryMap:
                        {
                            description = string.Format(TextResolver.GetText("Trade Swap Maps"), tradeableItem.ToString());
                            int offeredValue2 = _Galaxy.RefactorValueForEmpire(_Galaxy.ValueTerritoryMapForEmpire(diplomaticRelation.OtherEmpire, this), this, diplomaticRelation.OtherEmpire);
                            flag = DetermineAcceptTerritoryMapTrade(offeredValue2, diplomaticRelation.OtherEmpire);
                            break;
                        }
                    case TradeableItemType.GalaxyMap:
                        {
                            description = string.Format(TextResolver.GetText("Trade Swap Maps"), tradeableItem.ToString());
                            int offeredValue = _Galaxy.RefactorValueForEmpire(_Galaxy.ValueGalaxyMapForEmpire(diplomaticRelation.OtherEmpire, this), this, diplomaticRelation.OtherEmpire);
                            flag = DetermineAcceptGalaxyMapTrade(offeredValue, diplomaticRelation.OtherEmpire);
                            break;
                        }
                    case TradeableItemType.ResearchProject:
                        {
                            string arg = tradeableItem.ToString();
                            if (tradeableItem.Item is ResearchNode)
                            {
                                ResearchNode researchNode = (ResearchNode)tradeableItem.Item;
                                arg = researchNode.Name;
                            }
                            description = string.Format(TextResolver.GetText("Trade Tech"), arg, tradeableItem.Value.ToString());
                            double num4 = (double)tradeableItem.Value * 1.2;
                            if (diplomaticRelation.OtherEmpire.StateMoney < num4)
                            {
                                flag = false;
                            }
                            break;
                        }
                }
                if (flag)
                {
                    diplomaticRelation.LastTradeDealOfferDate = currentStarDate;
                    SendMessageToEmpire(diplomaticRelation.OtherEmpire, EmpireMessageType.OfferTrade, tradeableItem, description);
                }
            }
        }

        public void PirateTradeItems()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            _ = Galaxy.RealSecondsInGalacticYear;
            if (this == _Galaxy.PlayerEmpire)
            {
                return;
            }
            for (int i = 0; i < PirateRelations.Count; i++)
            {
                PirateRelation pirateRelation = PirateRelations[i];
                if (pirateRelation.Type == PirateRelationType.NotMet || pirateRelation.OtherEmpire == null)
                {
                    continue;
                }
                long num = (long)((double)Galaxy.RealSecondsInGalacticYear * 2.0 * 1000.0);
                int num2 = pirateRelation.OtherEmpire.PirateRelations.CountKnownPirateFactions();
                double num3 = Math.Min(7.0, Math.Max(1.0, (double)num2 / 3.0));
                num = (long)((double)num * num3);
                long num4 = (long)((double)Galaxy.RealSecondsInGalacticYear * 0.5);
                long num5 = (long)(((double)num4 * 0.5 + (double)num4 * 0.5 * Galaxy.Rnd.NextDouble()) * num3);
                num += num5;
                long num6 = currentStarDate - num;
                if (pirateRelation.LastInfoDate > num6)
                {
                    continue;
                }
                int num7 = (int)pirateRelation.Evaluation;
                TradeableItemList tradeableItemList = new TradeableItemList();
                if (_Galaxy.AllowTechTrading)
                {
                    int num8 = 0;
                    if (pirateRelation.OtherEmpire == _Galaxy.PlayerEmpire && _Galaxy.DifficultyLevel > 1.0)
                    {
                        num8 = (int)(20.0 * (_Galaxy.DifficultyLevel - 1.0));
                    }
                    if (num7 >= num8)
                    {
                        bool includeSpecialTech = false;
                        int num9 = 30;
                        if (pirateRelation.OtherEmpire == _Galaxy.PlayerEmpire)
                        {
                            num9 = (int)(30.0 * _Galaxy.DifficultyLevel);
                        }
                        if (num7 >= num9)
                        {
                            includeSpecialTech = true;
                        }
                        tradeableItemList.AddRange(_Galaxy.ResolveTradeableItemsResearchProjects(this, pirateRelation.OtherEmpire, refactorValuesForEmpire: true, includeSpecialTech, includeWarpColonizationWeapons: false));
                    }
                }
                if (tradeableItemList.Count <= 0)
                {
                    continue;
                }
                int index = Galaxy.Rnd.Next(0, tradeableItemList.Count);
                TradeableItem tradeableItem = tradeableItemList[index];
                bool flag = true;
                string description = "We offer ";
                TradeableItemType type = tradeableItem.Type;
                if (type == TradeableItemType.ResearchProject)
                {
                    string arg = tradeableItem.ToString();
                    ResearchNode researchNode = null;
                    if (tradeableItem.Item is ResearchNode)
                    {
                        researchNode = (ResearchNode)tradeableItem.Item;
                        arg = researchNode.Name;
                    }
                    description = string.Format(TextResolver.GetText("Trade Tech"), arg, tradeableItem.Value.ToString());
                    double num10 = (double)tradeableItem.Value * 1.2;
                    if (pirateRelation.OtherEmpire.StateMoney < num10)
                    {
                        flag = false;
                    }
                    if (pirateRelation.OtherEmpire.Research != null && researchNode != null)
                    {
                        ResearchNode researchNode2 = pirateRelation.OtherEmpire.Research.TechTree.FindNodeById(researchNode.ResearchNodeId);
                        if (researchNode2 != null && (researchNode2.IsResearched || researchNode2.Progress > 0.8f))
                        {
                            flag = false;
                        }
                    }
                }
                if (flag)
                {
                    pirateRelation.LastInfoDate = currentStarDate;
                    SendMessageToEmpire(pirateRelation.OtherEmpire, EmpireMessageType.OfferTrade, tradeableItem, description);
                }
            }
        }

        public bool DetermineAcceptTerritoryMapTrade(int offeredValue, Empire offeringEmpire)
        {
            bool flag = false;
            if (PirateEmpireBaseHabitat == null && offeringEmpire.PirateEmpireBaseHabitat == null)
            {
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(offeringEmpire);
                if (empireEvaluation.OverallAttitude >= Galaxy.TradeTerritoryMapThreshhold && !Reclusive)
                {
                    flag = true;
                }
            }
            else
            {
                PirateRelation pirateRelation = ObtainPirateRelation(offeringEmpire);
                if (pirateRelation.Evaluation >= (float)Galaxy.TradeTerritoryMapThreshhold && !Reclusive)
                {
                    flag = true;
                }
            }
            if (flag)
            {
                int num = _Galaxy.RefactorValueForEmpire(_Galaxy.ValueTerritoryMapForEmpire(this, offeringEmpire), offeringEmpire, this);
                int num2 = (int)((double)num * 0.75);
                if (offeredValue >= num2)
                {
                    return true;
                }
            }
            return false;
        }

        public bool CheckKnowledgeOfSecretLocations(Empire otherEmpire)
        {
            GalaxyLocationList galaxyLocationList = new GalaxyLocationList();
            galaxyLocationList.AddRange(KnownGalaxyLocations.FindLocations(GalaxyLocationType.RestrictedArea));
            galaxyLocationList.AddRange(KnownGalaxyLocations.FindLocations(GalaxyLocationType.DebrisField));
            galaxyLocationList.AddRange(KnownGalaxyLocations.FindLocations(GalaxyLocationType.PlanetDestroyer));
            foreach (GalaxyLocation item in galaxyLocationList)
            {
                if (!otherEmpire.KnownGalaxyLocations.Contains(item))
                {
                    return true;
                }
            }
            return false;
        }

        public int ObtainAttitude(Empire empire)
        {
            int result = 0;
            if (empire != null)
            {
                if (PirateEmpireBaseHabitat == null && empire.PirateEmpireBaseHabitat == null)
                {
                    EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(empire);
                    result = empireEvaluation.OverallAttitude;
                }
                else
                {
                    PirateRelation pirateRelation = ObtainPirateRelation(empire);
                    result = (int)pirateRelation.Evaluation;
                }
            }
            return result;
        }

        public bool DetermineAcceptGalaxyMapTrade(int offeredValue, Empire offeringEmpire)
        {
            int num = ObtainAttitude(offeringEmpire);
            if (num >= Galaxy.TradeGalaxyMapThreshhold && !Reclusive)
            {
                int num2 = _Galaxy.RefactorValueForEmpire(_Galaxy.ValueGalaxyMapForEmpire(this, offeringEmpire), offeringEmpire, this);
                int num3 = (int)((double)num2 * 0.85);
                if (offeredValue >= num3 && !CheckKnowledgeOfSecretLocations(offeringEmpire))
                {
                    return true;
                }
            }
            return false;
        }

        public HabitatList DetermineEmpireSystems(Empire empire)
        {
            return DetermineEmpireSystems(empire, mustOwnColonies: false);
        }

        public HabitatList DetermineEmpireSystems(Empire empire, bool mustOwnColonies)
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                Habitat habitat = empire.Colonies[i];
                if (!mustOwnColonies || habitat.Owner == empire)
                {
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                    if (habitat2 != null && habitatList.IndexOf(habitat2) < 0)
                    {
                        habitatList.Add(habitat2);
                    }
                }
            }
            return habitatList;
        }

        public HabitatList DetermineEmpireDominatedSystems(Empire empire, bool includeAllTerritory)
        {
            HabitatList habitatList = new HabitatList();
            if (includeAllTerritory)
            {
                for (int i = 0; i < _Galaxy.Systems.Count; i++)
                {
                    SystemInfo systemInfo = _Galaxy.Systems[i];
                    if (systemInfo != null && systemInfo.SystemStar != null)
                    {
                        bool disputed = false;
                        int num = _Galaxy.EmpireTerritory.CheckSystemOwnership(_Galaxy, systemInfo.SystemStar, out disputed);
                        if (num == empire.EmpireId && habitatList.IndexOf(systemInfo.SystemStar) < 0)
                        {
                            habitatList.Add(systemInfo.SystemStar);
                        }
                    }
                }
            }
            else
            {
                for (int j = 0; j < empire.Colonies.Count; j++)
                {
                    Habitat habitat = empire.Colonies[j];
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                    if (habitat2 != null)
                    {
                        EmpireSystemSummary dominantEmpire = _Galaxy.Systems[habitat2.SystemIndex].DominantEmpire;
                        if (dominantEmpire != null && dominantEmpire.Empire != null && dominantEmpire.Empire == empire && habitatList.IndexOf(habitat2) < 0)
                        {
                            habitatList.Add(habitat2);
                        }
                    }
                }
            }
            return habitatList;
        }

        private int CalculateSystemCompetition(Empire empire, HabitatList ourSystemStars)
        {
            return BaconEmpire.CalculateSystemCompetition(this, empire, ourSystemStars);
        }

        private int CalculateTradeVolume(Empire empire)
        {
            DiplomaticRelation diplomaticRelation = DiplomaticRelations[empire];
            if (diplomaticRelation == null)
            {
                diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.NotMet, this, this, empire, tradeRestrictedResources: false);
            }
            int val = (int)(diplomaticRelation.NormalizedAnnualTradeValue / 4000.0);
            return Math.Min(25, val);
        }

        public void SendMessageToEmpire(Empire recipientEmpire, EmpireMessageType messageType, object subject, string description)
        {
            SendMessageToEmpire(recipientEmpire, messageType, subject, description, Point.Empty, string.Empty);
        }

        public void SendMessageToEmpireWithTitle(Empire recipientEmpire, EmpireMessageType messageType, object subject, string description, string title)
        {
            SendMessageToEmpire(recipientEmpire, messageType, subject, description, Point.Empty, string.Empty, title);
        }

        public void SendMessageToEmpire(Empire recipientEmpire, EmpireMessageType messageType, object subject, string description, string messageHint)
        {
            SendMessageToEmpire(recipientEmpire, messageType, subject, description, Point.Empty, messageHint);
        }

        public void SendMessageToEmpire(Empire recipientEmpire, EmpireMessageType messageType, object subject, string description, Point location, string messageHint)
        {
            SendMessageToEmpire(recipientEmpire, messageType, subject, description, location, messageHint, string.Empty);
        }

        public void SendMessageToEmpire(Empire recipientEmpire, EmpireMessageType messageType, object subject, string description, Point location, string messageHint, string title)
        {
            EmpireMessage empireMessage = new EmpireMessage(this, messageType, subject);
            empireMessage.Description = description;
            empireMessage.Title = title;
            empireMessage.Location = location;
            empireMessage.Hint = messageHint;
            SendMessageToEmpire(empireMessage, recipientEmpire);
        }

        public void SendMessageToEmpire(EmpireMessage message, Empire recipientEmpire)
        {
            if (recipientEmpire != null)
            {
                if (recipientEmpire.Messages != null)
                {
                    recipientEmpire.Messages.Add(message);
                }
                if (recipientEmpire.MessageRecipient != null)
                {
                    recipientEmpire.MessageRecipient.ReceiveMessage(message);
                }
            }
        }

        public void SendNewsBroadcast(EventMessageType eventType, object subject)
        {
            SendNewsBroadcast(eventType, subject, DisasterEventType.Undefined, warStartEnd: false, wonderBegun: false);
        }

        public void SendNewsBroadcastWarStartEnd(DiplomaticRelation relation)
        {
            SendNewsBroadcast(EventMessageType.Undefined, relation, DisasterEventType.Undefined, warStartEnd: true, wonderBegun: false);
        }

        public void SendNewsBroadcastWonderBegin(PlanetaryFacilityDefinition wonder, Habitat colony)
        {
            SendNewsBroadcast(EventMessageType.Undefined, wonder, DisasterEventType.Undefined, warStartEnd: false, wonderBegun: true, colony);
        }

        public void SendNewsBroadcast(EventMessageType eventType, object subject, DisasterEventType disasterType, bool warStartEnd, bool wonderBegun)
        {
            SendNewsBroadcast(eventType, subject, disasterType, warStartEnd, wonderBegun, null);
        }

        public void SendNewsBroadcast(EventMessageType eventType, object subject, DisasterEventType disasterType, bool warStartEnd, bool wonderBegun, object extraData)
        {
            SendNewsBroadcast(eventType, subject, disasterType, warStartEnd, wonderBegun, EmpireMessageType.Undefined, extraData);
        }

        public void SendNewsBroadcast(EventMessageType eventType, object subject, DisasterEventType disasterType, bool warStartEnd, bool wonderBegun, EmpireMessageType messageType, object extraData)
        {
            object[] state = new object[7] { eventType, subject, disasterType, warStartEnd, wonderBegun, messageType, extraData };
            ThreadPool.QueueUserWorkItem(SendNewsBroadcastCallback, state);
        }

        public void SendNewsBroadcastCallback(object data)
        {
            if (data is object[])
            {
                object[] array = (object[])data;
                EventMessageType eventType = (EventMessageType)array[0];
                object subject = array[1];
                DisasterEventType disasterType = (DisasterEventType)array[2];
                bool warStartEnd = (bool)array[3];
                bool wonderBegun = (bool)array[4];
                EmpireMessageType messageType = (EmpireMessageType)array[5];
                object extraData = array[6];
                SendNewsBroadcastCore(eventType, subject, disasterType, warStartEnd, wonderBegun, messageType, extraData);
            }
        }

        public void SendNewsBroadcastCore(EventMessageType eventType, object subject, DisasterEventType disasterType, bool warStartEnd, bool wonderBegun, EmpireMessageType messageType, object extraData)
        {
            string text = string.Empty;
            switch (messageType)
            {
                case EmpireMessageType.EmpireDefeated:
                    {
                        if (!(subject is Empire))
                        {
                            break;
                        }
                        Empire empire5 = (Empire)subject;
                        if (empire5 != null)
                        {
                            Empire empire6 = null;
                            if (extraData != null && extraData is Empire)
                            {
                                empire6 = (Empire)extraData;
                            }
                            text = ((empire6 != null) ? string.Format(TextResolver.GetText("X has been defeated by Y"), empire5.Name, empire6.Name) : string.Format(TextResolver.GetText("X has been defeated"), empire5.Name));
                        }
                        break;
                    }
                case EmpireMessageType.ResearchBreakthrough:
                    {
                        if (subject == null || !(subject is ResearchNode))
                        {
                            break;
                        }
                        ResearchNode researchNode = (ResearchNode)subject;
                        if (researchNode != null)
                        {
                            Empire empire4 = null;
                            if (extraData != null && extraData is Empire)
                            {
                                empire4 = (Empire)extraData;
                            }
                            text = ((empire4 != null) ? string.Format(TextResolver.GetText("The EMPIRE has made a breakthrough in the key technology of X"), empire4.Name, researchNode.Name) : string.Format(TextResolver.GetText("An empire has made a breakthrough in the key technology of X"), researchNode.Name));
                        }
                        break;
                    }
                default:
                    if (warStartEnd)
                    {
                        if (!(subject is DiplomaticRelation))
                        {
                            break;
                        }
                        DiplomaticRelation diplomaticRelation = (DiplomaticRelation)subject;
                        if (diplomaticRelation != null)
                        {
                            Empire empire = null;
                            Empire empire2 = null;
                            empire = diplomaticRelation.Initiator;
                            empire2 = ((diplomaticRelation.ThisEmpire != empire) ? diplomaticRelation.ThisEmpire : diplomaticRelation.OtherEmpire);
                            if (empire != null && empire2 != null)
                            {
                                text = ((diplomaticRelation.Type != DiplomaticRelationType.War) ? string.Format(TextResolver.GetText("The war between X and Y has ended"), empire.Name, empire2.Name) : string.Format(TextResolver.GetText("X has declared war on Y"), empire.Name, empire2.Name));
                            }
                        }
                    }
                    else if (wonderBegun)
                    {
                        if (!(subject is PlanetaryFacilityDefinition))
                        {
                            break;
                        }
                        PlanetaryFacilityDefinition planetaryFacilityDefinition = (PlanetaryFacilityDefinition)subject;
                        if (planetaryFacilityDefinition == null || planetaryFacilityDefinition.Type != PlanetaryFacilityType.Wonder)
                        {
                            break;
                        }
                        if (extraData != null && extraData is Habitat)
                        {
                            Habitat habitat = (Habitat)extraData;
                            if (habitat != null)
                            {
                                Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                                text = string.Format(TextResolver.GetText("Wonder construction begun WONDER COLONY SYSTEM"), planetaryFacilityDefinition.Name, habitat.Name, habitat2.Name);
                            }
                            else
                            {
                                text = string.Format(TextResolver.GetText("Wonder construction begun WONDER"), planetaryFacilityDefinition.Name);
                            }
                        }
                        else
                        {
                            text = string.Format(TextResolver.GetText("Wonder construction begun WONDER"), planetaryFacilityDefinition.Name);
                        }
                    }
                    else
                    {
                        if (eventType == EventMessageType.Undefined)
                        {
                            break;
                        }
                        switch (eventType)
                        {
                            case EventMessageType.CreatureOutbreak:
                                {
                                    if (subject == null || !(subject is Creature))
                                    {
                                        break;
                                    }
                                    Creature creature = (Creature)subject;
                                    if (creature != null && creature.Type == CreatureType.SilverMist && extraData != null && extraData is Habitat)
                                    {
                                        Habitat habitat3 = (Habitat)extraData;
                                        if (habitat3 != null)
                                        {
                                            Habitat habitat4 = Galaxy.DetermineHabitatSystemStar(habitat3);
                                            string arg = Galaxy.ResolveSectorDescription(habitat3.Xpos, habitat3.Ypos);
                                            text = string.Format(TextResolver.GetText("SilverMist Released Broadcast"), habitat3.Name, habitat4.Name, arg);
                                        }
                                    }
                                    break;
                                }
                            case EventMessageType.DisasterEvent:
                                if (disasterType == DisasterEventType.EconomicCrisis)
                                {
                                    text = Galaxy.ResolveDescription(disasterType);
                                }
                                else
                                {
                                    if (subject == null || !(subject is Habitat))
                                    {
                                        break;
                                    }
                                    Habitat habitat7 = (Habitat)subject;
                                    if (habitat7 == null)
                                    {
                                        break;
                                    }
                                    if (messageType == EmpireMessageType.ColonyLost && disasterType == DisasterEventType.Plague)
                                    {
                                        string arg2 = string.Empty;
                                        string arg3 = string.Empty;
                                        if (habitat7.Empire != null)
                                        {
                                            arg2 = habitat7.Empire.Name;
                                        }
                                        if (extraData != null && extraData is Plague)
                                        {
                                            arg3 = ((Plague)extraData).Name;
                                        }
                                        text = string.Format(TextResolver.GetText("News EMPIRE COLONY has been completely wiped out by PLAGUE"), arg2, habitat7.Name, arg3);
                                    }
                                    else
                                    {
                                        text = string.Format(TextResolver.GetText("Disaster at COLONY"), Galaxy.ResolveDescription(disasterType), habitat7.Name);
                                    }
                                }
                                break;
                            case EventMessageType.WonderBuilt:
                                {
                                    if (!(subject is PlanetaryFacility))
                                    {
                                        break;
                                    }
                                    PlanetaryFacility planetaryFacility = (PlanetaryFacility)subject;
                                    if (planetaryFacility == null || planetaryFacility.Type != PlanetaryFacilityType.Wonder)
                                    {
                                        break;
                                    }
                                    if (extraData != null && extraData is Habitat)
                                    {
                                        Habitat habitat5 = (Habitat)extraData;
                                        if (habitat5 != null)
                                        {
                                            Habitat habitat6 = Galaxy.DetermineHabitatSystemStar(habitat5);
                                            text = string.Format(TextResolver.GetText("Wonder construction completed WONDER COLONY SYSTEM"), planetaryFacility.Name, habitat5.Name, habitat6.Name);
                                        }
                                        else
                                        {
                                            text = string.Format(TextResolver.GetText("Wonder construction completed WONDER"), planetaryFacility.Name);
                                        }
                                    }
                                    else
                                    {
                                        text = string.Format(TextResolver.GetText("Wonder construction completed WONDER"), planetaryFacility.Name);
                                    }
                                    break;
                                }
                            case EventMessageType.LeaderChange:
                                if (subject != null && subject is Character)
                                {
                                    Character character2 = (Character)subject;
                                    if (character2 != null && character2.Role == CharacterRole.Leader)
                                    {
                                        text = string.Format(TextResolver.GetText("Empire Leader Replaced"), Name, character2.Name);
                                    }
                                }
                                break;
                            case EventMessageType.PhantomPirates:
                                if (subject != null && subject is Empire)
                                {
                                    Empire empire3 = (Empire)subject;
                                    if (empire3 != null)
                                    {
                                        text = string.Format(TextResolver.GetText("Phantom Pirates encountered"), empire3.Name);
                                    }
                                }
                                break;
                            case EventMessageType.CharacterEvent:
                                if (subject != null && subject is Character)
                                {
                                    Character character = (Character)subject;
                                    if (character != null && (character.Role == CharacterRole.Leader || character.Role == CharacterRole.PirateLeader))
                                    {
                                        text = string.Format(TextResolver.GetText("Empire Leader killed"), Name, character.Name);
                                    }
                                }
                                break;
                        }
                    }
                    break;
            }
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation2 = DiplomaticRelations[i];
                    if (diplomaticRelation2 == null || diplomaticRelation2.Type == DiplomaticRelationType.NotMet || diplomaticRelation2.OtherEmpire == null || diplomaticRelation2.OtherEmpire == this || diplomaticRelation2.OtherEmpire.PirateEmpireBaseHabitat != null)
                    {
                        continue;
                    }
                    Empire otherEmpire = diplomaticRelation2.OtherEmpire;
                    bool flag = false;
                    if (messageType == EmpireMessageType.EmpireDefeated)
                    {
                        flag = true;
                    }
                    else if (warStartEnd)
                    {
                        flag = true;
                    }
                    else if (wonderBegun)
                    {
                        flag = true;
                    }
                    else if (eventType != 0)
                    {
                        switch (eventType)
                        {
                            case EventMessageType.DisasterEvent:
                                if (disasterType == DisasterEventType.EconomicCrisis)
                                {
                                    flag = true;
                                }
                                else if (subject is Habitat)
                                {
                                    Habitat habitat8 = (Habitat)subject;
                                    if (habitat8 != null && otherEmpire.CheckSystemExplored(habitat8.SystemIndex))
                                    {
                                        flag = true;
                                    }
                                }
                                break;
                            case EventMessageType.WonderBuilt:
                                flag = true;
                                break;
                            case EventMessageType.CreatureOutbreak:
                                flag = true;
                                break;
                            case EventMessageType.PhantomPirates:
                                flag = true;
                                break;
                            case EventMessageType.LeaderChange:
                                flag = true;
                                break;
                            case EventMessageType.CharacterEvent:
                                if (!string.IsNullOrEmpty(text))
                                {
                                    flag = true;
                                }
                                break;
                        }
                    }
                    if (flag)
                    {
                        string description = TextResolver.GetText("Galactic NewsNet").ToUpper(CultureInfo.InvariantCulture) + ": " + Name + " - " + text;
                        string title = TextResolver.GetText("Galactic NewsNet").ToUpper(CultureInfo.InvariantCulture) + ": " + Name;
                        EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.GalacticNewsNet, subject);
                        empireMessage.Description = description;
                        empireMessage.Title = title;
                        SendMessageToEmpire(empireMessage, diplomaticRelation2.OtherEmpire);
                    }
                }
            }
            for (int j = 0; j < _Galaxy.PirateEmpires.Count; j++)
            {
                Empire empire7 = _Galaxy.PirateEmpires[j];
                if (empire7 == null || !empire7.Active || empire7.PirateEmpireBaseHabitat == null)
                {
                    continue;
                }
                PirateRelation pirateRelation = ObtainPirateRelation(empire7);
                bool flag2 = false;
                switch (messageType)
                {
                    case EmpireMessageType.EmpireDefeated:
                        if (pirateRelation.Type != 0)
                        {
                            flag2 = true;
                        }
                        break;
                    case EmpireMessageType.ResearchBreakthrough:
                        flag2 = true;
                        break;
                    default:
                        if (warStartEnd)
                        {
                            if (pirateRelation.Type != 0)
                            {
                                flag2 = true;
                            }
                        }
                        else if (wonderBegun)
                        {
                            if (pirateRelation.Type != 0)
                            {
                                flag2 = true;
                            }
                        }
                        else
                        {
                            if (eventType == EventMessageType.Undefined)
                            {
                                break;
                            }
                            switch (eventType)
                            {
                                case EventMessageType.DisasterEvent:
                                    if (disasterType == DisasterEventType.EconomicCrisis)
                                    {
                                        if (pirateRelation.Type != 0)
                                        {
                                            flag2 = true;
                                        }
                                    }
                                    else if (subject is Habitat)
                                    {
                                        Habitat habitat9 = (Habitat)subject;
                                        if (habitat9 != null && empire7.CheckSystemExplored(habitat9.SystemIndex))
                                        {
                                            flag2 = true;
                                        }
                                    }
                                    break;
                                case EventMessageType.WonderBuilt:
                                    if (pirateRelation.Type != 0)
                                    {
                                        flag2 = true;
                                    }
                                    break;
                                case EventMessageType.CreatureOutbreak:
                                    if (pirateRelation.Type != 0)
                                    {
                                        flag2 = true;
                                    }
                                    break;
                                case EventMessageType.PhantomPirates:
                                    flag2 = true;
                                    break;
                                case EventMessageType.LeaderChange:
                                    if (pirateRelation.Type != 0)
                                    {
                                        flag2 = true;
                                    }
                                    break;
                                case EventMessageType.CharacterEvent:
                                    if (!string.IsNullOrEmpty(text) && pirateRelation.Type != 0)
                                    {
                                        flag2 = true;
                                    }
                                    break;
                            }
                        }
                        break;
                }
                if (flag2)
                {
                    string description2 = TextResolver.GetText("Galactic NewsNet").ToUpper(CultureInfo.InvariantCulture) + ": " + Name + " - " + text;
                    string title2 = TextResolver.GetText("Galactic NewsNet").ToUpper(CultureInfo.InvariantCulture) + ": " + Name;
                    EmpireMessage empireMessage2 = new EmpireMessage(this, EmpireMessageType.GalacticNewsNet, subject);
                    empireMessage2.Description = description2;
                    empireMessage2.Title = title2;
                    SendMessageToEmpire(empireMessage2, empire7);
                }
            }
        }

        public void SendEventMessageToEmpire(EventMessageType eventMessageType, string title, string message, object additionalData, object location)
        {
            if (EventMessageRecipient != null)
            {
                EventMessageRecipient.ReceiveEventMessage(eventMessageType, title, message, additionalData, location);
            }
        }

        private void CheckReviewSpecialPirateEvents()
        {
            if (PirateExtortionOfferMade && !PreWarpProgressEventOccurredExperienceFirstPirateRaid && Capital != null)
            {
                CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.FirstPirateRaid, Capital, null, "avoid");
            }
        }

        public bool CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType eventType, object subject)
        {
            return CheckSendPreWarpProgressEventMessage(eventType, subject, null);
        }

        public bool CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType eventType, object subject, Empire empire)
        {
            return CheckSendPreWarpProgressEventMessage(eventType, subject, empire, string.Empty);
        }

        public bool CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType eventType, object subject, Empire empire, string hint)
        {
            if (this != _Galaxy.IndependentEmpire)
            {
                StellarObject stellarObject = null;
                BuiltObject builtObject = null;
                Habitat habitat = null;
                Creature creature = null;
                Component component = null;
                if (subject is StellarObject)
                {
                    stellarObject = (StellarObject)subject;
                    if (stellarObject is BuiltObject)
                    {
                        builtObject = (BuiltObject)stellarObject;
                    }
                    else if (stellarObject is Habitat)
                    {
                        habitat = (Habitat)stellarObject;
                    }
                    else if (stellarObject is Creature)
                    {
                        creature = (Creature)stellarObject;
                    }
                }
                else if (subject is BuiltObject)
                {
                    builtObject = (BuiltObject)subject;
                    stellarObject = builtObject;
                }
                else if (subject is Habitat)
                {
                    habitat = (Habitat)subject;
                    stellarObject = habitat;
                }
                else if (subject is Empire)
                {
                    empire = (Empire)subject;
                }
                else if (subject is Creature)
                {
                    creature = (Creature)subject;
                    stellarObject = creature;
                }
                else if (subject is ResearchNode)
                {
                    ResearchNode researchNode = (ResearchNode)subject;
                    if (researchNode.Components != null && researchNode.Components.Count > 0)
                    {
                        component = researchNode.Components[0];
                    }
                    else if (researchNode.ComponentImprovements != null && researchNode.ComponentImprovements.Count > 0)
                    {
                        component = researchNode.ComponentImprovements[0].ImprovedComponent;
                    }
                }
                switch (eventType)
                {
                    case PreWarpProgressEventType.FirstPirateRaid:
                        if (PreWarpProgressEventOccurredExperienceFirstPirateRaid)
                        {
                            break;
                        }
                        if (habitat != null)
                        {
                            string arg = string.Empty;
                            if (empire != null)
                            {
                                arg = empire.Name;
                            }
                            string text16 = TextResolver.GetText("PreWarpProgressEvent Title ExperienceFirstPirateRaid");
                            string message11 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message ExperienceFirstPirateRaid"), habitat.Name, arg);
                            if (hint == "avoid")
                            {
                                message11 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message AvoidFirstPirateRaid"), habitat.Name);
                            }
                            SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text16, message11, subject, subject);
                        }
                        PreWarpProgressEventOccurredExperienceFirstPirateRaid = true;
                        return true;
                    case PreWarpProgressEventType.BuildFirstMiningStation:
                        if (!PreWarpProgressEventOccurredBuildFirstMiningStation)
                        {
                            if (builtObject != null && builtObject.ParentHabitat != null)
                            {
                                _EconomyEfficiency += 0.25;
                                string text15 = TextResolver.GetText("PreWarpProgressEvent Title BuildFirstMiningStation");
                                string message10 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message BuildFirstMiningStation"), builtObject.Name, builtObject.ParentHabitat.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text15, message10, subject, subject);
                            }
                            PreWarpProgressEventOccurredBuildFirstMiningStation = true;
                            return true;
                        }
                        break;
                    case PreWarpProgressEventType.BuildFirstResearchStation:
                        if (PreWarpProgressEventOccurredBuildFirstResearchStation)
                        {
                            break;
                        }
                        if (builtObject != null)
                        {
                            if (Galaxy.Rnd.Next(0, 2) > 0)
                            {
                                Character character = GenerateNewCharacter(CharacterRole.Scientist, builtObject);
                                string text5 = TextResolver.GetText("PreWarpProgressEvent Title BuildFirstResearchStation");
                                string message4 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message BuildFirstResearchStation New Scientist"), character.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text5, message4, character, character);
                            }
                            else
                            {
                                _EconomyEfficiency += 0.15;
                                string text6 = TextResolver.GetText("PreWarpProgressEvent Title BuildFirstResearchStation");
                                string message5 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message BuildFirstResearchStation"), builtObject.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text6, message5, subject, subject);
                            }
                        }
                        PreWarpProgressEventOccurredBuildFirstResearchStation = true;
                        return true;
                    case PreWarpProgressEventType.BuildFirstMilitaryShip:
                        if (PreWarpProgressEventOccurredBuildFirstMilitaryShip)
                        {
                            break;
                        }
                        if (builtObject != null)
                        {
                            string text18 = TextResolver.GetText("PreWarpProgressEvent Title BuildFirstMilitaryShip");
                            string message13 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message BuildFirstMilitaryShip"), builtObject.Name);
                            SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text18, message13, subject, subject);
                            if (_Galaxy.StoryShadowsEnabled)
                            {
                                PirateRelationList relationsByType2 = PirateRelations.GetRelationsByType(PirateRelationType.None);
                                bool flag2 = false;
                                if (Colonies != null && Colonies.Count > 0)
                                {
                                    Habitat habitat7 = Colonies[0];
                                    if (habitat7 != null && !habitat7.HasBeenDestroyed && relationsByType2.Count > 0)
                                    {
                                        for (int k = 0; k < relationsByType2.Count; k++)
                                        {
                                            if (relationsByType2[k] != null && relationsByType2[k].OtherEmpire != null && relationsByType2[k].OtherEmpire != _Galaxy.PlayerEmpire && relationsByType2[k].OtherEmpire.Active)
                                            {
                                                ShipGroup shipGroup = relationsByType2[k].OtherEmpire.IdentifyNearestAvailableFleet(habitat7.Xpos, habitat7.Ypos, mustBeAutomated: true, mustBeWithinFuelRange: true, 0.1);
                                                if (shipGroup != null)
                                                {
                                                    shipGroup.AssignMission(BuiltObjectMissionType.Raid, habitat7, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                                    flag2 = true;
                                                }
                                                if (flag2)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!flag2 && MiningStations != null && MiningStations.Count > 0)
                                {
                                    BuiltObject builtObject2 = MiningStations[0];
                                    if (!builtObject2.HasBeenDestroyed)
                                    {
                                        for (int l = 0; l < relationsByType2.Count; l++)
                                        {
                                            if (relationsByType2[l] == null || relationsByType2[l].OtherEmpire == null || relationsByType2[l].OtherEmpire == _Galaxy.PlayerEmpire || !relationsByType2[l].OtherEmpire.Active)
                                            {
                                                continue;
                                            }
                                            BuiltObject firstAvailableWithinRange = relationsByType2[l].OtherEmpire.BuiltObjects.GetFirstAvailableWithinRange(BuiltObjectRole.Military, builtObject2.Xpos, builtObject2.Ypos, 0.1, includeLowAndNormalPriorityMissions: true);
                                            if (firstAvailableWithinRange != null)
                                            {
                                                firstAvailableWithinRange.ClearPreviousMissionRequirements();
                                                if (firstAvailableWithinRange.AssaultStrength > 0)
                                                {
                                                    firstAvailableWithinRange.AssignMission(BuiltObjectMissionType.Raid, builtObject2, null, BuiltObjectMissionPriority.High);
                                                }
                                                else
                                                {
                                                    firstAvailableWithinRange.AssignMission(BuiltObjectMissionType.Attack, builtObject2, null, BuiltObjectMissionPriority.High);
                                                }
                                                flag2 = true;
                                            }
                                            if (flag2)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        PreWarpProgressEventOccurredBuildFirstMilitaryShip = true;
                        return true;
                    case PreWarpProgressEventType.BuildFirstShip:
                        if (!PreWarpProgressEventOccurredBuildFirstShip)
                        {
                            if (builtObject != null)
                            {
                                string text17 = TextResolver.GetText("PreWarpProgressEvent Title BuildFirstShip");
                                string message12 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message BuildFirstShip"), builtObject.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text17, message12, subject, subject);
                            }
                            PreWarpProgressEventOccurredBuildFirstShip = true;
                            return true;
                        }
                        break;
                    case PreWarpProgressEventType.BuildFirstSpaceport:
                        if (!PreWarpProgressEventOccurredBuildFirstSpaceport)
                        {
                            if (builtObject != null)
                            {
                                _EconomyEfficiency += 0.25;
                                string text12 = TextResolver.GetText("PreWarpProgressEvent Title BuildFirstSpaceport");
                                string text13 = TextResolver.GetText("PreWarpProgressEvent Message BuildFirstSpaceport");
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text12, text13, subject, subject);
                            }
                            PreWarpProgressEventOccurredBuildFirstSpaceport = true;
                            return true;
                        }
                        break;
                    case PreWarpProgressEventType.DiscoverColonizationTech:
                        if (!PreWarpProgressEventOccurredDiscoverColonizationTech)
                        {
                            if (component != null)
                            {
                                _EconomyEfficiency += 0.5;
                                string text4 = TextResolver.GetText("PreWarpProgressEvent Title DiscoverColonizationTech");
                                string message3 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message DiscoverColonizationTech"), component.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text4, message3, component, component);
                            }
                            PreWarpProgressEventOccurredDiscoverColonizationTech = true;
                            return true;
                        }
                        break;
                    case PreWarpProgressEventType.DiscoverHyperspaceTech:
                        if (!PreWarpProgressEventOccurredDiscoverHyperspaceTech)
                        {
                            if (Galaxy.Rnd.Next(0, 3) > 0)
                            {
                                Character character2 = GenerateNewCharacter(CharacterRole.Scientist, Capital);
                                string text9 = TextResolver.GetText("PreWarpProgressEvent Title DiscoverHyperspaceTech");
                                string message8 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message DiscoverHyperspaceTech New Scientist"), character2.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text9, message8, character2, character2);
                            }
                            else
                            {
                                _EconomyEfficiency += 0.15;
                                string text10 = TextResolver.GetText("PreWarpProgressEvent Title DiscoverHyperspaceTech");
                                string text11 = TextResolver.GetText("PreWarpProgressEvent Message DiscoverHyperspaceTech");
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text10, text11, component, component);
                            }
                            PreWarpProgressEventOccurredDiscoverHyperspaceTech = true;
                            return true;
                        }
                        break;
                    case PreWarpProgressEventType.EncounterFirstKaltor:
                        if (PreWarpProgressEventOccurredEncounterFirstKaltor)
                        {
                            break;
                        }
                        if (creature != null)
                        {
                            Habitat habitat6 = _Galaxy.FindNearestHabitat(creature.Xpos, creature.Ypos);
                            if (habitat6 != null)
                            {
                                string text14 = TextResolver.GetText("PreWarpProgressEvent Title EncounterFirstKaltor");
                                string message9 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message EncounterFirstKaltor"), habitat6.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text14, message9, subject, subject);
                            }
                        }
                        PreWarpProgressEventOccurredEncounterFirstKaltor = true;
                        return true;
                    case PreWarpProgressEventType.FirstContactNormalEmpire:
                        if (PreWarpProgressEventOccurredFirstContactNormalEmpire)
                        {
                            break;
                        }
                        if (empire != null)
                        {
                            bool flag = false;
                            if (_Galaxy.StoryShadowsEnabled && empire.PirateEmpireBaseHabitat == null)
                            {
                                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                                if (diplomaticRelation.Type != DiplomaticRelationType.War && empire != _Galaxy.PlayerEmpire && Galaxy.ResolveStandardRaceBias(empire.DominantRace, DominantRace) < 0.0)
                                {
                                    int num4 = empire.BuiltObjects.TotalMobileMilitaryFirepower();
                                    int num5 = BuiltObjects.TotalMobileMilitaryFirepower();
                                    double num6 = (double)num5 / (double)num4;
                                    if (num6 < 2.0 && empire.CheckEmpireHasHyperDriveTech(empire))
                                    {
                                        empire.DeclareWar(this);
                                        flag = true;
                                    }
                                }
                            }
                            if (flag)
                            {
                                string text7 = TextResolver.GetText("PreWarpProgressEvent Title FirstContactNormalEmpire");
                                string message6 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message FirstContactNormalEmpire War"), empire.Name, empire.DominantRace.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text7, message6, subject, subject);
                            }
                            else
                            {
                                string text8 = TextResolver.GetText("PreWarpProgressEvent Title FirstContactNormalEmpire");
                                string message7 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message FirstContactNormalEmpire"), empire.Name, empire.DominantRace.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text8, message7, subject, subject);
                            }
                        }
                        PreWarpProgressEventOccurredFirstContactNormalEmpire = true;
                        return true;
                    case PreWarpProgressEventType.FirstContactPirateOrIndependent:
                        if (!PreWarpProgressEventOccurredFirstContactPirateOrIndependent && empire != null && stellarObject != null && empire == _Galaxy.IndependentEmpire)
                        {
                            string text19 = TextResolver.GetText("PreWarpProgressEvent Title FirstContactIndependent");
                            if (stellarObject.Empire == empire)
                            {
                                string message14 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message FirstContactIndependent"), stellarObject.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text19, message14, stellarObject, stellarObject);
                            }
                            else
                            {
                                string text20 = TextResolver.GetText("PreWarpProgressEvent Message FirstContactIndependent NoShip");
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text19, text20, null, stellarObject);
                            }
                            PreWarpProgressEventOccurredFirstContactPirateOrIndependent = true;
                            return true;
                        }
                        break;
                    case PreWarpProgressEventType.FirstHyperjump:
                        if (PreWarpProgressEventOccurredFirstHyperjump)
                        {
                            break;
                        }
                        if (builtObject != null)
                        {
                            Habitat habitat2 = null;
                            if (_Galaxy.StoryShadowsEnabled)
                            {
                                Habitat habitat3 = _Galaxy.FastFindNearestSystem(builtObject.Xpos, builtObject.Ypos);
                                if (habitat3 != null)
                                {
                                    habitat2 = _Galaxy.FindNearestHabitat(habitat3.Xpos, habitat3.Ypos, HabitatType.FrozenGasGiant);
                                    if (habitat2 == null || habitat2.SystemIndex != habitat3.SystemIndex)
                                    {
                                        double num = (double)Galaxy.MaxSolarSystemSize + Galaxy.Rnd.NextDouble() * (double)Galaxy.MaxSolarSystemSize;
                                        double num2 = (double)Galaxy.MaxSolarSystemSize + Galaxy.Rnd.NextDouble() * (double)Galaxy.MaxSolarSystemSize;
                                        if (Galaxy.Rnd.Next(0, 2) == 1)
                                        {
                                            num *= -1.0;
                                        }
                                        if (Galaxy.Rnd.Next(0, 2) == 1)
                                        {
                                            num2 *= -1.0;
                                        }
                                        habitat2 = _Galaxy.FindNearestHabitat(habitat3.Xpos + num, habitat3.Ypos + num2, HabitatType.BarrenRock);
                                    }
                                }
                                PirateRelationList relationsByType = PirateRelations.GetRelationsByType(PirateRelationType.None);
                                if (Colonies != null && Colonies.Count > 0)
                                {
                                    Habitat habitat4 = Colonies[0];
                                    if (habitat4 != null && !habitat4.HasBeenDestroyed)
                                    {
                                        if (relationsByType.Count > 0)
                                        {
                                            for (int i = 0; i < relationsByType.Count; i++)
                                            {
                                                if (relationsByType[i] != null && relationsByType[i].OtherEmpire != null && relationsByType[i].OtherEmpire != _Galaxy.PlayerEmpire && relationsByType[i].OtherEmpire.Active)
                                                {
                                                    relationsByType[i].OtherEmpire.IdentifyNearestAvailableFleet(habitat4.Xpos, habitat4.Ypos, mustBeAutomated: true, mustBeWithinFuelRange: true, 0.1)?.AssignMission(BuiltObjectMissionType.Raid, habitat4, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                                }
                                            }
                                        }
                                        if (_Galaxy.PlayerEmpire != this && _Galaxy.PlayerEmpire.PirateEmpireBaseHabitat != null)
                                        {
                                            PirateRelation pirateRelation = _Galaxy.PlayerEmpire.ObtainPirateRelation(this);
                                            if (pirateRelation != null && pirateRelation.Type != 0)
                                            {
                                                Habitat habitat5 = Galaxy.DetermineHabitatSystemStar(habitat4);
                                                string text = TextResolver.GetText("Empire achieves Hyperspace Travel");
                                                string description = string.Format(TextResolver.GetText("Empire Achieved Warp Notification"), habitat5.Name, Name);
                                                _Galaxy.PlayerEmpire.SendMessageToEmpireWithTitle(_Galaxy.PlayerEmpire, EmpireMessageType.GeneralNeutralEvent, habitat4, description, text);
                                            }
                                        }
                                    }
                                }
                            }
                            if (habitat2 != null && _Galaxy.CreaturePrevalence > 0.0 && _Galaxy.AllowGiantKaltorGeneration)
                            {
                                int num3 = Galaxy.Rnd.Next(2, 4);
                                for (int j = 0; j < num3; j++)
                                {
                                    _Galaxy.GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat2, lockLocation: false);
                                }
                                string text2 = TextResolver.GetText("PreWarpProgressEvent Title FirstHyperjump");
                                string message = string.Format(TextResolver.GetText("PreWarpProgressEvent Message FirstHyperjump Creature Outbreak"), builtObject.Name, habitat2.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text2, message, subject, habitat2);
                            }
                            else
                            {
                                string text3 = TextResolver.GetText("PreWarpProgressEvent Title FirstHyperjump");
                                string message2 = string.Format(TextResolver.GetText("PreWarpProgressEvent Message FirstHyperjump"), builtObject.Name);
                                SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, text3, message2, subject, subject);
                            }
                        }
                        PreWarpProgressEventOccurredFirstHyperjump = true;
                        return true;
                }
            }
            return false;
        }

        private void PromptPlayerForAuthorization(string message, object target, EmpireMessage empireMessage)
        {
            if (_AutomationAuthorizer != null)
            {
                _AutomationAuthorizer.PromptForAuthorization(message, target, empireMessage);
            }
        }

        public string GenerateMessageDescriptionEndWarRequest()
        {
            return TextResolver.GetText("We urge you to consider our proposal for an end to this pointless war");
        }

        public string GenerateMessageDescriptionEndSubjugation()
        {
            return TextResolver.GetText("We are releasing you from subjugation to us. We no longer consider you to be our conquered dominion.");
        }

        public string GenerateMessageDescriptionLiftTradeSanctions()
        {
            return TextResolver.GetText("Our trade sanctions against you have been lifted - we will now resume trade.");
        }

        public string GenerateMessageDescription(DiplomaticRelation currentRelation, DiplomaticRelationType diplomaticRelationType, int ourPotencyVersusThem)
        {
            string result = string.Empty;
            if (currentRelation != null)
            {
                if (ourPotencyVersusThem < 0)
                {
                    switch (diplomaticRelationType)
                    {
                        case DiplomaticRelationType.FreeTradeAgreement:
                            result = TextResolver.GetText("May you look kindly on our proposal of free trade with your wealthy empire");
                            break;
                        case DiplomaticRelationType.MutualDefensePact:
                            result = TextResolver.GetText("We would prove a most loyal ally to your mighty empire in a mutual defense pact");
                            break;
                        case DiplomaticRelationType.None:
                            switch (currentRelation.Type)
                            {
                                case DiplomaticRelationType.FreeTradeAgreement:
                                case DiplomaticRelationType.MutualDefensePact:
                                case DiplomaticRelationType.Protectorate:
                                    result = TextResolver.GetText("We are cancelling our treaty with you forthwith");
                                    break;
                                case DiplomaticRelationType.War:
                                    result = TextResolver.GetText("We urge you to consider our proposal for an end to this pointless war");
                                    break;
                                case DiplomaticRelationType.TradeSanctions:
                                    result = TextResolver.GetText("We ask you to end your trade sanctions against us");
                                    break;
                                case DiplomaticRelationType.SubjugatedDominion:
                                    result = TextResolver.GetText("We beg for release from Subjugation");
                                    break;
                                default:
                                    result = TextResolver.GetText("We urge you to consider our proposal for an end to this pointless war");
                                    break;
                            }
                            break;
                        case DiplomaticRelationType.Protectorate:
                            result = TextResolver.GetText("We offer you refuge in a Protectorate treaty with our strong empire");
                            break;
                        case DiplomaticRelationType.SubjugatedDominion:
                            result = TextResolver.GetText("We propose an end to this war, but you must become our subjugated dominion");
                            break;
                        case DiplomaticRelationType.TradeSanctions:
                            result = TextResolver.GetText("We regret to inform you that all trade between our two empires has been suspended");
                            break;
                        case DiplomaticRelationType.Truce:
                            result = TextResolver.GetText("We beg you to consider a truce");
                            break;
                        case DiplomaticRelationType.War:
                            result = TextResolver.GetText("We are afraid that we have no choice but to declare war on you");
                            break;
                    }
                }
                else if (ourPotencyVersusThem == 0)
                {
                    switch (diplomaticRelationType)
                    {
                        case DiplomaticRelationType.FreeTradeAgreement:
                            result = TextResolver.GetText("We propose a free trade agreement between our two dynamic societies");
                            break;
                        case DiplomaticRelationType.MutualDefensePact:
                            result = TextResolver.GetText("It would be in both our best interests to form a mutual defense pact");
                            break;
                        case DiplomaticRelationType.None:
                            switch (currentRelation.Type)
                            {
                                case DiplomaticRelationType.FreeTradeAgreement:
                                case DiplomaticRelationType.MutualDefensePact:
                                case DiplomaticRelationType.Protectorate:
                                    result = TextResolver.GetText("We are cancelling our treaty with you forthwith");
                                    break;
                                case DiplomaticRelationType.War:
                                    result = TextResolver.GetText("We urge you to consider our proposal for an end to this pointless war");
                                    break;
                                case DiplomaticRelationType.TradeSanctions:
                                    result = TextResolver.GetText("We ask you to end your trade sanctions against us");
                                    break;
                                case DiplomaticRelationType.SubjugatedDominion:
                                    result = TextResolver.GetText("We beg for release from Subjugation");
                                    break;
                                default:
                                    result = TextResolver.GetText("We urge you to consider our proposal for an end to this pointless war");
                                    break;
                            }
                            break;
                        case DiplomaticRelationType.Protectorate:
                            result = TextResolver.GetText("We offer you refuge in a Protectorate treaty with our strong empire");
                            break;
                        case DiplomaticRelationType.SubjugatedDominion:
                            result = TextResolver.GetText("We propose an end to this war, but you must become our subjugated dominion");
                            break;
                        case DiplomaticRelationType.TradeSanctions:
                            result = TextResolver.GetText("All trade between us has been terminated until further notice");
                            break;
                        case DiplomaticRelationType.Truce:
                            result = TextResolver.GetText("We feel a truce is in order at this point");
                            break;
                        case DiplomaticRelationType.War:
                            result = TextResolver.GetText("We inform you that a state of war now exists between us");
                            break;
                    }
                }
                else
                {
                    switch (diplomaticRelationType)
                    {
                        case DiplomaticRelationType.FreeTradeAgreement:
                            result = TextResolver.GetText("Accept our free trade agreement proposal and prosper with us");
                            break;
                        case DiplomaticRelationType.MutualDefensePact:
                            result = TextResolver.GetText("You would be wise to ally yourselves with our strong empire in a mutual defense pact");
                            break;
                        case DiplomaticRelationType.None:
                            switch (currentRelation.Type)
                            {
                                case DiplomaticRelationType.FreeTradeAgreement:
                                case DiplomaticRelationType.MutualDefensePact:
                                case DiplomaticRelationType.Protectorate:
                                    result = TextResolver.GetText("We are pleased to rid ourselves of this troublesome treaty with you!");
                                    break;
                                case DiplomaticRelationType.War:
                                    result = TextResolver.GetText("We urge you to consider our proposal for an end to this pointless war");
                                    break;
                                case DiplomaticRelationType.TradeSanctions:
                                    result = TextResolver.GetText("We ask you to end your trade sanctions against us");
                                    break;
                                case DiplomaticRelationType.SubjugatedDominion:
                                    result = TextResolver.GetText("We beg for release from Subjugation");
                                    break;
                                default:
                                    result = TextResolver.GetText("We urge you to consider our proposal for an end to this pointless war");
                                    break;
                            }
                            break;
                        case DiplomaticRelationType.Protectorate:
                            result = TextResolver.GetText("We offer you refuge in a Protectorate treaty with our strong empire");
                            break;
                        case DiplomaticRelationType.SubjugatedDominion:
                            result = TextResolver.GetText("We propose an end to this war, but you must become our subjugated dominion");
                            break;
                        case DiplomaticRelationType.TradeSanctions:
                            result = TextResolver.GetText("Effective immediately, all our trade with your tyrannical empire is terminated");
                            break;
                        case DiplomaticRelationType.Truce:
                            result = TextResolver.GetText("We offer your pathetic empire a respite from your miserable defeats in a truce");
                            break;
                        case DiplomaticRelationType.War:
                            result = TextResolver.GetText("We declare war on your worthless empire. Your colonies await liberation from your tyranny");
                            break;
                    }
                }
            }
            return result;
        }

        public string GenerateMessageDescription(EmpireMessageType messageType, int ourPotencyVersusThem, Empire targetEmpire)
        {
            string result = string.Empty;
            if (ourPotencyVersusThem < 0)
            {
                switch (messageType)
                {
                    case EmpireMessageType.GiveGift:
                        result = TextResolver.GetText("We are greatly honored to present this humble gift to your noble empire");
                        break;
                    case EmpireMessageType.LeaveSystem:
                        result = TextResolver.GetText("We respectfully request that you leave the X system at your earliest convenience");
                        break;
                    case EmpireMessageType.RemoveColoniesFromSystem:
                        result = TextResolver.GetText("We would be most appreciative if you were able to decolonize the X system");
                        break;
                    case EmpireMessageType.RequestJointWar:
                        result = string.Format(TextResolver.GetText("We beg you to consider our request to declare war on the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestLiftTradeSanctions:
                        result = string.Format(TextResolver.GetText("We would be most gratified if you were able to resume trade with the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestJointTradeSanctions:
                        result = string.Format(TextResolver.GetText("We respectfully appeal to your illustrious empire to cease trade with the {0}"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestStopWar:
                        result = string.Format(TextResolver.GetText("Please hear our respectful plea to stop your war with the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.StopAttacks:
                        result = TextResolver.GetText("We are greatly troubled by your unfriendly attacks. Please try to avoid these unfortunate incidents");
                        break;
                    case EmpireMessageType.StopMissionsAgainstUs:
                        result = TextResolver.GetText("We have heard baseless rumours that your virtuous empire has been involved in covert actions against us");
                        break;
                }
            }
            else if (ourPotencyVersusThem == 0)
            {
                switch (messageType)
                {
                    case EmpireMessageType.GiveGift:
                        result = TextResolver.GetText("Please accept this gift as a token of our goodwill");
                        break;
                    case EmpireMessageType.LeaveSystem:
                        result = TextResolver.GetText("Please leave the X system");
                        break;
                    case EmpireMessageType.RemoveColoniesFromSystem:
                        result = TextResolver.GetText("Please remove your colonies from the X system");
                        break;
                    case EmpireMessageType.RequestJointWar:
                        result = string.Format(TextResolver.GetText("We formally request that you declare war on the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestLiftTradeSanctions:
                        result = string.Format(TextResolver.GetText("Please resume trade with the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestJointTradeSanctions:
                        result = string.Format(TextResolver.GetText("We request that you terminate trade with the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestStopWar:
                        result = string.Format(TextResolver.GetText("Please end your war with the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.StopAttacks:
                        result = TextResolver.GetText("We serve official warning on you to cease all attacks against us");
                        break;
                    case EmpireMessageType.StopMissionsAgainstUs:
                        result = TextResolver.GetText("Your covert actions against us have been detected. We warn you to stop these activities");
                        break;
                }
            }
            else
            {
                switch (messageType)
                {
                    case EmpireMessageType.GiveGift:
                        result = TextResolver.GetText("We are pleased to present this gift to you");
                        break;
                    case EmpireMessageType.LeaveSystem:
                        result = TextResolver.GetText("We demand that you immediately leave the X system");
                        break;
                    case EmpireMessageType.RemoveColoniesFromSystem:
                        result = TextResolver.GetText("We insist that you remove all colonies from the X system at once");
                        break;
                    case EmpireMessageType.RequestJointWar:
                        result = string.Format(TextResolver.GetText("Without delay, we require that you declare war on the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestLiftTradeSanctions:
                        result = string.Format(TextResolver.GetText("We demand that you restore trade with the EMPIRE at once!"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestJointTradeSanctions:
                        result = string.Format(TextResolver.GetText("We order you to instantly cease all trade with the EMPIRE"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.RequestStopWar:
                        result = string.Format(TextResolver.GetText("We command you to stop your war with the EMPIRE straight away!"), targetEmpire.Name);
                        break;
                    case EmpireMessageType.StopAttacks:
                        result = TextResolver.GetText("You are ordered to immediately cease all attacks against us!");
                        break;
                    case EmpireMessageType.StopMissionsAgainstUs:
                        result = TextResolver.GetText("We warn you to end your treacherous covert actvities against us immediately!");
                        break;
                }
            }
            return result;
        }

        public double CalculateRelativeEmpireMilitaryStrength()
        {
            double num = 0.0;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != this)
                {
                    num += (double)Math.Max(1, empire.MilitaryPotency);
                }
            }
            double num2 = num / (double)(_Galaxy.Empires.Count - 1);
            return (double)Math.Max(1, MilitaryPotency) / num2;
        }

        public double CalculateRelativeEmpireSize()
        {
            if (PirateEmpireBaseHabitat == null)
            {
                double num = 0.0;
                for (int i = 0; i < _Galaxy.Empires.Count; i++)
                {
                    Empire empire = _Galaxy.Empires[i];
                    if (empire != null && empire.Active && empire != this)
                    {
                        num += (double)empire.TotalColonyStrategicValue;
                    }
                }
                double num2 = num / (double)(_Galaxy.Empires.Count - 1);
                return (double)TotalColonyStrategicValue / num2;
            }
            double num3 = 0.0;
            for (int j = 0; j < _Galaxy.PirateEmpires.Count; j++)
            {
                Empire empire2 = _Galaxy.PirateEmpires[j];
                if (empire2 != null && empire2.Active && empire2 != this && empire2.BuiltObjects != null)
                {
                    num3 += (double)empire2.BuiltObjects.TotalMobileMilitaryFirepower();
                }
            }
            double num4 = num3 / (double)(_Galaxy.PirateEmpires.Count - 1);
            return (double)BuiltObjects.TotalMobileMilitaryFirepower() / num4;
        }

        public EmpireRelationshipFactorList DetermineEmpireRelationshipFactors(Empire otherEmpire)
        {
            EmpireRelationshipFactorList empireRelationshipFactorList = new EmpireRelationshipFactorList();
            if (otherEmpire.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
            {
                EmpireEvaluation empireEvaluation = otherEmpire.EmpireEvaluations[this];
                if (empireEvaluation != null)
                {
                    if (empireEvaluation.FirstContactPenalty < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.FirstContactPenalty, TextResolver.GetText("First Contact Penalty Description")));
                    }
                    if (empireEvaluation.MilitaryForcesInSystems < 0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.MilitaryForcesInSystems, TextResolver.GetText("Your military forces in our systems violate our territory")));
                    }
                    if (empireEvaluation.RelationshipWithFriendsPositiveCumulative > 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.RelationshipWithFriendsPositiveCumulative, TextResolver.GetText("You have formed beneficial treaties with our friends")));
                    }
                    if (empireEvaluation.RelationshipWithFriendsNegativeCumulative < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.RelationshipWithFriendsNegativeCumulative, TextResolver.GetText("You have trade sanctions or are at war with our friends")));
                    }
                    if (empireEvaluation.SystemCompetitionCumulative < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.SystemCompetitionCumulative, TextResolver.GetText("Your colonies and bases trespass in our systems!")));
                    }
                    if (empireEvaluation.ReputationWeighted > 0.0)
                    {
                        _ = string.Empty;
                        string arg = empireEvaluation.Empire.CivilityDescription();
                        arg = string.Format(TextResolver.GetText("We respect your good reputation"), arg);
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.ReputationWeighted, arg));
                    }
                    else if (empireEvaluation.ReputationWeighted < 0.0)
                    {
                        _ = string.Empty;
                        string arg2 = empireEvaluation.Empire.CivilityDescription();
                        arg2 = string.Format(TextResolver.GetText("We are troubled by your poor reputation"), arg2);
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.ReputationWeighted, arg2));
                    }
                    if (empireEvaluation.TradeVolume > 0)
                    {
                        string empty = string.Empty;
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(description: (empireEvaluation.TradeVolume > 20) ? TextResolver.GetText("Our empires generate a colossal amount of trade") : ((empireEvaluation.TradeVolume > 13) ? TextResolver.GetText("Our empires produce a large amount of trade") : ((empireEvaluation.TradeVolume <= 6) ? TextResolver.GetText("Our empires share a small volume of trade") : TextResolver.GetText("Our empires share a fair amount of trade"))), value: empireEvaluation.TradeVolume));
                    }
                    if (empireEvaluation.GovernmentStyleAffinityCumulative < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.GovernmentStyleAffinityCumulative, string.Format(TextResolver.GetText("We are unhappy with your style of government"), GovernmentAttributes.Name)));
                    }
                    if (empireEvaluation.GovernmentStyleAffinityCumulative > 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.GovernmentStyleAffinityCumulative, string.Format(TextResolver.GetText("We like your style of government"), GovernmentAttributes.Name)));
                    }
                    if (empireEvaluation.CovetousnessCumulative < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.CovetousnessCumulative, TextResolver.GetText("We covet your colonies and resources...")));
                    }
                    if (empireEvaluation.Blockades < 0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.Blockades, TextResolver.GetText("You have blockaded our colonies and space ports!")));
                    }
                    if (empireEvaluation.BiasRaw > 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.BiasRaw, TextResolver.GetText("We naturally like you")));
                    }
                    else if (empireEvaluation.BiasRaw < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.BiasRaw, TextResolver.GetText("We instinctively dislike you")));
                    }
                    if (empireEvaluation.Envy < 0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.Envy, TextResolver.GetText("We are envious of your huge strength and power")));
                    }
                    if (empireEvaluation.RestrictedResourceTrading < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.RestrictedResourceTrading, TextResolver.GetText("We are upset that you refuse to trade valuable resources with us")));
                    }
                    if (empireEvaluation.RestrictedResourceTrading > 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.RestrictedResourceTrading, TextResolver.GetText("We are happy that you trade valuable resources with us")));
                    }
                    if (empireEvaluation.MilitaryRefueling > 0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.MilitaryRefueling, TextResolver.GetText("We appreciate military refueling")));
                    }
                    if (empireEvaluation.MiningRights > 0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.MiningRights, TextResolver.GetText("We appreciate mining rights")));
                    }
                    if (empireEvaluation.IncidentEvaluationRaw < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.IncidentEvaluationRaw, TextResolver.GetText("Our past dealings with you have been terrible")));
                    }
                    if (empireEvaluation.IncidentEvaluationRaw > 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.IncidentEvaluationRaw, TextResolver.GetText("Our past dealings with you have been good")));
                    }
                    if (empireEvaluation.SlaveryOffense < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.SlaveryOffense, TextResolver.GetText("We are angry at your enslavement of our race at your colonies")));
                    }
                    if (empireEvaluation.RacialOffense < 0.0)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(empireEvaluation.RacialOffense, TextResolver.GetText("We are outraged at your extermination of our race at your colonies")));
                    }
                }
                for (int i = 0; i < empireRelationshipFactorList.Count; i++)
                {
                    if (empireRelationshipFactorList[i].Value > 0.0)
                    {
                        empireRelationshipFactorList[i].Value /= _Galaxy.AggressionLevel;
                        empireRelationshipFactorList[i].Value *= empireEvaluation.DiplomacyFactor;
                    }
                    else
                    {
                        empireRelationshipFactorList[i].Value *= _Galaxy.AggressionLevel;
                        empireRelationshipFactorList[i].Value /= empireEvaluation.DiplomacyFactor;
                    }
                }
                empireRelationshipFactorList.Sort();
                empireRelationshipFactorList.Reverse();
            }
            else
            {
                PirateRelation relationByOtherEmpire = otherEmpire.PirateRelations.GetRelationByOtherEmpire(this);
                if (relationByOtherEmpire != null)
                {
                    if (relationByOtherEmpire.EvaluationGiftsFactored > 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationGiftsFactored, TextResolver.GetText("Pirate Evaluation Gift Description")));
                    }
                    if (relationByOtherEmpire.EvaluationOffenseOverRequestsFactored < 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationOffenseOverRequestsFactored, TextResolver.GetText("Pirate Evaluation Offense Over Requests Description")));
                    }
                    else if (relationByOtherEmpire.EvaluationOffenseOverRequests > 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationOffenseOverRequestsFactored, TextResolver.GetText("Pirate Evaluation Happy Over Requests Description")));
                    }
                    if (relationByOtherEmpire.EvaluationDetectedIntelligenceMissionsFactored < 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationDetectedIntelligenceMissionsFactored, TextResolver.GetText("Pirate Evaluation Detected Intelligence Missions Description")));
                    }
                    if (relationByOtherEmpire.EvaluationPirateMissionsSucceedFactored > 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationPirateMissionsSucceedFactored, TextResolver.GetText("Pirate Evaluation Pirate Missions Succeed Description")));
                    }
                    if (relationByOtherEmpire.EvaluationPirateMissionsFailFactored < 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationPirateMissionsFailFactored, TextResolver.GetText("Pirate Evaluation Pirate Missions Fail Description")));
                    }
                    if (relationByOtherEmpire.EvaluationShipAttacksFactored < 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationShipAttacksFactored, TextResolver.GetText("Pirate Evaluation Ship Attacks Description")));
                    }
                    if (relationByOtherEmpire.EvaluationProtectionCancelledFactored < 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationProtectionCancelledFactored, TextResolver.GetText("Pirate Evaluation Protection Cancelled Description")));
                    }
                    if (relationByOtherEmpire.EvaluationCovetedColoniesFactored < 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationCovetedColoniesFactored, TextResolver.GetText("Pirate Evaluation Coveted Colonies Description")));
                    }
                    if (relationByOtherEmpire.EvaluationLongRelationshipFactored > 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationLongRelationshipFactored, TextResolver.GetText("Pirate Evaluation Long Relationship Description")));
                    }
                    if (relationByOtherEmpire.EvaluationRaidsAgainstOurColoniesFactored < 0f)
                    {
                        empireRelationshipFactorList.Add(new EmpireRelationshipFactor(relationByOtherEmpire.EvaluationRaidsAgainstOurColoniesFactored, TextResolver.GetText("Pirate Evaluation Raids Against Our Colonies Description")));
                    }
                }
            }
            return empireRelationshipFactorList;
        }

        public EmpireList DetermineEmpiresNotAtWarWithNoAmbassador()
        {
            EmpireList empireList = new EmpireList();
            EmpireList empireList2 = DetermineEmpiresKnownNotAtWarWith();
            for (int i = 0; i < empireList2.Count; i++)
            {
                Empire empire = empireList2[i];
                CharacterList characterList = Characters.FindCharactersAtLocationNotTransferring(empire.Capital);
                if (characterList.Count == 0)
                {
                    empireList.Add(empire);
                }
            }
            return empireList;
        }

        public EmpireList DetermineEmpiresKnownNotAtWarWith()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.OtherEmpire != this && diplomaticRelation.OtherEmpire.PirateEmpireBaseHabitat == null && diplomaticRelation.Type != 0 && diplomaticRelation.Type != DiplomaticRelationType.War && !empireList.Contains(diplomaticRelation.OtherEmpire))
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            return empireList;
        }

        public EmpireList DetermineEmpiresNotKnown()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.OtherEmpire != this && diplomaticRelation.Type == DiplomaticRelationType.NotMet && diplomaticRelation.OtherEmpire.PirateEmpireBaseHabitat == null && !empireList.Contains(diplomaticRelation.OtherEmpire))
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            return empireList;
        }

        public EmpireList DetermineEmpiresKnown()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.OtherEmpire != this && diplomaticRelation.Type != 0 && diplomaticRelation.OtherEmpire.PirateEmpireBaseHabitat == null && !empireList.Contains(diplomaticRelation.OtherEmpire))
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            return empireList;
        }

        public EmpireList DetermineEmpiresWarOrConquer()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if ((diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.Strategy == DiplomaticStrategy.Conquer) && !empireList.Contains(diplomaticRelation.OtherEmpire))
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            return empireList;
        }

        public EmpireList DetermineEmpiresWithConquerStrategy()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Strategy == DiplomaticStrategy.Conquer && !empireList.Contains(diplomaticRelation.OtherEmpire))
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            return empireList;
        }

        public EmpireList DetermineEmpiresAtWarWith()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.War && !empireList.Contains(diplomaticRelation.OtherEmpire))
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            return empireList;
        }

        public EmpireList DetermineEmpiresAtWarWith(out int militaryStrength)
        {
            EmpireList empireList = new EmpireList();
            militaryStrength = 0;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type == DiplomaticRelationType.War && !empireList.Contains(diplomaticRelation.OtherEmpire))
                    {
                        empireList.Add(diplomaticRelation.OtherEmpire);
                        militaryStrength += diplomaticRelation.OtherEmpire.MilitaryPotency;
                    }
                }
            }
            return empireList;
        }

        public int CountEmpiresWeHaveMet()
        {
            int num = 0;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type != 0 && diplomaticRelation.OtherEmpire != null && diplomaticRelation.OtherEmpire.Active)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        public EmpireList GetEmpiresWeHaveMetOfMatchingType()
        {
            EmpireList empireList = new EmpireList();
            empireList.Add(this);
            if (PirateEmpireBaseHabitat != null)
            {
                if (PirateRelations != null)
                {
                    for (int i = 0; i < PirateRelations.Count; i++)
                    {
                        PirateRelation pirateRelation = PirateRelations[i];
                        if (pirateRelation.Type != 0 && pirateRelation.OtherEmpire != null && pirateRelation.OtherEmpire.Active && !empireList.Contains(pirateRelation.OtherEmpire))
                        {
                            empireList.Add(pirateRelation.OtherEmpire);
                        }
                    }
                }
            }
            else if (DiplomaticRelations != null)
            {
                for (int j = 0; j < DiplomaticRelations.Count; j++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[j];
                    if (diplomaticRelation.Type != 0 && diplomaticRelation.OtherEmpire != null && diplomaticRelation.OtherEmpire.Active && !empireList.Contains(diplomaticRelation.OtherEmpire))
                    {
                        empireList.Add(diplomaticRelation.OtherEmpire);
                    }
                }
            }
            return empireList;
        }

        public int CountEmpiresWeDeclaredWarOnNonLocked()
        {
            int num = 0;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type == DiplomaticRelationType.War && !diplomaticRelation.Locked && diplomaticRelation.Initiator == this)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        public int CountEmpiresWhoDeclaredWarOnUsNonLocked()
        {
            int num = 0;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type == DiplomaticRelationType.War && !diplomaticRelation.Locked && diplomaticRelation.Initiator != this)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        public int CountEmpiresWeDeclaredWarOn()
        {
            int num = 0;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type == DiplomaticRelationType.War && diplomaticRelation.Initiator == this)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        public int CountEmpiresWhoDeclaredWarOnUs()
        {
            int num = 0;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation.Type == DiplomaticRelationType.War && diplomaticRelation.Initiator != this)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        private Empire IdentifyTopCompetitor()
        {
            Empire result = null;
            double num = 0.0;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == null || !empire.Active || empire == this)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                if (diplomaticRelation == null || diplomaticRelation.Type == DiplomaticRelationType.NotMet || empire.Capital == null)
                {
                    continue;
                }
                int totalColonyStrategicValue = empire.TotalColonyStrategicValue;
                Habitat habitat = _Galaxy.FastFindNearestColony((int)empire.Capital.Xpos, (int)empire.Capital.Ypos, this, Galaxy.MajorColonyStrategicThreshhold);
                if (habitat == null)
                {
                    continue;
                }
                Habitat habitat2 = _Galaxy.FastFindNearestColony((int)habitat.Xpos, (int)habitat.Ypos, empire, Galaxy.MajorColonyStrategicThreshhold);
                if (habitat2 != null)
                {
                    double d = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                    double num2 = Math.Sqrt(d);
                    double num3 = (double)totalColonyStrategicValue / num2;
                    if (num3 > num)
                    {
                        result = empire;
                        num = num3;
                    }
                }
            }
            return result;
        }

        private bool WarInevitability(EmpireEvaluation evaluation, int ourPotencyVersusThem, double aggressionFactor, int empiresWeDeclaredWarOn, int empiresWhoDeclaredWarOnUs)
        {
            bool flag = false;
            double num = (double)DominantRace.CautionLevel / 100.0;
            if (evaluation.IncidentEvaluation < -150.0)
            {
                return true;
            }
            int num2 = Math.Max(1, (int)(aggressionFactor * 0.65 * (_Galaxy.AggressionLevel * _Galaxy.AggressionLevel)));
            _ = _Galaxy.PlayerEmpire;
            int num3 = empiresWeDeclaredWarOn + empiresWhoDeclaredWarOnUs;
            if (num3 < num2)
            {
                flag = true;
            }
            if (flag)
            {
                double num4 = (double)Galaxy.WarIncidentLevel * num;
                if (evaluation.IncidentEvaluation < num4)
                {
                    return true;
                }
                switch (ourPotencyVersusThem)
                {
                    case 1:
                        return true;
                    case 0:
                        {
                            int num6 = (int)((double)Galaxy.WarWhenEvenAngerLevel * num);
                            if (evaluation.OverallAttitude < num6)
                            {
                                return true;
                            }
                            break;
                        }
                    case -1:
                        {
                            int num5 = (int)((double)Galaxy.WarWhenStrongerAngerLevel * num);
                            if (evaluation.OverallAttitude < num5)
                            {
                                return true;
                            }
                            break;
                        }
                }
            }
            return false;
        }

        public string GenerateEmpireRestrictedResourcesDescription(out bool plural)
        {
            string text = string.Empty;
            int num = 0;
            plural = false;
            ResourceList resourceList = DetermineResourcesEmpireSupplies();
            for (int i = 0; i < resourceList.Count; i++)
            {
                Resource resource = resourceList[i];
                if (resource != null && resource.IsRestrictedResource)
                {
                    text = text + resource.Name + ", ";
                    num++;
                }
            }
            if (text.Length > 0)
            {
                text = text.Substring(0, text.Length - 2);
            }
            if (num > 1)
            {
                plural = true;
            }
            return text;
        }

        public bool CheckEmpireSuppliesRestrictedResources()
        {
            byte resource = byte.MaxValue;
            return CheckEmpireSuppliesRestrictedResources(out resource);
        }

        public bool CheckEmpireSuppliesRestrictedResources(out byte resource)
        {
            resource = byte.MaxValue;
            ResourceList resourceList = DetermineResourcesEmpireSupplies();
            for (int i = 0; i < _Galaxy.ResourceSystem.SuperLuxuryResources.Count; i++)
            {
                ResourceDefinition resourceDefinition = _Galaxy.ResourceSystem.SuperLuxuryResources[i];
                if (resourceDefinition != null && resourceList.Contains(new Resource(resourceDefinition.ResourceID)))
                {
                    resource = resourceDefinition.ResourceID;
                    return true;
                }
            }
            return false;
        }

        public double CalculateVictoryBonusFromStandingWonders(long starDate)
        {
            double num = 0.0;
            List<int> list = new List<int>();
            list.Add(1);
            List<int> list2 = list;
            if (Colonies != null && TrackedWonders != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    if (habitat == null || habitat.Facilities == null)
                    {
                        continue;
                    }
                    for (int j = 0; j < habitat.Facilities.Count; j++)
                    {
                        PlanetaryFacility planetaryFacility = habitat.Facilities[j];
                        if (planetaryFacility == null || planetaryFacility.Type != PlanetaryFacilityType.Wonder || planetaryFacility.WonderType != WonderType.RaceAchievement || !list2.Contains(planetaryFacility.Value2))
                        {
                            continue;
                        }
                        long buildDate = 0L;
                        if (TrackedWonders.CheckBuildDate(habitat, planetaryFacility.PlanetaryFacilityDefinitionId, out buildDate))
                        {
                            long num2 = starDate - buildDate;
                            if (num2 > 0)
                            {
                                long num3 = (long)Galaxy.RealSecondsInGalacticYear * 1000L;
                                double num4 = (double)num2 / (double)num3;
                                double num5 = num4 * 0.05;
                                num += num5;
                            }
                        }
                    }
                }
            }
            return num;
        }

        private int CalculateEnvy(Empire empire)
        {
            double relativeEmpireSize = empire.RelativeEmpireSize;
            relativeEmpireSize -= 2.0;
            relativeEmpireSize = Math.Max(0.0, relativeEmpireSize);
            double num = (double)Math.Max(1, empire.TotalColonyStrategicValue) / (double)Math.Max(1, TotalColonyStrategicValue);
            if (relativeEmpireSize > 0.0 && num > 1.0)
            {
                double num2 = 1.0;
                num2 = 1.0 + (empire.CivilityRating + 5.0) / -10.0;
                num2 = Math.Max(0.1, num2);
                num -= 1.0;
                if (num > 1.0)
                {
                    num = Math.Sqrt(Math.Min(4.0, num));
                }
                if (relativeEmpireSize > 1.0)
                {
                    relativeEmpireSize = Math.Sqrt(Math.Max(1.0, relativeEmpireSize));
                }
                int val = (int)(-12.0 * relativeEmpireSize * num2 * num);
                val = Math.Max(val, -25);
                if (empire.PlanetDestroyers != null && empire.PlanetDestroyers.Count > 0)
                {
                    val -= Math.Min(20, empire.PlanetDestroyers.Count * 8);
                }
                return BaconEmpire.CalculateEnvy(this, empire, val);
            }
            return 0;
        }

        public void SetWarObjectives(Empire otherEmpire)
        {
            DiplomaticRelation warObjectives = ObtainDiplomaticRelation(otherEmpire);
            SetWarObjectives(warObjectives);
        }

        public void SetWarObjectives(DiplomaticRelation relation)
        {
            if (relation != null)
            {
                WarObjective warObjective = WarObjective.Undefined;
                switch (relation.Strategy)
                {
                    case DiplomaticStrategy.Befriend:
                    case DiplomaticStrategy.Placate:
                    case DiplomaticStrategy.Defend:
                    case DiplomaticStrategy.Ally:
                    case DiplomaticStrategy.Undermine:
                    case DiplomaticStrategy.DefendPlacate:
                    case DiplomaticStrategy.DefendUndermine:
                    case DiplomaticStrategy.Punish:
                        warObjective = WarObjective.EndWar;
                        break;
                    case DiplomaticStrategy.Conquer:
                        warObjective = WarObjective.CaptureObjectives;
                        break;
                }
                relation.WarObjective = warObjective;
                IdentifyEmpireWarObjectives(relation.OtherEmpire, out var targetedColonies, out var targetedBases);
                if (targetedColonies.Count > 0 || targetedBases.Count > 0)
                {
                    relation.WarObjective = WarObjective.CaptureObjectives;
                    relation.WarObjectiveColonies = targetedColonies;
                    relation.WarObjectiveBases = targetedBases;
                }
                else
                {
                    relation.WarObjective = WarObjective.EndWar;
                    relation.WarObjectiveColonies = new HabitatList();
                    relation.WarObjectiveBases = new BuiltObjectList();
                }
            }
        }

        private void SendAttackFleets(Empire targetEmpire)
        {
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup.LeadShip == null || !shipGroup.LeadShip.IsAutoControlled || shipGroup.AttackPoint == null || shipGroup.Posture != 0 || shipGroup.AttackPoint.Empire != targetEmpire || (shipGroup.Mission != null && shipGroup.Mission.Type != 0 && shipGroup.Mission.Priority != BuiltObjectMissionPriority.Low))
                {
                    continue;
                }
                if (shipGroup.AttackPoint is Habitat)
                {
                    Habitat habitat = (Habitat)shipGroup.AttackPoint;
                    if (!shipGroup.CheckFleetTargetWithinFuelRangeAndRefuel(habitat.Xpos, habitat.Ypos, 0.0))
                    {
                        ResourceList requiredFuel = new ResourceList();
                        shipGroup.CheckShipsRequiringRefuelling(0.6, out requiredFuel, includeShipsAlreadyRefuelling: true);
                        AssignFleetRefuelling(shipGroup, requiredFuel);
                    }
                    else if (CheckBombardEnemyColony(habitat, shipGroup))
                    {
                        shipGroup.AssignMission(BuiltObjectMissionType.Bombard, habitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                    }
                    else
                    {
                        shipGroup.AssignMission(BuiltObjectMissionType.Attack, habitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                    }
                }
                else if (!shipGroup.CheckFleetTargetWithinFuelRangeAndRefuel(shipGroup.AttackPoint.Xpos, shipGroup.AttackPoint.Ypos, 0.0))
                {
                    ResourceList requiredFuel2 = new ResourceList();
                    shipGroup.CheckShipsRequiringRefuelling(0.6, out requiredFuel2, includeShipsAlreadyRefuelling: true);
                    AssignFleetRefuelling(shipGroup, requiredFuel2);
                }
                else
                {
                    shipGroup.AssignMission(BuiltObjectMissionType.Attack, shipGroup.AttackPoint, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                }
            }
        }

        public void DeclareWar(Empire target)
        {
            DeclareWar(target, null);
        }

        public void DeclareWar(Empire target, Empire persuader)
        {
            DeclareWar(target, persuader, lockedWar: false, blockFlowonEffects: false);
        }

        public void DeclareWar(Empire target, Empire persuader, bool lockedWar)
        {
            DeclareWar(target, persuader, lockedWar, blockFlowonEffects: false);
        }

        public void DeclareWar(Empire target, Empire persuader, bool lockedWar, bool blockFlowonEffects)
        {
            if (target == null)
            {
                return;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(target);
            if (diplomaticRelation.Type != DiplomaticRelationType.War)
            {
                bool flag = target.CheckAtWar();
                ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.War, blockFlowonEffects, lockedWar);
                CancelBlockades(target);
                target.CancelBlockades(this);
                EmpireEvaluation empireEvaluation = target.ObtainEmpireEvaluation(this);
                empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - 40.0;
                diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                diplomaticRelation.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                string description = GenerateMessageDescription(diplomaticRelation, DiplomaticRelationType.War, 0);
                if (persuader != null)
                {
                    SendMessageToEmpire(target, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.War, description, "PERSUADED");
                }
                else
                {
                    SendMessageToEmpire(target, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.War, description);
                }
                SendNewsBroadcastWarStartEnd(diplomaticRelation);
                if (diplomaticRelation.WarObjective == WarObjective.Undefined)
                {
                    SetWarObjectives(diplomaticRelation);
                }
                SendAttackFleets(target);
                if (_ControlMilitaryAttacks != 0 && Policy.UseExplorationShipsToScoutEnemySystems)
                {
                    EmpireList empireList = new EmpireList();
                    empireList.Add(target);
                    SendScoutShipsToEnemyLocations(empireList);
                }
                DiplomaticRelation diplomaticRelation2 = target.ObtainDiplomaticRelation(this);
                if (diplomaticRelation2 != null && diplomaticRelation2.WarObjective == WarObjective.Undefined)
                {
                    target.SetWarObjectives(diplomaticRelation2);
                }
                if (diplomaticRelation2 != null)
                {
                    diplomaticRelation2.StartDateOfLastChange = _Galaxy.CurrentStarDate;
                }
                CharacterList characterList = Characters.FindCharactersAtLocation(target.Capital);
                for (int i = 0; i < characterList.Count; i++)
                {
                    characterList[i].CompleteLocationTransfer(Capital, _Galaxy);
                }
                CharacterList characterList2 = target.Characters.FindCharactersAtLocation(Capital);
                for (int j = 0; j < characterList2.Count; j++)
                {
                    characterList2[j].CompleteLocationTransfer(target.Capital, _Galaxy);
                }
                if (!flag)
                {
                    target.ClearAttackFleetAssignments();
                }
                target.PrepareFleetsForWar(this);
                target.SendAttackFleets(this);
                if (diplomaticRelation2.WarObjective == WarObjective.CaptureObjectives)
                {
                    target.SetDefendFleets();
                }
                else
                {
                    target.SetDefendFleets(defendingFromAttack: true, assignMovement: true);
                }
                if ((this != _Galaxy.PlayerEmpire || _ControlMilitaryAttacks == AutomationLevel.FullyAutomated) && diplomaticRelation.WarObjective != WarObjective.CaptureObjectives)
                {
                    IdentifyMilitaryObjectives();
                }
                if (target != _Galaxy.PlayerEmpire && diplomaticRelation2.WarObjective != WarObjective.CaptureObjectives)
                {
                    target.IdentifyMilitaryObjectives();
                }
                ReviewDefensiveFleetLocations();
            }
            else if (lockedWar)
            {
                diplomaticRelation.Locked = true;
                DiplomaticRelation diplomaticRelation3 = target.ObtainDiplomaticRelation(this);
                if (diplomaticRelation3 != null)
                {
                    diplomaticRelation3.Locked = true;
                }
            }
        }

        public int DetermineRelativeStrength(int ourStrength, Empire otherEmpire)
        {
            int result = 0;
            double num = 1.5;
            double num2 = 0.65;
            if (otherEmpire == _Galaxy.PlayerEmpire)
            {
                num /= _Galaxy.PlayerEmpire.DifficultyLevel;
                num2 /= _Galaxy.PlayerEmpire.DifficultyLevel;
            }
            double num3 = (double)ourStrength / (double)otherEmpire.MilitaryPotency;
            if (num3 < num2)
            {
                result = -1;
            }
            else if (num3 > num)
            {
                result = 1;
            }
            return result;
        }

        private DiplomaticRelationList SummaryCopy(DiplomaticRelation[] relations)
        {
            DiplomaticRelationList diplomaticRelationList = new DiplomaticRelationList();
            foreach (DiplomaticRelation diplomaticRelation in relations)
            {
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(diplomaticRelation.Type, diplomaticRelation.Initiator, diplomaticRelation.ThisEmpire, diplomaticRelation.OtherEmpire, diplomaticRelation.SupplyRestrictedResources);
                diplomaticRelation2.Strategy = diplomaticRelation.Strategy;
                diplomaticRelationList.Add(diplomaticRelation2);
            }
            return diplomaticRelationList;
        }

        public Habitat CheckEmpireBuildingVictoryWonderAtKnownColony(Empire empire)
        {
            Habitat habitat = CheckEmpireBuildingVictoryWonder(empire);
            if (habitat != null)
            {
                Habitat systemStar = Galaxy.DetermineHabitatSystemStar(habitat);
                if (CheckSystemExplored(systemStar))
                {
                    return habitat;
                }
            }
            return null;
        }

        public Habitat CheckEmpireBuildingVictoryWonder(Empire empire)
        {
            if (_Galaxy.GameRaceSpecificVictoryConditionsEnabled && empire != null && empire.Colonies != null)
            {
                for (int i = 0; i < empire.Colonies.Count; i++)
                {
                    Habitat habitat = empire.Colonies[i];
                    if (habitat.Facilities != null && habitat.Facilities.Count > 0)
                    {
                        PlanetaryFacility planetaryFacility = habitat.Facilities[habitat.Facilities.Count - 1];
                        if (planetaryFacility.ConstructionProgress < 1f && planetaryFacility.Type == PlanetaryFacilityType.Wonder && planetaryFacility.WonderType == WonderType.RaceAchievement)
                        {
                            return habitat;
                        }
                    }
                }
            }
            return null;
        }

        private bool EvaluateShouldAttackWonderBuildingEmpire(Empire empire, Habitat wonderBuildingColony, DiplomaticRelationType relationType, DiplomaticStrategy strategy)
        {
            if (empire != null && wonderBuildingColony != null)
            {
                bool flag = true;
                if (Reclusive)
                {
                    flag = false;
                    Empire empire2 = _Galaxy.IdentifyShakturiEmpire();
                    if (empire == empire2)
                    {
                        flag = true;
                    }
                }
                if (flag && strategy != DiplomaticStrategy.Ally && relationType != DiplomaticRelationType.FreeTradeAgreement && relationType != DiplomaticRelationType.Protectorate && relationType != DiplomaticRelationType.MutualDefensePact)
                {
                    Habitat habitat = _Galaxy.FastFindNearestColony(wonderBuildingColony.Xpos, wonderBuildingColony.Ypos, this, 0);
                    if (habitat != null)
                    {
                        double num = _Galaxy.CalculateDistance(wonderBuildingColony.Xpos, wonderBuildingColony.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num < (double)Galaxy.SectorSize * 3.0)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private void ReviewDiplomaticStrategies()
        {
            int militaryPotency = MilitaryPotency;
            bool flag = false;
            int num = DominantRace.AggressionLevel - DominantRace.FriendlinessLevel;
            if (num > 10 && DominantRace.AggressionLevel >= 100)
            {
                flag = true;
            }
            Empire empire = IdentifyTopCompetitor();
            int num2 = DominantRace.TradeBonus + DominantRace.ResourceExtractionBonus + DominantRace.SatisfactionModifier;
            int num3 = DominantRace.AggressionLevel - 100 + (DominantRace.CautionLevel - 100) + DominantRace.WarWearinessAttenuation;
            int num4 = DominantRace.EspionageBonus * 2 + (DominantRace.IntelligenceLevel - 100);
            DiplomaticRelation[] array = DiplomaticRelations.ToArray();
            DiplomaticRelationList diplomaticRelationList = SummaryCopy(array);
            foreach (DiplomaticRelation diplomaticRelation in array)
            {
                Empire otherEmpire = diplomaticRelation.OtherEmpire;
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(otherEmpire);
                EmpireEvaluation empireEvaluation2 = otherEmpire.ObtainEmpireEvaluation(this);
                if (diplomaticRelation.Type != 0 && otherEmpire != null && otherEmpire.Active)
                {
                    double bias = empireEvaluation.Bias;
                    double num5 = 0.0;
                    if (_GovernmentAttributes != null)
                    {
                        num5 = _GovernmentAttributes.NaturalAffinity(otherEmpire.GovernmentId);
                    }
                    int overallAttitude = empireEvaluation2.OverallAttitude;
                    double incidentEvaluation = empireEvaluation.IncidentEvaluation;
                    int overallAttitude2 = empireEvaluation.OverallAttitude;
                    double num6 = bias / 2.0 + num5 * 0.5 + (double)overallAttitude / 5.0 + (double)overallAttitude2 / 8.0 + incidentEvaluation / 5.0;
                    int num7 = DetermineRelativeStrength(militaryPotency, otherEmpire);
                    double num8 = 12.0;
                    double num9 = -10.0;
                    double num10 = 18.0;
                    double num11 = -17.0;
                    if (Policy != null)
                    {
                        num8 /= Math.Sqrt(Policy.TradePriority);
                        num10 /= Math.Sqrt(Policy.AlliancePriority);
                        num11 /= Math.Sqrt(Policy.WarWillingness);
                    }
                    if (DominantRace != null)
                    {
                        double num12 = (double)DominantRace.AggressionLevel / 100.0;
                        _ = (double)DominantRace.CautionLevel / 100.0;
                        double num13 = (double)DominantRace.FriendlinessLevel / 100.0;
                        double num14 = (double)DominantRace.LoyaltyLevel / 100.0;
                        if (diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement)
                        {
                            if (num14 > 1.0)
                            {
                                num8 /= num14;
                            }
                            if (Policy.BreakTreatyWillingness < 1.0)
                            {
                                num8 *= Math.Sqrt(Policy.BreakTreatyWillingness);
                            }
                        }
                        else if (diplomaticRelation.Type == DiplomaticRelationType.Protectorate || diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact)
                        {
                            if (num14 > 1.0)
                            {
                                num10 /= num14;
                            }
                            if (Policy.BreakTreatyWillingness < 1.0)
                            {
                                num10 *= Math.Sqrt(Policy.BreakTreatyWillingness);
                            }
                        }
                        else
                        {
                            num9 /= num12;
                            num11 /= num12;
                            num8 /= num13;
                            num10 /= num13;
                        }
                    }
                    DiplomaticStrategy diplomaticStrategy = DiplomaticStrategy.Undefined;
                    switch (num7)
                    {
                        case -1:
                            if (flag)
                            {
                                if (num6 > num8)
                                {
                                    diplomaticStrategy = ((!(num6 > num10)) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Ally);
                                }
                                else if (num6 < num9)
                                {
                                    if (num2 >= num4)
                                    {
                                        diplomaticStrategy = DiplomaticStrategy.DefendPlacate;
                                    }
                                    else if (num4 > num2)
                                    {
                                        diplomaticStrategy = DiplomaticStrategy.DefendUndermine;
                                    }
                                }
                                else
                                {
                                    diplomaticStrategy = DiplomaticStrategy.Undefined;
                                }
                            }
                            else
                            {
                                diplomaticStrategy = ((!(num6 > num8)) ? ((!(num6 < num9)) ? ((DominantRace.FriendlinessLevel > 110 || overallAttitude2 > 20) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Undefined) : ((num2 <= num3) ? DiplomaticStrategy.Defend : DiplomaticStrategy.DefendPlacate)) : ((!(num6 > num10)) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Ally));
                            }
                            break;
                        case 0:
                            if (flag)
                            {
                                if (num6 > num8)
                                {
                                    diplomaticStrategy = ((!(num6 > num10)) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Ally);
                                }
                                else if (num6 < num9)
                                {
                                    if ((num3 > num2 && num3 > num4) || DominantRace.AggressionLevel > 115 || overallAttitude2 < -5)
                                    {
                                        diplomaticStrategy = DiplomaticStrategy.Conquer;
                                    }
                                    else if (incidentEvaluation < -5.0 && DominantRace.FriendlinessLevel - DominantRace.AggressionLevel + overallAttitude2 < -10)
                                    {
                                        diplomaticStrategy = DiplomaticStrategy.Punish;
                                    }
                                    else if (num2 >= num4)
                                    {
                                        diplomaticStrategy = DiplomaticStrategy.DefendPlacate;
                                    }
                                    else if (num4 > num2)
                                    {
                                        diplomaticStrategy = DiplomaticStrategy.DefendUndermine;
                                    }
                                }
                                else
                                {
                                    diplomaticStrategy = (((DominantRace.FriendlinessLevel < 100 || DominantRace.EspionageBonus > 0) && overallAttitude2 < 0) ? DiplomaticStrategy.Undermine : DiplomaticStrategy.Undefined);
                                }
                            }
                            else if (num6 > num8)
                            {
                                diplomaticStrategy = ((!(num6 > num10)) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Ally);
                            }
                            else if (num6 < num9)
                            {
                                if ((num3 > num2 && num3 > num4) || DominantRace.AggressionLevel > 115 || overallAttitude2 < -10)
                                {
                                    diplomaticStrategy = DiplomaticStrategy.Conquer;
                                }
                                else if (num2 >= num4)
                                {
                                    diplomaticStrategy = DiplomaticStrategy.DefendPlacate;
                                }
                                else if (num4 > num2)
                                {
                                    diplomaticStrategy = DiplomaticStrategy.DefendUndermine;
                                }
                            }
                            else
                            {
                                diplomaticStrategy = ((DominantRace.FriendlinessLevel > 110 || overallAttitude2 > 20) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Undefined);
                            }
                            break;
                        case 1:
                            diplomaticStrategy = ((!flag) ? ((!(num6 > num8)) ? ((!(num6 < num9)) ? ((DominantRace.FriendlinessLevel > 110 || overallAttitude2 > 20) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Undefined) : ((DominantRace.AggressionLevel > 115 || overallAttitude2 < -5) ? DiplomaticStrategy.Conquer : ((!(incidentEvaluation < 0.0) || DominantRace.FriendlinessLevel - DominantRace.AggressionLevel + overallAttitude2 >= -10) ? DiplomaticStrategy.Defend : DiplomaticStrategy.Punish))) : ((!(num6 > num10)) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Ally)) : ((!(num6 > num8)) ? ((!(num6 < num9)) ? ((DominantRace.AggressionLevel > 115 && overallAttitude2 < -5) ? DiplomaticStrategy.Conquer : ((otherEmpire == empire && overallAttitude2 < -5) ? DiplomaticStrategy.Undermine : DiplomaticStrategy.Undefined)) : ((DominantRace.AggressionLevel > 110 || overallAttitude2 < 0) ? DiplomaticStrategy.Conquer : ((!(incidentEvaluation < -5.0) || DominantRace.FriendlinessLevel - DominantRace.AggressionLevel + overallAttitude2 >= -10) ? DiplomaticStrategy.Defend : DiplomaticStrategy.Punish))) : ((!(num6 > num10)) ? DiplomaticStrategy.Befriend : DiplomaticStrategy.Ally)));
                            break;
                    }
                    if (Reclusive)
                    {
                        switch (diplomaticStrategy)
                        {
                            case DiplomaticStrategy.Conquer:
                            case DiplomaticStrategy.Befriend:
                            case DiplomaticStrategy.Placate:
                            case DiplomaticStrategy.Ally:
                            case DiplomaticStrategy.Undermine:
                            case DiplomaticStrategy.Punish:
                                diplomaticStrategy = DiplomaticStrategy.Undefined;
                                break;
                            case DiplomaticStrategy.DefendPlacate:
                            case DiplomaticStrategy.DefendUndermine:
                                diplomaticStrategy = DiplomaticStrategy.Defend;
                                break;
                        }
                    }
                    switch (diplomaticStrategy)
                    {
                        case DiplomaticStrategy.Ally:
                            if (overallAttitude2 < 15)
                            {
                                diplomaticStrategy = DiplomaticStrategy.Befriend;
                            }
                            if (overallAttitude2 < 5)
                            {
                                diplomaticStrategy = DiplomaticStrategy.Undefined;
                            }
                            break;
                        case DiplomaticStrategy.Befriend:
                            if (overallAttitude2 < 5)
                            {
                                diplomaticStrategy = DiplomaticStrategy.Undefined;
                            }
                            break;
                    }
                    if (diplomaticStrategy == DiplomaticStrategy.Conquer)
                    {
                        if (!CheckDesireToConquer(diplomaticRelation.OtherEmpire))
                        {
                            diplomaticStrategy = DiplomaticStrategy.Undefined;
                        }
                    }
                    else if (CheckMustConquer(diplomaticRelation.OtherEmpire))
                    {
                        diplomaticStrategy = DiplomaticStrategy.Conquer;
                    }
                    if (diplomaticStrategy == DiplomaticStrategy.Punish && num6 >= num11 && !CheckDesireToConquer(diplomaticRelation.OtherEmpire))
                    {
                        diplomaticStrategy = DiplomaticStrategy.Undermine;
                    }
                    diplomaticRelation.SortTag = num6;
                    diplomaticRelation.Strategy = diplomaticStrategy;
                    Habitat habitat = CheckEmpireBuildingVictoryWonderAtKnownColony(diplomaticRelation.OtherEmpire);
                    if (habitat != null && EvaluateShouldAttackWonderBuildingEmpire(diplomaticRelation.OtherEmpire, habitat, diplomaticRelation.Type, diplomaticRelation.Strategy))
                    {
                        diplomaticRelation.Strategy = DiplomaticStrategy.Conquer;
                    }
                    if (diplomaticRelation.Type == DiplomaticRelationType.War && diplomaticRelation.Locked)
                    {
                        diplomaticRelation.Strategy = DiplomaticStrategy.Conquer;
                    }
                }
                if (diplomaticRelation.Locked)
                {
                    switch (diplomaticRelation.Type)
                    {
                        case DiplomaticRelationType.None:
                            diplomaticRelation.Strategy = DiplomaticStrategy.Undefined;
                            break;
                        case DiplomaticRelationType.FreeTradeAgreement:
                            diplomaticRelation.Strategy = DiplomaticStrategy.Befriend;
                            break;
                        case DiplomaticRelationType.Protectorate:
                            diplomaticRelation.Strategy = DiplomaticStrategy.Ally;
                            break;
                        case DiplomaticRelationType.MutualDefensePact:
                            diplomaticRelation.Strategy = DiplomaticStrategy.Ally;
                            break;
                        case DiplomaticRelationType.SubjugatedDominion:
                            diplomaticRelation.Strategy = DiplomaticStrategy.Undefined;
                            break;
                        case DiplomaticRelationType.TradeSanctions:
                            diplomaticRelation.Strategy = DiplomaticStrategy.Punish;
                            break;
                        case DiplomaticRelationType.War:
                            diplomaticRelation.Strategy = DiplomaticStrategy.Conquer;
                            break;
                    }
                }
            }
            int num15 = 0;
            int num16 = 0;
            int num17 = 0;
            double num18 = 25.0 * ((double)DominantRace.AggressionLevel / 100.0);
            DiplomaticRelationList diplomaticRelationList2 = new DiplomaticRelationList();
            DiplomaticRelationList diplomaticRelationList3 = new DiplomaticRelationList();
            foreach (DiplomaticRelation diplomaticRelation2 in array)
            {
                if (diplomaticRelation2.Type != 0)
                {
                    diplomaticRelationList2.Add(diplomaticRelation2);
                    if (diplomaticRelation2.Type == DiplomaticRelationType.War)
                    {
                        num17++;
                    }
                    else if (diplomaticRelation2.Strategy == DiplomaticStrategy.Conquer)
                    {
                        diplomaticRelationList3.Add(diplomaticRelation2);
                        num15++;
                    }
                    else if (diplomaticRelation2.Strategy == DiplomaticStrategy.Befriend || diplomaticRelation2.Strategy == DiplomaticStrategy.Ally)
                    {
                        num16++;
                    }
                }
            }
            int num19 = 1;
            if ((num17 > 0 && num15 > 0) || WarWeariness >= num18 || ShipGroups.Count <= 0)
            {
                num19 = 0;
            }
            if (num15 > num19)
            {
                diplomaticRelationList3.Sort();
                for (int k = 0; k < diplomaticRelationList3.Count; k++)
                {
                    if (k >= num19)
                    {
                        int num20 = DetermineRelativeStrength(militaryPotency, diplomaticRelationList3[k].OtherEmpire);
                        if (num20 == 1)
                        {
                            diplomaticRelationList3[k].Strategy = DiplomaticStrategy.Undermine;
                        }
                        else if (num4 > num3 || DominantRace.EspionageBonus > 0)
                        {
                            diplomaticRelationList3[k].Strategy = DiplomaticStrategy.DefendUndermine;
                        }
                        else
                        {
                            diplomaticRelationList3[k].Strategy = DiplomaticStrategy.Defend;
                        }
                    }
                }
            }
            int num21 = 0;
            int num22 = 0;
            DiplomaticRelationList diplomaticRelationList4 = new DiplomaticRelationList();
            foreach (DiplomaticRelation diplomaticRelation3 in array)
            {
                if (diplomaticRelation3.Type != 0)
                {
                    if (diplomaticRelation3.Type == DiplomaticRelationType.TradeSanctions)
                    {
                        num22++;
                    }
                    else if (diplomaticRelation3.Strategy == DiplomaticStrategy.Punish)
                    {
                        diplomaticRelationList4.Add(diplomaticRelation3);
                        num21++;
                    }
                }
            }
            int num23 = 1;
            if (num22 > 0 && num21 > 0)
            {
                num23 = 0;
            }
            if (num21 > num23)
            {
                diplomaticRelationList4.Sort();
                for (int m = 0; m < diplomaticRelationList4.Count; m++)
                {
                    if (m >= num23)
                    {
                        int num24 = DetermineRelativeStrength(militaryPotency, diplomaticRelationList4[m].OtherEmpire);
                        if (num24 == 1)
                        {
                            diplomaticRelationList4[m].Strategy = DiplomaticStrategy.Undermine;
                        }
                        else
                        {
                            diplomaticRelationList4[m].Strategy = DiplomaticStrategy.Undefined;
                        }
                    }
                }
            }
            if (!Reclusive && num16 <= 0 && diplomaticRelationList2.Count > 1)
            {
                diplomaticRelationList2.Sort();
                diplomaticRelationList2.Reverse();
                if (diplomaticRelationList2[0].SortTag > 2.0 && diplomaticRelationList2[0].Type != DiplomaticRelationType.War && diplomaticRelationList2[0].Type != DiplomaticRelationType.TradeSanctions && diplomaticRelationList2[0].Type != 0)
                {
                    EmpireEvaluation empireEvaluation3 = ObtainEmpireEvaluation(diplomaticRelationList2[0].OtherEmpire);
                    if (empireEvaluation3.OverallAttitude >= 5)
                    {
                        diplomaticRelationList2[0].Strategy = DiplomaticStrategy.Befriend;
                    }
                }
            }
            foreach (DiplomaticRelation diplomaticRelation4 in array)
            {
                DiplomaticRelation diplomaticRelation5 = diplomaticRelationList[diplomaticRelation4.OtherEmpire];
                if (diplomaticRelation4.Strategy == DiplomaticStrategy.Conquer)
                {
                    SetWarObjectives(diplomaticRelation4);
                }
                if (diplomaticRelation5.Strategy == DiplomaticStrategy.Conquer && diplomaticRelation4.Strategy != DiplomaticStrategy.Conquer)
                {
                    ClearAttackFleetAssignments(diplomaticRelation4.OtherEmpire);
                }
                else if (diplomaticRelation4.Strategy == DiplomaticStrategy.Conquer && diplomaticRelation5.Strategy != DiplomaticStrategy.Conquer)
                {
                    if (CheckCanConductNewWar(diplomaticRelation4.OtherEmpire, clearColonyTargetsIfNecessary: true))
                    {
                        SetDefendFleets();
                        int num25 = PrepareFleetsForWar(diplomaticRelation4.OtherEmpire);
                        if (num25 > 0)
                        {
                            if (_ControlMilitaryAttacks != 0 && Policy.UseExplorationShipsToScoutEnemySystems)
                            {
                                EmpireList empireList = new EmpireList();
                                empireList.Add(diplomaticRelation4.OtherEmpire);
                                SendScoutShipsToEnemyLocations(empireList);
                            }
                        }
                        else
                        {
                            diplomaticRelation4.Strategy = DiplomaticStrategy.DefendUndermine;
                        }
                    }
                    else
                    {
                        diplomaticRelation4.Strategy = DiplomaticStrategy.DefendUndermine;
                    }
                }
                else if ((diplomaticRelation4.Strategy == DiplomaticStrategy.Defend || diplomaticRelation4.Strategy == DiplomaticStrategy.DefendPlacate || diplomaticRelation4.Strategy == DiplomaticStrategy.DefendUndermine) && diplomaticRelation5.Strategy != DiplomaticStrategy.Defend && diplomaticRelation5.Strategy != DiplomaticStrategy.DefendPlacate && diplomaticRelation5.Strategy != DiplomaticStrategy.DefendUndermine)
                {
                    SetDefendFleets();
                }
            }
            EmpireList targetEmpires = DetermineEmpiresWarOrConquer();
            CheckAttackFleetTargets(targetEmpires);
        }

        private bool CheckCanConductNewWar(Empire otherEmpire, bool clearColonyTargetsIfNecessary)
        {
            EmpireList empireList = DetermineEmpiresAtWarWith();
            if (empireList.Count > 0)
            {
                return false;
            }
            if (ShipGroups.Count <= 0)
            {
                return false;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation.WarObjective == WarObjective.CaptureObjectives && diplomaticRelation.WarObjectiveColonies.Count > 0)
            {
                bool flag = false;
                bool flag2 = false;
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup.TotalTroopAttackStrength > 0)
                    {
                        flag = true;
                    }
                    if (shipGroup.Ships.Count >= 10)
                    {
                        flag2 = true;
                    }
                }
                if (!flag || !flag2)
                {
                    if (clearColonyTargetsIfNecessary)
                    {
                        if (diplomaticRelation.WarObjectiveBases.Count > 0 && ShipGroups.Count > 0)
                        {
                            diplomaticRelation.WarObjectiveColonies.Clear();
                        }
                        return true;
                    }
                    return false;
                }
                return true;
            }
            return true;
        }

        private bool CheckMustConquer(Empire otherEmpire)
        {
            EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(otherEmpire);
            double num = -80.0;
            num /= Math.Sqrt(Policy.WarWillingness);
            if (empireEvaluation.IncidentEvaluation < num)
            {
                return true;
            }
            return false;
        }

        private bool CheckDesireToConquer(Empire otherEmpire)
        {
            HabitatList targetedColonies = new HabitatList();
            BuiltObjectList targetedBases = new BuiltObjectList();
            IdentifyEmpireWarObjectives(otherEmpire, out targetedColonies, out targetedBases);
            if (targetedColonies.Count > 0 || targetedBases.Count > 0)
            {
                return true;
            }
            EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(otherEmpire);
            double num = -50.0;
            num /= Math.Sqrt(Policy.WarWillingness);
            if (empireEvaluation.IncidentEvaluation < num)
            {
                return true;
            }
            return false;
        }

        private bool CheckOfferMilitaryRefueling(DiplomaticRelation relation)
        {
            if (!relation.MilitaryRefuelingToOther && relation.Strategy == DiplomaticStrategy.Ally)
            {
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(relation.OtherEmpire);
                if (empireEvaluation.IncidentEvaluation >= 10.0 && CheckTaskAuthorized(_ControlDiplomacyTreaties, GenerateAutomationMessageMilitaryRefueling(relation.OtherEmpire, refuel: true), relation.OtherEmpire, AdvisorMessageType.OfferMilitaryRefueling))
                {
                    OfferMilitaryRefueling(relation.OtherEmpire);
                    return true;
                }
            }
            return false;
        }

        private bool CheckOfferMiningRights(DiplomaticRelation relation)
        {
            if (!relation.MiningRightsToOther && (relation.Strategy == DiplomaticStrategy.Ally || relation.Strategy == DiplomaticStrategy.Befriend))
            {
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(relation.OtherEmpire);
                if (empireEvaluation.IncidentEvaluation >= 5.0 && CheckTaskAuthorized(_ControlDiplomacyTreaties, GenerateAutomationMessageMiningRights(relation.OtherEmpire, allowMining: true), relation.OtherEmpire, AdvisorMessageType.OfferMiningRights))
                {
                    OfferMiningRights(relation.OtherEmpire);
                    return true;
                }
            }
            return false;
        }

        private void ImplementDiplomaticStrategy(Empire otherEmpire, DiplomaticStrategy strategy)
        {
            if (otherEmpire == null)
            {
                return;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(otherEmpire);
            EmpireEvaluation empireEvaluation2 = otherEmpire.ObtainEmpireEvaluation(this);
            if (empireEvaluation.IncidentEvaluation < -5.0)
            {
                CheckCancelMilitaryRefueling(otherEmpire);
            }
            if (empireEvaluation.IncidentEvaluation < -10.0)
            {
                CheckCancelMiningRights(otherEmpire);
            }
            switch (strategy)
            {
                case DiplomaticStrategy.Ally:
                    if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                    {
                        if (Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            if (empireEvaluation2.OverallAttitude < 50)
                            {
                                GiveGiftSmallWhenSufficientTimePassed(otherEmpire);
                            }
                        }
                        else if (Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            OfferTrade(otherEmpire);
                        }
                    }
                    else if (Galaxy.Rnd.Next(0, 2) == 1)
                    {
                        if (empireEvaluation2.OverallAttitude < 50)
                        {
                            GiveGiftWhenSufficientTimePassed(otherEmpire);
                        }
                    }
                    else
                    {
                        OfferMutualDefense(otherEmpire);
                    }
                    if (Galaxy.Rnd.Next(0, 2) == 1)
                    {
                        CheckOfferMilitaryRefueling(diplomaticRelation);
                    }
                    else
                    {
                        CheckOfferMiningRights(diplomaticRelation);
                    }
                    break;
                case DiplomaticStrategy.Befriend:
                    if (diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                    {
                        if (Galaxy.Rnd.Next(0, 2) == 1 && empireEvaluation2.OverallAttitude < 25)
                        {
                            GiveGiftSmallWhenSufficientTimePassed(otherEmpire);
                        }
                    }
                    else if (Galaxy.Rnd.Next(0, 2) == 1)
                    {
                        if (empireEvaluation2.OverallAttitude < 25)
                        {
                            GiveGiftWhenSufficientTimePassed(otherEmpire);
                        }
                    }
                    else
                    {
                        OfferFreeTrade(otherEmpire);
                    }
                    CheckOfferMiningRights(diplomaticRelation);
                    break;
                case DiplomaticStrategy.Conquer:
                    if (diplomaticRelation.Type != DiplomaticRelationType.War && CheckReadyForWar(otherEmpire))
                    {
                        StartWar(otherEmpire);
                    }
                    CheckCancelMilitaryRefueling(otherEmpire);
                    CheckCancelMiningRights(otherEmpire);
                    CheckCancelRestrictedResourceTrading(otherEmpire);
                    break;
                case DiplomaticStrategy.Defend:
                    CheckCancelMilitaryRefueling(otherEmpire);
                    break;
                case DiplomaticStrategy.DefendPlacate:
                    if (diplomaticRelation.Type != DiplomaticRelationType.War && Galaxy.Rnd.Next(0, 2) == 1 && empireEvaluation2.OverallAttitude < 0)
                    {
                        GiveGiftWhenSufficientTimePassed(otherEmpire);
                    }
                    break;
                case DiplomaticStrategy.DefendUndermine:
                    CheckCancelMilitaryRefueling(otherEmpire);
                    break;
                case DiplomaticStrategy.Placate:
                    if (diplomaticRelation.Type != DiplomaticRelationType.War && Galaxy.Rnd.Next(0, 2) == 1 && empireEvaluation2.OverallAttitude < 0)
                    {
                        GiveGiftWhenSufficientTimePassed(otherEmpire);
                    }
                    break;
                case DiplomaticStrategy.Punish:
                    if (diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions && diplomaticRelation.Type != DiplomaticRelationType.War)
                    {
                        StartTradeSanctionsIfTimePassed(otherEmpire);
                    }
                    CancelTreatiesIfTimePassed(otherEmpire);
                    CheckCancelMilitaryRefueling(otherEmpire);
                    CheckCancelMiningRights(otherEmpire);
                    CheckCancelRestrictedResourceTrading(otherEmpire);
                    break;
                case DiplomaticStrategy.Undermine:
                    if (diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions && diplomaticRelation.Type != DiplomaticRelationType.War)
                    {
                        StartTradeSanctionsIfTimePassed(otherEmpire);
                    }
                    CancelTreatiesIfTimePassed(otherEmpire);
                    CheckCancelMilitaryRefueling(otherEmpire);
                    CheckCancelMiningRights(otherEmpire);
                    CheckCancelRestrictedResourceTrading(otherEmpire);
                    break;
            }
        }

        private void OfferTrade(Empire otherEmpire)
        {
        }

        public DiplomaticRelationType DetermineDesiredDiplomaticRelationTypical(DiplomaticStrategy strategy, DiplomaticRelationType currentRelationType)
        {
            switch (strategy)
            {
                case DiplomaticStrategy.Ally:
                    return DiplomaticRelationType.MutualDefensePact;
                case DiplomaticStrategy.Befriend:
                    return DiplomaticRelationType.FreeTradeAgreement;
                case DiplomaticStrategy.Conquer:
                    return DiplomaticRelationType.War;
                case DiplomaticStrategy.Placate:
                case DiplomaticStrategy.Defend:
                case DiplomaticStrategy.DefendPlacate:
                    return DiplomaticRelationType.None;
                case DiplomaticStrategy.DefendUndermine:
                    if (currentRelationType == DiplomaticRelationType.TradeSanctions)
                    {
                        return DiplomaticRelationType.TradeSanctions;
                    }
                    return DiplomaticRelationType.None;
                case DiplomaticStrategy.Undermine:
                case DiplomaticStrategy.Punish:
                    return DiplomaticRelationType.TradeSanctions;
                default:
                    return DiplomaticRelationType.None;
            }
        }

        private void ReviewDiplomaticSituations()
        {
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation != null && diplomaticRelation.Type != 0)
                {
                    ImplementDiplomaticStrategy(diplomaticRelation.OtherEmpire, diplomaticRelation.Strategy);
                    ApplyDiplomaticStrategyToRelation(diplomaticRelation, diplomaticRelation.Strategy);
                }
            }
        }

        private void ApplyDiplomaticStrategyToRelation(DiplomaticRelation relation, DiplomaticStrategy strategy)
        {
            if (relation == null)
            {
                return;
            }
            DiplomaticRelationType diplomaticRelationType = DetermineDesiredDiplomaticRelationTypical(strategy, relation.Type);
            switch (relation.Type)
            {
                case DiplomaticRelationType.War:
                    {
                        if (relation.Initiator == this)
                        {
                            WarEndReason endReason = WarEndReason.Undefined;
                            if (!ConsiderEndWar(relation.OtherEmpire, out endReason))
                            {
                                break;
                            }
                            double num2 = (double)MilitaryPotency / (double)relation.OtherEmpire.MilitaryPotency;
                            switch (endReason)
                            {
                                case WarEndReason.AtWarWithOtherEmpires:
                                    if (num2 > 3.0 && Galaxy.Rnd.Next(0, 2) == 1)
                                    {
                                        SubjugateRequest(relation.OtherEmpire);
                                    }
                                    else
                                    {
                                        EndWarRequest(relation.OtherEmpire);
                                    }
                                    break;
                                case WarEndReason.WarWearinessExceeded:
                                case WarEndReason.HeavyLosses:
                                case WarEndReason.NoAttackFleets:
                                    if (DominantRace.AggressionLevel >= 115 && Galaxy.Rnd.Next(0, 3) == 1)
                                    {
                                        SubjugateRequest(relation.OtherEmpire);
                                    }
                                    else
                                    {
                                        EndWarRequest(relation.OtherEmpire);
                                    }
                                    break;
                                case WarEndReason.ObjectivesMet:
                                    if (num2 > 3.0 && Galaxy.Rnd.Next(0, 2) == 1)
                                    {
                                        SubjugateRequest(relation.OtherEmpire);
                                    }
                                    else
                                    {
                                        EndWarRequest(relation.OtherEmpire);
                                    }
                                    break;
                                case WarEndReason.WantEnd:
                                    EndWarRequest(relation.OtherEmpire);
                                    break;
                            }
                            break;
                        }
                        WarEndReason endReason2 = WarEndReason.Undefined;
                        if (ConsiderEndWar(relation.OtherEmpire, out endReason2))
                        {
                            double winningRatio = 0.0;
                            int loserRawDamageBuiltObject = 0;
                            int loserRawDamageColony = 0;
                            int winnerRawDamageBuiltObject = 0;
                            int winnerRawDamageColony = 0;
                            Empire loser = null;
                            Empire empire = DetermineVictorInWar(relation, out winningRatio, out loser, out loserRawDamageBuiltObject, out loserRawDamageColony, out winnerRawDamageBuiltObject, out winnerRawDamageColony);
                            if (empire == this && DetermineWhetherWantToOfferSubjugation(this) && DetermineSubjugationOfLoserInWar(empire, loser, winningRatio, empire.MilitaryPotency, loser.MilitaryPotency))
                            {
                                SubjugateRequest(relation.OtherEmpire);
                            }
                            else
                            {
                                EndWarRequest(relation.OtherEmpire);
                            }
                        }
                        break;
                    }
                case DiplomaticRelationType.TradeSanctions:
                    if (relation.Initiator == this && diplomaticRelationType != DiplomaticRelationType.TradeSanctions && diplomaticRelationType != DiplomaticRelationType.War)
                    {
                        EndTradeSanctionsIfTimePassed(relation.OtherEmpire);
                    }
                    break;
                case DiplomaticRelationType.SubjugatedDominion:
                    if (relation.Initiator == this)
                    {
                        if (diplomaticRelationType == DiplomaticRelationType.FreeTradeAgreement || diplomaticRelationType == DiplomaticRelationType.MutualDefensePact || diplomaticRelationType == DiplomaticRelationType.Protectorate)
                        {
                            EndSubjugation(relation.OtherEmpire);
                        }
                    }
                    else
                    {
                        if (_ControlDiplomacyTreaties == AutomationLevel.Manual)
                        {
                            break;
                        }
                        Empire otherEmpire = relation.OtherEmpire;
                        int num = DetermineRelativeStrength(MilitaryPotency, otherEmpire);
                        DiplomaticRelation diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.None, this, this, otherEmpire, _Galaxy.CurrentStarDate, relation.SupplyRestrictedResources);
                        int refusalCount = 0;
                        switch (num)
                        {
                            case -1:
                                if (Galaxy.Rnd.Next(0, 8) == 2 && CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageTreaty(otherEmpire, DiplomaticRelationType.None), otherEmpire, AdvisorMessageType.TreatyOffer, DiplomaticRelationType.None, null))
                                {
                                    otherEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation);
                                    string description2 = GenerateMessageDescription(relation, DiplomaticRelationType.None, num);
                                    relation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                                    SendMessageToEmpire(otherEmpire, EmpireMessageType.ProposeDiplomaticRelation, DiplomaticRelationType.None, description2);
                                }
                                break;
                            case 0:
                                if (Galaxy.Rnd.Next(0, 3) == 2 && CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageTreaty(otherEmpire, DiplomaticRelationType.None), otherEmpire, AdvisorMessageType.TreatyOffer, DiplomaticRelationType.None, null))
                                {
                                    otherEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation);
                                    string description3 = GenerateMessageDescription(relation, DiplomaticRelationType.None, num);
                                    relation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                                    SendMessageToEmpire(otherEmpire, EmpireMessageType.ProposeDiplomaticRelation, DiplomaticRelationType.None, description3);
                                }
                                break;
                            case 1:
                                if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageTreaty(otherEmpire, DiplomaticRelationType.None), otherEmpire, AdvisorMessageType.TreatyOffer, DiplomaticRelationType.None, null))
                                {
                                    otherEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation);
                                    string description = GenerateMessageDescription(relation, DiplomaticRelationType.None, num);
                                    relation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                                    SendMessageToEmpire(otherEmpire, EmpireMessageType.ProposeDiplomaticRelation, DiplomaticRelationType.None, description);
                                }
                                break;
                        }
                    }
                    break;
                case DiplomaticRelationType.None:
                case DiplomaticRelationType.FreeTradeAgreement:
                case DiplomaticRelationType.MutualDefensePact:
                case DiplomaticRelationType.Protectorate:
                    break;
            }
        }

        public bool ConsiderEndWar(Empire otherEmpire, out WarEndReason endReason)
        {
            return ConsiderEndWar(otherEmpire, out endReason, otherEmpireOfferingToBeSubjugated: false);
        }

        public bool ConsiderEndWar(Empire otherEmpire, out WarEndReason endReason, bool otherEmpireOfferingToBeSubjugated)
        {
            bool flag = true;
            endReason = WarEndReason.Undefined;
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.War)
            {
                if (diplomaticRelation.Locked)
                {
                    return false;
                }
                switch (diplomaticRelation.WarObjective)
                {
                    case WarObjective.CaptureObjectives:
                        {
                            for (int i = 0; i < diplomaticRelation.WarObjectiveColonies.Count; i++)
                            {
                                Habitat habitat = diplomaticRelation.WarObjectiveColonies[i];
                                if (habitat != null && !habitat.HasBeenDestroyed && habitat.Empire != null && habitat.Empire != _Galaxy.IndependentEmpire && habitat.Empire != this && habitat.Empire == otherEmpire)
                                {
                                    flag = false;
                                }
                            }
                            for (int j = 0; j < diplomaticRelation.WarObjectiveBases.Count; j++)
                            {
                                BuiltObject builtObject = diplomaticRelation.WarObjectiveBases[j];
                                if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.Empire != null && builtObject.Empire != _Galaxy.IndependentEmpire && builtObject.Empire != this && builtObject.Empire == otherEmpire)
                                {
                                    flag = false;
                                }
                            }
                            endReason = WarEndReason.ObjectivesMet;
                            break;
                        }
                    case WarObjective.EndWar:
                        flag = true;
                        endReason = WarEndReason.WantEnd;
                        break;
                    case WarObjective.TotalConquest:
                        if (otherEmpire.Colonies.Count > 0 && otherEmpire.Active)
                        {
                            flag = false;
                        }
                        break;
                    default:
                        flag = true;
                        break;
                }
                double num = (double)DominantRace.AggressionLevel / 100.0;
                double num2 = 25.0 * num;
                if (otherEmpireOfferingToBeSubjugated)
                {
                    num2 *= 0.6;
                }
                if (WarWeariness > num2)
                {
                    flag = true;
                    endReason = WarEndReason.WarWearinessExceeded;
                }
                EmpireList empireList = DetermineEmpiresAtWarWith();
                if (empireList.Count > 1)
                {
                    int num3 = 0;
                    for (int k = 0; k < empireList.Count; k++)
                    {
                        num3 += empireList[k].BuiltObjects.TotalMobileMilitaryFirepower();
                    }
                    double num4 = (double)BuiltObjects.TotalMobileMilitaryFirepower() / (double)num3;
                    double num5 = 1.0;
                    if (otherEmpireOfferingToBeSubjugated)
                    {
                        num5 = 2.0;
                    }
                    if (num4 < num5)
                    {
                        flag = true;
                        endReason = WarEndReason.AtWarWithOtherEmpires;
                    }
                }
                if (CheckWhetherWarDamageExceedsLimit(this, diplomaticRelation.WarDamageBuiltObject, diplomaticRelation.WarDamageColony))
                {
                    flag = true;
                    endReason = WarEndReason.HeavyLosses;
                }
                int num6 = 0;
                for (int l = 0; l < ShipGroups.Count; l++)
                {
                    ShipGroup shipGroup = ShipGroups[l];
                    if (shipGroup != null && shipGroup.Posture == FleetPosture.Attack && shipGroup.Ships.Count > 0)
                    {
                        num6++;
                    }
                }
                if (num6 <= 0)
                {
                    flag = true;
                    endReason = WarEndReason.NoAttackFleets;
                }
                if (flag)
                {
                    long num7 = diplomaticRelation.StartDateOfLastChange + (long)(Galaxy.MinimumWarLengthPeriodYears * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
                    if (_Galaxy.CurrentStarDate < num7)
                    {
                        flag = false;
                    }
                }
            }
            return flag;
        }

        public int PrepareFleetsForWar(Empire otherEmpire)
        {
            int num = 0;
            if (_ControlMilitaryFleets)
            {
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
                if (diplomaticRelation.WarObjective == WarObjective.TotalConquest)
                {
                    IdentifyMilitaryObjectives();
                }
                else if (diplomaticRelation.WarObjective == WarObjective.CaptureObjectives)
                {
                    for (int i = 0; i < diplomaticRelation.WarObjectiveColonies.Count; i++)
                    {
                        Habitat habitat = diplomaticRelation.WarObjectiveColonies[i];
                        if (habitat == null)
                        {
                            continue;
                        }
                        int num2 = habitat.EstimatedDefensiveForceRequired(atWar: true);
                        int num3 = Galaxy.DetermineRequiredTroopStrength(this, habitat);
                        if (CheckSystemVisible(habitat.SystemIndex))
                        {
                            num2 = _Galaxy.DetermineDefendingStrength(habitat, otherEmpire);
                        }
                        ShipGroupList shipGroupList = GenerateOrderedFleetsForTarget(habitat.Xpos, habitat.Ypos, includeSmallFleets: false);
                        if (shipGroupList.Count <= 0)
                        {
                            continue;
                        }
                        int num4 = 0;
                        int num5 = 0;
                        for (int j = 0; j < shipGroupList.Count; j++)
                        {
                            ShipGroup shipGroup = shipGroupList[j];
                            if (shipGroup != null && shipGroup.LeadShip != null && shipGroup.LeadShip.IsAutoControlled && shipGroup.Ships.Count >= 10 && shipGroup.Posture == FleetPosture.Attack && shipGroup.AttackPoint == null && shipGroup.TotalTroopAttackStrength >= num3 / 2)
                            {
                                bool flag = false;
                                if (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup.Mission.Priority == BuiltObjectMissionPriority.Low)
                                {
                                    flag = true;
                                }
                                ResourceList requiredFuel = DetermineFuelRequiredForFleet(shipGroup);
                                StellarObject stellarObject = DecideBestFleetRefuelPoint(habitat.Xpos, habitat.Ypos, this, requiredFuel, otherEmpire);
                                if (stellarObject != null && shipGroup.CheckFleetTargetWithinFuelRangeAndRefuel(stellarObject.Xpos, stellarObject.Ypos, 0.0))
                                {
                                    double num6 = shipGroup.MaximumRange();
                                    double num7 = _Galaxy.CalculateDistance(stellarObject.Xpos, stellarObject.Ypos, habitat.Xpos, habitat.Ypos);
                                    if (num7 < num6 * 0.45)
                                    {
                                        shipGroup.GatherPoint = stellarObject;
                                        shipGroup.AttackPoint = habitat;
                                        shipGroup.PostureRangeSquared = 2304000000.0;
                                        if (flag && stellarObject != null)
                                        {
                                            shipGroup.AssignMission(BuiltObjectMissionType.Refuel, stellarObject, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                                        }
                                        num4 += shipGroup.TotalOverallStrengthFactor;
                                        num5 += shipGroup.TotalTroopAttackStrength;
                                        num++;
                                    }
                                }
                            }
                            if (num4 >= num2 && num5 >= num3)
                            {
                                break;
                            }
                        }
                    }
                    for (int k = 0; k < diplomaticRelation.WarObjectiveBases.Count; k++)
                    {
                        BuiltObject builtObject = diplomaticRelation.WarObjectiveBases[k];
                        if (builtObject == null)
                        {
                            continue;
                        }
                        int val = builtObject.CalculateOverallStrengthFactor();
                        if (IsObjectVisibleToThisEmpire(builtObject))
                        {
                            val = _Galaxy.DetermineDefendingStrength(builtObject, otherEmpire);
                        }
                        val = Math.Max(1, val);
                        int num8 = 0;
                        ShipGroupList shipGroupList2 = GenerateOrderedFleetsForTarget(builtObject.Xpos, builtObject.Ypos, includeSmallFleets: true);
                        if (shipGroupList2.Count <= 0)
                        {
                            continue;
                        }
                        int num9 = 0;
                        int num10 = 0;
                        for (int l = 0; l < shipGroupList2.Count; l++)
                        {
                            ShipGroup shipGroup2 = shipGroupList2[l];
                            if (shipGroup2 != null && shipGroup2.LeadShip != null && shipGroup2.LeadShip.IsAutoControlled && shipGroup2.Posture == FleetPosture.Attack && shipGroup2.AttackPoint == null)
                            {
                                bool flag2 = false;
                                if (shipGroup2.Mission == null || shipGroup2.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup2.Mission.Priority == BuiltObjectMissionPriority.Low)
                                {
                                    flag2 = true;
                                }
                                ResourceList requiredFuel2 = DetermineFuelRequiredForFleet(shipGroup2);
                                StellarObject stellarObject2 = DecideBestFleetRefuelPoint(builtObject.Xpos, builtObject.Ypos, this, requiredFuel2, otherEmpire);
                                if (stellarObject2 != null && shipGroup2.CheckFleetTargetWithinFuelRangeAndRefuel(stellarObject2.Xpos, stellarObject2.Ypos, 0.0))
                                {
                                    double num11 = shipGroup2.MaximumRange();
                                    double num12 = _Galaxy.CalculateDistance(stellarObject2.Xpos, stellarObject2.Ypos, builtObject.Xpos, builtObject.Ypos);
                                    if (num12 < num11 * 0.45)
                                    {
                                        shipGroup2.GatherPoint = stellarObject2;
                                        shipGroup2.AttackPoint = builtObject;
                                        shipGroup2.PostureRangeSquared = 2304000000.0;
                                        if (flag2 && stellarObject2 != null)
                                        {
                                            shipGroup2.AssignMission(BuiltObjectMissionType.Refuel, stellarObject2, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                                        }
                                        num9 += shipGroup2.TotalOverallStrengthFactor;
                                        num10 += shipGroup2.TotalTroopAttackStrength;
                                        num++;
                                    }
                                }
                            }
                            if (num9 >= val && num10 >= num8)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            return num;
        }

        public StellarObject SelectFleetWarAttackTarget(ShipGroup fleet, Empire otherEmpire, out bool waypointing)
        {
            bool attackPointClearedForReassignment = false;
            return SelectFleetWarAttackTarget(fleet, otherEmpire, out waypointing, out attackPointClearedForReassignment);
        }

        public StellarObject SelectFleetWarAttackTarget(ShipGroup fleet, Empire otherEmpire, out bool waypointing, out bool attackPointClearedForReassignment)
        {
            waypointing = false;
            attackPointClearedForReassignment = false;
            if (fleet.LeadShip != null && fleet.LeadShip.IsAutoControlled && fleet.Posture == FleetPosture.Attack)
            {
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
                if (diplomaticRelation != null && diplomaticRelation.WarObjective == WarObjective.CaptureObjectives)
                {
                    if (fleet.AttackPoint == null)
                    {
                        if ((fleet.ShipTargetAmount >= 10 || fleet.Ships.Count >= 10) && fleet.TotalTroopAttackStrength > 0)
                        {
                            Habitat[] array = _Galaxy.SortHabitatsByDistanceThreadsafe(fleet.LeadShip.Xpos, fleet.LeadShip.Ypos, diplomaticRelation.WarObjectiveColonies);
                            foreach (Habitat habitat in array)
                            {
                                if (!CheckWarObjectiveStillValid(habitat, otherEmpire))
                                {
                                    continue;
                                }
                                bool fleetAlreadyAssigned = false;
                                if (!CheckTargetRequiresMoreAttackFleets(habitat, otherEmpire, out fleetAlreadyAssigned) || !CheckFleetCanAttackTarget(fleet, habitat, fleetAlreadyAssigned))
                                {
                                    continue;
                                }
                                if (fleet.CheckFleetTargetWithinFuelRangeAndRefuel(habitat.Xpos, habitat.Ypos, 0.0))
                                {
                                    fleet.AttackPoint = habitat;
                                    return habitat;
                                }
                                ResourceList requiredFuel = DetermineFuelRequiredForFleet(fleet);
                                StellarObject stellarObject = DecideBestFleetRefuelPoint(habitat.Xpos, habitat.Ypos, this, requiredFuel, otherEmpire);
                                if (stellarObject != null)
                                {
                                    double num = fleet.MaximumRange();
                                    double num2 = _Galaxy.CalculateDistance(stellarObject.Xpos, stellarObject.Ypos, habitat.Xpos, habitat.Ypos);
                                    if (num2 < num * 0.45 && fleet.CheckFleetTargetWithinFuelRange(stellarObject.Xpos, stellarObject.Ypos, 0.1))
                                    {
                                        waypointing = true;
                                        fleet.GatherPoint = stellarObject;
                                        fleet.AttackPoint = habitat;
                                        fleet.PostureRangeSquared = 2304000000.0;
                                        fleet.AssignMission(BuiltObjectMissionType.Refuel, stellarObject, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                                        return habitat;
                                    }
                                }
                            }
                        }
                        BuiltObject[] array2 = _Galaxy.SortBuiltObjectsByDistanceThreadsafe(fleet.LeadShip.Xpos, fleet.LeadShip.Ypos, diplomaticRelation.WarObjectiveBases);
                        foreach (BuiltObject builtObject in array2)
                        {
                            if (!CheckWarObjectiveStillValid(builtObject, otherEmpire))
                            {
                                continue;
                            }
                            bool fleetAlreadyAssigned2 = false;
                            if (!CheckTargetRequiresMoreAttackFleets(builtObject, otherEmpire, out fleetAlreadyAssigned2) || !CheckFleetCanAttackTarget(fleet, builtObject, fleetAlreadyAssigned2))
                            {
                                continue;
                            }
                            if (fleet.CheckFleetTargetWithinFuelRangeAndRefuel(builtObject.Xpos, builtObject.Ypos, 0.0))
                            {
                                fleet.AttackPoint = builtObject;
                                return builtObject;
                            }
                            ResourceList requiredFuel2 = DetermineFuelRequiredForFleet(fleet);
                            StellarObject stellarObject2 = DecideBestFleetRefuelPoint(builtObject.Xpos, builtObject.Ypos, this, requiredFuel2, otherEmpire);
                            if (stellarObject2 != null)
                            {
                                double num3 = fleet.MaximumRange();
                                double num4 = _Galaxy.CalculateDistance(stellarObject2.Xpos, stellarObject2.Ypos, builtObject.Xpos, builtObject.Ypos);
                                if (num4 < num3 * 0.45 && fleet.CheckFleetTargetWithinFuelRange(stellarObject2.Xpos, stellarObject2.Ypos, 0.1))
                                {
                                    waypointing = true;
                                    fleet.GatherPoint = stellarObject2;
                                    fleet.AttackPoint = builtObject;
                                    fleet.PostureRangeSquared = 2304000000.0;
                                    fleet.AssignMission(BuiltObjectMissionType.Refuel, stellarObject2, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                                    return builtObject;
                                }
                            }
                        }
                        fleet.AttackPoint = null;
                    }
                    else if (CheckWarObjectiveStillValid(fleet.AttackPoint, otherEmpire))
                    {
                        if (CheckFleetCanAttackTarget(fleet, fleet.AttackPoint))
                        {
                            return fleet.AttackPoint;
                        }
                        fleet.AttackPoint = null;
                        attackPointClearedForReassignment = true;
                    }
                    else
                    {
                        Habitat[] array3 = new Habitat[0];
                        if ((fleet.ShipTargetAmount >= 10 || fleet.Ships.Count >= 10) && fleet.TotalTroopAttackStrength > 0)
                        {
                            array3 = _Galaxy.SortHabitatsByDistanceThreadsafe(fleet.LeadShip.Xpos, fleet.LeadShip.Ypos, diplomaticRelation.WarObjectiveColonies);
                        }
                        if ((fleet.ShipTargetAmount >= 10 || fleet.Ships.Count >= 10) && fleet.TotalTroopAttackStrength > 0)
                        {
                            foreach (Habitat habitat2 in array3)
                            {
                                if (!CheckWarObjectiveStillValid(habitat2, otherEmpire))
                                {
                                    continue;
                                }
                                double num5 = _Galaxy.CalculateDistanceSquared(fleet.AttackPoint.Xpos, fleet.AttackPoint.Ypos, habitat2.Xpos, habitat2.Ypos);
                                if (num5 <= fleet.PostureRangeSquared)
                                {
                                    bool fleetAlreadyAssigned3 = false;
                                    if (CheckTargetRequiresMoreAttackFleets(habitat2, otherEmpire, out fleetAlreadyAssigned3) && CheckFleetCanAttackTarget(fleet, habitat2, fleetAlreadyAssigned3) && fleet.CheckFleetTargetWithinFuelRangeAndRefuel(habitat2.Xpos, habitat2.Ypos, 0.0))
                                    {
                                        return habitat2;
                                    }
                                }
                            }
                        }
                        BuiltObject[] array4 = _Galaxy.SortBuiltObjectsByDistanceThreadsafe(fleet.LeadShip.Xpos, fleet.LeadShip.Ypos, diplomaticRelation.WarObjectiveBases);
                        foreach (BuiltObject builtObject2 in array4)
                        {
                            if (!CheckWarObjectiveStillValid(builtObject2, otherEmpire))
                            {
                                continue;
                            }
                            double num6 = _Galaxy.CalculateDistanceSquared(fleet.AttackPoint.Xpos, fleet.AttackPoint.Ypos, builtObject2.Xpos, builtObject2.Ypos);
                            if (num6 <= fleet.PostureRangeSquared)
                            {
                                bool fleetAlreadyAssigned4 = false;
                                if (CheckTargetRequiresMoreAttackFleets(builtObject2, otherEmpire, out fleetAlreadyAssigned4) && CheckFleetCanAttackTarget(fleet, builtObject2, fleetAlreadyAssigned4) && fleet.CheckFleetTargetWithinFuelRangeAndRefuel(builtObject2.Xpos, builtObject2.Ypos, 0.0))
                                {
                                    return builtObject2;
                                }
                            }
                        }
                        if ((fleet.ShipTargetAmount >= 10 || fleet.Ships.Count >= 10) && fleet.TotalTroopAttackStrength > 0)
                        {
                            foreach (Habitat habitat3 in array3)
                            {
                                if (CheckWarObjectiveStillValid(habitat3, otherEmpire))
                                {
                                    bool fleetAlreadyAssigned5 = false;
                                    if (CheckTargetRequiresMoreAttackFleets(habitat3, otherEmpire, out fleetAlreadyAssigned5) && CheckFleetCanAttackTarget(fleet, habitat3, fleetAlreadyAssigned5) && fleet.CheckFleetTargetWithinFuelRangeAndRefuel(habitat3.Xpos, habitat3.Ypos, 0.0))
                                    {
                                        fleet.AttackPoint = habitat3;
                                        return habitat3;
                                    }
                                }
                            }
                        }
                        foreach (BuiltObject builtObject3 in array4)
                        {
                            if (CheckWarObjectiveStillValid(builtObject3, otherEmpire))
                            {
                                bool fleetAlreadyAssigned6 = false;
                                if (CheckTargetRequiresMoreAttackFleets(builtObject3, otherEmpire, out fleetAlreadyAssigned6) && CheckFleetCanAttackTarget(fleet, builtObject3, fleetAlreadyAssigned6) && fleet.CheckFleetTargetWithinFuelRangeAndRefuel(builtObject3.Xpos, builtObject3.Ypos, 0.0))
                                {
                                    fleet.AttackPoint = builtObject3;
                                    return builtObject3;
                                }
                            }
                        }
                        fleet.AttackPoint = null;
                    }
                }
            }
            return null;
        }

        private bool CheckFleetCanAttackTarget(ShipGroup fleet, StellarObject target)
        {
            return CheckFleetCanAttackTarget(fleet, target, supportingOtherAttack: false);
        }

        private bool CheckFleetCanAttackTarget(ShipGroup fleet, StellarObject target, bool supportingOtherAttack)
        {
            double num = 0.85;
            if (supportingOtherAttack)
            {
                num = 0.35;
            }
            int troopStrength = 0;
            int num2 = CalculateDefendingStrength(target, out troopStrength);
            double num3 = (double)fleet.TotalOverallStrengthFactor / (double)num2;
            if (num3 < num)
            {
                return false;
            }
            if (target is Habitat)
            {
                double num4 = 1.2;
                if (supportingOtherAttack)
                {
                    num4 = 0.5;
                }
                int totalTroopAttackStrength = fleet.TotalTroopAttackStrength;
                if (totalTroopAttackStrength > (int)((double)troopStrength * num4))
                {
                    return true;
                }
                return false;
            }
            return true;
        }

        public int CalculateDefendingStrength(StellarObject target)
        {
            int troopStrength = 0;
            return CalculateDefendingStrength(target, out troopStrength);
        }

        public int CalculateDefendingStrength(StellarObject target, out int troopStrength)
        {
            int result = 0;
            troopStrength = 0;
            if (target is Habitat)
            {
                Habitat habitat = (Habitat)target;
                result = habitat.EstimatedDefensiveForceRequired(atWar: true);
                troopStrength = Galaxy.DetermineRequiredTroopStrength(this, habitat);
                if (CheckSystemVisible(habitat.SystemIndex))
                {
                    result = _Galaxy.DetermineDefendingStrength(habitat, target.Empire);
                }
                else if (CheckSystemExplored(habitat.SystemIndex))
                {
                    result = _Galaxy.DetermineBaseStrengthAtHabitat(habitat, target.Empire);
                }
            }
            else if (target is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)target;
                result = builtObject.CalculateOverallStrengthFactor();
                troopStrength = 0;
                if (IsObjectVisibleToThisEmpire(builtObject))
                {
                    result = _Galaxy.DetermineDefendingStrength(builtObject, target.Empire);
                }
                result = Math.Max(1, result);
            }
            else if (target is Creature)
            {
                Creature creature = (Creature)target;
                result = creature.AttackStrength * 5;
            }
            return result;
        }

        private bool CheckTargetRequiresMoreAttackFleets(StellarObject target, Empire targetEmpire, out bool fleetAlreadyAssigned)
        {
            fleetAlreadyAssigned = false;
            int troopStrengthAssigned = 0;
            int num = CountFleetAttackStrengthAssignedToTarget(target, out troopStrengthAssigned);
            if (num > 0)
            {
                fleetAlreadyAssigned = true;
            }
            int troopStrength = 0;
            int num2 = CalculateDefendingStrength(target, out troopStrength);
            if (num < num2 || troopStrengthAssigned < (int)((double)troopStrength * 1.7))
            {
                return true;
            }
            return false;
        }

        private bool CheckWarObjectiveStillValid(StellarObject target, Empire targetEmpire)
        {
            if (target == null || target.HasBeenDestroyed || target.Empire != targetEmpire)
            {
                return false;
            }
            return true;
        }

        private bool CheckReadyForWar(Empire otherEmpire)
        {
            bool result = true;
            if (!CheckEmpireHasHyperDriveTech(this))
            {
                return false;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            int num = 0;
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup != null && shipGroup.Posture == FleetPosture.Attack && shipGroup.Ships.Count > 0)
                {
                    num++;
                }
            }
            if (num <= 0)
            {
                return false;
            }
            switch (diplomaticRelation.WarObjective)
            {
                case WarObjective.CaptureObjectives:
                    {
                        for (int j = 0; j < ShipGroups.Count; j++)
                        {
                            ShipGroup shipGroup2 = ShipGroups[j];
                            if (shipGroup2.Posture != 0 || shipGroup2.AttackPoint == null || shipGroup2.LeadShip == null || !shipGroup2.LeadShip.IsAutoControlled || shipGroup2.GatherPoint == null)
                            {
                                continue;
                            }
                            if (shipGroup2.Mission != null && shipGroup2.Mission.Type == BuiltObjectMissionType.Refuel)
                            {
                                result = false;
                            }
                            else if (shipGroup2.Mission == null || shipGroup2.Mission.Type == BuiltObjectMissionType.Undefined)
                            {
                                double num2 = _Galaxy.CalculateDistance(shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos, shipGroup2.GatherPoint.Xpos, shipGroup2.GatherPoint.Ypos);
                                int fleetFuelCapacity = 0;
                                ResourceList resourceList = DetermineFuelRequiredForFleet(shipGroup2, out fleetFuelCapacity);
                                int num3 = 0;
                                for (int k = 0; k < resourceList.Count; k++)
                                {
                                    num3 += (int)resourceList[k].SortTag;
                                }
                                double num4 = (double)(fleetFuelCapacity - num3) / (double)fleetFuelCapacity;
                                if (num2 > 48000.0 && shipGroup2.GatherPoint != null)
                                {
                                    shipGroup2.AssignMission(BuiltObjectMissionType.Refuel, shipGroup2.GatherPoint, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                                    result = false;
                                }
                                else if ((!(num2 <= 48000.0) || !(num4 > 0.75)) && shipGroup2.GatherPoint != null)
                                {
                                    shipGroup2.AssignMission(BuiltObjectMissionType.Refuel, shipGroup2.GatherPoint, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                                    result = false;
                                }
                            }
                            else if (shipGroup2.Mission != null && shipGroup2.Mission.Priority == BuiltObjectMissionPriority.Low && shipGroup2.Mission.Type == BuiltObjectMissionType.Move && shipGroup2.Mission.Target == shipGroup2.GatherPoint)
                            {
                                result = false;
                            }
                            else if (shipGroup2.Mission != null && shipGroup2.Mission.Type == BuiltObjectMissionType.Blockade && shipGroup2.Mission.Target != null)
                            {
                                Point point = shipGroup2.Mission.ResolveTargetCoordinates(shipGroup2.Mission);
                                double num5 = _Galaxy.CalculateDistance(shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos, point.X, point.Y);
                                if (num5 > 48000.0)
                                {
                                    result = false;
                                }
                            }
                            else if (shipGroup2.GatherPoint != null && this != _Galaxy.PlayerEmpire)
                            {
                                result = false;
                            }
                        }
                        break;
                    }
                default:
                    result = false;
                    break;
                case WarObjective.TotalConquest:
                    break;
            }
            return result;
        }

        private void StartWar(Empire otherEmpire)
        {
            if (_ControlDiplomacyOffense != 0)
            {
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyOffense, ref refusalCount, GenerateAutomationMessageWarTradeSanctions(otherEmpire, DiplomaticRelationType.War), otherEmpire, AdvisorMessageType.WarTradeSanctions, DiplomaticRelationType.War, null))
                {
                    DeclareWar(otherEmpire);
                }
            }
        }

        private void SubjugateRequest(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation == null || diplomaticRelation.Type != DiplomaticRelationType.War)
            {
                return;
            }
            long num = CalculateNextAllowableProposalDate(diplomaticRelation);
            if (_Galaxy.CurrentStarDate >= num)
            {
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.SubjugatedDominion, this, this, otherEmpire, _Galaxy.CurrentStarDate, diplomaticRelation.SupplyRestrictedResources);
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyOffense, ref refusalCount, GenerateAutomationMessageWarTradeSanctions(otherEmpire, DiplomaticRelationType.SubjugatedDominion), otherEmpire, AdvisorMessageType.WarTradeSanctions, DiplomaticRelationType.SubjugatedDominion, null))
                {
                    otherEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation2);
                    int ourPotencyVersusThem = DetermineRelativeStrength(MilitaryPotency, otherEmpire);
                    string description = GenerateMessageDescription(diplomaticRelation, DiplomaticRelationType.SubjugatedDominion, ourPotencyVersusThem);
                    diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.ProposeDiplomaticRelation, DiplomaticRelationType.None, description, "");
                }
            }
        }

        private void EndWarRequest(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation == null || diplomaticRelation.Type != DiplomaticRelationType.War)
            {
                return;
            }
            long num = CalculateNextAllowableProposalDate(diplomaticRelation);
            if (_Galaxy.CurrentStarDate >= num)
            {
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.None, this, this, otherEmpire, _Galaxy.CurrentStarDate, diplomaticRelation.SupplyRestrictedResources);
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyOffense, ref refusalCount, GenerateAutomationMessageWarTradeSanctions(otherEmpire, DiplomaticRelationType.None), otherEmpire, AdvisorMessageType.WarTradeSanctions, DiplomaticRelationType.None, null))
                {
                    otherEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation2);
                    string description = GenerateMessageDescriptionEndWarRequest();
                    diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.ProposeDiplomaticRelation, DiplomaticRelationType.None, description, "");
                }
            }
        }

        private void StartTradeSanctionsIfTimePassed(Empire otherEmpire)
        {
            if (_ControlDiplomacyOffense != 0)
            {
                long currentStarDate = _Galaxy.CurrentStarDate;
                DiplomaticRelation relation = ObtainDiplomaticRelation(otherEmpire);
                long num = CalculateNextAllowableProposalDate(relation);
                if (currentStarDate >= num)
                {
                    StartTradeSanctions(otherEmpire);
                }
            }
        }

        private void StartTradeSanctions(Empire otherEmpire)
        {
            if (_ControlDiplomacyOffense == AutomationLevel.Manual)
            {
                return;
            }
            EmpireEvaluation empireEvaluation = otherEmpire.ObtainEmpireEvaluation(this);
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation.Type != DiplomaticRelationType.War && diplomaticRelation.Type != DiplomaticRelationType.SubjugatedDominion)
            {
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyOffense, ref refusalCount, GenerateAutomationMessageWarTradeSanctions(otherEmpire, DiplomaticRelationType.TradeSanctions), otherEmpire, AdvisorMessageType.WarTradeSanctions, DiplomaticRelationType.TradeSanctions, null))
                {
                    ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.TradeSanctions);
                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - 20.0;
                    diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                    int ourPotencyVersusThem = DetermineRelativeStrength(MilitaryPotency, otherEmpire);
                    string description = GenerateMessageDescription(diplomaticRelation, DiplomaticRelationType.TradeSanctions, ourPotencyVersusThem);
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.TradeSanctions, description);
                }
            }
        }

        private void EndTradeSanctionsIfTimePassed(Empire otherEmpire)
        {
            if (_ControlDiplomacyOffense != 0)
            {
                long currentStarDate = _Galaxy.CurrentStarDate;
                DiplomaticRelation relation = ObtainDiplomaticRelation(otherEmpire);
                long num = CalculateNextAllowableProposalDate(relation);
                if (currentStarDate >= num)
                {
                    EndTradeSanctions(otherEmpire);
                }
            }
        }

        private void EndTradeSanctions(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions && diplomaticRelation.Initiator == this)
            {
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyOffense, ref refusalCount, GenerateAutomationMessageWarTradeSanctions(otherEmpire, DiplomaticRelationType.None), otherEmpire, AdvisorMessageType.WarTradeSanctions, DiplomaticRelationType.None, null))
                {
                    ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                    CancelBlockades(otherEmpire);
                    otherEmpire.CancelBlockades(this);
                    diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                    string description = GenerateMessageDescriptionLiftTradeSanctions();
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, description, Galaxy.ResolveDescription(DiplomaticRelationType.TradeSanctions));
                }
            }
        }

        private void EndSubjugation(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion && diplomaticRelation.Initiator == this)
            {
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageTreaty(otherEmpire, DiplomaticRelationType.None), otherEmpire, AdvisorMessageType.TreatyOffer, DiplomaticRelationType.None, null))
                {
                    ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                    diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                    string description = GenerateMessageDescriptionEndSubjugation();
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, description, Galaxy.ResolveDescription(DiplomaticRelationType.SubjugatedDominion));
                }
            }
        }

        private void CancelTreatiesIfTimePassed(Empire otherEmpire)
        {
            if (_ControlDiplomacyOffense != 0)
            {
                long currentStarDate = _Galaxy.CurrentStarDate;
                DiplomaticRelation relation = ObtainDiplomaticRelation(otherEmpire);
                long num = CalculateNextAllowableProposalDate(relation);
                if (currentStarDate >= num)
                {
                    CancelTreaties(otherEmpire);
                }
            }
        }

        private void CancelTreaties(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation.Type != DiplomaticRelationType.FreeTradeAgreement && diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation.Type != DiplomaticRelationType.Protectorate)
            {
                return;
            }
            int refusalCount = 0;
            if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageTreaty(otherEmpire, DiplomaticRelationType.None), otherEmpire, AdvisorMessageType.TreatyOffer, DiplomaticRelationType.None, null))
            {
                if (diplomaticRelation.Type != 0)
                {
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, TextResolver.GetText("We cancel our treaty with you."), Galaxy.ResolveDescription(diplomaticRelation.Type));
                }
                diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
            }
        }

        private void CheckCancelMilitaryRefueling(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation.MilitaryRefuelingToOther && diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation.Type != DiplomaticRelationType.Protectorate && CheckTaskAuthorized(_ControlDiplomacyTreaties, GenerateAutomationMessageMilitaryRefueling(diplomaticRelation.OtherEmpire, refuel: false), diplomaticRelation.OtherEmpire, AdvisorMessageType.CancelMilitaryRefueling))
            {
                diplomaticRelation.MilitaryRefuelingToOther = false;
                string text = TextResolver.GetText("Military Refueling Blocked");
                SendMessageToEmpire(otherEmpire, EmpireMessageType.MilitaryRefuelingBlocked, this, text);
            }
        }

        private void CheckCancelMiningRights(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation.MiningRightsToOther && CheckTaskAuthorized(_ControlDiplomacyTreaties, GenerateAutomationMessageMiningRights(diplomaticRelation.OtherEmpire, allowMining: false), diplomaticRelation.OtherEmpire, AdvisorMessageType.CancelMiningRights))
            {
                diplomaticRelation.MiningRightsToOther = false;
                string text = TextResolver.GetText("Mining Rights Blocked");
                SendMessageToEmpire(otherEmpire, EmpireMessageType.MiningRightsBlocked, this, text);
            }
        }

        private void CheckCancelRestrictedResourceTrading(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (diplomaticRelation.SupplyRestrictedResources && CheckTaskAuthorized(_ControlDiplomacyTreaties, GenerateAutomationMessageTradeRestrictedResources(diplomaticRelation.OtherEmpire, trade: false), diplomaticRelation.OtherEmpire, AdvisorMessageType.DisallowTradeRestrictedResources))
            {
                diplomaticRelation.SupplyRestrictedResources = false;
                string description = string.Format(TextResolver.GetText("Trade Restricted Resource Refuse EMPIRE"), Name);
                SendMessageToEmpire(otherEmpire, EmpireMessageType.RestrictedResourceTradingBlocked, this, description);
            }
        }

        private void GiveGiftSmallWhenSufficientTimePassed(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            long num = diplomaticRelation.LastGiftDate + Galaxy.IdealTimeBetweenGifts;
            if (_Galaxy.CurrentStarDate < num)
            {
                return;
            }
            EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.GiveGift, null);
            double num2 = StateMoney;
            if (double.IsInfinity(num2) || double.IsNaN(num2))
            {
                num2 = 0.0;
            }
            if (!(num2 > 8400.0))
            {
                return;
            }
            int num3 = Math.Max(105, (int)(num2 / 40.0));
            if (num3 <= 100)
            {
                return;
            }
            double val = Galaxy.Rnd.Next(100, num3);
            val = Math.Min(val, Policy.DiplomacySendGiftsUpToAmount);
            if (val > 0.0)
            {
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyGifts, ref refusalCount, GenerateAutomationMessageDiplomaticGift(otherEmpire, val), otherEmpire, AdvisorMessageType.DiplomaticGift, val, null))
                {
                    empireMessage.Money = (int)val;
                    StateMoney -= val;
                    PirateEconomy.PerformExpense(val, PirateExpenseType.Undefined, _Galaxy.CurrentStarDate);
                    empireMessage.Description = string.Format(TextResolver.GetText("Please accept our gift of X credits"), val.ToString("###,###,###,##0"));
                    SendMessageToEmpire(empireMessage, otherEmpire);
                }
            }
        }

        private void GiveGiftWhenSufficientTimePassed(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            long num = diplomaticRelation.LastGiftDate + Galaxy.IdealTimeBetweenGifts;
            if (_Galaxy.CurrentStarDate < num)
            {
                return;
            }
            EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.GiveGift, null);
            double num2 = StateMoney;
            if (double.IsInfinity(num2) || double.IsNaN(num2))
            {
                num2 = 0.0;
            }
            if (!(num2 > 8400.0))
            {
                return;
            }
            int num3 = Math.Max(105, (int)(num2 / 10.0));
            if (num3 <= 100)
            {
                return;
            }
            double val = Galaxy.Rnd.Next(100, num3);
            val = Math.Min(val, Policy.DiplomacySendGiftsUpToAmount);
            if (val > 0.0)
            {
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyGifts, ref refusalCount, GenerateAutomationMessageDiplomaticGift(otherEmpire, val), otherEmpire, AdvisorMessageType.DiplomaticGift, val, null))
                {
                    empireMessage.Money = (int)val;
                    StateMoney -= val;
                    PirateEconomy.PerformExpense(val, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                    empireMessage.Description = string.Format(TextResolver.GetText("Please accept our gift of X credits"), val.ToString("###,###,###,##0"));
                    SendMessageToEmpire(empireMessage, otherEmpire);
                }
            }
        }

        private void OfferFreeTrade(Empire otherEmpire)
        {
            if (otherEmpire.Reclusive || (!CheckEmpireHasHyperDriveTech(this) && !CheckEmpireHasHyperDriveTech(otherEmpire)))
            {
                return;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            long num = CalculateNextAllowableProposalDate(diplomaticRelation);
            if (_Galaxy.CurrentStarDate >= num)
            {
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(DiplomaticRelationType.FreeTradeAgreement, this, this, otherEmpire, _Galaxy.CurrentStarDate, diplomaticRelation.SupplyRestrictedResources);
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageTreaty(otherEmpire, DiplomaticRelationType.FreeTradeAgreement), otherEmpire, AdvisorMessageType.TreatyOffer, DiplomaticRelationType.FreeTradeAgreement, null))
                {
                    otherEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation2);
                    int ourPotencyVersusThem = DetermineRelativeStrength(MilitaryPotency, otherEmpire);
                    string description = GenerateMessageDescription(diplomaticRelation, DiplomaticRelationType.FreeTradeAgreement, ourPotencyVersusThem);
                    diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.ProposeDiplomaticRelation, DiplomaticRelationType.FreeTradeAgreement, description);
                }
            }
        }

        private void OfferMutualDefense(Empire otherEmpire)
        {
            if (otherEmpire.Reclusive || (!CheckEmpireHasHyperDriveTech(this) && !CheckEmpireHasHyperDriveTech(otherEmpire)))
            {
                return;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            long num = CalculateNextAllowableProposalDate(diplomaticRelation);
            if (_Galaxy.CurrentStarDate >= num)
            {
                DiplomaticRelationType diplomaticRelationType = DiplomaticRelationType.MutualDefensePact;
                double num2 = (double)TotalColonyStrategicValue / (double)otherEmpire.TotalColonyStrategicValue;
                if (num2 > 4.0)
                {
                    diplomaticRelationType = DiplomaticRelationType.Protectorate;
                }
                DiplomaticRelation diplomaticRelation2 = new DiplomaticRelation(diplomaticRelationType, this, this, otherEmpire, _Galaxy.CurrentStarDate, diplomaticRelation.SupplyRestrictedResources);
                int refusalCount = 0;
                if (CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageTreaty(otherEmpire, diplomaticRelationType), otherEmpire, AdvisorMessageType.TreatyOffer, diplomaticRelationType, null))
                {
                    otherEmpire.ProposedDiplomaticRelations.Add(diplomaticRelation2);
                    int ourPotencyVersusThem = DetermineRelativeStrength(MilitaryPotency, otherEmpire);
                    string description = GenerateMessageDescription(diplomaticRelation, diplomaticRelationType, ourPotencyVersusThem);
                    diplomaticRelation.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
                    SendMessageToEmpire(otherEmpire, EmpireMessageType.ProposeDiplomaticRelation, diplomaticRelationType, description);
                }
            }
        }

        public void OfferMilitaryRefueling(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (!diplomaticRelation.MilitaryRefuelingToOther)
            {
                diplomaticRelation.MilitaryRefuelingToOther = true;
                string text = TextResolver.GetText("Military Refueling Allowed");
                SendMessageToEmpire(otherEmpire, EmpireMessageType.MilitaryRefuelingAllowed, this, text);
            }
        }

        public void OfferMiningRights(Empire otherEmpire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(otherEmpire);
            if (!diplomaticRelation.MiningRightsToOther)
            {
                diplomaticRelation.MiningRightsToOther = true;
                string text = TextResolver.GetText("Mining Rights Allowed");
                SendMessageToEmpire(otherEmpire, EmpireMessageType.MiningRightsAllowed, this, text);
            }
        }

        public void ClearInvalidDiplomaticRelations()
        {
            DiplomaticRelationList diplomaticRelationList = new DiplomaticRelationList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation != null && (diplomaticRelation.OtherEmpire == null || diplomaticRelation.OtherEmpire == this || !diplomaticRelation.OtherEmpire.Active))
                {
                    diplomaticRelationList.Add(diplomaticRelation);
                }
            }
            for (int j = 0; j < diplomaticRelationList.Count; j++)
            {
                DiplomaticRelations.Remove(diplomaticRelationList[j]);
            }
            List<PirateRelation> list = new PirateRelationList();
            for (int k = 0; k < PirateRelations.Count; k++)
            {
                PirateRelation pirateRelation = PirateRelations[k];
                if (pirateRelation != null && (pirateRelation.OtherEmpire == null || pirateRelation.OtherEmpire == this || !pirateRelation.OtherEmpire.Active))
                {
                    list.Add(pirateRelation);
                }
            }
            for (int l = 0; l < list.Count; l++)
            {
                PirateRelations.Remove(list[l]);
            }
        }

        private void EvaluatePoliticalSituation(TimeSpan timePassedSpan)
        {
            int refusalCount = 0;
            _ = string.Empty;
            _TopCompetitor = IdentifyTopCompetitor();
            _ = _Galaxy.IntoleranceLevel;
            double num = (double)Galaxy.CivilityRatingAnnualNeutralizationAmount * (timePassedSpan.TotalSeconds / (double)Galaxy.RealSecondsInGalacticYear);
            if (CivilityRating > 0.0)
            {
                CivilityRating -= num;
                if (CivilityRating < 0.0)
                {
                    CivilityRating = 0.0;
                }
            }
            else
            {
                CivilityRating += num;
                if (CivilityRating > 0.0)
                {
                    CivilityRating = 0.0;
                }
            }
            DetermineFriendsAndEnemies(this, out var friends, out var closeFriends, out var _, out var _);
            HabitatList ourSystemStars = DetermineEmpireDominatedSystems(this, includeAllTerritory: true);
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == this)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
                {
                    continue;
                }
                int positiveRelationship = 0;
                int negativeRelationship = 0;
                CalculateRelationshipWithFriends(empire, friends, closeFriends, out positiveRelationship, out negativeRelationship);
                int systemCompetition = CalculateSystemCompetition(empire, ourSystemStars);
                int tradeVolume = CalculateTradeVolume(empire);
                int envy = CalculateEnvy(empire);
                int num2 = 0;
                if (empire.CheckEmpireSuppliesRestrictedResources())
                {
                    DiplomaticRelation diplomaticRelation2 = empire.ObtainDiplomaticRelation(this);
                    num2 = ((!diplomaticRelation2.SupplyRestrictedResources) ? (-5) : 10);
                }
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(empire);
                if (diplomaticRelation.Type != 0 && empireEvaluation.FirstContactPenalty < 0.0)
                {
                    double num3 = EmpireEvaluation.FirstContactPenaltyAnnualReductionAmount * (timePassedSpan.TotalSeconds / (double)Galaxy.RealSecondsInGalacticYear);
                    double val = empireEvaluation.FirstContactPenalty + num3;
                    val = (empireEvaluation.FirstContactPenalty = Math.Min(0.0, val));
                }
                double num4 = 1.0;
                int num5 = -100;
                CharacterList characterList = empire.Characters.FindCharactersAtLocationNotTransferring(Capital, CharacterRole.Ambassador);
                for (int j = 0; j < characterList.Count; j++)
                {
                    Character character = characterList[j];
                    if (character != null && character.Role == CharacterRole.Ambassador)
                    {
                        num5 = Math.Max(num5, character.Diplomacy);
                    }
                }
                if (num5 <= -100)
                {
                    num5 = 0;
                }
                num4 *= 1.0 + (double)num5 / 100.0;
                CharacterList charactersByRole = empire.Characters.GetCharactersByRole(CharacterRole.Leader);
                int num6 = -100;
                for (int k = 0; k < charactersByRole.Count; k++)
                {
                    Character character2 = charactersByRole[k];
                    if (character2 != null && character2.Role == CharacterRole.Leader && character2.Location != null && character2.Location is Habitat && empire.Capitals != null && empire.Capitals.Contains((Habitat)character2.Location))
                    {
                        num6 = Math.Max(num6, character2.Diplomacy);
                    }
                }
                if (num6 <= -100)
                {
                    num6 = 0;
                }
                num4 *= 1.0 + (double)num6 / 100.0;
                if (empireEvaluation.DiplomacyFactor == 1.0 || RaceEventType != RaceEventType.GrandPerformanceDiplomacyBonus)
                {
                    empireEvaluation.DiplomacyFactor = num4;
                }
                if (empire.DominantRace != null && empire.DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
                {
                    envy = 0;
                }
                empireEvaluation.RelationshipWithFriendsPositive = positiveRelationship;
                empireEvaluation.RelationshipWithFriendsNegative = negativeRelationship;
                empireEvaluation.SystemCompetition = systemCompetition;
                empireEvaluation.TradeVolume = tradeVolume;
                empireEvaluation.RestrictedResourceTrading = num2;
                empireEvaluation.Envy = envy;
                DiplomaticRelation diplomaticRelation3 = empire.ObtainDiplomaticRelation(this);
                if (diplomaticRelation3.MilitaryRefuelingToOther)
                {
                    empireEvaluation.MilitaryRefueling = 5;
                }
                else
                {
                    empireEvaluation.MilitaryRefueling = 0;
                }
                if (diplomaticRelation3.MiningRightsToOther)
                {
                    empireEvaluation.MiningRights = 4;
                }
                else
                {
                    empireEvaluation.MiningRights = 0;
                }
                if (GovernmentAttributes != null)
                {
                    empireEvaluation.CivilityRatingWeight = GovernmentAttributes.ImportanceOfOthersReputations;
                }
                else
                {
                    empireEvaluation.CivilityRatingWeight = 1.0;
                }
                empireEvaluation.Covetousness = 0;
                if (_EmpiresWithDesiredColonies.Count > 0 && _EmpiresWithDesiredColonies.Contains(empire))
                {
                    int num7 = _DesiredForeignColonies.TotalPriorityValueForEmpire(empire);
                    double num8 = (double)DominantRace.AggressionLevel / 100.0;
                    num8 *= num8;
                    num8 = Math.Max(num8, 1.0);
                    double num9 = 60.0 / num8;
                    empireEvaluation.Covetousness = (int)((double)num7 / num9 * -1.0);
                }
                empireEvaluation.Blockades = 0;
                BlockadeList blockadesAgainstEmpire = _Galaxy.Blockades.GetBlockadesAgainstEmpire(this);
                foreach (Blockade item in blockadesAgainstEmpire)
                {
                    if (item.Initiator == empire)
                    {
                        empireEvaluation.Blockades += Galaxy.BlockadeEmpireEvaluationValue;
                    }
                }
                double num10 = (double)Galaxy.IncidentEvaluationAnnualNeutralizationAmount * (timePassedSpan.TotalSeconds / (double)Galaxy.RealSecondsInGalacticYear);
                if (empireEvaluation.IncidentEvaluation > 0.0)
                {
                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - num10;
                    if (empireEvaluation.IncidentEvaluation < 0.0)
                    {
                        empireEvaluation.IncidentEvaluation = 0.0;
                    }
                }
                else
                {
                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw + num10;
                    if (empireEvaluation.IncidentEvaluation > 0.0)
                    {
                        empireEvaluation.IncidentEvaluation = 0.0;
                    }
                }
                if (GovernmentAttributes != null)
                {
                    empireEvaluation.GovernmentStyleAffinity = (int)GovernmentAttributes.NaturalAffinity(empire.GovernmentId);
                }
                else
                {
                    empireEvaluation.GovernmentStyleAffinity = 0;
                }
                double num11 = (double)empireEvaluation.SystemCompetition * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                if (empireEvaluation.SystemCompetition >= 0)
                {
                    num11 = 20.0 * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                }
                empireEvaluation.SystemCompetitionCumulative += num11;
                double num12 = (double)empireEvaluation.RelationshipWithFriendsPositive * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                if (empireEvaluation.RelationshipWithFriendsPositive <= 0)
                {
                    num12 = -5.0 * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                }
                empireEvaluation.RelationshipWithFriendsPositiveCumulative += num12;
                double num13 = (double)empireEvaluation.RelationshipWithFriendsNegative * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                if (empireEvaluation.RelationshipWithFriendsNegative >= 0)
                {
                    num13 = 5.0 * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                }
                empireEvaluation.RelationshipWithFriendsNegativeCumulative += num13;
                double num14 = (double)empireEvaluation.Covetousness * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                if (empireEvaluation.Covetousness >= 0 && empireEvaluation.CovetousnessCumulative < 0.0)
                {
                    num14 = 10.0 * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                }
                empireEvaluation.CovetousnessCumulative += num14;
                double num15 = (double)empireEvaluation.GovernmentStyleAffinity * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                if (empireEvaluation.GovernmentStyleAffinity == 0)
                {
                    if (empireEvaluation.GovernmentStyleAffinityCumulative > 0.0)
                    {
                        num15 = -10.0 * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                        if (empireEvaluation.GovernmentStyleAffinityCumulative - num15 < 0.0)
                        {
                            num15 = empireEvaluation.GovernmentStyleAffinityCumulative * -1.0;
                        }
                    }
                    else
                    {
                        num15 = 10.0 * timePassedSpan.TotalSeconds / Galaxy.EmpireEvaluationTrendingFactor;
                        if (empireEvaluation.GovernmentStyleAffinityCumulative + num15 > 0.0)
                        {
                            num15 = empireEvaluation.GovernmentStyleAffinityCumulative * -1.0;
                        }
                    }
                }
                empireEvaluation.GovernmentStyleAffinityCumulative += num15;
                double num16 = GovernmentAttributes.NaturalAffinity(empire.GovernmentId);
                if (empireEvaluation.GovernmentStyleAffinity > 0)
                {
                    if (num16 > 0.0)
                    {
                        empireEvaluation.GovernmentStyleAffinityCumulative = Math.Min(empireEvaluation.GovernmentStyleAffinityCumulative, num16);
                    }
                }
                else if (num16 < 0.0)
                {
                    empireEvaluation.GovernmentStyleAffinityCumulative = Math.Max(empireEvaluation.GovernmentStyleAffinityCumulative, num16);
                }
                if (empireEvaluation.RelationshipWithFriendsPositiveCumulative > 0.0)
                {
                    empireEvaluation.RelationshipWithFriendsPositiveCumulative = Math.Min(empireEvaluation.RelationshipWithFriendsPositiveCumulative, EmpireEvaluation.RelationshipWithFriendsCap);
                }
                else
                {
                    empireEvaluation.RelationshipWithFriendsPositiveCumulative = 0.0;
                }
                if (empireEvaluation.RelationshipWithFriendsNegativeCumulative < 0.0)
                {
                    empireEvaluation.RelationshipWithFriendsNegativeCumulative = Math.Max(empireEvaluation.RelationshipWithFriendsNegativeCumulative, EmpireEvaluation.RelationshipWithFriendsCap * -1.0);
                }
                else
                {
                    empireEvaluation.RelationshipWithFriendsNegativeCumulative = 0.0;
                }
                if (empireEvaluation.CovetousnessCumulative < 0.0)
                {
                    empireEvaluation.CovetousnessCumulative = Math.Max(empireEvaluation.CovetousnessCumulative, EmpireEvaluation.CovetousnessCap * -1.0);
                }
                else
                {
                    empireEvaluation.CovetousnessCumulative = 0.0;
                }
                if (empireEvaluation.OverallAttitudeWithoutSystemCompetition < 0)
                {
                    if (empireEvaluation.SystemCompetitionCumulative < 0.0)
                    {
                        empireEvaluation.SystemCompetitionCumulative = Math.Max(empireEvaluation.SystemCompetitionCumulative, EmpireEvaluation.SystemCompetitionCapExtended * -1.0);
                    }
                    else
                    {
                        empireEvaluation.SystemCompetitionCumulative = 0.0;
                    }
                }
                else if (empireEvaluation.SystemCompetitionCumulative < 0.0)
                {
                    empireEvaluation.SystemCompetitionCumulative = Math.Max(empireEvaluation.SystemCompetitionCumulative, EmpireEvaluation.SystemCompetitionCap * -1.0);
                }
                else
                {
                    empireEvaluation.SystemCompetitionCumulative = 0.0;
                }
            }
            int weightedMilitaryPotency = WeightedMilitaryPotency;
            int num17 = CountEmpiresWeDeclaredWarOn();
            CountEmpiresWhoDeclaredWarOnUs();
            int num18 = CountEmpiresWeDeclaredWarOnNonLocked();
            int num19 = CountEmpiresWhoDeclaredWarOnUsNonLocked();
            double num20 = 2.0 - (double)(DominantRace.AggressionLevel + DominantRace.LoyaltyLevel) / 200.0;
            if (num18 > 0 || num19 > 0)
            {
                double num21 = 0.0;
                double num22 = 0.0;
                if (num18 > 0)
                {
                    num21 = num20 * ((double)num18 / 1.0);
                }
                if (num19 > 0)
                {
                    num22 = num20 * ((double)num19 / 4.0);
                }
                num20 = num21 + num22;
                num20 *= GovernmentAttributes.WarWeariness;
                if (DominantRace != null && DominantRace.WarWearinessAttenuation > 0)
                {
                    double num23 = (double)DominantRace.WarWearinessAttenuation / 100.0;
                    num20 *= 1.0 - num23;
                }
            }
            else
            {
                num20 *= BaconEmpire.AdjustWarWearinessWhenAtPeace(this);
            }
            num20 *= timePassedSpan.TotalMilliseconds / 60000.0;
            num20 *= WarWearinessFactor;
            WarWearinessRaw += num20;
            if (WarWeariness < 0.0)
            {
                WarWearinessRaw = 0.0;
            }
            else if (WarWeariness > Galaxy.WarWearinessMaximum)
            {
                WarWearinessRaw = Galaxy.WarWearinessMaximum;
            }
            if (num17 == 0 && CivilityRating < 10.0)
            {
                double num24 = Galaxy.CivilityRatingAnnualRiseAmount * (timePassedSpan.TotalSeconds / (double)Galaxy.RealSecondsInGalacticYear);
                CivilityRating += num24;
            }
            for (int l = 0; l < EmpireEvaluations.Count; l++)
            {
                EmpireEvaluation empireEvaluation2 = EmpireEvaluations[l];
                DiplomaticRelationType diplomaticRelationType = DiplomaticRelationType.None;
                DiplomaticRelation diplomaticRelation4 = ObtainDiplomaticRelation(empireEvaluation2.Empire);
                if (diplomaticRelation4.Type == DiplomaticRelationType.NotMet)
                {
                    continue;
                }
                if (diplomaticRelation4 != null)
                {
                    diplomaticRelationType = diplomaticRelation4.Type;
                }
                int weightedMilitaryPotency2 = empireEvaluation2.Empire.WeightedMilitaryPotency;
                int num25 = 0;
                num25 = EvaluateMilitaryPotency(weightedMilitaryPotency, weightedMilitaryPotency2, empireEvaluation2.Empire);
                if (_ControlDiplomacyTreaties == AutomationLevel.Manual || Reclusive || diplomaticRelationType == DiplomaticRelationType.NotMet || diplomaticRelationType == DiplomaticRelationType.War)
                {
                    continue;
                }
                if (num25 == 1 || num25 == 0)
                {
                    foreach (Empire item2 in closeFriends)
                    {
                        DiplomaticRelation diplomaticRelation5 = empireEvaluation2.Empire.DiplomaticRelations[item2];
                        if (diplomaticRelation5 != null && !diplomaticRelation5.Locked && diplomaticRelation5.Type == DiplomaticRelationType.TradeSanctions && diplomaticRelation5.Initiator != item2 && Galaxy.Rnd.Next(0, 3) == 1 && CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageRequestLiftTradeSanctions(empireEvaluation2.Empire, item2), empireEvaluation2.Empire, AdvisorMessageType.RequestLiftTradeSanctionsOther, item2, null))
                        {
                            string description = GenerateMessageDescription(EmpireMessageType.RequestLiftTradeSanctions, num25, item2);
                            SendMessageToEmpire(empireEvaluation2.Empire, EmpireMessageType.RequestLiftTradeSanctions, item2, description);
                        }
                    }
                }
                if (num25 != 1)
                {
                    continue;
                }
                foreach (Empire item3 in friends)
                {
                    DiplomaticRelation diplomaticRelation6 = empireEvaluation2.Empire.DiplomaticRelations[item3];
                    if (diplomaticRelation6 != null && !diplomaticRelation6.Locked && diplomaticRelation6.Type == DiplomaticRelationType.TradeSanctions && diplomaticRelation6.Initiator != item3 && Galaxy.Rnd.Next(0, 3) == 1 && CheckTaskAuthorized(_ControlDiplomacyTreaties, ref refusalCount, GenerateAutomationMessageRequestLiftTradeSanctions(empireEvaluation2.Empire, item3), empireEvaluation2.Empire, AdvisorMessageType.RequestLiftTradeSanctionsOther, item3, null))
                    {
                        string description2 = GenerateMessageDescription(EmpireMessageType.RequestLiftTradeSanctions, num25, item3);
                        SendMessageToEmpire(empireEvaluation2.Empire, EmpireMessageType.RequestLiftTradeSanctions, item3, description2);
                    }
                }
            }
            if (_ControlDiplomacyTreaties != 0)
            {
                for (int m = 0; m < RecentSpyingEmpires.Count; m++)
                {
                    Empire empire2 = RecentSpyingEmpires[m];
                    DiplomaticRelation diplomaticRelation7 = ObtainDiplomaticRelation(empire2);
                    if (diplomaticRelation7.Type != DiplomaticRelationType.War)
                    {
                        EmpireEvaluation empireEvaluation3 = ObtainEmpireEvaluation(empire2);
                        int num26 = DominantRace.CautionLevel - DominantRace.AggressionLevel;
                        if (empireEvaluation3.OverallAttitude < num26 && Galaxy.Rnd.Next(0, 3) > 0)
                        {
                            EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.StopMissionsAgainstUs, null);
                            empireMessage.Description = TextResolver.GetText("We warn you to stop your covert missions against us!");
                            SendMessageToEmpire(empireMessage, empire2);
                        }
                    }
                }
                for (int n = 0; n < RecentAttackingEmpires.Count; n++)
                {
                    Empire empire3 = RecentAttackingEmpires[n];
                    DiplomaticRelation diplomaticRelation8 = ObtainDiplomaticRelation(empire3);
                    if (diplomaticRelation8.Type != DiplomaticRelationType.War)
                    {
                        EmpireEvaluation empireEvaluation4 = ObtainEmpireEvaluation(empire3);
                        int num27 = DominantRace.CautionLevel - DominantRace.AggressionLevel;
                        if (empireEvaluation4.OverallAttitude < num27 && Galaxy.Rnd.Next(0, 3) > 0)
                        {
                            EmpireMessage empireMessage2 = new EmpireMessage(this, EmpireMessageType.StopAttacks, null);
                            empireMessage2.Description = TextResolver.GetText("We warn you to stop your attacks against us!");
                            SendMessageToEmpire(empireMessage2, empire3);
                        }
                    }
                }
            }
            RecentAttackingEmpires.Clear();
            RecentSpyingEmpires.Clear();
        }

        private bool CheckCancelTreaty(int overallAttitude, int lowerLevel, int loyaltyLevel, int modifier)
        {
            lowerLevel -= modifier;
            if (overallAttitude < lowerLevel)
            {
                overallAttitude += (loyaltyLevel - 100) / 3;
                if (overallAttitude < lowerLevel)
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckDeclareWar(int overallAttitude, int lowerLevel, int loyaltyLevel, DiplomaticRelation currentDiplomaticRelation, int aggressionLevel, int modifier)
        {
            lowerLevel -= modifier;
            overallAttitude -= (aggressionLevel - 100) / 3;
            if (currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || (currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate && currentDiplomaticRelation.Initiator == this))
            {
                overallAttitude += (loyaltyLevel - 100) / 3;
            }
            if (overallAttitude < lowerLevel)
            {
                return true;
            }
            return false;
        }

        private bool CheckWhetherKnowAnySystemsOfOtherEmpire(Empire empire)
        {
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                Habitat habitat = empire.Colonies[i];
                Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                SystemVisibilityStatus status = SystemVisibility[habitat2.SystemIndex].Status;
                if (status == SystemVisibilityStatus.Explored || status == SystemVisibilityStatus.Visible)
                {
                    return true;
                }
            }
            return false;
        }

        public PirateRelation ObtainPirateRelation(Empire otherEmpire)
        {
            if (otherEmpire == null)
            {
                return new PirateRelation(this, otherEmpire, PirateRelationType.None);
            }
            if (otherEmpire == this)
            {
                return new PirateRelation(this, otherEmpire, PirateRelationType.Protection);
            }
            PirateRelation pirateRelation = PirateRelations.GetRelationByOtherEmpire(otherEmpire);
            if (pirateRelation == null)
            {
                pirateRelation = AddPirateRelation(otherEmpire, _Galaxy.CurrentStarDate);
            }
            return pirateRelation;
        }

        public PirateRelation AddPirateRelation(Empire otherEmpire, long starDate)
        {
            return AddPirateRelation(otherEmpire, PirateRelationType.NotMet, starDate);
        }

        public PirateRelation AddPirateRelation(Empire otherEmpire, PirateRelationType relationType, long starDate)
        {
            PirateRelation pirateRelation = new PirateRelation(this, otherEmpire, relationType);
            pirateRelation.LastChangeDate = starDate;
            pirateRelation.LastProtectionFeePaymentDate = starDate;
            return PirateRelations.Add(pirateRelation);
        }

        public void CancelPirateDefendMissions(Empire otherEmpire, bool evaluationPenaltyIfPirate)
        {
            ShipGroupList shipGroupList = new ShipGroupList();
            PirateRelation pirateRelation = otherEmpire.ObtainPirateRelation(this);
            EmpireActivityList empireActivityList = PirateMissions.ResolveByTypeAndRequester(EmpireActivityType.Defend, otherEmpire);
            for (int i = 0; i < empireActivityList.Count; i++)
            {
                EmpireActivity empireActivity = empireActivityList[i];
                if (empireActivity == null || empireActivity.AssignedEmpire != this || empireActivity.BidTimeRemaining > 0)
                {
                    continue;
                }
                empireActivity.RequestingEmpire.PirateMissions.RemoveEquivalent(empireActivity);
                PirateMissions.RemoveEquivalent(empireActivity);
                if (empireActivity.AssignedEmpire != null && empireActivity.AssignedEmpire.PirateMissions != null)
                {
                    empireActivity.AssignedEmpire.PirateMissions.RemoveEquivalent(empireActivity);
                }
                if (_Galaxy.PirateMissions.ContainsEquivalent(empireActivity))
                {
                    _Galaxy.PirateMissions.RemoveEquivalent(empireActivity);
                }
                if (evaluationPenaltyIfPirate && PirateEmpireBaseHabitat != null)
                {
                    pirateRelation.EvaluationPirateMissionsFail -= 20f;
                }
                ShipGroupList shipGroupList2 = ShipGroups.ResolveFleetsWithWaitTarget(empireActivity.Target);
                for (int j = 0; j < shipGroupList2.Count; j++)
                {
                    ShipGroup shipGroup = shipGroupList2[j];
                    if (shipGroup != null && !shipGroupList.Contains(shipGroup))
                    {
                        shipGroupList.Add(shipGroup);
                    }
                }
                ShipGroupList shipGroupList3 = ShipGroups.ResolveFleetsWithAttackTarget(empireActivity.Target);
                for (int k = 0; k < shipGroupList3.Count; k++)
                {
                    ShipGroup shipGroup2 = shipGroupList3[k];
                    if (shipGroup2 != null && !shipGroupList.Contains(shipGroup2))
                    {
                        shipGroupList.Add(shipGroup2);
                    }
                }
            }
            for (int l = 0; l < _Galaxy.PirateMissions.Count; l++)
            {
                EmpireActivity empireActivity2 = _Galaxy.PirateMissions[l];
                if (empireActivity2 != null && empireActivity2.Type == EmpireActivityType.Defend && empireActivity2.RequestingEmpire == otherEmpire && empireActivity2.BidTimeRemaining > 0 && empireActivity2.AssignedEmpire == this)
                {
                    empireActivity2.AssignedEmpire = null;
                    empireActivity2.BidTimeRemaining += 10000L;
                }
            }
            if (shipGroupList != null && shipGroupList.Count > 0)
            {
                for (int m = 0; m < shipGroupList.Count; m++)
                {
                    shipGroupList[m]?.CompleteMission();
                }
            }
        }

        public void ChangePirateRelation(Empire otherEmpire, PirateRelationType relationType, long starDate)
        {
            ChangePirateRelation(otherEmpire, relationType, starDate, 0.0);
        }

        public void ChangePirateRelation(Empire otherEmpire, PirateRelationType relationType, long starDate, double monthlyFeeToThisEmpire)
        {
            if (otherEmpire == null)
            {
                return;
            }
            PirateRelation pirateRelation = ObtainPirateRelation(otherEmpire);
            PirateRelation pirateRelation2 = otherEmpire.ObtainPirateRelation(this);
            if (pirateRelation.Type == relationType)
            {
                return;
            }
            bool flag = false;
            if ((pirateRelation.Type == PirateRelationType.NotMet || pirateRelation.Type == PirateRelationType.None) && relationType == PirateRelationType.None)
            {
                flag = true;
            }
            if (pirateRelation.Type == PirateRelationType.Protection && relationType != PirateRelationType.Protection)
            {
                bool evaluationPenaltyIfPirate = false;
                if (PirateEmpireBaseHabitat != null)
                {
                    evaluationPenaltyIfPirate = true;
                }
                CancelPirateDefendMissions(otherEmpire, evaluationPenaltyIfPirate);
                otherEmpire.CancelPirateDefendMissions(this, evaluationPenaltyIfPirate: false);
            }
            pirateRelation.Type = relationType;
            pirateRelation.LastChangeDate = starDate;
            pirateRelation.LastOfferDate = starDate;
            pirateRelation.LastProtectionFeePaymentDate = starDate;
            pirateRelation.EvaluationLongRelationship = 0f;
            pirateRelation2.Type = relationType;
            pirateRelation2.LastChangeDate = starDate;
            pirateRelation2.LastOfferDate = starDate;
            pirateRelation2.LastProtectionFeePaymentDate = starDate;
            pirateRelation2.EvaluationLongRelationship = 0f;
            if (flag)
            {
                pirateRelation.LastOfferDate = 0L;
                pirateRelation.LastInfoDate = 0L;
                pirateRelation2.LastOfferDate = 0L;
                pirateRelation2.LastInfoDate = 0L;
            }
            pirateRelation.MonthlyProtectionFeeToThisEmpire = monthlyFeeToThisEmpire;
        }

        public void ChangePirateRelationThisSideOnly(Empire otherEmpire, PirateRelationType relationType, long starDate)
        {
            if (otherEmpire != null)
            {
                PirateRelation pirateRelation = ObtainPirateRelation(otherEmpire);
                if (pirateRelation.Type != relationType)
                {
                    pirateRelation.Type = relationType;
                    pirateRelation.LastChangeDate = starDate;
                    pirateRelation.LastOfferDate = starDate;
                    pirateRelation.LastProtectionFeePaymentDate = starDate;
                }
            }
        }

        public void ChangePirateEvaluation(Empire otherEmpire, float evaluationChangeAmount, PirateRelationEvaluationType evaluationType)
        {
            if (otherEmpire != null)
            {
                PirateRelation pirateRelation = ObtainPirateRelation(otherEmpire);
                switch (evaluationType)
                {
                    case PirateRelationEvaluationType.DetectedIntelligenceMissions:
                        pirateRelation.EvaluationDetectedIntelligenceMissions += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.Gifts:
                        pirateRelation.EvaluationGifts += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.OffenseOverRequests:
                        pirateRelation.EvaluationOffenseOverRequests += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.PirateMissionsFail:
                        pirateRelation.EvaluationPirateMissionsFail += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.PirateMissionsSucceed:
                        pirateRelation.EvaluationPirateMissionsSucceed += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.ProtectionCancelled:
                        pirateRelation.EvaluationProtectionCancelled += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.ShipAttacks:
                        pirateRelation.EvaluationShipAttacks += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.CovetedColony:
                        pirateRelation.EvaluationCovetedColonies += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.LongRelationship:
                        pirateRelation.EvaluationLongRelationship += evaluationChangeAmount;
                        break;
                    case PirateRelationEvaluationType.RaidsAgainstOurColonies:
                        pirateRelation.EvaluationRaidsAgainstOurColonies += evaluationChangeAmount;
                        break;
                }
            }
        }

        public bool ChangeDiplomaticRelation(DiplomaticRelation currentDiplomaticRelation, DiplomaticRelationType newDiplomaticRelationType)
        {
            return ChangeDiplomaticRelation(currentDiplomaticRelation, newDiplomaticRelationType, blockFlowonEffects: false);
        }

        public bool ChangeDiplomaticRelation(DiplomaticRelation currentDiplomaticRelation, DiplomaticRelationType newDiplomaticRelationType, bool blockFlowonEffects)
        {
            return ChangeDiplomaticRelation(currentDiplomaticRelation, newDiplomaticRelationType, blockFlowonEffects, locked: false);
        }

        public bool ChangeDiplomaticRelation(DiplomaticRelation currentDiplomaticRelation, DiplomaticRelationType newDiplomaticRelationType, bool blockFlowonEffects, bool locked)
        {
            return ChangeDiplomaticRelation(currentDiplomaticRelation, newDiplomaticRelationType, blockFlowonEffects, locked, string.Empty);
        }

        public bool ChangeDiplomaticRelation(DiplomaticRelation currentDiplomaticRelation, DiplomaticRelationType newDiplomaticRelationType, bool blockFlowonEffects, bool locked, string allianceName)
        {
            switch (newDiplomaticRelationType)
            {
                case DiplomaticRelationType.War:
                    {
                        CharacterList ambassadorsForEmpire5 = Characters.GetAmbassadorsForEmpire(currentDiplomaticRelation.OtherEmpire);
                        if (currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                        {
                            _Galaxy.DoCharacterEvent(CharacterEventType.TreatyBroken, currentDiplomaticRelation.OtherEmpire, ambassadorsForEmpire5, includeLeader: true, this);
                        }
                        _Galaxy.DoCharacterEvent(CharacterEventType.WarStarted, currentDiplomaticRelation.OtherEmpire, ambassadorsForEmpire5, includeLeader: true, this);
                        if (currentDiplomaticRelation != null && currentDiplomaticRelation.OtherEmpire != null)
                        {
                            CharacterList ambassadorsForEmpire6 = currentDiplomaticRelation.OtherEmpire.Characters.GetAmbassadorsForEmpire(this);
                            if (currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                            {
                                _Galaxy.DoCharacterEvent(CharacterEventType.TreatyBroken, this, ambassadorsForEmpire6, includeLeader: true, currentDiplomaticRelation.OtherEmpire);
                            }
                            _Galaxy.DoCharacterEvent(CharacterEventType.WarStarted, this, ambassadorsForEmpire6, includeLeader: true, currentDiplomaticRelation.OtherEmpire);
                        }
                        break;
                    }
                case DiplomaticRelationType.FreeTradeAgreement:
                case DiplomaticRelationType.MutualDefensePact:
                case DiplomaticRelationType.Protectorate:
                    {
                        CharacterList ambassadorsForEmpire3 = Characters.GetAmbassadorsForEmpire(currentDiplomaticRelation.OtherEmpire);
                        _Galaxy.DoCharacterEvent(CharacterEventType.TreatySigned, currentDiplomaticRelation.CloneLightWeight(newDiplomaticRelationType), ambassadorsForEmpire3, includeLeader: true, this);
                        if (currentDiplomaticRelation != null && currentDiplomaticRelation.OtherEmpire != null)
                        {
                            _Galaxy.ChanceNewAmbassador(this, newDiplomaticRelationType, currentDiplomaticRelation.OtherEmpire);
                            CharacterList ambassadorsForEmpire4 = currentDiplomaticRelation.OtherEmpire.Characters.GetAmbassadorsForEmpire(this);
                            DiplomaticRelation diplomaticRelation = currentDiplomaticRelation.OtherEmpire.ObtainDiplomaticRelation(this);
                            _Galaxy.DoCharacterEvent(CharacterEventType.TreatySigned, diplomaticRelation.CloneLightWeight(newDiplomaticRelationType), ambassadorsForEmpire4, includeLeader: true, currentDiplomaticRelation.OtherEmpire);
                        }
                        break;
                    }
                case DiplomaticRelationType.None:
                case DiplomaticRelationType.TradeSanctions:
                    if (currentDiplomaticRelation != null && currentDiplomaticRelation.OtherEmpire != null && (currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate))
                    {
                        CharacterList ambassadorsForEmpire = Characters.GetAmbassadorsForEmpire(currentDiplomaticRelation.OtherEmpire);
                        _Galaxy.DoCharacterEvent(CharacterEventType.TreatyBroken, currentDiplomaticRelation.OtherEmpire, ambassadorsForEmpire, includeLeader: true, this);
                        CharacterList ambassadorsForEmpire2 = currentDiplomaticRelation.OtherEmpire.Characters.GetAmbassadorsForEmpire(this);
                        _Galaxy.DoCharacterEvent(CharacterEventType.TreatyBroken, this, ambassadorsForEmpire2, includeLeader: true, currentDiplomaticRelation.OtherEmpire);
                    }
                    break;
            }
            DiplomaticRelation diplomaticRelation2 = DiplomaticRelations[currentDiplomaticRelation.OtherEmpire];
            if (diplomaticRelation2 == null)
            {
                DiplomaticRelations.Add(currentDiplomaticRelation);
                diplomaticRelation2 = currentDiplomaticRelation;
            }
            DiplomaticRelation diplomaticRelation3 = diplomaticRelation2.OtherEmpire.DiplomaticRelations[diplomaticRelation2.ThisEmpire];
            if (diplomaticRelation3 == null)
            {
                DiplomaticRelation diplomaticRelation4 = new DiplomaticRelation(DiplomaticRelationType.NotMet, this, diplomaticRelation2.OtherEmpire, this, tradeRestrictedResources: false);
                diplomaticRelation2.OtherEmpire.DiplomaticRelations.Add(diplomaticRelation4);
                diplomaticRelation3 = diplomaticRelation4;
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            Counters.ProcessRelationChange(currentDiplomaticRelation, this, newDiplomaticRelationType, currentStarDate);
            diplomaticRelation2.OtherEmpire.Counters.ProcessRelationChange(diplomaticRelation3, this, newDiplomaticRelationType, currentStarDate);
            if (newDiplomaticRelationType == DiplomaticRelationType.MutualDefensePact || newDiplomaticRelationType == DiplomaticRelationType.Protectorate)
            {
                currentDiplomaticRelation.OtherEmpire.SetEmpireSharedVisibility(this);
                SetEmpireSharedVisibility(currentDiplomaticRelation.OtherEmpire);
                currentDiplomaticRelation.MilitaryRefuelingToOther = true;
                diplomaticRelation3.MilitaryRefuelingToOther = true;
            }
            else if ((diplomaticRelation2.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation2.Type == DiplomaticRelationType.Protectorate) && newDiplomaticRelationType != DiplomaticRelationType.Protectorate && newDiplomaticRelationType != DiplomaticRelationType.MutualDefensePact)
            {
                currentDiplomaticRelation.OtherEmpire.ClearEmpireSharedVisibility(this);
                ClearEmpireSharedVisibility(currentDiplomaticRelation.OtherEmpire);
                currentDiplomaticRelation.MilitaryRefuelingToOther = false;
                diplomaticRelation3.MilitaryRefuelingToOther = false;
            }
            if (newDiplomaticRelationType == DiplomaticRelationType.FreeTradeAgreement)
            {
                if (!currentDiplomaticRelation.OtherEmpire.CheckWhetherKnowAnySystemsOfOtherEmpire(this))
                {
                    Habitat habitat = _Galaxy.FastFindNearestColony((int)currentDiplomaticRelation.OtherEmpire.Capital.Xpos, (int)currentDiplomaticRelation.OtherEmpire.Capital.Ypos, this, 0);
                    if (habitat != null)
                    {
                        SystemVisibilityStatus status = currentDiplomaticRelation.OtherEmpire.SystemVisibility[habitat.SystemIndex].Status;
                        if (status != SystemVisibilityStatus.Visible)
                        {
                            currentDiplomaticRelation.OtherEmpire.SetSystemVisibility(habitat, SystemVisibilityStatus.Explored);
                        }
                    }
                }
                if (!CheckWhetherKnowAnySystemsOfOtherEmpire(currentDiplomaticRelation.OtherEmpire))
                {
                    Habitat habitat2 = _Galaxy.FastFindNearestColony((int)Capital.Xpos, (int)Capital.Ypos, currentDiplomaticRelation.OtherEmpire, 0);
                    if (habitat2 != null)
                    {
                        SystemVisibilityStatus status2 = SystemVisibility[habitat2.SystemIndex].Status;
                        if (status2 != SystemVisibilityStatus.Visible)
                        {
                            SetSystemVisibility(habitat2, SystemVisibilityStatus.Explored);
                        }
                    }
                }
            }
            if (currentDiplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion)
            {
                int num = currentDiplomaticRelation.Initiator.EmpiresViewable.IndexOf(diplomaticRelation2.OtherEmpire);
                if (num >= 0)
                {
                    currentDiplomaticRelation.Initiator.EmpiresViewable.RemoveAt(num);
                    currentDiplomaticRelation.Initiator.EmpiresViewableExpiry.RemoveAt(num);
                }
            }
            if (newDiplomaticRelationType == DiplomaticRelationType.SubjugatedDominion)
            {
                int num2 = _EmpiresViewable.IndexOf(currentDiplomaticRelation.OtherEmpire);
                if (num2 >= 0)
                {
                    _EmpiresViewableExpiry[num2] = long.MaxValue;
                }
                else
                {
                    _EmpiresViewable.Add(currentDiplomaticRelation.OtherEmpire);
                    _EmpiresViewableExpiry.Add(long.MaxValue);
                }
                DiplomaticRelation diplomaticRelation5 = ProposedDiplomaticRelations[currentDiplomaticRelation.OtherEmpire];
                if (diplomaticRelation5 != null && diplomaticRelation5.Type == DiplomaticRelationType.None)
                {
                    ProposedDiplomaticRelations.Remove(diplomaticRelation5);
                }
            }
            if (newDiplomaticRelationType == DiplomaticRelationType.War)
            {
                EmpireEvaluation empireEvaluation = currentDiplomaticRelation.OtherEmpire.EmpireEvaluations[this];
                if (empireEvaluation != null)
                {
                    empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw - (double)Galaxy.IncidentImpactWhenDeclareWar;
                }
                currentDiplomaticRelation.MilitaryRefuelingToOther = false;
                currentDiplomaticRelation.MiningRightsToOther = false;
                diplomaticRelation3.MilitaryRefuelingToOther = false;
                diplomaticRelation3.MiningRightsToOther = false;
                CivilityRating -= Galaxy.DeclareWarReputationImpact;
            }
            if (newDiplomaticRelationType == DiplomaticRelationType.TradeSanctions)
            {
                EmpireEvaluation empireEvaluation2 = currentDiplomaticRelation.OtherEmpire.EmpireEvaluations[this];
                if (empireEvaluation2 != null)
                {
                    empireEvaluation2.IncidentEvaluation = empireEvaluation2.IncidentEvaluationRaw - 15.0;
                }
                currentDiplomaticRelation.MilitaryRefuelingToOther = false;
                currentDiplomaticRelation.MiningRightsToOther = false;
                diplomaticRelation3.MilitaryRefuelingToOther = false;
                diplomaticRelation3.MiningRightsToOther = false;
            }
            if (newDiplomaticRelationType != DiplomaticRelationType.FreeTradeAgreement && newDiplomaticRelationType != DiplomaticRelationType.MutualDefensePact && newDiplomaticRelationType != DiplomaticRelationType.Protectorate)
            {
                diplomaticRelation2.TradeBonus = 0.0;
            }
            diplomaticRelation2.Type = newDiplomaticRelationType;
            diplomaticRelation2.Initiator = this;
            diplomaticRelation2.WarDamageBuiltObject = 0;
            diplomaticRelation2.WarDamageColony = 0;
            diplomaticRelation2.StartDateOfLastChange = _Galaxy.CurrentStarDate;
            diplomaticRelation2.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
            diplomaticRelation2.AllianceName = allianceName;
            diplomaticRelation2.Locked = locked;
            diplomaticRelation3.Locked = locked;
            if (!blockFlowonEffects && newDiplomaticRelationType == DiplomaticRelationType.War)
            {
                for (int i = 0; i < diplomaticRelation2.OtherEmpire.DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation6 = diplomaticRelation2.OtherEmpire.DiplomaticRelations[i];
                    if ((diplomaticRelation6.Type != DiplomaticRelationType.MutualDefensePact && (diplomaticRelation6.Type != DiplomaticRelationType.Protectorate || diplomaticRelation6.Initiator == diplomaticRelation2.OtherEmpire)) || diplomaticRelation6.OtherEmpire == this)
                    {
                        continue;
                    }
                    if (diplomaticRelation6.OtherEmpire != null)
                    {
                        DiplomaticRelation diplomaticRelation7 = diplomaticRelation6.OtherEmpire.ObtainDiplomaticRelation(this);
                        if (diplomaticRelation7 != null && diplomaticRelation7.Type == DiplomaticRelationType.War)
                        {
                            continue;
                        }
                    }
                    if (diplomaticRelation6.OtherEmpire == _Galaxy.PlayerEmpire)
                    {
                        diplomaticRelation2.OtherEmpire.SendMessageToEmpire(diplomaticRelation6.OtherEmpire, EmpireMessageType.RequestHonorMutualDefense, this, string.Format(TextResolver.GetText("We are under attack from the EMPIRE"), Name));
                        continue;
                    }
                    bool flag = true;
                    DiplomaticRelation diplomaticRelation8 = diplomaticRelation6.OtherEmpire.ObtainDiplomaticRelation(this);
                    if (diplomaticRelation8.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation8.Type == DiplomaticRelationType.Protectorate && diplomaticRelation8.Initiator == this))
                    {
                        flag = false;
                    }
                    else if (diplomaticRelation8.Locked && diplomaticRelation8.Type != DiplomaticRelationType.War)
                    {
                        flag = false;
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    double num3 = (double)diplomaticRelation6.OtherEmpire.WeightedMilitaryPotency / (double)WeightedMilitaryPotency;
                    double num4 = (double)diplomaticRelation6.OtherEmpire.DominantRace.LoyaltyLevel / 100.0;
                    EmpireEvaluation empireEvaluation3 = diplomaticRelation6.OtherEmpire.EmpireEvaluations[this];
                    double num5 = 1.0;
                    if (empireEvaluation3 != null)
                    {
                        num5 = 1.0 + (double)empireEvaluation3.OverallAttitude / 100.0;
                        num5 = Math.Max(0.5, Math.Min(num5, 1.5));
                    }
                    double num6 = num3 * num4 * num4 * num5 * num5;
                    if (num6 > 0.3 + Galaxy.Rnd.NextDouble() * 0.1)
                    {
                        EmpireEvaluation empireEvaluation4 = diplomaticRelation2.OtherEmpire.EmpireEvaluations[diplomaticRelation6.OtherEmpire];
                        if (empireEvaluation4 != null)
                        {
                            empireEvaluation4.IncidentEvaluation = empireEvaluation4.IncidentEvaluationRaw + 15.0;
                        }
                        diplomaticRelation6.OtherEmpire.CivilityRating += 6.0;
                        diplomaticRelation6.OtherEmpire.DeclareWar(this);
                    }
                    else
                    {
                        EmpireEvaluation empireEvaluation5 = diplomaticRelation2.OtherEmpire.EmpireEvaluations[diplomaticRelation6.OtherEmpire];
                        if (empireEvaluation5 != null)
                        {
                            empireEvaluation5.IncidentEvaluation = empireEvaluation5.IncidentEvaluationRaw - 22.0;
                        }
                        diplomaticRelation6.OtherEmpire.CivilityRating -= 6.0;
                    }
                }
            }
            if (newDiplomaticRelationType != DiplomaticRelationType.FreeTradeAgreement && newDiplomaticRelationType != DiplomaticRelationType.MutualDefensePact && newDiplomaticRelationType != DiplomaticRelationType.Protectorate)
            {
                diplomaticRelation3.TradeBonus = 0.0;
            }
            diplomaticRelation3.Type = newDiplomaticRelationType;
            diplomaticRelation3.WarDamageBuiltObject = 0;
            diplomaticRelation3.WarDamageColony = 0;
            diplomaticRelation3.Initiator = this;
            diplomaticRelation3.StartDateOfLastChange = _Galaxy.CurrentStarDate;
            diplomaticRelation3.LastDiplomacyTradeOfferDate = _Galaxy.CurrentStarDate;
            diplomaticRelation3.AllianceName = allianceName;
            short matchingGameEventIdDiplomaticRelationChange = _Galaxy.GetMatchingGameEventIdDiplomaticRelationChange(currentDiplomaticRelation.ThisEmpire, currentDiplomaticRelation.OtherEmpire, newDiplomaticRelationType);
            _Galaxy.CheckTriggerEvent(matchingGameEventIdDiplomaticRelationChange, this, EventTriggerType.DiplomaticRelationChange, null);
            matchingGameEventIdDiplomaticRelationChange = _Galaxy.GetMatchingGameEventIdDiplomaticRelationChange(currentDiplomaticRelation.OtherEmpire, currentDiplomaticRelation.ThisEmpire, newDiplomaticRelationType);
            _Galaxy.CheckTriggerEvent(matchingGameEventIdDiplomaticRelationChange, this, EventTriggerType.DiplomaticRelationChange, null);
            return true;
        }

        public Empire DetermineVictorInWar(DiplomaticRelation diplomaticRelation, out double winningRatio, out Empire loser, out int loserRawDamageBuiltObject, out int loserRawDamageColony, out int winnerRawDamageBuiltObject, out int winnerRawDamageColony)
        {
            Empire empire = null;
            loser = null;
            winningRatio = 1.0;
            loserRawDamageBuiltObject = 0;
            loserRawDamageColony = 0;
            winnerRawDamageBuiltObject = 0;
            winnerRawDamageColony = 0;
            DiplomaticRelation diplomaticRelation2 = diplomaticRelation.OtherEmpire.DiplomaticRelations[diplomaticRelation.ThisEmpire];
            if (diplomaticRelation.WarDamageTotal > diplomaticRelation2.WarDamageTotal)
            {
                empire = diplomaticRelation.OtherEmpire;
                loser = diplomaticRelation.ThisEmpire;
                winningRatio = (diplomaticRelation.WarDamageTotal + 1) / (diplomaticRelation2.WarDamageTotal + 1);
                loserRawDamageBuiltObject = diplomaticRelation.WarDamageBuiltObject;
                loserRawDamageColony = diplomaticRelation.WarDamageColony;
                winnerRawDamageBuiltObject = diplomaticRelation2.WarDamageBuiltObject;
                winnerRawDamageColony = diplomaticRelation2.WarDamageColony;
            }
            else
            {
                empire = diplomaticRelation.ThisEmpire;
                loser = diplomaticRelation.OtherEmpire;
                winningRatio = (diplomaticRelation2.WarDamageTotal + 1) / (diplomaticRelation.WarDamageTotal + 1);
                loserRawDamageBuiltObject = diplomaticRelation2.WarDamageBuiltObject;
                loserRawDamageColony = diplomaticRelation2.WarDamageColony;
                winnerRawDamageBuiltObject = diplomaticRelation.WarDamageBuiltObject;
                winnerRawDamageColony = diplomaticRelation.WarDamageColony;
            }
            return empire;
        }

        public bool DetermineSubjugationOfLoserInWar(Empire winnerEmpire, Empire loserEmpire, double winningRatio, int winnerStrength, int loserStrength)
        {
            if (winningRatio > 3.0)
            {
                double num = Math.Pow((double)winnerEmpire.DominantRace.AggressionLevel / 100.0, 2.0);
                double num2 = Math.Pow((double)loserEmpire.DominantRace.AggressionLevel / 100.0, 2.0);
                double num3 = (double)winnerStrength * num;
                double num4 = (double)loserStrength * num2 * 3.0;
                if (num3 > num4)
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckWhetherWarDamageExceedsLimit(Empire empire, int damageBuiltObject, int damageColony)
        {
            bool result = false;
            int builtObjectWarValue = 0;
            int colonyWarValue = 0;
            _Galaxy.CalculateEmpireWarValue(empire, out builtObjectWarValue, out colonyWarValue);
            double num = Math.Pow(1.0 + (double)(empire.DominantRace.AggressionLevel - empire.DominantRace.CautionLevel) / 100.0, 2.0);
            int num2 = (int)((double)(builtObjectWarValue + damageBuiltObject) * Galaxy.AcceptableWarValueLossesBuiltObject * num);
            int num3 = (int)((double)(colonyWarValue + damageColony) * Galaxy.AcceptableWarValueLossesColony * num);
            if (damageBuiltObject > num2 || damageColony > num3)
            {
                result = true;
            }
            return result;
        }

        private double CalculateSupportableForceFunds()
        {
            double num = CalculateAccurateAnnualIncome();
            double val = StateMoney / Galaxy.AllowableYearsMaintenanceFromCashOnHand;
            return Math.Max(0.0, num + Math.Max(0.0, val));
        }

        private void CleanupInvalidShips()
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            builtObjectList2.AddRange(BuiltObjects);
            builtObjectList2.AddRange(PrivateBuiltObjects);
            for (int i = 0; i < builtObjectList2.Count; i++)
            {
                BuiltObject builtObject = builtObjectList2[i];
                if (builtObject == null || builtObject.InView || !builtObject.IsAutoControlled)
                {
                    continue;
                }
                if (builtObject.HasBeenDestroyed)
                {
                    builtObjectList.Add(builtObject);
                }
                if (builtObject.Owner != null && builtObject.Owner == _Galaxy.PlayerEmpire && !builtObject.HasBeenDestroyed)
                {
                    continue;
                }
                if (!builtObject.IsFunctional && builtObject.BuiltAt == null && builtObject.Role != BuiltObjectRole.Base)
                {
                    builtObjectList.Add(builtObject);
                }
                if (builtObject.Role != BuiltObjectRole.Base && builtObject.BuiltAt == null && builtObject.TopSpeed <= 0)
                {
                    builtObjectList.Add(builtObject);
                }
                if (builtObject.DockingBays != null && builtObject.DockingBays.Count > 0)
                {
                    foreach (DockingBay dockingBay in builtObject.DockingBays)
                    {
                        if (dockingBay.DockedShip != null && dockingBay.DockedShip.DockedAt == null)
                        {
                            dockingBay.DockedShip = null;
                        }
                    }
                    if (builtObject.DockingBayWaitQueue != null)
                    {
                        foreach (BuiltObject item in builtObject.DockingBayWaitQueue)
                        {
                            if (item.Mission != null && item.Mission.Type != 0)
                            {
                                if (!item.IsFunctional && !builtObjectList.Contains(item))
                                {
                                    builtObjectList.Add(item);
                                }
                                if (item.TopSpeed <= 0 && !builtObjectList.Contains(item))
                                {
                                    builtObjectList.Add(item);
                                }
                            }
                            else
                            {
                                item.ClearPreviousMissionRequirements();
                            }
                        }
                    }
                }
                if (builtObject.ConstructionQueue == null || builtObject.ConstructionQueue.ConstructionYards.Count <= 0)
                {
                    continue;
                }
                foreach (ConstructionYard constructionYard in builtObject.ConstructionQueue.ConstructionYards)
                {
                    if (constructionYard.ShipUnderConstruction != null && constructionYard.ShipUnderConstruction.BuiltAt == null)
                    {
                        constructionYard.ShipUnderConstruction = null;
                    }
                }
            }
            foreach (BuiltObject item2 in builtObjectList)
            {
                item2.CompleteTeardown(_Galaxy, removeFromEmpire: true);
            }
        }

        private bool CheckWhetherHaveEnoughFleetsForWar(int empiresAtWarWith)
        {
            bool result = false;
            if (ShipGroups != null)
            {
                switch (empiresAtWarWith)
                {
                    case 0:
                        if (ShipGroups.Count > 0)
                        {
                            result = true;
                        }
                        break;
                    case 1:
                        if (ShipGroups.Count > 2)
                        {
                            result = true;
                        }
                        break;
                }
            }
            return result;
        }

        private bool DetermineWhetherWantToEmancipate(DiplomaticRelation relation, int overallAttitude)
        {
            int num = (int)((double)(DominantRace.FriendlinessLevel - DominantRace.AggressionLevel) / 5.0);
            int num2 = 10 - num;
            if (overallAttitude > num2)
            {
                switch (relation.Strategy)
                {
                    case DiplomaticStrategy.Conquer:
                    case DiplomaticStrategy.Defend:
                    case DiplomaticStrategy.Undermine:
                    case DiplomaticStrategy.DefendUndermine:
                    case DiplomaticStrategy.Punish:
                        return false;
                    default:
                        return true;
                }
            }
            return false;
        }

        private DiplomaticRelationType ResolveDesiredDiplomaticRelationType(DiplomaticRelation currentDiplomaticRelation, int overallAttitude, int intelligenceLevel, int friendlinessLevel, int loyaltyLevel, int aggressionLevel, double warWeariness, double galaxyIntoleranceLevel)
        {
            return ResolveDesiredDiplomaticRelationType(currentDiplomaticRelation, overallAttitude, intelligenceLevel, friendlinessLevel, loyaltyLevel, aggressionLevel, warWeariness, galaxyIntoleranceLevel, 1.0);
        }

        private DiplomaticRelationType ResolveDesiredDiplomaticRelationType(DiplomaticRelation currentDiplomaticRelation, int overallAttitude, int intelligenceLevel, int friendlinessLevel, int loyaltyLevel, int aggressionLevel, double warWeariness, double galaxyIntoleranceLevel, double diplomacyFactor)
        {
            if (currentDiplomaticRelation.Locked)
            {
                return currentDiplomaticRelation.Type;
            }
            DiplomaticRelationType diplomaticRelationType = currentDiplomaticRelation.Type;
            if (overallAttitude >= 0)
            {
                int num = (int)Math.Max(0.0, ((double)friendlinessLevel - 95.0) / 1.8);
                int num2 = Math.Max(0, (int)(10.0 * galaxyIntoleranceLevel));
                num += num2;
                overallAttitude += num;
            }
            if (overallAttitude > 0)
            {
                overallAttitude = (int)((double)overallAttitude * diplomacyFactor);
            }
            else if (overallAttitude < 0)
            {
                overallAttitude = (int)((double)overallAttitude / diplomacyFactor);
            }
            ResolveTypicalAttitudeLevel(currentDiplomaticRelation.Type, out var lowerLevel, out var upperLevel);
            if (currentDiplomaticRelation.Type == DiplomaticRelationType.War)
            {
                overallAttitude += (int)warWeariness;
            }
            if (currentDiplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion && currentDiplomaticRelation.Initiator == this)
            {
                int overallAttitude2 = overallAttitude - 20;
                if (DetermineWhetherWantToEmancipate(currentDiplomaticRelation, overallAttitude2))
                {
                    return DiplomaticRelationType.None;
                }
                return DiplomaticRelationType.SubjugatedDominion;
            }
            if (currentDiplomaticRelation.Type == DiplomaticRelationType.War)
            {
                ResolveTypicalAttitudeLevel(DiplomaticRelationType.None, out var lowerLevel2, out var _);
                int num3 = lowerLevel2 + 15;
                if (overallAttitude >= num3)
                {
                    return DiplomaticRelationType.None;
                }
                double winningRatio = 0.0;
                int loserRawDamageBuiltObject = 0;
                int loserRawDamageColony = 0;
                int winnerRawDamageBuiltObject = 0;
                int winnerRawDamageColony = 0;
                Empire loser = null;
                Empire empire = DetermineVictorInWar(currentDiplomaticRelation, out winningRatio, out loser, out loserRawDamageBuiltObject, out loserRawDamageColony, out winnerRawDamageBuiltObject, out winnerRawDamageColony);
                if (empire != null)
                {
                    double num4 = (double)DominantRace.AggressionLevel / 100.0;
                    int num5 = CountEmpiresWeDeclaredWarOn() + CountEmpiresWhoDeclaredWarOnUs();
                    double num6 = 20.0 * num4 * num4;
                    if (empire == this)
                    {
                        if (num5 > 2 && Galaxy.Rnd.Next(0, 3) == 1)
                        {
                            return DiplomaticRelationType.None;
                        }
                        if (CheckWhetherWarDamageExceedsLimit(empire, winnerRawDamageBuiltObject, winnerRawDamageColony) || warWeariness > num6)
                        {
                            if (DetermineWhetherWantToOfferSubjugation(this) && DetermineSubjugationOfLoserInWar(empire, loser, winningRatio, empire.MilitaryPotency, loser.MilitaryPotency))
                            {
                                return DiplomaticRelationType.SubjugatedDominion;
                            }
                            return DiplomaticRelationType.None;
                        }
                        if (CheckWhetherWarDamageExceedsLimit(loser, loserRawDamageBuiltObject, loserRawDamageColony))
                        {
                            if (DetermineWhetherWantToOfferSubjugation(this) && DetermineSubjugationOfLoserInWar(empire, loser, winningRatio, empire.MilitaryPotency, loser.MilitaryPotency))
                            {
                                return DiplomaticRelationType.SubjugatedDominion;
                            }
                            if (warWeariness > num6)
                            {
                                return DiplomaticRelationType.None;
                            }
                        }
                        else if (warWeariness > num6)
                        {
                            return DiplomaticRelationType.None;
                        }
                    }
                    else
                    {
                        if (num5 > 1 && Galaxy.Rnd.Next(0, 2) == 1)
                        {
                            return DiplomaticRelationType.None;
                        }
                        if (CheckWhetherWarDamageExceedsLimit(loser, loserRawDamageBuiltObject, loserRawDamageColony))
                        {
                            return DiplomaticRelationType.None;
                        }
                        if (warWeariness > num6)
                        {
                            return DiplomaticRelationType.None;
                        }
                    }
                }
            }
            if (currentDiplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
            {
                double num7 = AnnualStateMaintenance + AnnualTroopMaintenance + AnnualSubjugationTribute + ThisYearsStateFuelCosts + AnnualPirateProtection + AnnualFacilityMaintenance;
                double num8 = CalculateSupportableForceFunds();
                if (num7 > num8)
                {
                    return DiplomaticRelationType.None;
                }
            }
            int num9 = overallAttitude;
            if (overallAttitude >= lowerLevel)
            {
                diplomaticRelationType = ((overallAttitude <= upperLevel) ? currentDiplomaticRelation.Type : ResolveTypicalDiplomaticRelationType(overallAttitude));
            }
            else
            {
                int num10 = 0;
                EmpireEvaluation empireEvaluation = currentDiplomaticRelation.OtherEmpire.ObtainEmpireEvaluation(this);
                if (empireEvaluation.OverallAttitude >= 4)
                {
                    num10 = (int)((double)empireEvaluation.OverallAttitude * 0.75);
                }
                if (currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || (currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate && currentDiplomaticRelation.Initiator == this))
                {
                    num9 += Math.Max(0, (loyaltyLevel - 100) / 3);
                }
                else if (currentDiplomaticRelation.Type == DiplomaticRelationType.None)
                {
                    num9 -= Math.Min(0, aggressionLevel - 100) / 3;
                }
                if (num9 + num10 < lowerLevel)
                {
                    int val = (intelligenceLevel - 100) / 2;
                    val = Math.Max(0, Math.Min(val, 8));
                    ResolveTypicalAttitudeLevel(DiplomaticRelationType.None, out var lowerLevel3, out var _);
                    lowerLevel3 /= 3;
                    diplomaticRelationType = ((currentDiplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact && currentDiplomaticRelation.Type != DiplomaticRelationType.Protectorate) ? ((currentDiplomaticRelation.Type != DiplomaticRelationType.FreeTradeAgreement) ? ResolveTypicalDiplomaticRelationType(overallAttitude) : ((num9 + val >= lowerLevel3) ? currentDiplomaticRelation.Type : ResolveTypicalDiplomaticRelationType(overallAttitude))) : ((num9 + val >= 0) ? currentDiplomaticRelation.Type : ResolveTypicalDiplomaticRelationType(overallAttitude)));
                }
            }
            if (diplomaticRelationType == DiplomaticRelationType.TradeSanctions)
            {
                double num11 = AnnualStateMaintenance + AnnualTroopMaintenance + AnnualSubjugationTribute + ThisYearsStateFuelCosts + AnnualPirateProtection + AnnualFacilityMaintenance;
                double num12 = CalculateSupportableForceFunds();
                if (num11 > num12)
                {
                    return DiplomaticRelationType.None;
                }
            }
            if (_Galaxy.StoryReturnOfTheShakturiEnabled && diplomaticRelationType == DiplomaticRelationType.War)
            {
                string text = string.Empty;
                if (currentDiplomaticRelation != null && currentDiplomaticRelation.ThisEmpire != null && currentDiplomaticRelation.ThisEmpire.DominantRace != null)
                {
                    text = currentDiplomaticRelation.ThisEmpire.DominantRace.Name;
                }
                if (text.ToLower(CultureInfo.InvariantCulture) == "mechanoid" && !currentDiplomaticRelation.ThisEmpire.DominantRace.Expanding && currentDiplomaticRelation.ThisEmpire.Reclusive)
                {
                    return DiplomaticRelationType.TradeSanctions;
                }
            }
            if (diplomaticRelationType == DiplomaticRelationType.War && overallAttitude > -80)
            {
                double num13 = (double)aggressionLevel * (double)aggressionLevel * _Galaxy.AggressionLevel;
                int val2 = Math.Max(1, (int)num13);
                val2 = Math.Min(val2, 2);
                int num14 = CountEmpiresWeDeclaredWarOn() + CountEmpiresWhoDeclaredWarOnUs();
                if (num14 >= val2)
                {
                    if (currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate || currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact)
                    {
                        return DiplomaticRelationType.None;
                    }
                    if (currentDiplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion)
                    {
                        return DiplomaticRelationType.SubjugatedDominion;
                    }
                    return DiplomaticRelationType.TradeSanctions;
                }
                if (!CheckWhetherHaveEnoughFleetsForWar(num14))
                {
                    if (currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate || currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact)
                    {
                        return DiplomaticRelationType.None;
                    }
                    if (currentDiplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion)
                    {
                        return DiplomaticRelationType.SubjugatedDominion;
                    }
                    return DiplomaticRelationType.TradeSanctions;
                }
                EmpireEvaluation empireEvaluation2 = ObtainEmpireEvaluation(currentDiplomaticRelation.OtherEmpire);
                if (empireEvaluation2.ReputationWeighted < 0.0)
                {
                    double num15 = empireEvaluation2.ReputationWeighted / (double)overallAttitude;
                    if (num15 > 0.5)
                    {
                        if (currentDiplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || currentDiplomaticRelation.Type == DiplomaticRelationType.Protectorate || currentDiplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact)
                        {
                            return DiplomaticRelationType.None;
                        }
                        if (currentDiplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion)
                        {
                            return DiplomaticRelationType.SubjugatedDominion;
                        }
                        return DiplomaticRelationType.TradeSanctions;
                    }
                }
            }
            return diplomaticRelationType;
        }

        public int CalculateTotalMobileFirepowerAtWarWithUs(Empire empireToExclude)
        {
            int num = 0;
            if (DiplomaticRelations != null)
            {
                for (int i = 0; i < DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                    if (diplomaticRelation != null && diplomaticRelation.OtherEmpire != null && diplomaticRelation.OtherEmpire.BuiltObjects != null && diplomaticRelation.Type == DiplomaticRelationType.War && (empireToExclude == null || diplomaticRelation.OtherEmpire != empireToExclude))
                    {
                        num += diplomaticRelation.OtherEmpire.BuiltObjects.TotalMobileMilitaryFirepower();
                    }
                }
            }
            return num;
        }

        public bool DetermineWhetherWantToOfferSubjugation(Empire empire)
        {
            bool result = false;
            double num = Math.Sqrt(Policy.SubjugationPriority);
            int num2 = (int)(115.0 * num + 15.0 * Galaxy.Rnd.NextDouble());
            int num3 = (int)(100.0 / num + 15.0 * Galaxy.Rnd.NextDouble());
            if (empire.DominantRace.AggressionLevel < num2 && empire.DominantRace.IntelligenceLevel > num3)
            {
                result = true;
            }
            return result;
        }

        private DiplomaticRelationType ResolveTypicalDiplomaticRelationType(int overallAttitude)
        {
            DiplomaticRelationType result = DiplomaticRelationType.None;
            if (overallAttitude <= -50)
            {
                result = DiplomaticRelationType.War;
            }
            if (overallAttitude >= -49 && overallAttitude <= -25)
            {
                result = DiplomaticRelationType.TradeSanctions;
            }
            if (overallAttitude >= -24 && overallAttitude <= 24)
            {
                result = DiplomaticRelationType.None;
            }
            if (overallAttitude >= 25 && overallAttitude <= 49)
            {
                result = DiplomaticRelationType.FreeTradeAgreement;
            }
            if (overallAttitude >= 50)
            {
                result = DiplomaticRelationType.MutualDefensePact;
            }
            return result;
        }

        public void ResolveTypicalAttitudeLevel(DiplomaticRelationType currentDiplomaticRelationType, out int lowerLevel, out int upperLevel)
        {
            lowerLevel = -2147483647;
            upperLevel = int.MaxValue;
            switch (currentDiplomaticRelationType)
            {
                case DiplomaticRelationType.War:
                    lowerLevel = int.MinValue;
                    upperLevel = -50;
                    break;
                case DiplomaticRelationType.TradeSanctions:
                    lowerLevel = -49;
                    upperLevel = -25;
                    break;
                case DiplomaticRelationType.Truce:
                    lowerLevel = -49;
                    upperLevel = -25;
                    break;
                case DiplomaticRelationType.SubjugatedDominion:
                    lowerLevel = -49;
                    upperLevel = 0;
                    break;
                case DiplomaticRelationType.None:
                    lowerLevel = -24;
                    upperLevel = 24;
                    break;
                case DiplomaticRelationType.FreeTradeAgreement:
                    lowerLevel = 25;
                    upperLevel = 49;
                    break;
                case DiplomaticRelationType.MutualDefensePact:
                    lowerLevel = 50;
                    upperLevel = int.MaxValue;
                    break;
                case DiplomaticRelationType.Protectorate:
                    lowerLevel = 50;
                    upperLevel = int.MaxValue;
                    break;
            }
        }

        public bool CheckAssignFleetWaitAndAttackMission(ShipGroup fleet, ref BuiltObjectMissionType missionType, object target, BuiltObjectMissionPriority priority)
        {
            if (missionType == BuiltObjectMissionType.WaitAndAttack || missionType == BuiltObjectMissionType.WaitAndBombard)
            {
                double targetX = 0.0;
                double targetY = 0.0;
                int targetGatherRange = 0;
                if (fleet.CheckNeedRefuelBeforeAttack(target))
                {
                    if (fleet.Empire.AssignFleetWaypointAttackMission(fleet, target, missionType))
                    {
                        return true;
                    }
                }
                else if (fleet.CheckNeedGatherBeforeAttack(target, out targetGatherRange, out targetX, out targetY))
                {
                    double gatherX = 0.0;
                    double gatherY = 0.0;
                    fleet.IdentifyFleetGatherLocation(targetX, targetY, targetGatherRange, out gatherX, out gatherY);
                    if (fleet.Empire.AssignFleetGatherAttackMission(fleet, target, gatherX, gatherY, missionType))
                    {
                        return true;
                    }
                }
                else if (missionType == BuiltObjectMissionType.WaitAndAttack)
                {
                    missionType = BuiltObjectMissionType.Attack;
                }
                else if (missionType == BuiltObjectMissionType.WaitAndBombard)
                {
                    missionType = BuiltObjectMissionType.Bombard;
                }
            }
            if (missionType == BuiltObjectMissionType.WaitAndAttack)
            {
                missionType = BuiltObjectMissionType.Attack;
            }
            else if (missionType == BuiltObjectMissionType.WaitAndBombard)
            {
                missionType = BuiltObjectMissionType.Bombard;
            }
            return false;
        }

        public bool AssignFleetGatherAttackMission(ShipGroup fleet, object target, double gatherX, double gatherY, BuiltObjectMissionType missionType)
        {
            bool result = false;
            if (target is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)target;
                _ = builtObject.Xpos;
                _ = builtObject.Ypos;
            }
            else if (target is Habitat)
            {
                Habitat habitat = (Habitat)target;
                _ = habitat.Xpos;
                _ = habitat.Ypos;
            }
            else if (target is Creature)
            {
                Creature creature = (Creature)target;
                _ = creature.Xpos;
                _ = creature.Ypos;
            }
            else if (target is ShipGroup)
            {
                ShipGroup shipGroup = (ShipGroup)target;
                if (shipGroup.LeadShip != null)
                {
                    _ = shipGroup.LeadShip.Xpos;
                    _ = shipGroup.LeadShip.Ypos;
                }
            }
            long num = 30000L;
            GalaxyLocationList galaxyLocationList = _Galaxy.DetermineGalaxyLocationsAtPoint(gatherX, gatherY, GalaxyLocationType.NebulaCloud);
            if (galaxyLocationList.Count > 0 && galaxyLocationList[0].Effect == GalaxyLocationEffectType.MovementSlowed)
            {
                num = (long)((double)num * 1.333);
            }
            long starDate = DetermineLatestArrivalAtDestination(fleet, gatherX, gatherY) + num;
            if (target is Habitat)
            {
                Habitat target2 = (Habitat)target;
                fleet.ForceCompleteMission();
                switch (missionType)
                {
                    case BuiltObjectMissionType.Attack:
                    case BuiltObjectMissionType.WaitAndAttack:
                        result = fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, target2, null, null, null, gatherX, gatherY, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        break;
                    case BuiltObjectMissionType.WaitAndBombard:
                    case BuiltObjectMissionType.Bombard:
                        result = fleet.AssignMission(BuiltObjectMissionType.WaitAndBombard, target2, null, null, null, gatherX, gatherY, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        break;
                }
            }
            else if (target is BuiltObject)
            {
                BuiltObject target3 = (BuiltObject)target;
                fleet.ForceCompleteMission();
                switch (missionType)
                {
                    case BuiltObjectMissionType.Attack:
                    case BuiltObjectMissionType.WaitAndAttack:
                        result = fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, target3, null, null, null, gatherX, gatherY, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        break;
                    case BuiltObjectMissionType.WaitAndBombard:
                    case BuiltObjectMissionType.Bombard:
                        result = fleet.AssignMission(BuiltObjectMissionType.WaitAndBombard, target3, null, null, null, gatherX, gatherY, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        break;
                }
            }
            else if (target is ShipGroup)
            {
                ShipGroup shipGroup2 = (ShipGroup)target;
                if (shipGroup2.LeadShip.CurrentSpeed < (float)shipGroup2.LeadShip.WarpSpeed && !shipGroup2.LeadShip.HyperjumpPrepare)
                {
                    fleet.ForceCompleteMission();
                    switch (missionType)
                    {
                        case BuiltObjectMissionType.Attack:
                        case BuiltObjectMissionType.WaitAndAttack:
                            result = fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, shipGroup2, null, null, null, gatherX, gatherY, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            break;
                        case BuiltObjectMissionType.WaitAndBombard:
                        case BuiltObjectMissionType.Bombard:
                            result = fleet.AssignMission(BuiltObjectMissionType.WaitAndBombard, shipGroup2, null, null, null, gatherX, gatherY, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            break;
                    }
                }
            }
            return result;
        }

        public bool AssignFleetWaypointAttackMission(ShipGroup fleet, object target, BuiltObjectMissionType missionType)
        {
            bool result = false;
            double x = 0.0;
            double y = 0.0;
            Empire empireToExclude = null;
            if (target != null)
            {
                if (target is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)target;
                    x = builtObject.Xpos;
                    y = builtObject.Ypos;
                    empireToExclude = builtObject.Empire;
                }
                else if (target is Habitat)
                {
                    Habitat habitat = (Habitat)target;
                    x = habitat.Xpos;
                    y = habitat.Ypos;
                    empireToExclude = habitat.Empire;
                }
                else if (target is Creature)
                {
                    Creature creature = (Creature)target;
                    x = creature.Xpos;
                    y = creature.Ypos;
                }
                else if (target is ShipGroup)
                {
                    ShipGroup shipGroup = (ShipGroup)target;
                    if (shipGroup.LeadShip != null)
                    {
                        x = shipGroup.LeadShip.Xpos;
                        y = shipGroup.LeadShip.Ypos;
                        empireToExclude = shipGroup.Empire;
                    }
                }
            }
            ResourceList requiredFuel = DetermineFuelRequiredForFleet(fleet);
            StellarObject stellarObject = DecideBestFleetRefuelPoint(x, y, this, requiredFuel, empireToExclude);
            if (stellarObject != null)
            {
                int num = 2;
                if (stellarObject.DockingBays != null)
                {
                    num = stellarObject.DockingBays.Count;
                }
                long val = fleet.Ships.Count * Galaxy.FleetAssembleAttackWaitPeriodPerShip / num;
                val = Math.Max(val, Galaxy.FleetAssembleAttackWaitPeriodPerShip);
                long num2 = 45000L;
                GalaxyLocationList galaxyLocationList = _Galaxy.DetermineGalaxyLocationsAtPoint(stellarObject.Xpos, stellarObject.Ypos, GalaxyLocationType.NebulaCloud);
                if (galaxyLocationList.Count > 0 && galaxyLocationList[0].Effect == GalaxyLocationEffectType.MovementSlowed)
                {
                    num2 *= (long)((double)num2 * 1.333);
                }
                long starDate = DetermineLatestArrivalAtDestination(fleet, stellarObject) + num2 + val;
                if (target is Habitat)
                {
                    Habitat target2 = (Habitat)target;
                    fleet.ForceCompleteMission();
                    switch (missionType)
                    {
                        case BuiltObjectMissionType.Attack:
                        case BuiltObjectMissionType.WaitAndAttack:
                            result = fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, target2, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            break;
                        case BuiltObjectMissionType.WaitAndBombard:
                        case BuiltObjectMissionType.Bombard:
                            result = fleet.AssignMission(BuiltObjectMissionType.WaitAndBombard, target2, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            break;
                    }
                }
                else if (target is BuiltObject)
                {
                    BuiltObject target3 = (BuiltObject)target;
                    fleet.ForceCompleteMission();
                    switch (missionType)
                    {
                        case BuiltObjectMissionType.Attack:
                        case BuiltObjectMissionType.WaitAndAttack:
                            result = fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, target3, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            break;
                        case BuiltObjectMissionType.WaitAndBombard:
                        case BuiltObjectMissionType.Bombard:
                            result = fleet.AssignMission(BuiltObjectMissionType.WaitAndBombard, target3, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            break;
                    }
                }
                else if (target is ShipGroup)
                {
                    ShipGroup shipGroup2 = (ShipGroup)target;
                    if (shipGroup2.LeadShip.CurrentSpeed < (float)shipGroup2.LeadShip.WarpSpeed && !shipGroup2.LeadShip.HyperjumpPrepare)
                    {
                        fleet.ForceCompleteMission();
                        switch (missionType)
                        {
                            case BuiltObjectMissionType.Attack:
                            case BuiltObjectMissionType.WaitAndAttack:
                                result = fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, shipGroup2, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                break;
                            case BuiltObjectMissionType.WaitAndBombard:
                            case BuiltObjectMissionType.Bombard:
                                result = fleet.AssignMission(BuiltObjectMissionType.WaitAndBombard, shipGroup2, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                break;
                        }
                    }
                }
            }
            return result;
        }

        public long DetermineLatestArrivalAtDestination(ShipGroup fleet, StellarObject destination)
        {
            return DetermineLatestArrivalAtDestination(fleet, destination.Xpos, destination.Ypos);
        }

        public long DetermineLatestArrivalAtDestination(ShipGroup fleet, double x, double y)
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = currentStarDate;
            double val = fleet.WarpSpeed;
            for (int i = 0; i < fleet.Ships.Count; i++)
            {
                BuiltObject builtObject = fleet.Ships[i];
                if (fleet.IsShipAvailable(builtObject))
                {
                    double num2 = _Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, x, y);
                    long num3 = (long)(num2 / Math.Min(builtObject.WarpSpeedWithBonuses, val) * 1000.0);
                    long num4 = 12000L;
                    long num5 = currentStarDate + num3 + num4;
                    if (num5 > num)
                    {
                        num = num5;
                    }
                }
            }
            return num;
        }

        private bool ImplementBlockade(Habitat colony, ref int refusalCount)
        {
            return ImplementBlockade(colony, sendFleet: true, performAuthorizationCheck: true, ref refusalCount);
        }

        public bool CanSendShipToBlockadeColony(Habitat colony)
        {
            if (!colony.IsBlockaded)
            {
                BuiltObject builtObject = _Galaxy.DetermineSpacePortAtColony(colony);
                if (builtObject != null)
                {
                    if (!builtObject.IsBlockaded)
                    {
                        return true;
                    }
                    Blockade blockade = _Galaxy.Blockades[builtObject];
                    if (blockade.Initiator == this)
                    {
                        return true;
                    }
                    return false;
                }
                return true;
            }
            Blockade blockade2 = _Galaxy.Blockades[colony];
            if (blockade2.Initiator == this)
            {
                return true;
            }
            return false;
        }

        public bool CanSendShipToBlockadeBuiltObject(BuiltObject builtObject)
        {
            Blockade blockade = _Galaxy.Blockades[builtObject];
            if (blockade == null)
            {
                return true;
            }
            if (blockade.Initiator == this)
            {
                return true;
            }
            return false;
        }

        public bool SetupBlockade(Habitat colony)
        {
            if (colony != null && !colony.IsBlockaded)
            {
                Blockade blockade = _Galaxy.Blockades[colony];
                if (blockade == null)
                {
                    blockade = new Blockade(colony, this, _Galaxy.CurrentStarDate);
                    BuiltObjectList builtObjectList = new BuiltObjectList();
                    if (colony.Empire != null && colony.Empire != _Galaxy.IndependentEmpire && colony.BasesAtHabitat != null)
                    {
                        for (int i = 0; i < colony.BasesAtHabitat.Count; i++)
                        {
                            BuiltObject builtObject = colony.BasesAtHabitat[i];
                            if (builtObject != null && builtObject.ParentHabitat == colony)
                            {
                                builtObjectList.Add(builtObject);
                            }
                        }
                    }
                    BlockadeList blockadeList = new BlockadeList();
                    if (builtObjectList.Count > 0)
                    {
                        for (int j = 0; j < builtObjectList.Count; j++)
                        {
                            BuiltObject builtObject2 = builtObjectList[j];
                            if (builtObject2 != null)
                            {
                                Blockade blockade2 = _Galaxy.Blockades[builtObject2];
                                if (blockade2 != null)
                                {
                                    return false;
                                }
                                blockade2 = new Blockade(builtObject2, this, _Galaxy.CurrentStarDate);
                                blockadeList.Add(blockade2);
                            }
                        }
                    }
                    _Galaxy.Blockades.Add(blockade);
                    colony.IsBlockaded = true;
                    if (blockadeList.Count > 0)
                    {
                        for (int k = 0; k < blockadeList.Count; k++)
                        {
                            _Galaxy.Blockades.Add(blockadeList[k]);
                            blockadeList[k].BuiltObject.IsBlockaded = true;
                        }
                    }
                    string description = string.Format(TextResolver.GetText("We are initiating a general blockade of your colony at X"), colony.Name);
                    SendMessageToEmpire(colony.Empire, EmpireMessageType.BlockadeInitiated, colony, description);
                    return true;
                }
            }
            return false;
        }

        public bool SetupBlockade(BuiltObject builtObject)
        {
            if (builtObject != null && !builtObject.IsBlockaded)
            {
                Blockade blockade = _Galaxy.Blockades[builtObject];
                if (blockade == null)
                {
                    blockade = new Blockade(builtObject, this, _Galaxy.CurrentStarDate);
                    _Galaxy.Blockades.Add(blockade);
                    builtObject.IsBlockaded = true;
                    string description = string.Format(TextResolver.GetText("We are initiating a general blockade of SPACEPORT"), builtObject.Name);
                    SendMessageToEmpire(builtObject.Empire, EmpireMessageType.BlockadeInitiated, builtObject, description);
                    return true;
                }
            }
            return false;
        }

        public bool ImplementBlockade(Habitat colony, bool sendFleet, bool performAuthorizationCheck)
        {
            int refusalCount = 0;
            return ImplementBlockade(colony, sendFleet, performAuthorizationCheck, ref refusalCount);
        }

        public bool ImplementBlockade(Habitat colony, bool performAuthorizationCheck, ShipGroup fleet)
        {
            int refusalCount = 0;
            return ImplementBlockade(colony, sendFleet: true, performAuthorizationCheck, ref refusalCount, fleet);
        }

        public bool ImplementBlockade(Habitat colony, bool sendFleet, bool performAuthorizationCheck, ref int refusalCount)
        {
            return ImplementBlockade(colony, sendFleet, performAuthorizationCheck, ref refusalCount, null);
        }

        public bool ImplementBlockade(Habitat colony, bool sendFleet, bool performAuthorizationCheck, ref int refusalCount, ShipGroup fleet)
        {
            if (!colony.IsBlockaded)
            {
                if (sendFleet)
                {
                    if (fleet == null)
                    {
                        fleet = FindNearestAvailableFleet(colony.Xpos, colony.Ypos, BuiltObjectMissionPriority.Normal, 0, FleetPosture.Attack, mustBeWithinFuelRange: true);
                    }
                    if (fleet == null)
                    {
                        return false;
                    }
                    bool flag = true;
                    if (performAuthorizationCheck && (fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated))
                    {
                        flag = CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemy(colony, blockade: true, fleet), colony, AdvisorMessageType.EnemyBlockade, fleet, null);
                    }
                    if (flag)
                    {
                        fleet.AssignMission(BuiltObjectMissionType.Blockade, colony, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        return true;
                    }
                }
                else
                {
                    bool flag2 = true;
                    if (performAuthorizationCheck)
                    {
                        flag2 = CheckTaskAuthorized(_ControlMilitaryAttacks, GenerateAutomationMessageAttackEnemy(colony, blockade: true, null), colony, AdvisorMessageType.EnemyBlockade);
                    }
                    if (flag2)
                    {
                        return true;
                    }
                }
                return false;
            }
            return false;
        }

        private bool ImplementBlockade(BuiltObject builtObject, ref int refusalCount)
        {
            return ImplementBlockade(builtObject, sendFleet: true, performAuthorizationCheck: true, ref refusalCount);
        }

        private bool ImplementBlockade(BuiltObject builtObject, ShipGroup fleet)
        {
            int refusalCount = 0;
            return ImplementBlockade(builtObject, sendFleet: true, performAuthorizationCheck: true, ref refusalCount, fleet);
        }

        public bool ImplementBlockade(BuiltObject builtObject, bool sendFleet, bool performAuthorizationCheck)
        {
            int refusalCount = 0;
            return ImplementBlockade(builtObject, sendFleet, performAuthorizationCheck, ref refusalCount);
        }

        public bool ImplementBlockade(BuiltObject builtObject, bool sendFleet, bool performAuthorizationCheck, ref int refusalCount)
        {
            return ImplementBlockade(builtObject, sendFleet, performAuthorizationCheck, ref refusalCount, null);
        }

        public bool ImplementBlockade(BuiltObject builtObject, bool sendFleet, bool performAuthorizationCheck, ref int refusalCount, ShipGroup fleet)
        {
            Blockade blockade = _Galaxy.Blockades[builtObject];
            if (blockade == null)
            {
                if (sendFleet)
                {
                    if (fleet == null)
                    {
                        fleet = FindNearestAvailableFleet(builtObject.Xpos, builtObject.Ypos, BuiltObjectMissionPriority.Normal, 0, FleetPosture.Attack, mustBeWithinFuelRange: true);
                    }
                    if (fleet == null)
                    {
                        return false;
                    }
                    bool flag = true;
                    if (performAuthorizationCheck && (fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated))
                    {
                        flag = CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemy(builtObject, blockade: true, fleet), builtObject, AdvisorMessageType.EnemyBlockade, fleet, null);
                    }
                    if (flag)
                    {
                        fleet.AssignMission(BuiltObjectMissionType.Blockade, builtObject, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        return true;
                    }
                }
                else
                {
                    bool flag2 = true;
                    if (performAuthorizationCheck)
                    {
                        flag2 = CheckTaskAuthorized(_ControlMilitaryAttacks, GenerateAutomationMessageAttackEnemy(builtObject, blockade: true, null), builtObject, AdvisorMessageType.EnemyBlockade);
                    }
                    if (flag2)
                    {
                        return true;
                    }
                }
                return false;
            }
            return false;
        }

        public void CancelBlockades(Empire targetEmpire)
        {
            BlockadeList blockadesForEmpire = _Galaxy.Blockades.GetBlockadesForEmpire(this);
            BlockadeList blockadeList = new BlockadeList();
            foreach (Blockade item in blockadesForEmpire)
            {
                if (item.BlockadedEmpire == targetEmpire)
                {
                    blockadeList.Add(item);
                }
            }
            foreach (Blockade item2 in blockadeList)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    shipGroup.ClearAllMissionsForTarget(shipGroup, item2.BlockadedEmpire, BuiltObjectMissionType.Blockade);
                }
                for (int j = 0; j < BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject = BuiltObjects[j];
                    if (builtObject != null && !builtObject.HasBeenDestroyed)
                    {
                        builtObject.ClearAllMissionsForTarget(builtObject, item2.BlockadedEmpire, BuiltObjectMissionType.Blockade, dropOutOfHyperspace: true);
                    }
                }
                if (item2.TargetIsColony)
                {
                    item2.Colony.IsBlockaded = false;
                    string description = string.Format(TextResolver.GetText("We are lifting our blockade of your colony at X"), item2.Colony.Name);
                    SendMessageToEmpire(item2.Colony.Empire, EmpireMessageType.BlockadeCancelled, item2.Colony, description);
                }
                else
                {
                    item2.BuiltObject.IsBlockaded = false;
                    string description2 = string.Format(TextResolver.GetText("We are lifting our blockade of SPACEPORT"), item2.BuiltObject.Name);
                    SendMessageToEmpire(item2.BuiltObject.Empire, EmpireMessageType.BlockadeCancelled, item2.BuiltObject, description2);
                }
                _Galaxy.Blockades.Remove(item2);
            }
        }

        public void CancelBlockade(BuiltObject builtObject)
        {
            Blockade blockade = _Galaxy.Blockades[builtObject];
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(blockade != null, 50, ref iterationCount))
            {
                if (blockade.Initiator != null && blockade.Initiator.ShipGroups != null)
                {
                    foreach (ShipGroup shipGroup in blockade.Initiator.ShipGroups)
                    {
                        shipGroup.ClearAllMissionsForTarget(shipGroup, builtObject, BuiltObjectMissionType.Blockade);
                    }
                }
                if (blockade.BuiltObject != null)
                {
                    blockade.BuiltObject.IsBlockaded = false;
                    string description = string.Format(TextResolver.GetText("The blockade of X has ended"), blockade.BuiltObject.Name);
                    if (blockade.BuiltObject.Empire != null)
                    {
                        blockade.BuiltObject.Empire.SendMessageToEmpire(blockade.BuiltObject.Empire, EmpireMessageType.BlockadeCancelled, blockade.BuiltObject, description);
                    }
                }
                _Galaxy.Blockades.Remove(blockade);
                blockade = _Galaxy.Blockades[builtObject];
            }
        }

        public void CancelBlockade(Habitat colony)
        {
            Blockade blockade = _Galaxy.Blockades[colony];
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(blockade != null, 50, ref iterationCount))
            {
                BuiltObject builtObject = _Galaxy.DetermineSpacePortAtColony(colony);
                if (builtObject != null)
                {
                    CancelBlockade(builtObject);
                }
                if (blockade.Initiator != null && blockade.Initiator.ShipGroups != null && blockade.Initiator.ShipGroups != null)
                {
                    foreach (ShipGroup shipGroup in blockade.Initiator.ShipGroups)
                    {
                        shipGroup.ClearAllMissionsForTarget(shipGroup, colony, BuiltObjectMissionType.Blockade);
                    }
                }
                if (blockade.Colony != null)
                {
                    blockade.Colony.IsBlockaded = false;
                    string description = string.Format(TextResolver.GetText("The blockade of X has ended"), blockade.Colony.Name);
                    if (blockade.Colony.Empire != null)
                    {
                        blockade.Colony.Empire.SendMessageToEmpire(blockade.Colony.Empire, EmpireMessageType.BlockadeCancelled, blockade.Colony, description);
                    }
                }
                _Galaxy.Blockades.Remove(blockade);
                blockade = _Galaxy.Blockades[colony];
            }
        }

        public void CancelAttacks(BuiltObject builtObject)
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                for (int j = 0; j < empire.ShipGroups.Count; j++)
                {
                    ShipGroup shipGroup = empire.ShipGroups[j];
                    shipGroup.ClearAllMissionsForTarget(shipGroup, builtObject, BuiltObjectMissionType.Attack);
                    shipGroup.ClearAllMissionsForTarget(shipGroup, builtObject, BuiltObjectMissionType.WaitAndAttack);
                    shipGroup.ClearAllMissionsForTarget(shipGroup, builtObject, BuiltObjectMissionType.Capture);
                    shipGroup.ClearAllMissionsForTarget(shipGroup, builtObject, BuiltObjectMissionType.Raid);
                }
            }
        }

        public void CancelAllShipAttacksNonEnemies(BuiltObject builtObject)
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                bool flag = true;
                if (empire != this && empire.PirateEmpireBaseHabitat == null && PirateEmpireBaseHabitat == null)
                {
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        flag = false;
                    }
                }
                if (!flag)
                {
                    continue;
                }
                foreach (BuiltObject builtObject2 in empire.BuiltObjects)
                {
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.Attack, dropOutOfHyperspace: true);
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.WaitAndAttack, dropOutOfHyperspace: true);
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.Capture, dropOutOfHyperspace: true);
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.Raid, dropOutOfHyperspace: true);
                }
            }
        }

        public void CancelAllShipAttacksNonEnemies(Habitat colony)
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                bool flag = true;
                if (empire != this && PirateEmpireBaseHabitat == null && empire.PirateEmpireBaseHabitat == null)
                {
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        flag = false;
                    }
                }
                if (!flag)
                {
                    continue;
                }
                foreach (BuiltObject builtObject in empire.BuiltObjects)
                {
                    builtObject.ClearAllMissionsForTarget(builtObject, colony, BuiltObjectMissionType.Attack, dropOutOfHyperspace: true);
                    builtObject.ClearAllMissionsForTarget(builtObject, colony, BuiltObjectMissionType.WaitAndAttack, dropOutOfHyperspace: true);
                    builtObject.ClearAllMissionsForTarget(builtObject, colony, BuiltObjectMissionType.Bombard, dropOutOfHyperspace: true);
                    builtObject.ClearAllMissionsForTarget(builtObject, colony, BuiltObjectMissionType.WaitAndBombard, dropOutOfHyperspace: true);
                }
            }
        }

        public void CancelAllShipAttacks(BuiltObject builtObject)
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                for (int j = 0; j < empire.BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = empire.BuiltObjects[j];
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.Attack, dropOutOfHyperspace: true);
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.WaitAndAttack, dropOutOfHyperspace: true);
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.Capture, dropOutOfHyperspace: true);
                    builtObject2.ClearAllMissionsForTarget(builtObject2, builtObject, BuiltObjectMissionType.Raid, dropOutOfHyperspace: true);
                }
            }
        }

        public void CancelAllShipAttacks(Habitat colony, bool alsoCancelAttackForBases)
        {
            if (alsoCancelAttackForBases)
            {
                BuiltObject builtObject = _Galaxy.DetermineSpacePortAtColony(colony);
                if (builtObject != null)
                {
                    CancelAllShipAttacks(builtObject);
                }
                if (colony.BasesAtHabitat != null)
                {
                    for (int i = 0; i < colony.BasesAtHabitat.Count; i++)
                    {
                        BuiltObject builtObject2 = colony.BasesAtHabitat[i];
                        CancelAllShipAttacks(builtObject2);
                    }
                }
            }
            for (int j = 0; j < _Galaxy.Empires.Count; j++)
            {
                Empire empire = _Galaxy.Empires[j];
                for (int k = 0; k < empire.BuiltObjects.Count; k++)
                {
                    BuiltObject builtObject3 = empire.BuiltObjects[k];
                    builtObject3.ClearAllMissionsForTarget(builtObject3, colony, BuiltObjectMissionType.Attack, dropOutOfHyperspace: true);
                    builtObject3.ClearAllMissionsForTarget(builtObject3, colony, BuiltObjectMissionType.WaitAndAttack, dropOutOfHyperspace: true);
                    builtObject3.ClearAllMissionsForTarget(builtObject3, colony, BuiltObjectMissionType.Bombard, dropOutOfHyperspace: true);
                    builtObject3.ClearAllMissionsForTarget(builtObject3, colony, BuiltObjectMissionType.WaitAndBombard, dropOutOfHyperspace: true);
                    builtObject3.ClearAllMissionsForTarget(builtObject3, colony, BuiltObjectMissionType.Raid, dropOutOfHyperspace: true);
                }
            }
        }

        public void CancelAllShipUnloadTroops(Habitat colony)
        {
            if (colony == null)
            {
                return;
            }
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != null && empire.BuiltObjects != null)
                {
                    for (int j = 0; j < empire.BuiltObjects.Count; j++)
                    {
                        BuiltObject builtObject = empire.BuiltObjects[j];
                        builtObject?.ClearAllMissionsForTarget(builtObject, colony, BuiltObjectMissionType.UnloadTroops, dropOutOfHyperspace: true);
                    }
                }
            }
        }

        public void CancelAttacks(Habitat colony)
        {
            BuiltObject builtObject = _Galaxy.DetermineSpacePortAtColony(colony);
            if (builtObject != null)
            {
                CancelAttacks(builtObject);
            }
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                for (int j = 0; j < empire.ShipGroups.Count; j++)
                {
                    ShipGroup shipGroup = empire.ShipGroups[j];
                    shipGroup.ClearAllMissionsForTarget(shipGroup, colony, BuiltObjectMissionType.Attack);
                    shipGroup.ClearAllMissionsForTarget(shipGroup, colony, BuiltObjectMissionType.WaitAndAttack);
                    shipGroup.ClearAllMissionsForTarget(shipGroup, colony, BuiltObjectMissionType.Bombard);
                    shipGroup.ClearAllMissionsForTarget(shipGroup, colony, BuiltObjectMissionType.WaitAndBombard);
                    shipGroup.ClearAllMissionsForTarget(shipGroup, colony, BuiltObjectMissionType.Raid);
                }
            }
        }

        public void CancelUnloadTroops(Habitat colony)
        {
            if (colony == null)
            {
                return;
            }
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != null && empire.ShipGroups != null)
                {
                    for (int j = 0; j < empire.ShipGroups.Count; j++)
                    {
                        ShipGroup shipGroup = empire.ShipGroups[j];
                        shipGroup?.ClearAllMissionsForTarget(shipGroup, colony, BuiltObjectMissionType.UnloadTroops);
                    }
                }
            }
        }

        public void CancelAllCharacterTransfers(Habitat colony)
        {
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire == null || empire.Characters == null)
                {
                    continue;
                }
                for (int j = 0; j < empire.Characters.Count; j++)
                {
                    Character character = empire.Characters[j];
                    if (character != null && character.TransferDestination == colony && character.TransferTimeRemaining > 0f && character.Location != character.TransferDestination)
                    {
                        character.ResetTransfer();
                    }
                }
            }
        }

        private int CountFleetAttackStrengthAssignedToTarget(StellarObject target, out int troopStrengthAssigned)
        {
            int num = 0;
            troopStrengthAssigned = 0;
            if (target != null)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || (shipGroup.Mission.Type != BuiltObjectMissionType.Attack && shipGroup.Mission.Type != BuiltObjectMissionType.Blockade && shipGroup.Mission.Type != BuiltObjectMissionType.WaitAndAttack && shipGroup.Mission.Type != BuiltObjectMissionType.Bombard && shipGroup.Mission.Type != BuiltObjectMissionType.WaitAndBombard))
                    {
                        continue;
                    }
                    if (shipGroup.Mission.TargetBuiltObject != null && target is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)target;
                        if (builtObject == shipGroup.Mission.TargetBuiltObject)
                        {
                            num += shipGroup.TotalOverallStrengthFactor;
                            troopStrengthAssigned += shipGroup.TotalTroopAttackStrength;
                        }
                    }
                    else if (shipGroup.Mission.TargetHabitat != null && target is Habitat)
                    {
                        Habitat habitat = (Habitat)target;
                        if (habitat == shipGroup.Mission.TargetHabitat)
                        {
                            num += shipGroup.TotalOverallStrengthFactor;
                            troopStrengthAssigned += shipGroup.TotalTroopAttackStrength;
                        }
                    }
                }
            }
            return num;
        }

        private int CountFleetAttackStrengthAssignedToTarget(PrioritizedTarget target)
        {
            int num = 0;
            if (target.Target != null)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || (shipGroup.Mission.Type != BuiltObjectMissionType.Attack && shipGroup.Mission.Type != BuiltObjectMissionType.Blockade && shipGroup.Mission.Type != BuiltObjectMissionType.WaitAndAttack && shipGroup.Mission.Type != BuiltObjectMissionType.Bombard && shipGroup.Mission.Type != BuiltObjectMissionType.WaitAndBombard))
                    {
                        continue;
                    }
                    if (shipGroup.Mission.TargetBuiltObject != null && target.Target is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)target.Target;
                        if (builtObject == shipGroup.Mission.TargetBuiltObject)
                        {
                            num += shipGroup.TotalOverallStrengthFactor;
                        }
                    }
                    else if (shipGroup.Mission.TargetHabitat != null && target.Target is Habitat)
                    {
                        Habitat habitat = (Habitat)target.Target;
                        if (habitat == shipGroup.Mission.TargetHabitat)
                        {
                            num += shipGroup.TotalOverallStrengthFactor;
                        }
                    }
                    else if (shipGroup.Mission.TargetShipGroup != null && target.Target is ShipGroup)
                    {
                        ShipGroup shipGroup2 = (ShipGroup)target.Target;
                        if (shipGroup2 == shipGroup.Mission.TargetShipGroup)
                        {
                            num += shipGroup.TotalOverallStrengthFactor;
                        }
                    }
                }
            }
            return num;
        }

        private int CountShipGroupsAssignedToEmpire(Empire empire, bool includeSmallFleets)
        {
            int num = 0;
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if ((includeSmallFleets || shipGroup.ShipTargetAmount >= 10 || shipGroup.Ships.Count >= 10) && shipGroup.Mission != null && shipGroup.Mission.Type != 0)
                {
                    Empire empire2 = null;
                    if (shipGroup.Mission.TargetBuiltObject != null)
                    {
                        empire2 = shipGroup.Mission.TargetBuiltObject.Empire;
                    }
                    else if (shipGroup.Mission.TargetHabitat != null)
                    {
                        empire2 = shipGroup.Mission.TargetHabitat.Empire;
                    }
                    else if (shipGroup.Mission.TargetShipGroup != null)
                    {
                        empire2 = shipGroup.Mission.TargetShipGroup.Empire;
                    }
                    if (empire2 == empire)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        public void IdentifyMilitaryObjectives()
        {
            int refusalCount = 0;
            double intoleranceLevel = _Galaxy.IntoleranceLevel;
            int num = 0;
            int num2 = 0;
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                    num2++;
                    if (diplomaticRelation.Initiator == this)
                    {
                        num++;
                    }
                }
            }
            if (num2 > 3)
            {
                num2 = 3;
            }
            int num3 = ShipGroups.CountLargeFleets();
            int num4 = 0;
            if (PlanetDestroyers != null)
            {
                num4 = PlanetDestroyers.Count;
            }
            int maximumAttacksForEmpireWeDeclaredWarOn = num3;
            int maximumAttacksForEmpire = num3;
            int maximumBlockadesForEmpire = num3;
            int maximumPreparationsForEmpire = num3;
            int maximumPlanetDestroyerAttacksForEmpire = num4;
            if (num2 > 0)
            {
                maximumAttacksForEmpire = 1 + num3 / num2;
                maximumPlanetDestroyerAttacksForEmpire = 1 + num4 / num2;
                maximumBlockadesForEmpire = 0;
                maximumPreparationsForEmpire = 0;
                if (num > 0)
                {
                    maximumAttacksForEmpireWeDeclaredWarOn = 1 + num3 / num;
                    if (num3 > num)
                    {
                        maximumAttacksForEmpire = 1;
                        if (num3 > num * 2)
                        {
                            maximumBlockadesForEmpire = 0;
                            maximumPreparationsForEmpire = 0;
                        }
                        else
                        {
                            maximumBlockadesForEmpire = 0;
                            maximumPreparationsForEmpire = 0;
                        }
                    }
                    else
                    {
                        maximumAttacksForEmpire = 0;
                        maximumBlockadesForEmpire = 0;
                        maximumPreparationsForEmpire = 0;
                    }
                }
            }
            if (_ControlMilitaryAttacks != 0 && Policy.UseExplorationShipsToScoutEnemySystems)
            {
                SendScoutShipsToEnemyLocations(empireList);
            }
            if (empireList != null && empireList.Count > 0)
            {
                empireList = _Galaxy.SortEmpiresByMilitaryPriority(this, empireList);
                for (int j = 0; j < empireList.Count; j++)
                {
                    EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(empireList[j]);
                    if (!IdentifyMilitaryObjectivesForSingleEmpire(empireList[j], empireEvaluation.OverallAttitude, maximumAttacksForEmpireWeDeclaredWarOn, maximumAttacksForEmpire, maximumPlanetDestroyerAttacksForEmpire, maximumBlockadesForEmpire, maximumPreparationsForEmpire, intoleranceLevel, ref refusalCount))
                    {
                        break;
                    }
                }
            }
            int num5 = Galaxy.Rnd.Next(0, EmpireEvaluations.Count);
            for (int k = num5; k < EmpireEvaluations.Count && (empireList.Contains(EmpireEvaluations[k].Empire) || IdentifyMilitaryObjectivesForSingleEmpire(EmpireEvaluations[k].Empire, EmpireEvaluations[k].OverallAttitude, maximumAttacksForEmpireWeDeclaredWarOn, maximumAttacksForEmpire, maximumPlanetDestroyerAttacksForEmpire, maximumBlockadesForEmpire, maximumPreparationsForEmpire, intoleranceLevel, ref refusalCount)); k++)
            {
            }
            for (int l = 0; l < num5 && (empireList.Contains(EmpireEvaluations[l].Empire) || IdentifyMilitaryObjectivesForSingleEmpire(EmpireEvaluations[l].Empire, EmpireEvaluations[l].OverallAttitude, maximumAttacksForEmpireWeDeclaredWarOn, maximumAttacksForEmpire, maximumPlanetDestroyerAttacksForEmpire, maximumBlockadesForEmpire, maximumPreparationsForEmpire, intoleranceLevel, ref refusalCount)); l++)
            {
            }
        }

        private void ClearExpiredDeclinedTasks()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            DeclinedTaskList declinedTaskList = new DeclinedTaskList();
            for (int i = 0; i < _DeclinedTasks.Count; i++)
            {
                if (_DeclinedTasks[i].ExpiryDate < currentStarDate)
                {
                    declinedTaskList.Add(_DeclinedTasks[i]);
                }
            }
            foreach (DeclinedTask item in declinedTaskList)
            {
                _DeclinedTasks.Remove(item);
            }
        }

        private bool CheckTaskAuthorized(AutomationLevel automationLevel, string taskDescription, object taskTarget, AdvisorMessageType advisorMessageType)
        {
            int refusalCount = 0;
            return CheckTaskAuthorized(automationLevel, ref refusalCount, taskDescription, taskTarget, advisorMessageType, null);
        }

        private bool CheckTaskAuthorized(AutomationLevel automationLevel, ref int refusalCount, string taskDescription, object taskTarget, AdvisorMessageType advisorMessageType)
        {
            return CheckTaskAuthorized(automationLevel, ref refusalCount, taskDescription, taskTarget, advisorMessageType, null);
        }

        private bool CheckTaskAuthorized(AutomationLevel automationLevel, ref int refusalCount, string taskDescription, object taskTarget, AdvisorMessageType advisorMessageType, Empire attackEmpireTarget)
        {
            return CheckTaskAuthorized(automationLevel, ref refusalCount, taskDescription, taskTarget, advisorMessageType, attackEmpireTarget, null, null);
        }

        public bool CheckTaskAuthorized(AutomationLevel automationLevel, ref int refusalCount, string taskDescription, object taskTarget, AdvisorMessageType advisorMessageType, object advisorMessageData, object advisorMessageData2)
        {
            return CheckTaskAuthorized(automationLevel, ref refusalCount, taskDescription, taskTarget, advisorMessageType, null, advisorMessageData, advisorMessageData2);
        }

        private bool CheckTaskAuthorized(AutomationLevel automationLevel, ref int refusalCount, string taskDescription, object taskTarget, AdvisorMessageType advisorMessageType, Empire attackEmpireTarget, object advisorMessageData, object advisorMessageData2)
        {
            bool result = true;
            switch (automationLevel)
            {
                case AutomationLevel.SemiAutomated:
                    {
                        result = false;
                        long currentStarDate = _Galaxy.CurrentStarDate;
                        if (refusalCount >= Galaxy.MaximumMissionRefusals || !_DeclinedTasks.CheckTaskTargetValid(taskTarget, currentStarDate) || (attackEmpireTarget != null && !_DeclinedTasks.CheckAttackEmpireTargetValid(attackEmpireTarget, currentStarDate)))
                        {
                            break;
                        }
                        _AutomationResponse = AutomationResponse.Undefined;
                        if (this == _Galaxy.PlayerEmpire)
                        {
                            refusalCount++;
                            EmpireMessage empireMessage = new EmpireMessage(this, EmpireMessageType.AdvisorSuggestion, taskTarget);
                            empireMessage.StarDate = currentStarDate;
                            empireMessage.AdvisorMessageType = advisorMessageType;
                            empireMessage.Description = taskDescription;
                            if (advisorMessageType == AdvisorMessageType.DiplomaticGift)
                            {
                                empireMessage.Money = (int)(double)advisorMessageData;
                            }
                            else
                            {
                                empireMessage.AdvisorMessageData = advisorMessageData;
                            }
                            empireMessage.AdvisorMessageData2 = advisorMessageData2;
                            PromptPlayerForAuthorization(taskDescription, taskTarget, empireMessage);
                            if (attackEmpireTarget != null)
                            {
                                long expiryDate = currentStarDate + 240000;
                                _DeclinedTasks.Add(new DeclinedTask(expiryDate, attackEmpireTarget));
                            }
                            if (taskTarget != null)
                            {
                                long expiryDate2 = currentStarDate + 600000;
                                if (taskTarget is BuiltObject)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((BuiltObject)taskTarget, expiryDate2));
                                }
                                else if (taskTarget is Habitat)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((Habitat)taskTarget, expiryDate2));
                                }
                                else if (taskTarget is IntelligenceMission)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((IntelligenceMission)taskTarget, expiryDate2));
                                }
                                else if (taskTarget is Empire)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((Empire)taskTarget, expiryDate2));
                                }
                            }
                            return false;
                        }
                        _AutomationResponse = AutomationResponse.Yes;
                        while (_AutomationResponse == AutomationResponse.Undefined)
                        {
                            Thread.Sleep(50);
                            if (this != _Galaxy.PlayerEmpire)
                            {
                                _AutomationResponse = AutomationResponse.Yes;
                            }
                        }
                        if (_AutomationResponse == AutomationResponse.Yes)
                        {
                            result = true;
                        }
                        else if (_AutomationResponse == AutomationResponse.No)
                        {
                            if (attackEmpireTarget != null)
                            {
                                long expiryDate3 = currentStarDate + 240000;
                                _DeclinedTasks.Add(new DeclinedTask(expiryDate3, attackEmpireTarget));
                            }
                            if (taskTarget != null)
                            {
                                long expiryDate4 = currentStarDate + 600000;
                                if (taskTarget is BuiltObject)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((BuiltObject)taskTarget, expiryDate4));
                                }
                                else if (taskTarget is Habitat)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((Habitat)taskTarget, expiryDate4));
                                }
                                else if (taskTarget is IntelligenceMission)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((IntelligenceMission)taskTarget, expiryDate4));
                                }
                                else if (taskTarget is Empire)
                                {
                                    _DeclinedTasks.Add(new DeclinedTask((Empire)taskTarget, expiryDate4));
                                }
                            }
                        }
                        _AutomationResponse = AutomationResponse.Undefined;
                        break;
                    }
                case AutomationLevel.Manual:
                    result = false;
                    break;
            }
            return result;
        }

        public bool CheckBombardEnemyColony(Habitat enemyColony, ShipGroup attackFleet)
        {
            bool result = false;
            if (enemyColony.Empire != this && enemyColony.Population != null && enemyColony.Population.TotalAmount > 0)
            {
                if (attackFleet.TotalBombardPower > 0)
                {
                    result = Galaxy.CheckUseBombardmentAgainstEmpire(this, enemyColony.Empire);
                }
                if (enemyColony.PlanetaryShieldPresent)
                {
                    result = false;
                }
            }
            return result;
        }

        public bool AssignFleetAttackMission(ShipGroup fleet, ref PrioritizedTargetList targets, ref int refusalCount)
        {
            bool flag = false;
            bool flag2 = false;
            if (IsShipGroupAvailableWithAttackStrength(fleet, BuiltObjectMissionPriority.Normal, 0))
            {
                PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
                PrioritizedTarget prioritizedTarget = null;
                int iterationCount = 0;
                while (Galaxy.ConditionCheckLimit(!flag && !flag2, 200, ref iterationCount))
                {
                    prioritizedTarget = targets.IdentifyBestTargetFromLocation(this, fleet.LeadShip.Xpos, fleet.LeadShip.Ypos, fleet.TotalTroopAttackStrengthNearby(0.3), fleet.TotalOverallStrengthFactor, prioritizedTargetList);
                    if (prioritizedTarget != null)
                    {
                        prioritizedTargetList.Add(prioritizedTarget);
                        int num = CountFleetAttackStrengthAssignedToTarget(prioritizedTarget);
                        if (prioritizedTarget.LocationStrength < num)
                        {
                            continue;
                        }
                        if (prioritizedTarget.Target is ShipGroup)
                        {
                            ShipGroup shipGroup = (ShipGroup)prioritizedTarget.Target;
                            if (shipGroup.LeadShip.CurrentSpeed < (float)shipGroup.LeadShip.WarpSpeed && !shipGroup.LeadShip.HyperjumpPrepare)
                            {
                                int locationStrength = prioritizedTarget.LocationStrength;
                                if (fleet.TotalOverallStrengthFactor > locationStrength && fleet.CheckFleetTargetWithinFuelRangeAndRefuel(shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos, 0.0) && (fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemy(shipGroup, fleet), shipGroup, AdvisorMessageType.EnemyAttack, fleet, null))
                                {
                                    fleet.ForceCompleteMission();
                                    fleet.AssignMission(BuiltObjectMissionType.Attack, shipGroup, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    flag = true;
                                }
                            }
                            continue;
                        }
                        int num2 = Galaxy.DetermineRequiredTroopStrength(this, prioritizedTarget.Target);
                        if (fleet.TotalTroopAttackStrengthNearby(0.3) < num2)
                        {
                            continue;
                        }
                        BuiltObjectMissionType builtObjectMissionType = BuiltObjectMissionType.Attack;
                        AdvisorMessageType advisorMessageType = AdvisorMessageType.EnemyAttack;
                        double num3 = -1.0;
                        double num4 = -1.0;
                        if (prioritizedTarget.Target is BuiltObject)
                        {
                            BuiltObject builtObject = (BuiltObject)prioritizedTarget.Target;
                            num3 = builtObject.Xpos;
                            num4 = builtObject.Ypos;
                        }
                        else if (prioritizedTarget.Target is Habitat)
                        {
                            Habitat habitat = (Habitat)prioritizedTarget.Target;
                            num3 = habitat.Xpos;
                            num4 = habitat.Ypos;
                            if (CheckBombardEnemyColony(habitat, fleet))
                            {
                                builtObjectMissionType = BuiltObjectMissionType.Bombard;
                                advisorMessageType = AdvisorMessageType.EnemyBombard;
                            }
                        }
                        if (fleet.CheckFleetTargetWithinFuelRangeAndRefuel(num3, num4, 0.0))
                        {
                            if (prioritizedTarget.Target is Habitat)
                            {
                                Habitat habitat2 = (Habitat)prioritizedTarget.Target;
                                string taskDescription = GenerateAutomationMessageAttackEnemy(habitat2, fleet);
                                if (builtObjectMissionType == BuiltObjectMissionType.Bombard)
                                {
                                    taskDescription = GenerateAutomationMessageBombardColony(habitat2, fleet);
                                }
                                if ((fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, taskDescription, habitat2, advisorMessageType, fleet, null))
                                {
                                    fleet.ForceCompleteMission();
                                    fleet.AssignMission(builtObjectMissionType, habitat2, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    flag = true;
                                }
                            }
                            else if (prioritizedTarget.Target is BuiltObject)
                            {
                                BuiltObject builtObject2 = (BuiltObject)prioritizedTarget.Target;
                                if ((fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemy(builtObject2, fleet), builtObject2, advisorMessageType, fleet, null))
                                {
                                    fleet.ForceCompleteMission();
                                    fleet.AssignMission(builtObjectMissionType, builtObject2, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    flag = true;
                                }
                            }
                            else if (prioritizedTarget.Target is ShipGroup)
                            {
                                ShipGroup shipGroup2 = (ShipGroup)prioritizedTarget.Target;
                                if (shipGroup2.LeadShip.CurrentSpeed < (float)shipGroup2.LeadShip.WarpSpeed && !shipGroup2.LeadShip.HyperjumpPrepare && (fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemy(shipGroup2, fleet), shipGroup2, advisorMessageType, fleet, null))
                                {
                                    fleet.ForceCompleteMission();
                                    fleet.AssignMission(builtObjectMissionType, shipGroup2, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    flag = true;
                                }
                            }
                        }
                        else
                        {
                            if (fleet.WarpSpeed <= 0)
                            {
                                continue;
                            }
                            ResourceList requiredFuel = DetermineFuelRequiredForFleet(fleet);
                            StellarObject stellarObject = SelectWayPoint(prioritizedTarget, requiredFuel);
                            if (stellarObject == null || stellarObject.DockingBays == null || stellarObject.DockingBays.Count <= 0)
                            {
                                continue;
                            }
                            double num5 = fleet.MaximumRange();
                            double num6 = _Galaxy.CalculateDistance(stellarObject.Xpos, stellarObject.Ypos, num3, num4);
                            if (!(num6 < num5 * 0.45))
                            {
                                continue;
                            }
                            int num7 = 2;
                            if (stellarObject.DockingBays != null)
                            {
                                num7 = Math.Max(1, stellarObject.DockingBays.Count);
                            }
                            long num8 = fleet.Ships.Count * Galaxy.FleetAssembleAttackWaitPeriodPerShip / num7;
                            long starDate = DetermineLatestArrivalAtDestination(fleet, stellarObject) + num8;
                            if (!fleet.CheckFleetTargetWithinFuelRange(stellarObject.Xpos, stellarObject.Ypos, 0.1))
                            {
                                stellarObject = null;
                            }
                            if (stellarObject == null)
                            {
                                continue;
                            }
                            if (prioritizedTarget.Target is Habitat)
                            {
                                Habitat habitat3 = (Habitat)prioritizedTarget.Target;
                                if ((fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemyWithWaypoint(habitat3, blockade: false, fleet, stellarObject), habitat3, AdvisorMessageType.EnemyAttack, fleet, stellarObject))
                                {
                                    fleet.ForceCompleteMission();
                                    fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, habitat3, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    flag = true;
                                }
                            }
                            else if (prioritizedTarget.Target is BuiltObject)
                            {
                                BuiltObject builtObject3 = (BuiltObject)prioritizedTarget.Target;
                                if ((fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemyWithWaypoint(builtObject3, blockade: false, fleet, stellarObject), builtObject3, AdvisorMessageType.EnemyAttack, fleet, stellarObject))
                                {
                                    fleet.ForceCompleteMission();
                                    fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, builtObject3, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    flag = true;
                                }
                            }
                            else if (prioritizedTarget.Target is ShipGroup)
                            {
                                ShipGroup shipGroup3 = (ShipGroup)prioritizedTarget.Target;
                                if (shipGroup3.LeadShip.CurrentSpeed < (float)shipGroup3.LeadShip.WarpSpeed && !shipGroup3.LeadShip.HyperjumpPrepare && (fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackEnemy(shipGroup3, fleet), shipGroup3, AdvisorMessageType.EnemyAttack, fleet, stellarObject))
                                {
                                    fleet.ForceCompleteMission();
                                    fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, shipGroup3, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    flag = true;
                                }
                            }
                            else if ((fleet.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, "", null, AdvisorMessageType.EnemyAttack, prioritizedTarget.Empire))
                            {
                                fleet.ForceCompleteMission();
                                fleet.AssignMission(BuiltObjectMissionType.WaitAndAttack, prioritizedTarget.Target, stellarObject, starDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                flag = true;
                            }
                            if (flag && fleet.LeadShip.IsAutoControlled && stellarObject is BuiltObject)
                            {
                                BuiltObject builtObject4 = (BuiltObject)stellarObject;
                                if (builtObject4.ParentHabitat != null && (builtObject4.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject4.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject4.SubRole == BuiltObjectSubRole.LargeSpacePort))
                                {
                                    fleet.GatherPoint = builtObject4.ParentHabitat;
                                }
                            }
                        }
                    }
                    else
                    {
                        flag2 = true;
                    }
                }
                if (flag && !flag2 && prioritizedTarget != null && prioritizedTarget.LocationStrength < fleet.TotalOverallStrengthFactor)
                {
                    targets.Remove(prioritizedTarget);
                }
            }
            return flag;
        }

        public StellarObject SelectWayPointOnTheWay(ShipGroup fleet, double targetX, double targetY, Empire targetEmpire)
        {
            if (fleet.LeadShip != null)
            {
                double maxFuelRange = fleet.LeadShip.CurrentRange();
                return SelectWayPointOnTheWay(fleet.LeadShip.Xpos, fleet.LeadShip.Ypos, targetX, targetY, fleet.Empire, targetEmpire, fleet.LeadShip.FuelType, maxFuelRange, fleet);
            }
            return null;
        }

        public StellarObject SelectWayPointOnTheWay(double x, double y, double targetX, double targetY, Empire empire, Empire empireToExclude, Resource fuelType, double maxFuelRange, ShipGroup fleet)
        {
            StellarObject stellarObject = null;
            ResourceList requiredFuel = DetermineFuelRequiredForFleet(fleet);
            double num = maxFuelRange;
            double num2 = Galaxy.DetermineAngle(x, y, targetX, targetY);
            int num3 = 0;
            while (stellarObject == null && num3 < 5)
            {
                num *= 0.67;
                double x2 = x + Math.Cos(num2) * num;
                double y2 = y + Math.Sin(num2) * num;
                stellarObject = DecideBestFleetRefuelPoint(x2, y2, empire, requiredFuel, empireToExclude);
                if (stellarObject != null)
                {
                    double num4 = _Galaxy.CalculateDistance(x, y, stellarObject.Xpos, stellarObject.Ypos);
                    if (num4 < maxFuelRange)
                    {
                        if (fleet != null && !fleet.CheckFleetTargetWithinFuelRange(stellarObject.Xpos, stellarObject.Ypos, 0.0))
                        {
                            stellarObject = null;
                        }
                    }
                    else
                    {
                        stellarObject = null;
                    }
                }
                num3++;
            }
            return stellarObject;
        }

        private ShipGroupList GenerateOrderedFleetsByOverallStrength()
        {
            ShipGroupList shipGroupList = new ShipGroupList();
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                shipGroup.SortTag = shipGroup.TotalOverallStrengthFactor;
                shipGroupList.Add(shipGroup);
            }
            shipGroupList.Sort();
            shipGroupList.Reverse();
            shipGroupList.ClearSortTags();
            return shipGroupList;
        }

        private ShipGroupList GenerateOrderedFleetsByFighterStrength()
        {
            ShipGroupList shipGroupList = new ShipGroupList();
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                shipGroup.SortTag = shipGroup.TotalFighterCount;
                shipGroupList.Add(shipGroup);
            }
            shipGroupList.Sort();
            shipGroupList.Reverse();
            shipGroupList.ClearSortTags();
            return shipGroupList;
        }

        private ShipGroupList GenerateOrderedFleetsByTroopAttackStrength()
        {
            ShipGroupList shipGroupList = new ShipGroupList();
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                shipGroup.SortTag = shipGroup.TotalTroopAttackStrength;
                shipGroupList.Add(shipGroup);
            }
            shipGroupList.Sort();
            shipGroupList.Reverse();
            shipGroupList.ClearSortTags();
            return shipGroupList;
        }

        private ShipGroupList GenerateOrderedFleetsByTroopDefendStrength()
        {
            ShipGroupList shipGroupList = new ShipGroupList();
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                shipGroup.SortTag = shipGroup.TotalTroopDefendStrength;
                shipGroupList.Add(shipGroup);
            }
            shipGroupList.Sort();
            shipGroupList.Reverse();
            shipGroupList.ClearSortTags();
            return shipGroupList;
        }

        private ShipGroupList GenerateOrderedFleetsForEmpireTargets(Empire targetEmpire, bool includeSmallFleets)
        {
            if (targetEmpire.Capital != null)
            {
                return GenerateOrderedFleetsForTarget(targetEmpire.Capital.Xpos, targetEmpire.Capital.Ypos, includeSmallFleets);
            }
            if (targetEmpire.PirateEmpireBaseHabitat != null)
            {
                return GenerateOrderedFleetsForTarget(targetEmpire.PirateEmpireBaseHabitat.Xpos, targetEmpire.PirateEmpireBaseHabitat.Ypos, includeSmallFleets);
            }
            return GenerateOrderedFleetsForTarget(Galaxy.SizeX / 2, Galaxy.SizeY / 2, includeSmallFleets);
        }

        private ShipGroupList GenerateOrderedFleetsForTarget(double x, double y, bool includeSmallFleets)
        {
            ShipGroupList shipGroupList = new ShipGroupList();
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                if ((includeSmallFleets || ShipGroups[i].ShipTargetAmount >= 10 || ShipGroups[i].Ships.Count >= 10) && ShipGroups[i].LeadShip != null)
                {
                    double sortTag = _Galaxy.CalculateDistance(x, y, ShipGroups[i].LeadShip.Xpos, ShipGroups[i].LeadShip.Ypos);
                    ShipGroups[i].SortTag = sortTag;
                    shipGroupList.Add(ShipGroups[i]);
                }
            }
            shipGroupList.Sort();
            shipGroupList.ClearSortTags();
            return shipGroupList;
        }

        private bool IdentifyMilitaryObjectivesForSingleEmpire(Empire empire, int overallAttitude, int maximumAttacksForEmpireWeDeclaredWarOn, int maximumAttacksForEmpire, int maximumPlanetDestroyerAttacksForEmpire, int maximumBlockadesForEmpire, int maximumPreparationsForEmpire, double galaxyIntoleranceLevel, ref int refusalCount)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
            if (diplomaticRelation.Type == DiplomaticRelationType.War)
            {
                bool flag = false;
                if (diplomaticRelation.Initiator == this)
                {
                    flag = true;
                }
                PrioritizedTargetList targets = IdentifyEmpireStrikePoints(empire);
                PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
                if (PlanetDestroyers.Count > 0 && Galaxy.CheckUsePlanetDestroyerAgainstEmpire(this, empire))
                {
                    int num = 0;
                    for (int i = 0; i < targets.Count; i++)
                    {
                        PrioritizedTarget prioritizedTarget = targets[i];
                        if (prioritizedTarget == null || !(prioritizedTarget.Target is Habitat))
                        {
                            continue;
                        }
                        Habitat habitat = (Habitat)prioritizedTarget.Target;
                        for (int j = 0; j < PlanetDestroyers.Count; j++)
                        {
                            BuiltObject builtObject = PlanetDestroyers[j];
                            if (builtObject != null && builtObject.BuiltAt == null)
                            {
                                bool flag2 = false;
                                if (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined || builtObject.Mission.Priority == BuiltObjectMissionPriority.Low)
                                {
                                    flag2 = true;
                                }
                                if (flag2 && builtObject.WithinFuelRangeAndRefuel(habitat.Xpos, habitat.Ypos, 0.1) && (builtObject.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageDestroyPlanet(habitat, builtObject), habitat, AdvisorMessageType.EnemyAttackPlanetDestroyer, builtObject, null))
                                {
                                    builtObject.AssignMission(BuiltObjectMissionType.Attack, prioritizedTarget.Target, null, BuiltObjectMissionPriority.Normal);
                                    prioritizedTargetList.Add(prioritizedTarget);
                                    num++;
                                    break;
                                }
                            }
                        }
                        if (num >= maximumPlanetDestroyerAttacksForEmpire)
                        {
                            break;
                        }
                    }
                }
                foreach (PrioritizedTarget item in prioritizedTargetList)
                {
                    targets.Remove(item);
                }
                prioritizedTargetList.Clear();
                if (diplomaticRelation.WarObjective == WarObjective.CaptureObjectives)
                {
                    for (int k = 0; k < ShipGroups.Count; k++)
                    {
                        ShipGroup shipGroup = ShipGroups[k];
                        if (shipGroup.LeadShip == null || !shipGroup.LeadShip.IsAutoControlled || shipGroup.Posture != 0)
                        {
                            continue;
                        }
                        if (shipGroup.AttackPoint == null)
                        {
                            if (shipGroup.Mission != null && shipGroup.Mission.Type != 0 && shipGroup.Mission.Priority != BuiltObjectMissionPriority.Low)
                            {
                                continue;
                            }
                            bool waypointing = false;
                            StellarObject stellarObject = SelectFleetWarAttackTarget(shipGroup, empire, out waypointing);
                            if (stellarObject == null || waypointing)
                            {
                                continue;
                            }
                            BuiltObjectMissionType missionType = BuiltObjectMissionType.Attack;
                            if (stellarObject is Habitat)
                            {
                                Habitat enemyColony = (Habitat)stellarObject;
                                if (CheckBombardEnemyColony(enemyColony, shipGroup))
                                {
                                    missionType = BuiltObjectMissionType.Bombard;
                                }
                            }
                            shipGroup.AssignMission(missionType, stellarObject, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                        else
                        {
                            if (shipGroup.AttackPoint == null || shipGroup.AttackPoint.Empire != empire || (shipGroup.Mission != null && shipGroup.Mission.Type != 0 && shipGroup.Mission.Priority != BuiltObjectMissionPriority.Low))
                            {
                                continue;
                            }
                            if (CheckFleetCanAttackTarget(shipGroup, shipGroup.AttackPoint))
                            {
                                BuiltObjectMissionType missionType2 = BuiltObjectMissionType.Attack;
                                if (shipGroup.AttackPoint is Habitat)
                                {
                                    Habitat enemyColony2 = (Habitat)shipGroup.AttackPoint;
                                    if (CheckBombardEnemyColony(enemyColony2, shipGroup))
                                    {
                                        missionType2 = BuiltObjectMissionType.Bombard;
                                    }
                                }
                                shipGroup.AssignMission(missionType2, shipGroup.AttackPoint, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                continue;
                            }
                            bool waypointing2 = false;
                            StellarObject stellarObject2 = SelectFleetWarAttackTarget(shipGroup, empire, out waypointing2);
                            if (stellarObject2 == null || waypointing2)
                            {
                                continue;
                            }
                            BuiltObjectMissionType missionType3 = BuiltObjectMissionType.Attack;
                            if (stellarObject2 is Habitat)
                            {
                                Habitat enemyColony3 = (Habitat)stellarObject2;
                                if (CheckBombardEnemyColony(enemyColony3, shipGroup))
                                {
                                    missionType3 = BuiltObjectMissionType.Bombard;
                                }
                            }
                            shipGroup.AssignMission(missionType3, stellarObject2, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                    }
                }
                int num2 = maximumAttacksForEmpire;
                if (flag)
                {
                    num2 = maximumAttacksForEmpireWeDeclaredWarOn;
                }
                ShipGroupList shipGroupList = GenerateOrderedFleetsForEmpireTargets(empire, includeSmallFleets: false);
                for (int l = 0; l < shipGroupList.Count; l++)
                {
                    ShipGroup shipGroup2 = shipGroupList[l];
                    if (shipGroup2.Posture == FleetPosture.Attack)
                    {
                        if (CountShipGroupsAssignedToEmpire(empire, includeSmallFleets: false) >= num2)
                        {
                            return true;
                        }
                        AssignFleetAttackMission(shipGroup2, ref targets, ref refusalCount);
                    }
                }
            }
            else if (diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions && Policy.DiplomacyTradeSanctionsUseBlockades && maximumBlockadesForEmpire > 0 && (diplomaticRelation.Strategy == DiplomaticStrategy.Conquer || diplomaticRelation.Strategy == DiplomaticStrategy.Punish || diplomaticRelation.Strategy == DiplomaticStrategy.Undermine))
            {
                if (diplomaticRelation.WarObjective == WarObjective.Undefined)
                {
                    IdentifyEmpireWarObjectives(diplomaticRelation.OtherEmpire, out var targetedColonies, out var targetedBases);
                    if (targetedColonies.Count > 0 || targetedBases.Count > 0)
                    {
                        diplomaticRelation.WarObjective = WarObjective.CaptureObjectives;
                        diplomaticRelation.WarObjectiveColonies = targetedColonies;
                        diplomaticRelation.WarObjectiveBases = targetedBases;
                    }
                    else
                    {
                        diplomaticRelation.WarObjective = WarObjective.EndWar;
                        diplomaticRelation.WarObjectiveColonies = new HabitatList();
                        diplomaticRelation.WarObjectiveBases = new BuiltObjectList();
                    }
                }
                if (diplomaticRelation.WarObjectiveColonies.Count > 0 || diplomaticRelation.WarObjectiveBases.Count > 0)
                {
                    for (int m = 0; m < diplomaticRelation.WarObjectiveColonies.Count; m++)
                    {
                        Habitat habitat2 = diplomaticRelation.WarObjectiveColonies[m];
                        if (habitat2 != null && !habitat2.HasBeenDestroyed && habitat2.Empire != null && habitat2.Empire == empire)
                        {
                            ShipGroupList shipGroupList2 = GenerateOrderedFleetsForTarget(habitat2.Xpos, habitat2.Ypos, includeSmallFleets: false);
                            if (shipGroupList2.Count > 0)
                            {
                                for (int n = 0; n < shipGroupList2.Count; n++)
                                {
                                    ShipGroup shipGroup3 = shipGroupList2[n];
                                    if (shipGroup3.LeadShip != null && shipGroup3.LeadShip.IsAutoControlled && shipGroup3.Ships.Count >= 10 && shipGroup3.Posture == FleetPosture.Attack && shipGroup3.AttackPoint == null && (shipGroup3.Mission == null || shipGroup3.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup3.Mission.Priority == BuiltObjectMissionPriority.Low) && shipGroup3.CheckFleetTargetWithinFuelRangeAndRefuel(habitat2.Xpos, habitat2.Ypos, 0.2))
                                    {
                                        ResourceList requiredFuel = DetermineFuelRequiredForFleet(shipGroup3);
                                        StellarObject stellarObject4 = (shipGroup3.GatherPoint = DecideBestFleetRefuelPoint(habitat2.Xpos, habitat2.Ypos, this, requiredFuel, empire));
                                        shipGroup3.AttackPoint = habitat2;
                                        shipGroup3.PostureRangeSquared = 2304000000.0;
                                        if (ImplementBlockade(habitat2, performAuthorizationCheck: true, shipGroup3))
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (CountShipGroupsAssignedToEmpire(empire, includeSmallFleets: true) >= maximumBlockadesForEmpire)
                        {
                            break;
                        }
                    }
                    for (int num3 = 0; num3 < diplomaticRelation.WarObjectiveBases.Count; num3++)
                    {
                        BuiltObject builtObject2 = diplomaticRelation.WarObjectiveBases[num3];
                        if (builtObject2 != null && !builtObject2.HasBeenDestroyed && builtObject2.Empire != null && builtObject2.Empire == empire && (builtObject2.ParentHabitat == null || builtObject2.ParentHabitat.Empire == null || builtObject2.ParentHabitat.Empire == _Galaxy.IndependentEmpire))
                        {
                            ShipGroupList shipGroupList3 = GenerateOrderedFleetsForTarget(builtObject2.Xpos, builtObject2.Ypos, includeSmallFleets: false);
                            if (shipGroupList3.Count > 0)
                            {
                                for (int num4 = 0; num4 < shipGroupList3.Count; num4++)
                                {
                                    ShipGroup shipGroup4 = shipGroupList3[num4];
                                    if (shipGroup4.LeadShip != null && shipGroup4.LeadShip.IsAutoControlled && shipGroup4.Posture == FleetPosture.Attack && shipGroup4.AttackPoint == null && (shipGroup4.Mission == null || shipGroup4.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup4.Mission.Priority == BuiltObjectMissionPriority.Low) && shipGroup4.CheckFleetTargetWithinFuelRangeAndRefuel(builtObject2.Xpos, builtObject2.Ypos, 0.2))
                                    {
                                        ResourceList requiredFuel2 = DetermineFuelRequiredForFleet(shipGroup4);
                                        StellarObject stellarObject6 = (shipGroup4.GatherPoint = DecideBestFleetRefuelPoint(builtObject2.Xpos, builtObject2.Ypos, this, requiredFuel2, empire));
                                        shipGroup4.AttackPoint = builtObject2;
                                        shipGroup4.PostureRangeSquared = 2304000000.0;
                                        if (ImplementBlockade(builtObject2, shipGroup4))
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (CountShipGroupsAssignedToEmpire(empire, includeSmallFleets: true) >= maximumBlockadesForEmpire)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    ShipGroupList shipGroupList4 = GenerateOrderedFleetsForEmpireTargets(empire, includeSmallFleets: false);
                    for (int num5 = 0; num5 < shipGroupList4.Count; num5++)
                    {
                        ShipGroup shipGroup5 = shipGroupList4[num5];
                        if (shipGroup5.Posture != 0 || !IsShipGroupAvailable(shipGroup5, BuiltObjectMissionPriority.Normal, 0) || shipGroup5.LeadShip == null || !shipGroup5.LeadShip.IsAutoControlled)
                        {
                            continue;
                        }
                        if (CountShipGroupsAssignedToEmpire(empire, includeSmallFleets: true) >= maximumBlockadesForEmpire)
                        {
                            return true;
                        }
                        if (DominantRace.AggressionLevel <= 105 + Galaxy.Rnd.Next(0, 30))
                        {
                            continue;
                        }
                        double num6 = 0.0;
                        Habitat habitat3 = null;
                        for (int num7 = 0; num7 < empire.Colonies.Count; num7++)
                        {
                            Habitat habitat4 = empire.Colonies[num7];
                            if (CheckSystemExplored(habitat4.SystemIndex))
                            {
                                BuiltObject builtObject3 = _Galaxy.DetermineSpacePortAtColony(habitat4);
                                if (builtObject3 != null && builtObject3.CurrentYearsIncome > num6)
                                {
                                    num6 = builtObject3.CurrentYearsIncome;
                                    habitat3 = habitat4;
                                }
                            }
                        }
                        bool flag3 = false;
                        if (habitat3 != null && !habitat3.HasBeenDestroyed && habitat3.Empire != null && habitat3.Empire == empire && shipGroup5.CheckFleetTargetWithinFuelRangeAndRefuel(habitat3.Xpos, habitat3.Ypos, 0.2))
                        {
                            flag3 = ImplementBlockade(habitat3, performAuthorizationCheck: true, shipGroup5);
                        }
                        if (!flag3)
                        {
                            for (int num8 = 0; num8 < empire.Colonies.Count; num8++)
                            {
                                Habitat habitat5 = empire.Colonies[num8];
                                if (habitat5 == null || habitat5.HasBeenDestroyed || habitat5.Empire == null || habitat5.Empire != empire || !CheckSystemExplored(habitat5.SystemIndex))
                                {
                                    continue;
                                }
                                BuiltObject builtObject4 = _Galaxy.DetermineSpacePortAtColony(habitat5);
                                if (builtObject4 != null && Galaxy.Rnd.Next(0, 3) == 1 && shipGroup5.CheckFleetTargetWithinFuelRangeAndRefuel(habitat5.Xpos, habitat5.Ypos, 0.2))
                                {
                                    flag3 = ImplementBlockade(habitat5, performAuthorizationCheck: true, shipGroup5);
                                    if (flag3)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        if (flag3)
                        {
                            continue;
                        }
                        for (int num9 = 0; num9 < empire.MiningStations.Count; num9++)
                        {
                            BuiltObject builtObject5 = empire.MiningStations[num9];
                            if (builtObject5 != null && !builtObject5.HasBeenDestroyed && builtObject5.Empire != null && builtObject5.Empire == empire && builtObject5.ParentHabitat != null && CheckSystemExplored(builtObject5.ParentHabitat.SystemIndex) && shipGroup5.CheckFleetTargetWithinFuelRangeAndRefuel(builtObject5.Xpos, builtObject5.Ypos, 0.2) && ImplementBlockade(builtObject5, shipGroup5))
                            {
                                break;
                            }
                        }
                    }
                }
            }
            return true;
        }

        public void DisbandShipGroup(ShipGroup shipGroup)
        {
            for (int i = 0; i < shipGroup.Ships.Count; i++)
            {
                BuiltObject builtObject = shipGroup.Ships[i];
                builtObject.ShipGroup = null;
            }
            shipGroup.Ships.Clear();
            if (ShipGroups.Contains(shipGroup))
            {
                ShipGroups.Remove(shipGroup);
            }
        }

        private StellarObject SelectWayPoint(PrioritizedTarget target, ResourceList requiredFuel)
        {
            double x = 0.0;
            double y = 0.0;
            target.ResolveTargetCoordinates(out x, out y);
            return DecideBestFleetRefuelPoint(x, y, this, requiredFuel, target.Empire);
        }

        private void WaypointShipGroup(ShipGroup shipGroup, BuiltObject wayPoint)
        {
            for (int i = 0; i < shipGroup.Ships.Count; i++)
            {
                BuiltObject builtObject = shipGroup.Ships[i];
                builtObject.AssignMission(BuiltObjectMissionType.Waypoint, wayPoint, null, BuiltObjectMissionPriority.High);
            }
        }

        private void WaypointShipGroup(ShipGroup shipGroup, Habitat wayPoint)
        {
            for (int i = 0; i < shipGroup.Ships.Count; i++)
            {
                BuiltObject builtObject = shipGroup.Ships[i];
                builtObject.AssignMission(BuiltObjectMissionType.Waypoint, wayPoint, null, BuiltObjectMissionPriority.High);
            }
        }

        private void WaypointShipGroup(ShipGroup shipGroup, double x, double y)
        {
            if (x <= 2000000000.0 || y <= 2000000000.0)
            {
                throw new ArgumentException("Invalid waypoint location");
            }
            foreach (BuiltObject ship in shipGroup.Ships)
            {
                ship.AssignMission(BuiltObjectMissionType.Waypoint, null, null, x, y, BuiltObjectMissionPriority.High);
            }
        }

        public BuiltObject FindNearestTroopShipWithSpace(double x, double y, int capacityRequired)
        {
            BuiltObject builtObject = null;
            double num = double.MaxValue;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject2 = BuiltObjects[i];
                if (builtObject2 != null && !builtObject2.HasBeenDestroyed && builtObject2.Role == BuiltObjectRole.Military && builtObject2.TroopCapacity >= capacityRequired && builtObject2.TroopCapacityRemaining >= capacityRequired)
                {
                    double num2 = _Galaxy.CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                    if (builtObject == null || num > num2)
                    {
                        builtObject = builtObject2;
                        num = num2;
                    }
                }
            }
            return builtObject;
        }

        private BuiltObject FindAvailableMilitaryShip(double x, double y, BuiltObjectList militaryShips, bool mustCarryTroopsIfHaveTroopStorage, bool mustBeFullOfTroops, float minimumFuelPortion, bool? mustHaveHyperdrive)
        {
            for (int i = 0; i < militaryShips.Count; i++)
            {
                BuiltObject builtObject = militaryShips[i];
                if (builtObject.ShipGroup != null || builtObject.SubRole == BuiltObjectSubRole.Escort || builtObject.SubRole == BuiltObjectSubRole.ResupplyShip || builtObject.BuiltAt != null || (builtObject.Mission != null && builtObject.Mission.Type != 0 && builtObject.Mission.Priority != 0 && builtObject.Mission.Priority != BuiltObjectMissionPriority.Low && builtObject.Mission.Priority != BuiltObjectMissionPriority.Normal) || !builtObject.IsAutoControlled)
                {
                    continue;
                }
                bool flag = true;
                if (mustHaveHyperdrive.HasValue)
                {
                    if (mustHaveHyperdrive.Value)
                    {
                        if (builtObject.WarpSpeed <= 0)
                        {
                            flag = false;
                        }
                    }
                    else if (builtObject.WarpSpeed > 0)
                    {
                        flag = false;
                    }
                }
                if (!flag)
                {
                    continue;
                }
                float num = (float)(builtObject.CurrentFuel / (double)builtObject.FuelCapacity);
                if (!(num >= minimumFuelPortion))
                {
                    continue;
                }
                bool flag2 = true;
                if (x >= 0.0 && y >= 0.0)
                {
                    flag2 = builtObject.WithinFuelRange(x, y, 0.0);
                }
                if (!flag2)
                {
                    continue;
                }
                if (mustBeFullOfTroops)
                {
                    if (builtObject.Troops != null && builtObject.Troops.TotalAttackStrength > 0 && builtObject.TroopCapacityRemaining < 100)
                    {
                        return builtObject;
                    }
                    continue;
                }
                if (mustCarryTroopsIfHaveTroopStorage)
                {
                    if (builtObject.TroopCapacity <= 0)
                    {
                        return builtObject;
                    }
                    if (builtObject.Troops == null || builtObject.Troops.TotalAttackStrength <= 0)
                    {
                        continue;
                    }
                    int num2 = builtObject.TroopCapacity / 2;
                    if (builtObject.TroopCapacityRemaining <= num2)
                    {
                        return builtObject;
                    }
                }
                else if (builtObject.SubRole == BuiltObjectSubRole.TroopTransport)
                {
                    continue;
                }
                return builtObject;
            }
            return null;
        }

        public ResourceList DetermineFuelRequiredForFleet(ShipGroup fleet)
        {
            int fleetFuelCapacity = 0;
            return DetermineFuelRequiredForFleet(fleet, setFuelLevelToZero: false, out fleetFuelCapacity);
        }

        public ResourceList DetermineFuelRequiredForFleet(ShipGroup fleet, bool setFuelLevelToZero)
        {
            int fleetFuelCapacity = 0;
            return DetermineFuelRequiredForFleet(fleet, setFuelLevelToZero, out fleetFuelCapacity);
        }

        public ResourceList DetermineFuelRequiredForFleet(ShipGroup fleet, out int fleetFuelCapacity)
        {
            return DetermineFuelRequiredForFleet(fleet, setFuelLevelToZero: false, out fleetFuelCapacity);
        }

        public ResourceList DetermineFuelRequiredForFleet(ShipGroup fleet, bool setFuelLevelToZero, out int fleetFuelCapacity)
        {
            ResourceList resourceList = new ResourceList();
            int num = 0;
            fleetFuelCapacity = 0;
            if (fleet != null && fleet.Ships != null)
            {
                for (int i = 0; i < fleet.Ships.Count; i++)
                {
                    BuiltObject builtObject = fleet.Ships[i];
                    if (builtObject != null && builtObject.FuelType != null)
                    {
                        int num2 = 1;
                        if (!setFuelLevelToZero)
                        {
                            num2 = builtObject.FuelCapacity - (int)builtObject.CurrentFuel;
                        }
                        int num3 = resourceList.IndexOf(builtObject.FuelType.ResourceID);
                        if (num3 >= 0)
                        {
                            resourceList[num3].SortTag += num2;
                        }
                        else
                        {
                            Resource resource = new Resource(builtObject.FuelType.ResourceID);
                            resource.SortTag = num2;
                            resourceList.Add(resource);
                        }
                        num += num2;
                        fleetFuelCapacity += builtObject.FuelCapacity;
                    }
                }
            }
            return resourceList;
        }

        private void TaskResupplyShips()
        {
            EmpireList targetEmpires = IdentifyTargetEmpires();
            for (int i = 0; i < ResupplyShips.Count; i++)
            {
                TaskResupplyShip(ResupplyShips[i], targetEmpires);
            }
        }

        private void TaskResupplyShip(BuiltObject resupplyShip, EmpireList targetEmpires)
        {
            if (!resupplyShip.IsFunctional || !resupplyShip.IsAutoControlled || (resupplyShip.Mission != null && resupplyShip.Mission.Type != 0) || resupplyShip.UnbuiltOrDamagedComponentCount != 0 || resupplyShip.BuiltAt != null)
            {
                return;
            }
            double num = 2500000.0;
            if (resupplyShip.IsDeployed)
            {
                bool flag = true;
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup.Mission != null && (shipGroup.Mission.TargetBuiltObject == resupplyShip || shipGroup.Mission.SecondaryTargetBuiltObject == resupplyShip))
                    {
                        flag = false;
                        break;
                    }
                }
                if (!flag)
                {
                    return;
                }
                bool flag2 = true;
                double num2 = double.MaxValue;
                if (targetEmpires.Count > 0)
                {
                    for (int j = 0; j < targetEmpires.Count; j++)
                    {
                        StellarObjectList stellarObjectList = new StellarObjectList();
                        if (PirateEmpireBaseHabitat != null)
                        {
                            PrioritizedTargetList prioritizedTargetList = IdentifyEmpireStrikePoints(targetEmpires[j]);
                            stellarObjectList = prioritizedTargetList.ResolveStellarObjects();
                        }
                        else
                        {
                            DiplomaticRelation relation = ObtainDiplomaticRelation(targetEmpires[j]);
                            AddWarObjectivesToList(relation, stellarObjectList, calculateWarObjectivesIfNotPresent: false);
                        }
                        if (stellarObjectList.Count <= 0)
                        {
                            continue;
                        }
                        int count = stellarObjectList.Count;
                        for (int k = 0; k < count; k++)
                        {
                            double num3 = _Galaxy.CalculateDistance(resupplyShip.Xpos, resupplyShip.Ypos, stellarObjectList[k].Xpos, stellarObjectList[k].Ypos);
                            if (num3 < num2)
                            {
                                num2 = num3;
                            }
                            if (num2 < num)
                            {
                                flag2 = false;
                                break;
                            }
                        }
                        if (!flag2)
                        {
                            break;
                        }
                    }
                }
                if (flag2)
                {
                    resupplyShip.InitiateUndeploy();
                }
            }
            else
            {
                if (resupplyShip.DeployProgress != 0.0)
                {
                    return;
                }
                Habitat habitat = null;
                if (targetEmpires.Count > 0)
                {
                    for (int l = 0; l < targetEmpires.Count; l++)
                    {
                        StellarObjectList stellarObjectList2 = new StellarObjectList();
                        if (PirateEmpireBaseHabitat != null)
                        {
                            PrioritizedTargetList prioritizedTargetList2 = IdentifyEmpireStrikePoints(targetEmpires[l]);
                            stellarObjectList2 = prioritizedTargetList2.ResolveStellarObjects();
                        }
                        else
                        {
                            DiplomaticRelation relation2 = ObtainDiplomaticRelation(targetEmpires[l]);
                            AddWarObjectivesToList(relation2, stellarObjectList2, calculateWarObjectivesIfNotPresent: false);
                        }
                        if (stellarObjectList2.Count > 0)
                        {
                            for (int m = 0; m < stellarObjectList2.Count; m++)
                            {
                                double xpos = stellarObjectList2[m].Xpos;
                                double ypos = stellarObjectList2[m].Ypos;
                                BuiltObject builtObject = _Galaxy.FastFindNearestResupplyShipByDestination(xpos, ypos, this, resupplyShip);
                                BuiltObject builtObject2 = _Galaxy.FastFindNearestSpacePort(xpos, ypos, this);
                                double num4 = double.MaxValue;
                                if (builtObject != null)
                                {
                                    double x = 0.0;
                                    double y = 0.0;
                                    _Galaxy.DetermineResupplyShipLocationByDestination(builtObject, out x, out y);
                                    num4 = _Galaxy.CalculateDistance(xpos, ypos, x, y);
                                }
                                double num5 = double.MaxValue;
                                if (builtObject2 != null)
                                {
                                    num5 = _Galaxy.CalculateDistance(xpos, ypos, builtObject2.Xpos, builtObject2.Ypos);
                                }
                                if (num4 > Galaxy.ResupplyShipMinimumDistance && num5 > Galaxy.ResupplyShipMinimumDistance)
                                {
                                    double num6 = xpos;
                                    double num7 = ypos;
                                    byte resourceId = 0;
                                    if (ShipGroups != null && ShipGroups.Count > 0 && ShipGroups[0].LeadShip != null && ShipGroups[0].LeadShip.FuelType != null)
                                    {
                                        resourceId = ShipGroups[0].LeadShip.FuelType.ResourceID;
                                    }
                                    int num8 = 0;
                                    while (habitat == null && num8 < 50)
                                    {
                                        Habitat habitat2 = _Galaxy.FastFindNearestFuelHabitatAlternate(num6, num7, resourceId, null, this);
                                        if (habitat2 != null && !targetEmpires[l].IsObjectVisibleToThisEmpire(habitat2) && (_Galaxy.Systems[habitat2.SystemIndex].DominantEmpire == null || _Galaxy.Systems[habitat2.SystemIndex].DominantEmpire.Empire == null))
                                        {
                                            builtObject = _Galaxy.FastFindNearestResupplyShipByDestination(habitat2.Xpos, habitat2.Ypos, this, resupplyShip);
                                            num4 = double.MaxValue;
                                            if (builtObject != null)
                                            {
                                                double x2 = 0.0;
                                                double y2 = 0.0;
                                                _Galaxy.DetermineResupplyShipLocationByDestination(builtObject, out x2, out y2);
                                                num4 = _Galaxy.CalculateDistance(habitat2.Xpos, habitat2.Ypos, x2, y2);
                                            }
                                            if (num4 > Galaxy.ResupplyShipMinimumDistance)
                                            {
                                                double num9 = _Galaxy.CalculateDistance(xpos, ypos, habitat2.Xpos, habitat2.Ypos);
                                                if (num9 < num && num5 > num9)
                                                {
                                                    habitat = habitat2;
                                                    break;
                                                }
                                            }
                                        }
                                        double x3 = 0.0;
                                        double y3 = 0.0;
                                        _Galaxy.SelectRelativePoint(300000.0, out x3, out y3);
                                        num6 += x3;
                                        num7 += y3;
                                        num8++;
                                    }
                                }
                                if (habitat != null)
                                {
                                    break;
                                }
                            }
                        }
                        if (habitat != null)
                        {
                            break;
                        }
                    }
                }
                if (habitat != null)
                {
                    resupplyShip.AssignMission(BuiltObjectMissionType.Deploy, habitat, null, BuiltObjectMissionPriority.High);
                    return;
                }
                bool flag3 = false;
                if (resupplyShip.ParentHabitat != null && resupplyShip.ParentHabitat.BasesAtHabitat != null && resupplyShip.ParentHabitat.BasesAtHabitat.Count > 0)
                {
                    foreach (BuiltObject item in resupplyShip.ParentHabitat.BasesAtHabitat)
                    {
                        if (item.SubRole == BuiltObjectSubRole.SmallSpacePort || item.SubRole == BuiltObjectSubRole.MediumSpacePort || item.SubRole == BuiltObjectSubRole.LargeSpacePort)
                        {
                            flag3 = true;
                            break;
                        }
                    }
                }
                if (SpacePorts.Count <= 0 || flag3)
                {
                    return;
                }
                BuiltObject builtObject3 = _Galaxy.FastFindNearestSpacePort(resupplyShip.Xpos, resupplyShip.Ypos, this);
                if (builtObject3 != null)
                {
                    double num10 = resupplyShip.CurrentFuel / Math.Max(1.0, resupplyShip.FuelCapacity);
                    if (num10 < 0.5)
                    {
                        resupplyShip.AssignMission(BuiltObjectMissionType.Refuel, builtObject3, null, BuiltObjectMissionPriority.Unavailable);
                        return;
                    }
                    double x4 = -2000000001.0;
                    double y4 = -2000000001.0;
                    _Galaxy.SelectRelativeParkingPoint(out x4, out y4);
                    resupplyShip.AssignMission(BuiltObjectMissionType.Move, builtObject3, null, x4, y4, BuiltObjectMissionPriority.Low);
                }
            }
        }

        public StellarObject DecideBestFleetRefuelPoint(double x, double y, Empire empire, ResourceList requiredFuel, Empire empireToExclude)
        {
            BuiltObject shipToRefuel = null;
            for (int i = 0; i < empire.BuiltObjects.Count; i++)
            {
                if (empire.BuiltObjects[i].Role == BuiltObjectRole.Military)
                {
                    shipToRefuel = empire.BuiltObjects[i];
                    break;
                }
            }
            return UltraFastFindNearestRefuellingLocation(x, y, requiredFuel, shipToRefuel, mustHaveActualSupply: false, includeResupplyShips: true, 10);
        }

        public bool AssignShipSystemPatrol(BuiltObject ship, SystemInfo system)
        {
            return AssignShipSystemPatrol(ship, system, manuallyAssigned: false);
        }

        public bool AssignShipSystemPatrol(BuiltObject ship, SystemInfo system, bool manuallyAssigned)
        {
            StellarObjectList stellarObjectList = IdentifyEmpireAssetsInSystem(system);
            if (stellarObjectList.Count > 0)
            {
                StellarObject stellarObject = stellarObjectList[Galaxy.Rnd.Next(0, stellarObjectList.Count)];
                if (stellarObject is BuiltObject)
                {
                    ship.ClearPreviousMissionRequirements();
                    ship.AssignMission(BuiltObjectMissionType.Patrol, (BuiltObject)stellarObject, null, BuiltObjectMissionPriority.Normal, manuallyAssigned);
                    return true;
                }
                if (stellarObject is Habitat)
                {
                    ship.ClearPreviousMissionRequirements();
                    ship.AssignMission(BuiltObjectMissionType.Patrol, (Habitat)stellarObject, null, BuiltObjectMissionPriority.Normal, manuallyAssigned);
                    return true;
                }
                return false;
            }
            ship.ClearPreviousMissionRequirements();
            ship.AssignMission(BuiltObjectMissionType.Move, system.SystemStar, null, BuiltObjectMissionPriority.Normal, manuallyAssigned);
            return true;
        }

        private StellarObjectList IdentifyEmpireAssetsInSystem(SystemInfo system)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            for (int i = 0; i < system.Habitats.Count; i++)
            {
                Habitat habitat = system.Habitats[i];
                if (habitat.Owner == this)
                {
                    stellarObjectList.Add(habitat);
                }
                else
                {
                    if (habitat.BasesAtHabitat == null || habitat.BasesAtHabitat.Count <= 0)
                    {
                        continue;
                    }
                    for (int j = 0; j < habitat.BasesAtHabitat.Count; j++)
                    {
                        BuiltObject builtObject = habitat.BasesAtHabitat[j];
                        if (builtObject.Empire == this)
                        {
                            stellarObjectList.Add(builtObject);
                        }
                    }
                }
            }
            return stellarObjectList;
        }

        public bool AssignFleetSystemPatrol(ShipGroup fleet, SystemInfo system)
        {
            if (fleet.Ships != null && fleet.Ships.Count > 0 && system != null)
            {
                StellarObjectList stellarObjectList = IdentifyEmpireAssetsInSystem(system);
                int num = fleet.Ships.Count;
                if (stellarObjectList.Count > 1)
                {
                    num = Math.Max(1, fleet.Ships.Count / stellarObjectList.Count);
                }
                if (stellarObjectList.Count > 0)
                {
                    if (system.SystemStar != null)
                    {
                        fleet.AssignMission(BuiltObjectMissionType.Patrol, system.SystemStar, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: true);
                    }
                    int num2 = 0;
                    for (int i = 0; i < stellarObjectList.Count; i++)
                    {
                        int num3 = num2 + num;
                        if (num3 > fleet.Ships.Count)
                        {
                            num3 = fleet.Ships.Count;
                        }
                        if (i == stellarObjectList.Count - 1)
                        {
                            num3 = fleet.Ships.Count;
                        }
                        for (int j = num2; j < num3; j++)
                        {
                            if (fleet.IsShipAvailable(fleet.Ships[j]))
                            {
                                fleet.Ships[j].ClearPreviousMissionRequirements();
                                if (stellarObjectList[i] is Habitat)
                                {
                                    fleet.Ships[j].AssignMission(BuiltObjectMissionType.Patrol, (Habitat)stellarObjectList[i], null, BuiltObjectMissionPriority.Normal);
                                }
                                else if (stellarObjectList[i] is BuiltObject)
                                {
                                    fleet.Ships[j].AssignMission(BuiltObjectMissionType.Patrol, (BuiltObject)stellarObjectList[i], null, BuiltObjectMissionPriority.Normal);
                                }
                                else
                                {
                                    fleet.Ships[j].AssignMission(BuiltObjectMissionType.Patrol, stellarObjectList[i], null, BuiltObjectMissionPriority.Normal);
                                }
                            }
                        }
                        num2 += num;
                        if (num2 >= fleet.Ships.Count)
                        {
                            break;
                        }
                    }
                    return true;
                }
                if (system.SystemStar != null)
                {
                    if (system.SystemStar.Category == HabitatCategoryType.GasCloud || system.SystemStar.Type == HabitatType.BlackHole || system.SystemStar.Type == HabitatType.SuperNova)
                    {
                        fleet.AssignMission(BuiltObjectMissionType.Move, system.SystemStar, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: true);
                        return true;
                    }
                    fleet.AssignMission(BuiltObjectMissionType.Patrol, system.SystemStar, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: true);
                    return true;
                }
            }
            return false;
        }

        public bool AssignFleetLoadTroops(ShipGroup fleet, bool manuallyAssigned)
        {
            return AssignFleetLoadTroops(fleet, null, manuallyAssigned);
        }

        public bool AssignFleetLoadTroops(ShipGroup fleet, Habitat colony, bool manuallyAssigned)
        {
            return AssignFleetLoadTroops(fleet, colony, manuallyAssigned, !manuallyAssigned);
        }

        public bool AssignFleetLoadTroops(ShipGroup fleet, Habitat colony, bool manuallyAssigned, bool enforceMinimumTroopLimitsAtColonies)
        {
            bool result = false;
            if (fleet != null)
            {
                Habitat habitat = colony;
                if (habitat == null)
                {
                    habitat = _Galaxy.FastFindNearestColony((int)fleet.LeadShip.Xpos, (int)fleet.LeadShip.Ypos, fleet.Empire, 0);
                }
                if (habitat != null)
                {
                    fleet.AssignMission(BuiltObjectMissionType.LoadTroops, habitat, null, BuiltObjectMissionPriority.Normal, manuallyAssigned);
                    if (colony == null && fleet.Mission != null)
                    {
                        fleet.Mission.TargetHabitat = null;
                    }
                    bool flag = false;
                    if (colony != null && colony.Empire != fleet.Empire && colony.InvadingTroops != null && colony.InvadingTroops.Count > 0 && colony.InvadingTroops[0].Empire == fleet.Empire)
                    {
                        flag = true;
                    }
                    for (int i = 0; i < fleet.Ships.Count; i++)
                    {
                        BuiltObject builtObject = fleet.Ships[i];
                        Habitat habitat2 = colony;
                        if (builtObject == null || builtObject.Empire == null || !fleet.IsShipAvailable(builtObject) || builtObject.TroopCapacityRemaining < 100)
                        {
                            continue;
                        }
                        TroopList prefilteredTroopsNotBeingPickedUp = new TroopList();
                        if (habitat2 == null)
                        {
                            habitat2 = builtObject.Empire.FindNearestColonyWithExcessTroops(builtObject, enforceMinimumTroopLimitsAtColonies, out prefilteredTroopsNotBeingPickedUp, allowTroopTypeFallback: false);
                        }
                        if (habitat2 == null)
                        {
                            return result;
                        }
                        TroopList troopList = null;
                        if (habitat2 != null)
                        {
                            troopList = habitat2.Troops;
                            if (flag && colony == habitat2)
                            {
                                troopList = habitat2.InvadingTroops;
                            }
                        }
                        if (habitat2 == null || troopList == null)
                        {
                            continue;
                        }
                        TroopList troopList2 = prefilteredTroopsNotBeingPickedUp;
                        if (flag && colony == habitat2)
                        {
                            troopList2 = new TroopList();
                            for (int j = 0; j < troopList.Count; j++)
                            {
                                if (troopList[j] != null && troopList[j].Empire == builtObject.Empire)
                                {
                                    troopList2.Add(troopList[j]);
                                }
                            }
                        }
                        else if (prefilteredTroopsNotBeingPickedUp == null || prefilteredTroopsNotBeingPickedUp.Count <= 0)
                        {
                            troopList2 = habitat2.Troops.GetTroopsNotGarrisonedNotAwaitingPickup();
                        }
                        if (troopList2.Count <= 0)
                        {
                            continue;
                        }
                        int num = builtObject.TroopCapacityRemaining;
                        int num2 = troopList.TotalDefendStrength;
                        if (enforceMinimumTroopLimitsAtColonies)
                        {
                            int num3 = habitat2.TroopLevelMinimum * 100;
                            num2 -= num3;
                        }
                        TroopList troopList3 = new TroopList();
                        bool flag2 = false;
                        for (int k = 0; k < troopList2.Count; k++)
                        {
                            Troop troop = troopList2[k];
                            if (troop != null && num2 - (int)((float)troop.DefendStrength * troop.Readiness) >= 0 && num >= troop.Size)
                            {
                                troopList3.Add(troop);
                                flag2 = true;
                                num -= troop.Size;
                                num2 -= (int)((float)troop.DefendStrength * troop.Readiness);
                                if (num < 100 || num2 <= 0)
                                {
                                    break;
                                }
                            }
                        }
                        if (flag2)
                        {
                            builtObject.ClearPreviousMissionRequirements();
                            builtObject.AssignMission(BuiltObjectMissionType.LoadTroops, habitat2, null, troopList3, BuiltObjectMissionPriority.Normal, manuallyAssigned);
                            result = true;
                        }
                    }
                }
            }
            return result;
        }

        public bool AssignFleetUnloadTroops(ShipGroup fleet, Habitat colony, bool manuallyAssigned)
        {
            bool result = false;
            fleet.AssignMission(BuiltObjectMissionType.UnloadTroops, colony, null, BuiltObjectMissionPriority.Normal, manuallyAssigned);
            for (int i = 0; i < fleet.Ships.Count; i++)
            {
                BuiltObject builtObject = fleet.Ships[i];
                if (fleet.IsShipAvailable(builtObject))
                {
                    builtObject.ClearPreviousMissionRequirements();
                    if (builtObject.Troops != null && builtObject.Troops.Count > 0)
                    {
                        TroopList troopList = new TroopList();
                        troopList.AddRange(builtObject.Troops);
                        builtObject.AssignMission(BuiltObjectMissionType.UnloadTroops, colony, null, troopList, BuiltObjectMissionPriority.Normal, manuallyAssigned);
                        result = true;
                    }
                    else
                    {
                        builtObject.AssignMission(BuiltObjectMissionType.Move, colony, null, BuiltObjectMissionPriority.Normal, manuallyAssigned);
                    }
                }
            }
            return result;
        }

        public bool AssignFleetRepair(ShipGroup fleet)
        {
            return AssignFleetRepair(fleet, null);
        }

        public bool AssignFleetRepair(ShipGroup fleet, StellarObject shipYard)
        {
            if (fleet != null)
            {
                if (shipYard == null)
                {
                    shipYard = fleet.Empire.FindNearestShipYard(fleet.LeadShip, canRepairOrBuild: true, includeVerySmallYards: false);
                }
                if (shipYard != null && shipYard is BuiltObject)
                {
                    fleet.AssignMission(BuiltObjectMissionType.Repair, shipYard, null, BuiltObjectMissionPriority.High, manuallyAssigned: true);
                    for (int i = 0; i < fleet.Ships.Count; i++)
                    {
                        BuiltObject builtObject = fleet.Ships[i];
                        if (fleet.IsShipAvailable(builtObject) || (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Repair && builtObject.BuiltAt == null))
                        {
                            if (builtObject.DamagedComponentCount > 0)
                            {
                                builtObject.ClearPreviousMissionRequirements();
                                builtObject.AssignMission(BuiltObjectMissionType.Repair, (BuiltObject)shipYard, null, BuiltObjectMissionPriority.Unavailable);
                            }
                            else
                            {
                                builtObject.ClearPreviousMissionRequirements();
                                builtObject.AssignMission(BuiltObjectMissionType.Refuel, (BuiltObject)shipYard, null, BuiltObjectMissionPriority.Unavailable);
                            }
                        }
                    }
                    return true;
                }
            }
            return false;
        }

        public bool CheckFleetNeedsRetrofit(ShipGroup fleet, bool isAutoRetrofit)
        {
            if (fleet != null && fleet.Empire != null && fleet.Empire.Designs != null && fleet.Ships != null)
            {
                for (int i = 0; i < fleet.Ships.Count; i++)
                {
                    BuiltObject builtObject = fleet.Ships[i];
                    if (builtObject != null)
                    {
                        bool flag = true;
                        Design design = fleet.Empire.Designs.FindNewestCanBuildFullEvaluate(builtObject.SubRole);
                        double num = Galaxy.ResolveBuildSpeed(this, _Galaxy, builtObject);
                        if (num > 1.0 && (design == null || design.WarpSpeed <= 0 || builtObject.Design == null || builtObject.Design.WarpSpeed > 0))
                        {
                            flag = false;
                        }
                        if (isAutoRetrofit && builtObject.SuppressAutoRetrofit)
                        {
                            flag = false;
                        }
                        if (design != null && design != builtObject.Design && flag)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public bool AssignFleetRetrofit(ShipGroup fleet, bool isAutoRetrofit)
        {
            return AssignFleetRetrofit(fleet, null, isAutoRetrofit);
        }

        public bool AssignFleetRetrofit(ShipGroup fleet, StellarObject shipYard, bool isAutoRetrofit)
        {
            if (fleet != null)
            {
                if (shipYard == null)
                {
                    shipYard = fleet.Empire.FindNearestShipYard(fleet.LeadShip, canRepairOrBuild: true, includeVerySmallYards: false);
                }
                if (shipYard != null && shipYard is BuiltObject)
                {
                    Design design = fleet.Empire.Designs.FindNewestCanBuildFullEvaluate(fleet.LeadShip.SubRole);
                    fleet.AssignMission(BuiltObjectMissionType.Retrofit, shipYard, null, design, BuiltObjectMissionPriority.High, manuallyAssigned: true);
                    for (int i = 0; i < fleet.Ships.Count; i++)
                    {
                        BuiltObject builtObject = fleet.Ships[i];
                        if (builtObject.BuiltAt == null && builtObject.RetrofitDesign == null)
                        {
                            bool flag = true;
                            design = fleet.Empire.Designs.FindNewestCanBuildFullEvaluate(builtObject.SubRole);
                            double num = Galaxy.ResolveBuildSpeed(this, _Galaxy, builtObject);
                            if (num > 1.0 && (design == null || design.WarpSpeed <= 0 || builtObject.Design == null || builtObject.Design.WarpSpeed > 0))
                            {
                                flag = false;
                            }
                            if (isAutoRetrofit && builtObject.SuppressAutoRetrofit)
                            {
                                flag = false;
                            }
                            if (design != null && design != builtObject.Design && flag)
                            {
                                builtObject.ClearPreviousMissionRequirements();
                                builtObject.Empire.AssignRetrofitMission(builtObject, design, (BuiltObject)shipYard, forceUseOfYard: true);
                                builtObject.DateRetrofit = _Galaxy.CurrentStarDate;
                            }
                            else
                            {
                                builtObject.ClearPreviousMissionRequirements();
                                builtObject.AssignMission(BuiltObjectMissionType.Refuel, (BuiltObject)shipYard, null, BuiltObjectMissionPriority.High);
                            }
                        }
                    }
                    return true;
                }
            }
            return false;
        }

        public bool AssignFleetRefuelling(ShipGroup refuelFleet, ResourceList requiredFuel)
        {
            if (requiredFuel != null && requiredFuel.Count > 0)
            {
                for (int i = 0; i < requiredFuel.Count; i++)
                {
                    requiredFuel[i].SortTag = (int)(requiredFuel[i].SortTag * 1.2);
                }
            }
            Point point = refuelFleet.DetermineApproximateActualFleetLocation();
            StellarObject stellarObject = DecideBestFleetRefuelPoint(point.X, point.Y, refuelFleet.Empire, requiredFuel, null);
            if (stellarObject != null && refuelFleet.CheckRefuelLocationRangeAcceptable(stellarObject))
            {
                refuelFleet.AssignMission(BuiltObjectMissionType.Refuel, stellarObject, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                return true;
            }
            return false;
        }

        public bool AssignFleetRefuellingExcludeGatheringShips(ShipGroup refuelFleet, ResourceList requiredFuel)
        {
            for (int i = 0; i < requiredFuel.Count; i++)
            {
                requiredFuel[i].SortTag = (int)(requiredFuel[i].SortTag * 1.2);
            }
            Point point = refuelFleet.DetermineApproximateActualFleetLocation();
            StellarObject stellarObject = DecideBestFleetRefuelPoint(point.X, point.Y, refuelFleet.Empire, requiredFuel, null);
            if (stellarObject != null)
            {
                for (int j = 0; j > refuelFleet.Ships.Count; j++)
                {
                    BuiltObject builtObject = refuelFleet.Ships[j];
                    if (refuelFleet.IsShipAvailable(builtObject) && (builtObject.Mission == null || (builtObject.Mission.Type != BuiltObjectMissionType.MoveAndWait && builtObject.Mission.Type != BuiltObjectMissionType.Move) || builtObject.Mission.TargetHabitat != refuelFleet.GatherPoint) && (builtObject.Mission == null || builtObject.Mission.Type != BuiltObjectMissionType.Refuel))
                    {
                        builtObject.AssignMission(BuiltObjectMissionType.Refuel, stellarObject, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: true);
                    }
                }
                return true;
            }
            return false;
        }

        public void ClearAttackFleetAssignments()
        {
            ClearAttackFleetAssignments(null);
        }

        public void ClearAttackFleetAssignments(Empire targetEmpire)
        {
            if (!_ControlMilitaryFleets || ShipGroups == null)
            {
                return;
            }
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup != null && shipGroup.LeadShip != null && shipGroup.Posture == FleetPosture.Attack && shipGroup.AttackPoint != null && shipGroup.LeadShip.IsAutoControlled && (targetEmpire == null || shipGroup.AttackPoint.Empire == targetEmpire))
                {
                    shipGroup.AttackPoint = null;
                    shipGroup.PostureRangeSquared = double.MaxValue;
                }
            }
        }

        private void CheckAttackFleetTargets(EmpireList targetEmpires)
        {
            if (!_ControlMilitaryFleets || ShipGroups == null)
            {
                return;
            }
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup != null && shipGroup.LeadShip != null && shipGroup.Posture == FleetPosture.Attack && shipGroup.AttackPoint != null && shipGroup.LeadShip.IsAutoControlled && (shipGroup.AttackPoint.HasBeenDestroyed || shipGroup.AttackPoint.Empire == null || !targetEmpires.Contains(shipGroup.AttackPoint.Empire)))
                {
                    shipGroup.AttackPoint = null;
                    shipGroup.PostureRangeSquared = double.MaxValue;
                    StellarObject stellarObject = SelectFleetBase(shipGroup);
                    if (stellarObject != null)
                    {
                        shipGroup.GatherPoint = stellarObject;
                    }
                }
            }
        }

        private void ClearDefendFleets()
        {
            if (!_ControlMilitaryFleets)
            {
                return;
            }
            EmpireList empireList = ResolveEmpiresAtWarWithOrPreparingToConquer();
            if (empireList.Count > 0)
            {
                return;
            }
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup == null || shipGroup.LeadShip == null || !shipGroup.LeadShip.IsAutoControlled || shipGroup.Posture != FleetPosture.Defend)
                {
                    continue;
                }
                shipGroup.Posture = FleetPosture.Attack;
                StellarObject stellarObject = FindNearestRefuellingPoint(shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.FuelType, 4);
                if (shipGroup.GatherPoint == null || shipGroup.GatherPoint != stellarObject)
                {
                    shipGroup.GatherPoint = stellarObject;
                    if (shipGroup.GatherPoint != null && (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup.Mission.Priority == BuiltObjectMissionPriority.Low))
                    {
                        shipGroup.AssignMission(BuiltObjectMissionType.Move, shipGroup.GatherPoint, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                    }
                }
            }
        }

        private void SetDefendFleets()
        {
            SetDefendFleets(defendingFromAttack: false, assignMovement: true);
        }

        private void SetDefendFleets(bool defendingFromAttack, bool assignMovement)
        {
            if (!_ControlMilitaryFleets)
            {
                return;
            }
            int num = 10;
            int val = 1;
            if (ShipGroups.Count <= 1)
            {
                val = 0;
            }
            if (defendingFromAttack)
            {
                num = 1000;
                val = 1;
            }
            StellarObjectList stellarObjects = ResolveLocationsToDefend();
            stellarObjects = Galaxy.EnsureSingleStellarObjectPerSystem(stellarObjects);
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup != null && shipGroup.LeadShip != null && shipGroup.LeadShip.IsAutoControlled && shipGroup.GatherPoint != null && shipGroup.Posture == FleetPosture.Defend)
                {
                    while (stellarObjects.Contains(shipGroup.GatherPoint))
                    {
                        stellarObjects.Remove(shipGroup.GatherPoint);
                    }
                    Habitat systemStar = Galaxy.DetermineHabitatSystemStarForStellarObject(shipGroup.GatherPoint);
                    stellarObjects = Galaxy.RemoveObjectsWithSystemStar(stellarObjects, systemStar);
                }
            }
            ShipGroupList shipGroupList = new ShipGroupList();
            int num2 = 0;
            for (int j = 0; j < ShipGroups.Count; j++)
            {
                if (ShipGroups[j].Ships.Count < num)
                {
                    shipGroupList.Add(ShipGroups[j]);
                }
                if (ShipGroups[j].Posture == FleetPosture.Defend)
                {
                    num2++;
                }
            }
            int num3 = shipGroupList.Count - (int)((double)shipGroupList.Count * 0.25);
            if (shipGroupList.Count > 0)
            {
                num3 = Math.Max(val, num3);
            }
            if (num2 >= num3)
            {
                return;
            }
            for (int k = 0; k < stellarObjects.Count; k++)
            {
                StellarObject stellarObject = stellarObjects[k];
                bool flag = assignMovement;
                ShipGroup shipGroup2 = FindNearestAvailableFleet(stellarObject.Xpos, stellarObject.Ypos, BuiltObjectMissionPriority.Low, 0, FleetPosture.Attack, mustBeWithinFuelRange: false, 0.0, mustBeAutomated: true, shouldBeSmallFleet: true);
                if (shipGroup2 == null)
                {
                    shipGroup2 = FindNearestAvailableFleet(stellarObject.Xpos, stellarObject.Ypos, BuiltObjectMissionPriority.Unavailable, 0, FleetPosture.Attack, mustBeWithinFuelRange: false, 0.0, mustBeAutomated: true, shouldBeSmallFleet: true);
                    flag = false;
                }
                if (shipGroup2 != null)
                {
                    shipGroup2.GatherPoint = stellarObject;
                    shipGroup2.Posture = FleetPosture.Defend;
                    shipGroup2.PostureRangeSquared = 250000000000.0;
                    if (flag && shipGroup2.GatherPoint != null)
                    {
                        shipGroup2.AssignMission(BuiltObjectMissionType.Move, shipGroup2.GatherPoint, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                    }
                    num2++;
                }
                if (num2 >= num3)
                {
                    break;
                }
            }
        }

        private bool SetDefendFleetForLocation(double x, double y)
        {
            bool result = false;
            bool flag = true;
            ShipGroup shipGroup = FindNearestAvailableFleet(x, y, BuiltObjectMissionPriority.Low, 0, FleetPosture.Attack, mustBeWithinFuelRange: false, 0.0, mustBeAutomated: true, shouldBeSmallFleet: true);
            if (shipGroup == null)
            {
                shipGroup = FindNearestAvailableFleet(x, y, BuiltObjectMissionPriority.Unavailable, 0, FleetPosture.Attack, mustBeWithinFuelRange: false, 0.0, mustBeAutomated: true, shouldBeSmallFleet: true);
                flag = false;
            }
            if (shipGroup != null)
            {
                StellarObject stellarObject = FindNearestRefuellingPoint(x, y, shipGroup.LeadShip.FuelType, 3);
                if (stellarObject != null)
                {
                    shipGroup.GatherPoint = stellarObject;
                    shipGroup.Posture = FleetPosture.Defend;
                    shipGroup.PostureRangeSquared = 2304000000.0;
                    if (flag)
                    {
                        shipGroup.AssignMission(BuiltObjectMissionType.Move, null, null, x, y, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                    }
                    result = true;
                }
            }
            return result;
        }

        private void PirateTaskFleets()
        {
            int refusalCount = 0;
            if (ShipGroups == null)
            {
                return;
            }
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup != null && IsShipGroupAvailable(shipGroup, BuiltObjectMissionPriority.Low, 0) && shipGroup.LeadShip != null && shipGroup.LeadShip.IsAutoControlled && (shipGroup.WarpSpeed <= 0 || shipGroup.LeadShip.CurrentSpeed < (float)shipGroup.WarpSpeed))
                {
                    double num = shipGroup.CalculateRefuellingPortion();
                    if (shipGroup.LeadShip.ParentHabitat != null && shipGroup.LeadShip.ParentHabitat == shipGroup.GatherPoint)
                    {
                        num = Math.Max(num, 0.7);
                    }
                    ResourceList requiredFuel = new ResourceList();
                    int num2 = shipGroup.CheckShipsRequiringRefuelling(num, out requiredFuel);
                    if (num2 > (int)((double)shipGroup.Ships.Count * 0.0))
                    {
                        requiredFuel = shipGroup.CalculateRequiredFuel();
                        AssignFleetRefuellingExcludeGatheringShips(shipGroup, requiredFuel);
                    }
                }
            }
            if (PirateMissions != null && PirateMissions.Count > 0)
            {
                for (int j = 0; j < PirateMissions.Count; j++)
                {
                    EmpireActivity empireActivity = PirateMissions[j];
                    if (empireActivity == null || empireActivity.AssignedEmpire != this || empireActivity.Target == null)
                    {
                        continue;
                    }
                    switch (empireActivity.Type)
                    {
                        case EmpireActivityType.Attack:
                            {
                                ShipGroupList shipGroupList = ShipGroups.ResolveFleetsWithAttackTarget(empireActivity.Target);
                                if (shipGroupList.Count > 0)
                                {
                                    break;
                                }
                                int overallStrength = empireActivity.Target.FirepowerRaw;
                                if (empireActivity.Target is BuiltObject)
                                {
                                    BuiltObject builtObject = (BuiltObject)empireActivity.Target;
                                    overallStrength = builtObject.CalculateOverallStrengthFactor();
                                }
                                ShipGroup shipGroup3 = FindNearestAvailableFleet(empireActivity.Target.Xpos, empireActivity.Target.Ypos, BuiltObjectMissionPriority.Normal, overallStrength, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0);
                                if (shipGroup3 != null && shipGroup3.LeadShip != null)
                                {
                                    BuiltObjectMissionType missionType2 = BuiltObjectMissionType.Attack;
                                    if (empireActivity.Target is BuiltObject)
                                    {
                                        BuiltObject target = (BuiltObject)empireActivity.Target;
                                        missionType2 = DetermineDestroyOrCaptureTarget(shipGroup3, target);
                                    }
                                    if ((shipGroup3.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessagePiratesAttackMission(empireActivity, shipGroup3), empireActivity.Target, AdvisorMessageType.EnemyAttack, shipGroup3, null))
                                    {
                                        shipGroup3.AssignMission(missionType2, empireActivity.Target, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    }
                                }
                                break;
                            }
                        case EmpireActivityType.Defend:
                            {
                                ShipGroupList shipGroupList = ShipGroups.ResolveFleetsWithWaitTarget(empireActivity.Target);
                                if (shipGroupList.Count > 0)
                                {
                                    break;
                                }
                                ShipGroup shipGroup2 = FindNearestAvailableFleet(empireActivity.Target.Xpos, empireActivity.Target.Ypos, BuiltObjectMissionPriority.Normal, 1, FleetPosture.Defend, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0);
                                if (shipGroup2 == null)
                                {
                                    shipGroup2 = FindNearestAvailableFleet(empireActivity.Target.Xpos, empireActivity.Target.Ypos, BuiltObjectMissionPriority.Normal, 1, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0);
                                }
                                if (shipGroup2 != null && shipGroup2.LeadShip != null)
                                {
                                    BuiltObjectMissionType missionType = BuiltObjectMissionType.MoveAndWait;
                                    if (shipGroup2.LeadShip.IsAutoControlled && _ControlMilitaryFleets)
                                    {
                                        long expiryDate = empireActivity.ExpiryDate;
                                        shipGroup2.AssignMission(missionType, empireActivity.Target, null, expiryDate, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    }
                                    else if (CheckTaskAuthorized(AutomationLevel.SemiAutomated, ref refusalCount, GenerateAutomationMessagePiratesDefendMission(empireActivity, shipGroup2), empireActivity.Target, AdvisorMessageType.DefendTarget, shipGroup2, null))
                                    {
                                        long expiryDate2 = empireActivity.ExpiryDate;
                                        shipGroup2.AssignMission(missionType, empireActivity.Target, null, expiryDate2, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                    }
                                }
                                break;
                            }
                    }
                }
            }
            if (Troops.Count > 0 && _ColonizationTargets != null && _ColonizationTargets.Count > 0)
            {
                for (int k = 0; k < _ColonizationTargets.Count; k++)
                {
                    Habitat habitat = _ColonizationTargets[k].Habitat;
                    if (habitat == null || habitat.HasBeenDestroyed)
                    {
                        continue;
                    }
                    bool flag = true;
                    PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(this);
                    PirateColonyControl byFacilityControl = habitat.GetPirateControl().GetByFacilityControl();
                    if (byFaction != null && (byFaction.HasFacilityControl || byFacilityControl == null))
                    {
                        flag = false;
                    }
                    if (habitat.Empire == this)
                    {
                        flag = false;
                    }
                    if (habitat.Empire != this && habitat.Empire != _Galaxy.IndependentEmpire && habitat.Empire != null)
                    {
                        PirateRelation pirateRelation = ObtainPirateRelation(habitat.Empire);
                        if (pirateRelation.Type == PirateRelationType.Protection)
                        {
                            flag = false;
                        }
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    ShipGroup shipGroup4 = FindNearestAvailableFleet(habitat.Xpos, habitat.Ypos, BuiltObjectMissionPriority.Normal, 0, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, habitat.TroopLevelRequired * 100);
                    if (shipGroup4 != null && (shipGroup4.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated))
                    {
                        string empty = string.Empty;
                        if (CheckTaskAuthorized(taskDescription: (habitat.Empire != _Galaxy.IndependentEmpire) ? GenerateAutomationMessageAttackEnemy(habitat, shipGroup4) : GenerateAutomationMessageInvadeIndependent(habitat, shipGroup4), automationLevel: _ControlMilitaryAttacks, refusalCount: ref refusalCount, taskTarget: habitat, advisorMessageType: AdvisorMessageType.EnemyAttack, advisorMessageData: shipGroup4, advisorMessageData2: null))
                        {
                            shipGroup4.AssignMission(BuiltObjectMissionType.Attack, habitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                    }
                }
            }
            double valueThreshold = 1.0;
            int maximumDefenseStrength = 40000;
            switch (PiratePlayStyle)
            {
                case PiratePlayStyle.Mercenary:
                    valueThreshold = 0.0;
                    maximumDefenseStrength = 120000;
                    break;
                case PiratePlayStyle.Pirate:
                    valueThreshold = 0.5;
                    maximumDefenseStrength = 80000;
                    break;
            }
            HabitatPrioritizationList habitatPrioritizationList = IdentifyDesiredEnemyMiningStations(5, excludeRecentRaids: true, valueThreshold);
            if (habitatPrioritizationList.Count > 0)
            {
                for (int l = 0; l < habitatPrioritizationList.Count; l++)
                {
                    HabitatPrioritization habitatPrioritization = habitatPrioritizationList[l];
                    if (habitatPrioritization == null || habitatPrioritization.Habitat == null)
                    {
                        continue;
                    }
                    BuiltObject builtObject2 = _Galaxy.DetermineMiningStationAtHabitat(habitatPrioritization.Habitat);
                    if (builtObject2 == null)
                    {
                        continue;
                    }
                    int overallStrength2 = CalculateDefendingStrength(builtObject2);
                    ShipGroup shipGroup5 = FindNearestAvailableFleet(builtObject2.Xpos, builtObject2.Ypos, BuiltObjectMissionPriority.Normal, overallStrength2, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0);
                    if (shipGroup5 == null || !shipGroup5.CheckFleetTargetWithinFuelRangeAndRefuel(builtObject2.Xpos, builtObject2.Ypos, 0.1) || (!shipGroup5.LeadShip.IsAutoControlled && _ControlMilitaryAttacks != AutomationLevel.SemiAutomated))
                    {
                        continue;
                    }
                    EmpireActivity firstByTargetAndType = PirateMissions.GetFirstByTargetAndType(builtObject2, EmpireActivityType.Defend);
                    if (firstByTargetAndType == null)
                    {
                        if (CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageRaidBase(builtObject2, shipGroup5), builtObject2, AdvisorMessageType.PirateRaid, shipGroup5, null))
                        {
                            shipGroup5.AssignMission(BuiltObjectMissionType.Raid, builtObject2, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                        break;
                    }
                }
            }
            HabitatPrioritizationList habitatPrioritizationList2 = IdentifyRaidableColonies(maximumDefenseStrength, valueThreshold);
            if (habitatPrioritizationList2.Count > 0)
            {
                for (int m = 0; m < habitatPrioritizationList2.Count; m++)
                {
                    HabitatPrioritization habitatPrioritization2 = habitatPrioritizationList2[m];
                    if (habitatPrioritization2 == null || habitatPrioritization2.Habitat == null)
                    {
                        continue;
                    }
                    int troopStrength = 0;
                    int overallStrength3 = CalculateDefendingStrength(habitatPrioritization2.Habitat, out troopStrength);
                    ShipGroup shipGroup6 = FindNearestAvailableFleet(habitatPrioritization2.Habitat.Xpos, habitatPrioritization2.Habitat.Ypos, BuiltObjectMissionPriority.Normal, overallStrength3, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0, (int)((double)troopStrength * 0.5));
                    if (shipGroup6 == null || !shipGroup6.CheckFleetTargetWithinFuelRangeAndRefuel(habitatPrioritization2.Habitat.Xpos, habitatPrioritization2.Habitat.Ypos, 0.1) || (!shipGroup6.LeadShip.IsAutoControlled && _ControlMilitaryAttacks != AutomationLevel.SemiAutomated))
                    {
                        continue;
                    }
                    EmpireActivity firstByTargetAndType2 = PirateMissions.GetFirstByTargetAndType(habitatPrioritization2.Habitat, EmpireActivityType.Defend);
                    if (firstByTargetAndType2 == null)
                    {
                        if (CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageRaidColony(habitatPrioritization2.Habitat, shipGroup6), habitatPrioritization2.Habitat, AdvisorMessageType.PirateRaid, shipGroup6, null))
                        {
                            shipGroup6.AssignMission(BuiltObjectMissionType.Raid, habitatPrioritization2.Habitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                        break;
                    }
                }
            }
            PirateRelation relationWithLowestEvaluation = PirateRelations.GetRelationWithLowestEvaluation();
            if (relationWithLowestEvaluation != null && relationWithLowestEvaluation.Type == PirateRelationType.None && relationWithLowestEvaluation.Evaluation < -15f && relationWithLowestEvaluation.OtherEmpire != null)
            {
                BuiltObject builtObject3 = null;
                if (relationWithLowestEvaluation.OtherEmpire.PirateEmpireBaseHabitat != null)
                {
                    builtObject3 = _Galaxy.FindNearestKnownBaseForPirateAttack(this, relationWithLowestEvaluation.OtherEmpire.PirateEmpireBaseHabitat.Xpos, relationWithLowestEvaluation.OtherEmpire.PirateEmpireBaseHabitat.Ypos);
                }
                else if (relationWithLowestEvaluation.OtherEmpire.Capital != null)
                {
                    builtObject3 = _Galaxy.FindNearestKnownBaseForPirateAttack(this, relationWithLowestEvaluation.OtherEmpire.Capital.Xpos, relationWithLowestEvaluation.OtherEmpire.Capital.Ypos);
                }
                if (builtObject3 != null && !builtObject3.HasBeenDestroyed)
                {
                    int overallStrength4 = CalculateDefendingStrength(builtObject3);
                    ShipGroup shipGroup7 = FindNearestAvailableFleet(builtObject3.Xpos, builtObject3.Ypos, BuiltObjectMissionPriority.Normal, overallStrength4, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0);
                    if (shipGroup7 != null && shipGroup7.LeadShip != null)
                    {
                        BuiltObjectMissionType missionType3 = DetermineDestroyOrCaptureTarget(shipGroup7, builtObject3);
                        if ((shipGroup7.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessagePiratesAttackPirates(builtObject3, shipGroup7), builtObject3, AdvisorMessageType.EnemyAttack, shipGroup7, null))
                        {
                            shipGroup7.AssignMission(missionType3, builtObject3, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                    }
                }
            }
            if (SpacePorts == null)
            {
                return;
            }
            int num3 = Math.Max(1, (int)((double)ShipGroups.Count * 0.2));
            for (int n = 0; n < SpacePorts.Count; n++)
            {
                BuiltObject builtObject4 = SpacePorts[n];
                if (builtObject4 != null && !builtObject4.HasBeenDestroyed && builtObject4.Empire == this)
                {
                    if (n >= num3)
                    {
                        break;
                    }
                    EnsureBaseDefendedByFleet(builtObject4);
                }
            }
        }

        private void TaskShipGroups()
        {
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (IsShipGroupAvailable(shipGroup, BuiltObjectMissionPriority.Low, 0) && shipGroup.LeadShip.IsAutoControlled && (shipGroup.WarpSpeed <= 0 || shipGroup.LeadShip.CurrentSpeed < (float)shipGroup.WarpSpeed))
                {
                    double num = shipGroup.CalculateRefuellingPortion();
                    if (shipGroup.LeadShip.ParentHabitat != null && shipGroup.LeadShip.ParentHabitat == shipGroup.GatherPoint)
                    {
                        num = Math.Max(num, 0.7);
                    }
                    ResourceList requiredFuel = new ResourceList();
                    int num2 = shipGroup.CheckShipsRequiringRefuelling(num, out requiredFuel);
                    if (num2 > (int)((double)shipGroup.Ships.Count * 0.0))
                    {
                        requiredFuel = shipGroup.CalculateRequiredFuel();
                        AssignFleetRefuellingExcludeGatheringShips(shipGroup, requiredFuel);
                    }
                }
            }
            HabitatList habitatList = new HabitatList();
            if (_Galaxy.GlobalVictoryConditions != null)
            {
                if (_Galaxy.GlobalVictoryConditions.DefendHabitat != null && _Galaxy.GlobalVictoryConditions.DefendHabitatEmpire == this)
                {
                    habitatList.Add(_Galaxy.GlobalVictoryConditions.DefendHabitat);
                }
                else if (_Galaxy.GlobalVictoryConditions.TargetHabitat != null && _Galaxy.GlobalVictoryConditions.TargetHabitatEmpire == this)
                {
                    habitatList.Add(_Galaxy.GlobalVictoryConditions.TargetHabitat);
                }
            }
            if (CheckAtWar())
            {
                HabitatList habitatList2 = new HabitatList();
                habitatList2.AddRange(Colonies);
                habitatList2.Sort();
                habitatList2.Reverse();
                int num3 = 500000;
                for (int j = 0; j < habitatList2.Count; j++)
                {
                    if (habitatList2[j].StrategicValue > num3 && !habitatList.Contains(habitatList2[j]))
                    {
                        habitatList.Add(habitatList2[j]);
                    }
                }
                if (habitatList.Count == 0)
                {
                    if (HomeWorld != null && HomeWorld.Empire == this && Policy.HomeworldDefensePriority > 1.0)
                    {
                        habitatList.Add(HomeWorld);
                    }
                    if (!habitatList.Contains(Capital) && Capital != null)
                    {
                        habitatList.Add(Capital);
                    }
                }
            }
            int num4 = Math.Max(1, (int)((double)ShipGroups.Count * 0.2));
            for (int k = 0; k < habitatList.Count; k++)
            {
                if (habitatList[k] != null)
                {
                    if (k >= num4)
                    {
                        break;
                    }
                    EnsureColonyDefendedByFleet(habitatList[k]);
                }
            }
            if (KnownPirateBases.Count > 0)
            {
                HuntPirates();
            }
            ShipGroupList shipGroupList = new ShipGroupList();
            for (int l = 0; l < ShipGroups.Count; l++)
            {
                ShipGroup shipGroup2 = ShipGroups[l];
                if (shipGroup2 != null && (shipGroup2.Mission == null || shipGroup2.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup2.Mission.Priority == BuiltObjectMissionPriority.Low))
                {
                    shipGroupList.Add(shipGroup2);
                }
            }
            if (shipGroupList.Count <= 0)
            {
                return;
            }
            int num5 = shipGroupList.Count;
            HabitatPrioritizationList habitatPrioritizationList = IdentifyThreatenedSystemsPrioritized(Capital.Xpos, Capital.Ypos, includePirateBaseSystems: false, excludeSystemsWithFleetsPresentOrEnRoute: true, excludeSystemsOfOtherEmpires: true);
            if (habitatPrioritizationList.Count <= 0)
            {
                return;
            }
            for (int m = 0; m < habitatPrioritizationList.Count; m++)
            {
                HabitatPrioritization habitatPrioritization = habitatPrioritizationList[m];
                if (habitatPrioritization == null || habitatPrioritization.Habitat == null)
                {
                    continue;
                }
                ShipGroup shipGroup3 = IdentifyNearestResponseFleet(habitatPrioritization.Habitat.Xpos, habitatPrioritization.Habitat.Ypos, mustBeWithinFuelRange: true, 0.1, 50000.0);
                if (shipGroup3 != null && shipGroup3.LeadShip != null && shipGroup3.LeadShip.IsAutoControlled)
                {
                    shipGroup3.AssignMission(BuiltObjectMissionType.Move, habitatPrioritization.Habitat, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                    num5--;
                    if (num5 <= 0)
                    {
                        break;
                    }
                }
            }
        }

        private void EnsureBaseDefendedByFleet(BuiltObject builtObject)
        {
            bool flag = false;
            ShipGroup shipGroup = FindNearestDefensiveFleet(builtObject.Xpos, builtObject.Ypos);
            if (shipGroup != null)
            {
                double num = _Galaxy.CalculateDistance(shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos, builtObject.Xpos, builtObject.Ypos);
                if (num > 5000.0)
                {
                    bool flag2 = false;
                    if (ShipGroups != null)
                    {
                        for (int i = 0; i < ShipGroups.Count; i++)
                        {
                            ShipGroup shipGroup2 = ShipGroups[i];
                            if (shipGroup2.Mission != null && shipGroup2.Mission.Type != 0 && shipGroup2.Mission.TargetBuiltObject != null && shipGroup2.Mission.TargetBuiltObject == builtObject)
                            {
                                flag2 = true;
                                break;
                            }
                        }
                    }
                    if (!flag2)
                    {
                        flag = true;
                    }
                }
            }
            else
            {
                flag = true;
            }
            if (flag)
            {
                FindNearestAvailableFleet(builtObject.Xpos, builtObject.Ypos, BuiltObjectMissionPriority.Normal, 0, FleetPosture.Defend, mustBeWithinFuelRange: false, 0.0, mustBeAutomated: true)?.AssignMission(BuiltObjectMissionType.Move, builtObject, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
            }
        }

        private void EnsureColonyDefendedByFleet(Habitat colony)
        {
            bool flag = false;
            ShipGroup shipGroup = FindNearestDefensiveFleet(colony.Xpos, colony.Ypos);
            if (shipGroup != null)
            {
                double num = _Galaxy.CalculateDistance(shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos, colony.Xpos, colony.Ypos);
                if (num > 5000.0)
                {
                    bool flag2 = false;
                    if (ShipGroups != null)
                    {
                        for (int i = 0; i < ShipGroups.Count; i++)
                        {
                            ShipGroup shipGroup2 = ShipGroups[i];
                            if (shipGroup2.Mission != null && shipGroup2.Mission.Type != 0 && shipGroup2.Mission.TargetHabitat != null && shipGroup2.Mission.TargetHabitat == colony)
                            {
                                flag2 = true;
                                break;
                            }
                        }
                    }
                    if (!flag2)
                    {
                        flag = true;
                    }
                }
            }
            else
            {
                flag = true;
            }
            if (flag)
            {
                FindNearestAvailableFleet(colony.Xpos, colony.Ypos, BuiltObjectMissionPriority.Normal, 0, FleetPosture.Defend, mustBeWithinFuelRange: false, 0.0, mustBeAutomated: true)?.AssignMission(BuiltObjectMissionType.Move, colony, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
            }
        }

        public bool CheckAtWarWithEmpire(Empire empire)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
            if (diplomaticRelation.Type == DiplomaticRelationType.War)
            {
                return true;
            }
            return false;
        }

        public bool CheckAtWar(Empire excludeEmpire)
        {
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.War && diplomaticRelation.OtherEmpire != excludeEmpire)
                {
                    return true;
                }
            }
            return false;
        }

        public bool CheckAtWar()
        {
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    return true;
                }
            }
            return false;
        }

        public BuiltObject FindNearestResortBase(double x, double y)
        {
            BuiltObject result = null;
            double num = double.MaxValue;
            if (ResortBases != null)
            {
                for (int i = 0; i < ResortBases.Count; i++)
                {
                    BuiltObject builtObject = ResortBases[i];
                    if (builtObject != null && !builtObject.HasBeenDestroyed)
                    {
                        double num2 = _Galaxy.CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        if (num2 < num)
                        {
                            result = builtObject;
                            num = num2;
                        }
                    }
                }
            }
            return result;
        }

        private ShipGroup FindNearestFleet(double x, double y)
        {
            ShipGroup result = null;
            double num = double.MaxValue;
            if (ShipGroups != null)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup.LeadShip != null)
                    {
                        double num2 = _Galaxy.CalculateDistance(x, y, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos);
                        if (num2 < num)
                        {
                            result = shipGroup;
                            num = num2;
                        }
                    }
                }
            }
            return result;
        }

        private ShipGroup FindNearestDefensiveFleet(double x, double y)
        {
            ShipGroup result = null;
            double num = double.MaxValue;
            if (ShipGroups != null)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup.LeadShip != null && shipGroup.Posture == FleetPosture.Defend)
                    {
                        double num2 = _Galaxy.CalculateDistance(x, y, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos);
                        if (num2 < num)
                        {
                            result = shipGroup;
                            num = num2;
                        }
                    }
                }
            }
            return result;
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture)
        {
            return FindNearestAvailableFleet(x, y, maximumPriority, overallStrength, posture, mustBeWithinFuelRange: false);
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture, bool mustBeWithinFuelRange)
        {
            return FindNearestAvailableFleet(x, y, maximumPriority, overallStrength, posture, mustBeWithinFuelRange, 0.0, mustBeAutomated: false);
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture, bool mustBeWithinFuelRange, double fuelPortionMargin, bool mustBeAutomated)
        {
            return FindNearestAvailableFleet(x, y, maximumPriority, overallStrength, posture, mustBeWithinFuelRange, 0.0, mustBeAutomated, shouldBeSmallFleet: false);
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture, bool mustBeWithinFuelRange, double fuelPortionMargin, bool mustBeAutomated, bool shouldBeSmallFleet)
        {
            return FindNearestAvailableFleet(x, y, maximumPriority, overallStrength, posture, mustBeWithinFuelRange, 0.0, mustBeAutomated, shouldBeSmallFleet, gatherPointMustBeBlank: false);
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture, bool mustBeWithinFuelRange, double fuelPortionMargin, bool mustBeAutomated, bool shouldBeSmallFleet, bool gatherPointMustBeBlank)
        {
            return FindNearestAvailableFleet(x, y, maximumPriority, overallStrength, posture, mustBeWithinFuelRange, 0.0, mustBeAutomated, shouldBeSmallFleet, gatherPointMustBeBlank, mustBeWithinPostureRange: false);
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture, bool mustBeWithinFuelRange, double fuelPortionMargin, bool mustBeAutomated, bool shouldBeSmallFleet, bool gatherPointMustBeBlank, bool mustBeWithinPostureRange)
        {
            return FindNearestAvailableFleet(x, y, maximumPriority, overallStrength, posture, mustBeWithinFuelRange, 0.0, mustBeAutomated, shouldBeSmallFleet, gatherPointMustBeBlank, mustBeWithinPostureRange, 0);
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture, bool mustBeWithinFuelRange, double fuelPortionMargin, bool mustBeAutomated, bool shouldBeSmallFleet, bool gatherPointMustBeBlank, bool mustBeWithinPostureRange, int minimumTroopStrength)
        {
            return FindNearestAvailableFleet(x, y, maximumPriority, overallStrength, posture, mustBeWithinFuelRange, 0.0, mustBeAutomated, shouldBeSmallFleet, gatherPointMustBeBlank, mustBeWithinPostureRange, minimumTroopStrength, 0);
        }

        private ShipGroup FindNearestAvailableFleet(double x, double y, BuiltObjectMissionPriority maximumPriority, int overallStrength, FleetPosture posture, bool mustBeWithinFuelRange, double fuelPortionMargin, bool mustBeAutomated, bool shouldBeSmallFleet, bool gatherPointMustBeBlank, bool mustBeWithinPostureRange, int minimumTroopStrength, int minimumBoardingStrength)
        {
            ShipGroup result = null;
            double num = double.MaxValue;
            if (ShipGroups != null)
            {
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup.LeadShip == null || !IsShipGroupAvailableWithAttackStrength(shipGroup, maximumPriority, overallStrength) || (gatherPointMustBeBlank && shipGroup.GatherPoint != null) || (shouldBeSmallFleet && (shipGroup.ShipTargetAmount >= 10 || shipGroup.Ships.Count >= 10)))
                    {
                        continue;
                    }
                    if (mustBeWithinFuelRange)
                    {
                        if (!shipGroup.CheckFleetTargetWithinFuelRangeAndRefuel(x, y, fuelPortionMargin) || (mustBeAutomated && !shipGroup.LeadShip.IsAutoControlled) || shipGroup.Posture != posture || shipGroup.TotalTroopAttackStrength < minimumTroopStrength)
                        {
                            continue;
                        }
                        int num2 = shipGroup.TotalAssaultPodCount * 6000;
                        if (num2 < minimumBoardingStrength)
                        {
                            continue;
                        }
                        bool flag = true;
                        if (mustBeWithinPostureRange)
                        {
                            flag = false;
                            if (shipGroup.Posture == FleetPosture.Defend && shipGroup.GatherPoint != null)
                            {
                                double num3 = _Galaxy.CalculateDistanceSquared(x, y, shipGroup.GatherPoint.Xpos, shipGroup.GatherPoint.Ypos);
                                if (shipGroup.PostureRangeSquared >= num3)
                                {
                                    flag = true;
                                }
                            }
                            else if (shipGroup.Posture == FleetPosture.Attack)
                            {
                                if (shipGroup.AttackPoint != null)
                                {
                                    double num4 = _Galaxy.CalculateDistanceSquared(x, y, shipGroup.AttackPoint.Xpos, shipGroup.AttackPoint.Ypos);
                                    if (shipGroup.PostureRangeSquared >= num4)
                                    {
                                        flag = true;
                                    }
                                }
                                else
                                {
                                    flag = true;
                                }
                            }
                        }
                        if (flag)
                        {
                            double num5 = _Galaxy.CalculateDistance(x, y, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos);
                            if (num5 < num)
                            {
                                result = shipGroup;
                                num = num5;
                            }
                        }
                    }
                    else
                    {
                        if ((mustBeAutomated && !shipGroup.LeadShip.IsAutoControlled) || shipGroup.Posture != posture || shipGroup.TotalTroopAttackStrength < minimumTroopStrength)
                        {
                            continue;
                        }
                        bool flag2 = true;
                        if (mustBeWithinPostureRange)
                        {
                            flag2 = false;
                            if (shipGroup.Posture == FleetPosture.Defend && shipGroup.GatherPoint != null)
                            {
                                double num6 = _Galaxy.CalculateDistanceSquared(x, y, shipGroup.GatherPoint.Xpos, shipGroup.GatherPoint.Ypos);
                                if (shipGroup.PostureRangeSquared >= num6)
                                {
                                    flag2 = true;
                                }
                            }
                            else if (shipGroup.Posture == FleetPosture.Attack)
                            {
                                if (shipGroup.AttackPoint != null)
                                {
                                    double num7 = _Galaxy.CalculateDistanceSquared(x, y, shipGroup.AttackPoint.Xpos, shipGroup.AttackPoint.Ypos);
                                    if (shipGroup.PostureRangeSquared >= num7)
                                    {
                                        flag2 = true;
                                    }
                                }
                                else
                                {
                                    flag2 = true;
                                }
                            }
                        }
                        if (flag2)
                        {
                            double num8 = _Galaxy.CalculateDistance(x, y, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos);
                            if (num8 < num)
                            {
                                result = shipGroup;
                                num = num8;
                            }
                        }
                    }
                }
            }
            return result;
        }

        private void HuntPirates()
        {
            int refusalCount = 0;
            if (KnownPirateBases.Count <= 0 || Reclusive || Galaxy.Rnd.Next(0, 3) <= 0 || CheckAtWar())
            {
                return;
            }
            ShipGroup shipGroup = FindAvailableShipGroup(BuiltObjectMissionPriority.Low, 0, FleetPosture.Attack);
            if (shipGroup == null)
            {
                return;
            }
            HabitatList systemPriorities = new HabitatList();
            HabitatPrioritizationList habitatPrioritizationList = IdentifyColonizationTargets(_Galaxy, filterOutDangerousTargets: false, 0, int.MaxValue, includeLowQualityTargets: false, includeDistantTargets: false);
            if (habitatPrioritizationList != null)
            {
                systemPriorities = habitatPrioritizationList.ResolveSystems();
            }
            BuiltObjectList builtObjectList = KnownPirateBases.GenerateDistanceOrderedList(Capital.Xpos, Capital.Ypos, systemPriorities);
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject = builtObjectList[i];
                PirateRelation pirateRelation = builtObject.Empire.ObtainPirateRelation(this);
                int num = builtObject.Empire.PirateMissions.IndexOfRequester(this, EmpireActivityType.Attack);
                if (num >= 0 || pirateRelation.Type == PirateRelationType.Protection)
                {
                    continue;
                }
                int num2 = builtObject.CalculateOverallStrengthFactor();
                if (CheckSystemVisible(builtObject.NearestSystemStar))
                {
                    num2 = CalculateDefendingStrength(builtObject);
                }
                ShipGroup shipGroup2 = FindNearestAvailableFleet(builtObject.Xpos, builtObject.Ypos, BuiltObjectMissionPriority.Low, num2, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true);
                if (shipGroup2 == null)
                {
                    shipGroup2 = FindNearestAvailableFleet(builtObject.Xpos, builtObject.Ypos, BuiltObjectMissionPriority.Low, num2, FleetPosture.Defend, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true);
                }
                if (shipGroup2 == null)
                {
                    continue;
                }
                double num3 = _Galaxy.CalculateDistance(shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos, builtObject.Xpos, builtObject.Ypos);
                if (!(num3 < Galaxy.AttackOnPiratesRange) || !shipGroup2.CheckFleetTargetWithinFuelRangeAndRefuel(builtObject.Xpos, builtObject.Ypos, 0.1))
                {
                    continue;
                }
                int num4 = 0;
                for (int j = 0; j < BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = BuiltObjects[j];
                    if (builtObject2.Role == BuiltObjectRole.Military && builtObject2.Mission != null && builtObject2.Mission.Type == BuiltObjectMissionType.Attack && builtObject2.Mission.TargetBuiltObject != null)
                    {
                        BuiltObject targetBuiltObject = builtObject2.Mission.TargetBuiltObject;
                        if (targetBuiltObject == builtObject)
                        {
                            num4 += builtObject2.CalculateOverallStrengthFactor();
                        }
                    }
                }
                if (num4 < (int)((double)num2 * 1.5) && (shipGroup2.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackPirateBase(builtObject, shipGroup2), builtObject, AdvisorMessageType.EnemyAttack, shipGroup2, null))
                {
                    BuiltObjectMissionType missionType = DetermineDestroyOrCaptureTarget(shipGroup2, builtObject);
                    shipGroup2.AssignMission(missionType, builtObject, null, BuiltObjectMissionPriority.High, manuallyAssigned: true);
                    break;
                }
            }
        }

        private EmpireList ResolveEmpiresAtWarWithOrPreparingToConquer()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation == null)
                {
                    continue;
                }
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                    continue;
                }
                DiplomaticStrategy strategy = diplomaticRelation.Strategy;
                if (strategy == DiplomaticStrategy.Conquer)
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            return empireList;
        }

        private EmpireList ResolveEmpiresToDefendAgainst()
        {
            EmpireList empireList = new EmpireList();
            if (PirateEmpireBaseHabitat != null)
            {
                for (int i = 0; i < PirateRelations.Count; i++)
                {
                    PirateRelation pirateRelation = PirateRelations[i];
                    if (pirateRelation != null && pirateRelation.OtherEmpire != null && pirateRelation.Type == PirateRelationType.None)
                    {
                        empireList.Add(pirateRelation.OtherEmpire);
                    }
                }
            }
            else
            {
                for (int j = 0; j < DiplomaticRelations.Count; j++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[j];
                    if (diplomaticRelation == null)
                    {
                        continue;
                    }
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        empireList.Add(diplomaticRelation.OtherEmpire);
                        continue;
                    }
                    switch (diplomaticRelation.Strategy)
                    {
                        case DiplomaticStrategy.Conquer:
                        case DiplomaticStrategy.Defend:
                        case DiplomaticStrategy.DefendPlacate:
                        case DiplomaticStrategy.DefendUndermine:
                        case DiplomaticStrategy.Punish:
                            if (!diplomaticRelation.OtherEmpire.Reclusive)
                            {
                                empireList.Add(diplomaticRelation.OtherEmpire);
                            }
                            break;
                    }
                }
            }
            return empireList;
        }

        public StellarObjectList ResolveLocationsToDefend()
        {
            return ResolveLocationsToDefend(includeBases: true);
        }

        public StellarObjectList ResolveLocationsToDefend(bool includeBases)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            if (PirateEmpireBaseHabitat != null)
            {
                if (SpacePorts != null)
                {
                    for (int i = 0; i < SpacePorts.Count; i++)
                    {
                        BuiltObject builtObject = SpacePorts[i];
                        if (builtObject != null && !builtObject.HasBeenDestroyed && !stellarObjectList.Contains(builtObject))
                        {
                            stellarObjectList.Add(builtObject);
                        }
                    }
                }
                for (int j = 0; j < Colonies.Count; j++)
                {
                    Habitat habitat = Colonies[j];
                    if (habitat != null && !habitat.HasBeenDestroyed && habitat.GetPirateControl().GetByFaction(this) != null && !stellarObjectList.Contains(habitat))
                    {
                        stellarObjectList.Add(habitat);
                    }
                }
            }
            else
            {
                EmpireList empireList = ResolveEmpiresToDefendAgainst();
                for (int k = 0; k < empireList.Count; k++)
                {
                    Empire empire = empireList[k];
                    DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(this);
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        stellarObjectList = AddWarObjectivesToList(diplomaticRelation, stellarObjectList, calculateWarObjectivesIfNotPresent: false, includeBases);
                    }
                }
                for (int l = 0; l < empireList.Count; l++)
                {
                    Empire empire2 = empireList[l];
                    DiplomaticRelation diplomaticRelation2 = ObtainDiplomaticRelation(empire2);
                    if (diplomaticRelation2.Type != DiplomaticRelationType.War)
                    {
                        DiplomaticRelation relation = empire2.ObtainDiplomaticRelation(this);
                        switch (diplomaticRelation2.Strategy)
                        {
                            case DiplomaticStrategy.Defend:
                            case DiplomaticStrategy.DefendPlacate:
                            case DiplomaticStrategy.DefendUndermine:
                                stellarObjectList = AddWarObjectivesToList(relation, stellarObjectList, calculateWarObjectivesIfNotPresent: true, includeBases);
                                break;
                        }
                    }
                }
                for (int m = 0; m < empireList.Count; m++)
                {
                    Empire empire3 = empireList[m];
                    DiplomaticRelation diplomaticRelation3 = ObtainDiplomaticRelation(empire3);
                    if (diplomaticRelation3.Type != DiplomaticRelationType.War)
                    {
                        DiplomaticRelation relation2 = empire3.ObtainDiplomaticRelation(this);
                        DiplomaticStrategy strategy = diplomaticRelation3.Strategy;
                        if (strategy == DiplomaticStrategy.Conquer)
                        {
                            stellarObjectList = AddWarObjectivesToList(relation2, stellarObjectList, calculateWarObjectivesIfNotPresent: true, includeBases);
                        }
                    }
                }
                if (HomeWorld != null && HomeWorld.Empire == this && Policy.HomeworldDefensePriority > 1.0 && !stellarObjectList.Contains(HomeWorld))
                {
                    stellarObjectList.Add(HomeWorld);
                }
                if (Capitals != null)
                {
                    for (int n = 0; n < Capitals.Count; n++)
                    {
                        Habitat habitat2 = Capitals[n];
                        if (habitat2 != null && !habitat2.HasBeenDestroyed)
                        {
                            BuiltObject builtObject2 = Galaxy.DetermineSpacePortAtColony(habitat2);
                            if (!stellarObjectList.Contains(habitat2) && (builtObject2 == null || !stellarObjectList.Contains(builtObject2)))
                            {
                                stellarObjectList.Add(habitat2);
                            }
                        }
                    }
                }
                if (SpacePorts != null)
                {
                    for (int num = 0; num < SpacePorts.Count; num++)
                    {
                        BuiltObject builtObject3 = SpacePorts[num];
                        if (builtObject3 != null && !builtObject3.HasBeenDestroyed)
                        {
                            Habitat parentHabitat = builtObject3.ParentHabitat;
                            if (parentHabitat != null && !stellarObjectList.Contains(builtObject3) && !stellarObjectList.Contains(parentHabitat))
                            {
                                stellarObjectList.Add(parentHabitat);
                            }
                        }
                    }
                }
                StellarObject[] array = stellarObjectList.ToArray();
                for (int num2 = 0; num2 < array.Length; num2++)
                {
                    if (array[num2].Empire != this)
                    {
                        stellarObjectList.Remove(array[num2]);
                    }
                }
            }
            return stellarObjectList;
        }

        private StellarObjectList AddWarObjectivesToList(DiplomaticRelation relation, StellarObjectList objectives, bool calculateWarObjectivesIfNotPresent)
        {
            return AddWarObjectivesToList(relation, objectives, calculateWarObjectivesIfNotPresent, includeBases: true);
        }

        private StellarObjectList AddWarObjectivesToList(DiplomaticRelation relation, StellarObjectList objectives, bool calculateWarObjectivesIfNotPresent, bool includeBases)
        {
            if (relation != null)
            {
                if (relation.WarObjective == WarObjective.CaptureObjectives)
                {
                    for (int i = 0; i < relation.WarObjectiveColonies.Count; i++)
                    {
                        if (!objectives.Contains(relation.WarObjectiveColonies[i]))
                        {
                            objectives.Add(relation.WarObjectiveColonies[i]);
                        }
                    }
                    if (includeBases)
                    {
                        for (int j = 0; j < relation.WarObjectiveBases.Count; j++)
                        {
                            if (!objectives.Contains(relation.WarObjectiveBases[j]) && relation.WarObjectiveBases[j].ParentHabitat != null && relation.WarObjectiveBases[j].ParentHabitat.Resources != null && relation.WarObjectiveBases[j].ParentHabitat.Resources.HasSuperLuxuryResources())
                            {
                                objectives.Add(relation.WarObjectiveBases[j]);
                            }
                        }
                    }
                }
                else if (calculateWarObjectivesIfNotPresent && relation.ThisEmpire != null && relation.OtherEmpire != null)
                {
                    HabitatList targetedColonies = new HabitatList();
                    BuiltObjectList targetedBases = new BuiltObjectList();
                    relation.ThisEmpire.IdentifyEmpireWarObjectives(relation.OtherEmpire, out targetedColonies, out targetedBases);
                    for (int k = 0; k < targetedColonies.Count; k++)
                    {
                        if (!objectives.Contains(targetedColonies[k]))
                        {
                            objectives.Add(targetedColonies[k]);
                        }
                    }
                    if (includeBases)
                    {
                        for (int l = 0; l < targetedBases.Count; l++)
                        {
                            if (!objectives.Contains(targetedBases[l]) && targetedBases[l].ParentHabitat != null && targetedBases[l].ParentHabitat.Resources != null && targetedBases[l].ParentHabitat.Resources.HasSuperLuxuryResources())
                            {
                                objectives.Add(targetedBases[l]);
                            }
                        }
                    }
                }
            }
            return objectives;
        }

        public void ReviewDefensiveFleetLocations()
        {
            if (!_ControlMilitaryFleets || ShipGroups == null)
            {
                return;
            }
            StellarObjectList stellarObjectList = new StellarObjectList();
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                stellarObjectList.Add(shipGroup.GatherPoint);
                if (shipGroup != null && shipGroup.LeadShip != null && shipGroup.Posture == FleetPosture.Defend && shipGroup.LeadShip.IsAutoControlled)
                {
                    shipGroup.GatherPoint = null;
                }
            }
            StellarObjectList stellarObjects = ResolveLocationsToDefend();
            stellarObjects = Galaxy.EnsureSingleStellarObjectPerSystem(stellarObjects);
            for (int j = 0; j < stellarObjects.Count; j++)
            {
                StellarObject stellarObject = stellarObjects[j];
                if (stellarObject == null || stellarObject.HasBeenDestroyed)
                {
                    continue;
                }
                ShipGroup shipGroup2 = FindNearestAvailableFleet(stellarObject.Xpos, stellarObject.Ypos, BuiltObjectMissionPriority.Unavailable, 0, FleetPosture.Defend, mustBeWithinFuelRange: false, 0.0, mustBeAutomated: true, shouldBeSmallFleet: true, gatherPointMustBeBlank: true);
                if (shipGroup2 != null)
                {
                    shipGroup2.GatherPoint = stellarObject;
                    shipGroup2.PostureRangeSquared = 250000000000.0;
                    StellarObject stellarObject2 = null;
                    int num = ShipGroups.IndexOf(shipGroup2);
                    if (num >= 0 && num < stellarObjectList.Count)
                    {
                        stellarObject2 = stellarObjectList[num];
                    }
                    if (shipGroup2.GatherPoint != stellarObject2 && shipGroup2.Mission != null && shipGroup2.Mission.Type == BuiltObjectMissionType.Move && shipGroup2.Mission.Target == stellarObject2)
                    {
                        shipGroup2.CompleteMission(clearShipMissions: true);
                    }
                }
            }
            for (int k = 0; k < ShipGroups.Count; k++)
            {
                ShipGroup shipGroup3 = ShipGroups[k];
                if (shipGroup3 == null || shipGroup3.LeadShip == null || shipGroup3.Posture != FleetPosture.Defend || shipGroup3.GatherPoint != null || !shipGroup3.LeadShip.IsAutoControlled)
                {
                    continue;
                }
                shipGroup3.Posture = FleetPosture.Attack;
                shipGroup3.PostureRangeSquared = double.MaxValue;
                StellarObject stellarObject3 = SelectFleetBase(shipGroup3);
                if (stellarObject3 == null)
                {
                    continue;
                }
                shipGroup3.GatherPoint = stellarObject3;
                if ((shipGroup3.Mission != null && shipGroup3.Mission.Type != 0 && shipGroup3.Mission.Priority != BuiltObjectMissionPriority.Low) || (shipGroup3.Mission != null && shipGroup3.Mission.Type == BuiltObjectMissionType.Move && shipGroup3.Mission.Target == shipGroup3.GatherPoint))
                {
                    continue;
                }
                double num2 = _Galaxy.CalculateDistance(shipGroup3.LeadShip.Xpos, shipGroup3.LeadShip.Ypos, stellarObject3.Xpos, stellarObject3.Ypos);
                if (!(num2 > 2000.0))
                {
                    continue;
                }
                StellarObject stellarObject4 = stellarObject3;
                if (stellarObject3 is Habitat)
                {
                    Habitat habitat = (Habitat)stellarObject3;
                    if (habitat != null)
                    {
                        BuiltObject builtObject = Galaxy.DetermineSpacePortAtColony(habitat);
                        if (builtObject != null)
                        {
                            stellarObject4 = builtObject;
                        }
                    }
                }
                if (stellarObject4 != null && stellarObject4.IsRefuellingDepot)
                {
                    shipGroup3.AssignMission(BuiltObjectMissionType.Refuel, stellarObject4, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: false);
                }
                else
                {
                    shipGroup3.AssignMission(BuiltObjectMissionType.Move, stellarObject3, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                }
            }
        }

        private StellarObject SelectDefensiveFleetBase(ShipGroup fleet, StellarObjectList defendLocations, bool moveToLocationIfAvailable)
        {
            StellarObject stellarObject = null;
            int num = 0;
            bool flag = false;
            int iterationCount = 0;
            while (Galaxy.ConditionCheckLimit(!flag, 100, ref iterationCount) && num < defendLocations.Count)
            {
                if (fleet.CheckFleetTargetWithinFuelRangeAndRefuel(defendLocations[num].Xpos, defendLocations[num].Ypos, 0.0))
                {
                    stellarObject = defendLocations[num];
                    defendLocations.RemoveAt(num);
                    num--;
                    if (stellarObject != null && moveToLocationIfAvailable && (fleet.Mission == null || fleet.Mission.Type == BuiltObjectMissionType.Undefined || fleet.Mission.Priority == BuiltObjectMissionPriority.Low) && (fleet.Mission == null || fleet.Mission.Type != BuiltObjectMissionType.Move || fleet.Mission.Target != stellarObject))
                    {
                        if (stellarObject.IsRefuellingDepot)
                        {
                            fleet.AssignMission(BuiltObjectMissionType.Refuel, stellarObject, null, BuiltObjectMissionPriority.Unavailable, manuallyAssigned: false);
                        }
                        else
                        {
                            fleet.AssignMission(BuiltObjectMissionType.Move, stellarObject, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        }
                    }
                    flag = true;
                }
                num++;
            }
            return stellarObject;
        }

        public StellarObject SelectFleetBase(ShipGroup fleet)
        {
            if (fleet.Posture == FleetPosture.Defend)
            {
                StellarObjectList stellarObjects = ResolveLocationsToDefend();
                stellarObjects = Galaxy.EnsureSingleStellarObjectPerSystem(stellarObjects);
                for (int i = 0; i < ShipGroups.Count; i++)
                {
                    ShipGroup shipGroup = ShipGroups[i];
                    if (shipGroup != null && shipGroup.GatherPoint != null && shipGroup.Posture == FleetPosture.Defend)
                    {
                        while (stellarObjects.Contains(shipGroup.GatherPoint))
                        {
                            stellarObjects.Remove(shipGroup.GatherPoint);
                        }
                        Habitat systemStar = Galaxy.DetermineHabitatSystemStarForStellarObject(shipGroup.GatherPoint);
                        stellarObjects = Galaxy.RemoveObjectsWithSystemStar(stellarObjects, systemStar);
                    }
                }
                return SelectDefensiveFleetBase(fleet, stellarObjects, moveToLocationIfAvailable: false);
            }
            StellarObjectList stellarObjectList = new StellarObjectList();
            for (int j = 0; j < ShipGroups.Count; j++)
            {
                ShipGroup shipGroup2 = ShipGroups[j];
                if (shipGroup2.GatherPoint != null && !stellarObjectList.Contains(shipGroup2.GatherPoint))
                {
                    stellarObjectList.Add(shipGroup2.GatherPoint);
                }
            }
            StellarObjectList stellarObjectList2 = new StellarObjectList();
            if (Capital != null && !stellarObjectList.Contains(Capital))
            {
                stellarObjectList2.Add(Capital);
            }
            if (PirateEmpireBaseHabitat != null)
            {
                Habitat habitat = _ColonizationTargets.FindNearestHabitat(PirateEmpireBaseHabitat.Xpos, PirateEmpireBaseHabitat.Ypos);
                if (habitat != null && fleet.LeadShip != null)
                {
                    StellarObject stellarObject = FindNearestRefuellingPoint(habitat.Xpos, habitat.Ypos, fleet.LeadShip.FuelType, 4);
                    if (stellarObject != null)
                    {
                        stellarObjectList2.Add(stellarObject);
                    }
                }
            }
            else
            {
                EmpireList empireList = IdentifyTargetEmpires();
                foreach (Empire item in empireList)
                {
                    Habitat habitat2 = _Galaxy.FastFindNearestColony((int)Capital.Xpos, (int)Capital.Ypos, item, 0);
                    if (habitat2 != null && CheckSystemExplored(habitat2.SystemIndex) && fleet.LeadShip != null)
                    {
                        StellarObject stellarObject2 = FindNearestRefuellingPoint(habitat2.Xpos, habitat2.Ypos, fleet.LeadShip.FuelType, 4);
                        if (stellarObject2 != null)
                        {
                            stellarObjectList2.Add(stellarObject2);
                        }
                    }
                }
            }
            for (int k = 0; k < stellarObjectList2.Count; k++)
            {
                if (!stellarObjectList.Contains(stellarObjectList2[k]) && (fleet.GatherPoint == null || !stellarObjectList2.Contains(fleet.GatherPoint)))
                {
                    return stellarObjectList2[k];
                }
            }
            if (fleet.GatherPoint == null)
            {
                if (PirateEmpireBaseHabitat == null)
                {
                    Habitat habitat3 = SelectRandomSpacePortColony(stellarObjectList);
                    if (habitat3 == null)
                    {
                        return SelectRandomColony();
                    }
                    return habitat3;
                }
                BuiltObject builtObject = SelectRandomSpacePort();
                if (builtObject != null)
                {
                    return builtObject;
                }
            }
            return fleet.GatherPoint;
        }

        public int CountFleetsUsingColonyAsBase(Habitat colony)
        {
            int num = 0;
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup.GatherPoint == colony)
                {
                    num++;
                }
            }
            return num;
        }

        public StellarObject IdentifyNewFleetDefendLocation()
        {
            StellarObjectList stellarObjectList = IdentifyDefendLocations();
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                if (ShipGroups[i] != null)
                {
                    StellarObject stellarObject = ShipGroups[i].IdentifyFleetLocation();
                    if (stellarObject != null && stellarObjectList.Contains(stellarObject))
                    {
                        stellarObjectList.Remove(stellarObject);
                    }
                }
            }
            if (stellarObjectList != null && stellarObjectList.Count > 0)
            {
                return stellarObjectList[0];
            }
            return null;
        }

        public StellarObjectList IdentifyDefendLocations()
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            HabitatList habitatList = IdentifyEmpireCapitals();
            if (Colonies != null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    double num = Colonies[i].AnnualRevenue;
                    if (habitatList.Contains(Colonies[i]))
                    {
                        num = Math.Max(num, 1000000.0);
                    }
                    Colonies[i].SortTag = num;
                    stellarObjectList.Add(Colonies[i]);
                }
            }
            for (int j = 0; j < SpacePorts.Count; j++)
            {
                bool flag = true;
                if (SpacePorts[j].ParentHabitat != null && stellarObjectList.Contains(SpacePorts[j].ParentHabitat))
                {
                    flag = false;
                }
                if (flag)
                {
                    double sortTag = 0.0;
                    switch (SpacePorts[j].SubRole)
                    {
                        case BuiltObjectSubRole.SmallSpacePort:
                            sortTag = 200000.0;
                            break;
                        case BuiltObjectSubRole.MediumSpacePort:
                            sortTag = 600000.0;
                            break;
                        case BuiltObjectSubRole.LargeSpacePort:
                            sortTag = 2000000.0;
                            break;
                    }
                    SpacePorts[j].SortTag = sortTag;
                    stellarObjectList.Add(SpacePorts[j]);
                }
            }
            StellarObjectList stellarObjectList2 = DetermineRestrictedResourceSupplyLocations();
            for (int k = 0; k < stellarObjectList2.Count; k++)
            {
                bool flag2 = true;
                if (stellarObjectList2[k].ParentHabitat != null)
                {
                    if (stellarObjectList.Contains(stellarObjectList2[k].ParentHabitat))
                    {
                        flag2 = false;
                    }
                    else if (stellarObjectList.Contains(stellarObjectList2[k]))
                    {
                        flag2 = false;
                    }
                }
                if (flag2)
                {
                    stellarObjectList2[k].SortTag = 3000000.0;
                    stellarObjectList.Add(stellarObjectList2[k]);
                }
            }
            stellarObjectList.Sort();
            stellarObjectList.Reverse();
            return stellarObjectList;
        }

        public StellarObject FindNearestRefuellingPoint(double x, double y, Resource fuelType, int minimumDockingBays)
        {
            StellarObject result = null;
            double num = double.MaxValue;
            if (minimumDockingBays <= 3 && PirateEmpireBaseHabitat == null)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    if (fuelType == null)
                    {
                        continue;
                    }
                    int num2 = Colonies[i].Cargo.IndexOf(fuelType, this);
                    if (num2 >= 0)
                    {
                        double num3 = _Galaxy.CalculateDistanceSquared(x, y, Colonies[i].Xpos, Colonies[i].Ypos);
                        if (num3 < num)
                        {
                            result = Colonies[i];
                            num = num3;
                        }
                    }
                }
            }
            for (int j = 0; j < SpacePorts.Count; j++)
            {
                if (SpacePorts[j].DockingBays != null && SpacePorts[j].DockingBays.Count >= minimumDockingBays)
                {
                    double num4 = _Galaxy.CalculateDistanceSquared(x, y, SpacePorts[j].Xpos, SpacePorts[j].Ypos);
                    if (num4 < num)
                    {
                        result = SpacePorts[j];
                        num = num4;
                    }
                }
            }
            for (int k = 0; k < MiningStations.Count; k++)
            {
                if (MiningStations[k].DockingBays != null && MiningStations[k].DockingBays.Count >= minimumDockingBays && fuelType != null && MiningStations[k].ParentHabitat != null && MiningStations[k].ParentHabitat.Resources.IndexOf(fuelType.ResourceID, 0) >= 0)
                {
                    double num5 = _Galaxy.CalculateDistanceSquared(x, y, MiningStations[k].Xpos, MiningStations[k].Ypos);
                    if (num5 < num)
                    {
                        result = MiningStations[k];
                        num = num5;
                    }
                }
            }
            return result;
        }

        public EmpireList IdentifyTargetEmpires()
        {
            EmpireList empireList = new EmpireList();
            if (PirateEmpireBaseHabitat != null)
            {
                for (int i = 0; i < PirateRelations.Count; i++)
                {
                    PirateRelation pirateRelation = PirateRelations[i];
                    if (pirateRelation != null && pirateRelation.OtherEmpire != null && pirateRelation.Type == PirateRelationType.None)
                    {
                        empireList.Add(pirateRelation.OtherEmpire);
                    }
                }
            }
            else
            {
                for (int j = 0; j < DiplomaticRelations.Count; j++)
                {
                    DiplomaticRelation diplomaticRelation = DiplomaticRelations[j];
                    if (diplomaticRelation.Type == DiplomaticRelationType.War && !empireList.Contains(diplomaticRelation.OtherEmpire))
                    {
                        empireList.Add(diplomaticRelation.OtherEmpire);
                    }
                }
                for (int k = 0; k < DiplomaticRelations.Count; k++)
                {
                    DiplomaticRelation diplomaticRelation2 = DiplomaticRelations[k];
                    if (diplomaticRelation2.Type != DiplomaticRelationType.War && diplomaticRelation2.Strategy == DiplomaticStrategy.Conquer && !empireList.Contains(diplomaticRelation2.OtherEmpire))
                    {
                        empireList.Add(diplomaticRelation2.OtherEmpire);
                    }
                }
            }
            return empireList;
        }

        public BuiltObject SelectRandomSpacePort()
        {
            return SelectRandomSpacePort(new StellarObjectList());
        }

        public BuiltObject SelectRandomSpacePort(StellarObjectList spacePortsToExclude)
        {
            int num = Galaxy.Rnd.Next(0, SpacePorts.Count);
            for (int i = num; i < SpacePorts.Count; i++)
            {
                if (SpacePorts[i] != null && !spacePortsToExclude.Contains(SpacePorts[i]))
                {
                    return SpacePorts[i];
                }
            }
            for (int j = 0; j < num; j++)
            {
                if (SpacePorts[j] != null && !spacePortsToExclude.Contains(SpacePorts[j]))
                {
                    return SpacePorts[j];
                }
            }
            return null;
        }

        public Habitat SelectRandomSpacePortColony(StellarObjectList coloniesToExclude)
        {
            int num = Galaxy.Rnd.Next(0, SpacePorts.Count);
            for (int i = num; i < SpacePorts.Count; i++)
            {
                if (SpacePorts[i].ParentHabitat != null && !coloniesToExclude.Contains(SpacePorts[i].ParentHabitat))
                {
                    return SpacePorts[i].ParentHabitat;
                }
            }
            for (int j = 0; j < num; j++)
            {
                if (SpacePorts[j].ParentHabitat != null && !coloniesToExclude.Contains(SpacePorts[j].ParentHabitat))
                {
                    return SpacePorts[j].ParentHabitat;
                }
            }
            return null;
        }

        public Habitat SelectRandomColony()
        {
            int index = Galaxy.Rnd.Next(0, Colonies.Count);
            return Colonies[index];
        }

        private bool IsShipGroupAvailable(ShipGroup shipGroup, BuiltObjectMissionPriority maximumPriority, int minimumFirepower, Point locationFuelCheck)
        {
            if (shipGroup.LeadShip.WithinFuelRangeAndRefuel(locationFuelCheck.X, locationFuelCheck.Y, 0.0))
            {
                return IsShipGroupAvailableWithAttackStrength(shipGroup, maximumPriority, minimumFirepower);
            }
            return false;
        }

        private bool IsShipGroupAvailableWithAttackStrength(ShipGroup shipGroup, BuiltObjectMissionPriority maximumPriority, int overallStrength)
        {
            if (shipGroup.TotalOverallStrengthFactor >= overallStrength && (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || (int)shipGroup.Mission.Priority <= (int)maximumPriority))
            {
                return true;
            }
            return false;
        }

        private ShipGroup FindAvailableShipGroup(BuiltObjectMissionPriority maximumPriority, int minimumFirepower, Point locationFuelCheck)
        {
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (IsShipGroupAvailable(shipGroup, maximumPriority, minimumFirepower, locationFuelCheck))
                {
                    return shipGroup;
                }
            }
            return null;
        }

        private bool IsShipGroupAvailable(ShipGroup shipGroup, BuiltObjectMissionPriority maximumPriorityToInclude, int minimumTroopLevel)
        {
            if ((minimumTroopLevel <= 0 || shipGroup.TotalTroopAttackStrengthNearby(0.3) >= minimumTroopLevel) && (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined || (int)shipGroup.Mission.Priority <= (int)maximumPriorityToInclude))
            {
                return true;
            }
            return false;
        }

        private ShipGroup FindAvailableShipGroup(BuiltObjectMissionPriority maximumPriorityToInclude, int minimumTroopLevel, FleetPosture posture)
        {
            return FindAvailableShipGroup(maximumPriorityToInclude, minimumTroopLevel, posture, shipGroupMustBeAutomated: false);
        }

        private ShipGroup FindAvailableShipGroup(BuiltObjectMissionPriority maximumPriorityToInclude, int minimumTroopLevel, FleetPosture posture, bool shipGroupMustBeAutomated)
        {
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if ((!shipGroupMustBeAutomated || shipGroup.LeadShip.IsAutoControlled) && shipGroup.Posture == posture && IsShipGroupAvailable(shipGroup, maximumPriorityToInclude, minimumTroopLevel))
                {
                    return shipGroup;
                }
            }
            return null;
        }

        private ShipGroup FindAvailableShipGroupAutomated(BuiltObjectMissionPriority maximumPriorityToInclude, int minimumTroopLevel, FleetPosture posture)
        {
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (IsShipGroupAvailable(shipGroup, maximumPriorityToInclude, minimumTroopLevel) && shipGroup.Posture == posture && shipGroup.LeadShip.IsAutoControlled)
                {
                    return shipGroup;
                }
            }
            return null;
        }

        private ShipGroup FindAvailableShipGroupNotTravellingToGatherPoint(BuiltObjectMissionPriority maximumPriorityToInclude, int minimumTroopLevel, FleetPosture posture)
        {
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (IsShipGroupAvailable(shipGroup, maximumPriorityToInclude, minimumTroopLevel) && shipGroup.LeadShip.IsAutoControlled && shipGroup.Posture == posture && (shipGroup.Mission == null || shipGroup.Mission.TargetHabitat != shipGroup.GatherPoint || (shipGroup.Mission.Type != BuiltObjectMissionType.Move && shipGroup.Mission.Type != BuiltObjectMissionType.MoveAndWait)))
                {
                    return shipGroup;
                }
            }
            return null;
        }

        private void ReviewFleetPostures()
        {
            SetDefendFleets(defendingFromAttack: false, assignMovement: false);
            ReviewDefensiveFleetLocations();
        }

        private void UpdateFleetLeadShips()
        {
            for (int i = 0; i < ShipGroups.Count; i++)
            {
                ShipGroup shipGroup = ShipGroups[i];
                if (shipGroup != null && shipGroup.LeadShip != null && shipGroup.LeadShip.IsAutoControlled)
                {
                    shipGroup.Update();
                }
            }
        }

        private void MaintainShipGroups()
        {
            List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
            list.Add(BuiltObjectSubRole.Frigate);
            list.Add(BuiltObjectSubRole.Destroyer);
            list.Add(BuiltObjectSubRole.Cruiser);
            list.Add(BuiltObjectSubRole.CapitalShip);
            list.Add(BuiltObjectSubRole.TroopTransport);
            list.Add(BuiltObjectSubRole.Carrier);
            BuiltObjectList builtObjectList = BuiltObjects.GetBuiltObjectsBySubRole(list);
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            foreach (BuiltObject item in builtObjectList)
            {
                if (item.IsPlanetDestroyer)
                {
                    builtObjectList2.Add(item);
                }
                else if (!item.IsAutoControlled)
                {
                    builtObjectList2.Add(item);
                }
                else if (item.ShipGroup != null)
                {
                    builtObjectList2.Add(item);
                }
            }
            foreach (BuiltObject item2 in builtObjectList2)
            {
                builtObjectList.Remove(item2);
            }
            int num = 0;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                if (BuiltObjects[i].Role == BuiltObjectRole.Military)
                {
                    num++;
                }
            }
            double val = ((double)DominantRace.AggressionLevel + (double)DominantRace.CautionLevel) / 200.0;
            val = Math.Max(0.8, Math.Min(1.2, val));
            double val2 = 0.6 * val;
            val2 = Math.Max(0.5, Math.Min(0.7, val2));
            val2 = Policy.FleetMilitaryProportionForFleets / 100f;
            int num2 = (int)((double)num * val2);
            if (num2 < 1)
            {
                num2 = 1;
            }
            int num3 = (int)((double)Galaxy.FleetTypicalSize * val);
            int num4 = (int)((double)Galaxy.StrikeForceTypicalSize * val);
            num3 = Policy.FleetTypicalSize;
            num4 = Policy.FleetStrikeForceTypicalSize;
            if (num3 < 1)
            {
                num3 = 1;
            }
            if (num4 < 1)
            {
                num4 = 1;
            }
            int num5 = (int)(_Galaxy.DifficultyLevel * (double)Galaxy.ColonyMaximumTroopStrength);
            int num6 = (int)((double)num5 * val * 2.2);
            int troopTargetStrength = 0;
            if (PirateEmpireBaseHabitat != null && Troops.Count <= 0)
            {
                num6 = 0;
            }
            int num7 = 0;
            foreach (BuiltObject item3 in builtObjectList)
            {
                if (item3.ShipGroup == null && (item3.Mission == null || item3.Mission.Type == BuiltObjectMissionType.Undefined || item3.Mission.Priority == BuiltObjectMissionPriority.Low || item3.Mission.Priority == BuiltObjectMissionPriority.Normal))
                {
                    num7++;
                }
            }
            int num8 = 0;
            int num9 = 0;
            for (int j = 0; j < ShipGroups.Count; j++)
            {
                if (ShipGroups[j].ShipTargetAmount >= 10)
                {
                    num8++;
                }
                else
                {
                    num9++;
                }
            }
            int num10 = num3;
            int num11 = num4;
            double num12 = (double)num2 * 0.75 / (double)num3;
            double num13 = (double)num2 * 0.25 / (double)num4;
            if (num12 > 0.1 && num12 < 1.0)
            {
                num12 = 1.0;
                num13 = 0.0;
                num10 = Math.Min(num3, num7);
                num6 /= 2;
            }
            int num14 = (int)(num12 + 0.5);
            int num15 = (int)(num13 + 0.5);
            double num16 = num12 / (num12 + num13);
            int num17 = Math.Max(1, (int)((double)FleetMaximumCount * num16));
            int num18 = Math.Max(1, FleetMaximumCount - num17);
            if (num14 > num17)
            {
                num14 = num17;
            }
            if (num15 > num18)
            {
                num15 = num18;
            }
            if (num8 > num14 && num8 + num9 > num14 + num15)
            {
                int num19 = num8 - num14;
                ShipGroupList shipGroupList = new ShipGroupList();
                for (int k = 0; k < ShipGroups.Count; k++)
                {
                    ShipGroup shipGroup = ShipGroups[k];
                    if (shipGroup.ShipTargetAmount >= 10 && shipGroup.LeadShip.IsAutoControlled && (shipGroup.Mission == null || shipGroup.Mission.Type == BuiltObjectMissionType.Undefined))
                    {
                        shipGroupList.Add(shipGroup);
                        if (shipGroupList.Count >= num19)
                        {
                            break;
                        }
                    }
                }
                foreach (ShipGroup item4 in shipGroupList)
                {
                    DisbandShipGroup(item4);
                }
            }
            if (num9 > num15 && num8 + num9 > num14 + num15)
            {
                int num20 = num9 - num15;
                ShipGroupList shipGroupList2 = new ShipGroupList();
                for (int l = 0; l < ShipGroups.Count; l++)
                {
                    ShipGroup shipGroup2 = ShipGroups[l];
                    if (shipGroup2.ShipTargetAmount < 10 && shipGroup2.LeadShip.IsAutoControlled && (shipGroup2.Mission == null || shipGroup2.Mission.Type == BuiltObjectMissionType.Undefined))
                    {
                        shipGroupList2.Add(shipGroup2);
                        if (shipGroupList2.Count >= num20)
                        {
                            break;
                        }
                    }
                }
                foreach (ShipGroup item5 in shipGroupList2)
                {
                    DisbandShipGroup(item5);
                }
            }
            BuiltObjectList builtObjectList3 = new BuiltObjectList();
            for (int m = 0; m < ShipGroups.Count; m++)
            {
                ShipGroup shipGroup3 = ShipGroups[m];
                if (!shipGroup3.LeadShip.IsAutoControlled)
                {
                    continue;
                }
                if (shipGroup3.Mission == null || (shipGroup3.Mission.Type != BuiltObjectMissionType.Attack && shipGroup3.Mission.Type != BuiltObjectMissionType.WaitAndAttack))
                {
                    for (int n = 0; n < shipGroup3.Ships.Count; n++)
                    {
                        BuiltObject builtObject = shipGroup3.Ships[n];
                        if (builtObject.SubRole == BuiltObjectSubRole.TroopTransport && builtObject.IsAutoControlled && builtObject.TroopCapacityRemaining >= 100 && (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined || builtObject.Mission.Priority == BuiltObjectMissionPriority.Undefined || builtObject.Mission.Priority == BuiltObjectMissionPriority.Low))
                        {
                            builtObjectList3.Add(builtObject);
                        }
                    }
                }
                if (shipGroup3.Mission == null || shipGroup3.Mission.Type == BuiltObjectMissionType.Undefined || shipGroup3.Mission.Type == BuiltObjectMissionType.Hold || shipGroup3.Mission.Type == BuiltObjectMissionType.MoveAndWait || shipGroup3.Mission.Type == BuiltObjectMissionType.Refuel || shipGroup3.Mission.Type == BuiltObjectMissionType.Retrofit)
                {
                    int targetShipAmount = num10;
                    if (shipGroup3.ShipTargetAmount < 10)
                    {
                        targetShipAmount = num11;
                    }
                    StellarObject stellarObject = shipGroup3.IdentifyFleetLocation();
                    if (stellarObject == null)
                    {
                        stellarObject = shipGroup3.LeadShip;
                    }
                    if (stellarObject != null)
                    {
                        builtObjectList = SortBuiltObjectsByDistance(builtObjectList, stellarObject.Xpos, stellarObject.Ypos);
                    }
                    AddShipsToShipGroup(shipGroup3, builtObjectList, targetShipAmount, isNew: false, null, 0.6f);
                }
            }
            foreach (BuiltObject item6 in builtObjectList3)
            {
                if (AssignLoadTroopsMission(item6))
                {
                    item6.LeaveShipGroup();
                }
            }
            int num21 = 0;
            while (num8 < num14 && num7 >= num10 / 2 && num21 < 10)
            {
                ShipGroup shipGroup4 = new ShipGroup(_Galaxy);
                shipGroup4.Empire = this;
                shipGroup4.ShipTargetAmount = num3;
                shipGroup4.TroopTargetStrength = num6;
                shipGroup4.GatherPoint = SelectFleetBase(shipGroup4);
                if (shipGroup4.GatherPoint != null)
                {
                    builtObjectList = SortBuiltObjectsByDistance(builtObjectList, shipGroup4.GatherPoint.Xpos, shipGroup4.GatherPoint.Ypos);
                }
                AddShipsToShipGroup(shipGroup4, builtObjectList, num10, isNew: true, shipGroup4.GatherPoint, 0.6f);
                if (shipGroup4.Ships.Count <= 0)
                {
                    break;
                }
                string nextFleetNumberDescription = GetNextFleetNumberDescription();
                shipGroup4.Name = string.Format(TextResolver.GetText("Nth Fleet"), nextFleetNumberDescription);
                ShipGroups.Add(shipGroup4);
                ShipGroups.Sort();
                num7 -= shipGroup4.Ships.Count;
                num8++;
                num21++;
                if (num8 >= num14)
                {
                    break;
                }
            }
            num21 = 0;
            while (num9 < num15 && num7 >= num11 && num21 < 10)
            {
                ShipGroup shipGroup5 = new ShipGroup(_Galaxy);
                shipGroup5.Empire = this;
                shipGroup5.ShipTargetAmount = num4;
                shipGroup5.TroopTargetStrength = troopTargetStrength;
                shipGroup5.GatherPoint = SelectFleetBase(shipGroup5);
                if (shipGroup5.GatherPoint != null)
                {
                    builtObjectList = SortBuiltObjectsByDistance(builtObjectList, shipGroup5.GatherPoint.Xpos, shipGroup5.GatherPoint.Ypos);
                }
                AddShipsToShipGroup(shipGroup5, builtObjectList, num11, isNew: true, shipGroup5.GatherPoint, 0.6f);
                if (shipGroup5.Ships.Count > 0)
                {
                    string nextFleetNumberDescription2 = GetNextFleetNumberDescription();
                    shipGroup5.Name = string.Format(TextResolver.GetText("Nth Strike Force"), nextFleetNumberDescription2);
                    ShipGroups.Add(shipGroup5);
                    ShipGroups.Sort();
                    num7 -= shipGroup5.Ships.Count;
                    num9++;
                    num21++;
                    if (num9 >= num15)
                    {
                        break;
                    }
                    continue;
                }
                break;
            }
        }

        private BuiltObjectList SortBuiltObjectsByDistance(BuiltObjectList builtObjects, double x, double y)
        {
            return SortBuiltObjectsByDistance(builtObjects, x, y, 0.0);
        }

        private BuiltObjectList SortBuiltObjectsByDistance(BuiltObjectList builtObjects, double x, double y, double minimumFuelPortionFilter)
        {
            if (builtObjects != null)
            {
                for (int i = 0; i < builtObjects.Count; i++)
                {
                    if (minimumFuelPortionFilter > 0.0)
                    {
                        double num = _Galaxy.CalculateDistanceSquared(builtObjects[i].Xpos, builtObjects[i].Ypos, x, y);
                        double num2 = builtObjects[i].CurrentFuel / (double)Math.Max(1, builtObjects[i].FuelCapacity);
                        if (num2 < minimumFuelPortionFilter)
                        {
                            num *= 100.0;
                        }
                        builtObjects[i].SortTag = num;
                    }
                    else
                    {
                        builtObjects[i].SortTag = _Galaxy.CalculateDistanceSquared(builtObjects[i].Xpos, builtObjects[i].Ypos, x, y);
                    }
                }
                builtObjects.Sort();
            }
            return builtObjects;
        }

        public void AddShipsToShipGroup(ShipGroup shipGroup, BuiltObjectList militaryShips, int targetShipAmount, bool isNew, StellarObject waypoint)
        {
            AddShipsToShipGroup(shipGroup, militaryShips, targetShipAmount, isNew, waypoint, 0f);
        }

        public void AddShipsToShipGroup(ShipGroup shipGroup, BuiltObjectList militaryShips, int targetShipAmount, bool isNew, StellarObject waypoint, float minimumFuelPortion)
        {
            _ = _Galaxy.CurrentStarDate;
            bool? mustHaveHyperdrive = null;
            if (shipGroup.Ships.Count > 0)
            {
                mustHaveHyperdrive = ((shipGroup.WarpSpeed <= 0) ? new bool?(false) : new bool?(true));
            }
            if (CheckEmpireHasHyperDriveTech(this))
            {
                mustHaveHyperdrive = true;
            }
            StellarObject stellarObject = shipGroup.IdentifyFleetLocation();
            double x;
            double y;
            if (stellarObject != null)
            {
                x = stellarObject.Xpos;
                y = stellarObject.Ypos;
            }
            else if (shipGroup.LeadShip != null)
            {
                x = shipGroup.LeadShip.Xpos;
                y = shipGroup.LeadShip.Ypos;
            }
            else
            {
                x = double.MinValue;
                y = double.MinValue;
            }
            if (shipGroup.Ships.Count < targetShipAmount)
            {
                int iterationCount = 0;
                while (Galaxy.ConditionCheckLimit(shipGroup.Ships.Count < targetShipAmount, 200, ref iterationCount))
                {
                    BuiltObject builtObject = null;
                    builtObject = ((shipGroup.TotalTroopAttackStrength >= shipGroup.TroopTargetStrength) ? FindAvailableMilitaryShip(x, y, militaryShips, mustCarryTroopsIfHaveTroopStorage: false, mustBeFullOfTroops: false, minimumFuelPortion, mustHaveHyperdrive) : FindAvailableMilitaryShip(x, y, militaryShips, mustCarryTroopsIfHaveTroopStorage: true, mustBeFullOfTroops: false, minimumFuelPortion, mustHaveHyperdrive));
                    if (builtObject == null)
                    {
                        break;
                    }
                    shipGroup.AddShipToFleet(builtObject);
                    _Galaxy.AssignFleetWaypointMission(builtObject, allowMissionOverride: true, waypoint);
                    if (shipGroup.Ships.Count > 0)
                    {
                        mustHaveHyperdrive = ((shipGroup.WarpSpeed <= 0) ? new bool?(false) : new bool?(true));
                    }
                }
                if (isNew)
                {
                    shipGroup.Update();
                }
            }
            if (shipGroup.TotalTroopAttackStrength >= shipGroup.TroopTargetStrength)
            {
                return;
            }
            int iterationCount2 = 0;
            while (Galaxy.ConditionCheckLimit(shipGroup.TotalTroopAttackStrength < shipGroup.TroopTargetStrength, 100, ref iterationCount2))
            {
                BuiltObject builtObject2 = FindAvailableMilitaryShip(x, y, militaryShips, mustCarryTroopsIfHaveTroopStorage: false, mustBeFullOfTroops: true, minimumFuelPortion, mustHaveHyperdrive);
                if (builtObject2 == null)
                {
                    break;
                }
                shipGroup.AddShipToFleet(builtObject2);
                _Galaxy.AssignFleetWaypointMission(builtObject2, allowMissionOverride: true, waypoint);
                if (shipGroup.Ships.Count > 0)
                {
                    mustHaveHyperdrive = ((shipGroup.WarpSpeed <= 0) ? new bool?(false) : new bool?(true));
                }
            }
            if (isNew)
            {
                shipGroup.Update();
            }
        }

        private ShipGroup AssembleStrikeGroup(PrioritizedTarget target, int availableStrikeForce, out int strikeForceStrength)
        {
            ShipGroup shipGroup = new ShipGroup(_Galaxy);
            strikeForceStrength = 0;
            double num = Math.Pow(1.0 + ((double)DominantRace.AggressionLevel - (double)DominantRace.CautionLevel) / 100.0, 2.0);
            int num2 = (int)(1.2 * ((double)target.LocationStrength / num));
            if (availableStrikeForce < num2)
            {
                return shipGroup;
            }
            int num3 = 0;
            int num4 = 0;
            if (target.Target is BuiltObject)
            {
                Habitat parentHabitat = ((BuiltObject)target.Target).ParentHabitat;
                if (parentHabitat != null && parentHabitat.Owner == target.Empire)
                {
                    if (parentHabitat.Troops != null)
                    {
                        num4 = parentHabitat.Troops.TotalDefendStrength;
                    }
                    num4 += (int)(parentHabitat.Population.TotalAmount / 20000000) * parentHabitat.Owner.DominantRace.AggressionLevel;
                    num4 = (int)((double)num4 * 1.25);
                }
            }
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject.Role == BuiltObjectRole.Military && (builtObject.Mission == null || builtObject.Mission.Priority == BuiltObjectMissionPriority.Low || builtObject.Mission.Priority == BuiltObjectMissionPriority.Undefined) && builtObject.BuiltAt == null && builtObject.UnbuiltOrDamagedComponentCount <= 0)
                {
                    strikeForceStrength += builtObject.FirepowerRaw;
                    if (builtObject.Troops != null)
                    {
                        num3 += builtObject.Troops.TotalAttackStrength;
                    }
                    shipGroup.AddShipToFleet(builtObject);
                    if (strikeForceStrength >= num2)
                    {
                        break;
                    }
                }
            }
            if (num4 > 0 && (double)num3 < (double)num4 * 0.8)
            {
                for (int j = 0; j < BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = BuiltObjects[j];
                    if (builtObject2.SubRole == BuiltObjectSubRole.TroopTransport && (builtObject2.Mission == null || builtObject2.Mission.Priority == BuiltObjectMissionPriority.Low || builtObject2.Mission.Priority == BuiltObjectMissionPriority.Undefined) && builtObject2.Troops != null && builtObject2.Troops.TotalAttackStrength > 0)
                    {
                        strikeForceStrength += builtObject2.FirepowerRaw;
                        num3 += builtObject2.Troops.TotalAttackStrength;
                        shipGroup.AddShipToFleet(builtObject2);
                        if ((double)num3 >= (double)num4 * 0.8)
                        {
                            break;
                        }
                    }
                }
            }
            return shipGroup;
        }

        public bool CheckSystemVisible(Habitat systemStar)
        {
            if (systemStar != null)
            {
                return CheckSystemVisible(systemStar.SystemIndex);
            }
            return false;
        }

        public bool CheckSystemVisible(int systemIndex)
        {
            if (SystemVisibility.Count > systemIndex)
            {
                SystemVisibilityStatus status = SystemVisibility[systemIndex].Status;
                if (status == SystemVisibilityStatus.Visible)
                {
                    return true;
                }
                if (_EmpiresSharedVisibility != null && _EmpiresSharedVisibility.Count > 0)
                {
                    for (int i = 0; i < _EmpiresSharedVisibility.Count; i++)
                    {
                        Empire empire = _EmpiresSharedVisibility[i];
                        if (empire != null && empire.SystemVisibility != null && empire.SystemVisibility.Count > systemIndex)
                        {
                            status = empire.SystemVisibility[systemIndex].Status;
                            if (status == SystemVisibilityStatus.Visible)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        public SystemVisibilityStatus CheckSystemVisibilityStatus(Habitat systemStar)
        {
            return CheckSystemVisibilityStatus(systemStar.SystemIndex);
        }

        public SystemVisibilityStatus CheckSystemVisibilityStatus(int systemIndex)
        {
            SystemVisibilityStatus systemVisibilityStatus = SystemVisibility[systemIndex].Status;
            if (systemVisibilityStatus == SystemVisibilityStatus.Visible)
            {
                return systemVisibilityStatus;
            }
            if (_EmpiresSharedVisibility.Count > 0)
            {
                for (int i = 0; i < _EmpiresSharedVisibility.Count; i++)
                {
                    SystemVisibilityStatus status = _EmpiresSharedVisibility[i].SystemVisibility[systemIndex].Status;
                    switch (status)
                    {
                        case SystemVisibilityStatus.Visible:
                            return status;
                        case SystemVisibilityStatus.Explored:
                            systemVisibilityStatus = SystemVisibilityStatus.Explored;
                            break;
                    }
                }
            }
            return systemVisibilityStatus;
        }

        public void SetEmpireSharedVisibility(Empire otherEmpire)
        {
            if (!_EmpiresSharedVisibility.Contains(otherEmpire))
            {
                _Galaxy.MergeGalaxyMap(otherEmpire, this);
                _EmpiresSharedVisibility.Add(otherEmpire);
            }
        }

        public void ClearEmpireSharedVisibility(Empire otherEmpire)
        {
            if (_EmpiresSharedVisibility.Contains(otherEmpire))
            {
                _Galaxy.MergeGalaxyMap(otherEmpire, this);
                _EmpiresSharedVisibility.Remove(otherEmpire);
            }
        }

        public bool CheckSystemExplored(Habitat systemStar)
        {
            return CheckSystemExplored(systemStar.SystemIndex);
        }

        public bool CheckSystemExplored(int systemIndex)
        {
            SystemVisibilityStatus status = SystemVisibility[systemIndex].Status;
            if (status == SystemVisibilityStatus.Visible || status == SystemVisibilityStatus.Explored)
            {
                return true;
            }
            if (_EmpiresSharedVisibility.Count > 0)
            {
                for (int i = 0; i < _EmpiresSharedVisibility.Count; i++)
                {
                    status = _EmpiresSharedVisibility[i].SystemVisibility[systemIndex].Status;
                    if (status == SystemVisibilityStatus.Visible || status == SystemVisibilityStatus.Explored)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool IsObjectAreaKnownToThisEmpire(StellarObject stellarObject)
        {
            Habitat habitat = _Galaxy.FindNearestHabitat(stellarObject.Xpos, stellarObject.Ypos);
            if (habitat != null)
            {
                double num = _Galaxy.CalculateDistance(stellarObject.Xpos, stellarObject.Ypos, habitat.Xpos, habitat.Ypos);
                if (num <= (double)Galaxy.MaxSolarSystemSize * 2.1 && CheckSystemExplored(habitat.SystemIndex))
                {
                    return true;
                }
            }
            if (IsObjectVisibleToThisEmpire(stellarObject))
            {
                return true;
            }
            return false;
        }

        public bool IsObjectVisibleToThisEmpire(Creature objectToTest)
        {
            if (!objectToTest.IsVisible)
            {
                return false;
            }
            if (objectToTest.NearestSystemStar != null && CheckSystemVisible(objectToTest.NearestSystemStar.SystemIndex))
            {
                return true;
            }
            for (int i = 0; i < LongRangeScanners.Count; i++)
            {
                BuiltObject builtObject = LongRangeScanners[i];
                double num = (double)builtObject.SensorLongRange * (double)builtObject.SensorLongRange;
                double num2 = _Galaxy.CalculateDistanceSquared(builtObject.Xpos, builtObject.Ypos, objectToTest.Xpos, objectToTest.Ypos);
                if (num2 <= num)
                {
                    return true;
                }
            }
            BuiltObject builtObject2 = FindShipOutsideSystemWithScanRange((int)objectToTest.Xpos, (int)objectToTest.Ypos, 1.0);
            if (builtObject2 != null)
            {
                return true;
            }
            return false;
        }

        public bool IsObjectVisibleToThisEmpireImprecise(StellarObject objectToTest)
        {
            if (objectToTest.Empire == this)
            {
                return true;
            }
            if (_EmpiresViewable.Contains(objectToTest.Empire) || _EmpiresSharedVisibility.Contains(objectToTest.Empire))
            {
                return true;
            }
            if (objectToTest is Habitat)
            {
                Habitat habitat = (Habitat)objectToTest;
                if (CheckSystemVisible(habitat.SystemIndex))
                {
                    return true;
                }
                for (int i = 0; i < LongRangeScanners.Count; i++)
                {
                    BuiltObject builtObject = LongRangeScanners[i];
                    double num = (double)builtObject.SensorLongRange * (double)builtObject.SensorLongRange;
                    double num2 = _Galaxy.CalculateDistanceSquared(builtObject.Xpos, builtObject.Ypos, objectToTest.Xpos, objectToTest.Ypos);
                    if (num2 <= num)
                    {
                        return true;
                    }
                }
            }
            if (objectToTest is Fighter)
            {
                Fighter fighter = (Fighter)objectToTest;
                if (fighter.OnboardCarrier)
                {
                    return false;
                }
                if (fighter.ParentBuiltObject != null)
                {
                    bool visibleKnownPirateBase = false;
                    if (IsBuiltObjectVisibleToThisEmpire(fighter.ParentBuiltObject, out visibleKnownPirateBase) && !visibleKnownPirateBase)
                    {
                        return true;
                    }
                }
                return false;
            }
            if (objectToTest is BuiltObject)
            {
                BuiltObject builtObject2 = (BuiltObject)objectToTest;
                return IsBuiltObjectVisibleToThisEmpire(builtObject2);
            }
            return false;
        }

        private bool IsBuiltObjectVisibleToThisEmpire(BuiltObject builtObject)
        {
            bool visibleKnownPirateBase = false;
            return IsBuiltObjectVisibleToThisEmpire(builtObject, out visibleKnownPirateBase);
        }

        private bool IsBuiltObjectVisibleToThisEmpire(BuiltObject builtObject, out bool visibleKnownPirateBase)
        {
            visibleKnownPirateBase = false;
            if (builtObject != null)
            {
                if (PirateEmpireBaseHabitat != null && builtObject.PirateEmpireId > 0 && builtObject.PirateEmpireId == EmpireId)
                {
                    return true;
                }
                if (builtObject.NearestSystemStar != null)
                {
                    if (CheckSystemVisible(builtObject.NearestSystemStar.SystemIndex))
                    {
                        return true;
                    }
                }
                else if (builtObject.Role != BuiltObjectRole.Base && builtObject.CurrentSpeed > (float)builtObject.TopSpeed)
                {
                    _ = builtObject.CurrentSpeed;
                    _ = 0f;
                }
                for (int i = 0; i < LongRangeScanners.Count; i++)
                {
                    BuiltObject builtObject2 = LongRangeScanners[i];
                    if (builtObject2 != null)
                    {
                        double num = (float)builtObject2.SensorLongRange * builtObject.Stealth;
                        double num2 = num * num;
                        double num3 = _Galaxy.CalculateDistanceSquared(builtObject2.Xpos, builtObject2.Ypos, builtObject.Xpos, builtObject.Ypos);
                        if (num3 <= num2)
                        {
                            return true;
                        }
                    }
                }
                if (_EmpiresSharedVisibility.Count > 0)
                {
                    for (int j = 0; j < _EmpiresSharedVisibility.Count; j++)
                    {
                        Empire empire = _EmpiresSharedVisibility[j];
                        if (empire == null)
                        {
                            continue;
                        }
                        for (int k = 0; k < empire.LongRangeScanners.Count; k++)
                        {
                            BuiltObject builtObject3 = empire.LongRangeScanners[k];
                            if (builtObject3 != null)
                            {
                                double num4 = (float)builtObject3.SensorLongRange * builtObject.Stealth;
                                double num5 = num4 * num4;
                                double num6 = _Galaxy.CalculateDistanceSquared(builtObject3.Xpos, builtObject3.Ypos, builtObject.Xpos, builtObject.Ypos);
                                if (num6 <= num5)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
                if (KnownPirateBases != null && KnownPirateBases.Contains(builtObject))
                {
                    visibleKnownPirateBase = true;
                    return true;
                }
            }
            return false;
        }

        public bool IsObjectVisibleToThisEmpire(StellarObject objectToTest)
        {
            return IsObjectVisibleToThisEmpire(objectToTest, includeLongRangeScanners: true, includeShipsOutsideSystems: true);
        }

        public bool IsObjectVisibleToThisEmpire(StellarObject objectToTest, bool includeLongRangeScanners, bool includeShipsOutsideSystems)
        {
            bool flag = IsObjectVisibleToThisEmpireImprecise(objectToTest);
            if (flag)
            {
                return flag;
            }
            BuiltObject builtObject = FindShipOutsideSystemWithScanRange((int)objectToTest.Xpos, (int)objectToTest.Ypos, objectToTest.Stealth, includeLongRangeScanners, includeShipsOutsideSystems);
            if (builtObject != null)
            {
                return true;
            }
            if (_EmpiresSharedVisibility.Count > 0)
            {
                for (int i = 0; i < _EmpiresSharedVisibility.Count; i++)
                {
                    Empire empire = _EmpiresSharedVisibility[i];
                    builtObject = empire.FindShipOutsideSystemWithScanRange((int)objectToTest.Xpos, (int)objectToTest.Ypos, objectToTest.Stealth, includeLongRangeScanners, includeShipsOutsideSystems);
                    if (builtObject != null)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool CheckSystemLinkedToCapital(Habitat systemStar, Habitat capitalSystemStar, ref HabitatList unlinkedSystemStars)
        {
            unlinkedSystemStars.Add(systemStar);
            if (systemStar != null && SystemVisibility != null && SystemVisibility[systemStar.SystemIndex].LinkSystemStars != null)
            {
                if (SystemVisibility[systemStar.SystemIndex].LinkSystemStars.Contains(capitalSystemStar) || systemStar == capitalSystemStar)
                {
                    return true;
                }
                for (int i = 0; i < SystemVisibility[systemStar.SystemIndex].LinkSystemStars.Count; i++)
                {
                    Habitat habitat = SystemVisibility[systemStar.SystemIndex].LinkSystemStars[i];
                    if (!unlinkedSystemStars.Contains(habitat) && CheckSystemLinkedToCapital(habitat, capitalSystemStar, ref unlinkedSystemStars))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private Habitat DetermineSpacePortSystemLink(BuiltObject spacePort, Habitat capitalSystemStar, BuiltObjectList spacePortsToExclude)
        {
            if (spacePort != null)
            {
                BuiltObject builtObject = _Galaxy.FastFindNearestOtherSpacePort((int)spacePort.Xpos, (int)spacePort.Ypos, this, spacePortsToExclude);
                if (builtObject == null)
                {
                    return capitalSystemStar;
                }
                if (builtObject.NearestSystemStar == spacePort.NearestSystemStar)
                {
                    spacePortsToExclude.Add(builtObject);
                    return DetermineSpacePortSystemLink(spacePort, capitalSystemStar, spacePortsToExclude);
                }
                if (builtObject.NearestSystemStar != null && SystemVisibility[builtObject.NearestSystemStar.SystemIndex].LinkSystemStars.Contains(spacePort.NearestSystemStar))
                {
                    spacePortsToExclude.Add(builtObject);
                    return DetermineSpacePortSystemLink(spacePort, capitalSystemStar, spacePortsToExclude);
                }
                if (builtObject.NearestSystemStar != null)
                {
                    return builtObject.NearestSystemStar;
                }
            }
            return capitalSystemStar;
        }

        public void EvaluateSystemLinks()
        {
            if (this == _Galaxy.IndependentEmpire || PirateEmpireBaseHabitat != null)
            {
                return;
            }
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                SystemVisibility systemVisibility = SystemVisibility[i];
                if (systemVisibility != null)
                {
                    if (systemVisibility.LinkSystemStars != null)
                    {
                        systemVisibility.LinkSystemStars.Clear();
                    }
                    if (systemVisibility.ReciprocalLinkSystemStars != null)
                    {
                        systemVisibility.ReciprocalLinkSystemStars.Clear();
                    }
                }
            }
            if (_Capital == null)
            {
                return;
            }
            Habitat habitat = Galaxy.DetermineHabitatSystemStar(_Capital);
            HabitatList habitatList = DetermineEmpireSystems(this);
            for (int j = 0; j < habitatList.Count; j++)
            {
                Habitat habitat2 = habitatList[j];
                if (habitat2 == null)
                {
                    continue;
                }
                BuiltObject builtObject = _Galaxy.FastFindNearestSpacePort(habitat2.Xpos, habitat2.Ypos, this);
                if (builtObject != null)
                {
                    if (builtObject.NearestSystemStar != habitat2)
                    {
                        SystemVisibility[habitat2.SystemIndex].LinkSystemStars.Add(builtObject.NearestSystemStar);
                        continue;
                    }
                    BuiltObjectList builtObjectList = new BuiltObjectList();
                    builtObjectList.Add(builtObject);
                    SystemVisibility[habitat2.SystemIndex].LinkSystemStars.Add(DetermineSpacePortSystemLink(builtObject, habitat, builtObjectList));
                }
                else
                {
                    SystemVisibility[habitat2.SystemIndex].LinkSystemStars.Add(habitat);
                }
            }
            for (int k = 0; k < habitatList.Count; k++)
            {
                Habitat habitat3 = habitatList[k];
                if (habitat3 == null)
                {
                    continue;
                }
                HabitatList unlinkedSystemStars = new HabitatList();
                if (CheckSystemLinkedToCapital(habitat3, habitat, ref unlinkedSystemStars))
                {
                    continue;
                }
                Habitat habitat4 = null;
                double num = double.MaxValue;
                for (int l = 0; l < unlinkedSystemStars.Count; l++)
                {
                    Habitat habitat5 = unlinkedSystemStars[l];
                    if (habitat5 == null)
                    {
                        continue;
                    }
                    BuiltObject builtObject2 = _Galaxy.FastFindNearestSpacePort(habitat5.Xpos, habitat5.Ypos, this);
                    if (builtObject2 != null && builtObject2.NearestSystemStar == habitat5)
                    {
                        double num2 = _Galaxy.CalculateDistanceSquared(habitat5.Xpos, habitat5.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num2 < num)
                        {
                            habitat4 = habitat5;
                            num = num2;
                        }
                    }
                }
                if (habitat4 == null)
                {
                    habitat4 = unlinkedSystemStars[Galaxy.Rnd.Next(0, unlinkedSystemStars.Count)];
                }
                if (habitat4 != null)
                {
                    SystemVisibility[habitat4.SystemIndex].LinkSystemStars.Add(habitat);
                }
            }
            for (int m = 0; m < habitatList.Count; m++)
            {
                Habitat habitat6 = habitatList[m];
                if (habitat6 == null)
                {
                    continue;
                }
                for (int n = 0; n < SystemVisibility[habitat6.SystemIndex].LinkSystemStars.Count; n++)
                {
                    Habitat habitat7 = SystemVisibility[habitat6.SystemIndex].LinkSystemStars[n];
                    if (habitat7 != null && SystemVisibility[habitat7.SystemIndex].ReciprocalLinkSystemStars != null)
                    {
                        SystemVisibility[habitat7.SystemIndex].ReciprocalLinkSystemStars.Add(habitat6);
                    }
                }
            }
        }

        public BuiltObject FindShipInSystemWithScanRange(double x, double y, Habitat systemStar, double rangeModifier)
        {
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject == null || builtObject.NearestSystemStar != systemStar || !(builtObject.CurrentSpeed <= (float)builtObject.TopSpeed))
                {
                    continue;
                }
                int num = (int)((double)Math.Max(Galaxy.ThreatRange, builtObject.SensorProximityArrayRange) * rangeModifier);
                if (_Galaxy.CheckWithinDistancePotentialUnmodified(num, x, y, builtObject.Xpos, builtObject.Ypos))
                {
                    double num2 = _Galaxy.CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
                    if ((int)num2 <= num)
                    {
                        return builtObject;
                    }
                }
            }
            for (int j = 0; j < PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject2 = PrivateBuiltObjects[j];
                if (builtObject2 == null || builtObject2.NearestSystemStar != systemStar || !(builtObject2.CurrentSpeed <= (float)builtObject2.TopSpeed))
                {
                    continue;
                }
                int num3 = (int)((double)Math.Max(Galaxy.ThreatRange, builtObject2.SensorProximityArrayRange) * rangeModifier);
                if (_Galaxy.CheckWithinDistancePotentialUnmodified(num3, x, y, builtObject2.Xpos, builtObject2.Ypos))
                {
                    double num4 = _Galaxy.CalculateDistance(x, y, builtObject2.Xpos, builtObject2.Ypos);
                    if ((int)num4 <= num3)
                    {
                        return builtObject2;
                    }
                }
            }
            return null;
        }

        public BuiltObject FindLongRangeScannerThatCanSeePoint(double x, double y, double rangeModifier)
        {
            if (LongRangeScanners != null)
            {
                for (int i = 0; i < LongRangeScanners.Count; i++)
                {
                    BuiltObject builtObject = LongRangeScanners[i];
                    if (builtObject != null && builtObject.SensorLongRange > 0 && builtObject.CurrentSpeed == 0f)
                    {
                        double num = (double)builtObject.SensorLongRange * rangeModifier;
                        num *= num;
                        double num2 = _Galaxy.CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        if (num2 <= num)
                        {
                            return builtObject;
                        }
                    }
                }
            }
            return null;
        }

        public BuiltObject FindShipOutsideSystemWithScanRange(int x, int y, double rangeModifier)
        {
            return FindShipOutsideSystemWithScanRange(x, y, rangeModifier, includeLongRangeScanners: true, includeShipsOutsideSystems: true);
        }

        public BuiltObject FindShipOutsideSystemWithScanRange(double x, double y, double rangeModifier, bool includeLongRangeScanners, bool includeShipsOutsideSystems)
        {
            if (includeLongRangeScanners && LongRangeScanners != null)
            {
                for (int i = 0; i < LongRangeScanners.Count; i++)
                {
                    BuiltObject builtObject = LongRangeScanners[i];
                    if (builtObject != null && builtObject.SensorLongRange > 0 && builtObject.CurrentSpeed == 0f)
                    {
                        double num = (double)builtObject.SensorLongRange * rangeModifier;
                        num *= num;
                        double num2 = _Galaxy.CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        if (num2 <= num)
                        {
                            return builtObject;
                        }
                    }
                }
            }
            if (includeShipsOutsideSystems)
            {
                GalaxyIndex galaxyIndex = Galaxy.ResolveIndex(x, y);
                BuiltObject[] array = ListHelper.ToArrayThreadSafe(_Galaxy.BuiltObjectIndex[galaxyIndex.X][galaxyIndex.Y]);
                foreach (BuiltObject builtObject2 in array)
                {
                    if (builtObject2 == null || builtObject2.NearestSystemStar != null || ((builtObject2.WarpSpeed <= 0 || !(builtObject2.CurrentSpeed < (float)builtObject2.WarpSpeed)) && !(builtObject2.CurrentSpeed <= (float)builtObject2.TopSpeed)) || builtObject2.Empire != this)
                    {
                        continue;
                    }
                    int num3 = (int)((double)Math.Max(Galaxy.ThreatRange, Math.Max(builtObject2.SensorLongRange, builtObject2.SensorProximityArrayRange)) * rangeModifier);
                    if (_Galaxy.CheckWithinDistancePotentialUnmodified(num3, x, y, builtObject2.Xpos, builtObject2.Ypos))
                    {
                        double num4 = _Galaxy.CalculateDistance(x, y, builtObject2.Xpos, builtObject2.Ypos);
                        if ((int)num4 <= num3)
                        {
                            return builtObject2;
                        }
                    }
                }
            }
            return null;
        }

        public ShipGroupList GenerateDistanceOrderedFleetList(PrioritizedTarget target, ShipGroupList fleets)
        {
            ShipGroupList result = new ShipGroupList();
            if (target != null)
            {
                double x = 0.0;
                double y = 0.0;
                target.ResolveTargetCoordinates(out x, out y);
                result = GenerateDistanceOrderedFleetList(x, y, fleets);
            }
            return result;
        }

        public ShipGroupList GenerateDistanceOrderedFleetList(double targetX, double targetY, ShipGroupList fleets)
        {
            ShipGroupList shipGroupList = new ShipGroupList();
            shipGroupList.AddRange(fleets);
            for (int i = 0; i < shipGroupList.Count; i++)
            {
                ShipGroup shipGroup = shipGroupList[i];
                shipGroup.SortTag = _Galaxy.CalculateDistance(shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos, targetX, targetY);
            }
            shipGroupList.Sort();
            shipGroupList.ClearSortTags();
            return shipGroupList;
        }

        public HabitatList IdentifyOurDisputedColonies(Empire empire)
        {
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = DetermineEmpireSystems(empire);
            for (int i = 0; i < habitatList2.Count; i++)
            {
                Habitat habitat = habitatList2[i];
                SystemInfo bySystemIndex = _Galaxy.Systems.GetBySystemIndex(habitat.SystemIndex);
                if (bySystemIndex.Habitats == null)
                {
                    continue;
                }
                for (int j = 0; j < bySystemIndex.Habitats.Count; j++)
                {
                    Habitat habitat2 = bySystemIndex.Habitats[j];
                    if (habitat2.Empire != null && habitat2.Empire != _Galaxy.IndependentEmpire && habitat2.Empire != empire && (CheckSystemExplored(habitat2.SystemIndex) || IsObjectVisibleToThisEmpire(habitat2)))
                    {
                        habitatList.Add(habitat2);
                    }
                }
            }
            return habitatList;
        }

        private BuiltObjectList IdentifyDisputedBases(Empire otherEmpire)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            for (int i = 0; i < otherEmpire.DisputedBases.Count; i++)
            {
                BuiltObject builtObject = otherEmpire.DisputedBases[i];
                if (builtObject.HasBeenDestroyed)
                {
                    continue;
                }
                if (builtObject.NearestSystemStar != null)
                {
                    SystemInfo bySystemIndex = _Galaxy.Systems.GetBySystemIndex(builtObject.NearestSystemStar.SystemIndex);
                    if (bySystemIndex != null && bySystemIndex.DominantEmpire != null && bySystemIndex.DominantEmpire.Empire != null && bySystemIndex.DominantEmpire.Empire == this && (CheckSystemExplored(builtObject.NearestSystemStar.SystemIndex) || IsObjectVisibleToThisEmpire(builtObject)))
                    {
                        builtObjectList.Add(builtObject);
                    }
                }
                else
                {
                    int num = _Galaxy.CheckEmpireTerritoryIdAtLocation(builtObject.Xpos, builtObject.Ypos);
                    if (num == EmpireId && IsObjectVisibleToThisEmpire(builtObject))
                    {
                        builtObjectList.Add(builtObject);
                    }
                }
            }
            return builtObjectList;
        }

        private HabitatPrioritizationList IdentifyDesiredForeignColonies(Empire empire)
        {
            return IdentifyDesiredForeignColonies(empire, 2.0);
        }

        private HabitatPrioritizationList IdentifyDesiredForeignColonies(Empire empire, double proximityValueThreshold)
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            double num = 1.5;
            double num2 = (double)Galaxy.SectorSize * num * ((double)Galaxy.SectorSize * num);
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                Habitat habitat = empire.Colonies[i];
                if (habitat == null || habitat.HasBeenDestroyed || (!CheckSystemExplored(habitat.SystemIndex) && !IsObjectVisibleToThisEmpire(habitat)))
                {
                    continue;
                }
                Habitat habitat2 = _Galaxy.FastFindNearestColony(habitat.Xpos, habitat.Ypos, this, 0);
                if (habitat2 == null)
                {
                    continue;
                }
                double num3 = _Galaxy.CalculateDistanceSquared(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                if (num3 < num2)
                {
                    double num4 = _Galaxy.CalculateEmpireColonyProximityValueAtPoint(this, habitat.Xpos, habitat.Ypos, num2);
                    if (num4 > proximityValueThreshold)
                    {
                        HabitatPrioritization item = new HabitatPrioritization(habitat, (int)num4);
                        habitatPrioritizationList.Add(item);
                    }
                }
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            return habitatPrioritizationList;
        }

        private BuiltObjectList IdentifyDesiredForeignBases(Empire empire)
        {
            return IdentifyDesiredForeignBases(empire, 10.0);
        }

        private BuiltObjectList IdentifyDesiredForeignBases(Empire empire, double proximityValueThreshold)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            double num = 1.0;
            double num2 = (double)Galaxy.SectorSize * num * ((double)Galaxy.SectorSize * num);
            BuiltObjectList builtObjectList2 = new BuiltObjectList();
            List<double> list = new List<double>();
            if (empire.BuiltObjects != null)
            {
                builtObjectList2.AddRange(empire.BuiltObjects);
            }
            if (empire.PrivateBuiltObjects != null)
            {
                builtObjectList2.AddRange(empire.PrivateBuiltObjects);
            }
            for (int i = 0; i < builtObjectList2.Count; i++)
            {
                BuiltObject builtObject = builtObjectList2[i];
                if (builtObject == null || builtObject.Role != BuiltObjectRole.Base || builtObject.HasBeenDestroyed || !IsObjectVisibleToThisEmpire(builtObject))
                {
                    continue;
                }
                Habitat habitat = _Galaxy.FastFindNearestColony(builtObject.Xpos, builtObject.Ypos, this, 0);
                if (habitat == null)
                {
                    continue;
                }
                double num3 = _Galaxy.CalculateDistanceSquared(builtObject.Xpos, builtObject.Ypos, habitat.Xpos, habitat.Ypos);
                if (num3 < num2)
                {
                    double num4 = _Galaxy.CalculateEmpireColonyProximityValueAtPoint(this, builtObject.Xpos, builtObject.Ypos, num2);
                    if (num4 > proximityValueThreshold)
                    {
                        builtObjectList.Add(builtObject);
                        list.Add(num4);
                    }
                }
            }
            BuiltObject[] array = builtObjectList.ToArray();
            double[] keys = list.ToArray();
            Array.Sort(keys, array);
            Array.Reverse(array);
            BuiltObjectList builtObjectList3 = new BuiltObjectList();
            builtObjectList3.AddRange(array);
            return builtObjectList3;
        }

        public void IdentifyEmpireWarObjectives(Empire empire, out HabitatList targetedColonies, out BuiltObjectList targetedBases)
        {
            double proximityValueThreshold = 2.0 / Policy.WarWillingness;
            double proximityValueThreshold2 = 10.0 / Policy.WarWillingness;
            HabitatList items = new HabitatList();
            if (!Reclusive)
            {
                items = IdentifyOurDisputedColonies(this);
            }
            BuiltObjectList items2 = IdentifyDisputedBases(empire);
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            if (!Reclusive)
            {
                habitatPrioritizationList = IdentifyDesiredForeignColonies(empire, proximityValueThreshold);
            }
            BuiltObjectList items3 = IdentifyDesiredForeignBases(empire, proximityValueThreshold2);
            Habitat habitat = null;
            if (!Reclusive)
            {
                habitat = CheckEmpireBuildingVictoryWonderAtKnownColony(empire);
                if (habitat != null)
                {
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
                    if (!EvaluateShouldAttackWonderBuildingEmpire(empire, habitat, diplomaticRelation.Type, diplomaticRelation.Strategy))
                    {
                        habitat = null;
                    }
                }
            }
            targetedColonies = new HabitatList();
            if (habitat != null)
            {
                targetedColonies.Add(habitat);
            }
            targetedColonies.AddRange(items);
            targetedColonies.AddRange(habitatPrioritizationList.ResolveHabitats());
            targetedBases = new BuiltObjectList();
            targetedBases.AddRange(items2);
            targetedBases.AddRange(items3);
        }

        public PrioritizedTargetList IdentifyEmpireStrikePoints(Empire empire)
        {
            PrioritizedTargetList prioritizedTargetList = new PrioritizedTargetList();
            double num = 1.0;
            double num2 = 1.0;
            double num3 = 1.0;
            double num4 = 1.0;
            if (TargetHabitat != null && CheckSystemExplored(TargetHabitat.SystemIndex) && TargetHabitat.Empire != null && TargetHabitat.Empire == empire && !TargetHabitat.HasBeenDestroyed)
            {
                PrioritizedTarget prioritizedTarget = new PrioritizedTarget(TargetHabitat, 1000000000);
                prioritizedTargetList.Add(prioritizedTarget);
            }
            if (!Reclusive && empire.Colonies != null)
            {
                for (int i = 0; i < empire.Colonies.Count; i++)
                {
                    Habitat habitat = empire.Colonies[i];
                    if (CheckSystemExplored(habitat.SystemIndex) || IsObjectVisibleToThisEmpire(habitat))
                    {
                        int priority = (int)(1050000.0 * num);
                        PrioritizedTarget prioritizedTarget2 = new PrioritizedTarget(habitat, priority);
                        prioritizedTargetList.Add(prioritizedTarget2);
                    }
                }
            }
            if (empire.SpacePorts != null)
            {
                for (int j = 0; j < empire.SpacePorts.Count; j++)
                {
                    BuiltObject builtObject = empire.SpacePorts[j];
                    if (IsObjectVisibleToThisEmpire(builtObject) && builtObject.ParentHabitat != null)
                    {
                        int priority2 = (int)(1000000.0 * num2);
                        PrioritizedTarget prioritizedTarget3 = new PrioritizedTarget(builtObject.ParentHabitat, priority2);
                        if (Reclusive)
                        {
                            prioritizedTarget3 = new PrioritizedTarget(builtObject, priority2);
                        }
                        if (builtObject.ParentHabitat.Empire == null)
                        {
                            priority2 = (int)(20000.0 * num2);
                            prioritizedTarget3 = new PrioritizedTarget(builtObject, priority2);
                        }
                        prioritizedTargetList.Add(prioritizedTarget3);
                    }
                }
            }
            if (empire.MiningStations != null)
            {
                for (int k = 0; k < empire.MiningStations.Count; k++)
                {
                    BuiltObject builtObject2 = empire.MiningStations[k];
                    if (IsObjectVisibleToThisEmpire(builtObject2))
                    {
                        int priority3 = (int)(1000000.0 * num3);
                        PrioritizedTarget prioritizedTarget4 = new PrioritizedTarget(builtObject2, priority3);
                        prioritizedTargetList.Add(prioritizedTarget4);
                    }
                }
            }
            if (empire.ResearchFacilities != null)
            {
                for (int l = 0; l < empire.ResearchFacilities.Count; l++)
                {
                    BuiltObject builtObject3 = empire.ResearchFacilities[l];
                    if (IsObjectVisibleToThisEmpire(builtObject3))
                    {
                        int priority4 = 500000;
                        PrioritizedTarget prioritizedTarget5 = new PrioritizedTarget(builtObject3, priority4);
                        prioritizedTargetList.Add(prioritizedTarget5);
                    }
                }
            }
            if (DominantRace.AggressionLevel > 115 && Galaxy.Rnd.Next(0, 3) == 1 && empire.ResortBases != null)
            {
                for (int m = 0; m < empire.ResortBases.Count; m++)
                {
                    BuiltObject builtObject4 = empire.ResortBases[m];
                    if (IsObjectVisibleToThisEmpire(builtObject4))
                    {
                        int priority5 = 500000;
                        PrioritizedTarget prioritizedTarget6 = new PrioritizedTarget(builtObject4, priority5);
                        prioritizedTargetList.Add(prioritizedTarget6);
                    }
                }
            }
            if (empire.LongRangeScanners != null)
            {
                for (int n = 0; n < empire.LongRangeScanners.Count; n++)
                {
                    BuiltObject builtObject5 = empire.LongRangeScanners[n];
                    if (builtObject5.SubRole != BuiltObjectSubRole.SmallSpacePort && builtObject5.SubRole != BuiltObjectSubRole.MediumSpacePort && builtObject5.SubRole != BuiltObjectSubRole.LargeSpacePort && IsObjectVisibleToThisEmpire(builtObject5))
                    {
                        int priority6 = 500000;
                        PrioritizedTarget prioritizedTarget7 = new PrioritizedTarget(builtObject5, priority6);
                        prioritizedTargetList.Add(prioritizedTarget7);
                    }
                }
            }
            if (empire.ShipGroups != null)
            {
                for (int num5 = 0; num5 < empire.ShipGroups.Count; num5++)
                {
                    ShipGroup shipGroup = empire.ShipGroups[num5];
                    if (shipGroup.LeadShip != null && IsObjectVisibleToThisEmpire(shipGroup.LeadShip) && shipGroup.LeadShip.CurrentSpeed < (float)shipGroup.LeadShip.WarpSpeed)
                    {
                        int priority7 = (int)(1000000.0 * num4);
                        PrioritizedTarget prioritizedTarget8 = new PrioritizedTarget(shipGroup, priority7);
                        prioritizedTargetList.Add(prioritizedTarget8);
                    }
                }
            }
            prioritizedTargetList.Sort();
            prioritizedTargetList.Reverse();
            for (int num6 = 0; num6 < prioritizedTargetList.Count; num6++)
            {
                PrioritizedTarget prioritizedTarget9 = prioritizedTargetList[num6];
                Habitat habitat2 = null;
                int num7 = 0;
                double distanceFromAttackingEmpire = 1000000.0;
                Habitat habitat3 = null;
                int strategicValueThreshhold = 1000000;
                if (prioritizedTarget9.Target is Habitat)
                {
                    Habitat habitat4 = (Habitat)prioritizedTarget9.Target;
                    habitat3 = _Galaxy.FastFindNearestColony(habitat4.Xpos, habitat4.Ypos, this, strategicValueThreshhold);
                    if (habitat3 == null)
                    {
                        habitat3 = Capital;
                    }
                    if (habitat3 != null)
                    {
                        distanceFromAttackingEmpire = _Galaxy.CalculateDistance(habitat3.Xpos, habitat3.Ypos, habitat4.Xpos, habitat4.Ypos);
                        habitat2 = Galaxy.DetermineHabitatSystemStar(habitat4);
                        if (habitat2 != null)
                        {
                            if (CheckSystemVisible(habitat2))
                            {
                                num7 += _Galaxy.DetermineDefendingStrength(habitat4, empire);
                            }
                            else
                            {
                                num7 = (int)((double)habitat4.EstimatedDefensiveForceRequired(atWar: true) * 1.5);
                                BuiltObject builtObject6 = _Galaxy.DetermineSpacePortAtColony(habitat4);
                                if (builtObject6 != null)
                                {
                                    num7 = (int)((double)habitat4.EstimatedDefensiveForceRequired(atWar: true) * 1.0);
                                    num7 += builtObject6.CalculateOverallStrengthFactor();
                                }
                            }
                        }
                        else
                        {
                            num7 = (int)((double)habitat4.EstimatedDefensiveForceRequired(atWar: true) * 1.5);
                        }
                    }
                    else
                    {
                        num7 = (int)((double)habitat4.EstimatedDefensiveForceRequired(atWar: true) * 1.5);
                    }
                }
                else if (prioritizedTarget9.Target is BuiltObject)
                {
                    BuiltObject builtObject7 = (BuiltObject)prioritizedTarget9.Target;
                    habitat3 = _Galaxy.FastFindNearestColony(builtObject7.Xpos, builtObject7.Ypos, this, strategicValueThreshhold);
                    if (habitat3 == null)
                    {
                        habitat3 = Capital;
                    }
                    if (habitat3 != null)
                    {
                        distanceFromAttackingEmpire = _Galaxy.CalculateDistance(habitat3.Xpos, habitat3.Ypos, builtObject7.Xpos, builtObject7.Ypos);
                        num7 = ((builtObject7.NearestSystemStar == null) ? builtObject7.CalculateOverallStrengthFactor() : ((!CheckSystemVisible(builtObject7.NearestSystemStar.SystemIndex)) ? ((builtObject7.ParentHabitat == null) ? builtObject7.CalculateOverallStrengthFactor() : ((int)((double)builtObject7.ParentHabitat.EstimatedDefensiveForceRequired(atWar: true) * 1.5))) : _Galaxy.DetermineDefendingStrength(builtObject7, empire)));
                    }
                    else
                    {
                        num7 = builtObject7.CalculateOverallStrengthFactor();
                    }
                }
                else if (prioritizedTarget9.Target is ShipGroup)
                {
                    ShipGroup shipGroup2 = (ShipGroup)prioritizedTarget9.Target;
                    if (shipGroup2.LeadShip != null)
                    {
                        habitat3 = _Galaxy.FastFindNearestColony(shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos, this, strategicValueThreshhold);
                        if (habitat3 == null)
                        {
                            habitat3 = Capital;
                        }
                        if (habitat3 != null)
                        {
                            distanceFromAttackingEmpire = _Galaxy.CalculateDistance(habitat3.Xpos, habitat3.Ypos, shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos);
                            num7 = ((shipGroup2.LeadShip.NearestSystemStar == null) ? shipGroup2.TotalOverallStrengthFactor : ((!CheckSystemVisible(shipGroup2.LeadShip.NearestSystemStar.SystemIndex)) ? shipGroup2.TotalOverallStrengthFactor : _Galaxy.DetermineDefendingStrength(shipGroup2, empire)));
                        }
                        else
                        {
                            num7 = shipGroup2.TotalOverallStrengthFactor;
                        }
                    }
                }
                num7 = (prioritizedTarget9.LocationStrength = Math.Max(50, num7));
                prioritizedTarget9.DistanceFromAttackingEmpire = distanceFromAttackingEmpire;
            }
            prioritizedTargetList.Sort();
            prioritizedTargetList.Reverse();
            return prioritizedTargetList;
        }

        public HabitatList DetermineEmpireSystemsWithOtherMilitaryForcesPresent(Empire otherEmpire)
        {
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = DetermineEmpireDominatedSystems(this, includeAllTerritory: true);
            foreach (Habitat item in habitatList2)
            {
                if (SystemVisibility[item.SystemIndex].Threats == null || SystemVisibility[item.SystemIndex].ThreatLevels == null || SystemVisibility[item.SystemIndex].Threats.Count <= 0)
                {
                    continue;
                }
                BuiltObjectList threats = SystemVisibility[item.SystemIndex].Threats;
                for (int i = 0; i < threats.Count; i++)
                {
                    BuiltObject builtObject = threats[i];
                    if (builtObject.Role == BuiltObjectRole.Military && builtObject.FirepowerRaw > 0 && builtObject.Empire == otherEmpire && !habitatList.Contains(item))
                    {
                        habitatList.Add(item);
                    }
                }
            }
            return habitatList;
        }

        public HabitatPrioritizationList IdentifyThreatenedSystemsPrioritized(double x, double y, bool includePirateBaseSystems, bool excludeSystemsWithFleetsPresentOrEnRoute, bool excludeSystemsOfOtherEmpires)
        {
            HabitatPrioritizationList habitatPrioritizationList = new HabitatPrioritizationList();
            HabitatList habitatList = new HabitatList();
            if (!includePirateBaseSystems)
            {
                for (int i = 0; i < _KnownPirateBases.Count; i++)
                {
                    BuiltObject builtObject = _KnownPirateBases[i];
                    if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.NearestSystemStar != null && !habitatList.Contains(builtObject.NearestSystemStar))
                    {
                        habitatList.Add(builtObject.NearestSystemStar);
                    }
                }
            }
            HabitatList habitatList2 = new HabitatList();
            if (excludeSystemsWithFleetsPresentOrEnRoute)
            {
                for (int j = 0; j < ShipGroups.Count; j++)
                {
                    ShipGroup shipGroup = ShipGroups[j];
                    if (shipGroup != null)
                    {
                        Habitat habitat = shipGroup.IdentifyFleetSystem();
                        if (habitat != null && !habitatList2.Contains(habitat))
                        {
                            habitatList2.Add(habitat);
                        }
                    }
                }
            }
            for (int k = 0; k < SystemVisibility.Count; k++)
            {
                SystemVisibility systemVisibility = SystemVisibility[k];
                if (systemVisibility == null || systemVisibility.Status == SystemVisibilityStatus.Unexplored || systemVisibility.SystemStar == null || (!includePirateBaseSystems && habitatList.Contains(systemVisibility.SystemStar)))
                {
                    continue;
                }
                int num = _Galaxy.CheckSystemOwnershipId(systemVisibility.SystemStar);
                if (excludeSystemsOfOtherEmpires && num >= 0 && num != EmpireId)
                {
                    continue;
                }
                int num2 = 0;
                if (systemVisibility.Threats != null && systemVisibility.Threats.Count > 0)
                {
                    for (int l = 0; l < systemVisibility.Threats.Count; l++)
                    {
                        BuiltObject builtObject2 = systemVisibility.Threats[l];
                        if (builtObject2 == null || builtObject2.HasBeenDestroyed || builtObject2.Role != BuiltObjectRole.Military)
                        {
                            continue;
                        }
                        Empire actualEmpire = builtObject2.ActualEmpire;
                        if (actualEmpire == null || actualEmpire == _Galaxy.IndependentEmpire)
                        {
                            continue;
                        }
                        if (PirateEmpireBaseHabitat != null || actualEmpire.PirateEmpireBaseHabitat != null)
                        {
                            PirateRelation pirateRelation = ObtainPirateRelation(actualEmpire);
                            if (pirateRelation.Type != PirateRelationType.Protection)
                            {
                                num2 += builtObject2.FirepowerRaw;
                            }
                        }
                        else
                        {
                            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(actualEmpire);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War)
                            {
                                num2 += builtObject2.FirepowerRaw;
                            }
                        }
                    }
                }
                if (systemVisibility.Status == SystemVisibilityStatus.Visible)
                {
                    for (int m = 0; m < _Galaxy.Systems[systemVisibility.SystemStar.SystemIndex].Creatures.Count; m++)
                    {
                        Creature creature = _Galaxy.Systems[systemVisibility.SystemStar.SystemIndex].Creatures[m];
                        if (creature.IsVisible && creature.AttackStrength > 0)
                        {
                            num2 += creature.AttackStrength;
                        }
                    }
                }
                if (num2 > 0 && (!excludeSystemsWithFleetsPresentOrEnRoute || !habitatList2.Contains(systemVisibility.SystemStar)))
                {
                    double num3 = _Galaxy.CalculateDistance(x, y, systemVisibility.SystemStar.Xpos, systemVisibility.SystemStar.Ypos);
                    int priority = (int)((double)num2 * 1000.0 / (num3 / 10000.0));
                    HabitatPrioritization item = new HabitatPrioritization(systemVisibility.SystemStar, priority);
                    habitatPrioritizationList.Add(item);
                }
            }
            habitatPrioritizationList.Sort();
            habitatPrioritizationList.Reverse();
            return habitatPrioritizationList;
        }

        public bool CheckWhetherHabitatIsDangerous(Habitat habitat)
        {
            if (habitat != null)
            {
                Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                if (habitat2 != null && SystemVisibility[habitat2.SystemIndex].Threats != null && SystemVisibility[habitat2.SystemIndex].Threats.Count > 0)
                {
                    for (int i = 0; i < SystemVisibility[habitat2.SystemIndex].Threats.Count; i++)
                    {
                        BuiltObject builtObject = SystemVisibility[habitat2.SystemIndex].Threats[i];
                        if (builtObject == null || builtObject.Empire == null || builtObject.Empire.PirateEmpireBaseHabitat == null || builtObject.Role != BuiltObjectRole.Military)
                        {
                            continue;
                        }
                        PirateRelation pirateRelation = ObtainPirateRelation(builtObject.Empire);
                        if (pirateRelation.Type == PirateRelationType.Protection)
                        {
                            continue;
                        }
                        if (builtObject.Role == BuiltObjectRole.Base)
                        {
                            double num = _Galaxy.CalculateDistanceSquared(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                            if (num < 1000000.0)
                            {
                                return true;
                            }
                            continue;
                        }
                        if (builtObject.WarpSpeed > 0)
                        {
                            return true;
                        }
                        if (builtObject.TopSpeed > 0)
                        {
                            double num2 = _Galaxy.CalculateDistanceSquared(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                            if (num2 < 4000000.0)
                            {
                                return true;
                            }
                        }
                    }
                }
                if (habitat2 != null && CheckSystemVisible(habitat2.SystemIndex))
                {
                    for (int j = 0; j < _Galaxy.Systems[habitat2.SystemIndex].Creatures.Count; j++)
                    {
                        Creature creature = _Galaxy.Systems[habitat2.SystemIndex].Creatures[j];
                        if (creature.IsVisible && creature.AttackStrength > 0)
                        {
                            double num3 = _Galaxy.CalculateDistance(habitat.Xpos, habitat.Ypos, creature.Xpos, creature.Ypos);
                            if (num3 < (double)(creature.AttackRange * 2))
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        public Habitat DetermineTopThreatenedSystem(Empire empire)
        {
            HabitatList systemStars = DetermineEmpireDominatedSystems(this, includeAllTerritory: true);
            return DetermineTopThreatenedSystem(systemStars, empire);
        }

        public Habitat DetermineTopThreatenedSystem(HabitatList systemStars, Empire empire)
        {
            Habitat result = null;
            int num = 0;
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
            if (!diplomaticRelation.MilitaryRefuelingToOther)
            {
                foreach (Habitat systemStar in systemStars)
                {
                    int num2 = 0;
                    if (DefendHabitat != null && !DefendHabitat.HasBeenDestroyed && DefendHabitat.Empire != null && DefendHabitat.Empire == this)
                    {
                        _ = systemStar.SystemIndex;
                        _ = DefendHabitat.SystemIndex;
                    }
                    if (SystemVisibility[systemStar.SystemIndex].Threats != null && SystemVisibility[systemStar.SystemIndex].ThreatLevels != null && SystemVisibility[systemStar.SystemIndex].Threats.Count > 0)
                    {
                        BuiltObjectList threats = SystemVisibility[systemStar.SystemIndex].Threats;
                        for (int i = 0; i < threats.Count; i++)
                        {
                            if (threats[i].Role != BuiltObjectRole.Base && threats[i].Empire != _Galaxy.IndependentEmpire && threats[i].Empire.PirateEmpireBaseHabitat == null && threats[i].Empire == empire && threats[i].FirepowerRaw > 0 && (threats[i].Owner != null || (threats[i].Weapons != null && threats[i].Weapons.Count > 1)) && (threats[i].Mission == null || threats[i].Mission.Type != BuiltObjectMissionType.Blockade) && diplomaticRelation.Type != DiplomaticRelationType.War && !diplomaticRelation.MilitaryRefuelingToOther && threats[i].SubRole != BuiltObjectSubRole.ResortBase)
                            {
                                num2 += threats[i].FirepowerRaw;
                            }
                        }
                    }
                    if (num2 > num)
                    {
                        result = systemStar;
                        num = num2;
                    }
                }
                return result;
            }
            return result;
        }

        private void PirateReviewSystemThreats()
        {
            if (SystemVisibility == null || BuiltObjects == null || DominantRace == null)
            {
                return;
            }
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                SystemVisibility systemVisibility = SystemVisibility[i];
                if (systemVisibility != null)
                {
                    systemVisibility.EmpireStrength = 0;
                }
            }
            for (int j = 0; j < BuiltObjects.Count; j++)
            {
                BuiltObject builtObject = BuiltObjects[j];
                if (builtObject != null && builtObject.FirepowerRaw > 0 && builtObject.NearestSystemStar != null && builtObject.NearestSystemStar.SystemIndex >= 0 && builtObject.NearestSystemStar.SystemIndex < SystemVisibility.Count)
                {
                    SystemVisibility[builtObject.NearestSystemStar.SystemIndex].EmpireStrength += builtObject.FirepowerRaw;
                }
            }
        }

        private void ReviewSystemThreats()
        {
            if (SystemVisibility == null || BuiltObjects == null || DominantRace == null)
            {
                return;
            }
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                SystemVisibility systemVisibility = SystemVisibility[i];
                if (systemVisibility != null)
                {
                    systemVisibility.EmpireStrength = 0;
                }
            }
            for (int j = 0; j < BuiltObjects.Count; j++)
            {
                BuiltObject builtObject = BuiltObjects[j];
                if (builtObject != null && builtObject.FirepowerRaw > 0 && builtObject.NearestSystemStar != null && builtObject.NearestSystemStar.SystemIndex >= 0 && builtObject.NearestSystemStar.SystemIndex < SystemVisibility.Count)
                {
                    SystemVisibility[builtObject.NearestSystemStar.SystemIndex].EmpireStrength += builtObject.FirepowerRaw;
                }
            }
            if (EmpireEvaluations != null)
            {
                for (int k = 0; k < EmpireEvaluations.Count; k++)
                {
                    EmpireEvaluation empireEvaluation = EmpireEvaluations[k];
                    empireEvaluation.MilitaryForcesInSystems = 0;
                }
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            int refusalCount = 0;
            double num = Galaxy.SectorSize * Galaxy.SectorSize;
            int num2 = 30;
            double val = 3.33 * (1.5 - (double)Math.Max(DominantRace.AggressionLevel, DominantRace.CautionLevel) / 100.0);
            val = Math.Min(1.0, Math.Max(0.0, val));
            int num3 = (int)Math.Max(0.0, (double)num2 * val);
            int militaryPotency = MilitaryPotency;
            double num4 = 1.0 + Math.Max(0.0, (double)(DominantRace.AggressionLevel - DominantRace.CautionLevel) / 100.0);
            HabitatList habitatList = DetermineEmpireDominatedSystems(this, includeAllTerritory: true);
            BuiltObjectList builtObjectList = _Galaxy.ObtainAvailableMilitaryShips(this, 1, includeUnAutomatedShips: false, allowShipsInFleets: false, includeBusyShips: false);
            foreach (Habitat item in habitatList)
            {
                bool flag = false;
                if (DefendHabitat != null && !DefendHabitat.HasBeenDestroyed && DefendHabitat.Empire != null && DefendHabitat.Empire == this && item.SystemIndex == DefendHabitat.SystemIndex)
                {
                    flag = true;
                }
                SystemVisibility systemVisibility2 = null;
                if (item.SystemIndex >= 0 && item.SystemIndex < SystemVisibility.Count)
                {
                    systemVisibility2 = SystemVisibility[item.SystemIndex];
                }
                if (systemVisibility2 == null || systemVisibility2.Threats == null || systemVisibility2.ThreatLevels == null || systemVisibility2.Threats.Count <= 0)
                {
                    continue;
                }
                BuiltObjectList threats = systemVisibility2.Threats;
                int[] array = new int[_Galaxy.NextEmpireID + 1];
                int num5 = -1;
                BuiltObject builtObject2 = null;
                for (int l = 0; l < threats.Count; l++)
                {
                    BuiltObject builtObject3 = threats[l];
                    if (builtObject3 == null || builtObject3.Role != BuiltObjectRole.Military || builtObject3.Empire == null || builtObject3.Empire == _Galaxy.IndependentEmpire || builtObject3.Empire.PirateEmpireBaseHabitat != null || (builtObject3.FirepowerRaw <= 0 && builtObject3.FighterCapacity <= 0) || (builtObject3.Owner == null && (builtObject3.Weapons == null || builtObject3.Weapons.Count <= 1)) || builtObject3.HasBeenDestroyed || builtObject3.NearestSystemStar != item || (builtObject3.Mission != null && builtObject3.Mission.Type == BuiltObjectMissionType.Blockade))
                    {
                        continue;
                    }
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(threats[l].Empire);
                    if (diplomaticRelation == null || diplomaticRelation.Type == DiplomaticRelationType.War || diplomaticRelation.MilitaryRefuelingToOther || builtObject3.SubRole == BuiltObjectSubRole.ResortBase)
                    {
                        continue;
                    }
                    int num6 = Math.Max(builtObject3.FirepowerRaw, builtObject3.FighterCapacity * 10);
                    array[builtObject3.Empire.EmpireId] += num6;
                    if (num5 < 0)
                    {
                        num5 = builtObject3.Empire.EmpireId;
                        builtObject2 = builtObject3;
                    }
                    else
                    {
                        if (array[builtObject3.Empire.EmpireId] < array[num5])
                        {
                            continue;
                        }
                        if (num5 != builtObject3.Empire.EmpireId)
                        {
                            builtObject2 = builtObject3;
                        }
                        else if (builtObject2 == null)
                        {
                            builtObject2 = builtObject3;
                        }
                        else
                        {
                            int num7 = Math.Max(builtObject2.FirepowerRaw, builtObject2.FighterCapacity * 10);
                            if (num6 > num7)
                            {
                                builtObject2 = builtObject3;
                            }
                        }
                        num5 = builtObject3.Empire.EmpireId;
                    }
                }
                if (num5 < 0 || (array[num5] < num3 && !flag))
                {
                    continue;
                }
                Empire byEmpireId = _Galaxy.Empires.GetByEmpireId(num5);
                EmpireEvaluation empireEvaluation2 = ObtainEmpireEvaluation(byEmpireId);
                int num8 = Math.Max(1, Math.Min(20, (array[num5] - num3) / 5));
                empireEvaluation2.MilitaryForcesInSystems -= num8;
                long num9 = currentStarDate - empireEvaluation2.LastSystemWarningDate;
                if (num9 < 90000 && byEmpireId != null)
                {
                    int militaryPotency2 = byEmpireId.MilitaryPotency;
                    double num10 = (double)militaryPotency / (double)militaryPotency2;
                    num10 *= num4;
                    if (num10 >= 0.85)
                    {
                        if (builtObject2 == null)
                        {
                            continue;
                        }
                        if (builtObject2.ShipGroup != null && builtObject2.ShipGroup.LeadShip != null)
                        {
                            double num11 = _Galaxy.CalculateDistanceSquared(builtObject2.Xpos, builtObject2.Ypos, builtObject2.ShipGroup.LeadShip.Xpos, builtObject2.ShipGroup.LeadShip.Ypos);
                            if (num11 < 9000000.0)
                            {
                                int overallStrength = (int)((double)builtObject2.ShipGroup.TotalOverallStrengthFactor * 0.75);
                                ShipGroup shipGroup = FindNearestAvailableFleet(builtObject2.ShipGroup.LeadShip.Xpos, builtObject2.ShipGroup.LeadShip.Ypos, BuiltObjectMissionPriority.Low, overallStrength, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false);
                                ShipGroup shipGroup2 = FindNearestAvailableFleet(builtObject2.ShipGroup.LeadShip.Xpos, builtObject2.ShipGroup.LeadShip.Ypos, BuiltObjectMissionPriority.Low, overallStrength, FleetPosture.Defend, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: false, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true);
                                ShipGroup shipGroup3 = null;
                                double num12 = double.MaxValue;
                                double num13 = double.MaxValue;
                                if (shipGroup != null && shipGroup.LeadShip != null)
                                {
                                    num12 = _Galaxy.CalculateDistanceSquared(builtObject2.ShipGroup.LeadShip.Xpos, builtObject2.ShipGroup.LeadShip.Ypos, shipGroup.LeadShip.Xpos, shipGroup.LeadShip.Ypos);
                                }
                                if (shipGroup2 != null && shipGroup2.LeadShip != null)
                                {
                                    num13 = _Galaxy.CalculateDistanceSquared(builtObject2.ShipGroup.LeadShip.Xpos, builtObject2.ShipGroup.LeadShip.Ypos, shipGroup2.LeadShip.Xpos, shipGroup2.LeadShip.Ypos);
                                }
                                if (num13 < num12 && shipGroup2 != null)
                                {
                                    shipGroup3 = shipGroup2;
                                }
                                else if (num12 < num13 && shipGroup != null)
                                {
                                    shipGroup3 = shipGroup;
                                }
                                if (shipGroup3 != null && shipGroup3.LeadShip != null && (shipGroup3.LeadShip.IsAutoControlled || _ControlMilitaryAttacks == AutomationLevel.SemiAutomated) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackForcesInOurSystem(item, byEmpireId, builtObject2.ShipGroup, shipGroup3), builtObject2.ShipGroup, AdvisorMessageType.DefendTerritory, builtObject2.Empire, shipGroup3, null))
                                {
                                    shipGroup3.AssignMission(BuiltObjectMissionType.Attack, builtObject2.ShipGroup, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                }
                            }
                        }
                        else
                        {
                            int index = -1;
                            BuiltObject nearestBuiltObjectWithinRange = builtObjectList.GetNearestBuiltObjectWithinRange(builtObject2.Xpos, builtObject2.Ypos, 0.2, out index);
                            if (nearestBuiltObjectWithinRange != null && nearestBuiltObjectWithinRange.WithinFuelRangeAndRefuel(builtObject2.Xpos, builtObject2.Ypos, 0.1) && CheckTaskAuthorized(_ControlMilitaryAttacks, ref refusalCount, GenerateAutomationMessageAttackForcesInOurSystem(item, byEmpireId), builtObject2, AdvisorMessageType.DefendTerritory, builtObject2.Empire, nearestBuiltObjectWithinRange, null))
                            {
                                BuiltObjectMissionType builtObjectMissionType = DetermineDestroyOrCaptureTarget(nearestBuiltObjectWithinRange, builtObject2, attackingAsGroup: true);
                                nearestBuiltObjectWithinRange.RecordRevertMission(builtObjectMissionType, evenWhenAutomated: true);
                                nearestBuiltObjectWithinRange.AssignMission(builtObjectMissionType, builtObject2, null, BuiltObjectMissionPriority.High);
                                builtObjectList.RemoveAt(index);
                            }
                        }
                        continue;
                    }
                    int num14 = 0;
                    if (systemVisibility2.EmpireStrength >= array[num5])
                    {
                        continue;
                    }
                    int num15 = array[num5] - systemVisibility2.EmpireStrength;
                    int iterationCount = 0;
                    while (Galaxy.ConditionCheckLimit(num15 > 0 && builtObject2 != null && num14 < 3, 100, ref iterationCount))
                    {
                        int index2 = -1;
                        BuiltObject nearestBuiltObjectWithinRange2 = builtObjectList.GetNearestBuiltObjectWithinRange(builtObject2.Xpos, builtObject2.Ypos, 0.2, out index2);
                        if (nearestBuiltObjectWithinRange2 == null || !nearestBuiltObjectWithinRange2.WithinFuelRangeAndRefuel(builtObject2.Xpos, builtObject2.Ypos, 0.1))
                        {
                            break;
                        }
                        double num16 = _Galaxy.CalculateDistanceSquared(nearestBuiltObjectWithinRange2.Xpos, nearestBuiltObjectWithinRange2.Ypos, builtObject2.Xpos, builtObject2.Ypos);
                        if (!(num16 < num))
                        {
                            break;
                        }
                        object obj = null;
                        _Galaxy.SelectRelativeParkingPoint(out var x, out var y);
                        if (builtObject2.ParentHabitat != null)
                        {
                            obj = builtObject2.ParentHabitat;
                        }
                        else
                        {
                            obj = null;
                            x += builtObject2.Xpos;
                            y += builtObject2.Ypos;
                        }
                        nearestBuiltObjectWithinRange2.AssignMission(BuiltObjectMissionType.Move, obj, null, x, y, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                        num15 -= nearestBuiltObjectWithinRange2.FirepowerRaw;
                        num14++;
                        builtObjectList.RemoveAt(index2);
                    }
                    continue;
                }
                if (num9 > 240000 && _ControlDiplomacyTreaties != 0)
                {
                    string description = string.Format(TextResolver.GetText("Your forces intrude in our territory"), item.Name);
                    SendMessageToEmpire(byEmpireId, EmpireMessageType.RemoveForcesFromSystem, item, description);
                    empireEvaluation2.LastSystemWarningDate = currentStarDate;
                    empireEvaluation2.LastSystemWarningIndex = item.SystemIndex;
                }
                int num17 = 0;
                if (systemVisibility2.EmpireStrength >= array[num5])
                {
                    continue;
                }
                int num18 = array[num5] - systemVisibility2.EmpireStrength;
                int iterationCount2 = 0;
                while (Galaxy.ConditionCheckLimit(num18 > 0 && builtObject2 != null && num17 < 3, 100, ref iterationCount2))
                {
                    int index3 = -1;
                    BuiltObject nearestBuiltObjectWithinRange3 = builtObjectList.GetNearestBuiltObjectWithinRange(builtObject2.Xpos, builtObject2.Ypos, 0.2, out index3);
                    if (nearestBuiltObjectWithinRange3 == null || !nearestBuiltObjectWithinRange3.WithinFuelRangeAndRefuel(builtObject2.Xpos, builtObject2.Ypos, 0.1))
                    {
                        break;
                    }
                    double num19 = _Galaxy.CalculateDistanceSquared(nearestBuiltObjectWithinRange3.Xpos, nearestBuiltObjectWithinRange3.Ypos, builtObject2.Xpos, builtObject2.Ypos);
                    if (!(num19 < num))
                    {
                        break;
                    }
                    object obj2 = null;
                    _Galaxy.SelectRelativeParkingPoint(out var x2, out var y2);
                    if (builtObject2.ParentHabitat != null)
                    {
                        obj2 = builtObject2.ParentHabitat;
                    }
                    else
                    {
                        obj2 = null;
                        x2 += builtObject2.Xpos;
                        y2 += builtObject2.Ypos;
                    }
                    nearestBuiltObjectWithinRange3.AssignMission(BuiltObjectMissionType.Move, obj2, null, x2, y2, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                    num18 -= nearestBuiltObjectWithinRange3.FirepowerRaw;
                    num17++;
                    builtObjectList.RemoveAt(index3);
                }
            }
        }

        public int EvaluateMilitaryPotency(int ourWeightedMilitaryPotency, int theirWeightedMilitaryPotency, Empire otherEmpire)
        {
            int num = 0;
            double num2 = (double)ourWeightedMilitaryPotency * 2.0;
            double num3 = (double)ourWeightedMilitaryPotency * 0.5;
            if (otherEmpire == _Galaxy.PlayerEmpire)
            {
                num2 *= _Galaxy.PlayerEmpire.DifficultyLevel;
                num3 *= _Galaxy.PlayerEmpire.DifficultyLevel;
            }
            if ((double)theirWeightedMilitaryPotency > num2)
            {
                return -1;
            }
            if ((double)theirWeightedMilitaryPotency > num3 && (double)theirWeightedMilitaryPotency < num2)
            {
                return 0;
            }
            if (theirWeightedMilitaryPotency == ourWeightedMilitaryPotency)
            {
                return 0;
            }
            return 1;
        }

        private void SendScoutShipsToEnemyLocations(EmpireList enemyEmpires)
        {
            if (enemyEmpires.Count <= 0)
            {
                return;
            }
            int totalExplorationShips = 0;
            int val = CountAvailableScoutShips(out totalExplorationShips);
            val = Math.Min(val, totalExplorationShips / 2);
            int num = val / enemyEmpires.Count;
            if (num == 0 && val > 0)
            {
                num = 1;
            }
            if (enemyEmpires.Count <= 0)
            {
                return;
            }
            int num2 = Galaxy.Rnd.Next(0, enemyEmpires.Count);
            for (int i = num2; i < enemyEmpires.Count; i++)
            {
                if (val > 0)
                {
                    val -= SendScoutsToSingleEnemyEmpire(enemyEmpires[i], num);
                }
            }
            for (int j = 0; j < num2; j++)
            {
                if (val > 0)
                {
                    val -= SendScoutsToSingleEnemyEmpire(enemyEmpires[j], num);
                }
            }
        }

        private int SendScoutsToSingleEnemyEmpire(Empire enemyEmpire, int availableScouts)
        {
            int num = 0;
            HabitatList habitatList = enemyEmpire.DetermineEmpireSystems(enemyEmpire);
            SystemInfoDistanceList systemInfoDistanceList = new SystemInfoDistanceList();
            foreach (Habitat item in habitatList)
            {
                SystemInfo systemInfo = _Galaxy.Systems[item.SystemIndex];
                SystemInfoDistance systemInfoDistance = new SystemInfoDistance();
                systemInfoDistance.SystemInfo = systemInfo;
                double distance = 0.0;
                if (systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != null && systemInfo.DominantEmpire.Empire == enemyEmpire)
                {
                    distance = systemInfo.DominantEmpire.TotalStrategicValue;
                }
                else if (systemInfo.OtherEmpires != null && systemInfo.OtherEmpires.Count > 0)
                {
                    for (int i = 0; i < systemInfo.OtherEmpires.Count; i++)
                    {
                        if (systemInfo.OtherEmpires[i].Empire == enemyEmpire)
                        {
                            distance = systemInfo.OtherEmpires[i].TotalStrategicValue;
                            break;
                        }
                    }
                }
                systemInfoDistance.Distance = distance;
                systemInfoDistanceList.Add(systemInfoDistance);
            }
            systemInfoDistanceList.Sort();
            systemInfoDistanceList.Reverse();
            for (int j = 0; j < systemInfoDistanceList.Count; j++)
            {
                if (availableScouts <= 0)
                {
                    break;
                }
                if (CheckSystemVisibilityStatus(systemInfoDistanceList[j].SystemInfo.SystemStar.SystemIndex) != SystemVisibilityStatus.Explored)
                {
                    continue;
                }
                BuiltObject builtObject = FindAvailableExplorationShip();
                if (builtObject == null)
                {
                    continue;
                }
                Habitat habitat = null;
                if (systemInfoDistanceList[j].SystemInfo.Habitats == null || systemInfoDistanceList[j].SystemInfo.Habitats.Count <= 0)
                {
                    continue;
                }
                int num2 = 0;
                int num3 = systemInfoDistanceList[j].SystemInfo.Habitats.Count - 1;
                while (habitat == null && num2 < 30 && num3 >= 0)
                {
                    habitat = systemInfoDistanceList[j].SystemInfo.Habitats[num3];
                    bool flag = true;
                    if (habitat != null)
                    {
                        BuiltObject builtObject2 = _Galaxy.FindNearestBuiltObject((int)habitat.Xpos, (int)habitat.Ypos, enemyEmpire);
                        if (builtObject2 != null)
                        {
                            double num4 = _Galaxy.CalculateDistance(builtObject2.Xpos, builtObject2.Ypos, habitat.Xpos, habitat.Ypos);
                            if (num4 < 2500.0)
                            {
                                flag = false;
                            }
                        }
                        if (!flag)
                        {
                            habitat = null;
                        }
                    }
                    num3--;
                    num2++;
                }
                if (habitat != null && builtObject.WithinFuelRangeAndRefuel(habitat.Xpos, habitat.Ypos, 0.1))
                {
                    long starDate = _Galaxy.CurrentStarDate + 180000;
                    builtObject.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat, null, -2000000001.0, -2000000001.0, starDate, BuiltObjectMissionPriority.High, allowReprocessing: true);
                    availableScouts--;
                    num++;
                }
            }
            return num;
        }

        private int CountExplorationShips()
        {
            int num = 0;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                if (BuiltObjects[i].SubRole == BuiltObjectSubRole.ExplorationShip && BuiltObjects[i].BuiltAt == null)
                {
                    num++;
                }
            }
            return num;
        }

        private int CountExploredSystems()
        {
            int num = 0;
            for (int i = 0; i < SystemVisibility.Count; i++)
            {
                if (SystemVisibility[i].SystemStar != null && SystemVisibility[i].SystemStar.Category == HabitatCategoryType.Star && CheckSystemExplored(SystemVisibility[i].SystemStar))
                {
                    num++;
                }
            }
            return num;
        }

        private int CountAvailableScoutShips(out int totalExplorationShips)
        {
            int num = 0;
            totalExplorationShips = 0;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                if (BuiltObjects[i].SubRole == BuiltObjectSubRole.ExplorationShip)
                {
                    totalExplorationShips++;
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject.BuiltAt == null && builtObject.IsAutoControlled && (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined || builtObject.Mission.Priority == BuiltObjectMissionPriority.Undefined || builtObject.Mission.Priority == BuiltObjectMissionPriority.Low || builtObject.Mission.Priority == BuiltObjectMissionPriority.Normal))
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        private BuiltObject FindAvailableExplorationShip()
        {
            BuiltObject result = null;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                if (BuiltObjects[i].SubRole == BuiltObjectSubRole.ExplorationShip)
                {
                    BuiltObject builtObject = BuiltObjects[i];
                    if (builtObject.BuiltAt == null && builtObject.IsAutoControlled && (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined || builtObject.Mission.Priority == BuiltObjectMissionPriority.Undefined || builtObject.Mission.Priority == BuiltObjectMissionPriority.Low || builtObject.Mission.Priority == BuiltObjectMissionPriority.Normal))
                    {
                        result = builtObject;
                        break;
                    }
                }
            }
            return result;
        }

        public BuiltObject FindNearestAvailableConstructionShip(double x, double y)
        {
            BuiltObject result = null;
            double num = double.MaxValue;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject != null && builtObject.SubRole == BuiltObjectSubRole.ConstructionShip && builtObject.BuiltAt == null && (builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined))
                {
                    double num2 = _Galaxy.CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public void ResolveSystemVisibility(BuiltObject builtObject, bool excludeBuiltObject)
        {
            SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Unexplored;
            Habitat nearestSystemStar = builtObject.NearestSystemStar;
            if (nearestSystemStar == null || SystemVisibility == null || this == _Galaxy.IndependentEmpire)
            {
                return;
            }
            SystemVisibilityStatus systemVisibilityStatus2 = SystemVisibilityStatus.Unexplored;
            int systemIndex = nearestSystemStar.SystemIndex;
            if (systemIndex >= 0 && systemIndex < SystemVisibility.Count)
            {
                systemVisibilityStatus2 = SystemVisibility[systemIndex].Status;
            }
            systemVisibilityStatus = ((!excludeBuiltObject) ? CheckSystemVisible(nearestSystemStar, this, null, null) : CheckSystemVisible(nearestSystemStar, this, builtObject, null));
            if ((systemVisibilityStatus2 == SystemVisibilityStatus.Explored || systemVisibilityStatus2 == SystemVisibilityStatus.Visible) && systemVisibilityStatus == SystemVisibilityStatus.Unexplored)
            {
                systemVisibilityStatus = SystemVisibilityStatus.Explored;
            }
            SetSystemVisibility(nearestSystemStar, systemVisibilityStatus);
            if (systemVisibilityStatus == SystemVisibilityStatus.Visible)
            {
                if (!_SystemsVisible.Contains(nearestSystemStar))
                {
                    _SystemsVisible.Add(nearestSystemStar);
                }
                return;
            }
            int num = _SystemsVisible.IndexOf(nearestSystemStar);
            if (num >= 0 && _SystemsVisible.Count > num)
            {
                _SystemsVisible.RemoveAt(num);
            }
        }

        public void ResolveSystemVisibility(double x, double y, BuiltObject excludeBuiltObject, Habitat excludeHabitat)
        {
            SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Unexplored;
            Habitat habitat = _Galaxy.FastFindNearestSystem(x, y);
            if (habitat == null)
            {
                return;
            }
            double num = _Galaxy.CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            if (!(num <= (double)(Galaxy.MaxSolarSystemSize + 500)))
            {
                return;
            }
            SystemVisibilityStatus status = SystemVisibility[habitat.SystemIndex].Status;
            systemVisibilityStatus = CheckSystemVisible(habitat, this, excludeBuiltObject, excludeHabitat);
            if ((status == SystemVisibilityStatus.Explored || status == SystemVisibilityStatus.Visible) && systemVisibilityStatus == SystemVisibilityStatus.Unexplored)
            {
                systemVisibilityStatus = SystemVisibilityStatus.Explored;
            }
            SetSystemVisibility(habitat, systemVisibilityStatus);
            if (systemVisibilityStatus == SystemVisibilityStatus.Visible)
            {
                if (!_SystemsVisible.Contains(habitat))
                {
                    _SystemsVisible.Add(habitat);
                }
                return;
            }
            int num2 = _SystemsVisible.IndexOf(habitat);
            if (num2 >= 0 && _SystemsVisible.Count > num2)
            {
                _SystemsVisible.RemoveAt(num2);
            }
        }

        public void SetSystemVisibility(Habitat systemStar, SystemVisibilityStatus status)
        {
            if (systemStar.SystemIndex >= 0 && systemStar.SystemIndex < SystemVisibility.Count)
            {
                SystemVisibility[systemStar.SystemIndex].Status = status;
            }
        }

        public SystemVisibilityStatus CheckSystemVisible(Habitat systemStar, Empire ourEmpire, BuiltObject excludeBuiltObject, Habitat excludeHabitat)
        {
            bool flag = false;
            if (ourEmpire != null && ourEmpire.PirateEmpireBaseHabitat != null)
            {
                flag = true;
            }
            SystemInfo systemInfo = _Galaxy.Systems[systemStar.SystemIndex];
            for (int i = 0; i < systemInfo.Habitats.Count; i++)
            {
                if ((systemInfo.Habitats[i].Owner == this || (flag && systemInfo.Habitats[i].GetPirateControl().GetByFaction(ourEmpire) != null)) && systemInfo.Habitats[i] != excludeHabitat)
                {
                    return SystemVisibilityStatus.Visible;
                }
            }
            for (int j = 0; j < BuiltObjects.Count; j++)
            {
                BuiltObject builtObject = BuiltObjects[j];
                if (builtObject != null && builtObject.NearestSystemStar == systemStar && builtObject != excludeBuiltObject)
                {
                    return SystemVisibilityStatus.Visible;
                }
            }
            for (int k = 0; k < PrivateBuiltObjects.Count; k++)
            {
                BuiltObject builtObject2 = PrivateBuiltObjects[k];
                if (builtObject2 != null && builtObject2.NearestSystemStar == systemStar && builtObject2 != excludeBuiltObject)
                {
                    return SystemVisibilityStatus.Visible;
                }
            }
            if (SystemVisibility[systemStar.SystemIndex].Status == SystemVisibilityStatus.Visible || SystemVisibility[systemStar.SystemIndex].Status == SystemVisibilityStatus.Explored)
            {
                return SystemVisibilityStatus.Explored;
            }
            return SystemVisibilityStatus.Unexplored;
        }

        private void ProjectPrivateForceStructure()
        {
            _PrivateForceStructureProjections = new ForceStructureProjectionList();
            long currentStarDate = _Galaxy.CurrentStarDate;
            HabitatList habitatList = DetermineLargestColonyInEachSystem();
            OrderList orders = _Galaxy.Orders.GetOrders(this);
            int num = 1 + (int)((double)orders.Count * 0.45 * 0.85);
            int num2 = 1 + (int)((double)orders.Count * 0.35 * 0.85);
            int num3 = 1 + (int)((double)orders.Count * 0.2 * 0.85);
            double num4 = Math.Max(Colonies.Count, (double)MiningStations.Count / 7.0);
            int num5 = (int)(num4 * 10.0);
            int num6 = (int)(num4 * 8.0);
            int num7 = (int)(num4 * 5.0);
            if (Colonies.Count == 1)
            {
                num5 = (int)((double)num5 * 1.5);
                num6 = (int)((double)num6 * 1.5);
                num7 = (int)((double)num7 * 1.5);
                if (!CheckEmpireHasHyperDriveTech(this))
                {
                    num *= 2;
                    num2 *= 2;
                    num3 *= 2;
                }
            }
            else if (Colonies.Count < 4)
            {
                num5 = (int)(num4 * 14.0);
                num6 = (int)(num4 * 11.0);
                num7 = (int)(num4 * 7.0);
            }
            int num8 = 0;
            if (MiningStations != null)
            {
                num8 = MiningStations.Count;
                if (num8 < 5)
                {
                    double num9 = 5 - num8;
                    num5 = (int)((double)num5 / num9);
                    num6 = (int)((double)num6 / num9);
                    num7 = (int)((double)num7 / num9);
                }
            }
            if (DominantRace != null && DominantRace.Expanding)
            {
                num = Math.Max(num, (int)((double)Colonies.Count * 2.0));
                num2 = Math.Max(num2, (int)((double)Colonies.Count * 1.7));
                num3 = Math.Max(num3, (int)((double)Colonies.Count * 1.3));
            }
            double num10 = 3.0;
            if (Colonies.Count < 2 && (ResortBases == null || ResortBases.Count <= 0))
            {
                num10 = 0.0;
            }
            int num11 = Colonies.CountMigrationFactorBelow(0f);
            int num12 = Colonies.CountPopulationAbove(8000000000L);
            double num13 = 0.2;
            _ = (double)num11 / Math.Max(1.0, Colonies.Count);
            double num14 = 0.1;
            double num15 = (double)num12 / Math.Max(1.0, Colonies.Count);
            if (num15 < num14)
            {
                num10 /= 2.0;
            }
            if ((double)num11 < num13)
            {
                num10 /= 1.5;
            }
            int num16 = (int)((double)Colonies.Count * num10);
            Design design = Designs.FindNewestCanBuild(BuiltObjectSubRole.LargeFreighter);
            if (design == null || !CanBuildBuiltObject(new BuiltObject(design, string.Empty, _Galaxy)))
            {
                num += num3;
                num5 += num7;
                num3 = 0;
                num7 = 0;
            }
            design = Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumFreighter);
            if (design == null || !CanBuildBuiltObject(new BuiltObject(design, string.Empty, _Galaxy)))
            {
                num += num2;
                num5 += num6;
                num2 = 0;
                num6 = 0;
            }
            num = Math.Min(num, num5);
            num2 = Math.Min(num2, num6);
            num3 = Math.Min(num3, num7);
            bool flag = true;
            if (Capital != null)
            {
                Habitat habitat = _Galaxy.FindNearestHabitat(Capital.Xpos, Capital.Ypos, HabitatType.Undefined, Capital);
                if (habitat != null && ResourceMap != null && !ResourceMap.CheckResourcesKnown(habitat))
                {
                    flag = false;
                }
            }
            if (num8 > 0)
            {
                flag = true;
            }
            if (flag)
            {
                if (num > 0)
                {
                    _PrivateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.SmallFreighter, num, currentStarDate));
                }
                if (num2 > 0)
                {
                    _PrivateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.MediumFreighter, num2, currentStarDate));
                }
                if (num3 > 0)
                {
                    _PrivateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.LargeFreighter, num3, currentStarDate));
                }
                if (num16 > 0)
                {
                    _PrivateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.PassengerShip, num16, currentStarDate));
                }
            }
            int num17 = Math.Max(1, (int)((double)habitatList.Count * 1.5));
            if (Colonies.Count == 1)
            {
                num17 *= 2;
                if (!CheckEmpireHasHyperDriveTech(this))
                {
                    num17 *= 2;
                }
            }
            num17 = Math.Min(num17, 40);
            if (flag)
            {
                _PrivateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.GasMiningShip, num17, currentStarDate));
                _PrivateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.MiningShip, num17, currentStarDate));
            }
            double privateAnnualRevenue = GetPrivateAnnualRevenue();
            double annualSupportCosts = 0.0;
            ForceStructureProjectionList forceStructureProjectionList = CurrentPrivateForceStructure(out annualSupportCosts);
            ForceStructureProjectionList forceStructure = _PrivateForceStructureProjections.Diff(forceStructureProjectionList);
            double num18 = EstimateForceStructureSupportCost(forceStructure);
            if (num18 < 0.0)
            {
                num18 = 0.0;
            }
            double num19 = annualSupportCosts + num18;
            double num20 = GetPrivateFunds() / num19;
            double num21 = 1.0;
            if (num20 < Galaxy.AllowableYearsMaintenanceFromCashOnHand)
            {
                privateAnnualRevenue *= 0.8;
                num21 = (privateAnnualRevenue - annualSupportCosts) / num18;
                num21 = Math.Max(0.0, num21);
            }
            if (!(num21 < 1.0))
            {
                return;
            }
            foreach (ForceStructureProjection privateForceStructureProjection in _PrivateForceStructureProjections)
            {
                int amount = privateForceStructureProjection.Amount;
                if (amount > 0)
                {
                    amount = (privateForceStructureProjection.Amount = Math.Max(1, (int)((double)amount * num21)));
                }
            }
        }

        public void CalculateStateExpenditureBalance(out double shipMaintenancePortion, out double troopMaintenancePortion, out double facilityMaintenancePortion)
        {
            double annualIncome = CalculateAccurateAnnualIncome();
            CalculateStateExpenditureBalance(annualIncome, out shipMaintenancePortion, out troopMaintenancePortion, out facilityMaintenancePortion);
        }

        public void CalculateStateExpenditureBalance(double annualIncome, out double shipMaintenancePortion, out double troopMaintenancePortion, out double facilityMaintenancePortion)
        {
            shipMaintenancePortion = 0.63;
            troopMaintenancePortion = 0.25;
            facilityMaintenancePortion = 0.12;
            shipMaintenancePortion *= Math.Sqrt(Math.Sqrt(0.5 * (1.0 + (double)Policy.ConstructionMilitary)));
            double num = 0.0;
            int num2 = 0;
            double num3 = Math.Sqrt(Policy.InvasionOverkillFactor);
            if (TroopCanRecruitInfantry)
            {
                num += Policy.TroopRecruitInfantryLevel;
                num2++;
            }
            if (TroopCanRecruitArmored)
            {
                num += Policy.TroopRecruitArmorLevel * num3;
                num2++;
            }
            if (TroopCanRecruitArtillery)
            {
                num += Policy.TroopRecruitArtilleryLevel;
                num2++;
            }
            if (TroopCanRecruitSpecialForces)
            {
                num += Policy.TroopRecruitSpecialForcesLevel * num3;
                num2++;
            }
            num /= (double)num2;
            troopMaintenancePortion *= Math.Sqrt(num);
            troopMaintenancePortion *= Math.Sqrt(0.5 * (1.0 + Policy.TroopGarrisonLevel));
            shipMaintenancePortion = Math.Min(0.7, Math.Max(0.55, shipMaintenancePortion));
            troopMaintenancePortion = Math.Min(0.3, Math.Max(0.2, troopMaintenancePortion));
            facilityMaintenancePortion = Math.Min(0.15, Math.Max(0.08, facilityMaintenancePortion));
            double num4 = 0.17;
            if (annualIncome > 100000.0)
            {
                double num5 = Math.Min(1.0, (annualIncome - 100000.0) / 200000.0);
                num4 -= num5 * 0.07;
            }
            num4 *= Math.Sqrt(Policy.ResearchPriority);
            num4 = Math.Min(0.2, Math.Max(0.06, num4));
            double num6 = 1.0 - num4;
            double num7 = shipMaintenancePortion + troopMaintenancePortion + facilityMaintenancePortion;
            shipMaintenancePortion *= num6 / num7;
            troopMaintenancePortion *= num6 / num7;
            facilityMaintenancePortion *= num6 / num7;
        }

        private void ProjectForceStructure()
        {
            double num = CalculateAccurateAnnualIncome();
            CalculateStateExpenditureBalance(num, out var shipMaintenancePortion, out var _, out var _);
            double annualStateMaintenance = AnnualStateMaintenance;
            double num2 = num * shipMaintenancePortion;
            double num3 = Math.Max(1.0, num2 / annualStateMaintenance);
            _StateForceStructureProjections = new ForceStructureProjectionList();
            long currentStarDate = _Galaxy.CurrentStarDate;
            _ = _Galaxy.IntoleranceLevel;
            int num4 = BuiltObjects.TotalMobileMilitaryFirepower();
            int num5 = 0;
            double num6 = 1.0;
            for (int i = 0; i < DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = DiplomaticRelations[i];
                if (diplomaticRelation.OtherEmpire == _Galaxy.IndependentEmpire || diplomaticRelation.OtherEmpire.PirateEmpireBaseHabitat != null)
                {
                    continue;
                }
                EmpireEvaluation empireEvaluation = ObtainEmpireEvaluation(diplomaticRelation.OtherEmpire);
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    int num7 = empireEvaluation.Empire.BuiltObjects.TotalMobileMilitaryFirepower();
                    num5 += num7;
                    num6 += (double)num7 / (double)num4 * 0.6;
                    continue;
                }
                bool flag = false;
                switch (diplomaticRelation.Strategy)
                {
                    case DiplomaticStrategy.Conquer:
                    case DiplomaticStrategy.Defend:
                    case DiplomaticStrategy.DefendPlacate:
                    case DiplomaticStrategy.DefendUndermine:
                        flag = true;
                        break;
                }
                if (flag)
                {
                    int num8 = empireEvaluation.Empire.BuiltObjects.TotalMobileMilitaryFirepower();
                    num5 += num8;
                    num6 += (double)num8 / (double)num4 * 0.4;
                }
            }
            if (!CheckEmpireHasHyperDriveTech(this))
            {
                for (int j = 0; j < PirateRelations.Count; j++)
                {
                    PirateRelation pirateRelation = PirateRelations[j];
                    if (pirateRelation.OtherEmpire != _Galaxy.IndependentEmpire && pirateRelation.Type == PirateRelationType.None)
                    {
                        int num9 = 1;
                        if (pirateRelation.OtherEmpire != null && pirateRelation.OtherEmpire.BuiltObjects != null)
                        {
                            num9 = pirateRelation.OtherEmpire.BuiltObjects.TotalMobileMilitaryFirepower();
                        }
                        num5 += num9;
                        num6 += (double)num9 / (double)num4 * 0.6;
                    }
                }
            }
            double num10 = (double)Math.Max(1, num5) / (double)Math.Max(1, num4);
            if (num10 < 1.0)
            {
                num10 = 1.0;
            }
            num10 = Math.Max(num10, num6);
            num10 = Math.Min(4.0, Math.Max(1.0, num10));
            HabitatList habitatList = DetermineLargestColonyInEachSystem();
            double num11 = 80000.0;
            double num12 = 5.0;
            switch (Policy.ConstructionMilitary)
            {
                case 0:
                    if (Colonies.Count < 3)
                    {
                        num11 = 70000.0;
                        num12 = 10.0;
                    }
                    else if (Colonies.Count < 5)
                    {
                        num11 = 80000.0;
                        num12 = 8.0;
                    }
                    else if (Colonies.Count < 10)
                    {
                        num11 = 90000.0;
                        num12 = 6.5;
                    }
                    else if (Colonies.Count < 20)
                    {
                        num11 = 100000.0;
                        num12 = 5.5;
                    }
                    else
                    {
                        num11 = 110000.0;
                        num12 = 4.5;
                    }
                    break;
                case 1:
                    if (Colonies.Count < 3)
                    {
                        num11 = 50000.0;
                        num12 = 11.0;
                    }
                    else if (Colonies.Count < 5)
                    {
                        num11 = 57000.0;
                        num12 = 9.5;
                    }
                    else if (Colonies.Count < 10)
                    {
                        num11 = 65000.0;
                        num12 = 8.0;
                    }
                    else if (Colonies.Count < 20)
                    {
                        num11 = 70000.0;
                        num12 = 7.0;
                    }
                    else
                    {
                        num11 = 80000.0;
                        num12 = 6.0;
                    }
                    break;
                case 2:
                    if (Colonies.Count < 3)
                    {
                        num11 = 25000.0;
                        num12 = 14.0;
                    }
                    else if (Colonies.Count < 5)
                    {
                        num11 = 30000.0;
                        num12 = 11.5;
                    }
                    else if (Colonies.Count < 10)
                    {
                        num11 = 40000.0;
                        num12 = 10.0;
                    }
                    else if (Colonies.Count < 20)
                    {
                        num11 = 50000.0;
                        num12 = 9.0;
                    }
                    else
                    {
                        num11 = 60000.0;
                        num12 = 8.0;
                    }
                    break;
            }
            if (Colonies.Count == 1 && (!CheckEmpireHasHyperDriveTech(this) || !CheckEmpireHasColonizationTech(this)))
            {
                num12 *= 1.5;
            }
            double num13 = Math.Max(1.0, (double)TotalColonyStrategicValue / num11 * num10 * num3);
            int num14 = 0;
            num14 += BuiltObjects.CountBySubRole(BuiltObjectSubRole.Escort);
            num14 += BuiltObjects.CountBySubRole(BuiltObjectSubRole.Frigate);
            num14 += BuiltObjects.CountBySubRole(BuiltObjectSubRole.Destroyer);
            num14 += BuiltObjects.CountBySubRole(BuiltObjectSubRole.Cruiser);
            num14 += BuiltObjects.CountBySubRole(BuiltObjectSubRole.CapitalShip);
            num14 += BuiltObjects.CountBySubRole(BuiltObjectSubRole.Carrier);
            num14 += BuiltObjects.CountBySubRole(BuiltObjectSubRole.TroopTransport);
            double val = (double)Colonies.Count * num12 * num10;
            val = Math.Max(val, (double)num14 * num3);
            if (DominantRace != null && DominantRace.Expanding)
            {
                num13 = Math.Min(num13, val);
            }
            float num15 = Policy.ConstructionMilitaryEscort + Policy.ConstructionMilitaryFrigate + Policy.ConstructionMilitaryDestroyer + Policy.ConstructionMilitaryCruiser + Policy.ConstructionMilitaryCapitalShip + Policy.ConstructionMilitaryTroopTransport;
            double num16 = 1.0 / (double)num15 * 100.0;
            double num17 = Math.Max(1.0, num13 * (double)(Policy.ConstructionMilitaryEscort / 100f) * num16);
            double num18 = Math.Max(0.0, num13 * (double)(Policy.ConstructionMilitaryFrigate / 100f) * num16);
            double num19 = Math.Max(0.0, num13 * (double)(Policy.ConstructionMilitaryDestroyer / 100f) * num16);
            double num20 = Math.Max(0.0, num13 * (double)(Policy.ConstructionMilitaryCruiser / 100f) * num16);
            double num21 = Math.Max(0.0, num13 * (double)(Policy.ConstructionMilitaryCapitalShip / 100f) * num16);
            double num22 = Math.Max(0.0, num13 * (double)(Policy.ConstructionMilitaryTroopTransport / 100f) * num16);
            double num23 = Math.Max(0.0, num13 * (double)(Policy.ConstructionMilitaryCarrier / 100f) * num16);
            double val2 = Math.Max(0.0, num13 / 30.0);
            if (Colonies.Count < 5)
            {
                val2 = 0.0;
            }
            val2 = Math.Min(val2, 20.0);
            Design design = Designs.FindNewest(BuiltObjectSubRole.ResupplyShip);
            if (design != null && Capital != null && !CanBuildDesign(design))
            {
                val2 = 0.0;
            }
            design = Designs.FindNewest(BuiltObjectSubRole.CapitalShip);
            if (design != null && !CanBuildDesign(design))
            {
                num17 += num21 / 3.0;
                num18 += num21 / 3.0;
                num19 += num21 / 3.0;
                num21 = 0.0;
            }
            design = Designs.FindNewest(BuiltObjectSubRole.Cruiser);
            if (design != null && !CanBuildDesign(design))
            {
                num17 += num20 / 3.0;
                num18 += num20 / 3.0;
                num19 += num20 / 3.0;
                num20 = 0.0;
            }
            design = Designs.FindNewest(BuiltObjectSubRole.Carrier);
            if (design != null && !CanBuildDesign(design))
            {
                num17 += num23 / 3.0;
                num18 += num23 / 3.0;
                num19 += num23 / 3.0;
                num23 = 0.0;
            }
            design = Designs.FindNewest(BuiltObjectSubRole.Destroyer);
            if (design != null && !CanBuildDesign(design))
            {
                num17 += num19 / 2.0;
                num18 += num19 / 2.0;
                num19 = 0.0;
            }
            design = Designs.FindNewest(BuiltObjectSubRole.TroopTransport);
            if (design != null && !CanBuildDesign(design))
            {
                num22 = 0.0;
            }
            if (!CheckEmpireHasHyperDriveTech(this))
            {
                int num24 = BuiltObjects.CountCompletedBySubRole(BuiltObjectSubRole.ExplorationShip);
                int num25 = BuiltObjects.CountCompletedBySubRole(BuiltObjectSubRole.ConstructionShip);
                if (num24 <= 0 || num25 <= 0)
                {
                    num17 = 0.0;
                    num18 = 0.0;
                    num19 = 0.0;
                    num20 = 0.0;
                    num21 = 0.0;
                    num22 = 0.0;
                    num23 = 0.0;
                    val2 = 0.0;
                }
            }
            double num26 = 1.0;
            double num27 = 1.0;
            if (val2 > 0.0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.ResupplyShip, (int)val2, currentStarDate));
            }
            int num28 = (int)(num17 * num26);
            if (num28 > 0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.Escort, num28, currentStarDate));
            }
            num28 = (int)(num18 * num26);
            if (num28 > 0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.Frigate, num28, currentStarDate));
            }
            num28 = (int)(num19 * Math.Max(num26, num27));
            if (num28 > 0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.Destroyer, num28, currentStarDate));
            }
            num28 = (int)(num23 * Math.Max(num26, num27));
            if (num28 > 0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.Carrier, num28, currentStarDate));
            }
            num28 = (int)(num20 * num27);
            if (num28 > 0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.Cruiser, num28, currentStarDate));
            }
            num28 = ((habitatList.Count >= 3) ? ((int)(num21 * num27)) : 0);
            if (num28 > 0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.CapitalShip, num28, currentStarDate));
            }
            num28 = (int)(num22 * num27);
            if (num28 > 0)
            {
                _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.TroopTransport, num28, currentStarDate));
            }
            num28 = ((Colonies.Count > 1) ? (Colonies.Count + 6) : ((!CheckEmpireHasHyperDriveTech(this)) ? 2 : 7));
            if (num28 < 1)
            {
                num28 = 1;
            }
            if (num28 > 12)
            {
                num28 = 12;
            }
            num28 = (int)((double)num28 * Policy.ExplorationPriority);
            if (annualStateMaintenance < num2 * 0.95 && this != _Galaxy.PlayerEmpire && _Galaxy.DifficultyLevel > 1.0 && CheckEmpireHasHyperDriveTech(this))
            {
                num28 = (int)((double)num28 * _Galaxy.DifficultyLevel);
            }
            _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.ExplorationShip, num28, currentStarDate));
            num28 = (int)((double)Colonies.Count / 0.9);
            if (Colonies.Count > 1 && Colonies.Count <= 2)
            {
                num28 = 4;
            }
            else if (Colonies.Count > 2 && Colonies.Count <= 5)
            {
                num28 = 6;
            }
            if (num28 < 3)
            {
                num28 = 3;
            }
            if (Colonies.Count < 2 && !CheckEmpireHasHyperDriveTech(this))
            {
                num28 = 2;
            }
            num28 = Math.Min(num28, 12);
            if (annualStateMaintenance < num2 * 0.95 && this != _Galaxy.PlayerEmpire && _Galaxy.DifficultyLevel > 1.0 && CheckEmpireHasHyperDriveTech(this))
            {
                num28 = (int)((double)num28 * _Galaxy.DifficultyLevel);
            }
            _StateForceStructureProjections.Add(new ForceStructureProjection(BuiltObjectSubRole.ConstructionShip, num28, currentStarDate));
            double num29 = CalculateSupportabilityFactor(_StateForceStructureProjections);
            if (!(num29 < 1.0))
            {
                return;
            }
            int num30 = 0;
            for (int k = 0; k < _StateForceStructureProjections.Count; k++)
            {
                ForceStructureProjection forceStructureProjection = _StateForceStructureProjections[k];
                BuiltObjectSubRole subRole = forceStructureProjection.SubRole;
                if (subRole == BuiltObjectSubRole.ExplorationShip || subRole == BuiltObjectSubRole.ConstructionShip)
                {
                    if (BuildFactor < 1.0)
                    {
                        num30 = forceStructureProjection.Amount;
                        num30 = (forceStructureProjection.Amount = Math.Max(1, (int)((double)num30 * num29)));
                    }
                }
                else
                {
                    num30 = forceStructureProjection.Amount;
                    num30 = (forceStructureProjection.Amount = Math.Max(1, (int)((double)num30 * num29)));
                }
            }
        }

        public double CalculateSpareAnnualRevenueComplete()
        {
            return CalculateSpareAnnualRevenue(AnnualStateMaintenance);
        }

        public double CalculateSpareAnnualRevenue(double newCosts)
        {
            double num = CalculateAccurateAnnualIncome();
            num -= Math.Max(AnnualTroopMaintenanceIncludeRecruiting, MinimumTroopSpending);
            num -= AnnualSubjugationTribute;
            num -= AnnualPirateProtection;
            num -= ThisYearsStateFuelCosts;
            num -= AnnualFacilityMaintenance;
            return num - newCosts;
        }

        private double CalculateSupportabilityFactor(ForceStructureProjectionList forceProjections)
        {
            double num = CalculateSpareAnnualRevenue(0.0);
            double annualSupportCosts = 0.0;
            ForceStructureProjectionList forceStructureProjectionList = CurrentStateForceStructure(out annualSupportCosts);
            ForceStructureProjectionList forceStructure = forceProjections.Diff(forceStructureProjectionList);
            double num2 = EstimateForceStructureSupportCost(forceStructure);
            double num3 = annualSupportCosts + num2;
            double num4 = StateMoney / num3;
            double num5 = 1.0;
            double num6 = Galaxy.AllowableYearsMaintenanceFromCashOnHand;
            if (CheckAtWar())
            {
                num6 = 2.0;
            }
            if (num4 < num6)
            {
                num *= 0.95;
                num5 = num / num3;
            }
            if (BuildFactor <= 0.0)
            {
                BuildFactor = 1.0;
            }
            return num5 * BuildFactor;
        }

        private double EstimateForceStructureSupportCost(ForceStructureProjection projection)
        {
            double num = EstimateForceStructureSupportCostSingleItem(projection);
            return (double)projection.Amount * num;
        }

        public double CalculateSupportCost(Design design)
        {
            double result = 0.0;
            if (design != null)
            {
                double num = design.CalculateCurrentPurchasePrice(_Galaxy) / Galaxy.ShipMarkupFactor + 1.0;
                double num2 = Galaxy.ShipMaintenanceCostPerSizeUnit * (double)design.Size;
                double num3 = num + num2;
                double num4 = design.MaintenanceSavings * num3;
                double num5 = 1.0;
                if (GovernmentAttributes != null)
                {
                    num5 = GovernmentAttributes.MaintenanceCosts;
                }
                if (PirateEmpireBaseHabitat != null)
                {
                    double d = (double)_Galaxy.BaseTechCost / 120000.0;
                    d = Math.Sqrt(d);
                    num5 *= Galaxy.PirateShipMaintenanceFactor * d;
                    switch (design.SubRole)
                    {
                        case BuiltObjectSubRole.SmallFreighter:
                        case BuiltObjectSubRole.MediumFreighter:
                        case BuiltObjectSubRole.LargeFreighter:
                        case BuiltObjectSubRole.PassengerShip:
                        case BuiltObjectSubRole.GasMiningShip:
                        case BuiltObjectSubRole.MiningShip:
                            num5 = 0.0;
                            break;
                    }
                }
                result = (num3 - num4) * num5;
            }
            return result;
        }

        private double EstimateForceStructureSupportCostSingleItem(ForceStructureProjection projection)
        {
            double result = 0.0;
            Design design = Designs.FindNewestCanBuild(projection.SubRole);
            if (design != null)
            {
                result = CalculateSupportCost(design);
            }
            return result;
        }

        private double EstimateForceStructureSupportCost(ForceStructureProjectionList forceStructure)
        {
            double num = 0.0;
            foreach (ForceStructureProjection item in forceStructure)
            {
                num += EstimateForceStructureSupportCost(item);
            }
            return num;
        }

        public void SetColonyTaxRate(Habitat colony, bool atWar)
        {
            double num = 1.0;
            if (DominantRace != null)
            {
                num += (1.0 - ((double)DominantRace.FriendlinessLevel + (double)DominantRace.IntelligenceLevel) / 200.0) / 2.0;
            }
            double num2 = 0.15;
            double num3 = colony.TaxRate;
            if (num3 <= 0.0)
            {
                num3 = num2 * num;
            }
            double num4 = 16.0;
            int num5 = 1;
            if (colony.Population != null)
            {
                num5 = ((colony.Population.TotalAmount > 2000000000) ? Policy.ColonyTaxRateLargeColony : ((colony.Population.TotalAmount <= 200000000) ? Policy.ColonyTaxRateSmallColony : Policy.ColonyTaxRateMediumColony));
            }
            double num6 = -1.0;
            switch (num5)
            {
                case 0:
                    num6 = 0.0;
                    break;
                case 1:
                    num4 = 25.0;
                    break;
                case 2:
                    num4 = 16.0;
                    break;
                case 3:
                    num4 = 10.0;
                    break;
            }
            if (atWar && Policy.ColonyTaxRateIncreaseWhenAtWar && colony.Population.TotalAmount > 500000000)
            {
                num4 = 8.0;
            }
            int num7 = 0;
            if (colony.Characters != null && colony.Characters.Count > 0)
            {
                num7 += colony.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ColonyHappiness);
            }
            if (colony.Empire != null && colony.Empire.Leader != null)
            {
                num7 += colony.Empire.Leader.ColonyHappiness;
            }
            _ = (double)num7 / 100.0;
            if (colony.Population != null)
            {
                double empireApprovalRating = colony.EmpireApprovalRating;
                if (empireApprovalRating < num4 && colony.TaxRate <= 0f)
                {
                    num3 = 0.0;
                }
                else if (empireApprovalRating > num4 || colony.TaxRate > 0f)
                {
                    double num8 = empireApprovalRating - num4;
                    double num9 = colony.TaxApproval - num8;
                    num9 *= -1.0;
                    double num10 = colony.CalculateUnmodifiedApproval(num8, subtractAdditives: false);
                    num3 = (double)colony.TaxRate + num10 / 100.0;
                }
                if (num6 >= 0.0)
                {
                    num3 = num6;
                }
                _ = colony.EmpireApprovalRating;
                _ = 0.0;
                if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
                {
                    num3 = 1.0;
                }
            }
            num3 = ((GovernmentAttributes == null || GovernmentAttributes.SpecialFunctionCode != 1) ? Math.Max(0.0, Math.Min(0.5, num3)) : Math.Max(0.0, num3));
            num3 = Math.Round(num3, 2);
            if (double.IsNaN(num3))
            {
                num3 = 0.0;
            }
            colony.TaxRate = (float)num3;
            colony.RecalculateAnnualTaxRevenue();
        }

        public void RecalculateColonyTaxRevenues()
        {
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && habitat.Empire == this)
                {
                    habitat.RecalculateAnnualTaxRevenue();
                }
            }
        }

        private void ReviewGovernmentEffects(double timePassed)
        {
            if (GovernmentAttributes != null && GovernmentAttributes.SpecialFunctionCode == 1)
            {
                double num = timePassed / (double)Galaxy.RealSecondsInGalacticYear * 0.075;
                double val = _EconomyEfficiency - num;
                _EconomyEfficiency = Math.Max(0.35, Math.Min(1.0, val));
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    habitat.RecalculateAnnualTaxRevenue();
                }
            }
            else if (_EconomyEfficiency != 1.0)
            {
                double val2 = timePassed / (double)Galaxy.RealSecondsInGalacticYear * 0.25;
                val2 = Math.Min(val2, Math.Abs(_EconomyEfficiency - 1.0));
                if (_EconomyEfficiency > 1.0)
                {
                    val2 *= -1.0;
                }
                double val3 = _EconomyEfficiency + val2;
                _EconomyEfficiency = Math.Max(0.5, Math.Min(2.0, val3));
                for (int j = 0; j < Colonies.Count; j++)
                {
                    Habitat habitat2 = Colonies[j];
                    habitat2.RecalculateAnnualTaxRevenue();
                }
            }
        }

        private void CheckChangeGovernment()
        {
            if (this == _Galaxy.PlayerEmpire)
            {
                return;
            }
            GovernmentAttributesList bySpecialFunctionCode = _Galaxy.Governments.GetBySpecialFunctionCode(1);
            List<int> list = new List<int>();
            for (int i = 0; i < bySpecialFunctionCode.Count; i++)
            {
                list.Add(bySpecialFunctionCode[i].GovernmentId);
            }
            int num = -1;
            for (int j = 0; j < list.Count; j++)
            {
                if (AllowableGovernmentTypes.Contains(list[j]))
                {
                    num = list[j];
                    break;
                }
            }
            if (_EconomyEfficiency < 0.9)
            {
                if (GovernmentAttributes == null || GovernmentAttributes.SpecialFunctionCode != 1)
                {
                    return;
                }
                double num2 = 1.0;
                if (DominantRace != null)
                {
                    num2 = (double)DominantRace.IntelligenceLevel / 100.0;
                    num2 *= num2;
                }
                double num3 = num2 * 0.8;
                if (!(_EconomyEfficiency < num3))
                {
                    return;
                }
                int num4 = -1;
                GovernmentAttributesList governmentAttributesList = DetermineMostSuitableGovermentTypes(DominantRace, AllowableGovernmentTypes);
                for (int k = 0; k < governmentAttributesList.Count; k++)
                {
                    if (!list.Contains(num4) && num4 >= 0)
                    {
                        break;
                    }
                    num4 = governmentAttributesList[k].GovernmentId;
                }
                double val = 1.0 / _EconomyEfficiency;
                val = Math.Max(1.0, Math.Min(3.0, val));
                HaveRevolution(DominantRace, num4, val);
                ReviewTaxes();
            }
            else
            {
                if (GovernmentAttributes == null || GovernmentAttributes.SpecialFunctionCode == 1 || num < 0 || !(_EconomyEfficiency >= 1.0))
                {
                    return;
                }
                int militaryStrength = 0;
                EmpireList empireList = DetermineEmpiresAtWarWith(out militaryStrength);
                if (empireList.Count > 0 && militaryStrength > MilitaryPotency)
                {
                    double num5 = CalculateAnnualCashflow();
                    if (num5 < 5000.0 && StateMoney < 50000.0)
                    {
                        HaveRevolution(DominantRace, num, 1.0);
                    }
                }
            }
        }

        public void ReviewTaxes()
        {
            bool atWar = CheckAtWar();
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null && habitat.Empire == this)
                {
                    if (PirateEmpireBaseHabitat != null && habitat.CheckColonyRevenueFromPirateControl(this))
                    {
                        habitat.TaxRate = 0f;
                    }
                    else
                    {
                        SetColonyTaxRate(habitat, atWar);
                    }
                }
            }
        }

        public ForceStructureProjectionList CurrentPrivateForceStructure(out double annualSupportCosts)
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            ForceStructureProjectionList forceStructureProjectionList = new ForceStructureProjectionList();
            annualSupportCosts = 0.0;
            for (int i = 0; i < PrivateBuiltObjects.Count; i++)
            {
                BuiltObject builtObject = PrivateBuiltObjects[i];
                ForceStructureProjection forceStructureProjection = forceStructureProjectionList.GetBySubRole(builtObject.SubRole);
                if (forceStructureProjection == null)
                {
                    forceStructureProjection = new ForceStructureProjection(builtObject.SubRole, 0, currentStarDate);
                    forceStructureProjectionList.Add(forceStructureProjection);
                }
                forceStructureProjection.Amount++;
                annualSupportCosts += builtObject.AnnualSupportCost;
            }
            double num = annualSupportCosts * _ShipMaintenanceSavings;
            annualSupportCosts -= num;
            return forceStructureProjectionList;
        }

        public ForceStructureProjectionList CurrentStateForceStructure(out double annualSupportCosts)
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            ForceStructureProjectionList forceStructureProjectionList = new ForceStructureProjectionList();
            annualSupportCosts = 0.0;
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                ForceStructureProjection forceStructureProjection = forceStructureProjectionList.GetBySubRole(builtObject.SubRole);
                if (forceStructureProjection == null)
                {
                    forceStructureProjection = new ForceStructureProjection(builtObject.SubRole, 0, currentStarDate);
                    forceStructureProjectionList.Add(forceStructureProjection);
                }
                forceStructureProjection.Amount++;
                annualSupportCosts += builtObject.AnnualSupportCost;
            }
            double num = annualSupportCosts * _ShipMaintenanceSavings;
            annualSupportCosts -= num;
            return forceStructureProjectionList;
        }

        private HabitatList DetermineLargestColonyInEachSystem()
        {
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = DetermineEmpireSystems(this);
            for (int i = 0; i < habitatList2.Count; i++)
            {
                Habitat habitat = habitatList2[i];
                HabitatList habitatList3 = new HabitatList();
                for (int j = 0; j < Colonies.Count; j++)
                {
                    Habitat habitat2 = Colonies[j];
                    if (habitat2.SystemIndex == habitat.SystemIndex)
                    {
                        habitatList3.Add(habitat2);
                    }
                }
                if (habitatList3.Count <= 0)
                {
                    continue;
                }
                Habitat habitat3 = habitatList3[0];
                foreach (Habitat item in habitatList3)
                {
                    if (item.Population.TotalAmount > habitat3.Population.TotalAmount)
                    {
                        habitat3 = item;
                    }
                }
                habitatList.Add(habitat3);
            }
            return habitatList;
        }

        public bool CanBuildDesignTech(Design design)
        {
            ComponentList distinctComponentList = design.Components.GetDistinctComponentList();
            for (int i = 0; i < distinctComponentList.Count; i++)
            {
                Component component = distinctComponentList[i];
                if (!Research.CheckComponentResearched(component))
                {
                    return false;
                }
            }
            if (design.SubRole == BuiltObjectSubRole.Carrier)
            {
                return _CanBuildCarriers;
            }
            if (design.SubRole == BuiltObjectSubRole.ResupplyShip)
            {
                return _CanBuildResupplyShips;
            }
            return true;
        }

        public bool CheckDesignWithinConstructionSize(Design design)
        {
            return CheckDesignWithinConstructionSize(design, null);
        }

        public bool CheckDesignWithinConstructionSize(Design design, Habitat colony)
        {
            int num = 0;
            if (design.Role == BuiltObjectRole.Base)
            {
                num = ((design.SubRole != BuiltObjectSubRole.GasMiningStation && design.SubRole != BuiltObjectSubRole.GenericBase && design.SubRole != BuiltObjectSubRole.MiningStation && design.SubRole != BuiltObjectSubRole.EnergyResearchStation && design.SubRole != BuiltObjectSubRole.WeaponsResearchStation && design.SubRole != BuiltObjectSubRole.HighTechResearchStation && design.SubRole != BuiltObjectSubRole.MonitoringStation && design.SubRole != BuiltObjectSubRole.DefensiveBase && design.SubRole != BuiltObjectSubRole.ResortBase) ? int.MaxValue : ((colony == null || colony.Empire != this || colony.Population == null || colony.Population.TotalAmount <= 0) ? MaximumConstructionSizeBase(design.SubRole) : int.MaxValue));
            }
            else if (design.IsPlanetDestroyer)
            {
                num = MaximumConstructionSizeBase();
            }
            else
            {
                num = MaximumConstructionSize(design.SubRole);
                if (design.SubRole == BuiltObjectSubRole.ColonyShip || design.SubRole == BuiltObjectSubRole.ConstructionShip || design.SubRole == BuiltObjectSubRole.ResupplyShip)
                {
                    num = MaximumConstructionSizeBase(design.SubRole);
                }
            }
            if (design.Size > num)
            {
                return false;
            }
            return true;
        }

        public bool CheckDesignInUseForConstructionOrRetrofits(Design design)
        {
            if (design != null)
            {
                if (ConstructionShips != null)
                {
                    for (int i = 0; i < ConstructionShips.Count; i++)
                    {
                        BuiltObject builtObject = ConstructionShips[i];
                        if (builtObject != null && builtObject.Mission != null && builtObject.Mission.Design != null && builtObject.Mission.Design == design)
                        {
                            return true;
                        }
                    }
                }
                if (ConstructionYards != null)
                {
                    for (int j = 0; j < ConstructionYards.Count; j++)
                    {
                        BuiltObject builtObject2 = ConstructionYards[j];
                        if (builtObject2 == null || builtObject2.ConstructionQueue == null)
                        {
                            continue;
                        }
                        if (builtObject2.ConstructionQueue.ConstructionWaitQueue != null)
                        {
                            for (int k = 0; k < builtObject2.ConstructionQueue.ConstructionWaitQueue.Count; k++)
                            {
                                if (builtObject2.ConstructionQueue.ConstructionWaitQueue[k] != null)
                                {
                                    if (builtObject2.ConstructionQueue.ConstructionWaitQueue[k].Design != null && builtObject2.ConstructionQueue.ConstructionWaitQueue[k].Design == design)
                                    {
                                        return true;
                                    }
                                    if (builtObject2.ConstructionQueue.ConstructionWaitQueue[k].RetrofitDesign != null && builtObject2.ConstructionQueue.ConstructionWaitQueue[k].RetrofitDesign == design)
                                    {
                                        return true;
                                    }
                                }
                            }
                        }
                        if (builtObject2.ConstructionQueue.ConstructionYards == null)
                        {
                            continue;
                        }
                        for (int l = 0; l < builtObject2.ConstructionQueue.ConstructionYards.Count; l++)
                        {
                            if (builtObject2.ConstructionQueue.ConstructionYards[l] != null && builtObject2.ConstructionQueue.ConstructionYards[l].ShipUnderConstruction != null)
                            {
                                if (builtObject2.ConstructionQueue.ConstructionYards[l].ShipUnderConstruction.Design != null && builtObject2.ConstructionQueue.ConstructionYards[l].ShipUnderConstruction.Design == design)
                                {
                                    return true;
                                }
                                if (builtObject2.ConstructionQueue.ConstructionYards[l].ShipUnderConstruction.RetrofitDesign != null && builtObject2.ConstructionQueue.ConstructionYards[l].ShipUnderConstruction.RetrofitDesign == design)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
                if (BuiltObjects != null)
                {
                    for (int m = 0; m < BuiltObjects.Count; m++)
                    {
                        if (BuiltObjects[m] != null)
                        {
                            if (BuiltObjects[m].RetrofitDesign != null && BuiltObjects[m].RetrofitDesign == design)
                            {
                                return true;
                            }
                            if (BuiltObjects[m].Mission != null && BuiltObjects[m].Mission.Design != null && BuiltObjects[m].Mission.Design == design)
                            {
                                return true;
                            }
                        }
                    }
                }
                if (PrivateBuiltObjects != null)
                {
                    for (int n = 0; n < PrivateBuiltObjects.Count; n++)
                    {
                        if (PrivateBuiltObjects[n] != null)
                        {
                            if (PrivateBuiltObjects[n].RetrofitDesign != null && PrivateBuiltObjects[n].RetrofitDesign == design)
                            {
                                return true;
                            }
                            if (PrivateBuiltObjects[n].Mission != null && PrivateBuiltObjects[n].Mission.Design != null && PrivateBuiltObjects[n].Mission.Design == design)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        public void ReasonCannotBuildDesign(Design design, Habitat colony, out bool missingTech, out bool sizeTooBig)
        {
            missingTech = CanBuildDesignTech(design);
            sizeTooBig = CheckDesignWithinConstructionSize(design, colony);
        }

        public bool CanBuildDesign(Design design)
        {
            return CanBuildDesign(design, includeSizeCheck: true);
        }

        public bool CanBuildDesign(Design design, bool includeSizeCheck)
        {
            return CanBuildDesign(design, includeSizeCheck, null);
        }

        public bool CanBuildDesign(Design design, bool includeSizeCheck, Habitat colony)
        {
            bool reasonCannotBuildMissingTech = false;
            bool reasonCannotBuildSizeTooBig = false;
            return CanBuildDesign(design, includeSizeCheck, colony, out reasonCannotBuildMissingTech, out reasonCannotBuildSizeTooBig);
        }

        public bool CanBuildDesign(Design design, bool includeSizeCheck, Habitat colony, out bool reasonCannotBuildMissingTech, out bool reasonCannotBuildSizeTooBig)
        {
            reasonCannotBuildMissingTech = false;
            reasonCannotBuildSizeTooBig = false;
            if (!CanBuildDesignTech(design))
            {
                reasonCannotBuildMissingTech = true;
                return false;
            }
            if (includeSizeCheck && !CheckDesignWithinConstructionSize(design, colony))
            {
                reasonCannotBuildSizeTooBig = true;
                return false;
            }
            return true;
        }

        public bool CheckDesignComponentsResearched(Design design)
        {
            for (int i = 0; i < design.Components.Count; i++)
            {
                Component component = design.Components[i];
                if (!Research.CheckComponentResearched(component))
                {
                    return false;
                }
            }
            return true;
        }

        public bool CheckThreatIsEnemy(BuiltObject threat)
        {
            if (threat != null && threat.Empire != null)
            {
                if (threat.Empire == this)
                {
                    return false;
                }
                if (threat.Empire == _Galaxy.IndependentEmpire)
                {
                    return false;
                }
                if (PirateEmpireBaseHabitat != null || threat.Empire.PirateEmpireBaseHabitat != null)
                {
                    PirateRelation pirateRelation = ObtainPirateRelation(threat.Empire);
                    if (pirateRelation.Type != PirateRelationType.Protection)
                    {
                        return true;
                    }
                }
                else
                {
                    DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(threat.Empire);
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool CheckSafeToBuildAtLocation(Habitat habitat)
        {
            if (habitat != null)
            {
                if (habitat.IsBlockaded)
                {
                    return false;
                }
                if (SystemVisibility != null && habitat.SystemIndex >= 0 && habitat.SystemIndex < SystemVisibility.Count)
                {
                    SystemVisibility systemVisibility = SystemVisibility[habitat.SystemIndex];
                    if (systemVisibility != null && systemVisibility.Threats != null && systemVisibility.Threats.Count > 0)
                    {
                        for (int i = 0; i < systemVisibility.Threats.Count; i++)
                        {
                            BuiltObject builtObject = systemVisibility.Threats[i];
                            if (builtObject == null || builtObject.HasBeenDestroyed || (builtObject.FirepowerRaw <= 0 && builtObject.FighterCapacity <= 0))
                            {
                                continue;
                            }
                            if (builtObject.Role == BuiltObjectRole.Base)
                            {
                                double num = _Galaxy.CalculateDistanceSquared(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                                if (num < (double)builtObject.MaximumWeaponsRange && CheckThreatIsEnemy(builtObject))
                                {
                                    return false;
                                }
                            }
                            else if (builtObject.TopSpeed > 0 && builtObject.Role == BuiltObjectRole.Military && CheckThreatIsEnemy(builtObject))
                            {
                                if (builtObject.WarpSpeed > 0)
                                {
                                    return false;
                                }
                                double num2 = _Galaxy.CalculateDistanceSquared(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                                if (num2 < 8000.0)
                                {
                                    return false;
                                }
                            }
                        }
                    }
                }
                if (_Galaxy.Systems != null && habitat.SystemIndex >= 0 && habitat.SystemIndex < _Galaxy.Systems.Count)
                {
                    SystemInfo systemInfo = _Galaxy.Systems[habitat.SystemIndex];
                    if (systemInfo != null && systemInfo.Creatures != null && systemInfo.Creatures.Count > 0)
                    {
                        for (int j = 0; j < systemInfo.Creatures.Count; j++)
                        {
                            Creature creature = systemInfo.Creatures[j];
                            if (creature != null && !creature.HasBeenDestroyed && _Galaxy.CheckWithinCreatureAttackRange(habitat.Xpos, habitat.Ypos, creature))
                            {
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        }

        public bool CanBuildBuiltObject(BuiltObject builtObject)
        {
            return CanBuildBuiltObject(builtObject, null);
        }

        public bool CanBuildBuiltObject(BuiltObject builtObject, Habitat colony)
        {
            if (colony != null)
            {
                if (builtObject.Role == BuiltObjectRole.Base)
                {
                    return true;
                }
                if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip)
                {
                    if (builtObject.Design.Size <= MaximumConstructionSizeBase(builtObject.Design.SubRole))
                    {
                        if (colony.Population != null && colony.Population.TotalAmount >= Galaxy.BuildColonyShipPopulationRequirement)
                        {
                            return true;
                        }
                        return false;
                    }
                    return false;
                }
                if (builtObject.SubRole == BuiltObjectSubRole.ConstructionShip || builtObject.SubRole == BuiltObjectSubRole.ResupplyShip)
                {
                    if (builtObject.Design.Size <= MaximumConstructionSizeBase(builtObject.Design.SubRole))
                    {
                        return true;
                    }
                    return false;
                }
                return false;
            }
            if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip || builtObject.SubRole == BuiltObjectSubRole.ConstructionShip || builtObject.SubRole == BuiltObjectSubRole.ResupplyShip)
            {
                return false;
            }
            if (PirateEmpireBaseHabitat == null && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
            {
                return false;
            }
            int num = 0;
            if (builtObject.Role != BuiltObjectRole.Base)
            {
                num = ((!builtObject.Design.IsPlanetDestroyer) ? MaximumConstructionSize(builtObject.SubRole) : MaximumConstructionSizeBase());
            }
            else
            {
                num = MaximumConstructionSizeBase(builtObject.SubRole);
                if (PirateEmpireBaseHabitat != null && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
                {
                    num = int.MaxValue;
                }
            }
            if (builtObject.Design.Size <= num)
            {
                if (builtObject.SubRole == BuiltObjectSubRole.Carrier)
                {
                    return _CanBuildCarriers;
                }
                if (builtObject.SubRole == BuiltObjectSubRole.ResupplyShip)
                {
                    return _CanBuildResupplyShips;
                }
                return true;
            }
            return false;
        }

        public int MaximumConstructionSize()
        {
            return MaximumConstructionSize(BuiltObjectSubRole.Undefined);
        }

        public int MaximumConstructionSize(BuiltObjectSubRole shipSubRole)
        {
            if (DominantRace != null)
            {
                switch (shipSubRole)
                {
                    case BuiltObjectSubRole.SmallFreighter:
                    case BuiltObjectSubRole.MediumFreighter:
                    case BuiltObjectSubRole.LargeFreighter:
                    case BuiltObjectSubRole.PassengerShip:
                    case BuiltObjectSubRole.GasMiningShip:
                    case BuiltObjectSubRole.MiningShip:
                        return (int)((double)_BaseMaximumConstructionSize * DominantRace.CivilianShipSizeFactor * BaconRace.CivilianShipSizeMultiplier(this));
                    case BuiltObjectSubRole.Escort:
                    case BuiltObjectSubRole.Frigate:
                    case BuiltObjectSubRole.Destroyer:
                    case BuiltObjectSubRole.Cruiser:
                    case BuiltObjectSubRole.CapitalShip:
                    case BuiltObjectSubRole.TroopTransport:
                    case BuiltObjectSubRole.ResupplyShip:
                    case BuiltObjectSubRole.ExplorationShip:
                        return (int)((double)_BaseMaximumConstructionSize * DominantRace.MilitaryShipSizeFactor * BaconRace.MilitaryShipSizeMultiplier(this));
                    case BuiltObjectSubRole.Carrier:
                        return (int)((double)_BaseMaximumConstructionSize * 1.5 * DominantRace.MilitaryShipSizeFactor * BaconRace.MilitaryShipSizeMultiplier(this));
                    default:
                        return _BaseMaximumConstructionSize;
                }
            }
            return _BaseMaximumConstructionSize;
        }

        public int MaximumConstructionSizeBase()
        {
            return MaximumConstructionSizeBase(BuiltObjectSubRole.Undefined);
        }

        public int MaximumConstructionSizeBase(BuiltObjectSubRole baseSubRole)
        {
            int num = _BaseMaximumConstructionSize * 3;
            BuiltObjectSubRole builtObjectSubRole = baseSubRole;
            if (builtObjectSubRole == BuiltObjectSubRole.ResupplyShip)
            {
                if (DominantRace != null)
                {
                    return (int)((double)num * DominantRace.MilitaryShipSizeFactor);
                }
                return num;
            }
            return num;
        }

        public string CivilityDescription()
        {
            string result = string.Empty;
            if (CivilityRating < -50.0)
            {
                result = TextResolver.GetText("Diabolical");
            }
            else if (CivilityRating >= -50.0 && CivilityRating <= -30.0)
            {
                result = TextResolver.GetText("Evil");
            }
            else if (CivilityRating >= -30.0 && CivilityRating <= -20.0)
            {
                result = TextResolver.GetText("Notorious");
            }
            else if (CivilityRating >= -20.0 && CivilityRating <= -10.0)
            {
                result = TextResolver.GetText("Nasty");
            }
            else if (CivilityRating >= -10.0 && CivilityRating <= -1.0)
            {
                result = TextResolver.GetText("Dubious");
            }
            else if (CivilityRating >= -1.0 && CivilityRating <= 4.0)
            {
                result = TextResolver.GetText("Satisfactory");
            }
            else if (CivilityRating >= 4.0 && CivilityRating <= 10.0)
            {
                result = TextResolver.GetText("Respectable");
            }
            else if (CivilityRating >= 10.0 && CivilityRating <= 16.0)
            {
                result = TextResolver.GetText("Admired");
            }
            else if (CivilityRating >= 16.0 && CivilityRating <= 22.0)
            {
                result = TextResolver.GetText("Noble");
            }
            else if (CivilityRating > 22.0)
            {
                result = TextResolver.GetText("Heroic");
            }
            return result;
        }

        private bool CheckAttackTemptingTarget(StellarObject target)
        {
            int num = 95 + Galaxy.Rnd.Next(0, 15);
            if (DominantRace.AggressionLevel >= num && Galaxy.Rnd.Next(0, 3) == 1)
            {
                double val = 0.6 + (double)(DominantRace.CautionLevel - 100) / 50.0;
                val = Math.Min(1.2, Math.Max(0.01, val));
                if (target.Empire != null && (double)WeightedMilitaryPotency > (double)target.Empire.WeightedMilitaryPotency * val)
                {
                    if (target is Habitat)
                    {
                        Habitat habitat = (Habitat)target;
                        int minimumTroopStrength = Galaxy.DetermineRequiredTroopStrength(this, habitat);
                        ShipGroup shipGroup = FindNearestAvailableFleet(habitat.Xpos, habitat.Ypos, BuiltObjectMissionPriority.Low, 0, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: true, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, minimumTroopStrength);
                        if (shipGroup != null)
                        {
                            shipGroup.AssignMission(BuiltObjectMissionType.Attack, habitat, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                            return true;
                        }
                    }
                    else if (target is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)target;
                        int overallStrength = builtObject.CalculateOverallStrengthFactor();
                        if (CheckSystemVisible(builtObject.NearestSystemStar))
                        {
                            overallStrength = CalculateDefendingStrength(builtObject);
                        }
                        ShipGroup shipGroup2 = FindNearestAvailableFleet(builtObject.Xpos, builtObject.Ypos, BuiltObjectMissionPriority.Low, overallStrength, FleetPosture.Attack, mustBeWithinFuelRange: true, 0.1, mustBeAutomated: true, shouldBeSmallFleet: false, gatherPointMustBeBlank: false, mustBeWithinPostureRange: true, 0);
                        if (shipGroup2 != null)
                        {
                            BuiltObjectMissionType missionType = DetermineDestroyOrCaptureTarget(shipGroup2, builtObject);
                            shipGroup2.AssignMission(missionType, builtObject, null, BuiltObjectMissionPriority.Normal, manuallyAssigned: false);
                            return true;
                        }
                        for (int i = 0; i < BuiltObjects.Count; i++)
                        {
                            BuiltObject builtObject2 = BuiltObjects[i];
                            if (builtObject2.IsAutoControlled && builtObject2.ShipGroup == null && builtObject2.BuiltAt == null && builtObject2.UnbuiltOrDamagedComponentCount == 0 && (builtObject2.SubRole == BuiltObjectSubRole.Destroyer || builtObject2.SubRole == BuiltObjectSubRole.Cruiser || builtObject2.SubRole == BuiltObjectSubRole.CapitalShip) && (builtObject2.Mission == null || builtObject2.Mission.Type == BuiltObjectMissionType.Undefined || builtObject2.Mission.Priority == BuiltObjectMissionPriority.Low))
                            {
                                BuiltObjectMissionType missionType2 = DetermineDestroyOrCaptureTarget(builtObject2, builtObject, attackingAsGroup: false);
                                builtObject2.AssignMission(missionType2, builtObject, null, BuiltObjectMissionPriority.Normal);
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        private bool CheckTemptingTargetColony(Habitat colony)
        {
            if (IsObjectVisibleToThisEmpire(colony))
            {
                int num = DetermineColonizationValue(colony);
                if (num > 1000)
                {
                    int num2 = colony.Troops.TotalDefendStrength + colony.TroopsToRecruit.TotalDefendStrength;
                    if (num2 < colony.TroopLevelMinimum * 100)
                    {
                        int num3 = 0;
                        if (colony.BasesAtHabitat != null)
                        {
                            foreach (BuiltObject item in colony.BasesAtHabitat)
                            {
                                if (item.IsFunctional)
                                {
                                    num3 += item.FirepowerRaw;
                                }
                            }
                        }
                        Design design = _Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
                        int num4 = 100;
                        if (design != null)
                        {
                            num4 = design.FirepowerRaw;
                        }
                        if (num3 < num4 && CheckAttackTemptingTarget(colony))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private bool CheckTemptingTargetShip(BuiltObject constructionShip)
        {
            if (IsObjectVisibleToThisEmpire(constructionShip) && constructionShip.Mission != null && constructionShip.Mission.Type == BuiltObjectMissionType.Repair)
            {
                BuiltObject targetBuiltObject = constructionShip.Mission.TargetBuiltObject;
                if (targetBuiltObject != null && targetBuiltObject.BuiltAt == constructionShip)
                {
                    bool flag = false;
                    bool flag2 = false;
                    GalaxyLocationList galaxyLocationList = _Galaxy.DetermineGalaxyLocationsAtPoint(targetBuiltObject.Xpos, targetBuiltObject.Ypos);
                    foreach (GalaxyLocation item in galaxyLocationList)
                    {
                        if (item.Type == GalaxyLocationType.DebrisField)
                        {
                            flag2 = true;
                        }
                        else if (item.Type == GalaxyLocationType.PlanetDestroyer)
                        {
                            flag = true;
                        }
                    }
                    if ((flag2 || flag) && CheckAttackTemptingTarget(targetBuiltObject))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private void CheckTemptingTargetsInEmpire(Empire empire)
        {
            if (empire == this)
            {
                return;
            }
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
            if (diplomaticRelation.Type == DiplomaticRelationType.NotMet || diplomaticRelation.Type == DiplomaticRelationType.War || (diplomaticRelation.Strategy != DiplomaticStrategy.Conquer && diplomaticRelation.Strategy != DiplomaticStrategy.Punish))
            {
                return;
            }
            bool flag = false;
            if (empire.Colonies.Count > 0)
            {
                int num = Galaxy.Rnd.Next(0, empire.Colonies.Count);
                if (!flag)
                {
                    for (int i = num; i < empire.Colonies.Count; i++)
                    {
                        if (CheckTemptingTargetColony(empire.Colonies[i]))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                if (!flag)
                {
                    for (int j = 0; j < num; j++)
                    {
                        if (CheckTemptingTargetColony(empire.Colonies[j]))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
            }
            if (empire.ConstructionShips.Count <= 0)
            {
                return;
            }
            int num2 = Galaxy.Rnd.Next(0, empire.ConstructionShips.Count);
            if (!flag)
            {
                for (int k = num2; k < empire.ConstructionShips.Count; k++)
                {
                    if (CheckTemptingTargetShip(empire.ConstructionShips[k]))
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (flag)
            {
                return;
            }
            for (int l = 0; l < num2; l++)
            {
                if (CheckTemptingTargetShip(empire.ConstructionShips[l]))
                {
                    flag = true;
                    break;
                }
            }
        }

        private void CheckTemptingTargets()
        {
            if (this != _Galaxy.PlayerEmpire && _ControlMilitaryAttacks == AutomationLevel.FullyAutomated)
            {
                int num = Galaxy.Rnd.Next(0, _Galaxy.Empires.Count);
                for (int i = num; i < _Galaxy.Empires.Count; i++)
                {
                    CheckTemptingTargetsInEmpire(_Galaxy.Empires[i]);
                }
                for (int j = 0; j < num; j++)
                {
                    CheckTemptingTargetsInEmpire(_Galaxy.Empires[j]);
                }
            }
        }

        private void DesignResearchStation(IndustryType industryType)
        {
            Design design = null;
            ComponentType componentType = ComponentType.Undefined;
            switch (industryType)
            {
                case IndustryType.Energy:
                    design = _EnergyResearchStation;
                    componentType = ComponentType.LabsEnergyLab;
                    break;
                case IndustryType.HighTech:
                    design = _HighTechResearchStation;
                    componentType = ComponentType.LabsHighTechLab;
                    break;
                case IndustryType.Weapon:
                    design = _WeaponsResearchStation;
                    componentType = ComponentType.LabsWeaponsLab;
                    break;
            }
            Component component = Research.EvaluateDesiredComponent(componentType, ShipDesignFocus.Balanced);
            if (component == null)
            {
                return;
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = (long)(Galaxy.MinimumDesignReviewIntervalYears * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            long num2 = 0L;
            if (design != null)
            {
                num2 = design.DateCreated + num;
            }
            if (currentStarDate <= num2)
            {
                return;
            }
            Design design2 = GenerateResearchStationDesign(currentStarDate, componentType);
            if (design == null || !design2.IsEquivalent(design))
            {
                if (design != null)
                {
                    design.IsObsolete = true;
                }
                switch (industryType)
                {
                    case IndustryType.Energy:
                        _EnergyResearchStation = design2;
                        break;
                    case IndustryType.HighTech:
                        _HighTechResearchStation = design2;
                        break;
                    case IndustryType.Weapon:
                        _WeaponsResearchStation = design2;
                        break;
                }
                Designs.Add(design2);
            }
        }

        public Design GenerateResearchStationDesign(long designDate, ComponentType labComponentType)
        {
            DesignSpecification designSpecification = new DesignSpecification(BuiltObjectSubRole.GenericBase, mobile: false);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.EnergyCollector, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, labComponentType, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationRecreationCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.Armor, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.Shields, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponBeam, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorStealth, 1));
            string name = string.Empty;
            switch (labComponentType)
            {
                case ComponentType.LabsEnergyLab:
                    name = TextResolver.GetText("Energy Research Station");
                    break;
                case ComponentType.LabsHighTechLab:
                    name = TextResolver.GetText("High Tech Research Station");
                    break;
                case ComponentType.LabsWeaponsLab:
                    name = TextResolver.GetText("Weapons Research Station");
                    break;
            }
            Design design = new Design(name);
            design.Role = designSpecification.Role;
            design.SubRole = designSpecification.SubRole;
            design.ImageScalingType = designSpecification.ImageScalingMode;
            design.ImageScalingFactor = designSpecification.ImageScalingFactor;
            design = PlaceComponentsOnDesign(design, designSpecification, null);
            design.Stance = BuiltObjectStance.AttackIfAttacked;
            design.FleeWhen = BuiltObjectFleeWhen.Never;
            design.TacticsStrongerShips = BattleTactics.PointBlank;
            design.TacticsWeakerShips = BattleTactics.PointBlank;
            design.TacticsInvasion = InvasionTactics.DoNotInvade;
            int num = DesignPictureFamilyIndex;
            if (DominantRace != null && PirateEmpireBaseHabitat != null)
            {
                num = DominantRace.DesignPictureFamilyIndexPirates;
                if (num < 0)
                {
                    num = DominantRace.DesignPictureFamilyIndex;
                }
            }
            design.Name = name;
            design.DateCreated = designDate;
            design.Empire = this;
            design.PictureRef = ShipImageHelper.StandardShipImageStartIndex + num * ShipImageHelper.ShipSetImageCount + (int)(Galaxy.ResolveLegacySubRole(designSpecification.SubRole) - 1);
            design.Role = designSpecification.Role;
            design.SubRole = designSpecification.SubRole;
            design.ReDefine();
            return design;
        }

        private void DesignMonitoringStation()
        {
            Component component = Research.EvaluateDesiredComponent(ComponentType.SensorLongRange, ShipDesignFocus.Balanced);
            if (component == null)
            {
                return;
            }
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = (long)(Galaxy.MinimumDesignReviewIntervalYears * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            long num2 = 0L;
            if (_MonitoringStationCurrentDesign != null)
            {
                num2 = _MonitoringStationCurrentDesign.DateCreated + num;
            }
            if (currentStarDate <= num2)
            {
                return;
            }
            Design design = GenerateMonitoringStationDesign(currentStarDate);
            if (_MonitoringStationCurrentDesign == null || !design.IsEquivalent(_MonitoringStationCurrentDesign))
            {
                if (_MonitoringStationCurrentDesign != null)
                {
                    _MonitoringStationCurrentDesign.IsObsolete = true;
                }
                _MonitoringStationCurrentDesign = design;
                Designs.Add(design);
            }
        }

        public DesignSpecification GetMonitoringStationDesignSpec()
        {
            DesignSpecification designSpecification = new DesignSpecification(BuiltObjectSubRole.GenericBase, mobile: false);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.EnergyCollector, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationRecreationCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorLongRange, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.Armor, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.Shields, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponBeam, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorStealth, 1));
            return designSpecification;
        }

        public Design GenerateMonitoringStationDesign(long designDate)
        {
            DesignSpecification monitoringStationDesignSpec = GetMonitoringStationDesignSpec();
            string text = TextResolver.GetText("Monitoring Station");
            Design design = new Design(text);
            design.Role = monitoringStationDesignSpec.Role;
            design.SubRole = monitoringStationDesignSpec.SubRole;
            design.ImageScalingType = monitoringStationDesignSpec.ImageScalingMode;
            design.ImageScalingFactor = monitoringStationDesignSpec.ImageScalingFactor;
            design = PlaceComponentsOnDesign(design, monitoringStationDesignSpec, null);
            design.Stance = BuiltObjectStance.AttackIfAttacked;
            design.FleeWhen = BuiltObjectFleeWhen.Never;
            design.TacticsStrongerShips = BattleTactics.PointBlank;
            design.TacticsWeakerShips = BattleTactics.PointBlank;
            design.TacticsInvasion = InvasionTactics.DoNotInvade;
            int num = DesignPictureFamilyIndex;
            if (DominantRace != null && PirateEmpireBaseHabitat != null)
            {
                num = DominantRace.DesignPictureFamilyIndexPirates;
                if (num < 0)
                {
                    num = DominantRace.DesignPictureFamilyIndex;
                }
            }
            design.Name = text;
            design.DateCreated = designDate;
            design.Empire = this;
            design.PictureRef = ShipImageHelper.StandardShipImageStartIndex + num * ShipImageHelper.ShipSetImageCount + (int)(Galaxy.ResolveLegacySubRole(monitoringStationDesignSpec.SubRole) - 1);
            design.Role = monitoringStationDesignSpec.Role;
            design.SubRole = monitoringStationDesignSpec.SubRole;
            design.ReDefine();
            return design;
        }

        public Design GenerateDefenseBaseDesign(long designDate)
        {
            DesignSpecification designSpecification = new DesignSpecification(BuiltObjectSubRole.GenericBase, mobile: false);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.EnergyCollector, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 15));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 16));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponTorpedo, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponArea, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.DamageControl, 1));
            string text = TextResolver.GetText("Defensive Base");
            Design design = new Design(text);
            design.Role = designSpecification.Role;
            design.SubRole = designSpecification.SubRole;
            design.ImageScalingType = designSpecification.ImageScalingMode;
            design.ImageScalingFactor = designSpecification.ImageScalingFactor;
            design = PlaceComponentsOnDesign(design, designSpecification, null);
            design.Stance = BuiltObjectStance.AttackEnemies;
            design.FleeWhen = BuiltObjectFleeWhen.Never;
            design.TacticsStrongerShips = BattleTactics.PointBlank;
            design.TacticsWeakerShips = BattleTactics.PointBlank;
            design.TacticsInvasion = InvasionTactics.DoNotInvade;
            int num = DesignPictureFamilyIndex;
            if (DominantRace != null && PirateEmpireBaseHabitat != null)
            {
                num = DominantRace.DesignPictureFamilyIndexPirates;
                if (num < 0)
                {
                    num = DominantRace.DesignPictureFamilyIndex;
                }
            }
            design.Name = text;
            design.DateCreated = designDate;
            design.Empire = this;
            design.PictureRef = ShipImageHelper.StandardShipImageStartIndex + num * ShipImageHelper.ShipSetImageCount + 20;
            design.Role = designSpecification.Role;
            design.SubRole = designSpecification.SubRole;
            design.ReDefine();
            return design;
        }

        private void DesignDefensiveBase()
        {
            long currentStarDate = _Galaxy.CurrentStarDate;
            long num = (long)(Galaxy.MinimumDesignReviewIntervalYears * (double)Galaxy.RealSecondsInGalacticYear * 1000.0);
            long num2 = 0L;
            if (_DefenseBaseDesign != null)
            {
                num2 = _DefenseBaseDesign.DateCreated + num;
            }
            if (currentStarDate <= num2)
            {
                return;
            }
            Design design = GenerateDefenseBaseDesign(currentStarDate);
            if (_DefenseBaseDesign == null || !design.IsEquivalent(_DefenseBaseDesign))
            {
                if (_DefenseBaseDesign != null)
                {
                    _DefenseBaseDesign.IsObsolete = true;
                }
                _DefenseBaseDesign = design;
                Designs.Add(design);
            }
        }

        private void BuildDefensiveBases()
        {
            Design design = Designs.FindNewestCanBuildFullEvaluate(BuiltObjectSubRole.DefensiveBase, Capital);
            if (design == null)
            {
                return;
            }
            HabitatList habitatList = new HabitatList();
            StellarObjectList stellarObjectList = ResolveLocationsToDefend();
            StellarObjectList stellarObjectList2 = new StellarObjectList();
            for (int i = 0; i < stellarObjectList.Count; i++)
            {
                if (!(stellarObjectList[i] is Habitat))
                {
                    stellarObjectList2.Add(stellarObjectList[i]);
                }
            }
            for (int j = 0; j < stellarObjectList2.Count; j++)
            {
                stellarObjectList.Remove(stellarObjectList2[j]);
            }
            for (int k = 0; k < Colonies.Count; k++)
            {
                Habitat habitat = Colonies[k];
                int strategicValue = habitat.StrategicValue;
                if (strategicValue > 250000 && !stellarObjectList.Contains(habitat))
                {
                    stellarObjectList.Add(habitat);
                }
            }
            for (int l = 0; l < stellarObjectList.Count; l++)
            {
                if (!(stellarObjectList[l] is Habitat))
                {
                    continue;
                }
                Habitat habitat2 = (Habitat)stellarObjectList[l];
                int num = 0;
                for (int m = 0; m < habitat2.BasesAtHabitat.Count; m++)
                {
                    num = ((habitat2.BasesAtHabitat[m].UnbuiltOrDamagedComponentCount <= 0) ? (num + habitat2.BasesAtHabitat[m].FirepowerRaw) : (num + habitat2.BasesAtHabitat[m].Design.FirepowerRaw));
                }
                int num2 = (int)((double)habitat2.EstimatedDefensiveForceRequired(atWar: false) * 1.2);
                bool flag = true;
                if (DominantRace != null && !DominantRace.Expanding)
                {
                    flag = false;
                }
                if (flag)
                {
                    num2 = Math.Min(num2, 2000);
                    if (Colonies.Count < 6 || SpacePorts.Count < 3)
                    {
                        num2 = (int)((double)num2 / 1.7);
                    }
                    else if (Colonies.Count < 12 || SpacePorts.Count < 5)
                    {
                        num2 = (int)((double)num2 / 1.3);
                    }
                }
                int num3 = 1;
                if (habitat2.ConstructionQueue != null)
                {
                    num3 = habitat2.ConstructionQueue.ConstructionSpeed;
                }
                int num4 = habitat2.BasesAtHabitat.CountBySubRole(BuiltObjectSubRole.DefensiveBase);
                if (num < num2 && num4 < 4 && num3 >= 100 && (_Galaxy.DetermineSpacePortAtColony(habitat2) != null || Colonies.Count > 1))
                {
                    habitatList.Add(habitat2);
                }
            }
            if (habitatList.Count <= 0)
            {
                return;
            }
            double num5 = design.CalculateCurrentPurchasePrice(_Galaxy);
            double num6 = CalculateSupportCost(design);
            List<CargoList> list = new List<CargoList>();
            HabitatList habitatList2 = new HabitatList();
            CargoList resourcesToOrder = null;
            int refusalCount = 0;
            for (int n = 0; n < habitatList.Count; n++)
            {
                Habitat habitat3 = habitatList[n];
                bool flag2 = true;
                if (habitat3.ConstructionQueue != null && habitat3.ConstructionQueue.ConstructionWaitQueue.Count > 0)
                {
                    flag2 = false;
                }
                if (!flag2)
                {
                    continue;
                }
                double num7 = CalculateSpareAnnualRevenueComplete();
                if (!(num6 <= num7) || !(num5 <= StateMoney))
                {
                    continue;
                }
                design.BuildCount++;
                BuiltObject builtObject = new BuiltObject(design, _Galaxy.GenerateBuiltObjectName(design), _Galaxy);
                builtObject.PurchasePrice = num5;
                if (CheckTaskAuthorized(_ControlStateConstruction, ref refusalCount, GenerateAutomationMessageDefensiveBase(habitat3, design), habitat3, AdvisorMessageType.BuildOneOff, design, null))
                {
                    if (habitat3.ConstructionQueue != null && habitat3.ConstructionQueue.AddBuiltObjectToConstruct(builtObject))
                    {
                        string[] array = new string[5]
                        {
                        TextResolver.GetText("Ship SubRole DefensiveBase"),
                        TextResolver.GetText("Weapons Platform"),
                        TextResolver.GetText("Defense Platform"),
                        TextResolver.GetText("Defense Battery"),
                        TextResolver.GetText("Orbital Battery")
                        };
                        builtObject.Name = habitat3.Name + " " + array[Galaxy.Rnd.Next(0, array.Length)];
                        double offsetX = 0.0;
                        double offsetY = 0.0;
                        DetermineOrbitalBaseLocation(habitat3, out offsetX, out offsetY);
                        builtObject.Heading = _Galaxy.SelectRandomHeading();
                        builtObject.TargetHeading = builtObject.Heading;
                        AddBuiltObjectToGalaxy(builtObject, habitat3, offsetLocationFromParent: false, isStateOwned: true, (int)offsetX, (int)offsetY);
                        StateMoney -= num5;
                        PirateEconomy.PerformExpense(num5, PirateExpenseType.Construction, _Galaxy.CurrentStarDate);
                        builtObject.BuiltAt = habitat3;
                        ProcureConstructionComponents(builtObject, habitat3, out resourcesToOrder);
                        list.Add(resourcesToOrder);
                        habitatList2.Add(habitat3);
                    }
                    else
                    {
                        design.BuildCount--;
                    }
                }
                else
                {
                    design.BuildCount--;
                }
            }
            HabitatList habitatList3 = new HabitatList();
            foreach (Habitat item in habitatList2)
            {
                if (!habitatList3.Contains(item))
                {
                    habitatList3.Add(item);
                }
            }
            foreach (Habitat item2 in habitatList3)
            {
                CargoList cargoList = new CargoList();
                for (int num8 = 0; num8 < habitatList2.Count; num8++)
                {
                    if (habitatList2[num8] != item2)
                    {
                        continue;
                    }
                    foreach (Cargo item3 in list[num8])
                    {
                        cargoList.Add(item3);
                    }
                }
                foreach (Cargo item4 in cargoList)
                {
                    CreateOrder(item2, item4.CommodityResource, item4.Amount, isState: false, OrderType.ConstructionShortage);
                }
            }
        }

        public void DetermineOrbitalBaseLocation(Habitat colony, out double offsetX, out double offsetY)
        {
            offsetX = 0.0;
            offsetY = 0.0;
            double num = 400.0;
            if (colony.BasesAtHabitat != null && colony.BasesAtHabitat.Count > 0 && colony.BasesAtHabitat.Count >= 3)
            {
                num /= Math.Sqrt(colony.BasesAtHabitat.Count - 2);
            }
            bool flag = true;
            int num2 = 0;
            while (flag && num2 < 100)
            {
                flag = false;
                double num3 = Galaxy.Rnd.NextDouble() * Math.PI;
                if (Galaxy.Rnd.Next(0, 2) == 1)
                {
                    num3 *= -1.0;
                }
                double num4 = (double)(colony.Diameter / 2) + 150.0 + Galaxy.Rnd.NextDouble() * 100.0;
                offsetX = Math.Cos(num3) * num4;
                offsetY = Math.Sin(num3) * num4;
                for (int i = 0; i < colony.BasesAtHabitat.Count; i++)
                {
                    BuiltObject builtObject = colony.BasesAtHabitat[i];
                    double num5 = _Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, colony.Xpos, colony.Ypos);
                    if (num5 > 150.0)
                    {
                        double num6 = _Galaxy.CalculateDistance(builtObject.Xpos, builtObject.Ypos, colony.Xpos + offsetX, colony.Ypos + offsetY);
                        if (num6 < num)
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                num2++;
            }
        }

        public bool CheckDesignComponentsAvailable(BuiltObjectRole role, BuiltObjectSubRole subRole)
        {
            List<ComponentType> list = new List<ComponentType>();
            List<ComponentCategoryType> list2 = new List<ComponentCategoryType>();
            if (Research != null && Research.ResearchedComponents != null)
            {
                list.Add(ComponentType.ComputerCommandCenter);
                list.Add(ComponentType.StorageFuel);
                list.Add(ComponentType.HabitationLifeSupport);
                list.Add(ComponentType.HabitationHabModule);
                list2.Add(ComponentCategoryType.Reactor);
                switch (role)
                {
                    case BuiltObjectRole.Military:
                    case BuiltObjectRole.Exploration:
                    case BuiltObjectRole.Freight:
                    case BuiltObjectRole.Passenger:
                    case BuiltObjectRole.Colony:
                    case BuiltObjectRole.Build:
                    case BuiltObjectRole.Resource:
                        list.Add(ComponentType.EngineMainThrust);
                        list.Add(ComponentType.EngineVectoring);
                        break;
                    case BuiltObjectRole.Base:
                        list.Add(ComponentType.StorageDockingBay);
                        break;
                }
                switch (role)
                {
                    case BuiltObjectRole.Build:
                        list.Add(ComponentType.StorageDockingBay);
                        list.Add(ComponentType.StorageCargo);
                        list.Add(ComponentType.ConstructionBuild);
                        list.Add(ComponentType.ManufacturerEnergyPlant);
                        list.Add(ComponentType.ManufacturerHighTechPlant);
                        list.Add(ComponentType.ManufacturerWeaponsPlant);
                        break;
                    case BuiltObjectRole.Colony:
                        list.Add(ComponentType.HabitationColonization);
                        break;
                    case BuiltObjectRole.Exploration:
                        list.Add(ComponentType.SensorResourceProfileSensor);
                        break;
                    case BuiltObjectRole.Passenger:
                        list.Add(ComponentType.StoragePassenger);
                        break;
                    case BuiltObjectRole.Freight:
                        list.Add(ComponentType.StorageCargo);
                        break;
                    case BuiltObjectRole.Resource:
                        list.Add(ComponentType.StorageCargo);
                        list2.Add(ComponentCategoryType.Extractor);
                        break;
                }
                switch (subRole)
                {
                    case BuiltObjectSubRole.TroopTransport:
                        list.Add(ComponentType.StorageTroop);
                        break;
                    case BuiltObjectSubRole.Carrier:
                        list.Add(ComponentType.FighterBay);
                        break;
                    case BuiltObjectSubRole.ResupplyShip:
                        list.Add(ComponentType.ExtractorGasExtractor);
                        list.Add(ComponentType.StorageCargo);
                        list.Add(ComponentType.StorageDockingBay);
                        break;
                    case BuiltObjectSubRole.GasMiningStation:
                        list.Add(ComponentType.ExtractorGasExtractor);
                        list.Add(ComponentType.ComputerCommerceCenter);
                        list.Add(ComponentType.StorageCargo);
                        break;
                    case BuiltObjectSubRole.MiningStation:
                        list.Add(ComponentType.ExtractorMine);
                        list.Add(ComponentType.ComputerCommerceCenter);
                        list.Add(ComponentType.StorageCargo);
                        break;
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                        list.Add(ComponentType.ComputerCommerceCenter);
                        list.Add(ComponentType.ConstructionBuild);
                        list.Add(ComponentType.ManufacturerEnergyPlant);
                        list.Add(ComponentType.ManufacturerHighTechPlant);
                        list.Add(ComponentType.ManufacturerWeaponsPlant);
                        break;
                    case BuiltObjectSubRole.EnergyResearchStation:
                        list.Add(ComponentType.LabsEnergyLab);
                        break;
                    case BuiltObjectSubRole.WeaponsResearchStation:
                        list.Add(ComponentType.LabsWeaponsLab);
                        break;
                    case BuiltObjectSubRole.HighTechResearchStation:
                        list.Add(ComponentType.LabsHighTechLab);
                        break;
                    case BuiltObjectSubRole.MonitoringStation:
                        list.Add(ComponentType.SensorLongRange);
                        break;
                    case BuiltObjectSubRole.ResortBase:
                        list.Add(ComponentType.ComputerCommerceCenter);
                        list.Add(ComponentType.HabitationRecreationCenter);
                        break;
                    case BuiltObjectSubRole.GenericBase:
                        list.Add(ComponentType.StorageCargo);
                        break;
                }
                for (int i = 0; i < list2.Count; i++)
                {
                    ComponentCategoryType componentCategoryType = list2[i];
                    bool flag = false;
                    for (int j = 0; j < Research.ResearchedComponents.Count; j++)
                    {
                        Component component = Research.ResearchedComponents[j];
                        if (component.Category == componentCategoryType)
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag)
                    {
                        return false;
                    }
                }
                for (int k = 0; k < list.Count; k++)
                {
                    ComponentType componentType = list[k];
                    bool flag2 = false;
                    for (int l = 0; l < Research.ResearchedComponents.Count; l++)
                    {
                        Component component2 = Research.ResearchedComponents[l];
                        if (component2.Type == componentType)
                        {
                            flag2 = true;
                            break;
                        }
                    }
                    if (!flag2)
                    {
                        return false;
                    }
                }
                switch (subRole)
                {
                    case BuiltObjectSubRole.Escort:
                    case BuiltObjectSubRole.Frigate:
                    case BuiltObjectSubRole.Destroyer:
                    case BuiltObjectSubRole.Cruiser:
                    case BuiltObjectSubRole.CapitalShip:
                    case BuiltObjectSubRole.DefensiveBase:
                        {
                            bool flag3 = false;
                            for (int m = 0; m < Research.ResearchedComponents.Count; m++)
                            {
                                Component component3 = Research.ResearchedComponents[m];
                                if (component3.Category == ComponentCategoryType.WeaponBeam || component3.Category == ComponentCategoryType.WeaponTorpedo || component3.Category == ComponentCategoryType.WeaponArea || component3.Category == ComponentCategoryType.WeaponIon || component3.Category == ComponentCategoryType.WeaponSuperArea || component3.Category == ComponentCategoryType.WeaponSuperBeam || component3.Category == ComponentCategoryType.WeaponSuperTorpedo || component3.Type == ComponentType.WeaponAreaGravity || component3.Type == ComponentType.WeaponGravityBeam)
                                {
                                    flag3 = true;
                                    break;
                                }
                            }
                            if (!flag3)
                            {
                                return false;
                            }
                            break;
                        }
                }
            }
            return true;
        }

        public ComponentImprovement SelectPreferredSuperWeapon(List<ComponentCategoryType> techCategories, List<ComponentType> techTypes, bool mustBePlanetDestroyer)
        {
            ComponentImprovement componentImprovement = null;
            ComponentImprovementList componentImprovementList = new ComponentImprovementList();
            ComponentImprovement componentImprovement2 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponSuperBeam, ShipDesignFocus.Balanced);
            if (componentImprovement2 != null && (!mustBePlanetDestroyer || componentImprovement2.IsPlanetDestroyer))
            {
                componentImprovementList.Add(componentImprovement2);
            }
            ComponentImprovement componentImprovement3 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponSuperArea, ShipDesignFocus.Balanced);
            if (componentImprovement3 != null && (!mustBePlanetDestroyer || componentImprovement3.IsPlanetDestroyer))
            {
                componentImprovementList.Add(componentImprovement3);
            }
            ComponentImprovement componentImprovement4 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponSuperPhaser, ShipDesignFocus.Balanced);
            if (componentImprovement4 != null && (!mustBePlanetDestroyer || componentImprovement4.IsPlanetDestroyer))
            {
                componentImprovementList.Add(componentImprovement4);
            }
            ComponentImprovement componentImprovement5 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponSuperRailGun, ShipDesignFocus.Balanced);
            if (componentImprovement5 != null && (!mustBePlanetDestroyer || componentImprovement5.IsPlanetDestroyer))
            {
                componentImprovementList.Add(componentImprovement5);
            }
            ComponentImprovement componentImprovement6 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponSuperTorpedo, ShipDesignFocus.Balanced);
            if (componentImprovement6 != null && (!mustBePlanetDestroyer || componentImprovement6.IsPlanetDestroyer))
            {
                componentImprovementList.Add(componentImprovement6);
            }
            ComponentImprovement componentImprovement7 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponSuperMissile, ShipDesignFocus.Balanced);
            if (componentImprovement7 != null && (!mustBePlanetDestroyer || componentImprovement7.IsPlanetDestroyer))
            {
                componentImprovementList.Add(componentImprovement7);
            }
            if (componentImprovementList.Count > 0)
            {
                if (componentImprovement4 != null && (techTypes.Contains(ComponentType.WeaponPhaser) || techTypes.Contains(ComponentType.WeaponSuperPhaser)) && (!mustBePlanetDestroyer || componentImprovement4.IsPlanetDestroyer))
                {
                    componentImprovement = componentImprovement4;
                }
                else if (componentImprovement5 != null && (techTypes.Contains(ComponentType.WeaponRailGun) || techTypes.Contains(ComponentType.WeaponSuperRailGun)) && (!mustBePlanetDestroyer || componentImprovement5.IsPlanetDestroyer))
                {
                    componentImprovement = componentImprovement5;
                }
                else if (componentImprovement7 != null && (techTypes.Contains(ComponentType.WeaponMissile) || techTypes.Contains(ComponentType.WeaponSuperMissile)) && (!mustBePlanetDestroyer || componentImprovement7.IsPlanetDestroyer))
                {
                    componentImprovement = componentImprovement7;
                }
                else if (componentImprovement6 != null && (techTypes.Contains(ComponentType.WeaponTorpedo) || techTypes.Contains(ComponentType.WeaponSuperTorpedo)) && (!mustBePlanetDestroyer || componentImprovement6.IsPlanetDestroyer))
                {
                    componentImprovement = componentImprovement6;
                }
                else if (componentImprovement2 != null && (techTypes.Contains(ComponentType.WeaponBeam) || techTypes.Contains(ComponentType.WeaponSuperBeam)) && (!mustBePlanetDestroyer || componentImprovement2.IsPlanetDestroyer))
                {
                    componentImprovement = componentImprovement2;
                }
                else if (componentImprovement3 != null && (techTypes.Contains(ComponentType.WeaponAreaDestruction) || techTypes.Contains(ComponentType.WeaponSuperArea)) && (!mustBePlanetDestroyer || componentImprovement3.IsPlanetDestroyer))
                {
                    componentImprovement = componentImprovement3;
                }
                if (componentImprovement == null)
                {
                    int index = Galaxy.Rnd.Next(0, componentImprovementList.Count);
                    componentImprovement = componentImprovementList[index];
                }
            }
            return componentImprovement;
        }

        private Design PlaceComponentsOnDesign(Design design, DesignSpecification designSpec, ComponentImprovementList torpedoWeapons)
        {
            int maxShipSize = MaximumConstructionSize(design.SubRole);
            int maxBaseSize = MaximumConstructionSizeBase(design.SubRole);
            return PlaceComponentsOnDesign(design, designSpec, torpedoWeapons, maxShipSize, maxBaseSize, null, 0.0);
        }

        private Design PlaceComponentsOnDesign(Design design, DesignSpecification designSpec, ComponentImprovementList torpedoWeapons, double techAdvanceAmount)
        {
            int maxShipSize = MaximumConstructionSize(design.SubRole);
            int maxBaseSize = MaximumConstructionSizeBase(design.SubRole);
            return PlaceComponentsOnDesign(design, designSpec, torpedoWeapons, maxShipSize, maxBaseSize, null, techAdvanceAmount);
        }

        public Design PlaceComponentsOnDesign(Design design, DesignSpecification designSpec, ComponentImprovementList torpedoWeapons, int maxShipSize, int maxBaseSize, Design mostRecentDesign)
        {
            return PlaceComponentsOnDesign(design, designSpec, torpedoWeapons, maxShipSize, maxBaseSize, mostRecentDesign, 0.0);
        }

        public Design PlaceComponentsOnDesign(Design design, DesignSpecification designSpec, ComponentImprovementList torpedoWeapons, int maxShipSize, int maxBaseSize, Design mostRecentDesign, double techAdvanceAmount)
        {
            ShipDesignFocus designFocus = ShipDesignFocus.Balanced;
            List<ComponentCategoryType> techFocusCategories = new List<ComponentCategoryType>();
            List<ComponentType> techFocusTypes = new List<ComponentType>();
            Galaxy.ResolveTechFocuses(this, out techFocusCategories, out techFocusTypes);
            if (DominantRace != null && Policy != null)
            {
                designFocus = Policy.ResearchDesignOverallFocus;
            }
            if (torpedoWeapons == null)
            {
                torpedoWeapons = Galaxy.GenerateOrderedComponentImprovementList(ComponentCategoryType.WeaponTorpedo, 1);
            }
            double energyConsumed = 0.0;
            double num = 0.0;
            ComponentImprovement componentImprovement = Research.EvaluateDesiredComponentImprovement(ComponentCategoryType.Reactor, designFocus);
            ComponentImprovement componentImprovement2 = Research.EvaluateDesiredComponentImprovement(ComponentType.StorageFuel, designFocus);
            ComponentImprovement componentImprovement3 = Research.EvaluateDesiredComponentImprovement(ComponentCategoryType.HyperDrive, designFocus);
            ComponentImprovement componentImprovement4 = Research.EvaluateDesiredComponentImprovement(ComponentType.EnergyCollector, designFocus);
            ComponentImprovement componentImprovement5 = Research.EvaluateDesiredComponentImprovement(ComponentType.HabitationHabModule, designFocus);
            ComponentImprovement componentImprovement6 = Research.EvaluateDesiredComponentImprovement(ComponentType.HabitationLifeSupport, designFocus);
            ComponentImprovement componentImprovement7 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponMissile, designFocus);
            ComponentImprovement componentImprovement8 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponPhaser, designFocus);
            ComponentImprovement componentImprovement9 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponRailGun, designFocus);
            ComponentImprovement componentImprovement10 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponGravityBeam, designFocus);
            ComponentImprovement componentImprovement11 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponAreaGravity, designFocus);
            ComponentImprovement componentImprovement12 = Research.EvaluateDesiredComponentImprovement(ComponentType.WeaponAreaDestruction, designFocus);
            ComponentImprovement componentImprovement13 = Research.EvaluateDesiredComponentImprovement(ComponentCategoryType.WeaponTorpedo, designFocus);
            ComponentImprovement componentImprovement14 = Research.EvaluateDesiredComponentImprovement(ComponentCategoryType.WeaponBeam, designFocus);
            if (techAdvanceAmount > 0.0)
            {
                Component component = Component.EvaluateLatest(ComponentCategoryType.Reactor, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.StorageFuel, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement2 = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.HabitationHabModule, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement5 = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.HabitationLifeSupport, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement6 = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.WeaponMissile, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement7 = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.WeaponPhaser, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement8 = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.WeaponRailGun, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement9 = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.WeaponGravityBeam, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement10 = Research.ResolveImprovedComponentValues(component);
                }
                component = Component.EvaluateLatest(ComponentType.WeaponAreaGravity, techAdvanceAmount);
                if (component != null)
                {
                    componentImprovement11 = Research.ResolveImprovedComponentValues(component);
                }
            }
            int recommendedReactorComponentCount = 0;
            int num2 = 0;
            int num3 = 0;
            int num4 = 0;
            int num5 = 0;
            int num6 = 0;
            int num7 = 0;
            int num8 = 0;
            int num9 = 0;
            int num10 = 0;
            int num11 = 0;
            int num12 = 0;
            int num13 = 0;
            for (int i = 0; i < designSpec.ComponentRules.Count; i++)
            {
                DesignSpecificationComponentRule designSpecificationComponentRule = designSpec.ComponentRules[i];
                ComponentImprovement componentImprovement15 = null;
                if (!(techAdvanceAmount > 0.0))
                {
                    componentImprovement15 = ((designSpecificationComponentRule.ComponentType == ComponentType.Undefined) ? Research.EvaluateDesiredComponentImprovement(designSpecificationComponentRule.ComponentCategory, designFocus) : Research.EvaluateDesiredComponentImprovement(designSpecificationComponentRule.ComponentType, designFocus));
                }
                else if (designSpecificationComponentRule.ComponentType != 0)
                {
                    Component component2 = Component.EvaluateLatest(designSpecificationComponentRule.ComponentType, techAdvanceAmount);
                    if (component2 != null)
                    {
                        componentImprovement15 = Research.ResolveImprovedComponentValues(component2);
                    }
                }
                else
                {
                    Component component3 = Component.EvaluateLatest(designSpecificationComponentRule.ComponentCategory, techAdvanceAmount);
                    if (component3 != null)
                    {
                        componentImprovement15 = Research.ResolveImprovedComponentValues(component3);
                    }
                }
                int num14 = 1;
                ComponentType componentType = designSpecificationComponentRule.ComponentType;
                if (componentType == ComponentType.WeaponGravityBeam)
                {
                    if (componentImprovement15 != null && componentImprovement15.ImprovedComponent != null)
                    {
                        componentType = componentImprovement15.ImprovedComponent.Type;
                        if (componentType == ComponentType.WeaponGravityBeam)
                        {
                            if (componentImprovement9 != null && componentImprovement15.TechLevel < componentImprovement9.TechLevel - num14)
                            {
                                componentImprovement15 = componentImprovement9;
                            }
                            if (componentImprovement8 != null && componentImprovement15.TechLevel < componentImprovement8.TechLevel - num14)
                            {
                                componentImprovement15 = componentImprovement8;
                            }
                            if (componentImprovement14 != null && componentImprovement15.TechLevel < componentImprovement14.TechLevel - num14)
                            {
                                componentImprovement15 = componentImprovement14;
                            }
                        }
                    }
                    if (componentImprovement15 == null)
                    {
                        if (componentImprovement10 != null)
                        {
                            componentImprovement15 = componentImprovement10;
                        }
                        else if (componentImprovement14 != null)
                        {
                            componentImprovement15 = componentImprovement14;
                        }
                        else if (componentImprovement8 != null)
                        {
                            componentImprovement15 = componentImprovement8;
                        }
                        else if (componentImprovement9 != null)
                        {
                            componentImprovement15 = componentImprovement9;
                        }
                        else if (componentImprovement13 != null)
                        {
                            componentImprovement15 = componentImprovement13;
                        }
                        else if (componentImprovement7 != null)
                        {
                            componentImprovement15 = componentImprovement7;
                        }
                        else if (componentImprovement12 != null && num3 <= 0)
                        {
                            componentImprovement15 = componentImprovement12;
                        }
                        else if (componentImprovement11 != null && num3 <= 0)
                        {
                            componentImprovement15 = componentImprovement11;
                        }
                    }
                }
                switch (designSpecificationComponentRule.ComponentCategory)
                {
                    case ComponentCategoryType.WeaponArea:
                        if (componentImprovement11 != null && techFocusTypes.Contains(ComponentType.WeaponAreaGravity))
                        {
                            componentImprovement15 = componentImprovement11;
                        }
                        if (componentImprovement15 == null && componentImprovement11 != null)
                        {
                            componentImprovement15 = componentImprovement11;
                        }
                        break;
                    case ComponentCategoryType.WeaponBeam:
                        if (componentImprovement14 != null && techFocusCategories.Contains(ComponentCategoryType.WeaponBeam))
                        {
                            componentImprovement15 = componentImprovement14;
                        }
                        else if (componentImprovement8 != null && techFocusTypes.Contains(ComponentType.WeaponPhaser))
                        {
                            componentImprovement15 = componentImprovement8;
                        }
                        else if (componentImprovement9 != null && techFocusTypes.Contains(ComponentType.WeaponRailGun))
                        {
                            componentImprovement15 = componentImprovement9;
                        }
                        else if (componentImprovement10 != null && techFocusTypes.Contains(ComponentType.WeaponGravityBeam))
                        {
                            componentImprovement15 = componentImprovement10;
                        }
                        if (componentImprovement15 != null && componentImprovement15.ImprovedComponent != null)
                        {
                            switch (componentImprovement15.ImprovedComponent.Type)
                            {
                                case ComponentType.WeaponBeam:
                                    if (componentImprovement9 != null && componentImprovement15.TechLevel < componentImprovement9.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement9;
                                    }
                                    if (componentImprovement8 != null && componentImprovement15.TechLevel < componentImprovement8.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement8;
                                    }
                                    if (componentImprovement10 != null && componentImprovement15.TechLevel < componentImprovement10.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement10;
                                    }
                                    break;
                                case ComponentType.WeaponGravityBeam:
                                    if (componentImprovement9 != null && componentImprovement15.TechLevel < componentImprovement9.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement9;
                                    }
                                    if (componentImprovement8 != null && componentImprovement15.TechLevel < componentImprovement8.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement8;
                                    }
                                    if (componentImprovement14 != null && componentImprovement15.TechLevel < componentImprovement14.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement14;
                                    }
                                    break;
                                case ComponentType.WeaponPhaser:
                                    if (componentImprovement9 != null && componentImprovement15.TechLevel < componentImprovement9.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement9;
                                    }
                                    if (componentImprovement10 != null && componentImprovement15.TechLevel < componentImprovement10.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement10;
                                    }
                                    if (componentImprovement14 != null && componentImprovement15.TechLevel < componentImprovement14.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement14;
                                    }
                                    break;
                                case ComponentType.WeaponRailGun:
                                    if (componentImprovement8 != null && componentImprovement15.TechLevel < componentImprovement8.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement8;
                                    }
                                    if (componentImprovement10 != null && componentImprovement15.TechLevel < componentImprovement10.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement10;
                                    }
                                    if (componentImprovement14 != null && componentImprovement15.TechLevel < componentImprovement14.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement14;
                                    }
                                    break;
                            }
                        }
                        if (componentImprovement15 == null)
                        {
                            if (componentImprovement14 != null)
                            {
                                componentImprovement15 = componentImprovement14;
                            }
                            else if (componentImprovement8 != null)
                            {
                                componentImprovement15 = componentImprovement8;
                            }
                            else if (componentImprovement9 != null)
                            {
                                componentImprovement15 = componentImprovement9;
                            }
                            else if (componentImprovement10 != null)
                            {
                                componentImprovement15 = componentImprovement10;
                            }
                            else if (componentImprovement13 != null)
                            {
                                componentImprovement15 = componentImprovement13;
                            }
                            else if (componentImprovement7 != null)
                            {
                                componentImprovement15 = componentImprovement7;
                            }
                            else if (componentImprovement12 != null && num3 <= 0)
                            {
                                componentImprovement15 = componentImprovement12;
                            }
                            else if (componentImprovement11 != null && num3 <= 0)
                            {
                                componentImprovement15 = componentImprovement11;
                            }
                        }
                        break;
                    case ComponentCategoryType.WeaponTorpedo:
                        if (componentImprovement15 != null && designSpecificationComponentRule.ComponentType != ComponentType.WeaponBombard)
                        {
                            int num15 = 0;
                            int num16 = 0;
                            while (componentImprovement15.Value7 > 0 && componentImprovement15.ImprovedComponent.ComponentID != 9 && num15 < torpedoWeapons.Count)
                            {
                                if (torpedoWeapons.Count > num16 && Research.CheckComponentResearched(torpedoWeapons[num16].ImprovedComponent))
                                {
                                    componentImprovement15 = torpedoWeapons[num16];
                                }
                                num16++;
                                num15++;
                            }
                        }
                        if (componentImprovement15 != null && componentImprovement15.ImprovedComponent != null)
                        {
                            switch (componentImprovement15.ImprovedComponent.Type)
                            {
                                case ComponentType.WeaponTorpedo:
                                    if (componentImprovement7 != null && componentImprovement15.TechLevel < componentImprovement7.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement7;
                                    }
                                    break;
                                case ComponentType.WeaponMissile:
                                    if (componentImprovement13 != null && componentImprovement15.TechLevel < componentImprovement13.TechLevel - num14)
                                    {
                                        componentImprovement15 = componentImprovement13;
                                    }
                                    break;
                            }
                        }
                        if (componentImprovement15 == null)
                        {
                            if (componentImprovement13 != null && componentImprovement13.Value1 > 0)
                            {
                                componentImprovement15 = componentImprovement13;
                            }
                            else if (componentImprovement7 != null)
                            {
                                componentImprovement15 = componentImprovement7;
                            }
                        }
                        break;
                }
                if (componentImprovement15 == null)
                {
                    continue;
                }
                bool flag = false;
                bool flag2 = false;
                if (componentImprovement15.ImprovedComponent != null && componentImprovement15.ImprovedComponent.Type == ComponentType.Reactor)
                {
                    flag = true;
                }
                else if (componentImprovement15.ImprovedComponent != null && componentImprovement15.ImprovedComponent.Type == ComponentType.EnergyCollector)
                {
                    flag2 = true;
                }
                int num17 = designSpecificationComponentRule.Amount;
                switch (designSpecificationComponentRule.ComponentRuleType)
                {
                    case DesignSpecificationComponentRuleType.MustHave:
                        {
                            num17 = AdjustComponentAmount(designSpec, designSpecificationComponentRule);
                            for (int k = 0; k < num17; k++)
                            {
                                if (flag)
                                {
                                    recommendedReactorComponentCount++;
                                }
                                else if (flag2)
                                {
                                    num2++;
                                }
                                else
                                {
                                    design.Components.Add(componentImprovement15.ImprovedComponent);
                                }
                                num13 += componentImprovement15.ImprovedComponent.Size;
                                energyConsumed += Design.DetermineComponentEnergyRequirementsExcludeHyperdrive(componentImprovement15);
                                num += Design.DetermineComponentEnergyOutput(componentImprovement15);
                            }
                            break;
                        }
                    case DesignSpecificationComponentRuleType.MustNotHave:
                        num17 = 0;
                        break;
                    case DesignSpecificationComponentRuleType.ShouldNotHave:
                    case DesignSpecificationComponentRuleType.ShouldHave:
                        {
                            num17 = 0;
                            if (!IncludeOptionalComponent(designSpecificationComponentRule, techFocusCategories, techFocusTypes))
                            {
                                break;
                            }
                            num17 = AdjustComponentAmount(designSpec, designSpecificationComponentRule);
                            for (int j = 0; j < num17; j++)
                            {
                                if (flag)
                                {
                                    recommendedReactorComponentCount++;
                                }
                                else if (flag2)
                                {
                                    num2++;
                                }
                                else
                                {
                                    design.Components.Add(componentImprovement15.ImprovedComponent);
                                }
                                num13 += componentImprovement15.ImprovedComponent.Size;
                                energyConsumed += Design.DetermineComponentEnergyRequirementsExcludeHyperdrive(componentImprovement15);
                                num += Design.DetermineComponentEnergyOutput(componentImprovement15);
                            }
                            break;
                        }
                }
                switch (componentImprovement15.ImprovedComponent.Type)
                {
                    case ComponentType.WeaponBeam:
                    case ComponentType.WeaponGravityBeam:
                    case ComponentType.WeaponPhaser:
                    case ComponentType.WeaponRailGun:
                        num4 += num17;
                        num3 += num17;
                        break;
                    case ComponentType.WeaponTorpedo:
                    case ComponentType.WeaponMissile:
                        num5 += num17;
                        num3 += num17;
                        break;
                    case ComponentType.WeaponBombard:
                    case ComponentType.WeaponIonCannon:
                    case ComponentType.WeaponIonPulse:
                    case ComponentType.WeaponAreaGravity:
                    case ComponentType.WeaponAreaDestruction:
                    case ComponentType.WeaponSuperBeam:
                    case ComponentType.WeaponSuperArea:
                    case ComponentType.WeaponSuperTorpedo:
                    case ComponentType.WeaponSuperMissile:
                    case ComponentType.WeaponSuperPhaser:
                    case ComponentType.WeaponSuperRailGun:
                        num3 += num17;
                        break;
                    case ComponentType.FighterBay:
                        num6 += num17;
                        break;
                    case ComponentType.EngineMainThrust:
                        num7 += num17;
                        break;
                    case ComponentType.Shields:
                        num8 += num17;
                        break;
                    case ComponentType.StoragePassenger:
                        num9 += num17;
                        break;
                    case ComponentType.ExtractorGasExtractor:
                        num10 += num17;
                        break;
                    case ComponentType.ExtractorMine:
                        num11 += num17;
                        break;
                    case ComponentType.ExtractorLuxury:
                        num12 += num17;
                        break;
                }
                switch (componentImprovement15.ImprovedComponent.Type)
                {
                    case ComponentType.EnergyCollector:
                        if (design.Role == BuiltObjectRole.Base && designSpec.Contains(ComponentType.SensorLongRange))
                        {
                            num2 += 2;
                            num13 += componentImprovement15.ImprovedComponent.Size;
                            num13 += componentImprovement15.ImprovedComponent.Size;
                            num += Design.DetermineComponentEnergyOutput(componentImprovement15);
                            num += Design.DetermineComponentEnergyOutput(componentImprovement15);
                        }
                        break;
                    case ComponentType.EngineMainThrust:
                    case ComponentType.EngineVectoring:
                        if (Policy.ResearchDesignOverallFocus == ShipDesignFocus.SpeedAgility)
                        {
                            design.Components.Add(componentImprovement15.ImprovedComponent);
                            num13 += componentImprovement15.ImprovedComponent.Size;
                            energyConsumed += Design.DetermineComponentEnergyRequirementsExcludeHyperdrive(componentImprovement15);
                        }
                        break;
                }
            }
            if (designSpec.Role == BuiltObjectRole.Military && num3 <= 0 && num6 <= 0)
            {
                return null;
            }
            if (!CheckEmpireHasHyperDriveTech(this))
            {
                BuiltObjectSubRole subRole = designSpec.SubRole;
                if (subRole == BuiltObjectSubRole.ConstructionShip)
                {
                    ComponentImprovement componentImprovement16 = Research.EvaluateDesiredComponentImprovement(ComponentType.StorageFuel, designFocus);
                    if (componentImprovement16 != null && componentImprovement16.ImprovedComponent != null)
                    {
                        design.Components.Add(componentImprovement16.ImprovedComponent);
                        design.Components.Add(componentImprovement16.ImprovedComponent);
                        design.Components.Add(componentImprovement16.ImprovedComponent);
                        design.Components.Add(componentImprovement16.ImprovedComponent);
                        num13 += componentImprovement16.ImprovedComponent.Size * 4;
                    }
                }
            }
            if (PirateEmpireBaseHabitat != null && (designSpec.SubRole == BuiltObjectSubRole.SmallSpacePort || designSpec.SubRole == BuiltObjectSubRole.MediumSpacePort || designSpec.SubRole == BuiltObjectSubRole.LargeSpacePort) && design.Components.GetFirstByType(ComponentType.ExtractorGasExtractor) == null)
            {
                Component component4 = Research.EvaluateDesiredComponent(ComponentType.ExtractorGasExtractor, designFocus);
                if (component4 != null)
                {
                    design.Components.Add(component4);
                    design.Components.Add(component4);
                    num13 += component4.Size * 2;
                }
            }
            double staticEnergyUsed = Design.CalculateStaticEnergyUsage(design.Components);
            double num18 = energyConsumed + staticEnergyUsed - num;
            if (num18 > 0.0 && componentImprovement != null && componentImprovement2 != null)
            {
                int num19 = (int)(0.99 + num18 / (double)componentImprovement.Value1);
                for (int l = 0; l < num19; l++)
                {
                    recommendedReactorComponentCount++;
                    num13 += componentImprovement.ImprovedComponent.Size;
                    num += Design.DetermineComponentEnergyOutput(componentImprovement);
                }
                if (designSpec.Role == BuiltObjectRole.Base)
                {
                    bool flag3 = true;
                    switch (designSpec.SubRole)
                    {
                        case BuiltObjectSubRole.SmallSpacePort:
                        case BuiltObjectSubRole.MediumSpacePort:
                        case BuiltObjectSubRole.LargeSpacePort:
                        case BuiltObjectSubRole.DefensiveBase:
                            flag3 = false;
                            break;
                    }
                    if (!flag3 || num13 + num19 * componentImprovement2.ImprovedComponent.Size <= maxBaseSize)
                    {
                        for (int m = 0; m < num19; m++)
                        {
                            design.Components.Add(componentImprovement2.ImprovedComponent);
                            num13 += componentImprovement2.ImprovedComponent.Size;
                        }
                    }
                }
            }
            switch (designSpec.SubRole)
            {
                case BuiltObjectSubRole.Escort:
                case BuiltObjectSubRole.Frigate:
                case BuiltObjectSubRole.Destroyer:
                case BuiltObjectSubRole.Cruiser:
                case BuiltObjectSubRole.CapitalShip:
                case BuiltObjectSubRole.TroopTransport:
                case BuiltObjectSubRole.Carrier:
                case BuiltObjectSubRole.ResupplyShip:
                case BuiltObjectSubRole.ExplorationShip:
                case BuiltObjectSubRole.SmallFreighter:
                case BuiltObjectSubRole.MediumFreighter:
                case BuiltObjectSubRole.LargeFreighter:
                case BuiltObjectSubRole.ColonyShip:
                case BuiltObjectSubRole.PassengerShip:
                case BuiltObjectSubRole.ConstructionShip:
                case BuiltObjectSubRole.GasMiningShip:
                case BuiltObjectSubRole.MiningShip:
                    {
                        staticEnergyUsed = Design.CalculateStaticEnergyUsage(design.Components);
                        double num20 = num - staticEnergyUsed;
                        ComponentImprovement componentImprovement17 = Research.EvaluateDesiredComponentImprovement(ComponentCategoryType.HyperDrive, designFocus);
                        if (componentImprovement17 != null && (double)componentImprovement17.Value2 > num20)
                        {
                            double num21 = Design.DetermineComponentEnergyOutput(componentImprovement);
                            int num22 = (int)(0.99 + ((double)componentImprovement17.Value2 - num20) / num21);
                            for (int n = 0; n < num22; n++)
                            {
                                recommendedReactorComponentCount++;
                                num13 += componentImprovement.ImprovedComponent.Size;
                                num += Design.DetermineComponentEnergyOutput(componentImprovement);
                            }
                        }
                        break;
                    }
            }
            int num23 = 0;
            int num24 = 0;
            if (design.SubRole == BuiltObjectSubRole.CapitalShip || design.SubRole == BuiltObjectSubRole.Carrier)
            {
                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                int num25 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                int num26 = MaximumConstructionSize(design.SubRole);
                if (num25 < num26)
                {
                    double num27 = (double)num26 / (double)num25;
                    if (num27 > 1.05)
                    {
                        int[] array = design.Components.ResolveComponentCountsByType();
                        for (int num28 = 0; num28 < array.Length; num28++)
                        {
                            if (array[num28] <= 0)
                            {
                                continue;
                            }
                            Component component5 = new Component(num28);
                            switch (component5.Type)
                            {
                                case ComponentType.Reactor:
                                    {
                                        int num32 = (int)((double)array[num28] * num27);
                                        int num33 = num32 - array[num28];
                                        for (int num34 = 0; num34 < num33; num34++)
                                        {
                                            recommendedReactorComponentCount++;
                                        }
                                        break;
                                    }
                                case ComponentType.EnergyCollector:
                                    {
                                        int num35 = (int)((double)array[num28] * num27);
                                        int num36 = num35 - array[num28];
                                        for (int num37 = 0; num37 < num36; num37++)
                                        {
                                            num2++;
                                        }
                                        break;
                                    }
                                default:
                                    {
                                        int num29 = (int)((double)array[num28] * num27);
                                        int num30 = num29 - array[num28];
                                        for (int num31 = 0; num31 < num30; num31++)
                                        {
                                            design.Components.Add(component5);
                                        }
                                        break;
                                    }
                                case ComponentType.HyperDeny:
                                case ComponentType.HyperStop:
                                case ComponentType.HyperDrive:
                                case ComponentType.SensorProximityArray:
                                case ComponentType.SensorResourceProfileSensor:
                                case ComponentType.SensorLongRange:
                                case ComponentType.SensorTraceScanner:
                                case ComponentType.SensorScannerJammer:
                                case ComponentType.SensorStealth:
                                case ComponentType.ComputerTargetting:
                                case ComponentType.ComputerTargettingFleet:
                                case ComponentType.ComputerCountermeasures:
                                case ComponentType.ComputerCountermeasuresFleet:
                                case ComponentType.ComputerCommandCenter:
                                case ComponentType.ComputerCommerceCenter:
                                case ComponentType.HabitationLifeSupport:
                                case ComponentType.HabitationHabModule:
                                case ComponentType.DamageControl:
                                case ComponentType.HabitationMedicalCenter:
                                case ComponentType.HabitationRecreationCenter:
                                case ComponentType.HabitationColonization:
                                case ComponentType.EnergyToFuel:
                                    break;
                            }
                        }
                    }
                }
            }
            int num38 = maxShipSize;
            switch (design.SubRole)
            {
                case BuiltObjectSubRole.ResupplyShip:
                case BuiltObjectSubRole.ColonyShip:
                case BuiltObjectSubRole.ConstructionShip:
                    num38 = maxBaseSize;
                    break;
                default:
                    num38 = maxShipSize;
                    break;
            }
            switch (design.SubRole)
            {
                case BuiltObjectSubRole.Escort:
                case BuiltObjectSubRole.Frigate:
                case BuiltObjectSubRole.Destroyer:
                case BuiltObjectSubRole.Cruiser:
                case BuiltObjectSubRole.CapitalShip:
                case BuiltObjectSubRole.TroopTransport:
                case BuiltObjectSubRole.Carrier:
                case BuiltObjectSubRole.ExplorationShip:
                case BuiltObjectSubRole.SmallFreighter:
                case BuiltObjectSubRole.MediumFreighter:
                case BuiltObjectSubRole.LargeFreighter:
                case BuiltObjectSubRole.ColonyShip:
                case BuiltObjectSubRole.PassengerShip:
                case BuiltObjectSubRole.ConstructionShip:
                case BuiltObjectSubRole.GasMiningShip:
                case BuiltObjectSubRole.MiningShip:
                    {
                        num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                        num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                        int num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 <= num38)
                        {
                            break;
                        }
                        ComponentList componentList = new ComponentList();
                        ComponentList componentList2 = new ComponentList();
                        ComponentList componentList3 = new ComponentList();
                        ComponentList componentList4 = new ComponentList();
                        ComponentList componentList5 = new ComponentList();
                        ComponentList componentList6 = new ComponentList();
                        ComponentList componentList7 = new ComponentList();
                        ComponentList componentList8 = new ComponentList();
                        ComponentList componentList9 = new ComponentList();
                        ComponentList componentList10 = new ComponentList();
                        ComponentList componentList11 = new ComponentList();
                        ComponentList componentList12 = new ComponentList();
                        int num40 = 0;
                        int num41 = 0;
                        int num42 = 0;
                        int num43 = 0;
                        int num44 = 0;
                        int num45 = 0;
                        int num46 = 0;
                        int num47 = 0;
                        int num48 = 0;
                        int num49 = 0;
                        int num50 = 0;
                        int num51 = 0;
                        bool flag4 = false;
                        List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
                        list.Add(BuiltObjectSubRole.ColonyShip);
                        list.Add(BuiltObjectSubRole.PassengerShip);
                        List<BuiltObjectSubRole> list2 = list;
                        if (mostRecentDesign != null && componentImprovement3 != null)
                        {
                            float num52 = mostRecentDesign.WarpSpeed;
                            float num53 = componentImprovement3.Value1;
                            if (num52 <= 0f || num53 / num52 >= 2f)
                            {
                                flag4 = true;
                            }
                        }
                        else if (mostRecentDesign == null && componentImprovement3 != null && list2.Contains(designSpec.SubRole))
                        {
                            flag4 = true;
                        }
                        double num54 = 0.25;
                        double num55 = 0.33;
                        double num56 = 0.25;
                        double num57 = 0.33;
                        double num58 = 0.5;
                        double num59 = 0.5;
                        int num60 = 1;
                        if (flag4)
                        {
                            num54 = 0.6;
                            num55 = 0.5;
                            num56 = 1.0;
                            num57 = 0.7;
                            num59 = 0.7;
                            num60 = 2;
                        }
                        if (design.Role == BuiltObjectRole.Military)
                        {
                            for (int num61 = 0; num61 < design.Components.Count; num61++)
                            {
                                if (design.Components[num61].Type == ComponentType.ExtractorGasExtractor)
                                {
                                    int num62 = Math.Max(1, (int)((double)num10 * num58));
                                    if (componentList10.Count < num62)
                                    {
                                        componentList10.Add(design.Components[num61]);
                                        num49 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Type == ComponentType.ExtractorMine)
                                {
                                    int num63 = Math.Max(1, (int)((double)num11 * num58));
                                    if (componentList11.Count < num63)
                                    {
                                        componentList11.Add(design.Components[num61]);
                                        num50 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Type == ComponentType.ExtractorLuxury)
                                {
                                    int num64 = Math.Max(1, (int)((double)num12 * num58));
                                    if (componentList12.Count < num64)
                                    {
                                        componentList12.Add(design.Components[num61]);
                                        num51 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Type == ComponentType.EngineMainThrust)
                                {
                                    int num65 = Math.Max(1, (int)((double)num7 * num54));
                                    if (componentList5.Count < num65)
                                    {
                                        componentList5.Add(design.Components[num61]);
                                        num44 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Type == ComponentType.FighterBay)
                                {
                                    if (design.SubRole == BuiltObjectSubRole.Carrier)
                                    {
                                        if (componentList4.Count <= 0)
                                        {
                                            componentList4.Add(design.Components[num61]);
                                            num43 += design.Components[num61].Size;
                                        }
                                        continue;
                                    }
                                    int num66 = Math.Max(1, (int)((double)num6 * num59));
                                    if (componentList4.Count < num66)
                                    {
                                        componentList4.Add(design.Components[num61]);
                                        num44 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Type == ComponentType.StorageTroop)
                                {
                                    if (design.SubRole != BuiltObjectSubRole.TroopTransport || componentList3.Count < num60)
                                    {
                                        componentList3.Add(design.Components[num61]);
                                        num42 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Category == ComponentCategoryType.Armor)
                                {
                                    componentList.Add(design.Components[num61]);
                                    num40 += design.Components[num61].Size;
                                }
                                else if (design.Components[num61].Type == ComponentType.Shields)
                                {
                                    int num67 = Math.Max(1, (int)((double)num8 * num56));
                                    if (componentList6.Count < num67)
                                    {
                                        componentList6.Add(design.Components[num61]);
                                        num45 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Type == ComponentType.StoragePassenger)
                                {
                                    int val = Math.Max(1, (int)((double)num9 * num57));
                                    val = Math.Min(val, num9 - 1);
                                    if (componentList7.Count < val)
                                    {
                                        componentList7.Add(design.Components[num61]);
                                        num46 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Category == ComponentCategoryType.EnergyCollector)
                                {
                                    componentList2.Add(design.Components[num61]);
                                    num41 += design.Components[num61].Size;
                                }
                                else if (design.Components[num61].Category == ComponentCategoryType.WeaponBeam || design.Components[num61].Category == ComponentCategoryType.WeaponGravity)
                                {
                                    int num68 = Math.Max(1, (int)((double)num4 * num55));
                                    if (componentList8.Count < num68)
                                    {
                                        componentList8.Add(design.Components[num61]);
                                        num47 += design.Components[num61].Size;
                                    }
                                }
                                else if (design.Components[num61].Category == ComponentCategoryType.WeaponTorpedo)
                                {
                                    int num69 = Math.Max(1, (int)((double)num5 * num55));
                                    if (componentList9.Count < num69)
                                    {
                                        componentList9.Add(design.Components[num61]);
                                        num48 += design.Components[num61].Size;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int num70 = 0; num70 < design.Components.Count; num70++)
                            {
                                if (design.Components[num70].Type == ComponentType.ExtractorGasExtractor)
                                {
                                    int num71 = Math.Max(1, (int)((double)num10 * num58));
                                    if (componentList10.Count < num71)
                                    {
                                        componentList10.Add(design.Components[num70]);
                                        num49 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Type == ComponentType.ExtractorMine)
                                {
                                    int num72 = Math.Max(1, (int)((double)num11 * num58));
                                    if (componentList11.Count < num72)
                                    {
                                        componentList11.Add(design.Components[num70]);
                                        num50 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Type == ComponentType.ExtractorLuxury)
                                {
                                    int num73 = Math.Max(1, (int)((double)num12 * num58));
                                    if (componentList12.Count < num73)
                                    {
                                        componentList12.Add(design.Components[num70]);
                                        num51 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Category == ComponentCategoryType.Armor)
                                {
                                    componentList.Add(design.Components[num70]);
                                    num40 += design.Components[num70].Size;
                                }
                                else if (design.Components[num70].Type == ComponentType.Shields)
                                {
                                    int num74 = Math.Max(1, (int)((double)num8 * num56));
                                    if (componentList6.Count < num74)
                                    {
                                        componentList6.Add(design.Components[num70]);
                                        num45 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Type == ComponentType.StoragePassenger)
                                {
                                    int num75 = Math.Max(1, (int)((double)num9 * num57));
                                    if (componentList7.Count < num75)
                                    {
                                        componentList7.Add(design.Components[num70]);
                                        num46 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Category == ComponentCategoryType.EnergyCollector)
                                {
                                    componentList2.Add(design.Components[num70]);
                                    num41 += design.Components[num70].Size;
                                }
                                else if (design.Components[num70].Type == ComponentType.EngineMainThrust)
                                {
                                    int num76 = Math.Max(1, (int)((double)num7 * num54));
                                    if (componentList5.Count < num76)
                                    {
                                        componentList5.Add(design.Components[num70]);
                                        num44 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Category == ComponentCategoryType.WeaponBeam || design.Components[num70].Category == ComponentCategoryType.WeaponGravity)
                                {
                                    int num77 = Math.Max(1, (int)((double)num4 * num55));
                                    if (componentList8.Count < num77)
                                    {
                                        componentList8.Add(design.Components[num70]);
                                        num47 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Category == ComponentCategoryType.WeaponTorpedo)
                                {
                                    int num78 = Math.Max(1, (int)((double)num5 * num55));
                                    if (componentList9.Count < num78)
                                    {
                                        componentList9.Add(design.Components[num70]);
                                        num48 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Type == ComponentType.FighterBay)
                                {
                                    if (design.SubRole == BuiltObjectSubRole.Carrier)
                                    {
                                        if (componentList4.Count <= 0)
                                        {
                                            componentList4.Add(design.Components[num70]);
                                            num43 += design.Components[num70].Size;
                                        }
                                        continue;
                                    }
                                    int num79 = Math.Max(1, (int)((double)num6 * num59));
                                    if (componentList4.Count < num79)
                                    {
                                        componentList4.Add(design.Components[num70]);
                                        num44 += design.Components[num70].Size;
                                    }
                                }
                                else if (design.Components[num70].Type == ComponentType.StorageTroop && componentList3.Count < num60)
                                {
                                    componentList3.Add(design.Components[num70]);
                                    num42 += design.Components[num70].Size;
                                }
                            }
                        }
                        if (componentList.Count > 1)
                        {
                            num40 -= componentList[0].Size;
                            componentList.RemoveAt(0);
                        }
                        if (num39 - (num40 + num41 + num42 + num43 + num46 + num44 + num45 + num47 + num48 + num49 + num50 + num51) > num38)
                        {
                            break;
                        }
                        if (num39 > num38 && componentList10.Count > 0)
                        {
                            for (int num80 = 0; num80 < componentList10.Count; num80++)
                            {
                                design.Components.Remove(componentList10[num80]);
                                num13 -= componentList10[num80].Size;
                                if (CheckDesignReactorCountDecreased(componentList10[num80], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList11.Count > 0)
                        {
                            for (int num81 = 0; num81 < componentList11.Count; num81++)
                            {
                                design.Components.Remove(componentList11[num81]);
                                num13 -= componentList11[num81].Size;
                                if (CheckDesignReactorCountDecreased(componentList11[num81], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList10.Count > 0)
                        {
                            for (int num82 = 0; num82 < componentList12.Count; num82++)
                            {
                                design.Components.Remove(componentList12[num82]);
                                num13 -= componentList12[num82].Size;
                                if (CheckDesignReactorCountDecreased(componentList12[num82], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList3.Count > 0)
                        {
                            for (int num83 = 0; num83 < componentList3.Count; num83++)
                            {
                                design.Components.Remove(componentList3[num83]);
                                num13 -= componentList3[num83].Size;
                                if (CheckDesignReactorCountDecreased(componentList3[num83], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList7.Count > 0)
                        {
                            for (int num84 = 0; num84 < componentList7.Count; num84++)
                            {
                                design.Components.Remove(componentList7[num84]);
                                num13 -= componentList7[num84].Size;
                                if (CheckDesignReactorCountDecreased(componentList7[num84], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList5.Count > 0)
                        {
                            for (int num85 = 0; num85 < componentList5.Count; num85++)
                            {
                                design.Components.Remove(componentList5[num85]);
                                num13 -= componentList5[num85].Size;
                                if (CheckDesignReactorCountDecreased(componentList5[num85], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList4.Count > 0)
                        {
                            for (int num86 = 0; num86 < componentList4.Count; num86++)
                            {
                                design.Components.Remove(componentList4[num86]);
                                num13 -= componentList4[num86].Size;
                                if (CheckDesignReactorCountDecreased(componentList4[num86], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList8.Count > 0)
                        {
                            for (int num87 = 0; num87 < componentList8.Count; num87++)
                            {
                                design.Components.Remove(componentList8[num87]);
                                num13 -= componentList8[num87].Size;
                                if (CheckDesignReactorCountDecreased(componentList8[num87], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList9.Count > 0)
                        {
                            for (int num88 = 0; num88 < componentList9.Count; num88++)
                            {
                                design.Components.Remove(componentList9[num88]);
                                num13 -= componentList9[num88].Size;
                                if (CheckDesignReactorCountDecreased(componentList9[num88], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList.Count > 0)
                        {
                            for (int num89 = 0; num89 < componentList.Count; num89++)
                            {
                                design.Components.Remove(componentList[num89]);
                                num13 -= componentList[num89].Size;
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList6.Count > 0)
                        {
                            for (int num90 = 0; num90 < componentList6.Count; num90++)
                            {
                                design.Components.Remove(componentList6[num90]);
                                num13 -= componentList6[num90].Size;
                                if (CheckDesignReactorCountDecreased(componentList6[num90], ref staticEnergyUsed, ref energyConsumed, ref recommendedReactorComponentCount, componentImprovement, componentImprovement3))
                                {
                                    num13 -= componentImprovement.ImprovedComponent.Size;
                                }
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        if (num39 > num38 && componentList2.Count > 0)
                        {
                            for (int num91 = 0; num91 < componentList2.Count; num91++)
                            {
                                design.Components.Remove(componentList2[num91]);
                                num13 -= componentList2[num91].Size;
                                num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, num13, designIsBase: false);
                                num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, num13, designIsBase: false);
                                num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                                if (num39 <= num38)
                                {
                                    break;
                                }
                            }
                        }
                        num39 = num13 + num23 * componentImprovement5.ImprovedComponent.Size + num24 * componentImprovement6.ImprovedComponent.Size;
                        break;
                    }
            }
            staticEnergyUsed = Design.CalculateStaticEnergyUsage(design.Components);
            energyConsumed = 0.0;
            for (int num92 = 0; num92 < design.Components.Count; num92++)
            {
                ComponentImprovement component6 = Research.ResolveImprovedComponentValues(design.Components[num92]);
                energyConsumed += Design.DetermineComponentEnergyRequirementsExcludeHyperdrive(component6);
            }
            double num93 = energyConsumed + staticEnergyUsed;
            if (componentImprovement3 != null)
            {
                num93 = Math.Max(num93, componentImprovement3.Value2);
            }
            double num94 = Design.DetermineComponentEnergyOutput(componentImprovement);
            int num95 = (int)(0.99 + num93 / num94);
            for (int num96 = 0; num96 < num95; num96++)
            {
                design.Components.Add(componentImprovement.ImprovedComponent);
            }
            if (num2 > 0 && componentImprovement4 != null)
            {
                double num97 = 0.01;
                double num98 = 50.0;
                double num99 = (double)componentImprovement4.Value1 * num97 * num98;
                int val2 = (int)(0.99 + staticEnergyUsed / num99);
                val2 = Math.Max(num2, val2);
                for (int num100 = 0; num100 < val2; num100++)
                {
                    design.Components.Add(componentImprovement4.ImprovedComponent);
                }
            }
            if (design.SubRole == BuiltObjectSubRole.CapitalShip && DominantRace.AggressionLevel >= 100 && DominantRace.IntelligenceLevel >= 100)
            {
                ComponentImprovement componentImprovement18 = SelectPreferredSuperWeapon(techFocusCategories, techFocusTypes, mustBePlanetDestroyer: false);
                if (componentImprovement18 != null && !componentImprovement18.IsPlanetDestroyer)
                {
                    int num101 = MaximumConstructionSize(design.SubRole);
                    int num102 = componentImprovement18.ImprovedComponent.EnergyUsed;
                    if (componentImprovement18.ImprovedComponent.Category == ComponentCategoryType.WeaponSuperArea || componentImprovement18.ImprovedComponent.Category == ComponentCategoryType.WeaponSuperBeam || componentImprovement18.ImprovedComponent.Category == ComponentCategoryType.WeaponSuperTorpedo)
                    {
                        num102 += componentImprovement18.Value3;
                    }
                    if (componentImprovement != null && componentImprovement2 != null)
                    {
                        int num103 = num102 / componentImprovement.Value2 + 1;
                        int size = componentImprovement18.ImprovedComponent.Size;
                        size += componentImprovement.ImprovedComponent.Size * num103;
                        size += componentImprovement2.ImprovedComponent.Size * num103;
                        if (num101 >= num13 + size)
                        {
                            design.Components.Add(componentImprovement18.ImprovedComponent);
                            for (int num104 = 0; num104 < num103; num104++)
                            {
                                design.Components.Add(componentImprovement.ImprovedComponent);
                            }
                            for (int num105 = 0; num105 < num103; num105++)
                            {
                                design.Components.Add(componentImprovement2.ImprovedComponent);
                            }
                        }
                    }
                }
            }
            num23 = _Galaxy.DetermineHabModulesRequired(componentImprovement5, design);
            num24 = _Galaxy.DetermineLifeSupportRequired(componentImprovement6, design);
            for (int num106 = 0; num106 < num23; num106++)
            {
                design.Components.Add(componentImprovement5.ImprovedComponent);
            }
            for (int num107 = 0; num107 < num24; num107++)
            {
                design.Components.Add(componentImprovement6.ImprovedComponent);
            }
            return design;
        }

        private bool CheckDesignReactorCountDecreased(Component removedComponent, ref double staticEnergyUsed, ref double energyConsumed, ref int recommendedReactorComponentCount, ComponentImprovement reactorComponent, ComponentImprovement hyperdriveComponent)
        {
            double num = removedComponent.EnergyUsed;
            ComponentImprovement component = Research.ResolveImprovedComponentValues(removedComponent);
            double num2 = Design.DetermineComponentEnergyRequirementsExcludeHyperdrive(component);
            staticEnergyUsed -= num;
            energyConsumed -= num2;
            double num3 = energyConsumed + staticEnergyUsed;
            if (hyperdriveComponent != null)
            {
                num3 = Math.Max(num3, hyperdriveComponent.Value2);
            }
            double num4 = Design.DetermineComponentEnergyOutput(reactorComponent);
            int num5 = (int)(0.99 + num3 / num4);
            if (recommendedReactorComponentCount > num5)
            {
                recommendedReactorComponentCount = num5;
                return true;
            }
            return false;
        }

        public void ReviewUnpersistedColonyData()
        {
            if (Colonies == null)
            {
                return;
            }
            for (int i = 0; i < Colonies.Count; i++)
            {
                Habitat habitat = Colonies[i];
                if (habitat != null)
                {
                    habitat.RecalculateCriticalResourceSupplyBonuses();
                    habitat.ReviewPlanetaryFacilities(habitat.Empire);
                }
            }
        }

        public void ReviewBuiltObjectWeaponsComponentValues()
        {
            if (Research != null)
            {
                Research.Update(DominantRace);
            }
            if (BuiltObjects != null)
            {
                for (int i = 0; i < BuiltObjects.Count; i++)
                {
                    BuiltObjects[i].ReviewWeaponsComponentValues();
                }
            }
            if (PrivateBuiltObjects != null)
            {
                for (int j = 0; j < PrivateBuiltObjects.Count; j++)
                {
                    PrivateBuiltObjects[j].ReviewWeaponsComponentValues();
                }
            }
        }

        public void ExtendLatestDesignsWithNewSubRoles()
        {
            Array values = Enum.GetValues(typeof(BuiltObjectSubRole));
            if (_LatestDesigns.Count < values.Length)
            {
                for (int i = _LatestDesigns.Count; i < values.Length; i++)
                {
                    Design item = _Designs.FindNewestCanBuildFullEvaluate((BuiltObjectSubRole)i);
                    _LatestDesigns.Add(item);
                }
            }
        }

        public void ReviewLatestDesigns()
        {
            for (int i = 0; i < _DesignSpecifications.Count; i++)
            {
                DesignSpecification designSpecification = _DesignSpecifications[i];
                Design design = _Designs.FindNewestCanBuildFullEvaluate(designSpecification.SubRole, null, includePlanetDestroyers: false);
                if (design != null)
                {
                    _LatestDesigns[(int)design.SubRole] = design;
                }
                else
                {
                    _LatestDesigns[(int)designSpecification.SubRole] = null;
                }
            }
        }

        public bool CheckDesignSubRoleShouldBeUpgraded(BuiltObjectSubRole subRole)
        {
            bool result = true;
            if (Policy != null)
            {
                result = subRole switch
                {
                    BuiltObjectSubRole.Escort => Policy.DesignUpgradeEscort,
                    BuiltObjectSubRole.Frigate => Policy.DesignUpgradeFrigate,
                    BuiltObjectSubRole.Destroyer => Policy.DesignUpgradeDestroyer,
                    BuiltObjectSubRole.Cruiser => Policy.DesignUpgradeCruiser,
                    BuiltObjectSubRole.CapitalShip => Policy.DesignUpgradeCapitalShip,
                    BuiltObjectSubRole.TroopTransport => Policy.DesignUpgradeTroopTransport,
                    BuiltObjectSubRole.Carrier => Policy.DesignUpgradeCarrier,
                    BuiltObjectSubRole.ResupplyShip => Policy.DesignUpgradeResupplyShip,
                    BuiltObjectSubRole.ExplorationShip => Policy.DesignUpgradeExplorationShip,
                    BuiltObjectSubRole.ColonyShip => Policy.DesignUpgradeColonyShip,
                    BuiltObjectSubRole.ConstructionShip => Policy.DesignUpgradeConstructionShip,
                    BuiltObjectSubRole.SmallSpacePort => Policy.DesignUpgradeSmallSpacePort,
                    BuiltObjectSubRole.MediumSpacePort => Policy.DesignUpgradeMediumSpacePort,
                    BuiltObjectSubRole.LargeSpacePort => Policy.DesignUpgradeLargeSpacePort,
                    BuiltObjectSubRole.ResortBase => Policy.DesignUpgradeResortBase,
                    BuiltObjectSubRole.GenericBase => Policy.DesignUpgradeGenericBase,
                    BuiltObjectSubRole.EnergyResearchStation => Policy.DesignUpgradeEnergyResearchStation,
                    BuiltObjectSubRole.WeaponsResearchStation => Policy.DesignUpgradeWeaponsResearchStation,
                    BuiltObjectSubRole.HighTechResearchStation => Policy.DesignUpgradeHighTechResearchStation,
                    BuiltObjectSubRole.MonitoringStation => Policy.DesignUpgradeMonitoringStation,
                    BuiltObjectSubRole.DefensiveBase => Policy.DesignUpgradeDefensiveBase,
                    BuiltObjectSubRole.SmallFreighter => Policy.DesignUpgradeSmallFreighter,
                    BuiltObjectSubRole.MediumFreighter => Policy.DesignUpgradeMediumFreighter,
                    BuiltObjectSubRole.LargeFreighter => Policy.DesignUpgradeLargeFreighter,
                    BuiltObjectSubRole.PassengerShip => Policy.DesignUpgradePassengerShip,
                    BuiltObjectSubRole.GasMiningShip => Policy.DesignUpgradeGasMiningShip,
                    BuiltObjectSubRole.MiningShip => Policy.DesignUpgradeMiningShip,
                    BuiltObjectSubRole.GasMiningStation => Policy.DesignUpgradeGasMiningStation,
                    BuiltObjectSubRole.MiningStation => Policy.DesignUpgradeMiningStation,
                    _ => true,
                };
            }
            return result;
        }

        public void SetDesignSubRoleShouldBeUpgraded(BuiltObjectSubRole subRole, bool upgrade)
        {
            if (Policy != null)
            {
                switch (subRole)
                {
                    case BuiltObjectSubRole.Escort:
                        Policy.DesignUpgradeEscort = upgrade;
                        break;
                    case BuiltObjectSubRole.Frigate:
                        Policy.DesignUpgradeFrigate = upgrade;
                        break;
                    case BuiltObjectSubRole.Destroyer:
                        Policy.DesignUpgradeDestroyer = upgrade;
                        break;
                    case BuiltObjectSubRole.Cruiser:
                        Policy.DesignUpgradeCruiser = upgrade;
                        break;
                    case BuiltObjectSubRole.CapitalShip:
                        Policy.DesignUpgradeCapitalShip = upgrade;
                        break;
                    case BuiltObjectSubRole.TroopTransport:
                        Policy.DesignUpgradeTroopTransport = upgrade;
                        break;
                    case BuiltObjectSubRole.Carrier:
                        Policy.DesignUpgradeCarrier = upgrade;
                        break;
                    case BuiltObjectSubRole.ResupplyShip:
                        Policy.DesignUpgradeResupplyShip = upgrade;
                        break;
                    case BuiltObjectSubRole.ExplorationShip:
                        Policy.DesignUpgradeExplorationShip = upgrade;
                        break;
                    case BuiltObjectSubRole.ColonyShip:
                        Policy.DesignUpgradeColonyShip = upgrade;
                        break;
                    case BuiltObjectSubRole.ConstructionShip:
                        Policy.DesignUpgradeConstructionShip = upgrade;
                        break;
                    case BuiltObjectSubRole.SmallSpacePort:
                        Policy.DesignUpgradeSmallSpacePort = upgrade;
                        break;
                    case BuiltObjectSubRole.MediumSpacePort:
                        Policy.DesignUpgradeMediumSpacePort = upgrade;
                        break;
                    case BuiltObjectSubRole.LargeSpacePort:
                        Policy.DesignUpgradeLargeSpacePort = upgrade;
                        break;
                    case BuiltObjectSubRole.ResortBase:
                        Policy.DesignUpgradeResortBase = upgrade;
                        break;
                    case BuiltObjectSubRole.GenericBase:
                        Policy.DesignUpgradeGenericBase = upgrade;
                        break;
                    case BuiltObjectSubRole.EnergyResearchStation:
                        Policy.DesignUpgradeEnergyResearchStation = upgrade;
                        break;
                    case BuiltObjectSubRole.WeaponsResearchStation:
                        Policy.DesignUpgradeWeaponsResearchStation = upgrade;
                        break;
                    case BuiltObjectSubRole.HighTechResearchStation:
                        Policy.DesignUpgradeHighTechResearchStation = upgrade;
                        break;
                    case BuiltObjectSubRole.MonitoringStation:
                        Policy.DesignUpgradeMonitoringStation = upgrade;
                        break;
                    case BuiltObjectSubRole.DefensiveBase:
                        Policy.DesignUpgradeDefensiveBase = upgrade;
                        break;
                    case BuiltObjectSubRole.SmallFreighter:
                        Policy.DesignUpgradeSmallFreighter = upgrade;
                        break;
                    case BuiltObjectSubRole.MediumFreighter:
                        Policy.DesignUpgradeMediumFreighter = upgrade;
                        break;
                    case BuiltObjectSubRole.LargeFreighter:
                        Policy.DesignUpgradeLargeFreighter = upgrade;
                        break;
                    case BuiltObjectSubRole.PassengerShip:
                        Policy.DesignUpgradePassengerShip = upgrade;
                        break;
                    case BuiltObjectSubRole.GasMiningShip:
                        Policy.DesignUpgradeGasMiningShip = upgrade;
                        break;
                    case BuiltObjectSubRole.MiningShip:
                        Policy.DesignUpgradeMiningShip = upgrade;
                        break;
                    case BuiltObjectSubRole.GasMiningStation:
                        Policy.DesignUpgradeGasMiningStation = upgrade;
                        break;
                    case BuiltObjectSubRole.MiningStation:
                        Policy.DesignUpgradeMiningStation = upgrade;
                        break;
                }
            }
        }

        private void DetermineTechForUnbuildableOptimizedDesigns(out List<ComponentCategoryType> categories, out List<ComponentType> types)
        {
            categories = new List<ComponentCategoryType>();
            types = new List<ComponentType>();
            DesignList designList = Designs.ResolveOptimizedDesigns();
            if (designList != null && designList.Count > 0)
            {
                DesignList unbuildableNonObsoleteDesigns = designList.GetUnbuildableNonObsoleteDesigns(this);
                if (unbuildableNonObsoleteDesigns != null && unbuildableNonObsoleteDesigns.Count > 0)
                {
                    ComponentList componentList = unbuildableNonObsoleteDesigns.DetermineUniqueUnbuildableComponents(this);
                    if (componentList != null && componentList.Count > 0)
                    {
                        for (int i = 0; i < componentList.Count; i++)
                        {
                            if (!types.Contains(componentList[i].Type))
                            {
                                types.Add(componentList[i].Type);
                            }
                        }
                    }
                }
            }
            for (int j = 0; j < types.Count; j++)
            {
                ComponentCategoryType category = ComponentCategoryType.Undefined;
                ComponentType type = ComponentType.Undefined;
                ResearchSystem.DetermineTechCategoryType(types[j], out category, out type);
                if (category != 0 && !categories.Contains(category))
                {
                    categories.Add(category);
                }
            }
        }

        public void CreateNewDesigns(long designDate)
        {
            CreateNewDesigns(designDate, forceUpdate: false);
        }

        public void CreateNewDesigns(long designDate, bool forceUpdate)
        {
            BaconEmpire.CreateNewDesigns(this, designDate, forceUpdate);
        }

        public void ReviewRemoveObsoleteDesignsForSubRole(BuiltObjectSubRole subRole, Design designToExclude, bool removeManualDesigns)
        {
            DesignList designList = new DesignList();
            for (int i = 0; i < Designs.Count; i++)
            {
                Design design = Designs[i];
                if (design == null || design.SubRole != subRole || (designToExclude != null && design == designToExclude))
                {
                    continue;
                }
                bool flag = false;
                if (design.IsManuallyCreated && design.OptimizedDesign == 0)
                {
                    flag = true;
                }
                if (removeManualDesigns || !flag)
                {
                    switch (design.SubRole)
                    {
                        case BuiltObjectSubRole.GenericBase:
                        case BuiltObjectSubRole.EnergyResearchStation:
                        case BuiltObjectSubRole.WeaponsResearchStation:
                        case BuiltObjectSubRole.HighTechResearchStation:
                        case BuiltObjectSubRole.MonitoringStation:
                        case BuiltObjectSubRole.DefensiveBase:
                            _ = Capital;
                            break;
                    }
                    design.IsObsolete = true;
                    if (!CheckDesignInUse(design))
                    {
                        designList.Add(design);
                    }
                }
            }
            for (int j = 0; j < designList.Count; j++)
            {
                Designs.Remove(designList[j]);
            }
        }

        private bool CheckDesignInUse(Design design)
        {
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = BuiltObjects[i];
                if (builtObject != null && !builtObject.HasBeenDestroyed && (builtObject.Design == design || builtObject.RetrofitDesign == design))
                {
                    return true;
                }
            }
            for (int j = 0; j < PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject2 = PrivateBuiltObjects[j];
                if (builtObject2 != null && !builtObject2.HasBeenDestroyed && (builtObject2.Design == design || builtObject2.RetrofitDesign == design))
                {
                    return true;
                }
            }
            return false;
        }

        public bool IncludeOptionalComponent(DesignSpecificationComponentRule rule, List<ComponentCategoryType> techFocusCategories, List<ComponentType> techFocusTypes)
        {
            bool result = false;
            switch (rule.ComponentRuleType)
            {
                case DesignSpecificationComponentRuleType.MustHave:
                    result = true;
                    break;
                case DesignSpecificationComponentRuleType.MustNotHave:
                    result = false;
                    break;
                case DesignSpecificationComponentRuleType.ShouldHave:
                    if (techFocusCategories.Contains(rule.ComponentCategory) || techFocusTypes.Contains(rule.ComponentType))
                    {
                        result = true;
                    }
                    else if ((rule.ComponentCategory == ComponentCategoryType.WeaponArea || rule.ComponentCategory == ComponentCategoryType.WeaponBeam || rule.ComponentCategory == ComponentCategoryType.WeaponTorpedo) && DominantRace.AggressionLevel > 110)
                    {
                        result = true;
                    }
                    else if (DominantRace.IntelligenceLevel > 105)
                    {
                        result = true;
                    }
                    break;
                case DesignSpecificationComponentRuleType.ShouldNotHave:
                    if (techFocusCategories.Contains(rule.ComponentCategory) || techFocusTypes.Contains(rule.ComponentType))
                    {
                        result = true;
                    }
                    else if (DominantRace.IntelligenceLevel > 120)
                    {
                        result = true;
                    }
                    break;
            }
            return result;
        }

        public int AdjustComponentAmount(DesignSpecification designSpec, DesignSpecificationComponentRule rule)
        {
            return rule.Amount;
        }

        public DesignSpecification ObtainDesignSpec(BuiltObjectSubRole subRole)
        {
            DesignSpecification result = null;
            for (int i = 0; i < _DesignSpecifications.Count; i++)
            {
                DesignSpecification designSpecification = _DesignSpecifications[i];
                if (designSpecification.SubRole == subRole)
                {
                    result = designSpecification;
                    break;
                }
            }
            return result;
        }

        public Design GenerateDesignFromSpec(DesignSpecification designSpec, double techAdvanceAmount)
        {
            Design design = null;
            BuiltObjectFleeWhen fleeWhen = BuiltObjectFleeWhen.Shields20;
            BuiltObjectStance stance = BuiltObjectStance.AttackEnemies;
            BuiltObjectFleeWhen fleeWhen2 = BuiltObjectFleeWhen.EnemyMilitarySighted;
            BuiltObjectStance stance2 = BuiltObjectStance.DoNotAttack;
            BuiltObjectFleeWhen fleeWhen3 = BuiltObjectFleeWhen.EnemyMilitarySighted;
            BuiltObjectStance stance3 = BuiltObjectStance.DoNotAttack;
            BuiltObjectFleeWhen fleeWhen4 = BuiltObjectFleeWhen.EnemyMilitarySighted;
            BuiltObjectStance stance4 = BuiltObjectStance.AttackIfAttacked;
            BuiltObjectFleeWhen fleeWhen5 = BuiltObjectFleeWhen.EnemyMilitarySighted;
            BuiltObjectStance stance5 = BuiltObjectStance.DoNotAttack;
            BuiltObjectFleeWhen fleeWhen6 = BuiltObjectFleeWhen.EnemyMilitarySighted;
            BuiltObjectStance stance6 = BuiltObjectStance.DoNotAttack;
            BuiltObjectFleeWhen fleeWhen7 = BuiltObjectFleeWhen.Shields50;
            BuiltObjectStance stance7 = BuiltObjectStance.AttackEnemies;
            if (designSpec != null)
            {
                Design previousDesign = null;
                if (_Designs != null)
                {
                    previousDesign = _Designs.FindNewestCanBuild(designSpec.SubRole);
                }
                string text = Galaxy.ResolveDescription(designSpec.SubRole);
                string empty = string.Empty;
                empty = ((DominantRace == null) ? text : (DominantRace.Name + " " + text));
                design = new Design(empty);
                design.Role = designSpec.Role;
                design.SubRole = designSpec.SubRole;
                design.ImageScalingType = designSpec.ImageScalingMode;
                design.ImageScalingFactor = designSpec.ImageScalingFactor;
                design = PlaceComponentsOnDesign(design, designSpec, null, techAdvanceAmount);
                switch (designSpec.SubRole)
                {
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                    case BuiltObjectSubRole.GenericBase:
                    case BuiltObjectSubRole.EnergyResearchStation:
                    case BuiltObjectSubRole.WeaponsResearchStation:
                    case BuiltObjectSubRole.HighTechResearchStation:
                    case BuiltObjectSubRole.MonitoringStation:
                    case BuiltObjectSubRole.DefensiveBase:
                        design.Stance = BuiltObjectStance.AttackEnemies;
                        design.FleeWhen = BuiltObjectFleeWhen.Never;
                        design.TacticsStrongerShips = BattleTactics.PointBlank;
                        design.TacticsWeakerShips = BattleTactics.PointBlank;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                        design.Stance = BuiltObjectStance.AttackIfAttacked;
                        design.FleeWhen = BuiltObjectFleeWhen.Never;
                        design.TacticsStrongerShips = BattleTactics.PointBlank;
                        design.TacticsWeakerShips = BattleTactics.PointBlank;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    case BuiltObjectSubRole.Escort:
                    case BuiltObjectSubRole.Frigate:
                    case BuiltObjectSubRole.Destroyer:
                    case BuiltObjectSubRole.Cruiser:
                    case BuiltObjectSubRole.CapitalShip:
                        design.Stance = stance;
                        design.FleeWhen = fleeWhen;
                        design.TacticsStrongerShips = BattleTactics.Standoff;
                        design.TacticsWeakerShips = BattleTactics.AllWeapons;
                        design.TacticsInvasion = InvasionTactics.InvadeWhenClear;
                        break;
                    case BuiltObjectSubRole.Carrier:
                        design.Stance = stance7;
                        design.FleeWhen = fleeWhen7;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.AllWeapons;
                        design.TacticsInvasion = InvasionTactics.InvadeWhenClear;
                        break;
                    case BuiltObjectSubRole.SmallFreighter:
                    case BuiltObjectSubRole.MediumFreighter:
                    case BuiltObjectSubRole.LargeFreighter:
                        design.Stance = stance2;
                        design.FleeWhen = fleeWhen2;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.Evade;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    case BuiltObjectSubRole.ExplorationShip:
                        design.Stance = stance4;
                        design.FleeWhen = fleeWhen4;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.Evade;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    case BuiltObjectSubRole.ColonyShip:
                        design.Stance = stance5;
                        design.FleeWhen = fleeWhen5;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.Evade;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    case BuiltObjectSubRole.ConstructionShip:
                        design.Stance = stance6;
                        design.FleeWhen = fleeWhen6;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.Evade;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    case BuiltObjectSubRole.GasMiningShip:
                    case BuiltObjectSubRole.MiningShip:
                        design.Stance = stance3;
                        design.FleeWhen = fleeWhen3;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.Evade;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    case BuiltObjectSubRole.TroopTransport:
                        design.Stance = stance7;
                        design.FleeWhen = fleeWhen7;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.AllWeapons;
                        design.TacticsInvasion = InvasionTactics.InvadeImmediately;
                        break;
                    case BuiltObjectSubRole.ResupplyShip:
                        design.Stance = stance7;
                        design.FleeWhen = fleeWhen7;
                        design.TacticsStrongerShips = BattleTactics.Evade;
                        design.TacticsWeakerShips = BattleTactics.AllWeapons;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                    default:
                        design.Stance = BuiltObjectStance.DoNotAttack;
                        design.FleeWhen = BuiltObjectFleeWhen.Attacked;
                        design.TacticsStrongerShips = BattleTactics.Standoff;
                        design.TacticsWeakerShips = BattleTactics.AllWeapons;
                        design.TacticsInvasion = InvasionTactics.DoNotInvade;
                        break;
                }
                int num = DesignPictureFamilyIndex;
                if (DominantRace != null && PirateEmpireBaseHabitat != null)
                {
                    num = DominantRace.DesignPictureFamilyIndexPirates;
                    if (num < 0)
                    {
                        num = DominantRace.DesignPictureFamilyIndex;
                    }
                }
                empty = (design.Name = GenerateDesignName(designSpec.SubRole, previousDesign));
                design.DateCreated = _Galaxy.CurrentStarDate;
                design.Empire = this;
                design.PictureRef = ShipImageHelper.StandardShipImageStartIndex + num * ShipImageHelper.ShipSetImageCount + (int)(Galaxy.ResolveLegacySubRole(designSpec.SubRole) - 1);
                design.Role = designSpec.Role;
                design.SubRole = designSpec.SubRole;
                design.ReDefine();
            }
            return design;
        }

        public void SetTaxRate(Galaxy galaxy, double taxRate)
        {
            _TaxRate = taxRate;
            double num = 0.0;
            for (int i = 0; i < galaxy.Empires.Count; i++)
            {
                Empire empire = galaxy.Empires[i];
                num += empire.TaxRate;
            }
            galaxy.AverageTaxRate = num / (double)galaxy.Empires.Count;
        }

        private string GenerateAutomationMessageColonyFacility(Habitat colony, PlanetaryFacilityDefinition facility)
        {
            return GenerateAutomationMessageColonyFacility(colony, facility, haveFunds: true);
        }

        private string GenerateAutomationMessageColonyFacility(Habitat colony, PlanetaryFacilityDefinition facility, bool haveFunds)
        {
            Habitat habitat = Galaxy.DetermineHabitatSystemStar(colony);
            string text = TextResolver.GetText("advisors");
            string text2 = string.Empty;
            switch (facility.Type)
            {
                case PlanetaryFacilityType.CloningFacility:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Cloning");
                    break;
                case PlanetaryFacilityType.RoboticTroopFoundry:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Robotic");
                    break;
                case PlanetaryFacilityType.TroopTrainingCenter:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Troop Academy");
                    break;
                case PlanetaryFacilityType.RegionalCapital:
                    text = TextResolver.GetText("bureaucrats");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Regional Capital");
                    break;
                case PlanetaryFacilityType.FortifiedBunker:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Bunker");
                    break;
                case PlanetaryFacilityType.ArmoredFactory:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Armored Factory");
                    break;
                case PlanetaryFacilityType.SpyAcademy:
                    text = TextResolver.GetText("advisors");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Spy Academy");
                    break;
                case PlanetaryFacilityType.ScienceAcademy:
                    text = TextResolver.GetText("advisors");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Science Academy");
                    break;
                case PlanetaryFacilityType.NavalAcademy:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Naval Academy");
                    break;
                case PlanetaryFacilityType.MilitaryAcademy:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Military Academy");
                    break;
                case PlanetaryFacilityType.IonCannon:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Ion Cannon");
                    break;
                case PlanetaryFacilityType.PlanetaryShield:
                    text = TextResolver.GetText("military planners");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Shield");
                    break;
                case PlanetaryFacilityType.PirateBase:
                    text = TextResolver.GetText("pirate council");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Pirate Base");
                    break;
                case PlanetaryFacilityType.PirateFortress:
                    text = TextResolver.GetText("pirate council");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Pirate Fortress");
                    break;
                case PlanetaryFacilityType.PirateCriminalNetwork:
                    text = TextResolver.GetText("pirate council");
                    text2 = TextResolver.GetText("Planetary Facility Explanation Pirate Criminal Network");
                    break;
                case PlanetaryFacilityType.Wonder:
                    text2 = facility.Description;
                    break;
            }
            double num = Galaxy.CalculatePlanetaryFacilityCost(facility, this);
            string empty = string.Empty;
            if (haveFunds)
            {
                return string.Format(TextResolver.GetText("Planetary Facility Build Recommendation With Maintenance"), text, facility.Name, colony.Name, habitat.Name, text2, num.ToString("###,###,###,##0"), facility.Maintenance.ToString("###,###,###,##0"));
            }
            return string.Format(TextResolver.GetText("Planetary Facility Build Recommendation Need Funds"), text, facility.Name, colony.Name, habitat.Name, text2, num.ToString("###,###,###,##0"));
        }

        private string GenerateAutomationMessageDefensiveBase(Habitat colony, Design baseDesign)
        {
            Habitat habitat = Galaxy.DetermineHabitatSystemStar(colony);
            return string.Format(arg2: baseDesign.CalculateCurrentPurchasePrice(_Galaxy).ToString("###,###,###,##0"), format: TextResolver.GetText("Automation Defensive Base"), arg0: colony.Name, arg1: habitat.Name);
        }

        private string GenerateAutomationMessageColonization(Habitat newColony, BuiltObject colonyShip, Habitat colonyShipBuildLocation)
        {
            Habitat habitat = Galaxy.DetermineHabitatSystemStar(newColony);
            string result = string.Empty;
            if (colonyShip != null)
            {
                result = string.Format(TextResolver.GetText("Automation Colonization Existing Ship"), Galaxy.ResolveDescription(newColony.Type).ToLower(CultureInfo.InvariantCulture), Galaxy.ResolveDescription(newColony.Category).ToLower(CultureInfo.InvariantCulture), newColony.Name, habitat.Name, colonyShip.Name);
            }
            else if (colonyShipBuildLocation != null)
            {
                Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(colonyShipBuildLocation);
                result = string.Format(TextResolver.GetText("Automation Colonization New Ship"), Galaxy.ResolveDescription(newColony.Type).ToLower(CultureInfo.InvariantCulture), Galaxy.ResolveDescription(newColony.Category).ToLower(CultureInfo.InvariantCulture), newColony.Name, habitat.Name, colonyShipBuildLocation.Name, habitat2.Name);
            }
            return result;
        }

        private string GenerateAutomationMessageConstruction(BuiltObject builtObject, Habitat habitat, double cost)
        {
            string text = string.Empty;
            string text2 = string.Empty;
            string text3 = string.Empty;
            string text4 = string.Empty;
            if (habitat != null)
            {
                Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                text3 = habitat.Name;
                text = Galaxy.ResolveDescription(habitat.Type);
                text2 = Galaxy.ResolveDescription(habitat.Category);
                text4 = habitat2.Name;
            }
            return string.Format(TextResolver.GetText("Automation Construction Colony"), Galaxy.ResolveDescription(builtObject.SubRole), builtObject.Design.Name, cost.ToString("###,###,###,##0"), text, text2, text3, text4);
        }

        private string GenerateAutomationMessageConstruction(ForceStructureProjectionList newForces, double cost)
        {
            string text = string.Empty;
            foreach (ForceStructureProjection newForce in newForces)
            {
                if (newForce.Amount > 0)
                {
                    text = text + newForce.Amount + " × ";
                    text = text + Galaxy.ResolveDescription(newForce.SubRole) + ", ";
                }
            }
            if (text.Length > 1)
            {
                text = text.Substring(0, text.Length - 2);
            }
            return string.Format(TextResolver.GetText("Automation Construction Forces"), text, cost.ToString("###,###,###,##0"));
        }

        private string GenerateAutomationMessageAttackForcesInOurSystem(Habitat systemStar, Empire otherEmpire)
        {
            return GenerateAutomationMessageAttackForcesInOurSystem(systemStar, otherEmpire, null, null);
        }

        private string GenerateAutomationMessageAttackForcesInOurSystem(Habitat systemStar, Empire otherEmpire, ShipGroup enemyFleet, ShipGroup ourFleet)
        {
            return string.Format(TextResolver.GetText("Automation Attack Forces In Our System"), otherEmpire.Name, systemStar.Name);
        }

        private string GenerateAutomationMessageAgentMission(IntelligenceMission mission)
        {
            string arg = string.Empty;
            if (mission.TargetEmpire != null)
            {
                arg = mission.TargetEmpire.Name;
            }
            return string.Format(TextResolver.GetText("Automation Intelligence Mission"), mission.Agent.Name, arg, Galaxy.ResolveDescription(mission, this));
        }

        private string GenerateAutomationMessagePrepareAttack(Empire enemyEmpire, object waypoint, object target, ShipGroup attackFleet)
        {
            string text = string.Empty;
            string text2 = string.Empty;
            Habitat habitat = null;
            if (waypoint is Habitat)
            {
                Habitat habitat2 = (Habitat)waypoint;
                text = habitat2.Name;
                habitat = Galaxy.DetermineHabitatSystemStar((Habitat)waypoint);
                text2 = habitat.Name;
            }
            else if (waypoint is BuiltObject)
            {
                text = ((BuiltObject)waypoint).Name;
                habitat = ((BuiltObject)waypoint).NearestSystemStar;
                text2 = habitat.Name;
            }
            string text3 = string.Empty;
            string text4 = string.Empty;
            Habitat habitat3 = null;
            if (target is Habitat)
            {
                text3 = ((Habitat)target).Name;
                habitat3 = Galaxy.DetermineHabitatSystemStar((Habitat)target);
                text4 = habitat3.Name;
            }
            else if (target is BuiltObject)
            {
                text3 = ((BuiltObject)target).Name;
                habitat3 = ((BuiltObject)target).NearestSystemStar;
                text4 = habitat3.Name;
            }
            else if (target is ShipGroup)
            {
                text3 = ((ShipGroup)target).Name;
                if (((ShipGroup)target).LeadShip != null)
                {
                    habitat3 = ((ShipGroup)target).LeadShip.NearestSystemStar;
                    text4 = habitat3.Name;
                }
            }
            return string.Format(TextResolver.GetText("Automation Prepare Attack"), enemyEmpire.Name, attackFleet.Name, text, text2, text3, text4);
        }

        private string GenerateAutomationMessageRaid(Empire targetEmpire)
        {
            return string.Format(TextResolver.GetText("Automation Raid"), targetEmpire.Name);
        }

        private string GenerateAutomationMessageAskedWar(Empire requestingEmpire, Empire targetEmpire)
        {
            return string.Format(TextResolver.GetText("Automation Assist War"), requestingEmpire.Name, targetEmpire.Name);
        }

        private string GenerateAutomationMessageAskedTradeSanctions(Empire requestingEmpire, Empire targetEmpire)
        {
            return string.Format(TextResolver.GetText("Automation Assist Trade Sanctions"), requestingEmpire.Name, targetEmpire.Name);
        }

        private string GenerateAutomationMessageInvadeIndependent(Habitat habitat, ShipGroup invasionFleet)
        {
            Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
            string text = string.Empty;
            string text2 = string.Empty;
            string text3 = string.Empty;
            string text4 = string.Empty;
            string text5 = string.Empty;
            string text6 = string.Empty;
            if (habitat2 != null)
            {
                text = habitat2.Name;
            }
            if (habitat != null)
            {
                text4 = habitat.Name;
                text5 = Galaxy.ResolveDescription(habitat.Type);
                text6 = Galaxy.ResolveDescription(habitat.Category).ToLower(CultureInfo.InvariantCulture);
                if (habitat.Population != null && habitat.Population.DominantRace != null)
                {
                    text2 = habitat.Population.DominantRace.Name;
                }
            }
            if (invasionFleet != null)
            {
                text3 = invasionFleet.Name;
            }
            return string.Format(TextResolver.GetText("Automation Invade Independent"), text5, text6, text4, text, text2, text3);
        }

        private string GenerateAutomationMessageAttackEnemy(ShipGroup shipGroup, ShipGroup attackFleet)
        {
            string arg = string.Empty;
            if (shipGroup != null && shipGroup.Empire != null)
            {
                arg = shipGroup.Empire.Name;
            }
            return string.Format(TextResolver.GetText("Automation Attack Enemy Fleet"), shipGroup.Name, arg, attackFleet.Name);
        }

        private string GenerateAutomationMessageWaypointFleet(ShipGroup fleet, StellarObject waypoint, Empire enemyEmpire)
        {
            string text = "the ";
            if (fleet.Name.ToLower(CultureInfo.InvariantCulture).StartsWith("the"))
            {
                text = string.Empty;
            }
            Habitat habitat = null;
            if (fleet.LeadShip != null)
            {
                habitat = fleet.LeadShip.NearestSystemStar;
            }
            Habitat habitat2 = null;
            if (waypoint != null)
            {
                if (waypoint is Habitat)
                {
                    habitat2 = Galaxy.DetermineHabitatSystemStar((Habitat)waypoint);
                }
                else if (waypoint is BuiltObject)
                {
                    habitat2 = Galaxy.DetermineHabitatSystemStar(((BuiltObject)waypoint).NearestSystemStar);
                }
            }
            string text2 = "Our military advisors recommend that we ";
            string text3 = text2;
            text2 = text3 + "move " + text + fleet.Name + " ";
            if (habitat != null)
            {
                text2 = text2 + "from the " + habitat.Name + " system ";
            }
            text2 = text2 + "to " + waypoint.Name;
            if (habitat2 != null)
            {
                text2 = text2 + " in the " + habitat2.Name + " system";
            }
            text2 += ".\n\n";
            text2 = text2 + "This would put the fleet within strike range of our enemy, the " + enemyEmpire.Name + ".\n\n";
            return text2 + "Should we move this fleet?";
        }

        private string GenerateAutomationMessageRaidBase(BuiltObject target, ShipGroup attackFleet)
        {
            string result = string.Empty;
            if (target != null && attackFleet != null)
            {
                string text = string.Empty;
                if (target.ParentHabitat != null)
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar(target.ParentHabitat);
                    text = habitat.Name;
                }
                result = ((target.Empire == null) ? string.Format(TextResolver.GetText("Automation Raid Base"), target.Name, string.Empty, text, attackFleet.Name) : string.Format(TextResolver.GetText("Automation Raid Base"), target.Name, target.Empire.Name, text, attackFleet.Name));
            }
            return result;
        }

        private string GenerateAutomationMessageRaidColony(Habitat target, ShipGroup attackFleet)
        {
            string result = string.Empty;
            if (target != null && attackFleet != null)
            {
                Habitat habitat = Galaxy.DetermineHabitatSystemStar(target);
                string name = habitat.Name;
                result = ((target.Empire == _Galaxy.IndependentEmpire) ? string.Format(TextResolver.GetText("Automation Raid Independent Colony"), target.Name, name, attackFleet.Name) : ((target.Empire == null) ? string.Format(TextResolver.GetText("Automation Raid Colony"), target.Name, string.Empty, name, attackFleet.Name) : string.Format(TextResolver.GetText("Automation Raid Colony"), target.Name, target.Empire.Name, name, attackFleet.Name)));
            }
            return result;
        }

        private string GenerateAutomationMessageAttackPirateBase(BuiltObject pirateBase, ShipGroup attackFleet)
        {
            string text = string.Empty;
            if (pirateBase.ParentHabitat != null)
            {
                Habitat habitat = Galaxy.DetermineHabitatSystemStar(pirateBase.ParentHabitat);
                text = habitat.Name;
            }
            return string.Format(TextResolver.GetText("Automation Attack Pirate Base"), pirateBase.Name, pirateBase.Empire.Name, text, attackFleet.Name);
        }

        public string GenerateAutomationMessageAttackPirateFacility(Habitat colony, Empire pirateFaction, PlanetaryFacility pirateFacility)
        {
            string text = string.Empty;
            string text2 = string.Empty;
            if (colony != null)
            {
                text = colony.Name;
                text2 = Galaxy.DetermineHabitatSystemStar(colony).Name;
            }
            return string.Format(TextResolver.GetText("Automation Attack Pirate Facility"), text, text2, pirateFaction.Name, pirateFacility.Name);
        }

        private string GenerateAutomationMessagePiratesAttackPirates(BuiltObject attackTarget, ShipGroup attackFleet)
        {
            string text = string.Empty;
            if (attackTarget.ParentHabitat != null)
            {
                Habitat habitat = Galaxy.DetermineHabitatSystemStar(attackTarget.ParentHabitat);
                text = habitat.Name;
            }
            return string.Format(TextResolver.GetText("Automation Pirate Attack Pirate"), attackTarget.Empire.Name, attackTarget.Name, text, attackFleet.Name);
        }

        private string GenerateAutomationMessagePiratesAttackMission(EmpireActivity attackMission, ShipGroup attackFleet)
        {
            string text = string.Empty;
            string text2 = string.Empty;
            string text3 = string.Empty;
            string text4 = string.Empty;
            if (attackMission != null && attackMission.TargetEmpire != null && attackMission.RequestingEmpire != null && attackMission.Target != null)
            {
                text4 = attackMission.TargetEmpire.Name;
                text = attackMission.Target.Name;
                text3 = attackMission.RequestingEmpire.Name;
                if (attackMission.Target.ParentHabitat != null)
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar(attackMission.Target.ParentHabitat);
                    text2 = habitat.Name;
                }
            }
            return string.Format(TextResolver.GetText("Automation Pirate Attack Mission"), text3, text, text4, text2, attackFleet.Name);
        }

        private string GenerateAutomationMessagePiratesDefendMission(EmpireActivity defendMission, ShipGroup defendFleet)
        {
            string text = string.Empty;
            string text2 = string.Empty;
            string text3 = string.Empty;
            string text4 = string.Empty;
            if (defendMission != null && defendMission.TargetEmpire != null && defendMission.RequestingEmpire != null && defendMission.Target != null)
            {
                text4 = defendMission.TargetEmpire.Name;
                text = defendMission.Target.Name;
                text3 = defendMission.RequestingEmpire.Name;
                if (defendMission.Target.ParentHabitat != null)
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar(defendMission.Target.ParentHabitat);
                    text2 = habitat.Name;
                }
            }
            return string.Format(TextResolver.GetText("Automation Pirate Defend Mission"), text3, text, text4, text2, defendFleet.Name);
        }

        private string GenerateAutomationMessageAttackEnemy(BuiltObject builtObject, ShipGroup attackFleet)
        {
            return GenerateAutomationMessageAttackEnemy(builtObject, blockade: false, attackFleet);
        }

        private string GenerateAutomationMessageAttackEnemy(BuiltObject builtObject, bool blockade, ShipGroup attackFleet)
        {
            string text = string.Empty;
            if (builtObject.NearestSystemStar != null)
            {
                text = builtObject.NearestSystemStar.Name;
            }
            else
            {
                Habitat habitat = _Galaxy.FastFindNearestSystem(builtObject.Xpos, builtObject.Ypos);
                if (habitat != null)
                {
                    text = habitat.Name;
                }
            }
            string text2 = string.Empty;
            if (attackFleet != null)
            {
                text2 = attackFleet.Name;
            }
            string empty = string.Empty;
            string text3 = string.Empty;
            if (builtObject != null && builtObject.Empire != null)
            {
                text3 = builtObject.Empire.Name;
            }
            if (blockade)
            {
                return string.Format(TextResolver.GetText("Automation Blockade Enemy Base"), builtObject.Name, text3, text, text2);
            }
            return string.Format(TextResolver.GetText("Automation Attack Enemy Base"), builtObject.Name, text3, text, text2);
        }

        private string GenerateAutomationMessageAttackEnemy(Habitat habitat, ShipGroup attackFleet)
        {
            return GenerateAutomationMessageAttackEnemy(habitat, blockade: false, attackFleet);
        }

        private string GenerateAutomationMessageRequestLiftTradeSanctions(Empire targetEmpire, Empire friendEmpire)
        {
            return string.Format(TextResolver.GetText("Automation Request Lift Trade Sanctions"), friendEmpire.Name, targetEmpire.Name);
        }

        private string GenerateAutomationMessageRequestEndWar(Empire targetEmpire, Empire friendEmpire)
        {
            return string.Format(TextResolver.GetText("Automation Request End War"), friendEmpire.Name, targetEmpire.Name);
        }

        private string GenerateAutomationMessageRequestLeaveSystem(Empire empire, Habitat systemStar)
        {
            return string.Format(TextResolver.GetText("Automation Request Leave System"), empire.Name, systemStar.Name);
        }

        private string GenerateAutomationMessageMilitaryRefueling(Empire empire, bool refuel)
        {
            string empty = string.Empty;
            if (refuel)
            {
                return string.Format(TextResolver.GetText("Military Refueling Check Offer"), empire.Name);
            }
            return string.Format(TextResolver.GetText("Military Refueling Check Cancel"), empire.Name);
        }

        private string GenerateAutomationMessageMiningRights(Empire empire, bool allowMining)
        {
            string empty = string.Empty;
            if (allowMining)
            {
                return string.Format(TextResolver.GetText("Mining Rights Check Offer"), empire.Name);
            }
            return string.Format(TextResolver.GetText("Mining Rights Check Cancel"), empire.Name);
        }

        private string GenerateAutomationMessageTradeRestrictedResources(Empire empire, bool trade)
        {
            bool plural = false;
            string arg = GenerateEmpireRestrictedResourcesDescription(out plural);
            string empty = string.Empty;
            if (trade)
            {
                return string.Format(TextResolver.GetText("Automation Trade Restricted Resources"), arg, empire.Name);
            }
            return string.Format(TextResolver.GetText("Automation Terminate Restricted Resources"), arg, empire.Name);
        }

        private string GenerateAutomationMessageDestroyPlanet(Habitat habitat, BuiltObject planetDestroyer)
        {
            Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
            string text = string.Empty;
            if (habitat != null && habitat.Empire != null)
            {
                text = habitat.Empire.Name;
            }
            return string.Format(TextResolver.GetText("Automation Destroy Planet"), Galaxy.ResolveDescription(habitat.Type), Galaxy.ResolveDescription(habitat.Category).ToLower(CultureInfo.InvariantCulture), habitat.Name, text, habitat2.Name, planetDestroyer.Name);
        }

        private string GenerateAutomationMessageBombardColony(Habitat habitat, ShipGroup attackFleet)
        {
            Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
            string text = string.Empty;
            if (habitat.Population != null && habitat.Population.DominantRace != null)
            {
                text = habitat.Population.DominantRace.Name;
            }
            return string.Format(TextResolver.GetText("Automation Bombard Colony"), Galaxy.ResolveDescription(habitat.Type), Galaxy.ResolveDescription(habitat.Category), habitat.Name, habitat.Empire.Name, habitat2.Name, text, attackFleet.Name);
        }

        private string GenerateAutomationMessageAttackEnemyWithWaypoint(StellarObject target, bool blockade, ShipGroup attackFleet, StellarObject waypoint)
        {
            string text = string.Empty;
            if (attackFleet != null)
            {
                text = attackFleet.Name;
            }
            string empty = string.Empty;
            if (blockade)
            {
                if (target is Habitat)
                {
                    Habitat habitat = (Habitat)target;
                    Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
                    return string.Format(TextResolver.GetText("Automation Blockade Enemy Colony With Waypoint"), Galaxy.ResolveDescription(habitat.Type), Galaxy.ResolveDescription(habitat.Category), habitat.Name, target.Empire.Name, habitat2.Name, text, waypoint.Name);
                }
                string text2 = string.Empty;
                if (target is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)target;
                    if (builtObject != null && builtObject.NearestSystemStar != null)
                    {
                        text2 = builtObject.NearestSystemStar.Name;
                    }
                }
                return string.Format(TextResolver.GetText("Automation Blockade Enemy Base With Waypoint"), target.Name, target.Empire.Name, text2, text, waypoint.Name);
            }
            if (target is Habitat)
            {
                Habitat habitat3 = (Habitat)target;
                Habitat habitat4 = Galaxy.DetermineHabitatSystemStar(habitat3);
                return string.Format(TextResolver.GetText("Automation Attack Enemy Colony With Waypoint"), Galaxy.ResolveDescription(habitat3.Type), Galaxy.ResolveDescription(habitat3.Category), habitat3.Name, target.Empire.Name, habitat4.Name, text, waypoint.Name);
            }
            string text3 = string.Empty;
            if (target is BuiltObject)
            {
                BuiltObject builtObject2 = (BuiltObject)target;
                if (builtObject2 != null && builtObject2.NearestSystemStar != null)
                {
                    text3 = builtObject2.NearestSystemStar.Name;
                }
            }
            return string.Format(TextResolver.GetText("Automation Attack Enemy Base With Waypoint"), target.Name, target.Empire.Name, text3, text, waypoint.Name);
        }

        private string GenerateAutomationMessageAttackEnemy(Habitat habitat, bool blockade, ShipGroup attackFleet)
        {
            string text = string.Empty;
            if (attackFleet != null)
            {
                text = attackFleet.Name;
            }
            Habitat habitat2 = Galaxy.DetermineHabitatSystemStar(habitat);
            string empty = string.Empty;
            string text2 = string.Empty;
            if (habitat != null && habitat.Empire != null)
            {
                text2 = habitat.Empire.Name;
            }
            if (blockade)
            {
                return string.Format(TextResolver.GetText("Automation Blockade Enemy Colony"), Galaxy.ResolveDescription(habitat.Type), Galaxy.ResolveDescription(habitat.Category), habitat.Name, text2, habitat2.Name, text);
            }
            return string.Format(TextResolver.GetText("Automation Attack Enemy Colony"), Galaxy.ResolveDescription(habitat.Type), Galaxy.ResolveDescription(habitat.Category), habitat.Name, text2, habitat2.Name, text);
        }

        private string GenerateAutomationMessageOfferPirateAttackMission(EmpireActivity attackMission)
        {
            string result = string.Empty;
            if (attackMission != null && attackMission.Type == EmpireActivityType.Attack && attackMission.Target != null && attackMission.TargetEmpire != null)
            {
                string text = string.Empty;
                if (attackMission.Target is BuiltObject)
                {
                    Habitat nearestSystemStar = ((BuiltObject)attackMission.Target).NearestSystemStar;
                    if (nearestSystemStar != null)
                    {
                        text = nearestSystemStar.Name;
                    }
                }
                else if (attackMission.Target is Habitat)
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar((Habitat)attackMission.Target);
                    if (habitat != null)
                    {
                        text = habitat.Name;
                    }
                }
                result = string.Format(TextResolver.GetText("Offer Pirate Attack Mission Advisor Suggestion"), attackMission.Target.Name, attackMission.TargetEmpire.Name, text, attackMission.Price.ToString("0"));
            }
            return result;
        }

        private string GenerateAutomationMessageOfferPirateDefendMission(EmpireActivity defendMission)
        {
            string result = string.Empty;
            if (defendMission != null && defendMission.Type == EmpireActivityType.Defend && defendMission.Target != null && defendMission.TargetEmpire != null)
            {
                string arg = string.Empty;
                if (defendMission.Target is BuiltObject)
                {
                    Habitat nearestSystemStar = ((BuiltObject)defendMission.Target).NearestSystemStar;
                    if (nearestSystemStar != null)
                    {
                        arg = nearestSystemStar.Name;
                    }
                }
                else if (defendMission.Target is Habitat)
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar((Habitat)defendMission.Target);
                    if (habitat != null)
                    {
                        arg = habitat.Name;
                    }
                }
                result = string.Format(TextResolver.GetText("Offer Pirate Defend Mission Advisor Suggestion"), defendMission.Target.Name, arg, defendMission.Price.ToString("0"));
            }
            return result;
        }

        private string GenerateAutomationMessageOfferPirateSmuggleMission(EmpireActivity smuggleMission)
        {
            string result = string.Empty;
            if (smuggleMission != null && smuggleMission.Type == EmpireActivityType.Smuggle && smuggleMission.Target != null && smuggleMission.TargetEmpire != null)
            {
                string text = string.Empty;
                if (smuggleMission.Target is BuiltObject)
                {
                    Habitat nearestSystemStar = ((BuiltObject)smuggleMission.Target).NearestSystemStar;
                    if (nearestSystemStar != null)
                    {
                        text = nearestSystemStar.Name;
                    }
                }
                else if (smuggleMission.Target is Habitat)
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar((Habitat)smuggleMission.Target);
                    if (habitat != null)
                    {
                        text = habitat.Name;
                    }
                }
                result = ((smuggleMission.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Offer Pirate Smuggle Mission Advisor Suggestion"), smuggleMission.Target.Name, text, new Resource(smuggleMission.ResourceId).Name, (smuggleMission.Price * 100.0).ToString("0.#")) : string.Format(TextResolver.GetText("Offer Pirate Smuggle Mission All Resources Advisor Suggestion"), smuggleMission.Target.Name, text, (smuggleMission.Price * 100.0).ToString("0.#")));
            }
            return result;
        }

        private string GenerateAutomationMessageAcceptPirateSmuggleMission(EmpireActivity smuggleMission)
        {
            string result = string.Empty;
            if (smuggleMission != null && smuggleMission.Type == EmpireActivityType.Smuggle && smuggleMission.Target != null && smuggleMission.TargetEmpire != null)
            {
                string text = string.Empty;
                if (smuggleMission.Target is BuiltObject)
                {
                    Habitat nearestSystemStar = ((BuiltObject)smuggleMission.Target).NearestSystemStar;
                    if (nearestSystemStar != null)
                    {
                        text = nearestSystemStar.Name;
                    }
                }
                else if (smuggleMission.Target is Habitat)
                {
                    Habitat habitat = Galaxy.DetermineHabitatSystemStar((Habitat)smuggleMission.Target);
                    if (habitat != null)
                    {
                        text = habitat.Name;
                    }
                }
                result = ((smuggleMission.RequestingEmpire == _Galaxy.IndependentEmpire) ? ((smuggleMission.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Accept Pirate Smuggle Mission Independent Advisor Suggestion"), new Resource(smuggleMission.ResourceId).Name, smuggleMission.Target.Name, text, (smuggleMission.Price * 100.0).ToString("0.#")) : string.Format(TextResolver.GetText("Accept Pirate Smuggle Mission Independent All Resources Advisor Suggestion"), smuggleMission.Target.Name, text, (smuggleMission.Price * 100.0).ToString("0.#"))) : ((smuggleMission.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Accept Pirate Smuggle Mission Advisor Suggestion"), smuggleMission.RequestingEmpire.Name, new Resource(smuggleMission.ResourceId).Name, smuggleMission.Target.Name, text, (smuggleMission.Price * 100.0).ToString("0.#")) : string.Format(TextResolver.GetText("Accept Pirate Smuggle Mission All Resources Advisor Suggestion"), smuggleMission.RequestingEmpire.Name, smuggleMission.Target.Name, text, (smuggleMission.Price * 100.0).ToString("0.#"))));
            }
            return result;
        }

        private string GenerateAutomationMessageDiplomaticGift(Empire empire, double moneyAmount)
        {
            return string.Format(TextResolver.GetText("Automation Give Gift"), moneyAmount.ToString("###,###,###,##0"), empire.Name);
        }

        private string GenerateAutomationMessageCancelPirateProtection(Empire empire, double monthlyFee)
        {
            string result = string.Empty;
            if (empire != null)
            {
                result = ((PirateEmpireBaseHabitat == null || empire.PirateEmpireBaseHabitat == null) ? string.Format(TextResolver.GetText("Automation Pirate Cancel Protection"), empire.Name, monthlyFee.ToString("0")) : string.Format(TextResolver.GetText("Automation Pirate Cancel Protection To Pirates"), empire.Name));
            }
            return result;
        }

        private string GenerateAutomationMessagePirateProtection(Empire empire, double monthlyFee)
        {
            string result = string.Empty;
            if (empire != null)
            {
                result = string.Format(TextResolver.GetText("Automation Pirate Offer Protection"), empire.Name, monthlyFee.ToString("0"));
            }
            return result;
        }

        private string GenerateAutomationMessagePirateProtectionToPirates(Empire empire)
        {
            string result = string.Empty;
            if (empire != null)
            {
                result = string.Format(TextResolver.GetText("Automation Pirate Offer Protection To Pirates"), empire.Name);
            }
            return result;
        }

        private string GenerateAutomationMessageTreaty(Empire empire, DiplomaticRelationType relationType)
        {
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
            string empty = string.Empty;
            if (relationType == DiplomaticRelationType.None)
            {
                if (diplomaticRelation.Type == DiplomaticRelationType.SubjugatedDominion)
                {
                    if (diplomaticRelation.Initiator == this)
                    {
                        return string.Format(TextResolver.GetText("Automation Free From Subjugation"), empire.Name);
                    }
                    return string.Format(TextResolver.GetText("Automation Request Release From Subjugation"), empire.Name);
                }
                return string.Format(TextResolver.GetText("Automation Cancel Treaty"), empire.Name);
            }
            return string.Format(TextResolver.GetText("Automation Offer Treaty"), empire.Name, Galaxy.ResolveDescription(relationType));
        }

        private string GenerateAutomationMessageWarTradeSanctions(Empire empire, DiplomaticRelationType relationType)
        {
            string result = string.Empty;
            DiplomaticRelation diplomaticRelation = ObtainDiplomaticRelation(empire);
            switch (relationType)
            {
                case DiplomaticRelationType.None:
                    result = ((diplomaticRelation.Type != DiplomaticRelationType.War) ? ((diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions) ? string.Format(TextResolver.GetText("Automation Cancel Treaty"), empire.Name) : string.Format(TextResolver.GetText("Automation Lift Trade Sanctions"), empire.Name)) : string.Format(TextResolver.GetText("Automation End War"), empire.Name));
                    break;
                case DiplomaticRelationType.War:
                    result = string.Format(TextResolver.GetText("Automation Declare War"), empire.Name);
                    break;
                case DiplomaticRelationType.TradeSanctions:
                    result = string.Format(TextResolver.GetText("Automation Initiate Trade Sanctions"), empire.Name);
                    break;
                case DiplomaticRelationType.SubjugatedDominion:
                    result = string.Format(TextResolver.GetText("Automation Subjugated Dominion"), empire.Name);
                    break;
            }
            return result;
        }

        public static GovernmentAttributesList DetermineMostSuitableGovermentTypes(Race race, List<int> allowableGovernmentTypes)
        {
            return DetermineMostSuitableGovermentTypes(race, allowableGovernmentTypes, 3);
        }

        public static GovernmentAttributesList DetermineMostSuitableGovermentTypes(Race race, List<int> allowableGovernmentTypes, int maximumCount)
        {
            int bracket = 0;
            DetermineRacialCharacteristicFactor(race.AggressionLevel, out bracket);
            int bracket2 = 0;
            DetermineRacialCharacteristicFactor(race.CautionLevel, out bracket2);
            int bracket3 = 0;
            DetermineRacialCharacteristicFactor(race.IntelligenceLevel, out bracket3);
            int bracket4 = 0;
            DetermineRacialCharacteristicFactor(race.FriendlinessLevel, out bracket4);
            GovernmentAttributesList governmentAttributesList = new GovernmentAttributesList();
            for (int i = 0; i < Galaxy.GovernmentsStatic.Count; i++)
            {
                GovernmentAttributes governmentAttributes = Galaxy.GovernmentsStatic[i];
                if (governmentAttributes != null)
                {
                    double num = 1.0 - governmentAttributes.WarWeariness + (governmentAttributes.TroopRecruitment - 1.0);
                    double num2 = (governmentAttributes.TroopRecruitment - 1.0) * 0.5 + (1.0 - governmentAttributes.MaintenanceCosts) * 0.5;
                    double num3 = governmentAttributes.ResearchSpeed - 1.0 + (1.0 - governmentAttributes.MaintenanceCosts) + (1.0 - governmentAttributes.Corruption);
                    double num4 = governmentAttributes.TradeBonus - 1.0 + (governmentAttributes.ApprovalRating - 1.0) + (governmentAttributes.PopulationGrowth - 1.0);
                    double num5 = 0.0;
                    num5 += (double)(race.AggressionLevel - 100) / 100.0 * num;
                    num5 += (double)(race.CautionLevel - 100) / 100.0 * num2;
                    num5 += (double)(race.IntelligenceLevel - 100) / 100.0 * num3;
                    num5 += (double)(race.FriendlinessLevel - 100) / 100.0 * num4;
                    if (governmentAttributes.Availability != 0)
                    {
                        num5 += 2.0;
                    }
                    if (allowableGovernmentTypes.Contains(governmentAttributes.GovernmentId))
                    {
                        governmentAttributes.SortTag = (float)num5;
                        governmentAttributesList.Add(governmentAttributes);
                    }
                }
            }
            governmentAttributesList.Sort();
            governmentAttributesList.Reverse();
            if (governmentAttributesList.Count > maximumCount)
            {
                GovernmentAttributesList governmentAttributesList2 = new GovernmentAttributesList();
                for (int j = 0; j < maximumCount; j++)
                {
                    governmentAttributesList2.Add(governmentAttributesList[j]);
                }
                return governmentAttributesList2;
            }
            return governmentAttributesList;
        }

        public void ChangeGovernment(int governmentId)
        {
            GovernmentAttributes governmentAttributes = _Galaxy.Governments[governmentId];
            GovernmentAttributes governmentAttributes2 = _Galaxy.Governments[_GovernmentId];
            bool flag = false;
            if (governmentAttributes2.SpecialFunctionCode == 1)
            {
                flag = true;
            }
            _GovernmentId = governmentId;
            _GovernmentAttributes = governmentAttributes;
            for (int i = 0; i < _Galaxy.Empires.Count; i++)
            {
                Empire empire = _Galaxy.Empires[i];
                if (empire != null && empire.Active && empire != this && empire != _Galaxy.IndependentEmpire && empire.PirateEmpireBaseHabitat == null)
                {
                    EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(this);
                    empireEvaluation.GovernmentStyleAffinity = 0;
                    empireEvaluation.GovernmentStyleAffinityCumulative = 0.0;
                }
            }
            if (flag)
            {
                ReviewTaxes();
            }
        }

        public static int SelectSuitableGovernment(Race race, int excludeId, List<int> allowableGovernmentTypes)
        {
            GovernmentAttributesList governmentAttributesList = DetermineMostSuitableGovermentTypes(race, allowableGovernmentTypes);
            int result = -1;
            if (governmentAttributesList.Count > 0)
            {
                result = governmentAttributesList[0].GovernmentId;
                int num = -1;
                for (int i = 0; i < governmentAttributesList.Count; i++)
                {
                    if (governmentAttributesList[i].Availability == 1)
                    {
                        num = i;
                        break;
                    }
                }
                int num2 = 0;
                if (num >= 0)
                {
                    num2 = num;
                }
                int num3 = Galaxy.Rnd.Next(0, governmentAttributesList.Count + 1);
                if (num3 == governmentAttributesList.Count)
                {
                    num3 = num2;
                }
                if (excludeId >= 0)
                {
                    int iterationCount = 0;
                    while (Galaxy.ConditionCheckLimit(governmentAttributesList[num3].GovernmentId == excludeId, 20, ref iterationCount))
                    {
                        num3 = Galaxy.Rnd.Next(0, 4);
                        if (num3 == 3)
                        {
                            num3 = num2;
                        }
                    }
                }
                result = governmentAttributesList[num3].GovernmentId;
            }
            return result;
        }

        public int HaveRevolution(Race dominantRace)
        {
            return HaveRevolution(dominantRace, -1);
        }

        public int HaveRevolution(Race dominantRace, int governmentId)
        {
            return HaveRevolution(dominantRace, governmentId, 1.0);
        }

        public int HaveRevolution(Race dominantRace, int governmentId, double damageFactor)
        {
            int governmentId2 = _GovernmentId;
            if (governmentId == -1)
            {
                governmentId = SelectSuitableGovernment(dominantRace, _GovernmentId, _AllowableGovernmentTypes);
                if (governmentId >= 0)
                {
                    int iterationCount = 0;
                    while (Galaxy.ConditionCheckLimit(governmentId == governmentId2, 20, ref iterationCount))
                    {
                        governmentId = SelectSuitableGovernment(dominantRace, _GovernmentId, _AllowableGovernmentTypes);
                    }
                }
            }
            if (governmentId >= 0)
            {
                for (int i = 0; i < Colonies.Count; i++)
                {
                    Habitat habitat = Colonies[i];
                    int num = Galaxy.Rnd.Next(0, 25);
                    num = (int)((double)num * damageFactor);
                    num = Math.Min(num, habitat.GetDevelopmentLevel());
                    long num2 = habitat.Population.TotalAmount / 10;
                    num2 = (long)((double)num2 * damageFactor);
                    if (num2 > 2000000000)
                    {
                        num2 = 2000000000L;
                    }
                    int num3 = Galaxy.Rnd.Next(0, (int)num2);
                    num3 = (int)Math.Min(num3, habitat.Population[0].Amount);
                    habitat.SetDevelopmentLevel(habitat.GetDevelopmentLevel() - num);
                    habitat.Population[0].Amount -= num3;
                    if (habitat.Population[0].Amount < 10000000)
                    {
                        habitat.Population[0].Amount = 10000000L;
                    }
                    habitat.Population.RecalculateTotalAmount();
                    _Galaxy.DoCharacterEvent(CharacterEventType.ColonyDevelopmentDecrease, habitat, habitat.Characters, includeLeader: true, habitat.Empire);
                }
                double num4 = 0.0;
                GovernmentAttributes governmentAttributes = _Galaxy.Governments[governmentId];
                num4 = governmentAttributes.LeaderReplacementDisruptionLevel;
                if (num4 > 0.0)
                {
                    double num5 = 0.7 + Galaxy.Rnd.NextDouble() * 0.3;
                    int num6 = (int)(num5 * num4 * ((double)Colonies.Count * 0.1));
                    for (int j = 0; j < num6; j++)
                    {
                        int index = Galaxy.Rnd.Next(0, Colonies.Count);
                        if (Capital != Colonies[index])
                        {
                            Colonies[index].LeaveEmpire();
                        }
                    }
                }
                ChangeGovernment(governmentId);
            }
            return governmentId;
        }

        public bool CanDeployXaraktorVirus(out Plague xaraktorVirus, out string cannotDeployReason)
        {
            xaraktorVirus = null;
            cannotDeployReason = string.Empty;
            if (Research != null && Research.EnabledPlagues != null && Research.EnabledPlagues.Count > 0)
            {
                xaraktorVirus = Research.EnabledPlagues.GetFirstBySpecialFunctionCode(1);
                if (xaraktorVirus != null)
                {
                    if (Colonies != null && Colonies.Count > 0)
                    {
                        int num = Colonies.CountColoniesWithFacilityType(PlanetaryFacilityType.Wonder, WonderType.RaceAchievement, 2);
                        if (num > 0)
                        {
                            if (_Galaxy.CurrentDateTime.Subtract(LastXaraktorVirusDeploy).TotalSeconds > 150.0)
                            {
                                return true;
                            }
                            cannotDeployReason = TextResolver.GetText("Cannot Deploy Xaraktor Virus - too soon");
                        }
                        else
                        {
                            cannotDeployReason = TextResolver.GetText("Cannot Deploy Xaraktor Virus - no facility");
                        }
                    }
                    else
                    {
                        cannotDeployReason = TextResolver.GetText("Cannot Deploy Xaraktor Virus - no facility");
                    }
                }
            }
            return false;
        }

        private static int DetermineRacialCharacteristicFactor(int characteristicRating, out int bracket)
        {
            int result = 0;
            bracket = 0;
            if (characteristicRating < 85)
            {
                bracket = -1;
                result = 85 - characteristicRating;
            }
            else if (characteristicRating >= 85 && characteristicRating <= 115)
            {
                bracket = 0;
                result = 16 - Math.Abs(characteristicRating - 100);
            }
            else if (characteristicRating > 115)
            {
                bracket = 1;
                result = characteristicRating - 115;
            }
            return result;
        }

        int IComparable<Empire>.CompareTo(Empire other)
        {
            return Name.CompareTo(other.Name);
        }
    }
}
