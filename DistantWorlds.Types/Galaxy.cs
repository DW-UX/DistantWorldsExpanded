// Decompiled with JetBrains decompiler
// Type: DistantWorlds.Types.Galaxy
// Assembly: DistantWorlds.Types, Version=1.9.5.12, Culture=neutral, PublicKeyToken=null
// MVID: C87DBA0E-BD3A-46BA-A8F0-EE9F5E5721E2
// Assembly location: H:\7\DistantWorlds.Types.dll

using BaconDistantWorlds;

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace DistantWorlds.Types
{
    [Serializable]
    public class Galaxy
    {
        public object _LockObject = new object();

        public string Title = string.Empty;

        public string Description = string.Empty;

        public GameEventList GameEvents = new GameEventList();

        public static List<Bitmap> FlagShapes;

        public static List<Bitmap> FlagShapesPirates;

        private RaceList _RaceList = new RaceList();

        private static CharacterList _CharacterList;

        public static DesignSpecificationList DesignSpecifications;

        private CreatureList _Creatures = new CreatureList();

        private RaceList _ContinentalRaces = new RaceList();

        private RaceList _MarshySwampRaces = new RaceList();

        private RaceList _DesertRaces = new RaceList();

        private RaceList _OceanRaces = new RaceList();

        private RaceList _IceRaces = new RaceList();

        private RaceList _VolcanicRaces = new RaceList();

        private RaceList _BarrenRockRaces = new RaceList();

        private RaceList _WidespreadRaces = new RaceList();

        private bool[] _RaceUsed;

        private List<int> _RaceIndependentColonyCount = new List<int>();

        private DateTime _LastGalaxyProcessTimeSensitive = DateTime.Now.ToUniversalTime().Subtract(new TimeSpan(0, 0, 1));

        private DateTime _LastGalaxyProcessTime = DateTime.Now.ToUniversalTime().Subtract(new TimeSpan(0, 2, 0));

        private DateTime _LastGalaxyHugeProcessTime = DateTime.Now.ToUniversalTime().Subtract(new TimeSpan(0, 10, 0));

        [OptionalField]
        public bool ResetRandom;

        [ThreadStatic]
        private static Random _Rnd;

        [ThreadStatic]
        private static CryptoRandom _CryptoRnd;

        private int _RandomSeed;

        public volatile bool _Reindexing;

        public static int IndexMaxX;

        public static int IndexMaxY;

        public static int SizeX;

        public static int SizeY;

        public static readonly int IndexSize;

        public static int SectorMaxX;

        public static int SectorMaxY;

        public static int SectorSizeX;

        public static int SectorSizeY;

        public static readonly int SectorSize;

        public int SectorWidth = 10;

        public int SectorHeight = 10;

        public string CustomizationSetPath;

        public string ApplicationStartupPath;

        private EmpireTerritory _EmpireTerritory = new EmpireTerritory();

        private double _ResearchSpeedModifier;

        private List<string> SystemNames = new List<string>();

        private List<bool> SystemNamesUsedPlain = new List<bool>();

        private List<bool> SystemNamesUsedAlternative = new List<bool>();

        private List<string[]> _DesignNames = new List<string[]>();

        private int _NextBuiltObjectID;

        private int _NextFighterID;

        private int _NextEmpireID;

        private int _NextCreatureID;

        private List<string[]> _AgentFirstNames = new List<string[]>();

        private List<string[]> _AgentLastNames = new List<string[]>();

        private SubRoleNameSet _SubRoleNameSet;

        [OptionalField]
        public List<string> ColonyNames = new List<string>();

        [OptionalField]
        public int ColonyNameIndex;

        public static int HyperJumpThreshhold;

        public static double BaseHyperJumpAccuracy;

        public static int HyperJumpKickout;

        public static readonly int ThreatRange;

        public static readonly double StrikeRangeSquared;

        public static readonly int PatrolOrbitDistance;

        public static readonly int EscortRange;

        public static readonly int MaxSolarSystemSize;

        public static readonly int MaxMoonOrbitSize;

        public static readonly int MovementPrecision;

        public static readonly int InvasionDropoffRange;

        public static readonly int MovementDecelerationRangeInvasion;

        public static readonly int MovementDecelerationRange;

        public static readonly int MovementImpulseSpeed;

        public static readonly int UndockRange;

        public static readonly int RefuelRate;

        public static readonly int ImpulseMargin;

        public static readonly int ParentRelativeRange;

        public static readonly int ParentRelativeRangeSquared;

        public static readonly int EscapeSprintDistance;

        public static readonly int EscapeHyperDistance;

        public static readonly int ExplosionExpansionRate;

        public static readonly int ExplosionMinimumLifetime;

        public static readonly int ExplosionImageCount;

        public static readonly int ExplosionHabitatImageCount;

        public static readonly int HabitatColonizationThreshhold;

        public static readonly int MiningStationResourceThreshhold;

        public static readonly long HabitatSmallSpacePortPopulationRequirement;

        public static readonly long HabitatMediumSpacePortPopulationRequirement;

        public static readonly long HabitatLargeSpacePortPopulationRequirement;

        public static readonly long BuildColonyShipPopulationRequirement;

        public static readonly double FreightBaseCharge;

        public static readonly double FreightChargePerUnitPerDistance;

        public static readonly double ColonyAnnualResourceConsumptionRate;

        public static readonly double ColonyAnnualLuxuryResourceConsumptionRate;

        public static readonly int TypicalMaximumOrderFulfillmentDistance;

        public static readonly long HabitatToEmpireThreshhold;

        public static readonly int HabitatToEmpireMinimumIntelligence;

        public static readonly int IncidentEvaluationAnnualNeutralizationAmount;

        public static readonly int CivilityRatingAnnualNeutralizationAmount;

        public static readonly double CivilityRatingAnnualRiseAmount;

        public static readonly int TroopStrengthAnnualNeutralizationAmount;

        public static readonly int TroopSizeAnnualRegenerationAmount;

        public static readonly int TroopAnnualRecruitmentAmount;

        public static readonly double OrderExpiryYears;

        public static readonly double OrderExpiryYearsLuxury;

        public static readonly double MinimumDiplomacyTradeProposalIntervalYears;

        public static readonly int MinimumLevelForRefuellingPoint;

        public static readonly double RefuelThreshholdPercentage;

        public static long MinimumHabitatPopulationAmount;

        public static readonly double MinimumDesignReviewIntervalYears;

        public static readonly int MinimumContractSize;

        public static readonly int MiningStationResourceTransportThreshhold;

        public static readonly int ColonyResourceTransportThreshhold;

        public static readonly int ColonyMinimumResourceReorderAmount;

        public static readonly int MinimumLuxuryResourceReorderAmount;

        public static readonly int MinimumRestrictedResourceReorderAmount;

        public static readonly int MinimumOrderAmount;

        public static readonly int MinimumDistanceBetweenBases;

        public static readonly double DistressSignalResponseMaximumDistance;

        public static readonly int RetirementYears;

        public static readonly int RetrofitYears;

        public static readonly double MaximumConstructionQueueWaitTimeYears;

        public static readonly int MaximumEmpireCount;

        public static readonly int MajorColonyStrategicThreshhold;

        public static readonly double TorpedoWeaponHitRange;

        public static readonly double AttackOvermatchFactor;

        public static readonly double AttackEvaluationRangeFactor;

        public static readonly int ColonyMaximumTroopStrength;

        public static readonly double TroopAnnualMaintenance;

        public static readonly double AgentAnnualMaintenance;

        public static readonly int BlockadeEmpireEvaluationValue;

        public static readonly double GovernmentStyleAffinityFactor;

        public static readonly int SystemCompetitionColonyFactor;

        public static readonly int SystemCompetitionMiningStationFactor;

        public static readonly double AcceptableWarValueLossesBuiltObject;

        public static readonly double AcceptableWarValueLossesColony;

        public static readonly double DistressSignalLocationOverlapRangeSquared;

        public static readonly long DistressSignalDateRange;

        public static readonly double AllowableYearsMaintenanceFromCashOnHand;

        public static readonly int FleetMaximumCount;

        public static readonly double MouseHoverHabitatProximityRange;

        public static readonly double EmpireAgeExpansionRateMinimum;

        public static readonly double EmpireAgeExpansionRateMaximum;

        public static readonly int PointBlankWeaponsRange;

        public static readonly double EmpireEvaluationTrendingFactor;

        public static readonly int IncidentImpactWhenDeclareWar;

        public static readonly double DeclareWarReputationImpact;

        public static readonly double TreatyOfferValidYears;

        public static readonly double AttackOnPiratesRange;

        public static readonly int EspionageStealResearchMaxAmount;

        public static readonly double DestroySilverMistReputationBonus;

        public static readonly double TradeBonusAnnualIncrease;

        public static readonly double TradeBonusMaximumFreeTrade;

        public static readonly double TradeBonusMaximumFreeTradeAmount;

        public static readonly double TradeBonusMaximumMutualDefense;

        public static readonly double TradeBonusMaximumMutualDefenseAmount;

        public static double SubjugationTributePercentage;

        public static readonly int IndependentTraderFreightRange;

        public static double ShipMarkupFactor;

        public static double ShipMarkupFactorPirates;

        public static readonly int PirateEmpireMaxShips;

        public static readonly int PirateEmpireMaxShipsSuper;

        public static readonly double BuiltObjectDrawResizeFactor;

        public static readonly double CreatureDrawResizeFactor;

        public static readonly int TradeColonyThreshhold;

        public static readonly int TradeMiningStationThreshhold;

        public static readonly int TradeTerritoryMapThreshhold;

        public static readonly int TradeGalaxyMapThreshhold;

        public static readonly int TradeResearchThreshhold;

        public static readonly int TradeResearchSpecialThreshhold;

        public static readonly int FleetTypicalSize;

        public static readonly int StrikeForceTypicalSize;

        public static double ShipMaintenanceCostPerSizeUnit;

        [OptionalField]
        public double PirateShipMaintenanceFactor = 0.4;

        public static readonly double ColonyStrategicResourceConsumptionPerMillionPerYear;

        public static readonly double ColonyShipBuildFactor;

        public static readonly double ColonyStateSupportCost;

        public static readonly double ColonyRevenueDivisor;

        public static readonly long RevenueDropoffPopulationThreshholdMin;

        public static readonly long RevenueDropoffPopulationThreshholdMax;

        public static readonly double RevenueDropoffRate;

        public static readonly long ColonyTaxResistanceThreshhold;

        public static readonly double ColonyTaxResistanceRate;

        public static readonly int ColonyDevelopmentLevelMaximumAnnualChange;

        public static readonly double ColonyAnnualRestrictedResourceConsumptionRate;

        public static readonly int ColonyDevelopmentBaseline;

        public static readonly long ColonyCorruptionPopulationThreshhold;

        public static readonly int MainViewShipHighlightDistance;

        public static readonly int WarWhenStrongerAngerLevel;

        public static readonly int WarWhenEvenAngerLevel;

        public static readonly int WarIncidentLevel;

        public static readonly double SpendingAgentPercentage;

        public static readonly double SpendingTroopPercentage;

        public static readonly double SpendingShipPercentage;

        public static readonly int DesiredForeignColonyStrategicThreshhold;

        public static readonly int DesiredForeignColonyResourceThreshhold;

        public static double WarWearinessMaximum;

        public static readonly double SpacePortMinimumDistance;

        public static readonly double ResupplyShipMinimumDistance;

        public static readonly int ColonyResourceLimit;

        public static readonly double RaceFamilyAffinityBias;

        public static readonly int PlanetDestroyReputationImpact;

        public static readonly double IndependentColonyInvadeReputationImpact;

        public static readonly double PirateEmpireAttackDistance;

        public static readonly long PirateEmpireAttackExpiryDateLength;

        public static readonly long FleetAssembleAttackWaitPeriodPerShip;

        public static readonly int MaximumMissionRefusals;

        public static readonly long IdealTimeBetweenGifts;

        public static readonly double AdvancedTechBonusFactor;

        public static readonly double ColonyBuildSpeedIdealPopulation;

        public static readonly double HabitatDamageAnnualRegeneration;

        public static readonly double MinimumWarLengthPeriodYears;

        public static double ResourceLevelOneQuantity;

        public static double ResourceLevelTwoQuantity;

        public static double ResourceLevelThreeQuantity;

        public static double ResourceLevelFourQuantity;

        public static double ResourceLevelFiveQuantity;

        public static double ResourceLevelSixQuantity;

        public double DifficultyLevel = 1.0;

        public bool DifficultyLevelScalesAsPlayerApproachesVictory;

        public static readonly double ColonyCorruptionFactorDefault;

        public static readonly double ResearchRateDefault;

        public static readonly double PopulationGrowthRateDefault;

        public static readonly double MiningRateDefault;

        public static readonly double TargettingFactorDefault;

        public static readonly double CountermeasuresFactorDefault;

        public static readonly double ColonyShipBuildSpeedRateDefault;

        public static readonly double WarWearinessFactorDefault;

        public static readonly double ColonyIncomeFactorDefault;

        [OptionalField]
        public bool DestroyedPiratesDoNotRespawn;

        public static readonly int RealSecondsInGalacticYear;

        public static TimeSpan IntermediateProcessingSpan;

        public static TimeSpan PeriodicProcessingSpan;

        public static TimeSpan LongProcessingSpan;

        public static TimeSpan HugeProcessingSpan;

        public bool DeferEventsForGameStart = true;

        public bool StoryCluesEnabled;

        public List<StellarObject> StoryClueLocations = new List<StellarObject>();

        public List<bool> StoryClueUsed = new List<bool>();

        public List<bool> StorySecondaryClueUsed = new List<bool>();

        [NonSerialized]
        public HabitatList[][] HabitatIndex = new HabitatList[IndexMaxX][];

        [NonSerialized]
        public BuiltObjectList[][] BuiltObjectIndex = new BuiltObjectList[IndexMaxX][];

        public HabitatList IndependentColonies = new HabitatList();

        public bool StoryDistantWorldsEnabled = true;

        [OptionalField]
        public bool StoryShadowsEnabled = true;

        public bool StoryReturnOfTheShakturiEnabled = true;

        public int StoryReturnOfTheShakturiEventLevel;

        public Habitat ShakturiTriggerHabitat;

        public bool StoryShakturiEnraged;

        public Race ShakturiOriginalRace;

        [OptionalField]
        public Race ShakturiActualRace;

        public long StoryShakturiEnrageTimer = long.MaxValue;

        public bool ShakturiDefeated;

        public object StoryLock = new object();

        public Habitat SilverMistCreatureRuinsHabitat;

        [OptionalField]
        public int SilverMistCreatureCount;

        public Empire PlayerEmpire;

        public HabitatList Habitats = new HabitatList();

        public EmpireList Empires = new EmpireList();

        public EmpireList DefeatedEmpires = new EmpireList();

        public EmpireList PirateEmpires = new EmpireList();

        public Empire IndependentEmpire;

        public BuiltObjectList BuiltObjects = new BuiltObjectList();

        public DesignList PopularDesigns = new DesignList();

        public OrderList Orders = new OrderList();

        public List<double> ResourceCurrentPrices = new List<double>();

        public List<double> ComponentCurrentPrices = new List<double>();

        private Bitmap _PirateFlagLarge;

        private Bitmap _PirateFlagSmall;

        private int _SuperPirateFactionsGenerated;

        public SystemInfoList Systems = new SystemInfoList();

        [NonSerialized]
        public SystemInfoList[][] SystemsIndex = new SystemInfoList[IndexMaxX][];

        public BlockadeList Blockades = new BlockadeList();

        private GalaxyLocationList _GalaxyLocations = new GalaxyLocationList();

        [NonSerialized]
        public GalaxyLocationList[][] GalaxyLocationIndex = new GalaxyLocationList[IndexMaxX][];

        private List<HabitatList> _AsteroidFields = new List<HabitatList>();

        private List<Point> _StarClusterLocations = new List<Point>();

        private List<double> _StarClusterPortions = new List<double>();

        public EmpireActivityList PirateMissions = new EmpireActivityList();

        public double AverageTaxRate;

        public int InvasionAttempts;

        public int InvasionSuccesses;

        public int InvasionFailures;

        public int RuinCount;

        public int AbandonedShipCount;

        public int IndependentCount;

        public int IndependentPotentialCount;

        public BuiltObjectList AbandonedBuiltObjects = new BuiltObjectList();

        private HabitatList _RuinsHabitats = new HabitatList();

        private int _RuinsGovernmentWayOfAncients;

        private int _RuinsGovernmentWayOfDarkness;

        private int _BaseTechCost = 60000;

        private double _HyperdriveSpeedMultiplier = 1.0;

        public GalaxyShape GalaxyShape;

        private int _StarCount;

        private double _ColonyPrevalence = 0.75;

        [OptionalField]
        private int _PlanetCountContinental;

        [OptionalField]
        private int _PlanetCountMarshySwamp;

        [OptionalField]
        private int _PlanetCountDesert;

        [OptionalField]
        private int _PlanetCountOcean;

        [OptionalField]
        private int _PlanetCountIce;

        [OptionalField]
        private int _PlanetCountVolcanic;

        [OptionalField]
        private int _MoonCountContinental;

        [OptionalField]
        private int _MoonCountMarshySwamp;

        [OptionalField]
        private int _MoonCountDesert;

        [OptionalField]
        private int _MoonCountOcean;

        [OptionalField]
        private int _MoonCountIce;

        [OptionalField]
        private int _MoonCountVolcanic;

        private double _ColonyFillFactor = 1.0;

        private int _LifePrevalence;

        private double _LifePrevalenceMultiplier = 1.0;

        private int _Age;

        private double _AggressionLevel;

        private int _MaximumEmpireAmount;

        private bool _SpawnNewEmpires;

        private double _CreaturePrevalence;

        private double _PiratePrevalence;

        private int _PirateProximity;

        [OptionalField]
        public bool AllowTechTrading = true;

        [OptionalField]
        public GameSummary GameSummary = new GameSummary();

        [OptionalField]
        public bool AllowRaceStartingCharacters = true;

        private object _DelayedActionLockObject = new object();

        public EventActionExecutionPackageList DelayedActions = new EventActionExecutionPackageList();

        public bool AllowGiantKaltorGeneration = true;

        private DateTime _StartDateTime;

        private DateTime _TrackedDateTime;

        internal long _StartStarDate;

        private BasicStopWatch _StopWatch = new BasicStopWatch();

        private GalaxyTimeState _TimeState;

        private TimeSpan _TotalPausedTime = default(TimeSpan);

        private DateTime _PauseDateTime = DateTime.MaxValue;

        public static long YearLength;

        [NonSerialized]
        public VictoryConditions GlobalVictoryConditions;

        public bool GameRaceSpecificVictoryConditionsEnabled = true;

        public bool GameRaceSpecificEventsEnabled = true;

        public bool GameDisasterEventsEnabled = true;

        [OptionalField]
        public float EmpireTerritoryColonyInfluenceRangeFactor = 1f;

        [OptionalField]
        public bool ColonizationRangeEnforceLimit = true;

        [OptionalField]
        public float ColonizationRange = 3000000f;

        private volatile bool _RegeneratingEmpireTerritory;

        private volatile bool _RegenerateEmpireTerritoryAgain;

        public static ComponentList ComponentsWeaponBeamOrderedByRange;

        public static ComponentList ComponentsWeaponTorpedoOrderedByRange;

        public static ComponentList ComponentsWeaponAreaOrderedByRange;

        public static ComponentList ComponentsWeaponBeamOrderedByPower;

        public static ComponentList ComponentsWeaponTorpedoOrderedByPower;

        public static ComponentList ComponentsWeaponAreaOrderedByPower;

        public static ComponentList ComponentsReactorOrderedByEfficiency;

        public static ComponentList ComponentsReactorOrderedByPower;

        public static ComponentList ComponentsEngineMainThrustOrderedByPower;

        public static ComponentList ComponentsEngineVectoringOrderedByPower;

        public static ComponentList ComponentsEngineMainThrustOrderedByEfficiency;

        public static ComponentList ComponentsEngineVectoringOrderedByEfficiency;

        public static ComponentList ComponentsHyperdriveOrderedByPower;

        public static ComponentList ComponentsHyperdriveOrderedByEfficiency;

        public static ComponentList ComponentsHyperdriveOrderedByJumpInitiation;

        public static Random RndStatic;

        public static long StartStarDate;

        public static ResourceSystem ResourceSystemStatic;

        public static ComponentDefinition[] ComponentDefinitionsStatic;

        public static ResearchNodeDefinitionList ResearchNodeDefinitionsStatic;

        public static PlanetaryFacilityDefinitionList PlanetaryFacilityDefinitionsStatic;

        public static FighterSpecificationList FighterSpecificationsStatic;

        public static GovernmentAttributesList GovernmentsStatic;

        public static RaceFamilyList RaceFamiliesStatic;

        public static PlagueList PlaguesStatic;

        public static ResourceSystem BackupResourceSystemStatic;

        public static ComponentDefinition[] BackupComponentDefinitionsStatic;

        public static ResearchNodeDefinitionList BackupResearchNodeDefinitionsStatic;

        public static PlanetaryFacilityDefinitionList BackupPlanetaryFacilityDefinitionsStatic;

        public static FighterSpecificationList BackupFighterSpecificationsStatic;

        public static GovernmentAttributesList BackupGovernmentsStatic;

        public static RaceFamilyList BackupRaceFamiliesStatic;

        public static PlagueList BackupPlaguesStatic;

        public ResourceSystem ResourceSystem = new ResourceSystem();

        public ComponentDefinition[] ComponentDefinitions = new ComponentDefinition[130];

        public ResearchNodeDefinitionList ResearchNodeDefinitions = new ResearchNodeDefinitionList();

        public PlanetaryFacilityDefinitionList PlanetaryFacilityDefinitions = new PlanetaryFacilityDefinitionList();

        public FighterSpecificationList FighterSpecifications = new FighterSpecificationList();

        public GovernmentAttributesList Governments = new GovernmentAttributesList();

        public RaceFamilyList RaceFamilies = new RaceFamilyList();

        public PlagueList Plagues = new PlagueList();

        private object _WonderLockObject = new object();

        private bool[] _WondersBuilt = new bool[PlanetaryFacilityDefinitionsStatic.Count];

        public CreatureList Creatures => _Creatures;

        public static Random Rnd
        {
            get
            {
                if (_Rnd == null)
                {
                    _Rnd = new Random();
                }
                return _Rnd;
            }
        }

        public static CryptoRandom CryptoRnd
        {
            get
            {
                if (_CryptoRnd == null)
                {
                    _CryptoRnd = new CryptoRandom();
                }
                return _CryptoRnd;
            }
        }

        public int RandomSeed
        {
            get
            {
                return _RandomSeed;
            }
            set
            {
                _RandomSeed = value;
            }
        }

        public EmpireTerritory EmpireTerritory => _EmpireTerritory;

        public double ResearchSpeedModifier
        {
            get
            {
                return _ResearchSpeedModifier;
            }
            set
            {
                _ResearchSpeedModifier = value;
            }
        }

        public List<string[]> DesignNames => _DesignNames;

        public int NextEmpireID => _NextEmpireID;

        public SubRoleNameSet SubRoleNameSet
        {
            get
            {
                return _SubRoleNameSet;
            }
            set
            {
                _SubRoleNameSet = value;
            }
        }

        public GalaxyLocationList GalaxyLocations => _GalaxyLocations;

        public List<HabitatList> AsteroidFields => _AsteroidFields;

        public HabitatList RuinsHabitats
        {
            get
            {
                return _RuinsHabitats;
            }
            set
            {
                _RuinsHabitats = value;
            }
        }

        public int BaseTechCost
        {
            get
            {
                return _BaseTechCost;
            }
            set
            {
                _BaseTechCost = value;
            }
        }

        public double HyperdriveSpeedMultiplier
        {
            get
            {
                return _HyperdriveSpeedMultiplier;
            }
            set
            {
                _HyperdriveSpeedMultiplier = value;
            }
        }

        public double ColonyPrevalence
        {
            get
            {
                return _ColonyPrevalence;
            }
            set
            {
                _ColonyPrevalence = value;
            }
        }

        public double ColonyFillFactor => _ColonyFillFactor;

        public double LifePrevalenceMultiplier
        {
            get
            {
                return _LifePrevalenceMultiplier;
            }
            set
            {
                _LifePrevalenceMultiplier = value;
            }
        }

        public int LifePrevalence
        {
            get
            {
                return _LifePrevalence;
            }
            set
            {
                _LifePrevalence = value;
            }
        }

        public int Age
        {
            get
            {
                return _Age;
            }
            set
            {
                _Age = value;
            }
        }

        public int StartingAge => _Age;

        public int ExpectedMaximumColoniesInGalaxy
        {
            get
            {
                double num = 0.47;
                if (_StarCount >= 1400)
                {
                    num = 0.38;
                }
                else if (_StarCount >= 1000)
                {
                    num = 0.41;
                }
                else if (_StarCount >= 700)
                {
                    num = 0.42;
                }
                else if (_StarCount >= 400)
                {
                    num = 0.43;
                }
                num *= _ColonyPrevalence;
                return (int)((double)_StarCount * num);
            }
        }

        public int AllowableMaximumStartingColonies => (int)((double)ExpectedMaximumColoniesInGalaxy * 0.75);

        public double TypicalDistanceBetweenColoniesAtMaximumFill
        {
            get
            {
                double num = (double)SizeX / Math.Sqrt(StarCount);
                double num2 = Math.Sqrt((double)ExpectedMaximumColoniesInGalaxy / (double)StarCount);
                return num / num2;
            }
        }

        public int MaximumEmpireAmount
        {
            get
            {
                return _MaximumEmpireAmount;
            }
            set
            {
                _MaximumEmpireAmount = value;
            }
        }

        public double AggressionLevel
        {
            get
            {
                return _AggressionLevel;
            }
            set
            {
                _AggressionLevel = value;
            }
        }

        public bool SpawnNewEmpires
        {
            get
            {
                return _SpawnNewEmpires;
            }
            set
            {
                _SpawnNewEmpires = value;
            }
        }

        public double CreaturePrevalence
        {
            get
            {
                return _CreaturePrevalence;
            }
            set
            {
                _CreaturePrevalence = value;
            }
        }

        public double PiratePrevalence
        {
            get
            {
                return _PiratePrevalence;
            }
            set
            {
                _PiratePrevalence = value;
            }
        }

        public int PirateProximity
        {
            get
            {
                return _PirateProximity;
            }
            set
            {
                _PirateProximity = value;
            }
        }

        public long ActualStartDate => _StartStarDate;

        public TimeSpan TotalRunningTime => CurrentDateTime.Subtract(_StartDateTime);

        public long CurrentStarDate => (CurrentDateTime.Ticks - _StartDateTime.Ticks) / 10000 + _StartStarDate;

        public GalaxyTimeState TimeState => _TimeState;

        public double TimeSpeed
        {
            get
            {
                if (_StopWatch != null)
                {
                    return _StopWatch.TimeSpeed;
                }
                return 1.0;
            }
        }

        public DateTime CurrentDateTime
        {
            get
            {
                if (_TimeState == GalaxyTimeState.Running)
                {
                    return _TrackedDateTime.ToUniversalTime().AddTicks(_StopWatch.Elapsed.Ticks);
                }
                if (_TimeState == GalaxyTimeState.Paused)
                {
                    return _TrackedDateTime.ToUniversalTime().AddTicks(_StopWatch.Elapsed.Ticks);
                }
                throw new ApplicationException("Invalid GalaxyTimeState value.");
            }
        }

        public int StarCount => _StarCount;

        public Bitmap PirateFlagLarge
        {
            get
            {
                return _PirateFlagLarge;
            }
            set
            {
                _PirateFlagLarge = value;
            }
        }

        public Bitmap PirateFlagSmall
        {
            get
            {
                return _PirateFlagSmall;
            }
            set
            {
                _PirateFlagSmall = value;
            }
        }

        public double ColonyFillRatio
        {
            get
            {
                int num = Habitats.Count / 45;
                return (double)ColonyCount / (double)num;
            }
        }

        public double IntoleranceLevel => Math.Max(0.0, Math.Min(1.0, 1.0 - ColonyFillRatio));

        public int ColonyCount
        {
            get
            {
                int num = 0;
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    num += empire.Colonies.Count;
                }
                return num;
            }
        }

        public double TotalStateMoneyInGalaxy
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire.PirateEmpireBaseHabitat == null && empire != IndependentEmpire && empire.Active)
                    {
                        num += empire.StateMoney;
                    }
                }
                return num;
            }
        }

        public double TotalMoneyInGalaxy
        {
            get
            {
                double num = 0.0;
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    num += empire.StateMoney;
                    num += empire.PrivateMoney;
                }
                return num;
            }
        }

        public RaceList Races
        {
            get
            {
                return _RaceList;
            }
            set
            {
                _RaceList = value;
            }
        }

        public static CharacterList Characters
        {
            get
            {
                return _CharacterList;
            }
            set
            {
                _CharacterList = value;
            }
        }

        public event EventHandler LocationPinged;

        public event EventHandler SystemsUpdated;

        public event EventHandler<GameEndEventArgs> GameEnd;

        public event EventHandler<RefreshViewEventArgs> RefreshView;

        [field: NonSerialized]
        public event EventHandler<CharacterImageChangedEventArgs> CharacterImageChanged;

        public void ClearRaceUsed()
        {
            _RaceUsed = null;
        }

        public static void SetRandom(Random rnd)
        {
            _Rnd = rnd;
        }

        protected virtual void OnLocationPinged(EventArgs e)
        {
            if (this.LocationPinged != null)
            {
                this.LocationPinged(this, e);
            }
        }

        protected virtual void OnSystemsUpdated(EventArgs e)
        {
            if (this.SystemsUpdated != null)
            {
                this.SystemsUpdated(this, e);
            }
        }

        protected virtual void OnGameEnd(GameEndEventArgs e)
        {
            if (this.GameEnd != null)
            {
                this.GameEnd(this, e);
            }
        }

        public virtual void OnRefreshView(RefreshViewEventArgs e)
        {
            if (this.RefreshView != null)
            {
                this.RefreshView(this, e);
            }
        }

        public virtual void OnCharacterImageChanged(CharacterImageChangedEventArgs e)
        {
            if (this.CharacterImageChanged != null)
            {
                this.CharacterImageChanged(this, e);
            }
        }

        public void ResetNextEmpireId()
        {
            _NextEmpireID = 0;
        }

        public int GetNextBuiltObjectID()
        {
            if (_NextBuiltObjectID < int.MaxValue)
            {
                _NextBuiltObjectID++;
                return _NextBuiltObjectID;
            }
            throw new ApplicationException("Maximum allowable ship number exceeded!");
        }

        public int GetNextFighterID()
        {
            if (_NextFighterID < int.MaxValue)
            {
                _NextFighterID++;
                return _NextFighterID;
            }
            throw new ApplicationException("Maximum allowable fighter number exceeded!");
        }

        public int GetNextEmpireID()
        {
            if (_NextEmpireID < MaximumEmpireCount)
            {
                _NextEmpireID++;
                return _NextEmpireID;
            }
            throw new ApplicationException("Maximum allowable empire number exceeded!");
        }

        public int GetNextCreatureID()
        {
            if (_NextCreatureID < int.MaxValue)
            {
                _NextCreatureID++;
                return _NextCreatureID;
            }
            throw new ApplicationException("Maximum allowable creature number exceeded!");
        }

        public static string ResolveStarDateDescription(long starDate)
        {
            return ResolveStarDateDescription(starDate, ".");
        }

        public static string ResolveStarDateDescription(long starDate, string datePartSeparator)
        {
            int num = (int)(starDate / (1000 * RealSecondsInGalacticYear));
            long num2 = (long)num * (long)(1000 * RealSecondsInGalacticYear);
            double num3 = 1000.0 * (double)RealSecondsInGalacticYear / 12.0;
            int num4 = (int)((double)(starDate - num2) / num3);
            long num5 = (long)((double)num4 * num3);
            double num6 = num3 / 30.0;
            int num7 = (int)((double)(starDate - (num2 + num5)) / num6);
            num4++;
            num7++;
            return num.ToString("0000") + datePartSeparator + num4.ToString("00") + datePartSeparator + num7.ToString("00");
        }

        public static long CalculateStartOfYear(long date)
        {
            long num = date % YearLength;
            return date - num;
        }

        public void ChangeTimeSpeed(double timeSpeed)
        {
            if (_TimeState == GalaxyTimeState.Paused)
            {
                _StopWatch.TimeSpeed = timeSpeed;
                return;
            }
            Pause();
            _StopWatch.TimeSpeed = timeSpeed;
            Resume();
        }

        public void Pause()
        {
            if (_TimeState == GalaxyTimeState.Running)
            {
                if (!(_PauseDateTime == DateTime.MaxValue))
                {
                    throw new ApplicationException("Pause time was set while not paused!");
                }
                _StopWatch.Stop();
                _PauseDateTime = DateTime.Now.ToUniversalTime();
                _TimeState = GalaxyTimeState.Paused;
                _TrackedDateTime = _TrackedDateTime.ToUniversalTime().Add(_StopWatch.Elapsed);
                _StopWatch.Reset();
            }
        }

        public void Resume()
        {
            if (_TimeState == GalaxyTimeState.Paused)
            {
                if (!(_PauseDateTime != DateTime.MaxValue))
                {
                    throw new ApplicationException("Pause time was not set while paused!");
                }
                _StopWatch.Start();
                TimeSpan ts = DateTime.Now.ToUniversalTime().Subtract(_PauseDateTime.ToUniversalTime());
                _TotalPausedTime = _TotalPausedTime.Add(ts);
                _PauseDateTime = DateTime.MaxValue;
                _TimeState = GalaxyTimeState.Running;
            }
        }

        public void SetEmpireDifficultyFactors(Empire empire)
        {
            SetEmpireDifficultyFactors(empire, null);
        }

        public void SetEmpireDifficultyFactors(Empire empire, VictoryConditionProgressList conditionProgresses)
        {
            if (empire == PlayerEmpire)
            {
                empire.DifficultyLevel = DifficultyLevel;
                empire.DifficultyLevel += empire.DifficultyLevelModifier;
                if (DifficultyLevelScalesAsPlayerApproachesVictory)
                {
                    if (conditionProgresses == null)
                    {
                        conditionProgresses = GenerateVictoryConditionProgresses(this, GlobalVictoryConditions, filterOutUnmetEmpires: true);
                    }
                    if (conditionProgresses.Count > 0)
                    {
                        VictoryConditionProgress byEmpire = conditionProgresses.GetByEmpire(empire);
                        if (byEmpire != null)
                        {
                            double totalProgress = byEmpire.TotalProgress;
                            if (totalProgress > 0.5)
                            {
                                double num = Math.Min(0.5, Math.Max(0.0, totalProgress - 0.5));
                                empire.DifficultyLevel += num * Math.Max(1.0, DifficultyLevel);
                            }
                        }
                    }
                }
            }
            else
            {
                empire.DifficultyLevel = 1.0 + (1.0 - Math.Sqrt(DifficultyLevel));
                empire.DifficultyLevel += empire.DifficultyLevelModifier;
            }
            BaconGalaxy.SetEmpireDifficultyFactors(empire);
        }

        public void ReviewEmpireDifficultyFactors()
        {
            VictoryConditionProgressList conditionProgresses = GenerateVictoryConditionProgresses(this, GlobalVictoryConditions, filterOutUnmetEmpires: true);
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    SetEmpireDifficultyFactors(empire, conditionProgresses);
                }
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                if (empire2 != null && empire2.Active)
                {
                    SetEmpireDifficultyFactors(empire2, conditionProgresses);
                }
            }
        }

        public static int CalculateResourceLevel(Resource resource, BuiltObject tradingPost)
        {
            if (tradingPost.ParentHabitat != null)
            {
                if (tradingPost != null && !tradingPost.HasBeenDestroyed && tradingPost.Role == BuiltObjectRole.Base && (tradingPost.ParentHabitat == null || tradingPost.ParentHabitat.Empire == null || tradingPost.ParentHabitat.Empire != tradingPost.Empire) && tradingPost.BuiltAt == null && tradingPost.CargoSpace > 0 && resource != null)
                {
                    return tradingPost.SubRole switch
                    {
                        BuiltObjectSubRole.SmallSpacePort => CalculateResourceLevelSpaceport(resource, 0, 1.0),
                        BuiltObjectSubRole.MediumSpacePort => CalculateResourceLevelSpaceport(resource, 0, 2.0),
                        BuiltObjectSubRole.LargeSpacePort => CalculateResourceLevelSpaceport(resource, 0, 4.0),
                        _ => CalculateResourceLevelStockForBaseRetrofit(resource.ResourceID),
                    };
                }
                if (tradingPost.IsSpacePort)
                {
                    return CalculateResourceLevel(resource, tradingPost.ParentHabitat, isMiningStation: false, isIndependent: false);
                }
                return CalculateResourceLevel(resource, tradingPost.ParentHabitat, isMiningStation: true, isIndependent: false);
            }
            if (tradingPost != null && !tradingPost.HasBeenDestroyed && tradingPost.Role == BuiltObjectRole.Base && (tradingPost.ParentHabitat == null || tradingPost.ParentHabitat.Empire == null || tradingPost.ParentHabitat.Empire != tradingPost.Empire) && tradingPost.BuiltAt == null && tradingPost.CargoSpace > 0 && resource != null)
            {
                return CalculateResourceLevelStockForBaseRetrofit(resource.ResourceID);
            }
            return 0;
        }

        public static int CalculateResourceLevel(Cargo cargo, BuiltObject tradingPost)
        {
            if (tradingPost.ParentHabitat != null)
            {
                if (tradingPost != null && !tradingPost.HasBeenDestroyed && tradingPost.Role == BuiltObjectRole.Base && (tradingPost.ParentHabitat == null || tradingPost.ParentHabitat.Empire == null || tradingPost.ParentHabitat.Empire != tradingPost.Empire) && tradingPost.BuiltAt == null && cargo != null && cargo.CommodityIsResource && cargo.CommodityResource != null)
                {
                    return tradingPost.SubRole switch
                    {
                        BuiltObjectSubRole.SmallSpacePort => CalculateResourceLevelSpaceport(cargo.CommodityResource, 0, 1.0),
                        BuiltObjectSubRole.MediumSpacePort => CalculateResourceLevelSpaceport(cargo.CommodityResource, 0, 2.0),
                        BuiltObjectSubRole.LargeSpacePort => CalculateResourceLevelSpaceport(cargo.CommodityResource, 0, 4.0),
                        _ => CalculateResourceLevelStockForBaseRetrofit(cargo.CommodityResource.ResourceID),
                    };
                }
                if (tradingPost.IsSpacePort)
                {
                    return CalculateResourceLevel(cargo, tradingPost.ParentHabitat);
                }
                return CalculateResourceLevel(cargo, tradingPost.ParentHabitat, isMiningStation: true);
            }
            if (tradingPost != null && !tradingPost.HasBeenDestroyed && tradingPost.Role == BuiltObjectRole.Base && (tradingPost.ParentHabitat == null || tradingPost.ParentHabitat.Empire == null || tradingPost.ParentHabitat.Empire != tradingPost.Empire) && tradingPost.BuiltAt == null && tradingPost.CargoSpace > 0 && cargo != null && cargo.CommodityIsResource && cargo.CommodityResource != null)
            {
                return CalculateResourceLevelStockForBaseRetrofit(cargo.CommodityResource.ResourceID);
            }
            return 0;
        }

        public static int CalculateResourceLevel(Cargo cargo, Habitat colony)
        {
            return CalculateResourceLevel(cargo, colony, isMiningStation: false);
        }

        public static int CalculateResourceLevel(Cargo cargo, Habitat colony, bool isMiningStation)
        {
            if (cargo.CommodityResource != null)
            {
                return CalculateResourceLevel(cargo.CommodityResource, colony, isMiningStation, isIndependent: false);
            }
            return 0;
        }

        public static int CalculateResourceLevelSpaceport(Resource resource, int fleetFuelAmount, double multiplier)
        {
            double num = 0.0;
            for (int i = 0; i < ResourceSystemStatic.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystemStatic.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null)
                {
                    num = ResourceLevelOneQuantity * (double)resourceDefinition.RelativeImportance;
                    if (resourceDefinition.IsFuel)
                    {
                        num += (double)fleetFuelAmount;
                    }
                }
            }
            return (int)(num * multiplier);
        }

        public static int CalculateResourceLevel(Resource resource, Habitat colony)
        {
            return CalculateResourceLevel(resource, colony, isMiningStation: false, isIndependent: false);
        }

        public static int CalculateResourceLevel(Resource resource, Habitat colony, bool isMiningStation, bool isIndependent)
        {
            return CalculateResourceLevel(resource, colony, isMiningStation, isIndependent, isCriticalResource: false);
        }

        public static int CalculateResourceLevel(Resource resource, Habitat colony, bool isMiningStation, bool isIndependent, bool isCriticalResource)
        {
            return CalculateResourceLevel(resource, colony, isMiningStation, isIndependent, isCriticalResource, 0);
        }

        public static int CalculateResourceLevel(Resource resource, Habitat colony, bool isMiningStation, bool isIndependent, bool isCriticalResource, int fleetFuelAmount)
        {
            double num = 0.0;
            if (isIndependent)
            {
                int result = 0;
                if (resource.IsFuel)
                {
                    result = 4000;
                }
                return result;
            }
            if (isMiningStation)
            {
                if (resource.Group == ResourceGroup.Mineral || resource.Group == ResourceGroup.Gas)
                {
                    int num2 = 0;
                    if (resource.RelativeImportance > 0.25f)
                    {
                        return 4000;
                    }
                    return 2000;
                }
                return 2000;
            }
            if (!colony.HasSpacePort)
            {
                if (resource.IsFuel)
                {
                    num = ResourceLevelTwoQuantity + (double)fleetFuelAmount;
                }
                long num3 = 0L;
                if (colony.Population != null)
                {
                    num3 = colony.Population.TotalAmount;
                }
                if (num3 >= 1000000000)
                {
                    num = ((resource.RelativeImportance > 0.4f) ? ResourceLevelThreeQuantity : ((!(resource.RelativeImportance > 0.15f)) ? ResourceLevelFiveQuantity : ResourceLevelFourQuantity));
                }
                else if (num3 >= 200000000)
                {
                    num = ((resource.RelativeImportance > 0.4f) ? ResourceLevelFourQuantity : ((!(resource.RelativeImportance > 0.15f)) ? ResourceLevelSixQuantity : ResourceLevelFiveQuantity));
                }
            }
            else
            {
                num = ((resource.RelativeImportance > 0.4f) ? ResourceLevelOneQuantity : ((resource.RelativeImportance > 0.25f) ? ResourceLevelTwoQuantity : ((!(resource.RelativeImportance > 0.15f)) ? ResourceLevelFourQuantity : ResourceLevelThreeQuantity)));
                if (resource.IsFuel)
                {
                    num += (double)fleetFuelAmount;
                }
            }
            if (isCriticalResource)
            {
                num = Math.Max(num, ResourceLevelFourQuantity);
            }
            return (int)(num * (double)colony.ResourceMultiplier);
        }

        public static CargoList ResolveRetrofitResourcesForBase(Empire empire)
        {
            CargoList cargoList = new CargoList();
            for (int i = 0; i < ResourceSystemStatic.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystemStatic.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null)
                {
                    cargoList.Add(new Cargo(new Resource(resourceDefinition.ResourceID), CalculateResourceLevelStockForBaseRetrofit(resourceDefinition.ResourceID), empire));
                }
            }
            return cargoList;
        }

        public static int CalculateResourceLevelStockForBaseRetrofit(byte resourceId)
        {
            int result = 0;
            ResourceDefinition resourceDefinition = ResourceSystemStatic.Resources[resourceId];
            if (resourceDefinition != null)
            {
                result = ((!resourceDefinition.IsFuel) ? ((!(resourceDefinition.RelativeImportance > 0.25f)) ? 25 : 50) : 0);
            }
            return result;
        }

        public static int CalculateResourceLevelPirates(Resource resource, BuiltObject pirateSpaceport)
        {
            double num = 0.0;
            num = ((resource.RelativeImportance > 0.4f || resource.IsFuel) ? ResourceLevelOneQuantity : ((resource.RelativeImportance > 0.25f) ? ResourceLevelTwoQuantity : ((!(resource.RelativeImportance > 0.1f)) ? ResourceLevelFourQuantity : ResourceLevelThreeQuantity)));
            double num2 = 1.0;
            if (pirateSpaceport != null)
            {
                switch (pirateSpaceport.SubRole)
                {
                    case BuiltObjectSubRole.SmallSpacePort:
                        num2 = 1.0;
                        break;
                    case BuiltObjectSubRole.MediumSpacePort:
                        num2 = 2.0;
                        break;
                    case BuiltObjectSubRole.LargeSpacePort:
                        num2 = 4.0;
                        break;
                }
            }
            return (int)(num * num2);
        }

        private void MaintainIndependentColonyFuelLevels()
        {
            for (int i = 0; i < IndependentColonies.Count; i++)
            {
                Habitat habitat = IndependentColonies[i];
                if (habitat.Owner != IndependentEmpire)
                {
                    continue;
                }
                OrderList orders = Orders.GetOrders(habitat);
                for (int j = 0; j < ResourceSystem.FuelResources.Count; j++)
                {
                    ResourceDefinition resourceDefinition = ResourceSystem.FuelResources[j];
                    if (resourceDefinition != null)
                    {
                        CheckAndOrderResource(habitat, orders, new Resource(resourceDefinition.ResourceID));
                    }
                }
            }
        }

        private void CheckAndOrderResource(Habitat colony, OrderList colonyOrders, Resource resource)
        {
            int amountToOrder = 0;
            int num = CalculateResourceLevel(resource, colony, isMiningStation: true, isIndependent: true);
            int minimumResourceLevel = (int)((double)num * 0.6);
            if (!CheckResourceMeetsMinimumLevel(resource, minimumResourceLevel, num, colony, colonyOrders, out amountToOrder))
            {
                _ = ResourceCurrentPrices[resource.ResourceID];
                CreateOrder(colony, resource, amountToOrder, isState: false);
            }
        }

        private bool CheckResourceMeetsMinimumLevel(Resource resource, int minimumResourceLevel, int maximumResourceLevel, Habitat colony, OrderList colonyOrders, out int amountToOrder)
        {
            bool result = false;
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            int num4 = -1;
            if (colony.Cargo != null && colony.Cargo.GetExists(resource))
            {
                num4 = colony.Cargo.IndexOf(resource, colony.Owner);
            }
            if (num4 >= 0)
            {
                num = colony.Cargo[num4].Amount;
                num2 = num;
            }
            int num5;
            for (num5 = colonyOrders.IndexOf(resource.ResourceID, 0); num5 >= 0; num5 = colonyOrders.IndexOf(resource.ResourceID, num5))
            {
                num3 = colonyOrders[num5].AmountRequested;
                num2 += num3;
                num5++;
            }
            amountToOrder = Math.Max(0, maximumResourceLevel - num2);
            if (amountToOrder < ColonyMinimumResourceReorderAmount)
            {
                amountToOrder = 0;
            }
            if (num2 >= minimumResourceLevel)
            {
                result = true;
            }
            return result;
        }

        public Order CreateOrder(Habitat colony, Resource resource, int amount, bool isState)
        {
            return CreateOrder(colony, resource, amount, isState, allowExpiry: false);
        }

        public Order CreateOrder(Habitat colony, Resource resource, int amount, bool isState, bool allowExpiry)
        {
            long expiryDate = CurrentStarDate + (int)(OrderExpiryYearsLuxury * (double)RealSecondsInGalacticYear * 1000.0);
            if (!allowExpiry || !resource.IsLuxuryResource)
            {
                expiryDate = CurrentStarDate + (int)(1000.0 * (double)RealSecondsInGalacticYear * 1000.0);
            }
            return CreateOrder(colony, resource, amount, isState, expiryDate);
        }

        public Order CreateOrder(Habitat colony, Resource resource, int amount, bool isState, long expiryDate)
        {
            int maximumFulfillmentDistance = CalculateMaximumOrderFulfillmentDistance(colony);
            Order order = new Order(this, colony, resource, amount, expiryDate, maximumFulfillmentDistance);
            order.MinimumContractSize = MinimumContractSize;
            order.IsStateOrder = isState;
            Orders.Add(order);
            return order;
        }

        public double CalculateCurrentCargoValue(Cargo cargo, int amount)
        {
            double num = 0.0;
            if (cargo.CommodityResource != null)
            {
                Resource commodityResource = cargo.CommodityResource;
                num = ResourceCurrentPrices[commodityResource.ResourceID];
            }
            else if (cargo.CommodityComponent != null)
            {
                Component commodityComponent = cargo.CommodityComponent;
                num = ComponentCurrentPrices[commodityComponent.ComponentID];
            }
            return num * (double)amount;
        }

        public double CalculateAverageHappiness()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageHappiness();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageStateCashPerPopulation()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageStateCashPerPopulation();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageCashflowPerPopulation()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageCashflowPerPopulation();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageShipMaintenancePerPopulation()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageShipMaintenancePerPopulation();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageMilitaryStrengthPerPopulation()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageMilitaryStrengthPerPopulation();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageSpaceportsPerColony()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageSpaceportsPerColony();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageResearchStationsPerColony()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageResearchStationsPerColony();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageMiningStationsPerColony()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageMiningStationsPerColony();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageCapitalShipsPerColony()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageCapitalShipsPerColony();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageCorruption()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.Corruption;
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public double CalculateAverageConstructionShipsPerColony()
        {
            double num = 0.0;
            int num2 = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active)
                {
                    num += empire.AverageConstructionShipsPerColony();
                    num2++;
                }
            }
            return num / (double)num2;
        }

        public static void LoadRaceBiases(string applicationStartupPath, string customizationSetName, RaceList races)
        {
            int num = 0;
            string text = applicationStartupPath + "\\raceBiases.txt";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\raceBiases.txt";
            }
            if (!File.Exists(text))
            {
                text = applicationStartupPath + "\\raceBiases.txt";
            }
            try
            {
                if (!File.Exists(text))
                {
                    return;
                }
                List<List<int>> list = new List<List<int>>();
                List<string> list2 = new List<string>();
                List<int> list3 = new List<int>();
                FileStream fileStream = File.OpenRead(text);
                StreamReader streamReader = new StreamReader(fileStream);
                while (!streamReader.EndOfStream)
                {
                    num++;
                    string empty = string.Empty;
                    string text2 = streamReader.ReadLine();
                    if (string.IsNullOrEmpty(text2) || !(text2.Trim() != string.Empty) || !(text2.Trim().Substring(0, 1) != "'"))
                    {
                        continue;
                    }
                    int num2 = 0;
                    int num3 = text2.IndexOf(",", num2);
                    if (num3 >= 0)
                    {
                        string text3 = text2.Substring(num2, num3 - num2);
                        text3 = text3.Trim();
                        int result = -1;
                        if (int.TryParse(text3, out result))
                        {
                            list3.Add(result);
                            num2 = num3 + 1;
                            num3 = text2.IndexOf(",", num2);
                            if (num3 >= 0)
                            {
                                string text4 = text2.Substring(num2, num3 - num2);
                                text4 = text4.Trim();
                                empty = text4;
                                list2.Add(empty);
                                num2 = num3 + 1;
                                List<int> list4 = new List<int>();
                                int num4 = 1;
                                while (num3 >= 0)
                                {
                                    num3 = text2.IndexOf(",", num2);
                                    string empty2 = string.Empty;
                                    empty2 = ((num3 < 0) ? text2.Substring(num2, text2.Length - num2) : text2.Substring(num2, num3 - num2));
                                    empty2 = empty2.Trim();
                                    int result2 = 0;
                                    if (int.TryParse(empty2, out result2))
                                    {
                                        result2 = Math.Max(-50, Math.Min(result2, 50));
                                        list4.Add(result2);
                                        if (list4.Count > races.Count)
                                        {
                                            throw new ApplicationException("More bias values than races at line " + num + " in file " + text);
                                        }
                                        num2 = num3 + 1;
                                        num4++;
                                        continue;
                                    }
                                    throw new ApplicationException("Could not read Bias Value " + num4 + " at line " + num + " of file " + text);
                                }
                                list.Add(list4);
                                continue;
                            }
                            throw new ApplicationException("Could not read Race Name at line " + num + " of file " + text);
                        }
                        throw new ApplicationException("Could not read Race Index number at line " + num + " of file " + text);
                    }
                    throw new ApplicationException("Could not read Race Index number at line " + num + " of file " + text);
                }
                for (int i = 0; i < races.Count; i++)
                {
                    int num5 = list2.IndexOf(races[i].Name);
                    if (num5 < 0 || num5 >= list.Count)
                    {
                        continue;
                    }
                    List<int> list5 = new List<int>();
                    for (int j = 0; j < list[num5].Count; j++)
                    {
                        list5.Add(0);
                    }
                    for (int k = 0; k < list[num5].Count; k++)
                    {
                        int num6 = list2.IndexOf(races[k].Name);
                        if (num6 >= 0 && num6 < list[num5].Count)
                        {
                            list5[k] = list[num5][num6];
                        }
                    }
                    races[i].Biases = new RaceBiasList();
                    races[i].Biases.LoadBiases(races, list5);
                }
                streamReader.Close();
                fileStream.Close();
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error at line " + num + " reading file " + text);
            }
        }

        public static double ResolveStandardRaceBias(Race race, Race otherRace)
        {
            double result = 0.0;
            if (race != null && otherRace != null)
            {
                if (race.Biases != null && race.Biases.Populated)
                {
                    return race.Biases.GetBias(otherRace);
                }
                if (race.FamilyId >= 0 && race.FamilyId < RaceFamiliesStatic.Count)
                {
                    return RaceFamiliesStatic[race.FamilyId].Biases.GetBias(otherRace.FamilyId);
                }
            }
            return result;
        }

        public Empire GetEmpireById(int empireId)
        {
            Empire empire = null;
            empire = ((empireId != IndependentEmpire.EmpireId) ? Empires.GetByEmpireId(empireId) : IndependentEmpire);
            if (empire == null)
            {
                empire = PirateEmpires.GetByEmpireId(empireId);
            }
            return empire;
        }

        public static string ResolveWarWearinessDescription(double warWearinessValue)
        {
            string result = string.Empty;
            if (warWearinessValue <= 0.0)
            {
                result = TextResolver.GetText("None");
            }
            else if (warWearinessValue > 0.0 && warWearinessValue <= 6.0)
            {
                result = TextResolver.GetText("Mild");
            }
            else if (warWearinessValue >= 6.0 && warWearinessValue <= 12.0)
            {
                result = TextResolver.GetText("Tolerable");
            }
            else if (warWearinessValue >= 12.0 && warWearinessValue <= 18.0)
            {
                result = TextResolver.GetText("Significant");
            }
            else if (warWearinessValue >= 18.0 && warWearinessValue <= 26.0)
            {
                result = TextResolver.GetText("Serious");
            }
            else if (warWearinessValue >= 26.0 && warWearinessValue <= 34.0)
            {
                result = TextResolver.GetText("Critical");
            }
            else if (warWearinessValue > 34.0)
            {
                result = TextResolver.GetText("Rampant");
            }
            return result;
        }

        public static List<string> ResolveRaceCharacteristics(Race race)
        {
            List<string> list = new List<string>();
            string empty = string.Empty;
            string empty2 = string.Empty;
            string empty3 = string.Empty;
            empty3 = ResolveRaceCharacteristicIntensity(race.AggressionLevel);
            empty = string.Format(arg1: (race.AggressionLevel < 100) ? TextResolver.GetText("Passive") : TextResolver.GetText("Aggressive"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: empty3);
            list.Add(empty);
            empty3 = ResolveRaceCharacteristicIntensity(race.CautionLevel);
            empty = string.Format(arg1: (race.CautionLevel < 100) ? TextResolver.GetText("Reckless") : TextResolver.GetText("Cautious"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: empty3);
            list.Add(empty);
            empty3 = ResolveRaceCharacteristicIntensity(race.FriendlinessLevel);
            empty = string.Format(arg1: (race.FriendlinessLevel < 100) ? TextResolver.GetText("Unfriendly") : TextResolver.GetText("Friendly"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: empty3);
            list.Add(empty);
            empty3 = ResolveRaceCharacteristicIntensity(race.IntelligenceLevel);
            empty = string.Format(arg1: (race.IntelligenceLevel < 100) ? TextResolver.GetText("Stupid") : TextResolver.GetText("Intelligent"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: empty3);
            list.Add(empty);
            empty3 = ResolveRaceCharacteristicIntensity(race.LoyaltyLevel);
            empty = string.Format(arg1: (race.LoyaltyLevel < 100) ? TextResolver.GetText("Unreliable") : TextResolver.GetText("Dependable"), format: TextResolver.GetText("Racial Characteristic INTENSITY QUALITY"), arg0: empty3);
            list.Add(empty);
            return list;
        }

        private static string ResolveRaceCharacteristicIntensity(int level)
        {
            string result = string.Empty;
            level -= 100;
            level = Math.Abs(level);
            if (level >= 30)
            {
                result = TextResolver.GetText("Extremely");
            }
            else if (level >= 17)
            {
                result = TextResolver.GetText("Very");
            }
            else if (level >= 6)
            {
                result = TextResolver.GetText("Quite");
            }
            else if (level < 6)
            {
                result = TextResolver.GetText("Slightly");
            }
            return result;
        }

        public static List<string> ResolveRaceBonuses(Race race)
        {
            List<string> list = new List<string>();
            if (race.EspionageBonus > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionEspionage((double)race.EspionageBonus / 100.0));
            }
            if (race.ResearchBonus > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionResearch((double)race.ResearchBonus / 100.0));
            }
            if (race.ResourceExtractionBonus > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionResourceExtraction((double)race.ResourceExtractionBonus / 100.0));
            }
            if (race.SatisfactionModifier > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionSatisfaction((double)race.SatisfactionModifier / 100.0));
            }
            if (race.ShipMaintenanceSavings > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionShipMaintenance((double)race.ShipMaintenanceSavings / 100.0));
            }
            if (race.TroopMaintenanceSavings > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionTroopMaintenance((double)race.TroopMaintenanceSavings / 100.0));
            }
            if (race.WarWearinessAttenuation > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionWarWeariness((double)race.WarWearinessAttenuation / 100.0));
            }
            if (race.TradeBonus > 0)
            {
                list.Add(ResolveEmpireAbilityBonusDescriptionTrade((double)race.TradeBonus / 100.0));
            }
            return list;
        }

        public static string ResolveEmpireAbilityBonusDescriptionShipMaintenance(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("Ship Maintenance Ability Bonus"), "-" + value.ToString("0%"));
            }
            return result;
        }

        public static string ResolveEmpireAbilityBonusDescriptionTroopMaintenance(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("Troop Maintenance Ability Bonus"), "-" + value.ToString("0%"));
            }
            return result;
        }

        public static string ResolveEmpireAbilityBonusDescriptionResourceExtraction(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("Resource Extraction Ability Bonus"), "+" + value.ToString("0%"));
            }
            return result;
        }

        public static string ResolveEmpireAbilityBonusDescriptionWarWeariness(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("War Weariness Ability Bonus"), "-" + value.ToString("0%"));
            }
            return result;
        }

        public static string ResolveEmpireAbilityBonusDescriptionSatisfaction(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("Satisfaction Ability Bonus"), "+" + value.ToString("0%"));
            }
            return result;
        }

        public static string ResolveEmpireAbilityBonusDescriptionResearch(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("Research Ability Bonus"), "+" + value.ToString("0%"));
            }
            return result;
        }

        public static string ResolveEmpireAbilityBonusDescriptionEspionage(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("Espionage Ability Bonus"), "+" + value.ToString("0%"));
            }
            return result;
        }

        public static string ResolveEmpireAbilityBonusDescriptionTrade(double value)
        {
            string result = string.Empty;
            if (value > 0.0)
            {
                result = string.Format(TextResolver.GetText("Trade Ability Bonus"), "+" + value.ToString("0%"));
            }
            return result;
        }

        internal static ImageAttributes CalculateImageAttributes(Color tintColor)
        {
            float num = (float)(int)tintColor.R / 255f;
            float num2 = (float)(int)tintColor.G / 255f;
            float num3 = (float)(int)tintColor.B / 255f;
            float[][] newColorMatrix = new float[5][]
            {
            new float[5] { num, 0f, 0f, 0f, 0f },
            new float[5] { 0f, num2, 0f, 0f, 0f },
            new float[5] { 0f, 0f, num3, 0f, 0f },
            new float[5] { 0f, 0f, 0f, 1f, 0f },
            new float[5] { 0f, 0f, 0f, 0f, 1f }
            };
            ColorMatrix colorMatrix = new ColorMatrix(newColorMatrix);
            ImageAttributes imageAttributes = new ImageAttributes();
            imageAttributes.SetColorMatrix(colorMatrix);
            return imageAttributes;
        }

        internal static Bitmap TintBitmap(Bitmap inputImage, Color tintColor)
        {
            ImageAttributes imageAttr = CalculateImageAttributes(tintColor);
            Bitmap bitmap = new Bitmap(inputImage);
            Graphics graphics = Graphics.FromImage(bitmap);
            Rectangle destRect = new Rectangle(0, 0, inputImage.Width, inputImage.Height);
            graphics.DrawImage(inputImage, destRect, 0, 0, inputImage.Width, inputImage.Height, GraphicsUnit.Pixel, imageAttr);
            return bitmap;
        }

        public static int GenerateEmpireFlag(Color mainColor, Color secondaryColor, int flagStyle, List<Bitmap> flagShapes, ref Bitmap smallFlagPicture, ref Bitmap largeFlagPicture)
        {
            if (flagStyle < 0)
            {
                Random random = new Random((int)DateTime.Now.Ticks);
                flagStyle = random.Next(0, flagShapes.Count);
            }
            Bitmap bitmap = null;
            if (flagStyle < flagShapes.Count)
            {
                bitmap = flagShapes[flagStyle];
            }
            else if (flagShapes.Count > 0)
            {
                bitmap = flagShapes[0];
            }
            if (bitmap != null)
            {
                largeFlagPicture = new Bitmap(100, 60, PixelFormat.Format32bppPArgb);
                using (Graphics graphics = Graphics.FromImage(largeFlagPicture))
                {
                    graphics.SmoothingMode = SmoothingMode.AntiAlias;
                    graphics.CompositingQuality = CompositingQuality.HighQuality;
                    graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    SolidBrush brush = new SolidBrush(mainColor);
                    new SolidBrush(secondaryColor);
                    Rectangle rectangle = new Rectangle(0, 0, 100, 60);
                    graphics.FillRectangle(brush, rectangle);
                    using Bitmap bitmap2 = TintBitmap(bitmap, secondaryColor);
                    Rectangle srcRect = new Rectangle(0, 0, bitmap2.Width, bitmap2.Height);
                    graphics.DrawImage(bitmap2, rectangle, srcRect, GraphicsUnit.Pixel);
                }
                smallFlagPicture = new Bitmap(13, 8, PixelFormat.Format32bppPArgb);
                using Graphics graphics2 = Graphics.FromImage(smallFlagPicture);
                graphics2.SmoothingMode = SmoothingMode.AntiAlias;
                graphics2.CompositingQuality = CompositingQuality.HighQuality;
                graphics2.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics2.DrawImage(largeFlagPicture, new Rectangle(0, 0, 13, 8));
                return flagStyle;
            }
            return flagStyle;
        }

        public bool CheckEmpireColorUsed(bool isPirateFaction, Color color)
        {
            List<Color> colorList = DetermineUsedEmpireColors(isPirateFaction);
            return CheckListContainsColor(colorList, color);
        }

        public List<Color> DetermineUsedEmpireColors(bool isPirateFaction)
        {
            List<Color> list = new List<Color>();
            if (isPirateFaction)
            {
                for (int i = 0; i < PirateEmpires.Count; i++)
                {
                    list.Add(PirateEmpires[i].MainColor);
                }
            }
            else
            {
                for (int j = 0; j < Empires.Count; j++)
                {
                    list.Add(Empires[j].MainColor);
                }
            }
            return list;
        }

        public Color SelectUnusedMainColor(bool isPirateFaction, out int unusedColorKey)
        {
            unusedColorKey = 0;
            List<Color> colorList = DetermineUsedEmpireColors(isPirateFaction);
            List<Color> list = new List<Color>();
            List<int> list2 = new List<int>();
            List<Color> list3 = new List<Color>();
            List<int> list4 = new List<int>();
            for (int i = 0; i < 20; i++)
            {
                if (isPirateFaction)
                {
                    list3.Add(SelectColorFromKeyDark(i));
                }
                else
                {
                    list3.Add(SelectColorFromKey(i));
                }
                list4.Add(i);
            }
            for (int j = 0; j < list3.Count; j++)
            {
                if (!CheckListContainsColor(colorList, list3[j]))
                {
                    list.Add(list3[j]);
                    list2.Add(list4[j]);
                }
            }
            Color result = Color.Transparent;
            if (list.Count > 0)
            {
                int index = Rnd.Next(0, list.Count);
                result = list[index];
                unusedColorKey = list2[index];
            }
            else
            {
                if (isPirateFaction)
                {
                    switch (Rnd.Next(0, 3))
                    {
                        case 0:
                            result = Color.FromArgb(Rnd.Next(48, 96), Rnd.Next(8, 64), Rnd.Next(8, 64));
                            break;
                        case 1:
                            result = Color.FromArgb(Rnd.Next(8, 64), Rnd.Next(48, 96), Rnd.Next(8, 64));
                            break;
                        case 2:
                            result = Color.FromArgb(Rnd.Next(8, 64), Rnd.Next(8, 64), Rnd.Next(48, 96));
                            break;
                    }
                }
                else
                {
                    result = Color.FromArgb(Rnd.Next(32, 256), Rnd.Next(32, 256), Rnd.Next(32, 256));
                }
                unusedColorKey = -1;
            }
            return result;
        }

        private bool CheckListContainsColor(List<Color> colorList, Color checkColor)
        {
            for (int i = 0; i < colorList.Count; i++)
            {
                if (CheckColorsEqual(colorList[i], checkColor))
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckColorsEqual(Color color1, Color color2)
        {
            if (color1.R == color2.R && color1.G == color2.G && color1.B == color2.B)
            {
                return true;
            }
            return false;
        }

        public static Color DetermineContrastDropShadowColor(Color color)
        {
            return DetermineContrastDropShadowColor(color, Color.White, Color.Black);
        }

        public static Color DetermineContrastDropShadowColor(Color color, Color lightColor, Color darkColor)
        {
            double num = 1.0 - (0.333 * (double)(int)color.R + 0.333 * (double)(int)color.G + 0.333 * (double)(int)color.B) / 255.0;
            if (num < 0.7)
            {
                return darkColor;
            }
            return lightColor;
        }

        public static Color DetermineSecondaryColor(Color color)
        {
            int num = (color.R + color.G + color.B) / 3;
            if (num > 80 && num < 176)
            {
                Color darkColor = Color.Black;
                if (color.R > color.G && color.R > color.B)
                {
                    darkColor = Color.FromArgb(48, 0, 0);
                }
                else if (color.G > color.R && color.G > color.B)
                {
                    darkColor = Color.FromArgb(0, 48, 0);
                }
                else if (color.B > color.G && color.B > color.R)
                {
                    darkColor = Color.FromArgb(0, 0, 48);
                }
                return DetermineContrastDropShadowColor(color, Color.FromArgb(255, 255, 255), darkColor);
            }
            return DetermineContrastColor(color);
        }

        public static Color DetermineContrastColor(Color color)
        {
            int red = 255 - color.R;
            int green = 255 - color.G;
            int blue = 255 - color.B;
            return Color.FromArgb(red, green, blue);
        }

        public static Color DetermineComplementaryColor(Color color)
        {
            Color white = Color.White;
            int r = color.R;
            int g = color.G;
            int b = color.B;
            int num = Math.Min(r, Math.Min(g, b));
            int num2 = Math.Max(r, Math.Max(g, b));
            int num3 = num + num2;
            byte red = (byte)Math.Max(0, Math.Min(255, num3 - r));
            byte green = (byte)Math.Max(0, Math.Min(255, num3 - g));
            byte blue = (byte)Math.Max(0, Math.Min(255, num3 - b));
            return Color.FromArgb(red, green, blue);
        }

        public static int SelectComplementaryColorKey(int mainColorKey)
        {
            int result = 0;
            switch (mainColorKey)
            {
                case 0:
                    result = 3;
                    break;
                case 1:
                    result = 8;
                    break;
                case 2:
                    result = 20;
                    break;
                case 3:
                    result = 1;
                    break;
                case 4:
                    result = 14;
                    break;
                case 5:
                    result = 9;
                    break;
                case 6:
                    result = 4;
                    break;
                case 7:
                    result = 12;
                    break;
                case 8:
                    result = 11;
                    break;
                case 9:
                    result = 12;
                    break;
                case 10:
                    result = 20;
                    break;
                case 11:
                    result = 14;
                    break;
                case 12:
                    result = 9;
                    break;
                case 13:
                    result = 20;
                    break;
                case 14:
                    result = 12;
                    break;
                case 15:
                    result = 8;
                    break;
                case 16:
                    result = 20;
                    break;
                case 17:
                    result = 8;
                    break;
                case 18:
                    result = 11;
                    break;
                case 19:
                    result = 11;
                    break;
                case 20:
                    result = 10;
                    break;
                case 21:
                    result = 4;
                    break;
                case 22:
                    result = 19;
                    break;
            }
            return result;
        }

        public static Color SelectColorFromKey(int key)
        {
            Color result = Color.Empty;
            switch (key)
            {
                case 0:
                    result = Color.FromArgb(255, 0, 0, 176);
                    break;
                case 1:
                    result = Color.FromArgb(255, 0, 64, 232);
                    break;
                case 2:
                    result = Color.FromArgb(255, 0, 128, 255);
                    break;
                case 3:
                    result = Color.FromArgb(255, 0, 255, 255);
                    break;
                case 4:
                    result = Color.FromArgb(255, 24, 80, 24);
                    break;
                case 5:
                    result = Color.FromArgb(255, 0, 128, 0);
                    break;
                case 6:
                    result = Color.FromArgb(255, 0, 204, 0);
                    break;
                case 7:
                    result = Color.FromArgb(255, 160, 255, 0);
                    break;
                case 8:
                    result = Color.FromArgb(255, 255, 255, 32);
                    break;
                case 9:
                    result = Color.FromArgb(255, 255, 104, 31);
                    break;
                case 10:
                    result = Color.FromArgb(255, 255, 0, 48);
                    break;
                case 11:
                    result = Color.FromArgb(255, 135, 0, 0);
                    break;
                case 12:
                    result = Color.FromArgb(255, 96, 64, 0);
                    break;
                case 13:
                    result = Color.FromArgb(255, 144, 112, 48);
                    break;
                case 14:
                    result = Color.FromArgb(255, 224, 192, 96);
                    break;
                case 15:
                    result = Color.FromArgb(255, 168, 64, 255);
                    break;
                case 16:
                    result = Color.FromArgb(255, 112, 32, 204);
                    break;
                case 17:
                    result = Color.FromArgb(255, 132, 49, 121);
                    break;
                case 18:
                    result = Color.FromArgb(255, 255, 0, 255);
                    break;
                case 19:
                    result = Color.FromArgb(255, 255, 166, 201);
                    break;
                case 20:
                    result = Color.FromArgb(255, 255, 255, 255);
                    break;
                case 21:
                    result = Color.FromArgb(255, 153, 153, 51);
                    break;
                case 22:
                    result = Color.FromArgb(255, 192, 0, 128);
                    break;
                case 23:
                    result = Color.FromArgb(255, 1, 1, 1);
                    break;
            }
            return result;
        }

        public static Color SelectColorFromKeyDark(int key)
        {
            Color result = Color.Empty;
            switch (key)
            {
                case 0:
                    result = Color.FromArgb(255, 0, 0, 59);
                    break;
                case 1:
                    result = Color.FromArgb(255, 0, 21, 77);
                    break;
                case 2:
                    result = Color.FromArgb(255, 0, 43, 85);
                    break;
                case 3:
                    result = Color.FromArgb(255, 0, 85, 85);
                    break;
                case 4:
                    result = Color.FromArgb(255, 8, 27, 8);
                    break;
                case 5:
                    result = Color.FromArgb(255, 0, 43, 0);
                    break;
                case 6:
                    result = Color.FromArgb(255, 0, 68, 0);
                    break;
                case 7:
                    result = Color.FromArgb(255, 53, 85, 0);
                    break;
                case 8:
                    result = Color.FromArgb(255, 85, 85, 11);
                    break;
                case 9:
                    result = Color.FromArgb(255, 85, 35, 10);
                    break;
                case 10:
                    result = Color.FromArgb(255, 85, 0, 16);
                    break;
                case 11:
                    result = Color.FromArgb(255, 45, 0, 0);
                    break;
                case 12:
                    result = Color.FromArgb(255, 32, 21, 0);
                    break;
                case 13:
                    result = Color.FromArgb(255, 48, 37, 16);
                    break;
                case 14:
                    result = Color.FromArgb(255, 75, 64, 32);
                    break;
                case 15:
                    result = Color.FromArgb(255, 56, 21, 85);
                    break;
                case 16:
                    result = Color.FromArgb(255, 37, 11, 68);
                    break;
                case 17:
                    result = Color.FromArgb(255, 44, 16, 40);
                    break;
                case 18:
                    result = Color.FromArgb(255, 85, 0, 85);
                    break;
                case 19:
                    result = Color.FromArgb(255, 85, 55, 67);
                    break;
                case 20:
                    result = Color.FromArgb(255, 255, 255, 255);
                    break;
                case 21:
                    result = Color.FromArgb(255, 51, 51, 17);
                    break;
                case 22:
                    result = Color.FromArgb(255, 64, 0, 43);
                    break;
                case 23:
                    result = Color.FromArgb(255, 1, 1, 1);
                    break;
            }
            return result;
        }

        public float SelectRandomHeading()
        {
            return (float)(Math.PI - Rnd.NextDouble() * Math.PI * 2.0);
        }

        private void GeneratePirateOffers()
        {
            int maxValue = (int)(6.0 * _ColonyFillFactor);
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (Rnd.Next(0, maxValue) == 1 && empire.KnownPirateEmpires.Count > 0)
                {
                    int index = Rnd.Next(0, empire.KnownPirateEmpires.Count);
                    Empire empire2 = empire.KnownPirateEmpires[index];
                    if (empire2 != null && !empire2.PirateEmpireSuperPirates && empire.KnownPirateEmpires.Contains(empire2))
                    {
                        GeneratePirateOffersForSingleEmpire(empire2, empire);
                    }
                }
            }
        }

        public bool GeneratePirateOffersForSingleEmpire(Empire pirateFaction, Empire empire)
        {
            bool flag = false;
            if (empire != null && pirateFaction != PlayerEmpire)
            {
                PirateRelation pirateRelation = pirateFaction.ObtainPirateRelation(empire);
                if (pirateRelation != null)
                {
                    long num = (long)((double)RealSecondsInGalacticYear * 3.0 * 1000.0);
                    int num2 = empire.PirateRelations.CountKnownPirateFactions();
                    double num3 = Math.Min(10.0, Math.Max(1.0, (double)num2 / 3.0));
                    num = (long)((double)num * num3);
                    long num4 = (long)((double)RealSecondsInGalacticYear * 0.5);
                    long num5 = (long)(((double)num4 * 0.5 + (double)num4 * 0.5 * Rnd.NextDouble()) * num3);
                    num += num5;
                    long currentStarDate = CurrentStarDate;
                    long num6 = currentStarDate - num;
                    switch (Rnd.Next(0, 3))
                    {
                        case 0:
                            {
                                if (!pirateFaction.DetermineDesirePirateProtection(empire))
                                {
                                    break;
                                }
                                long num15 = (long)((double)RealSecondsInGalacticYear * 1.5 * 1000.0);
                                num15 = (long)((double)num15 * num3);
                                long num16 = currentStarDate - num15;
                                if (pirateRelation.Type != PirateRelationType.Protection && pirateRelation.LastOfferDate < num16)
                                {
                                    string text8 = TextResolver.GetText("Pirate Offer Protection");
                                    if (pirateFaction.PirateEmpireBaseHabitat != null && empire.PirateEmpireBaseHabitat != null)
                                    {
                                        text8 = TextResolver.GetText("Pirate Offer Protection Other Pirate");
                                    }
                                    pirateFaction.SendMessageToEmpire(empire, EmpireMessageType.PirateOfferProtection, null, text8);
                                    pirateRelation.LastOfferDate = currentStarDate;
                                }
                                break;
                            }
                        case 1:
                        case 2:
                            {
                                if (pirateRelation.LastInfoDate >= num6)
                                {
                                    break;
                                }
                                pirateFaction.GenerateSaleableInfoForEmpire(pirateFaction, empire, out var unmetEmpires, out var unexploredSystems, out var independentColonies, out var ruinHabitats, out var debrisFieldLocations, out var planetDestroyerLocations, out var restrictedAreaLocations);
                                if (!empire.CheckEmpireHasHyperDriveTech(empire))
                                {
                                    unmetEmpires.Clear();
                                    unexploredSystems.Clear();
                                }
                                if (unmetEmpires.Count > 0)
                                {
                                    Empire[] array = unmetEmpires.ToArray();
                                    foreach (Empire item in array)
                                    {
                                        if (empire != null && !empire.CheckEmpireHasHyperDriveTech(empire))
                                        {
                                            unmetEmpires.Remove(item);
                                        }
                                    }
                                }
                                bool flag2 = false;
                                if (unmetEmpires.Count > 0 || unexploredSystems.Count > 0 || independentColonies.Count > 0 || ruinHabitats.Count > 0 || debrisFieldLocations.Count > 0 || restrictedAreaLocations.Count > 0 || planetDestroyerLocations.Count > 0)
                                {
                                    flag2 = true;
                                }
                                double num7 = empire.StateMoney * 0.75;
                                if (!flag2)
                                {
                                    break;
                                }
                                int num8 = 0;
                                while (!flag && num8 < 10)
                                {
                                    switch (Rnd.Next(0, 4))
                                    {
                                        case 0:
                                            if (unmetEmpires.Count > 0)
                                            {
                                                int index7 = Rnd.Next(0, unmetEmpires.Count);
                                                string text7 = TextResolver.GetText("Pirate Offer Contact Empire");
                                                double value = (double)unmetEmpires[0].TotalColonyStrategicValue / 200.0;
                                                value = Math.Round(value, 0);
                                                value = Math.Min(value, 10000.0);
                                                if (num7 >= value)
                                                {
                                                    EmpireMessage empireMessage7 = new EmpireMessage(pirateFaction, EmpireMessageType.SellInfoUnmetEmpire, unmetEmpires[index7]);
                                                    empireMessage7.Description = text7;
                                                    empireMessage7.Money = (int)value;
                                                    pirateFaction.SendMessageToEmpire(empireMessage7, empire);
                                                    flag = true;
                                                }
                                            }
                                            break;
                                        case 1:
                                            if (unexploredSystems.Count > 0)
                                            {
                                                int index5 = Rnd.Next(0, unexploredSystems.Count);
                                                string text5 = TextResolver.GetText("Pirate Offer System Map");
                                                double num13 = 2000.0;
                                                if (num7 >= num13)
                                                {
                                                    EmpireMessage empireMessage5 = new EmpireMessage(pirateFaction, EmpireMessageType.SellInfoSystemMap, unexploredSystems[index5]);
                                                    empireMessage5.Description = text5;
                                                    empireMessage5.Money = (int)num13;
                                                    pirateFaction.SendMessageToEmpire(empireMessage5, empire);
                                                    flag = true;
                                                }
                                            }
                                            break;
                                        case 2:
                                            if (independentColonies.Count > 0)
                                            {
                                                int index6 = Rnd.Next(0, independentColonies.Count);
                                                string text6 = TextResolver.GetText("Pirate Offer Independent Colony");
                                                double num14 = 20000.0;
                                                if (num7 >= num14)
                                                {
                                                    EmpireMessage empireMessage6 = new EmpireMessage(pirateFaction, EmpireMessageType.SellInfoIndependentColony, independentColonies[index6]);
                                                    empireMessage6.Description = text6;
                                                    empireMessage6.Money = (int)num14;
                                                    pirateFaction.SendMessageToEmpire(empireMessage6, empire);
                                                    flag = true;
                                                }
                                            }
                                            break;
                                        case 3:
                                            if (ruinHabitats.Count > 0)
                                            {
                                                int index = Rnd.Next(0, ruinHabitats.Count);
                                                string text = TextResolver.GetText("Pirate Offer Discovery");
                                                double num9 = 30000.0;
                                                if (num7 >= num9)
                                                {
                                                    EmpireMessage empireMessage = new EmpireMessage(pirateFaction, EmpireMessageType.SellInfoRuins, ruinHabitats[index]);
                                                    empireMessage.Description = text;
                                                    empireMessage.Money = (int)num9;
                                                    pirateFaction.SendMessageToEmpire(empireMessage, empire);
                                                    flag = true;
                                                }
                                            }
                                            else if (restrictedAreaLocations.Count > 0)
                                            {
                                                int index2 = Rnd.Next(0, restrictedAreaLocations.Count);
                                                string text2 = TextResolver.GetText("Pirate Offer Discovery");
                                                double num10 = 30000.0;
                                                if (num7 >= num10)
                                                {
                                                    EmpireMessage empireMessage2 = new EmpireMessage(pirateFaction, EmpireMessageType.SellInfoRestrictedArea, restrictedAreaLocations[index2]);
                                                    empireMessage2.Description = text2;
                                                    empireMessage2.Money = (int)num10;
                                                    pirateFaction.SendMessageToEmpire(empireMessage2, empire);
                                                    flag = true;
                                                }
                                            }
                                            else if (debrisFieldLocations.Count > 0)
                                            {
                                                int index3 = Rnd.Next(0, debrisFieldLocations.Count);
                                                string text3 = TextResolver.GetText("Pirate Offer Discovery");
                                                double num11 = 30000.0;
                                                if (num7 >= num11)
                                                {
                                                    EmpireMessage empireMessage3 = new EmpireMessage(pirateFaction, EmpireMessageType.SellInfoDebrisField, debrisFieldLocations[index3]);
                                                    empireMessage3.Description = text3;
                                                    empireMessage3.Money = (int)num11;
                                                    pirateFaction.SendMessageToEmpire(empireMessage3, empire);
                                                    flag = true;
                                                }
                                            }
                                            else if (planetDestroyerLocations.Count > 0)
                                            {
                                                int index4 = Rnd.Next(0, planetDestroyerLocations.Count);
                                                string text4 = TextResolver.GetText("Pirate Offer Discovery");
                                                double num12 = 30000.0;
                                                if (num7 >= num12)
                                                {
                                                    EmpireMessage empireMessage4 = new EmpireMessage(pirateFaction, EmpireMessageType.SellInfoPlanetDestroyer, planetDestroyerLocations[index4]);
                                                    empireMessage4.Description = text4;
                                                    empireMessage4.Money = (int)num12;
                                                    pirateFaction.SendMessageToEmpire(empireMessage4, empire);
                                                    flag = true;
                                                }
                                            }
                                            break;
                                    }
                                    if (flag)
                                    {
                                        pirateRelation.LastInfoDate = currentStarDate;
                                    }
                                    num8++;
                                }
                                break;
                            }
                    }
                }
            }
            return flag;
        }

        private void ReviewColonyFillFactor()
        {
            int num = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                num += empire.Colonies.Count;
            }
            int num2 = Math.Min(700, StarCount);
            _ColonyFillFactor = 10.0 * ((double)num / (double)num2);
            _ColonyFillFactor = Math.Min(2.5, Math.Max(0.7, _ColonyFillFactor));
        }

        public void ReseedRandom()
        {
            SetRandom(new Random((int)DateTime.Now.Ticks));
            ResetRandom = false;
        }

        public void DoTasksTimeSensitive()
        {
            long currentStarDate = CurrentStarDate;
            DateTime currentDateTime = CurrentDateTime;
            DoTasksTimeSensitive(currentStarDate, currentDateTime);
        }

        public void DoTasksTimeSensitive(long starDate, DateTime time)
        {
            double totalSeconds = time.Subtract(_LastGalaxyProcessTimeSensitive).TotalSeconds;
            ReviewPirateMissionsAndAssign(starDate, totalSeconds);
            ProcessDelayedEventActions(starDate);
            _LastGalaxyProcessTimeSensitive = time;
        }

        public void DoTasks(bool gameFinished, Empire playerEmpire, VictoryConditions globalVictoryConditions, EmpireVictoryConditions playerConditionsToAchieve, EmpireVictoryConditions playerConditionsToPrevent)
        {
            DateTime currentDateTime = CurrentDateTime;
            TimeSpan timeSpan = currentDateTime.Subtract(_LastGalaxyProcessTime);
            TimeSpan timeSpan2 = currentDateTime.Subtract(_LastGalaxyHugeProcessTime);
            if (timeSpan.TotalSeconds < 0.0)
            {
                _LastGalaxyProcessTime = currentDateTime;
            }
            if (timeSpan2.TotalSeconds < 0.0)
            {
                _LastGalaxyHugeProcessTime = currentDateTime;
            }
            if (timeSpan2 >= HugeProcessingSpan)
            {
                _LastGalaxyHugeProcessTime = currentDateTime;
            }
            if (timeSpan >= LongProcessingSpan)
            {
                _LastGalaxyProcessTime = currentDateTime;
            }
            if (ResetRandom)
            {
                ReseedRandom();
            }
            ProcessPirateFleets(currentDateTime);
            bool flag = false;
            if (timeSpan2 >= HugeProcessingSpan)
            {
                ReviewEmpireTerritory(onlySystems: false);
                flag = true;
                SelectPopularDesignCandidates();
                DoGalaxyEvents();
                CleanupInvalidShipsInIndexes();
                ReseedRandom();
            }
            if (timeSpan >= LongProcessingSpan)
            {
                DeferEventsForGameStart = false;
                ReviewResourcePrices();
                ReviewComponentPrices();
                RemoveCompletedOrders();
                CancelExpiredOrders();
                UpdateSystemInfo(playerEmpire);
                ReviewIndependentColonies();
                IndependentEmpire.UpdateEmpireRefuellingLocations();
                IdentifyDisputedBases();
                GenerateIndependentTraders();
                AssignIndependentTraderMissions();
                GenerateNewPirateEmpires();
                CheckForTerminatedPirateEmpires();
                GenerateNewPirateShips();
                DoSuperPirateTasks();
                ClearEmptyDebrisFields();
                ClearCompletedPlanetDestroyerProjects();
                CheckMergePirateFactions();
                ReviewPirateEmpireActivities();
                MaintainIndependentColonyFuelLevels();
                IndependentEmpire.CheckMarketOrders();
                long currentStarDate = CurrentStarDate;
                IndependentEmpire.ReviewPirateSmugglingMissions(currentStarDate);
                IndependentEmpire.ReviewPirateDefendMissions(currentStarDate);
                IndependentColoniesMakeSmugglingOffersToPirates(currentStarDate);
                IndependentColoniesMakeDefendOffersToPirates(currentStarDate);
                ReviewRacePeriodicChanges();
                ReviewColonyFillFactor();
                if (!flag)
                {
                    ReviewEmpireTerritory(onlySystems: true);
                }
                ReviewWondersBuilt();
                ReviewEmpireDifficultyFactors();
                ReviewAchievements();
                if (!gameFinished)
                {
                    CheckVictoryConditions(playerEmpire, globalVictoryConditions, playerConditionsToAchieve, playerConditionsToPrevent);
                }
            }
        }

        public void ResetLastTouchTimes()
        {
            _LastGalaxyHugeProcessTime = DateTime.MinValue;
            _LastGalaxyProcessTime = DateTime.MinValue;
            _LastGalaxyProcessTimeSensitive = DateTime.MinValue;
        }

        public void FixResearchParents()
        {
            SetAllParentsToRequired(ResearchNodeDefinitionsStatic.FindNodeById(273));
            SetAllParentsToRequired(ResearchNodeDefinitions.FindNodeById(273));
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Research != null)
                {
                    SetAllParentsToRequired(empire.Research.TechTree.FindNodeById(273));
                }
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                if (empire2 != null && empire2.Research != null)
                {
                    SetAllParentsToRequired(empire2.Research.TechTree.FindNodeById(273));
                }
            }
        }

        private void SetAllParentsToRequired(ResearchNodeDefinition project)
        {
            for (int i = 0; i < project.ParentIsRequired.Count; i++)
            {
                project.ParentIsRequired[i] = true;
            }
        }

        private void SetAllParentsToRequired(ResearchNode project)
        {
            for (int i = 0; i < project.ParentIsRequired.Count; i++)
            {
                project.ParentIsRequired[i] = true;
            }
        }

        public void SetAllEncounterPenaltiesToZero()
        {
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire == null || !empire.Active || empire.EmpireEvaluations == null)
                {
                    continue;
                }
                for (int j = 0; j < empire.EmpireEvaluations.Count; j++)
                {
                    EmpireEvaluation empireEvaluation = empire.EmpireEvaluations[j];
                    if (empireEvaluation != null)
                    {
                        DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(empireEvaluation.Empire);
                        if (diplomaticRelation != null && diplomaticRelation.Type != 0)
                        {
                            empireEvaluation.FirstContactPenalty = 0.0;
                        }
                    }
                }
            }
        }

        public void IndependentColoniesMakeDefendOffersToPirates(long starDate)
        {
            for (int i = 0; i < IndependentColonies.Count; i++)
            {
                Habitat habitat = IndependentColonies[i];
                if (habitat == null || habitat.HasBeenDestroyed || habitat.Empire != IndependentEmpire || Rnd.Next(0, 30) != 1)
                {
                    continue;
                }
                double attackPrice = IndependentEmpire.CalculatePirateDefendPrice(habitat);
                if (PirateEmpires.Count <= 0)
                {
                    continue;
                }
                long expiryDate = starDate + (long)(1.0 * (double)RealSecondsInGalacticYear * 1000.0);
                EmpireActivity empireActivity = new EmpireActivity(IndependentEmpire, habitat, attackPrice, IndependentEmpire, expiryDate, EmpireActivityType.Defend);
                if (IndependentEmpire.PirateMissions.ContainsEquivalent(empireActivity.Target, empireActivity.Type))
                {
                    continue;
                }
                IndependentEmpire.PirateMissions.Add(empireActivity);
                PirateMissions.Add(empireActivity);
                for (int j = 0; j < PirateEmpires.Count; j++)
                {
                    Empire empire = PirateEmpires[j];
                    if (empire != null && empire.PirateEmpireBaseHabitat != null && empire.IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                    {
                        string description = string.Format(TextResolver.GetText("Pirate Defend Mission Available Independent"), empireActivity.Target.Name);
                        empire.SendMessageToEmpire(empire, EmpireMessageType.PirateDefendMissionAvailable, empireActivity, description);
                    }
                }
            }
        }

        public void IndependentColoniesMakeSmugglingOffersToPirates(long starDate)
        {
            OrderList orders = Orders.GetOrders(IndependentEmpire);
            long maximumOrderTimeLength = (long)((double)RealSecondsInGalacticYear * 1000.0 * 0.25);
            int maximumAmountOutstanding = 100;
            for (int i = 0; i < IndependentColonies.Count; i++)
            {
                Habitat habitat = IndependentColonies[i];
                if (habitat == null || habitat.HasBeenDestroyed || habitat.Population == null || habitat.Population.Count <= 0 || habitat.Empire != IndependentEmpire || Rnd.Next(0, 2) != 1)
                {
                    continue;
                }
                byte deficientResourceId = byte.MaxValue;
                if (!IndependentEmpire.DetermineColonyDeficientInResources(habitat, orders, checkForExistingSmugglingMission: true, maximumOrderTimeLength, maximumAmountOutstanding, out deficientResourceId))
                {
                    continue;
                }
                double attackPrice = IndependentEmpire.CalculatePirateSmugglePricePerUnit(habitat, deficientResourceId);
                long expiryDate = starDate + (long)(3.0 * (double)RealSecondsInGalacticYear * 1000.0);
                EmpireActivity empireActivity = new EmpireActivity(IndependentEmpire, habitat, attackPrice, IndependentEmpire, expiryDate, EmpireActivityType.Smuggle);
                empireActivity.ResourceId = deficientResourceId;
                if (IndependentEmpire.PirateMissions.ContainsEquivalent(empireActivity.Target, empireActivity.Type))
                {
                    continue;
                }
                Order order = (empireActivity.RelatedOrder = CreateOrder(habitat, new Resource(deficientResourceId), 10000, isState: true, expiryDate));
                IndependentEmpire.PirateMissions.Add(empireActivity);
                PirateMissions.Add(empireActivity);
                for (int j = 0; j < PirateEmpires.Count; j++)
                {
                    Empire empire = PirateEmpires[j];
                    if (empire != null && empire.PirateEmpireBaseHabitat != null && empire.IsObjectAreaKnownToThisEmpire(empireActivity.Target))
                    {
                        string empty = string.Empty;
                        empty = ((empireActivity.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Pirate Smuggle Mission Available Independent"), empireActivity.Target.Name, new Resource(empireActivity.ResourceId).Name) : string.Format(TextResolver.GetText("Pirate Smuggle Mission Available Independent All Resources"), empireActivity.Target.Name));
                        IndependentEmpire.SendMessageToEmpire(empire, EmpireMessageType.PirateSmugglingMissionAvailable, empireActivity, empty);
                    }
                }
            }
        }

        private void ProcessPirateFleets(DateTime galaxyDate)
        {
            if (PirateEmpires == null)
            {
                return;
            }
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire != null && empire.Active && empire.ShipGroups != null)
                {
                    for (int j = 0; j < empire.ShipGroups.Count; j++)
                    {
                        empire.ShipGroups[j]?.DoTasks(galaxyDate);
                    }
                }
            }
        }

        private void DoGalaxyEvents()
        {
            if (GameDisasterEventsEnabled && _PiratePrevalence > 0.0)
            {
                int num = 15;
                if (_SuperPirateFactionsGenerated > 0)
                {
                    num = (int)((double)num * Math.Sqrt(1 + _SuperPirateFactionsGenerated));
                }
                if (Rnd.Next(0, num) == 1)
                {
                    GalaxyEventSuperPirates();
                }
            }
        }

        private void GalaxyEventSuperPirates()
        {
            if (NextEmpireID >= MaximumEmpireCount || !(ColonyFillRatio > 0.2) || PirateEmpires == null)
            {
                return;
            }
            Empire empire = null;
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire2 = PirateEmpires[i];
                if (empire2.PirateEmpireSuperPirates)
                {
                    empire = empire2;
                    break;
                }
            }
            if (empire != null)
            {
                return;
            }
            Habitat habitat = null;
            double num = 0.0;
            if (PlayerEmpire != null && PlayerEmpire.Colonies != null && PlayerEmpire.Capital != null)
            {
                for (int j = 0; j < PlayerEmpire.Colonies.Count; j++)
                {
                    Habitat habitat2 = PlayerEmpire.Colonies[j];
                    if (habitat2 != null && !habitat2.HasBeenDestroyed)
                    {
                        double num2 = CalculateDistance(PlayerEmpire.Capital.Xpos, PlayerEmpire.Capital.Ypos, habitat2.Xpos, habitat2.Ypos);
                        if (num2 > num)
                        {
                            habitat = habitat2;
                            num = num2;
                        }
                    }
                }
            }
            if (habitat == null)
            {
                return;
            }
            ResourceDefinition resourceDefinition = ResourceSystem.FuelResources[0];
            Habitat habitat3 = FindNearestHabitatUnoccupiedSystemWithResourceNotVisibleToPlayer(habitat.Xpos, habitat.Ypos, resourceDefinition.ResourceID);
            if (habitat3 != null)
            {
                string[] array = new string[4] { "Deadly Phantoms", "Phantom Scourge", "Dark Ghostriders", "Dread Wraiths" };
                int num3 = Rnd.Next(0, array.Length);
                string name = array[num3];
                double techLevel = Math.Min(7.0, 4 + Math.Min(3, _SuperPirateFactionsGenerated));
                empire = GenerateSuperPirateFaction(habitat3, name, null, techLevel);
                if (empire != null)
                {
                    _SuperPirateFactionsGenerated++;
                }
            }
        }

        public void SetSuperPirateFactionsGenerated(int newValue)
        {
            _SuperPirateFactionsGenerated = newValue;
        }

        public void ReviewEmpireTerritory(bool onlySystems)
        {
            if (!_RegeneratingEmpireTerritory)
            {
                ThreadPool.QueueUserWorkItem(ReviewEmpireTerritoryCore, onlySystems);
            }
        }

        public void ReviewEmpireTerritoryCore(object state)
        {
            if (state == null || !(state is bool))
            {
                return;
            }
            bool onlySystems = (bool)state;
            if (!_RegeneratingEmpireTerritory)
            {
                _RegeneratingEmpireTerritory = true;
                bool flag = false;
                if (_EmpireTerritory == null)
                {
                    _EmpireTerritory = new EmpireTerritory();
                }
                if (_EmpireTerritory != null)
                {
                    _EmpireTerritory.ReviewEmpireTerritory(this, onlySystems);
                    flag = true;
                }
                if (_RegenerateEmpireTerritoryAgain)
                {
                    _RegenerateEmpireTerritoryAgain = false;
                    if (_EmpireTerritory != null)
                    {
                        _EmpireTerritory.ReviewEmpireTerritory(this, onlySystems);
                        flag = true;
                    }
                }
                if (flag)
                {
                    OnRefreshView(new RefreshViewEventArgs(0.0, 0.0, null, onlyGalaxyBackdrops: true));
                }
                _RegeneratingEmpireTerritory = false;
            }
            else
            {
                _RegenerateEmpireTerritoryAgain = true;
            }
        }

        private void ReviewRacePeriodicChanges()
        {
            long currentStarDate = CurrentStarDate;
            for (int i = 0; i < Races.Count; i++)
            {
                Race race = Races[i];
                if (race.ChangePeriodYearsInterval <= 0 || race.ChangePeriodYearsLength <= 0)
                {
                    continue;
                }
                int num = (int)((currentStarDate - ActualStartDate) / (RealSecondsInGalacticYear * 1000));
                if ((num - race.ChangePeriodYearsInterval) % (race.ChangePeriodYearsInterval + race.ChangePeriodYearsLength) == 0)
                {
                    if (race.ChangePeriodActive)
                    {
                        continue;
                    }
                    if (PlayerEmpire != null)
                    {
                        if (PlayerEmpire.DominantRace == race)
                        {
                            string text = ResolveRaceChangeQualitiesDescription(race);
                            string description = string.Format(TextResolver.GetText("Race Periodic Change Begin"), race.Name, race.ChangePeriodYearsInterval.ToString(), race.ChangePeriodYearsLength.ToString(), text);
                            PlayerEmpire.SendMessageToEmpireWithTitle(PlayerEmpire, EmpireMessageType.GeneralNeutralEvent, race, description, string.Format(TextResolver.GetText("Race Periodic Change Begin Title"), race.Name));
                        }
                        else
                        {
                            for (int j = 0; j < PlayerEmpire.DiplomaticRelations.Count; j++)
                            {
                                DiplomaticRelation diplomaticRelation = PlayerEmpire.DiplomaticRelations[j];
                                if (diplomaticRelation.Type != 0 && diplomaticRelation.OtherEmpire != null && diplomaticRelation.OtherEmpire.DominantRace == race)
                                {
                                    string text2 = ResolveRaceChangeQualitiesDescription(race);
                                    string description2 = string.Format(TextResolver.GetText("Race Periodic Change Begin Other"), race.Name, race.ChangePeriodYearsInterval.ToString(), race.ChangePeriodYearsLength.ToString(), text2);
                                    PlayerEmpire.SendMessageToEmpireWithTitle(PlayerEmpire, EmpireMessageType.GeneralNeutralEvent, race, description2, string.Format(TextResolver.GetText("Race Periodic Change Begin Title"), race.Name));
                                    break;
                                }
                            }
                        }
                    }
                    race.ChangePeriodActive = true;
                }
                else
                {
                    if (num % (race.ChangePeriodYearsInterval + race.ChangePeriodYearsLength) != 0 || !race.ChangePeriodActive)
                    {
                        continue;
                    }
                    race.ChangePeriodActive = false;
                    if (PlayerEmpire == null)
                    {
                        continue;
                    }
                    if (PlayerEmpire.DominantRace == race)
                    {
                        string description3 = string.Format(TextResolver.GetText("Race Periodic Change End"), race.Name, race.ChangePeriodYearsInterval.ToString());
                        PlayerEmpire.SendMessageToEmpireWithTitle(PlayerEmpire, EmpireMessageType.GeneralNeutralEvent, race, description3, string.Format(TextResolver.GetText("Race Periodic Change End Title"), race.Name));
                        continue;
                    }
                    for (int k = 0; k < PlayerEmpire.DiplomaticRelations.Count; k++)
                    {
                        DiplomaticRelation diplomaticRelation2 = PlayerEmpire.DiplomaticRelations[k];
                        if (diplomaticRelation2.Type != 0 && diplomaticRelation2.OtherEmpire != null && diplomaticRelation2.OtherEmpire.DominantRace == race)
                        {
                            string description4 = string.Format(TextResolver.GetText("Race Periodic Change End Other"), race.Name, race.ChangePeriodYearsInterval.ToString());
                            PlayerEmpire.SendMessageToEmpireWithTitle(PlayerEmpire, EmpireMessageType.GeneralNeutralEvent, race, description4, string.Format(TextResolver.GetText("Race Periodic Change End Title"), race.Name));
                            break;
                        }
                    }
                }
            }
        }

        public static string ResolveRaceChangeQualitiesDescription(Race race)
        {
            string text = string.Empty;
            if (race.PeriodicAggressionLevel > race.AggressionLevelOriginal)
            {
                text = text + TextResolver.GetText("increased aggression") + ", ";
            }
            else if (race.PeriodicAggressionLevel < race.AggressionLevelOriginal)
            {
                text = text + TextResolver.GetText("decreased aggression") + ", ";
            }
            if (race.PeriodicCautionLevel > race.CautionLevelOriginal)
            {
                text = text + TextResolver.GetText("increased caution") + ", ";
            }
            else if (race.PeriodicCautionLevel < race.CautionLevelOriginal)
            {
                text = text + TextResolver.GetText("decreased caution") + ", ";
            }
            if (race.PeriodicFriendlinessLevel > race.FriendlinessLevelOriginal)
            {
                text = text + TextResolver.GetText("increased friendliness") + ", ";
            }
            else if (race.PeriodicFriendlinessLevel < race.FriendlinessLevelOriginal)
            {
                text = text + TextResolver.GetText("decreased friendliness") + ", ";
            }
            if (race.PeriodicGrowthRate > race.ReproductiveRateOriginal)
            {
                text = text + TextResolver.GetText("increased population growth") + ", ";
            }
            else if (race.PeriodicGrowthRate < race.ReproductiveRateOriginal)
            {
                text = text + TextResolver.GetText("decreased population growth") + ", ";
            }
            if (text.Length > 2)
            {
                text = text.Substring(0, text.Length - 2);
            }
            return text;
        }

        public bool CheckRemoveInvalidDockingShipsFromWaitQueue(StellarObject stellarObject)
        {
            if (stellarObject != null)
            {
                BuiltObjectList dockingBayWaitQueue = stellarObject.DockingBayWaitQueue;
                if (dockingBayWaitQueue != null)
                {
                    BuiltObjectList builtObjectList = new BuiltObjectList();
                    for (int i = 0; i < dockingBayWaitQueue.Count; i++)
                    {
                        BuiltObject builtObject = dockingBayWaitQueue[i];
                        if (builtObject != null && (builtObject.HasBeenDestroyed || !builtObject.IsFunctional || builtObject.TopSpeed == 0 || builtObject.Mission == null || builtObject.Mission.Type == BuiltObjectMissionType.Undefined))
                        {
                            builtObjectList.Add(builtObject);
                        }
                    }
                    if (builtObjectList.Count > 0)
                    {
                        for (int j = 0; j < builtObjectList.Count; j++)
                        {
                            dockingBayWaitQueue.Remove(builtObjectList[j]);
                        }
                        return true;
                    }
                }
            }
            return false;
        }

        public Empire CheckSystemOwnership(Habitat systemStar)
        {
            if (systemStar != null)
            {
                bool disputed = false;
                int num = _EmpireTerritory.CheckSystemOwnership(this, systemStar, out disputed);
                if (num >= 0)
                {
                    return Empires.GetByEmpireId(num);
                }
            }
            return null;
        }

        public Empire CheckSystemOwnership(Habitat systemStar, out bool disputed)
        {
            disputed = false;
            if (systemStar != null)
            {
                int num = _EmpireTerritory.CheckSystemOwnership(this, systemStar, out disputed);
                if (num >= 0)
                {
                    return Empires.GetByEmpireId(num);
                }
            }
            return null;
        }

        public int CheckSystemOwnershipId(Habitat systemStar)
        {
            if (systemStar != null)
            {
                bool disputed = false;
                return _EmpireTerritory.CheckSystemOwnership(this, systemStar, out disputed);
            }
            return -1;
        }

        public bool CheckEmpireTerritoryCanColonizeHabitat(Empire empire, Habitat habitat)
        {
            bool canColonizeBecauseAtWar = false;
            return CheckEmpireTerritoryCanColonizeHabitat(empire, habitat, out canColonizeBecauseAtWar);
        }

        public bool CheckEmpireTerritoryCanColonizeHabitat(Empire empire, Habitat habitat, out bool canColonizeBecauseAtWar)
        {
            canColonizeBecauseAtWar = false;
            bool disputed = false;
            Habitat systemStar = DetermineHabitatSystemStar(habitat);
            int num = _EmpireTerritory.CheckSystemOwnership(this, systemStar, out disputed);
            if (num >= 0 && num != empire.EmpireId)
            {
                Empire byEmpireId = Empires.GetByEmpireId(num);
                DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(byEmpireId);
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    canColonizeBecauseAtWar = true;
                    return true;
                }
                return false;
            }
            if (disputed)
            {
                return false;
            }
            return true;
        }

        public bool CheckEmpireTerritoryCanBuildAtHabitat(Empire empire, Habitat habitat)
        {
            if (habitat.Owner == empire)
            {
                return true;
            }
            bool disputed = false;
            Habitat systemStar = DetermineHabitatSystemStar(habitat);
            List<int> otherEmpireIds;
            int num = _EmpireTerritory.CheckSystemOwnershipWithOthers(this, systemStar, out disputed, out otherEmpireIds);
            if (disputed)
            {
                return true;
            }
            if (num >= 0 && num != empire.EmpireId)
            {
                Empire byEmpireId = Empires.GetByEmpireId(num);
                if (byEmpireId != null)
                {
                    if (empire.PirateEmpireBaseHabitat != null || byEmpireId.PirateEmpireBaseHabitat != null)
                    {
                        return true;
                    }
                    DiplomaticRelation diplomaticRelation = byEmpireId.ObtainDiplomaticRelation(empire);
                    if (diplomaticRelation != null && diplomaticRelation.MiningRightsToOther)
                    {
                        return true;
                    }
                }
                return BaconGalaxy.CheckEmpireTerritoryCanBuildAtHabitat(this, empire, habitat);
            }
            return true;
        }

        public bool CheckEmpireTerritoryCanBuildAtLocation(Empire empire, double x, double y)
        {
            int num = _EmpireTerritory.CheckLocationOwnership(x, y);
            if (num >= 0 && num != empire.EmpireId)
            {
                Empire byEmpireId = Empires.GetByEmpireId(num);
                if (byEmpireId != null)
                {
                    if (empire.PirateEmpireBaseHabitat != null || byEmpireId.PirateEmpireBaseHabitat != null)
                    {
                        return true;
                    }
                    DiplomaticRelation diplomaticRelation = byEmpireId.ObtainDiplomaticRelation(empire);
                    if (diplomaticRelation != null && diplomaticRelation.MiningRightsToOther)
                    {
                        return true;
                    }
                }
                return false;
            }
            return true;
        }

        public int CheckEmpireTerritoryIdAtLocation(double x, double y)
        {
            return _EmpireTerritory.CheckLocationOwnership(x, y);
        }

        public bool CheckMilitaryShipWelcomeAtTerritoryLocation(double x, double y, Empire empire)
        {
            if (empire != null)
            {
                int num = _EmpireTerritory.CheckLocationOwnership(x, y);
                if (num < 0 || num == empire.EmpireId)
                {
                    return true;
                }
                Empire byEmpireId = Empires.GetByEmpireId(num);
                if (byEmpireId != null)
                {
                    DiplomaticRelation diplomaticRelation = byEmpireId.ObtainDiplomaticRelation(empire);
                    if (diplomaticRelation.MilitaryRefuelingToOther)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public double CalculateEmpireColonyProximityValueAtPoint(Empire empire, double x, double y, double distanceThresholdSquared)
        {
            double num = 0.0;
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                Habitat habitat = empire.Colonies[i];
                if (habitat != null && !habitat.HasBeenDestroyed)
                {
                    double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                    if (num2 < distanceThresholdSquared)
                    {
                        double val = (double)habitat.StrategicValue * 1000.0 / (num2 / 1000000.0);
                        val = Math.Min(val, 1000000000.0);
                        num += val;
                    }
                }
            }
            return num;
        }

        public void IdentifyDisputedBases()
        {
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire == null || !empire.Active)
                {
                    continue;
                }
                if (empire.DisputedBases == null)
                {
                    empire.DisputedBases = new BuiltObjectList();
                }
                empire.DisputedBases.Clear();
                for (int j = 0; j < empire.BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject = empire.BuiltObjects[j];
                    if (builtObject.Role == BuiltObjectRole.Base && !builtObject.HasBeenDestroyed)
                    {
                        bool flag = true;
                        if (!((builtObject.ParentHabitat == null) ? CheckEmpireTerritoryCanBuildAtLocation(empire, builtObject.Xpos, builtObject.Ypos) : CheckEmpireTerritoryCanBuildAtHabitat(empire, builtObject.ParentHabitat)))
                        {
                            empire.DisputedBases.Add(builtObject);
                        }
                    }
                }
                for (int k = 0; k < empire.PrivateBuiltObjects.Count; k++)
                {
                    BuiltObject builtObject2 = empire.PrivateBuiltObjects[k];
                    if (builtObject2.Role == BuiltObjectRole.Base && !builtObject2.HasBeenDestroyed)
                    {
                        bool flag2 = true;
                        if (!((builtObject2.ParentHabitat == null) ? CheckEmpireTerritoryCanBuildAtLocation(empire, builtObject2.Xpos, builtObject2.Ypos) : CheckEmpireTerritoryCanBuildAtHabitat(empire, builtObject2.ParentHabitat)))
                        {
                            empire.DisputedBases.Add(builtObject2);
                        }
                    }
                }
            }
        }

        private void CleanupInvalidShipsInIndexes()
        {
            for (int i = 0; i < IndexMaxX; i++)
            {
                for (int j = 0; j < IndexMaxY; j++)
                {
                    BuiltObjectList builtObjectList = new BuiltObjectList();
                    for (int k = 0; k < BuiltObjectIndex[i][j].Count; k++)
                    {
                        BuiltObject builtObject = BuiltObjectIndex[i][j][k];
                        if (builtObject != null && builtObject.HasBeenDestroyed)
                        {
                            builtObjectList.Add(builtObject);
                        }
                    }
                    for (int l = 0; l < builtObjectList.Count; l++)
                    {
                        while (BuiltObjectIndex[i][j].Contains(builtObjectList[l]))
                        {
                            BuiltObjectIndex[i][j].Remove(builtObjectList[l]);
                        }
                    }
                }
            }
        }

        public static double CalculateRaceVictoryConditionsProgress(Galaxy galaxy, Empire empire, Race race, out RaceVictoryConditionProgressList conditionProgresses)
        {
            double num = 0.0;
            conditionProgresses = new RaceVictoryConditionProgressList();
            if (galaxy != null && race != null && empire != null)
            {
                RaceVictoryConditionList raceVictoryConditionList = null;
                raceVictoryConditionList = ((empire.PirateEmpireBaseHabitat != null) ? galaxy.ResolvePirateVictoryConditions(empire.PiratePlayStyle) : race.VictoryConditions);
                if (raceVictoryConditionList == null || raceVictoryConditionList.Count == 0)
                {
                    num = 1.0;
                }
                else
                {
                    _ = 1.0 / (double)raceVictoryConditionList.Count;
                    for (int i = 0; i < raceVictoryConditionList.Count; i++)
                    {
                        RaceVictoryCondition raceVictoryCondition = raceVictoryConditionList[i];
                        if (raceVictoryCondition != null)
                        {
                            string detail = string.Empty;
                            Empire bestEmpire = null;
                            double num2 = CalculateRaceVictoryConditionProgress(galaxy, empire, raceVictoryCondition, out detail, out bestEmpire);
                            double num3 = num2 * (double)(raceVictoryCondition.Proportion / 100f);
                            num += num3;
                            RaceVictoryConditionProgress item = new RaceVictoryConditionProgress(raceVictoryCondition.Type, num3, num2, bestEmpire, detail, raceVictoryCondition);
                            conditionProgresses.Add(item);
                        }
                    }
                }
            }
            conditionProgresses.Sort();
            conditionProgresses.Reverse();
            return num;
        }

        public static double RaceVictoryConditionMetCompareEmpires(Galaxy galaxy, Empire empire, RaceVictoryCondition condition, out string detail, out Empire bestEmpire)
        {
            detail = string.Empty;
            bestEmpire = null;
            if (galaxy != null && empire != null && empire.Counters != null && condition != null)
            {
                long currentStarDate = galaxy.CurrentStarDate;
                double num = 0.0;
                object obj = null;
                switch (condition.Type)
                {
                    case RaceVictoryConditionType.CaptureMostShips:
                        num = empire.Counters.CaptureShipCount;
                        break;
                    case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                        num = empire.Counters.EliminatePirateEmpireCount;
                        break;
                    case RaceVictoryConditionType.PirateMostProtectionIncome:
                        num = empire.Counters.PirateProtectionIncome;
                        break;
                    case RaceVictoryConditionType.PirateMostSmugglingIncome:
                        num = empire.Counters.PirateSmugglingIncome;
                        break;
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                        num = empire.Counters.CompletedPirateMissionAttackCount;
                        break;
                    case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                        num = empire.Counters.RaidSuccessCount;
                        break;
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                        num = empire.Counters.CompletedPirateMissionDefendCount;
                        break;
                    case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                        num = empire.Colonies.CountPirateControlledColoniesWithHiddenPirateBase(empire);
                        break;
                    case RaceVictoryConditionType.ConquerMostEnemyColonies:
                        num = empire.Counters.ColoniesConqueredCount;
                        break;
                    case RaceVictoryConditionType.ControlMostRuins:
                        num = empire.Colonies.CountHabitatWithRuins();
                        break;
                    case RaceVictoryConditionType.DestroyMostCreaturesByType:
                        if (condition.AdditionalData is CreatureType)
                        {
                            switch ((CreatureType)condition.AdditionalData)
                            {
                                case CreatureType.SilverMist:
                                    num = empire.Counters.DestroyedCreatureCountSilverMist;
                                    break;
                                case CreatureType.Ardilus:
                                    num = empire.Counters.DestroyedCreatureCountArdilus;
                                    break;
                                case CreatureType.DesertSpaceSlug:
                                    num = empire.Counters.DestroyedCreatureCountSandSlug;
                                    break;
                                case CreatureType.Kaltor:
                                    num = empire.Counters.DestroyedCreatureCountKaltor;
                                    break;
                                case CreatureType.RockSpaceSlug:
                                    num = empire.Counters.DestroyedCreatureCountSpaceSlug;
                                    break;
                            }
                        }
                        break;
                    case RaceVictoryConditionType.DestroyMostShips:
                        num = empire.Counters.DestroyedEnemyMilitaryShipCount + empire.Counters.DestroyedEnemyCivilianShipCount;
                        break;
                    case RaceVictoryConditionType.DestroyMostTroops:
                        num = empire.Counters.DestroyedEnemyTroopCount;
                        break;
                    case RaceVictoryConditionType.ExploreMostSystems:
                        num = empire.SystemVisibility.CountExploredSystems();
                        break;
                    case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                        num = empire.Counters.ExterminatedPopulationAmount + empire.CalculateEnslavedPopulationAmount();
                        break;
                    case RaceVictoryConditionType.HighestPrivateRevenue:
                        num = empire.Counters.ColonyPrivateRevenueTotal;
                        break;
                    case RaceVictoryConditionType.HighestTradeVolume:
                        num = empire.Counters.TradeIncomeTotalVolume;
                        break;
                    case RaceVictoryConditionType.LargestMilitary:
                        num = empire.CalculateMilitaryShipSizeTotal();
                        break;
                    case RaceVictoryConditionType.LargestMilitaryNonAllied:
                        num = empire.CalculateMilitaryShipSizeTotal();
                        break;
                    case RaceVictoryConditionType.MostTroops:
                        num = empire.Troops.CountTroopsNotRecruiting();
                        break;
                    case RaceVictoryConditionType.MostTroopsNonAllied:
                        num = empire.Troops.CountTroopsNotRecruiting();
                        break;
                    case RaceVictoryConditionType.LeastBrokenTreaties:
                        num = empire.Counters.BrokenTreatyCount;
                        break;
                    case RaceVictoryConditionType.LeastTimeWarring:
                        num = empire.Counters.TimeSpentAtWar(currentStarDate);
                        break;
                    case RaceVictoryConditionType.LeastTreaties:
                        num = empire.DiplomaticRelations.CountTreaties();
                        break;
                    case RaceVictoryConditionType.LeastWarsStarted:
                        num = empire.Counters.WarsWeStartedCount;
                        break;
                    case RaceVictoryConditionType.LoseFewestShips:
                        num = empire.Counters.LossesCivilianShipCount + empire.Counters.LossesMilitaryShipCount;
                        break;
                    case RaceVictoryConditionType.LoseFewestTroops:
                        num = empire.Counters.LossesTroopCount;
                        break;
                    case RaceVictoryConditionType.MostExperiencedAdmiral:
                        {
                            CharacterList charactersByRole2 = empire.Characters.GetCharactersByRole(CharacterRole.FleetAdmiral);
                            if (charactersByRole2.Count <= 0)
                            {
                                break;
                            }
                            Character character3 = null;
                            for (int j = 0; j < charactersByRole2.Count; j++)
                            {
                                Character character4 = charactersByRole2[j];
                                if (character3 == null || character4.GetSkillLevelTotal() > character3.GetSkillLevelTotal())
                                {
                                    character3 = character4;
                                }
                            }
                            num = character3.GetSkillLevelTotal();
                            obj = character3;
                            break;
                        }
                    case RaceVictoryConditionType.MostExperiencedGeneral:
                        {
                            CharacterList charactersByRole = empire.Characters.GetCharactersByRole(CharacterRole.TroopGeneral);
                            if (charactersByRole.Count <= 0)
                            {
                                break;
                            }
                            Character character = null;
                            for (int i = 0; i < charactersByRole.Count; i++)
                            {
                                Character character2 = charactersByRole[i];
                                if (character == null || character2.GetSkillLevelTotal() > character.GetSkillLevelTotal())
                                {
                                    character = character2;
                                }
                            }
                            num = character.GetSkillLevelTotal();
                            obj = character;
                            break;
                        }
                    case RaceVictoryConditionType.MostHomeworlds:
                        num = empire.CountHomeworldsOwned();
                        break;
                    case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                        num = empire.Counters.IntelligenceMissionSuccessCounterIntelligenceCount;
                        break;
                    case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                        num = empire.Counters.IntelligenceMissionSuccessEspionageCount + empire.Counters.IntelligenceMissionSuccessSabotageCount;
                        break;
                    case RaceVictoryConditionType.MostMiningStations:
                        num = empire.MiningStations.Count;
                        break;
                    case RaceVictoryConditionType.MostResortBases:
                        num = empire.ResortBases.Count;
                        break;
                    case RaceVictoryConditionType.MostScientists:
                        num = empire.Characters.CountCharactersByRole(CharacterRole.Scientist);
                        break;
                    case RaceVictoryConditionType.MostSpaceports:
                        num = empire.SpacePorts.Count;
                        break;
                    case RaceVictoryConditionType.MostSubjugatedDominions:
                        num = empire.Counters.SubjugationsMade;
                        break;
                    case RaceVictoryConditionType.MostTimeWarring:
                        num = empire.Counters.TimeSpentAtWar(currentStarDate);
                        break;
                    case RaceVictoryConditionType.MostTourismIncome:
                        num = empire.Counters.TourismIncome;
                        break;
                    case RaceVictoryConditionType.MostTradeIncome:
                        num = empire.Counters.TradeIncomeStateBonus;
                        break;
                    case RaceVictoryConditionType.OldestFreeTradeAgreement:
                        {
                            DiplomaticRelation diplomaticRelation2 = empire.DiplomaticRelations.FindOldestRelationByType(DiplomaticRelationType.FreeTradeAgreement);
                            if (diplomaticRelation2 != null)
                            {
                                num = diplomaticRelation2.StartDateOfLastChange;
                                obj = diplomaticRelation2;
                            }
                            break;
                        }
                    case RaceVictoryConditionType.OldestMutualDefensePact:
                        {
                            DiplomaticRelation diplomaticRelation = empire.DiplomaticRelations.FindOldestRelationByType(DiplomaticRelationType.MutualDefensePact);
                            if (diplomaticRelation != null)
                            {
                                num = diplomaticRelation.StartDateOfLastChange;
                                obj = diplomaticRelation;
                            }
                            break;
                        }
                    case RaceVictoryConditionType.OwnLargestCapitalShip:
                        {
                            BuiltObject builtObject = empire.LargestCapitalShip();
                            if (builtObject != null)
                            {
                                num = builtObject.Size;
                                obj = builtObject;
                            }
                            break;
                        }
                    case RaceVictoryConditionType.PopulationHappiest:
                        num = empire.AverageHappiness();
                        break;
                    case RaceVictoryConditionType.PopulationHighest:
                        num = empire.TotalPopulation;
                        break;
                    case RaceVictoryConditionType.ResearchLeastAdvanced:
                        num = empire.Research.TechTree.CalculateTotalCostResearchedProjects();
                        break;
                    case RaceVictoryConditionType.ResearchMostAdvanced:
                        num = empire.Research.TechTree.CalculateTotalCostResearchedProjects();
                        break;
                    case RaceVictoryConditionType.ResearchMostCompletedBranches:
                        num = empire.Research.TechTree.CountCompletedCategories();
                        break;
                    case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                        if (condition.AdditionalData is IndustryType)
                        {
                            IndustryType industry = (IndustryType)condition.AdditionalData;
                            num = empire.Research.TechTree.CountCompletedCategories(industry);
                        }
                        break;
                    case RaceVictoryConditionType.MineMostResourcesLuxury:
                        num = empire.Counters.MiningExtractionLuxury;
                        break;
                    case RaceVictoryConditionType.MineMostResourcesStrategic:
                        num = empire.Counters.MiningExtractionGas + empire.Counters.MiningExtractionStrategic;
                        break;
                    case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                        num = empire.Counters.MiningExtractionColonyManufactured;
                        break;
                    case RaceVictoryConditionType.BuildMostMilitaryShips:
                        num = empire.Counters.BuildMilitaryShipCount;
                        break;
                    case RaceVictoryConditionType.BuildMostCivilianShips:
                        num = empire.Counters.BuildCivilianShipCount;
                        break;
                    case RaceVictoryConditionType.BuildMostBases:
                        num = empire.Counters.BuildBaseCount;
                        break;
                }
                bool flag = false;
                switch (condition.Type)
                {
                    case RaceVictoryConditionType.ControlMostRuins:
                    case RaceVictoryConditionType.PopulationHighest:
                    case RaceVictoryConditionType.PopulationHappiest:
                    case RaceVictoryConditionType.MostHomeworlds:
                    case RaceVictoryConditionType.OwnLargestCapitalShip:
                    case RaceVictoryConditionType.MostSpaceports:
                    case RaceVictoryConditionType.MostMiningStations:
                    case RaceVictoryConditionType.MostResortBases:
                    case RaceVictoryConditionType.DestroyMostShips:
                    case RaceVictoryConditionType.DestroyMostTroops:
                    case RaceVictoryConditionType.DestroyMostCreaturesByType:
                    case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                    case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                    case RaceVictoryConditionType.ConquerMostEnemyColonies:
                    case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                    case RaceVictoryConditionType.MostScientists:
                    case RaceVictoryConditionType.MostExperiencedAdmiral:
                    case RaceVictoryConditionType.MostExperiencedGeneral:
                    case RaceVictoryConditionType.ResearchMostAdvanced:
                    case RaceVictoryConditionType.ResearchMostCompletedBranches:
                    case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                    case RaceVictoryConditionType.HighestTradeVolume:
                    case RaceVictoryConditionType.MostTourismIncome:
                    case RaceVictoryConditionType.MostTradeIncome:
                    case RaceVictoryConditionType.HighestPrivateRevenue:
                    case RaceVictoryConditionType.LargestMilitary:
                    case RaceVictoryConditionType.LargestMilitaryNonAllied:
                    case RaceVictoryConditionType.MostTroops:
                    case RaceVictoryConditionType.MostTroopsNonAllied:
                    case RaceVictoryConditionType.MostTimeWarring:
                    case RaceVictoryConditionType.MostSubjugatedDominions:
                    case RaceVictoryConditionType.OldestMutualDefensePact:
                    case RaceVictoryConditionType.OldestFreeTradeAgreement:
                    case RaceVictoryConditionType.ExploreMostSystems:
                    case RaceVictoryConditionType.MineMostResourcesLuxury:
                    case RaceVictoryConditionType.MineMostResourcesStrategic:
                    case RaceVictoryConditionType.BuildMostMilitaryShips:
                    case RaceVictoryConditionType.BuildMostCivilianShips:
                    case RaceVictoryConditionType.BuildMostBases:
                    case RaceVictoryConditionType.CaptureMostShips:
                    case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                    case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                    case RaceVictoryConditionType.PirateMostSmugglingIncome:
                    case RaceVictoryConditionType.PirateMostProtectionIncome:
                    case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                    case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                        if (num > 0.0)
                        {
                            flag = true;
                        }
                        break;
                    case RaceVictoryConditionType.LoseFewestShips:
                    case RaceVictoryConditionType.LoseFewestTroops:
                    case RaceVictoryConditionType.ResearchLeastAdvanced:
                    case RaceVictoryConditionType.LeastWarsStarted:
                    case RaceVictoryConditionType.LeastBrokenTreaties:
                    case RaceVictoryConditionType.LeastTreaties:
                    case RaceVictoryConditionType.LeastTimeWarring:
                        flag = true;
                        break;
                }
                List<double> list = new List<double>();
                list.Add(num);
                double num2 = 0.0;
                double num3 = 0.0;
                object obj2 = null;
                switch (condition.Type)
                {
                    case RaceVictoryConditionType.OldestMutualDefensePact:
                    case RaceVictoryConditionType.OldestFreeTradeAgreement:
                        num2 = currentStarDate;
                        break;
                }
                EmpireList empireList = galaxy.Empires;
                if (empire.PirateEmpireBaseHabitat != null)
                {
                    empireList = galaxy.PirateEmpires;
                }
                for (int k = 0; k < empireList.Count; k++)
                {
                    Empire empire2 = empireList[k];
                    if (empire2 == null || !empire2.Active || empire2 == obj || empire2.DominantRace == null || !empire2.DominantRace.Playable || empire2.Counters == null)
                    {
                        continue;
                    }
                    double num4 = 0.0;
                    object obj3 = null;
                    switch (condition.Type)
                    {
                        case RaceVictoryConditionType.CaptureMostShips:
                            num4 = empire2.Counters.CaptureShipCount;
                            break;
                        case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                            num4 = empire2.Counters.EliminatePirateEmpireCount;
                            break;
                        case RaceVictoryConditionType.PirateMostProtectionIncome:
                            num4 = empire2.Counters.PirateProtectionIncome;
                            break;
                        case RaceVictoryConditionType.PirateMostSmugglingIncome:
                            num4 = empire2.Counters.PirateSmugglingIncome;
                            break;
                        case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                            num4 = empire2.Counters.CompletedPirateMissionAttackCount;
                            break;
                        case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                            num4 = empire2.Counters.RaidSuccessCount;
                            break;
                        case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                            num4 = empire2.Counters.CompletedPirateMissionDefendCount;
                            break;
                        case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                            num4 = empire2.Colonies.CountPirateControlledColoniesWithHiddenPirateBase(empire2);
                            break;
                        case RaceVictoryConditionType.ConquerMostEnemyColonies:
                            num4 = empire2.Counters.ColoniesConqueredCount;
                            break;
                        case RaceVictoryConditionType.ControlMostRuins:
                            num4 = empire2.Colonies.CountHabitatWithRuins();
                            break;
                        case RaceVictoryConditionType.DestroyMostCreaturesByType:
                            if (condition.AdditionalData is CreatureType)
                            {
                                switch ((CreatureType)condition.AdditionalData)
                                {
                                    case CreatureType.SilverMist:
                                        num4 = empire2.Counters.DestroyedCreatureCountSilverMist;
                                        break;
                                    case CreatureType.Ardilus:
                                        num4 = empire2.Counters.DestroyedCreatureCountArdilus;
                                        break;
                                    case CreatureType.DesertSpaceSlug:
                                        num4 = empire2.Counters.DestroyedCreatureCountSandSlug;
                                        break;
                                    case CreatureType.Kaltor:
                                        num4 = empire2.Counters.DestroyedCreatureCountKaltor;
                                        break;
                                    case CreatureType.RockSpaceSlug:
                                        num4 = empire2.Counters.DestroyedCreatureCountSpaceSlug;
                                        break;
                                }
                            }
                            break;
                        case RaceVictoryConditionType.DestroyMostShips:
                            num4 = empire2.Counters.DestroyedEnemyMilitaryShipCount + empire2.Counters.DestroyedEnemyCivilianShipCount;
                            break;
                        case RaceVictoryConditionType.DestroyMostTroops:
                            num4 = empire2.Counters.DestroyedEnemyTroopCount;
                            break;
                        case RaceVictoryConditionType.ExploreMostSystems:
                            num4 = empire2.SystemVisibility.CountExploredSystems();
                            break;
                        case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                            num4 = empire2.Counters.ExterminatedPopulationAmount + empire2.CalculateEnslavedPopulationAmount();
                            break;
                        case RaceVictoryConditionType.HighestPrivateRevenue:
                            num4 = empire2.Counters.ColonyPrivateRevenueTotal;
                            break;
                        case RaceVictoryConditionType.HighestTradeVolume:
                            num4 = empire2.Counters.TradeIncomeTotalVolume;
                            break;
                        case RaceVictoryConditionType.LargestMilitary:
                            num4 = empire2.CalculateMilitaryShipSizeTotal();
                            break;
                        case RaceVictoryConditionType.LargestMilitaryNonAllied:
                            {
                                DiplomaticRelation diplomaticRelation6 = empire.ObtainDiplomaticRelation(empire2);
                                if (diplomaticRelation6.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation6.Type != DiplomaticRelationType.Protectorate)
                                {
                                    num4 = empire2.CalculateMilitaryShipSizeTotal();
                                }
                                break;
                            }
                        case RaceVictoryConditionType.MostTroops:
                            num4 = empire2.Troops.CountTroopsNotRecruiting();
                            break;
                        case RaceVictoryConditionType.MostTroopsNonAllied:
                            {
                                DiplomaticRelation diplomaticRelation5 = empire.ObtainDiplomaticRelation(empire2);
                                if (diplomaticRelation5.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation5.Type != DiplomaticRelationType.Protectorate)
                                {
                                    num4 = empire2.Troops.CountTroopsNotRecruiting();
                                }
                                break;
                            }
                        case RaceVictoryConditionType.LeastBrokenTreaties:
                            num4 = empire2.Counters.BrokenTreatyCount;
                            break;
                        case RaceVictoryConditionType.LeastTimeWarring:
                            num4 = empire2.Counters.TimeSpentAtWar(currentStarDate);
                            break;
                        case RaceVictoryConditionType.LeastTreaties:
                            num4 = empire2.DiplomaticRelations.CountTreaties();
                            break;
                        case RaceVictoryConditionType.LeastWarsStarted:
                            num4 = empire2.Counters.WarsWeStartedCount;
                            break;
                        case RaceVictoryConditionType.LoseFewestShips:
                            num4 = empire2.Counters.LossesCivilianShipCount + empire2.Counters.LossesMilitaryShipCount;
                            break;
                        case RaceVictoryConditionType.LoseFewestTroops:
                            num4 = empire2.Counters.LossesTroopCount;
                            break;
                        case RaceVictoryConditionType.MostExperiencedAdmiral:
                            {
                                CharacterList charactersByRole4 = empire2.Characters.GetCharactersByRole(CharacterRole.FleetAdmiral);
                                if (charactersByRole4.Count <= 0)
                                {
                                    break;
                                }
                                Character character7 = null;
                                for (int m = 0; m < charactersByRole4.Count; m++)
                                {
                                    Character character8 = charactersByRole4[m];
                                    if (character7 == null || character8.GetSkillLevelTotal() > character7.GetSkillLevelTotal())
                                    {
                                        character7 = character8;
                                    }
                                }
                                num4 = character7.GetSkillLevelTotal();
                                obj3 = character7;
                                break;
                            }
                        case RaceVictoryConditionType.MostExperiencedGeneral:
                            {
                                CharacterList charactersByRole3 = empire2.Characters.GetCharactersByRole(CharacterRole.TroopGeneral);
                                if (charactersByRole3.Count <= 0)
                                {
                                    break;
                                }
                                Character character5 = null;
                                for (int l = 0; l < charactersByRole3.Count; l++)
                                {
                                    Character character6 = charactersByRole3[l];
                                    if (character5 == null || character6.GetSkillLevelTotal() > character5.GetSkillLevelTotal())
                                    {
                                        character5 = character6;
                                    }
                                }
                                num4 = character5.GetSkillLevelTotal();
                                obj3 = character5;
                                break;
                            }
                        case RaceVictoryConditionType.MostHomeworlds:
                            num4 = empire2.CountHomeworldsOwned();
                            break;
                        case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                            num4 = empire2.Counters.IntelligenceMissionSuccessCounterIntelligenceCount;
                            break;
                        case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                            num4 = empire2.Counters.IntelligenceMissionSuccessEspionageCount + empire2.Counters.IntelligenceMissionSuccessSabotageCount;
                            break;
                        case RaceVictoryConditionType.MostMiningStations:
                            num4 = empire2.MiningStations.Count;
                            break;
                        case RaceVictoryConditionType.MostResortBases:
                            num4 = empire2.ResortBases.Count;
                            break;
                        case RaceVictoryConditionType.MostScientists:
                            num4 = empire2.Characters.CountCharactersByRole(CharacterRole.Scientist);
                            break;
                        case RaceVictoryConditionType.MostSpaceports:
                            num4 = empire2.SpacePorts.Count;
                            break;
                        case RaceVictoryConditionType.MostSubjugatedDominions:
                            num4 = empire2.Counters.SubjugationsMade;
                            break;
                        case RaceVictoryConditionType.MostTimeWarring:
                            num4 = empire2.Counters.TimeSpentAtWar(currentStarDate);
                            break;
                        case RaceVictoryConditionType.MostTourismIncome:
                            num4 = empire2.Counters.TourismIncome;
                            break;
                        case RaceVictoryConditionType.MostTradeIncome:
                            num4 = empire2.Counters.TradeIncomeStateBonus;
                            break;
                        case RaceVictoryConditionType.OldestFreeTradeAgreement:
                            {
                                DiplomaticRelation diplomaticRelation4 = empire2.DiplomaticRelations.FindOldestRelationByType(DiplomaticRelationType.FreeTradeAgreement);
                                if (diplomaticRelation4 != null)
                                {
                                    num4 = diplomaticRelation4.StartDateOfLastChange;
                                    obj3 = diplomaticRelation4;
                                }
                                break;
                            }
                        case RaceVictoryConditionType.OldestMutualDefensePact:
                            {
                                DiplomaticRelation diplomaticRelation3 = empire2.DiplomaticRelations.FindOldestRelationByType(DiplomaticRelationType.MutualDefensePact);
                                if (diplomaticRelation3 != null)
                                {
                                    num4 = diplomaticRelation3.StartDateOfLastChange;
                                    obj3 = diplomaticRelation3;
                                }
                                break;
                            }
                        case RaceVictoryConditionType.OwnLargestCapitalShip:
                            {
                                BuiltObject builtObject2 = empire2.LargestCapitalShip();
                                if (builtObject2 != null)
                                {
                                    num4 = builtObject2.Size;
                                    obj3 = builtObject2;
                                }
                                break;
                            }
                        case RaceVictoryConditionType.PopulationHappiest:
                            num4 = empire2.AverageHappiness();
                            break;
                        case RaceVictoryConditionType.PopulationHighest:
                            num4 = empire2.TotalPopulation;
                            break;
                        case RaceVictoryConditionType.ResearchLeastAdvanced:
                            num4 = empire2.Research.TechTree.CalculateTotalCostResearchedProjects();
                            break;
                        case RaceVictoryConditionType.ResearchMostAdvanced:
                            num4 = empire2.Research.TechTree.CalculateTotalCostResearchedProjects();
                            break;
                        case RaceVictoryConditionType.ResearchMostCompletedBranches:
                            num4 = empire2.Research.TechTree.CountCompletedCategories();
                            break;
                        case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                            if (condition.AdditionalData is IndustryType)
                            {
                                IndustryType industry2 = (IndustryType)condition.AdditionalData;
                                num4 = empire2.Research.TechTree.CountCompletedCategories(industry2);
                            }
                            break;
                        case RaceVictoryConditionType.MineMostResourcesLuxury:
                            num4 = empire2.Counters.MiningExtractionLuxury;
                            break;
                        case RaceVictoryConditionType.MineMostResourcesStrategic:
                            num4 = empire2.Counters.MiningExtractionGas + empire2.Counters.MiningExtractionStrategic;
                            break;
                        case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                            num4 = empire2.Counters.MiningExtractionColonyManufactured;
                            break;
                        case RaceVictoryConditionType.BuildMostMilitaryShips:
                            num4 = empire2.Counters.BuildMilitaryShipCount;
                            break;
                        case RaceVictoryConditionType.BuildMostCivilianShips:
                            num4 = empire2.Counters.BuildCivilianShipCount;
                            break;
                        case RaceVictoryConditionType.BuildMostBases:
                            num4 = empire2.Counters.BuildBaseCount;
                            break;
                    }
                    if (!list.Contains(num4))
                    {
                        list.Add(num4);
                    }
                    switch (condition.Type)
                    {
                        case RaceVictoryConditionType.ControlMostRuins:
                        case RaceVictoryConditionType.PopulationHighest:
                        case RaceVictoryConditionType.PopulationHappiest:
                        case RaceVictoryConditionType.MostHomeworlds:
                        case RaceVictoryConditionType.OwnLargestCapitalShip:
                        case RaceVictoryConditionType.MostSpaceports:
                        case RaceVictoryConditionType.MostMiningStations:
                        case RaceVictoryConditionType.MostResortBases:
                        case RaceVictoryConditionType.DestroyMostShips:
                        case RaceVictoryConditionType.DestroyMostTroops:
                        case RaceVictoryConditionType.DestroyMostCreaturesByType:
                        case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                        case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                        case RaceVictoryConditionType.ConquerMostEnemyColonies:
                        case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                        case RaceVictoryConditionType.MostScientists:
                        case RaceVictoryConditionType.MostExperiencedAdmiral:
                        case RaceVictoryConditionType.MostExperiencedGeneral:
                        case RaceVictoryConditionType.ResearchMostAdvanced:
                        case RaceVictoryConditionType.ResearchMostCompletedBranches:
                        case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                        case RaceVictoryConditionType.HighestTradeVolume:
                        case RaceVictoryConditionType.MostTourismIncome:
                        case RaceVictoryConditionType.MostTradeIncome:
                        case RaceVictoryConditionType.HighestPrivateRevenue:
                        case RaceVictoryConditionType.LargestMilitary:
                        case RaceVictoryConditionType.LargestMilitaryNonAllied:
                        case RaceVictoryConditionType.MostTroops:
                        case RaceVictoryConditionType.MostTroopsNonAllied:
                        case RaceVictoryConditionType.MostTimeWarring:
                        case RaceVictoryConditionType.MostSubjugatedDominions:
                        case RaceVictoryConditionType.ExploreMostSystems:
                        case RaceVictoryConditionType.MineMostResourcesLuxury:
                        case RaceVictoryConditionType.MineMostResourcesStrategic:
                        case RaceVictoryConditionType.BuildMostMilitaryShips:
                        case RaceVictoryConditionType.BuildMostCivilianShips:
                        case RaceVictoryConditionType.BuildMostBases:
                        case RaceVictoryConditionType.CaptureMostShips:
                        case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                        case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                        case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                        case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                        case RaceVictoryConditionType.PirateMostSmugglingIncome:
                        case RaceVictoryConditionType.PirateMostProtectionIncome:
                        case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                        case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                            if (num4 > num2)
                            {
                                bestEmpire = empire2;
                                num2 = num4;
                                num3 = num4;
                                obj2 = obj3;
                            }
                            break;
                        case RaceVictoryConditionType.LoseFewestShips:
                        case RaceVictoryConditionType.LoseFewestTroops:
                        case RaceVictoryConditionType.ResearchLeastAdvanced:
                        case RaceVictoryConditionType.LeastWarsStarted:
                        case RaceVictoryConditionType.LeastBrokenTreaties:
                        case RaceVictoryConditionType.LeastTreaties:
                        case RaceVictoryConditionType.LeastTimeWarring:
                            if (num4 < num2)
                            {
                                bestEmpire = empire2;
                                num2 = num4;
                                obj2 = obj3;
                            }
                            if (num4 > num3)
                            {
                                num3 = num4;
                            }
                            break;
                        case RaceVictoryConditionType.OldestMutualDefensePact:
                        case RaceVictoryConditionType.OldestFreeTradeAgreement:
                            if (num4 != 0.0 && num4 < num2)
                            {
                                bestEmpire = empire2;
                                num2 = num4;
                                obj2 = obj3;
                            }
                            if (num4 > num3)
                            {
                                num3 = num4;
                            }
                            break;
                    }
                }
                double result = 0.0;
                switch (condition.Type)
                {
                    case RaceVictoryConditionType.ControlMostRuins:
                    case RaceVictoryConditionType.PopulationHighest:
                    case RaceVictoryConditionType.PopulationHappiest:
                    case RaceVictoryConditionType.MostSpaceports:
                    case RaceVictoryConditionType.MostMiningStations:
                    case RaceVictoryConditionType.MostResortBases:
                    case RaceVictoryConditionType.DestroyMostShips:
                    case RaceVictoryConditionType.DestroyMostTroops:
                    case RaceVictoryConditionType.DestroyMostCreaturesByType:
                    case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                    case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                    case RaceVictoryConditionType.ConquerMostEnemyColonies:
                    case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                    case RaceVictoryConditionType.MostScientists:
                    case RaceVictoryConditionType.ResearchMostAdvanced:
                    case RaceVictoryConditionType.HighestTradeVolume:
                    case RaceVictoryConditionType.MostTourismIncome:
                    case RaceVictoryConditionType.MostTradeIncome:
                    case RaceVictoryConditionType.HighestPrivateRevenue:
                    case RaceVictoryConditionType.LargestMilitary:
                    case RaceVictoryConditionType.LargestMilitaryNonAllied:
                    case RaceVictoryConditionType.MostTroops:
                    case RaceVictoryConditionType.MostTroopsNonAllied:
                    case RaceVictoryConditionType.MostTimeWarring:
                    case RaceVictoryConditionType.MostSubjugatedDominions:
                    case RaceVictoryConditionType.ExploreMostSystems:
                    case RaceVictoryConditionType.MineMostResourcesLuxury:
                    case RaceVictoryConditionType.MineMostResourcesStrategic:
                    case RaceVictoryConditionType.BuildMostMilitaryShips:
                    case RaceVictoryConditionType.BuildMostCivilianShips:
                    case RaceVictoryConditionType.BuildMostBases:
                    case RaceVictoryConditionType.CaptureMostShips:
                    case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                    case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                    case RaceVictoryConditionType.PirateMostSmugglingIncome:
                    case RaceVictoryConditionType.PirateMostProtectionIncome:
                    case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                    case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                        if (!flag || !(num >= num2))
                        {
                            result = ((!(num2 <= 0.0)) ? (num / num2) : 0.0);
                            break;
                        }
                        result = 1.0;
                        bestEmpire = empire;
                        break;
                    case RaceVictoryConditionType.LoseFewestTroops:
                    case RaceVictoryConditionType.ResearchLeastAdvanced:
                    case RaceVictoryConditionType.LeastTimeWarring:
                    case RaceVictoryConditionType.OldestMutualDefensePact:
                    case RaceVictoryConditionType.OldestFreeTradeAgreement:
                        if (flag && num <= num2)
                        {
                            result = 1.0;
                            bestEmpire = empire;
                        }
                        else
                        {
                            result = (num3 - num) / Math.Max(0.0001, num3 - num2);
                        }
                        break;
                    case RaceVictoryConditionType.MostHomeworlds:
                    case RaceVictoryConditionType.OwnLargestCapitalShip:
                    case RaceVictoryConditionType.MostExperiencedAdmiral:
                    case RaceVictoryConditionType.MostExperiencedGeneral:
                    case RaceVictoryConditionType.ResearchMostCompletedBranches:
                    case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                        if (flag)
                        {
                            list.Sort();
                            list.Reverse();
                            switch (list.IndexOf(num))
                            {
                                case 0:
                                    result = 1.0;
                                    bestEmpire = empire;
                                    break;
                                case 1:
                                    result = 0.5;
                                    break;
                                case 2:
                                    result = 0.33;
                                    break;
                                default:
                                    result = 0.0;
                                    break;
                            }
                        }
                        else
                        {
                            result = 0.0;
                        }
                        break;
                    case RaceVictoryConditionType.LoseFewestShips:
                    case RaceVictoryConditionType.LeastWarsStarted:
                    case RaceVictoryConditionType.LeastBrokenTreaties:
                    case RaceVictoryConditionType.LeastTreaties:
                        if (flag)
                        {
                            list.Sort();
                            switch (list.IndexOf(num))
                            {
                                case 0:
                                    result = 1.0;
                                    bestEmpire = empire;
                                    break;
                                case 1:
                                    result = 0.5;
                                    break;
                                case 2:
                                    result = 0.33;
                                    break;
                                default:
                                    result = 0.0;
                                    break;
                            }
                        }
                        else
                        {
                            result = 0.0;
                        }
                        break;
                }
                bool flag2 = true;
                if (bestEmpire != empire)
                {
                    if (bestEmpire == null)
                    {
                        flag2 = false;
                    }
                    else if (empire.PirateEmpireBaseHabitat == null && bestEmpire.PirateEmpireBaseHabitat == null)
                    {
                        DiplomaticRelation diplomaticRelation7 = galaxy.PlayerEmpire.ObtainDiplomaticRelation(bestEmpire);
                        if (diplomaticRelation7.Type == DiplomaticRelationType.NotMet)
                        {
                            flag2 = false;
                        }
                    }
                    else
                    {
                        PirateRelation pirateRelation = galaxy.PlayerEmpire.ObtainPirateRelation(bestEmpire);
                        if (pirateRelation.Type == PirateRelationType.NotMet)
                        {
                            flag2 = false;
                        }
                    }
                }
                if (flag2 && bestEmpire != null)
                {
                    switch (condition.Type)
                    {
                        case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateBuildMostHiddenBases"), bestEmpire.Colonies.CountPirateControlledColoniesWithHiddenPirateBase(bestEmpire).ToString("0"));
                            break;
                        case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateEliminateMostPirateFactions"), bestEmpire.Counters.EliminatePirateEmpireCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.PirateMostProtectionIncome:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateMostProtectionIncome"), bestEmpire.Counters.PirateProtectionIncome.ToString("0"));
                            break;
                        case RaceVictoryConditionType.PirateMostSmugglingIncome:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateMostSmugglingIncome"), bestEmpire.Counters.PirateSmugglingIncome.ToString("0"));
                            break;
                        case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateMostSuccessfulMissionsAttack"), bestEmpire.Counters.CompletedPirateMissionAttackCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateMostSuccessfulRaids"), bestEmpire.Counters.RaidSuccessCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateMostSuccessfulMissionsDefend"), bestEmpire.Counters.CompletedPirateMissionDefendCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.CaptureMostShips:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail CaptureMostShips"), bestEmpire.Counters.CaptureShipCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.ConquerMostEnemyColonies:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ConquerMostEnemyColonies"), bestEmpire.Counters.ColoniesConqueredCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.ControlMostRuins:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ControlMostRuins"), bestEmpire.Colonies.CountHabitatWithRuins().ToString("0"));
                            break;
                        case RaceVictoryConditionType.DestroyMostCreaturesByType:
                            if (condition.AdditionalData is CreatureType)
                            {
                                CreatureType creatureType = (CreatureType)condition.AdditionalData;
                                int num5 = 0;
                                switch (creatureType)
                                {
                                    case CreatureType.SilverMist:
                                        num5 = bestEmpire.Counters.DestroyedCreatureCountSilverMist;
                                        break;
                                    case CreatureType.Ardilus:
                                        num5 = bestEmpire.Counters.DestroyedCreatureCountArdilus;
                                        break;
                                    case CreatureType.DesertSpaceSlug:
                                        num5 = bestEmpire.Counters.DestroyedCreatureCountSandSlug;
                                        break;
                                    case CreatureType.Kaltor:
                                        num5 = bestEmpire.Counters.DestroyedCreatureCountKaltor;
                                        break;
                                    case CreatureType.RockSpaceSlug:
                                        num5 = bestEmpire.Counters.DestroyedCreatureCountSpaceSlug;
                                        break;
                                }
                                detail = string.Format(TextResolver.GetText("Race Victory Condition Detail DestroyMostCreaturesByType"), num5.ToString("0"));
                            }
                            break;
                        case RaceVictoryConditionType.DestroyMostShips:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail DestroyMostShips"), (bestEmpire.Counters.DestroyedEnemyMilitaryShipCount + bestEmpire.Counters.DestroyedEnemyCivilianShipCount).ToString("0"));
                            break;
                        case RaceVictoryConditionType.DestroyMostTroops:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail DestroyMostTroops"), bestEmpire.Counters.DestroyedEnemyTroopCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.ExploreMostSystems:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ExploreMostSystems"), bestEmpire.SystemVisibility.CountExploredSystems().ToString("0"));
                            break;
                        case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ExterminateOrEnslaveMostPopulation"), bestEmpire.CalculateEnslavedPopulationAmount().ToString("0,,M"), bestEmpire.Counters.ExterminatedPopulationAmount.ToString("0,,M"));
                            break;
                        case RaceVictoryConditionType.HighestPrivateRevenue:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail HighestPrivateRevenue"), bestEmpire.Counters.ColonyPrivateRevenueTotal.ToString("###,###,###,###,##0"));
                            break;
                        case RaceVictoryConditionType.HighestTradeVolume:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail HighestTradeVolume"), bestEmpire.Counters.TradeIncomeTotalVolume.ToString("###,###,###,###,##0"));
                            break;
                        case RaceVictoryConditionType.LargestMilitary:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail LargestMilitary"), bestEmpire.CalculateMilitaryShipSizeTotal().ToString("0,K"));
                            break;
                        case RaceVictoryConditionType.LargestMilitaryNonAllied:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail LargestMilitaryNonAllied"), bestEmpire.CalculateMilitaryShipSizeTotal().ToString("0,K"));
                            break;
                        case RaceVictoryConditionType.MostTroops:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostTroops"), bestEmpire.Troops.CountTroopsNotRecruiting().ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostTroopsNonAllied:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostTroopsNonAllied"), bestEmpire.Troops.CountTroopsNotRecruiting().ToString("0"));
                            break;
                        case RaceVictoryConditionType.LeastBrokenTreaties:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail LeastBrokenTreaties"), bestEmpire.Counters.BrokenTreatyCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.LeastTimeWarring:
                            detail = string.Format(arg0: ((double)bestEmpire.Counters.TimeSpentAtWar(currentStarDate) / ((double)RealSecondsInGalacticYear * 1000.0)).ToString("0.0"), format: TextResolver.GetText("Race Victory Condition Detail LeastTimeWarring"));
                            break;
                        case RaceVictoryConditionType.LeastTreaties:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail LeastTreaties"), bestEmpire.DiplomaticRelations.CountTreaties().ToString("0"));
                            break;
                        case RaceVictoryConditionType.LeastWarsStarted:
                            detail = string.Format(arg0: ((double)bestEmpire.Counters.WarsWeStartedCount).ToString("0"), format: TextResolver.GetText("Race Victory Condition Detail LeastWars"));
                            break;
                        case RaceVictoryConditionType.LoseFewestShips:
                            detail = string.Format(arg0: ((double)(bestEmpire.Counters.LossesCivilianShipCount + bestEmpire.Counters.LossesMilitaryShipCount)).ToString("0"), format: TextResolver.GetText("Race Victory Condition Detail LoseFewestShips"));
                            break;
                        case RaceVictoryConditionType.LoseFewestTroops:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail LoseFewestTroops"), bestEmpire.Counters.LossesTroopCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostExperiencedAdmiral:
                            {
                                CharacterList charactersByRole6 = bestEmpire.Characters.GetCharactersByRole(CharacterRole.FleetAdmiral);
                                Character character11 = null;
                                for (int num7 = 0; num7 < charactersByRole6.Count; num7++)
                                {
                                    Character character12 = charactersByRole6[num7];
                                    if (character11 == null || character12.GetSkillLevelTotal() > character11.GetSkillLevelTotal())
                                    {
                                        character11 = character12;
                                    }
                                }
                                if (character11 != null)
                                {
                                    detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostExperiencedAdmiral"), character11.Name);
                                }
                                break;
                            }
                        case RaceVictoryConditionType.MostExperiencedGeneral:
                            {
                                CharacterList charactersByRole5 = bestEmpire.Characters.GetCharactersByRole(CharacterRole.TroopGeneral);
                                Character character9 = null;
                                for (int num6 = 0; num6 < charactersByRole5.Count; num6++)
                                {
                                    Character character10 = charactersByRole5[num6];
                                    if (character9 == null || character10.GetSkillLevelTotal() > character9.GetSkillLevelTotal())
                                    {
                                        character9 = character10;
                                    }
                                }
                                if (character9 != null)
                                {
                                    detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostExperiencedGeneral"), character9.Name);
                                }
                                break;
                            }
                        case RaceVictoryConditionType.MostHomeworlds:
                            {
                                detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostHomeworlds"), bestEmpire.CountHomeworldsOwned().ToString("0"));
                                HabitatList homeworldsOwned = bestEmpire.GetHomeworldsOwned();
                                string text = string.Empty;
                                for (int n = 0; n < homeworldsOwned.Count; n++)
                                {
                                    text = text + homeworldsOwned[n].Name + ", ";
                                }
                                if (!string.IsNullOrEmpty(text) && text.Length >= 2)
                                {
                                    text = text.Substring(0, text.Length - 2);
                                    detail = detail + ": " + text;
                                }
                                break;
                            }
                        case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostIntelligenceMissionsIntercepted"), bestEmpire.Counters.IntelligenceMissionSuccessCounterIntelligenceCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                            detail = string.Format(arg0: (bestEmpire.Counters.IntelligenceMissionSuccessEspionageCount + bestEmpire.Counters.IntelligenceMissionSuccessSabotageCount).ToString("0"), format: TextResolver.GetText("Race Victory Condition Detail MostIntelligenceMissionsSucceed"));
                            break;
                        case RaceVictoryConditionType.MostMiningStations:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostMiningStations"), bestEmpire.MiningStations.Count.ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostResortBases:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostResortBases"), bestEmpire.ResortBases.Count.ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostScientists:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostScientists"), bestEmpire.Characters.CountCharactersByRole(CharacterRole.Scientist).ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostSpaceports:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostSpaceports"), bestEmpire.SpacePorts.Count.ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostSubjugatedDominions:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostSubjugatedDominions"), bestEmpire.DiplomaticRelations.CountSubjugatedDominions().ToString("0"));
                            break;
                        case RaceVictoryConditionType.MostTimeWarring:
                            detail = string.Format(arg0: ((double)bestEmpire.Counters.TimeSpentAtWar(currentStarDate) / ((double)RealSecondsInGalacticYear * 1000.0)).ToString("0.0"), format: TextResolver.GetText("Race Victory Condition Detail MostTimeWarring"));
                            break;
                        case RaceVictoryConditionType.MostTourismIncome:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostTourismIncome"), bestEmpire.Counters.TourismIncome.ToString("###,###,###,###,##0"));
                            break;
                        case RaceVictoryConditionType.MostTradeIncome:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MostTradeIncome"), bestEmpire.Counters.TradeIncomeStateBonus.ToString("###,###,###,###,##0"));
                            break;
                        case RaceVictoryConditionType.OldestFreeTradeAgreement:
                            {
                                DiplomaticRelation diplomaticRelation9 = bestEmpire.DiplomaticRelations.FindOldestRelationByType(DiplomaticRelationType.FreeTradeAgreement);
                                if (diplomaticRelation9 != null)
                                {
                                    detail = string.Format(TextResolver.GetText("Race Victory Condition Detail OldestFreeTradeAgreement"), diplomaticRelation9.OtherEmpire.Name, ResolveStarDateDescription(diplomaticRelation9.StartDateOfLastChange));
                                }
                                break;
                            }
                        case RaceVictoryConditionType.OldestMutualDefensePact:
                            {
                                DiplomaticRelation diplomaticRelation8 = bestEmpire.DiplomaticRelations.FindOldestRelationByType(DiplomaticRelationType.MutualDefensePact);
                                if (diplomaticRelation8 != null)
                                {
                                    detail = string.Format(TextResolver.GetText("Race Victory Condition Detail OldestMutualDefensePact"), diplomaticRelation8.OtherEmpire.Name, ResolveStarDateDescription(diplomaticRelation8.StartDateOfLastChange));
                                }
                                break;
                            }
                        case RaceVictoryConditionType.OwnLargestCapitalShip:
                            {
                                BuiltObject builtObject3 = bestEmpire.LargestCapitalShip();
                                if (builtObject3 != null)
                                {
                                    detail = string.Format(TextResolver.GetText("Race Victory Condition Detail OwnLargestCapitalShip"), builtObject3.Name, builtObject3.Size.ToString("0"));
                                }
                                break;
                            }
                        case RaceVictoryConditionType.PopulationHappiest:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PopulationHappiest"), bestEmpire.AverageHappiness().ToString("+0.0;-0.0;0"));
                            break;
                        case RaceVictoryConditionType.PopulationHighest:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PopulationHighest"), bestEmpire.TotalPopulation.ToString("0,,M"));
                            break;
                        case RaceVictoryConditionType.ResearchLeastAdvanced:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ResearchLeastAdvanced"), bestEmpire.Research.TechTree.CalculateTotalCostResearchedProjects().ToString("0,K"));
                            break;
                        case RaceVictoryConditionType.ResearchMostAdvanced:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ResearchMostAdvanced"), bestEmpire.Research.TechTree.CalculateTotalCostResearchedProjects().ToString("0,K"));
                            break;
                        case RaceVictoryConditionType.ResearchMostCompletedBranches:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ResearchMostCompletedBranches"), bestEmpire.Research.TechTree.CountCompletedCategories().ToString("0"));
                            break;
                        case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                            if (condition.AdditionalData is IndustryType)
                            {
                                IndustryType industry3 = (IndustryType)condition.AdditionalData;
                                detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ResearchMostCompletedBranchesByIndustry"), bestEmpire.Research.TechTree.CountCompletedCategories(industry3).ToString("0"), ResolveDescription(industry3));
                            }
                            break;
                        case RaceVictoryConditionType.MineMostResourcesLuxury:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MineMostResourcesLuxury"), bestEmpire.Counters.MiningExtractionLuxury.ToString("0,K"));
                            break;
                        case RaceVictoryConditionType.MineMostResourcesStrategic:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MineMostResourcesStrategic"), (bestEmpire.Counters.MiningExtractionGas + bestEmpire.Counters.MiningExtractionStrategic).ToString("0,K"));
                            break;
                        case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MineMostResourcesColonyManufactured"), bestEmpire.Counters.MiningExtractionColonyManufactured.ToString("0,K"));
                            break;
                        case RaceVictoryConditionType.BuildMostMilitaryShips:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail BuildMostMilitaryShips"), bestEmpire.Counters.BuildMilitaryShipCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.BuildMostCivilianShips:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail BuildMostCivilianShips"), bestEmpire.Counters.BuildCivilianShipCount.ToString("0"));
                            break;
                        case RaceVictoryConditionType.BuildMostBases:
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail BuildMostBases"), bestEmpire.Counters.BuildBaseCount.ToString("0"));
                            break;
                    }
                }
                return result;
            }
            return 0.0;
        }

        public static double CalculateRaceVictoryConditionProgress(Galaxy galaxy, Empire empire, RaceVictoryCondition condition, out string detail, out Empire bestEmpire)
        {
            double val = 0.0;
            detail = string.Empty;
            bestEmpire = empire;
            if (galaxy != null && condition != null && empire != null && empire.Counters != null)
            {
                switch (condition.Type)
                {
                    case RaceVictoryConditionType.ControlMostRuins:
                    case RaceVictoryConditionType.PopulationHighest:
                    case RaceVictoryConditionType.PopulationHappiest:
                    case RaceVictoryConditionType.MostHomeworlds:
                    case RaceVictoryConditionType.OwnLargestCapitalShip:
                    case RaceVictoryConditionType.MostSpaceports:
                    case RaceVictoryConditionType.MostMiningStations:
                    case RaceVictoryConditionType.MostResortBases:
                    case RaceVictoryConditionType.DestroyMostShips:
                    case RaceVictoryConditionType.DestroyMostTroops:
                    case RaceVictoryConditionType.DestroyMostCreaturesByType:
                    case RaceVictoryConditionType.LoseFewestShips:
                    case RaceVictoryConditionType.LoseFewestTroops:
                    case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                    case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                    case RaceVictoryConditionType.ConquerMostEnemyColonies:
                    case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                    case RaceVictoryConditionType.MostScientists:
                    case RaceVictoryConditionType.MostExperiencedAdmiral:
                    case RaceVictoryConditionType.MostExperiencedGeneral:
                    case RaceVictoryConditionType.ResearchLeastAdvanced:
                    case RaceVictoryConditionType.ResearchMostAdvanced:
                    case RaceVictoryConditionType.ResearchMostCompletedBranches:
                    case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                    case RaceVictoryConditionType.HighestTradeVolume:
                    case RaceVictoryConditionType.MostTourismIncome:
                    case RaceVictoryConditionType.MostTradeIncome:
                    case RaceVictoryConditionType.HighestPrivateRevenue:
                    case RaceVictoryConditionType.LargestMilitary:
                    case RaceVictoryConditionType.LargestMilitaryNonAllied:
                    case RaceVictoryConditionType.MostTroops:
                    case RaceVictoryConditionType.MostTroopsNonAllied:
                    case RaceVictoryConditionType.LeastWarsStarted:
                    case RaceVictoryConditionType.LeastBrokenTreaties:
                    case RaceVictoryConditionType.LeastTreaties:
                    case RaceVictoryConditionType.MostTimeWarring:
                    case RaceVictoryConditionType.LeastTimeWarring:
                    case RaceVictoryConditionType.MostSubjugatedDominions:
                    case RaceVictoryConditionType.OldestMutualDefensePact:
                    case RaceVictoryConditionType.OldestFreeTradeAgreement:
                    case RaceVictoryConditionType.ExploreMostSystems:
                    case RaceVictoryConditionType.MineMostResourcesLuxury:
                    case RaceVictoryConditionType.MineMostResourcesStrategic:
                    case RaceVictoryConditionType.BuildMostMilitaryShips:
                    case RaceVictoryConditionType.BuildMostCivilianShips:
                    case RaceVictoryConditionType.BuildMostBases:
                    case RaceVictoryConditionType.CaptureMostShips:
                    case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                    case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                    case RaceVictoryConditionType.PirateMostSmugglingIncome:
                    case RaceVictoryConditionType.PirateMostProtectionIncome:
                    case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                    case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                        val = RaceVictoryConditionMetCompareEmpires(galaxy, empire, condition, out detail, out bestEmpire);
                        break;
                    case RaceVictoryConditionType.BuildWonder:
                        {
                            if (!(condition.AdditionalData is PlanetaryFacilityDefinition))
                            {
                                break;
                            }
                            PlanetaryFacilityDefinition planetaryFacilityDefinition = (PlanetaryFacilityDefinition)condition.AdditionalData;
                            bool flag = false;
                            if (empire.Colonies != null)
                            {
                                for (int l = 0; l < empire.Colonies.Count; l++)
                                {
                                    PlanetaryFacility planetaryFacility = empire.Colonies[l].Facilities.FindWonderByType(planetaryFacilityDefinition.WonderType);
                                    if (planetaryFacility != null && planetaryFacility.ConstructionProgress >= 1f)
                                    {
                                        detail = empire.Colonies[l].Name;
                                        flag = true;
                                        break;
                                    }
                                }
                            }
                            if (flag)
                            {
                                val = 1.0;
                            }
                            break;
                        }
                    case RaceVictoryConditionType.ControlHomeworld:
                        if (empire.HomeWorld != null && !empire.HomeWorld.HasBeenDestroyed && empire.HomeWorld.Empire == empire)
                        {
                            detail = empire.HomeWorld.Name;
                            val = 1.0;
                        }
                        else if (empire.HomeWorld != null && empire.HomeWorld.Empire != null)
                        {
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ControlHomeworld Other"), empire.HomeWorld.Name, empire.HomeWorld.Empire.Name);
                        }
                        break;
                    case RaceVictoryConditionType.ControlLargestColoniesByType:
                        {
                            if (!(condition.AdditionalData is HabitatType))
                            {
                                break;
                            }
                            string text = string.Empty;
                            HabitatType type = (HabitatType)condition.AdditionalData;
                            HabitatList habitatList = galaxy.DetermineLargestColoniesByType(type);
                            int num6 = (int)condition.Amount;
                            int num7 = 0;
                            for (int m = 0; m < num6; m++)
                            {
                                if (m < habitatList.Count && habitatList[m].Empire == empire)
                                {
                                    text = text + habitatList[m].Name + ", ";
                                    num7++;
                                }
                            }
                            if (!string.IsNullOrEmpty(text) && text.Length >= 2)
                            {
                                text = text.Substring(0, text.Length - 2);
                            }
                            detail = text;
                            val = (double)num7 / (double)num6;
                            break;
                        }
                    case RaceVictoryConditionType.ControlPlanetTypePercentage:
                        if (condition.AdditionalData is HabitatType)
                        {
                            HabitatType type2 = (HabitatType)condition.AdditionalData;
                            int num19 = galaxy.CountColoniesByType(type2);
                            int num20 = empire.Colonies.CountByType(type2);
                            double num21 = (double)num20 / Math.Max(1.0, num19);
                            val = num21 / (condition.Amount / 100.0);
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ControlPlanetTypePercentage"), num20.ToString("0"), ResolveDescription(type2), num21.ToString("0%"));
                        }
                        break;
                    case RaceVictoryConditionType.PirateControlColoniesPercentage:
                        {
                            int num4 = Math.Max(1, galaxy.CountPirateControlledColonies());
                            int count = empire.Colonies.Count;
                            double num5 = (double)count / (double)num4;
                            val = num5 / (condition.Amount / 100.0);
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail PirateControlColoniesPercentage"), count.ToString("0"), num5.ToString("0%"));
                            break;
                        }
                    case RaceVictoryConditionType.PirateBuildHiddenFortress:
                        {
                            for (int j = 0; j < empire.Colonies.Count; j++)
                            {
                                Habitat habitat = empire.Colonies[j];
                                if (habitat != null && !habitat.HasBeenDestroyed && habitat.Facilities != null)
                                {
                                    PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(empire);
                                    if (byFaction != null && byFaction.HasFacilityControl && habitat.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateFortress) > 0)
                                    {
                                        val = 1.0;
                                        detail = habitat.Name;
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    case RaceVictoryConditionType.PirateBuildCriminalNetwork:
                        {
                            for (int n = 0; n < empire.Colonies.Count; n++)
                            {
                                Habitat habitat2 = empire.Colonies[n];
                                if (habitat2 != null && !habitat2.HasBeenDestroyed && habitat2.Facilities != null)
                                {
                                    PirateColonyControl byFaction2 = habitat2.GetPirateControl().GetByFaction(empire);
                                    if (byFaction2 != null && byFaction2.HasFacilityControl && habitat2.Facilities.CountCompletedByType(PlanetaryFacilityType.PirateCriminalNetwork) > 0)
                                    {
                                        val = 1.0;
                                        detail = habitat2.Name;
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    case RaceVictoryConditionType.ControlRestrictedResourceSupply:
                        {
                            HabitatList habitatsWithRestrictedResources = empire.Colonies.GetHabitatsWithRestrictedResources();
                            for (int k = 0; k < habitatsWithRestrictedResources.Count; k++)
                            {
                                detail = detail + habitatsWithRestrictedResources[k].Name + ", ";
                            }
                            if (!string.IsNullOrEmpty(detail) && detail.Length >= 2)
                            {
                                detail = detail.Substring(0, detail.Length - 2);
                            }
                            val = (double)habitatsWithRestrictedResources.Count / condition.Amount;
                            break;
                        }
                    case RaceVictoryConditionType.DestroyMoreEnemyTroopsThanLoseTimesFactor:
                        {
                            double amount2 = condition.Amount;
                            if ((double)empire.Counters.DestroyedEnemyTroopCount > (double)empire.Counters.LossesTroopCount * amount2)
                            {
                                val = 1.0;
                            }
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail DestroyMoreEnemyTroopsThanLoseTimesFactor"), empire.Counters.DestroyedEnemyTroopCount.ToString("0"), empire.Counters.LossesTroopCount.ToString("0"));
                            break;
                        }
                    case RaceVictoryConditionType.DestroyMoreShipsThanLoseTimesFactor:
                        {
                            double amount = condition.Amount;
                            double num17 = (double)empire.Counters.DestroyedEnemyMilitaryShipCount + (double)empire.Counters.DestroyedEnemyCivilianShipCount;
                            double num18 = (double)empire.Counters.LossesMilitaryShipCount + (double)empire.Counters.LossesCivilianShipCount;
                            if (num17 > num18 * amount)
                            {
                                val = 1.0;
                            }
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail DestroyMoreShipsThanLoseTimesFactor"), num17.ToString("0"), num18.ToString("0"));
                            break;
                        }
                    case RaceVictoryConditionType.EnslavePopulationProportionEmpire:
                        {
                            double num15 = empire.CalculateEnslavedPopulationAmount();
                            double num16 = num15 / (double)empire.TotalPopulation;
                            val = num16 / (condition.Amount / 100.0);
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail EnslavePopulationProportionEmpire"), num15.ToString("0,,M"), empire.TotalPopulation.ToString("0,,M"));
                            break;
                        }
                    case RaceVictoryConditionType.ExploreGalaxyPercentage:
                        {
                            int num13 = empire.SystemVisibility.CountExploredSystems();
                            double num14 = Math.Max(0.0, Math.Min(1.0, (double)num13 / (double)galaxy.Systems.Count));
                            val = num14 / (condition.Amount / 100.0);
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail ExploreGalaxyPercentage"), num13.ToString("0"), galaxy.Systems.Count.ToString("0"));
                            break;
                        }
                    case RaceVictoryConditionType.FreeTradeAgreementsFormedProportionAllEmpires:
                        {
                            int num8 = empire.DiplomaticRelations.CountRelationsByType(DiplomaticRelationType.FreeTradeAgreement);
                            int num9 = empire.DiplomaticRelations.CountRelationsByType(DiplomaticRelationType.MutualDefensePact);
                            int num10 = empire.DiplomaticRelations.CountRelationsByType(DiplomaticRelationType.Protectorate);
                            int num11 = num8 + num9 + num10;
                            double num12 = (double)num11 / (double)(galaxy.Empires.Count - 1);
                            val = num12 / (condition.Amount / 100.0);
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail FreeTradeAgreementsFormedProportionAllEmpires"), num11.ToString("0"));
                            break;
                        }
                    case RaceVictoryConditionType.KeepLeaderAlive:
                        if (empire.Characters != null)
                        {
                            CharacterList charactersByRole = empire.Characters.GetCharactersByRole(CharacterRole.Leader);
                            if (charactersByRole.Count > 0)
                            {
                                val = 1.0;
                            }
                            for (int i = 0; i < charactersByRole.Count; i++)
                            {
                                detail = detail + charactersByRole[i].Name + ", ";
                            }
                            if (!string.IsNullOrEmpty(detail) && detail.Length >= 2)
                            {
                                detail = detail.Substring(0, detail.Length - 2);
                            }
                        }
                        break;
                    case RaceVictoryConditionType.MutualDefensePactsFormedProportionAllEmpires:
                        {
                            int num = empire.DiplomaticRelations.CountRelationsByType(DiplomaticRelationType.MutualDefensePact);
                            int num2 = Math.Max(1, galaxy.Empires.Count - 1);
                            double num3 = (double)num / (double)num2;
                            val = num3 / (condition.Amount / 100.0);
                            detail = string.Format(TextResolver.GetText("Race Victory Condition Detail MutualDefensePactsFormedProportionAllEmpires"), num.ToString("0"));
                            break;
                        }
                }
            }
            return Math.Max(0.0, Math.Min(1.0, val));
        }

        public int CountColoniesByType(HabitatType type)
        {
            int num = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire == null || empire == IndependentEmpire || !empire.Active)
                {
                    continue;
                }
                for (int j = 0; j < empire.Colonies.Count; j++)
                {
                    Habitat habitat = empire.Colonies[j];
                    if (habitat != null && !habitat.HasBeenDestroyed && habitat.Type == type)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        public int CountPirateControlledColonies()
        {
            int num = 0;
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire == null || empire == IndependentEmpire || !empire.Active)
                {
                    continue;
                }
                for (int j = 0; j < empire.Colonies.Count; j++)
                {
                    Habitat habitat = empire.Colonies[j];
                    if (habitat != null && !habitat.HasBeenDestroyed && habitat.GetPirateControl().Count > 0)
                    {
                        num++;
                    }
                }
            }
            return num;
        }

        public HabitatList DetermineLargestColoniesByType(HabitatType type)
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire == null || empire == IndependentEmpire || !empire.Active)
                {
                    continue;
                }
                for (int j = 0; j < empire.Colonies.Count; j++)
                {
                    Habitat habitat = empire.Colonies[j];
                    if (habitat != null && !habitat.HasBeenDestroyed && habitat.Type == type)
                    {
                        habitatList.Add(habitat);
                    }
                }
            }
            habitatList.Sort();
            habitatList.Reverse();
            return habitatList;
        }

        private void CheckVictoryConditions(Empire playerEmpire, VictoryConditions globalVictoryConditions, EmpireVictoryConditions playerConditionsToAchieve, EmpireVictoryConditions playerConditionsToPrevent)
        {
            long num = CurrentStarDate;
            if (globalVictoryConditions != null && globalVictoryConditions.StartDate > 0)
            {
                num = globalVictoryConditions.StartDate;
            }
            if (CurrentStarDate < num)
            {
                return;
            }
            string description = string.Empty;
            if (globalVictoryConditions != null)
            {
                if (globalVictoryConditions.TimeLimit && CurrentStarDate >= globalVictoryConditions.TimeLimitDate)
                {
                    Empire empire = null;
                    int num2 = 0;
                    for (int i = 0; i < Empires.Count; i++)
                    {
                        Empire empire2 = Empires[i];
                        if (empire2.TotalColonyStrategicValue > num2 && empire2.DominantRace != null && empire2.DominantRace.Playable)
                        {
                            empire = empire2;
                            num2 = empire2.TotalColonyStrategicValue;
                        }
                    }
                    if (empire != null)
                    {
                        GameEndOutcome gameEndOutcome = GameEndOutcome.Undefined;
                        if (empire == playerEmpire)
                        {
                            gameEndOutcome = GameEndOutcome.Victory;
                            description += string.Format(TextResolver.GetText("Victory Conditions Time Limit Win"), ResolveStarDateDescription(globalVictoryConditions.TimeLimitDate));
                        }
                        else
                        {
                            gameEndOutcome = GameEndOutcome.Defeat;
                            description += string.Format(TextResolver.GetText("Victory Conditions Time Limit Lose"), ResolveStarDateDescription(globalVictoryConditions.TimeLimitDate), empire.Name);
                        }
                        OnGameEnd(new GameEndEventArgs(empire, gameEndOutcome, description, 0));
                    }
                }
                int code = 0;
                Empire empire3 = CheckGlobalVictoryConditions(playerEmpire, globalVictoryConditions, out description, out code);
                if (empire3 != null)
                {
                    if (empire3 == playerEmpire)
                    {
                        OnGameEnd(new GameEndEventArgs(empire3, GameEndOutcome.Victory, description, code));
                    }
                    else
                    {
                        OnGameEnd(new GameEndEventArgs(empire3, GameEndOutcome.Defeat, description, code));
                    }
                }
            }
            if (CheckEmpireVictoryConditionsToAchieve(playerConditionsToAchieve, playerEmpire))
            {
                OnGameEnd(new GameEndEventArgs(playerEmpire, GameEndOutcome.Victory, description, 0));
            }
            if (CheckEmpireVictoryConditionsToPrevent(playerConditionsToPrevent, playerEmpire))
            {
                OnGameEnd(new GameEndEventArgs(null, GameEndOutcome.Defeat, description, 0));
            }
        }

        public Empire CheckVictoryConditionsWinner(bool requireReachVictoryThreshold)
        {
            if (GlobalVictoryConditions != null)
            {
                VictoryConditionProgressList victoryConditionProgressList = GenerateVictoryConditionProgresses(this, GlobalVictoryConditions, filterOutUnmetEmpires: false);
                VictoryConditionProgressList victoryConditionProgressList2 = new VictoryConditionProgressList();
                for (int i = 0; i < victoryConditionProgressList.Count; i++)
                {
                    if (!requireReachVictoryThreshold || victoryConditionProgressList[i].TotalProgress >= GlobalVictoryConditions.VictoryThresholdPercentage)
                    {
                        victoryConditionProgressList2.Add(victoryConditionProgressList[i]);
                    }
                }
                VictoryConditionProgress victoryConditionProgress = null;
                if (victoryConditionProgressList2.Count > 0)
                {
                    for (int j = 0; j < victoryConditionProgressList2.Count; j++)
                    {
                        if (victoryConditionProgress == null || victoryConditionProgressList2[j].TotalProgress > victoryConditionProgress.TotalProgress || (victoryConditionProgressList2[j].TotalProgress == victoryConditionProgress.TotalProgress && victoryConditionProgressList2[j].Empire.TotalColonyStrategicValue > victoryConditionProgress.Empire.TotalColonyStrategicValue))
                        {
                            victoryConditionProgress = victoryConditionProgressList2[j];
                        }
                    }
                }
                if (victoryConditionProgress != null)
                {
                    return victoryConditionProgress.Empire;
                }
            }
            return null;
        }

        public static VictoryConditionProgressList GenerateVictoryConditionProgresses(Galaxy galaxy, VictoryConditions globalVictoryConditions, bool filterOutUnmetEmpires)
        {
            VictoryConditionProgressList victoryConditionProgressList = new VictoryConditionProgressList();
            long currentStarDate = galaxy.CurrentStarDate;
            if (globalVictoryConditions != null)
            {
                Empire empire = galaxy.IdentifyShakturiEmpire();
                Empire empire2 = galaxy.IdentifyMechanoidEmpire();
                EmpireList empireList = galaxy.Empires;
                if (galaxy.PlayerEmpire.PirateEmpireBaseHabitat != null)
                {
                    empireList = galaxy.PirateEmpires;
                }
                long num = 0L;
                double num2 = 0.0;
                double num3 = 0.0;
                for (int i = 0; i < empireList.Count; i++)
                {
                    Empire empire3 = empireList[i];
                    if (empire3 != null && empire3.Active && empire3 != galaxy.IndependentEmpire && empire3 != empire && empire3 != empire2)
                    {
                        if (galaxy.PlayerEmpire.PirateEmpireBaseHabitat != null)
                        {
                            HabitatList ownedColonies = new HabitatList();
                            HabitatList pirateControlledColonies = empire3.Colonies.GetPirateControlledColonies(empire3, out ownedColonies);
                            long num4 = ownedColonies.TotalPopulation();
                            long num5 = pirateControlledColonies.TotalPopulation();
                            num += num4 + num5 / 2;
                            num2 += empire3.CalculateAccurateAnnualIncome();
                            num3 += (double)ownedColonies.Count;
                            num3 += (double)pirateControlledColonies.Count / 2.0;
                        }
                        else
                        {
                            num += empire3.TotalPopulation;
                            num2 += empire3.PrivateAnnualRevenue;
                            num3 += (double)empire3.Colonies.Count;
                        }
                    }
                }
                num = Math.Max(100L, num);
                num2 = Math.Max(1.0, num2);
                num3 = Math.Max(1.0, num3);
                long num6 = (long)((double)num * (globalVictoryConditions.PopulationPercent / 100.0));
                double num7 = num2 * (globalVictoryConditions.EconomyPercent / 100.0);
                int num8 = (int)(0.99 + num3 * (globalVictoryConditions.TerritoryPercent / 100.0));
                victoryConditionProgressList = new VictoryConditionProgressList();
                for (int j = 0; j < empireList.Count; j++)
                {
                    Empire empire4 = empireList[j];
                    if (empire4 == null || !empire4.Active || empire4 == galaxy.IndependentEmpire || empire4 == empire || empire4 == empire2)
                    {
                        continue;
                    }
                    bool flag = true;
                    if (filterOutUnmetEmpires && empire4 != galaxy.PlayerEmpire)
                    {
                        if (empire4.PirateEmpireBaseHabitat == null && galaxy.PlayerEmpire.PirateEmpireBaseHabitat == null)
                        {
                            DiplomaticRelation diplomaticRelation = galaxy.PlayerEmpire.ObtainDiplomaticRelation(empire4);
                            if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
                            {
                                flag = false;
                            }
                        }
                        else
                        {
                            PirateRelation pirateRelation = galaxy.PlayerEmpire.ObtainPirateRelation(empire4);
                            if (pirateRelation.Type == PirateRelationType.NotMet)
                            {
                                flag = false;
                            }
                        }
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    RaceVictoryConditionProgressList conditionProgresses = null;
                    if (globalVictoryConditions.EnableRaceSpecificVictoryConditions)
                    {
                        CalculateRaceVictoryConditionsProgress(galaxy, empire4, empire4.DominantRace, out conditionProgresses);
                    }
                    double territoryPercent = 0.0;
                    double economyPercent = 0.0;
                    double populationPercent = 0.0;
                    double territoryProgress = 0.0;
                    double economyProgress = 0.0;
                    double populationProgress = 0.0;
                    if (globalVictoryConditions.Territory)
                    {
                        if (empire4.PirateEmpireBaseHabitat != null)
                        {
                            int ownedColonyCount = 0;
                            int num9 = empire4.Colonies.CountPirateControlledColonies(empire4, out ownedColonyCount);
                            double num10 = (double)ownedColonyCount + (double)num9 / 2.0;
                            territoryPercent = num10 / num3;
                            territoryProgress = Math.Max(0.0, Math.Min(1.0, num10 / (double)num8));
                        }
                        else
                        {
                            territoryPercent = (double)empire4.Colonies.Count / num3;
                            territoryProgress = Math.Max(0.0, Math.Min(1.0, (double)empire4.Colonies.Count / (double)num8));
                        }
                    }
                    if (globalVictoryConditions.Economy)
                    {
                        if (empire4.PirateEmpireBaseHabitat != null)
                        {
                            double num11 = empire4.CalculateAccurateAnnualIncome();
                            economyPercent = num11 / num2;
                            economyProgress = Math.Max(0.0, Math.Min(1.0, num11 / num7));
                        }
                        else
                        {
                            economyPercent = empire4.PrivateAnnualRevenue / num2;
                            economyProgress = Math.Max(0.0, Math.Min(1.0, empire4.PrivateAnnualRevenue / num7));
                        }
                    }
                    if (globalVictoryConditions.Population)
                    {
                        if (empire4.PirateEmpireBaseHabitat != null)
                        {
                            HabitatList ownedColonies2 = new HabitatList();
                            HabitatList pirateControlledColonies2 = empire4.Colonies.GetPirateControlledColonies(empire4, out ownedColonies2);
                            long num12 = ownedColonies2.TotalPopulation();
                            long num13 = pirateControlledColonies2.TotalPopulation();
                            long num14 = num12 + num13 / 2;
                            populationPercent = (double)num14 / (double)num;
                            populationProgress = Math.Max(0.0, Math.Min(1.0, (double)num14 / (double)num6));
                        }
                        else
                        {
                            populationPercent = (double)empire4.TotalPopulation / (double)num;
                            populationProgress = Math.Max(0.0, Math.Min(1.0, (double)empire4.TotalPopulation / (double)num6));
                        }
                    }
                    VictoryConditionProgress victoryConditionProgress = new VictoryConditionProgress(empire4, globalVictoryConditions.Territory, globalVictoryConditions.Economy, globalVictoryConditions.Population, territoryProgress, economyProgress, populationProgress, conditionProgresses);
                    victoryConditionProgress.TerritoryPercent = territoryPercent;
                    victoryConditionProgress.EconomyPercent = economyPercent;
                    victoryConditionProgress.PopulationPercent = populationPercent;
                    if (empire4.PirateEmpireBaseHabitat != null && empire4.Colonies != null)
                    {
                        long num15 = empire4.Colonies.TotalPopulationOwnedColonies(empire4);
                        if (num15 > 0)
                        {
                            double num16 = (double)num15 / 500000000.0;
                            num16 = (victoryConditionProgress.PirateBonusAmount = num16 / 100.0);
                        }
                    }
                    if (empire4.VictoryBonus != 0f)
                    {
                        victoryConditionProgress.BonusAmount += empire4.VictoryBonus;
                    }
                    double num17 = empire4.CalculateVictoryBonusFromStandingWonders(currentStarDate);
                    if (num17 > 0.0)
                    {
                        victoryConditionProgress.StandingWonderBonusAmount = num17;
                        victoryConditionProgress.BonusAmount += num17;
                    }
                    victoryConditionProgressList.Add(victoryConditionProgress);
                }
            }
            return victoryConditionProgressList;
        }

        public RaceVictoryConditionList ResolvePirateVictoryConditions(PiratePlayStyle playStyle)
        {
            RaceVictoryConditionList raceVictoryConditionList = new RaceVictoryConditionList();
            switch (playStyle)
            {
                case PiratePlayStyle.Balanced:
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateControlColoniesPercentage, 10.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateBuildCriminalNetwork, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostProtectionIncome, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.CaptureMostShips, 0.0, 20f));
                    break;
                case PiratePlayStyle.Pirate:
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateEliminateMostPirateFactions, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateControlColoniesPercentage, 10.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostSuccessfulRaids, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateBuildMostHiddenBases, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateBuildHiddenFortress, 0.0, 20f));
                    break;
                case PiratePlayStyle.Mercenary:
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostSuccessfulRaids, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.CaptureMostShips, 0.0, 20f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateBuildCriminalNetwork, 0.0, 20f));
                    break;
                case PiratePlayStyle.Smuggler:
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostSmugglingIncome, 0.0, 40f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateMostProtectionIncome, 0.0, 15f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.MostIntelligenceMissionsSucceed, 0.0, 15f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.ResearchMostAdvanced, 0.0, 15f));
                    raceVictoryConditionList.Add(new RaceVictoryCondition(RaceVictoryConditionType.PirateBuildCriminalNetwork, 0.0, 15f));
                    break;
            }
            return raceVictoryConditionList;
        }

        private Empire CheckGlobalVictoryConditions(Empire playerEmpire, VictoryConditions globalVictoryConditions, out string description, out int code)
        {
            description = string.Empty;
            code = 0;
            if (globalVictoryConditions != null)
            {
                long num = 0L;
                double num2 = 0.0;
                int num3 = 0;
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    num += empire.TotalPopulation;
                    num2 += empire.PrivateAnnualRevenue;
                    num3 += empire.Colonies.Count;
                }
                Empire empire2 = null;
                if (globalVictoryConditions.DefendHabitat != null && globalVictoryConditions.DefendHabitatEmpire != null && (globalVictoryConditions.DefendHabitat.HasBeenDestroyed || globalVictoryConditions.DefendHabitat.Empire != globalVictoryConditions.DefendHabitatEmpire))
                {
                    Empire empire3 = IdentifyShakturiEmpire();
                    if (empire3 != null)
                    {
                        empire2 = empire3;
                    }
                    else if (globalVictoryConditions.DefendHabitat.Empire != null && globalVictoryConditions.DefendHabitat.Empire != IndependentEmpire)
                    {
                        empire2 = globalVictoryConditions.DefendHabitat.Empire;
                        Empire empire4 = IdentifyMechanoidEmpire();
                        if (empire4 != null && globalVictoryConditions.DefendHabitatEmpire == empire4)
                        {
                            empire2.HaveDefeatedAncientGuardians = true;
                        }
                    }
                    code = 1;
                }
                Empire empire5 = null;
                if (globalVictoryConditions.TargetHabitat != null && globalVictoryConditions.TargetHabitatEmpire != null && (globalVictoryConditions.TargetHabitat.HasBeenDestroyed || globalVictoryConditions.TargetHabitat.Empire != globalVictoryConditions.TargetHabitatEmpire))
                {
                    empire5 = playerEmpire;
                    DecimateEmpire(globalVictoryConditions.TargetHabitatEmpire, empire5);
                    GuardiansDepart();
                    ShakturiDefeated = true;
                    empire5.HaveDefeatedShakturi = true;
                    code = 1;
                }
                Empire empire6 = CheckVictoryConditionsWinner(requireReachVictoryThreshold: true);
                Empire empire7 = null;
                if (empire2 != null)
                {
                    empire7 = empire2;
                    string text = empire7.Name;
                    if (empire7 == playerEmpire)
                    {
                        text = TextResolver.GetText("You");
                    }
                    if (globalVictoryConditions.DefendHabitat.HasBeenDestroyed)
                    {
                        description += string.Format(TextResolver.GetText("Victory Conditions Colony Destroy"), text, ResolveDescription(globalVictoryConditions.DefendHabitat.Category).ToLower(CultureInfo.InvariantCulture), globalVictoryConditions.DefendHabitat.Name);
                    }
                    else if (globalVictoryConditions.DefendHabitat.Empire == empire2)
                    {
                        description += string.Format(TextResolver.GetText("Victory Conditions Colony Invade"), text, ResolveDescription(globalVictoryConditions.DefendHabitat.Category).ToLower(CultureInfo.InvariantCulture), globalVictoryConditions.DefendHabitat.Name);
                    }
                    else
                    {
                        description += string.Format(TextResolver.GetText("Victory Conditions Colony Cause Loss"), text, ResolveDescription(globalVictoryConditions.DefendHabitat.Category).ToLower(CultureInfo.InvariantCulture), globalVictoryConditions.DefendHabitat.Name, globalVictoryConditions.DefendHabitatEmpire.Name);
                    }
                }
                if (empire5 != null)
                {
                    empire7 = empire5;
                    string text2 = empire7.Name;
                    if (empire7 == playerEmpire)
                    {
                        text2 = TextResolver.GetText("You");
                    }
                    if (globalVictoryConditions.TargetHabitat.HasBeenDestroyed)
                    {
                        description += string.Format(TextResolver.GetText("Victory Conditions Colony Destroy"), text2, ResolveDescription(globalVictoryConditions.TargetHabitat.Category).ToLower(CultureInfo.InvariantCulture), globalVictoryConditions.TargetHabitat.Name);
                    }
                    else if (globalVictoryConditions.TargetHabitat.Empire == empire2)
                    {
                        description += string.Format(TextResolver.GetText("Victory Conditions Colony Invade"), text2, ResolveDescription(globalVictoryConditions.TargetHabitat.Category).ToLower(CultureInfo.InvariantCulture), globalVictoryConditions.TargetHabitat.Name);
                    }
                    else
                    {
                        description += string.Format(TextResolver.GetText("Victory Conditions Colony Cause Loss"), text2, ResolveDescription(globalVictoryConditions.TargetHabitat.Category).ToLower(CultureInfo.InvariantCulture), globalVictoryConditions.TargetHabitat.Name, globalVictoryConditions.TargetHabitatEmpire.Name);
                    }
                }
                if (empire7 == null && empire6 != null)
                {
                    empire7 = empire6;
                    if (empire7 == playerEmpire)
                    {
                        description += TextResolver.GetText("Victory Conditions Threshold Win");
                    }
                    else
                    {
                        description += string.Format(TextResolver.GetText("Victory Conditions Threshold Lose"), empire7.Name);
                    }
                }
                return empire7;
            }
            return null;
        }

        private bool CheckEmpireVictoryConditionsToPrevent(EmpireVictoryConditions empireVictoryConditions, Empire playerEmpire)
        {
            if (empireVictoryConditions != null)
            {
                bool flag = true;
                if (empireVictoryConditions.CaptureColonies.Count > 0)
                {
                    foreach (Habitat captureColony in empireVictoryConditions.CaptureColonies)
                    {
                        if (captureColony.Owner == playerEmpire)
                        {
                            flag = false;
                        }
                    }
                }
                bool flag2 = true;
                if (empireVictoryConditions.EliminateEmpires.Count > 0)
                {
                    foreach (Empire eliminateEmpire in empireVictoryConditions.EliminateEmpires)
                    {
                        if (eliminateEmpire.Active)
                        {
                            flag2 = false;
                        }
                    }
                }
                bool flag3 = true;
                if (empireVictoryConditions.DestroyBuiltObjects.Count > 0)
                {
                    foreach (BuiltObject destroyBuiltObject in empireVictoryConditions.DestroyBuiltObjects)
                    {
                        if (BuiltObjects.Contains(destroyBuiltObject))
                        {
                            flag3 = false;
                        }
                    }
                }
                if (flag && flag2 && flag3 && (empireVictoryConditions.CaptureColonies.Count > 0 || empireVictoryConditions.EliminateEmpires.Count > 0 || empireVictoryConditions.DestroyBuiltObjects.Count > 0))
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckEmpireVictoryConditionsToAchieve(EmpireVictoryConditions empireVictoryConditions, Empire playerEmpire)
        {
            if (empireVictoryConditions != null)
            {
                bool flag = true;
                if (empireVictoryConditions.CaptureColonies.Count > 0)
                {
                    foreach (Habitat captureColony in empireVictoryConditions.CaptureColonies)
                    {
                        if (captureColony.Owner != playerEmpire)
                        {
                            flag = false;
                        }
                    }
                }
                bool flag2 = true;
                if (empireVictoryConditions.EliminateEmpires.Count > 0)
                {
                    foreach (Empire eliminateEmpire in empireVictoryConditions.EliminateEmpires)
                    {
                        if (eliminateEmpire.Active)
                        {
                            flag2 = false;
                        }
                    }
                }
                bool flag3 = true;
                if (empireVictoryConditions.DestroyBuiltObjects.Count > 0)
                {
                    foreach (BuiltObject destroyBuiltObject in empireVictoryConditions.DestroyBuiltObjects)
                    {
                        if (BuiltObjects.Contains(destroyBuiltObject))
                        {
                            flag3 = false;
                        }
                    }
                }
                if (flag && flag2 && flag3 && (empireVictoryConditions.CaptureColonies.Count > 0 || empireVictoryConditions.EliminateEmpires.Count > 0 || empireVictoryConditions.DestroyBuiltObjects.Count > 0))
                {
                    return true;
                }
            }
            return false;
        }

        private Empire CheckVictoryTerritory(VictoryConditions victoryConditions, int totalTerritory)
        {
            if (victoryConditions.Territory)
            {
                EmpireList empireList = new EmpireList();
                int num = (int)(0.99 + (double)totalTerritory * (victoryConditions.TerritoryPercent / 100.0));
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire.Colonies.Count >= num && empire.DominantRace != null && empire.DominantRace.Playable)
                    {
                        empireList.Add(empire);
                    }
                }
                if (empireList.Count > 0)
                {
                    Empire result = null;
                    int num2 = 0;
                    {
                        foreach (Empire item in empireList)
                        {
                            if (item.Colonies.Count > num2)
                            {
                                result = item;
                                num2 = item.Colonies.Count;
                            }
                        }
                        return result;
                    }
                }
            }
            return null;
        }

        private Empire CheckVictoryEconomy(VictoryConditions victoryConditions, double totalEconomy)
        {
            if (victoryConditions.Economy)
            {
                EmpireList empireList = new EmpireList();
                double num = totalEconomy * (victoryConditions.EconomyPercent / 100.0);
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire.PrivateAnnualRevenue >= num && empire.DominantRace != null && empire.DominantRace.Playable)
                    {
                        empireList.Add(empire);
                    }
                }
                if (empireList.Count > 0)
                {
                    Empire result = null;
                    double num2 = 0.0;
                    {
                        foreach (Empire item in empireList)
                        {
                            if (item.PrivateAnnualRevenue > num2)
                            {
                                result = item;
                                num2 = item.PrivateAnnualRevenue;
                            }
                        }
                        return result;
                    }
                }
            }
            return null;
        }

        private Empire CheckVictoryPopulation(VictoryConditions victoryConditions, long totalPopulation)
        {
            if (victoryConditions.Population)
            {
                EmpireList empireList = new EmpireList();
                long num = (long)((double)totalPopulation * (victoryConditions.PopulationPercent / 100.0));
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire.TotalPopulation >= num && empire.DominantRace != null && empire.DominantRace.Playable)
                    {
                        empireList.Add(empire);
                    }
                }
                if (empireList.Count > 0)
                {
                    Empire result = null;
                    long num2 = 0L;
                    {
                        foreach (Empire item in empireList)
                        {
                            if (item.TotalPopulation > num2)
                            {
                                result = item;
                                num2 = item.TotalPopulation;
                            }
                        }
                        return result;
                    }
                }
            }
            return null;
        }

        public void GuardiansDepart()
        {
            Empire empire = null;
            Race race = null;
            for (int i = 0; i < Races.Count; i++)
            {
                if (Races[i].Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
                {
                    race = Races[i];
                    break;
                }
            }
            for (int j = 0; j < Empires.Count; j++)
            {
                if (Empires[j].DominantRace != null && Empires[j].DominantRace == race)
                {
                    empire = Empires[j];
                    break;
                }
            }
            if (empire != null)
            {
                GovernmentAttributes firstByAvailability = Governments.GetFirstByAvailability(2);
                if (firstByAvailability != null && !PlayerEmpire.AllowableGovernmentTypes.Contains(firstByAvailability.GovernmentId))
                {
                    PlayerEmpire.AllowableGovernmentTypes.Add(firstByAvailability.GovernmentId);
                }
                if (empire.Research != null && empire.Research.TechTree != null)
                {
                    for (int k = 0; k < empire.Research.TechTree.Count; k++)
                    {
                        if (empire.Research.TechTree[k].IsResearched)
                        {
                            ResearchNode researchNode = PlayerEmpire.Research.TechTree.FindNodeById(empire.Research.TechTree[k].ResearchNodeId);
                            if (researchNode != null && !researchNode.IsResearched)
                            {
                                PlayerEmpire.DoResearchBreakthrough(researchNode, selfResearched: true, blockMessages: true, suppressUpdate: true);
                            }
                        }
                    }
                    PlayerEmpire.Research.Update(PlayerEmpire.DominantRace);
                    PlayerEmpire.ReviewDesignsBuiltObjectsImprovedComponents();
                    PlayerEmpire.ReviewResearchAbilities();
                }
                MergeGalaxyMap(empire, PlayerEmpire);
                HabitatList habitatList = new HabitatList();
                habitatList.AddRange(empire.Colonies);
                for (int l = 0; l < habitatList.Count; l++)
                {
                    Habitat habitat = habitatList[l];
                    habitat.Population.Add(new Population(PlayerEmpire.DominantRace, 500000000L));
                    PopulationList populationList = new PopulationList();
                    if (habitat.Population != null && habitat.Population.Count > 0)
                    {
                        for (int m = 0; m < habitat.Population.Count; m++)
                        {
                            if (habitat.Population[m].Race == race)
                            {
                                populationList.Add(habitat.Population[m]);
                            }
                        }
                        for (int n = 0; n < populationList.Count; n++)
                        {
                            habitat.Population.Remove(populationList[n]);
                        }
                    }
                    PlayerEmpire.TakeOwnershipOfColony(habitat, PlayerEmpire, destroyAllBuiltObjectsAndTroopsAtColony: false);
                }
                if (empire.Active)
                {
                    empire.CompleteTeardown(PlayerEmpire, removeFromGalaxy: true, sendMessages: false);
                }
            }
            for (int num = 0; num < Empires.Count; num++)
            {
                Empire empire2 = Empires[num];
                if (empire2 == null || !empire2.Active || empire2.DiplomaticRelations == null)
                {
                    continue;
                }
                for (int num2 = 0; num2 < empire2.DiplomaticRelations.Count; num2++)
                {
                    DiplomaticRelation diplomaticRelation = empire2.DiplomaticRelations[num2];
                    if (diplomaticRelation != null)
                    {
                        diplomaticRelation.Locked = false;
                    }
                }
            }
        }

        public void WipeoutEmpireMakeColoniesIndependent(Empire empire)
        {
            if (empire != null)
            {
                HabitatList habitatList = new HabitatList();
                habitatList.AddRange(empire.Colonies);
                for (int i = 0; i < habitatList.Count; i++)
                {
                    Habitat colony = habitatList[i];
                    IndependentEmpire.TakeOwnershipOfColony(colony, IndependentEmpire, destroyAllBuiltObjectsAndTroopsAtColony: true);
                }
                empire.CompleteTeardown(null, removeFromGalaxy: true, sendMessages: false);
            }
        }

        public void DecimateEmpire(Empire empire, Empire decimatingEmpire)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(empire.PrivateBuiltObjects);
            builtObjectList.AddRange(empire.BuiltObjects);
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                int num = Rnd.Next(0, 100);
                if (num > 20)
                {
                    builtObjectList[i].CompleteTeardown(this);
                }
                else if (num > 5)
                {
                    DamageBuiltObjectComponents(builtObjectList[i], Rnd.NextDouble());
                }
            }
            HabitatList habitatList = new HabitatList();
            habitatList.AddRange(empire.Colonies);
            for (int j = 0; j < habitatList.Count; j++)
            {
                int num2 = Rnd.Next(0, 10);
                if (num2 > 3 && empire.Colonies.Count > 2)
                {
                    habitatList[j].ClearColony(decimatingEmpire);
                }
                else if (num2 > 0)
                {
                    empire.TakeOwnershipOfColony(habitatList[j], IndependentEmpire, destroyAllBuiltObjectsAndTroopsAtColony: true);
                }
            }
        }

        public void ReviewIndependentColonies()
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < Habitats.Count; i++)
            {
                if (Habitats[i].Population.Count > 0 && Habitats[i].Empire == IndependentEmpire)
                {
                    habitatList.Add(Habitats[i]);
                }
            }
            IndependentColonies = habitatList;
        }

        public void UpdateSystemInfo(Empire playerEmpire)
        {
            Design latestColonyDesign = null;
            List<HabitatType> colonizableHabitatTypes = new List<HabitatType>();
            if (playerEmpire != null)
            {
                latestColonyDesign = playerEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
                colonizableHabitatTypes = playerEmpire.ColonizableHabitatTypesForEmpire(playerEmpire);
            }
            for (int i = 0; i < Systems.Count; i++)
            {
                SystemInfo other = DetermineSystemInfo(Systems[i], playerEmpire, colonizableHabitatTypes, latestColonyDesign);
                Systems[i].CopyFromOther(other);
                GalaxyIndex galaxyIndex = ResolveIndex(Systems[i].SystemStar.Xpos, Systems[i].SystemStar.Ypos);
                if (!SystemsIndex[galaxyIndex.X][galaxyIndex.Y].Contains(Systems[i]))
                {
                    SystemsIndex[galaxyIndex.X][galaxyIndex.Y].Add(Systems[i]);
                }
            }
        }

        public SystemInfo DetermineSystemInfo(SystemInfo system, Empire playerEmpire)
        {
            Design latestColonyDesign = null;
            List<HabitatType> colonizableHabitatTypes = new List<HabitatType>();
            if (playerEmpire != null)
            {
                latestColonyDesign = playerEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
                colonizableHabitatTypes = playerEmpire.ColonizableHabitatTypesForEmpire(playerEmpire);
            }
            return DetermineSystemInfo(system, playerEmpire, colonizableHabitatTypes, latestColonyDesign);
        }

        public SystemInfo DetermineSystemInfo(SystemInfo system, Empire playerEmpire, List<HabitatType> colonizableHabitatTypes, Design latestColonyDesign)
        {
            EmpireList empireList = new EmpireList();
            List<int> list = new List<int>();
            List<int> list2 = new List<int>();
            List<long> list3 = new List<long>();
            int num = 0;
            int num2 = 0;
            int num3 = 0;
            int num4 = 0;
            short plagueId = -1;
            bool flag = false;
            bool hasRuins = false;
            bool hasScenery = false;
            bool hasResearchBonus = false;
            if (system.SystemStar.ScenicFactor > 0f)
            {
                hasScenery = true;
            }
            if (system.SystemStar.ResearchBonus > 0)
            {
                hasResearchBonus = true;
            }
            for (int i = 0; i < system.Habitats.Count; i++)
            {
                if (system.Habitats[i].Category == HabitatCategoryType.Asteroid)
                {
                    continue;
                }
                Habitat habitat = system.Habitats[i];
                if (habitat.Ruin != null)
                {
                    hasRuins = true;
                }
                if (habitat.ScenicFactor > 0f)
                {
                    hasScenery = true;
                }
                if (habitat.ResearchBonus > 0)
                {
                    hasResearchBonus = true;
                }
                if (habitat.Category == HabitatCategoryType.Planet)
                {
                    num++;
                }
                else if (habitat.Category == HabitatCategoryType.Moon)
                {
                    num2++;
                }
                if (habitat.IsBlockaded)
                {
                    num3++;
                }
                if (habitat.PlagueId >= 0)
                {
                    plagueId = habitat.PlagueId;
                }
                if (habitat.Empire == IndependentEmpire)
                {
                    num4++;
                }
                else if (playerEmpire != null && !flag && playerEmpire.CanEmpireColonizeHabitat(playerEmpire, habitat, colonizableHabitatTypes, latestColonyDesign) && (habitat.Quality >= 0.5f || (habitat.Resources != null && habitat.Resources.HasSuperLuxuryResources()) || (habitat.Ruin != null && (habitat.Ruin.BonusDefensive > 0.0 || habitat.Ruin.BonusDiplomacy > 0.0 || habitat.Ruin.BonusHappiness > 0.0 || habitat.Ruin.BonusResearchEnergy > 0.0 || habitat.Ruin.BonusResearchHighTech > 0.0 || habitat.Ruin.BonusResearchWeapons > 0.0 || habitat.Ruin.BonusWealth > 0.0))))
                {
                    flag = true;
                }
                if (habitat.Empire != null && habitat.Empire != IndependentEmpire)
                {
                    int num5 = empireList.IndexOf(habitat.Empire);
                    if (num5 < 0)
                    {
                        empireList.Add(habitat.Empire);
                        list.Add(0);
                        list2.Add(0);
                        list3.Add(0L);
                        num5 = empireList.Count - 1;
                    }
                    list[num5] += habitat.StrategicValue;
                    list3[num5] += habitat.Population.TotalAmount;
                    list2[num5]++;
                }
            }
            Empire empire = null;
            int num6 = 0;
            long num7 = 0L;
            int colonyCount = 0;
            for (int j = 0; j < empireList.Count; j++)
            {
                if (list[j] > num6)
                {
                    empire = empireList[j];
                    num6 = list[j];
                    num7 = list3[j];
                    colonyCount = list2[j];
                }
                else if (list[j] == num6 && list3[j] > num7)
                {
                    empire = empireList[j];
                    num6 = list[j];
                    num7 = list3[j];
                    colonyCount = list2[j];
                }
            }
            EmpireSystemSummary empireSystemSummary = null;
            EmpireSystemSummaryList empireSystemSummaryList = null;
            new BuiltObjectList();
            if (empire != null)
            {
                empireSystemSummary = new EmpireSystemSummary();
                empireSystemSummary.Empire = empire;
                empireSystemSummary.ColonyCount = colonyCount;
                empireSystemSummary.TotalStrategicValue = num6;
                for (int k = 0; k < empireList.Count; k++)
                {
                    Empire empire2 = empireList[k];
                    if (empire2 != empire)
                    {
                        if (empireSystemSummaryList == null)
                        {
                            empireSystemSummaryList = new EmpireSystemSummaryList();
                        }
                        EmpireSystemSummary empireSystemSummary2 = new EmpireSystemSummary();
                        empireSystemSummary2.Empire = empire2;
                        empireSystemSummary2.ColonyCount = list2[k];
                        empireSystemSummary2.TotalStrategicValue = list[k];
                        empireSystemSummaryList.Add(empireSystemSummary2);
                    }
                }
            }
            system.PlanetCount = num;
            system.MoonCount = num2;
            system.BlockadeCount = num3;
            system.PlagueId = plagueId;
            system.IndependentColonyCount = num4;
            system.HasRuins = hasRuins;
            system.HasScenery = hasScenery;
            system.HasResearchBonus = hasResearchBonus;
            if (playerEmpire != null)
            {
                system.PlayerPotentialColonies = flag;
            }
            system.DominantEmpire = empireSystemSummary;
            system.OtherEmpires = empireSystemSummaryList;
            if (empireList.Count > 1)
            {
                system.IsDisputed = true;
            }
            else
            {
                system.IsDisputed = false;
            }
            return system;
        }

        public void ReviewComponentPrices()
        {
            ComponentDefinition[] componentDefinitionsStatic = ComponentDefinitionsStatic;
            foreach (ComponentDefinition componentDefinition in componentDefinitionsStatic)
            {
                double num = 0.0;
                for (int j = 0; j < componentDefinition.RequiredResources.Count; j++)
                {
                    ComponentResource componentResource = componentDefinition.RequiredResources[j];
                    double num2 = ResourceCurrentPrices[componentResource.ResourceID];
                    num += num2 * (double)componentResource.Quantity;
                }
                if (componentDefinition.ComponentID >= ComponentCurrentPrices.Count)
                {
                    ComponentCurrentPrices.Add(0.0);
                }
                ComponentCurrentPrices[componentDefinition.ComponentID] = num * 2.0;
            }
        }

        private void RemoveCompletedOrders()
        {
            OrderList orderList = new OrderList();
            for (int i = 0; i < Orders.Count; i++)
            {
                Order order = Orders[i];
                int num = order.AmountRequested - order.AmountDelivered;
                if (num <= 0)
                {
                    orderList.Add(order);
                }
            }
            lock (Orders._LockObject)
            {
                foreach (Order item in orderList)
                {
                    Orders.Remove(item);
                }
            }
        }

        public long CalculateOrderPlacementDate(Order order)
        {
            long timeSinceOrderPlacement = 0L;
            return CalculateOrderPlacementDate(order, out timeSinceOrderPlacement);
        }

        public long CalculateOrderPlacementDate(Order order, out long timeSinceOrderPlacement)
        {
            long num = long.MaxValue;
            int num2 = (int)(OrderExpiryYearsLuxury * (double)RealSecondsInGalacticYear * 1000.0);
            int num3 = (int)(1000.0 * (double)RealSecondsInGalacticYear * 1000.0);
            long currentStarDate = CurrentStarDate;
            long num4 = order.ExpiryDate - currentStarDate;
            num = ((num4 <= num2) ? (order.ExpiryDate - num2) : (order.ExpiryDate - num3));
            timeSinceOrderPlacement = currentStarDate - num;
            return num;
        }

        public bool CancelContract(Contract contract)
        {
            if (contract != null)
            {
                if (contract.Supplier != null)
                {
                    int num = contract.AmountToFulfill - contract.AmountPickedUp;
                    if (num > 0)
                    {
                        CargoList cargo = contract.Supplier.Cargo;
                        Empire empireById = GetEmpireById(contract.BuyerEmpireId);
                        if (empireById != null && cargo != null)
                        {
                            Cargo cargo2 = null;
                            if (contract.ResourceId >= 0)
                            {
                                cargo2 = cargo.GetCargo(new Resource((byte)contract.ResourceId), empireById);
                            }
                            else if (contract.ComponentId >= 0)
                            {
                                cargo2 = cargo.GetCargo(new Component(contract.ComponentId), empireById);
                            }
                            if (cargo2 != null)
                            {
                                cargo2.Reserved -= num;
                                cargo2.Reserved = Math.Max(0, cargo2.Reserved);
                                if (cargo2.Amount <= 0 && cargo2.Reserved <= 0)
                                {
                                    cargo.Remove(cargo2);
                                }
                            }
                        }
                    }
                }
                contract.AmountToFulfill = contract.AmountDelivered;
                return true;
            }
            return false;
        }

        private void CancelExpiredOrders()
        {
            long currentStarDate = CurrentStarDate;
            OrderList orderList = new OrderList();
            for (int i = 0; i < Orders.Count; i++)
            {
                Order order = Orders[i];
                if (currentStarDate <= order.ExpiryDate || order.AmountStillToArrive > 0)
                {
                    continue;
                }
                orderList.Add(order);
                if (order.Contracts == null || order.Contracts.Count <= 0)
                {
                    continue;
                }
                for (int j = 0; j < order.Contracts.Count; j++)
                {
                    Contract contract = order.Contracts[j];
                    if (contract != null)
                    {
                        CancelContract(contract);
                    }
                }
            }
            lock (Orders._LockObject)
            {
                foreach (Order item in orderList)
                {
                    Orders.Remove(item);
                }
            }
        }

        public double CalculateResourceDemand(byte resourceId, out double inTransitAmount)
        {
            double num = 0.0;
            inTransitAmount = 0.0;
            for (int i = 0; i < Orders.Count; i++)
            {
                Order order = Orders[i];
                if (order.CommodityResource != null && order.CommodityResource.ResourceID == resourceId)
                {
                    if (order.AmountOutstandingToContract > 0)
                    {
                        num += (double)order.AmountOutstandingToContract;
                    }
                    if (order.AmountStillToArrive > 0)
                    {
                        inTransitAmount += order.AmountStillToArrive;
                    }
                }
            }
            return num;
        }

        public double CalculateResourceDemandForEmpire(Empire empire, byte resourceId, out double inTransitAmount)
        {
            double num = 0.0;
            inTransitAmount = 0.0;
            for (int i = 0; i < Orders.Count; i++)
            {
                Order order = Orders[i];
                if (order.CommodityResource != null && order.CommodityResource.ResourceID == resourceId && ((order.RequestingBuiltObject != null && order.RequestingBuiltObject.ActualEmpire == empire) || (order.RequestingColony != null && order.RequestingColony.Empire == empire)))
                {
                    if (order.AmountOutstandingToContract > 0)
                    {
                        num += (double)order.AmountOutstandingToContract;
                    }
                    if (order.AmountStillToArrive > 0)
                    {
                        inTransitAmount += order.AmountStillToArrive;
                    }
                }
            }
            return num;
        }

        public void ReviewResourcePrices()
        {
            int[] array = new int[ResourceSystem.Resources.Count];
            for (int i = 0; i < Orders.Count; i++)
            {
                Order order = Orders[i];
                if (order.CommodityResource != null && order.AmountOutstandingToContract > 0)
                {
                    Resource commodityResource = order.CommodityResource;
                    array[commodityResource.ResourceID] += order.AmountOutstandingToContract;
                }
            }
            int[] array2 = new int[ResourceSystem.Resources.Count];
            EmpireList empireList = new EmpireList();
            empireList.AddRange(Empires);
            empireList.AddRange(PirateEmpires);
            for (int j = 0; j < empireList.Count; j++)
            {
                Empire empire = empireList[j];
                if (empire == null || !empire.Active)
                {
                    continue;
                }
                for (int k = 0; k < empire.Colonies.Count; k++)
                {
                    Habitat habitat = empire.Colonies[k];
                    if (habitat == null || habitat.Empire != empire || habitat.Cargo == null)
                    {
                        continue;
                    }
                    for (int l = 0; l < habitat.Cargo.Count; l++)
                    {
                        Cargo cargo = habitat.Cargo[l];
                        if (cargo != null && cargo.CommodityResource != null && cargo.Available > 0)
                        {
                            Resource commodityResource2 = cargo.CommodityResource;
                            array2[commodityResource2.ResourceID] += cargo.Available;
                        }
                    }
                }
                for (int m = 0; m < empire.SpacePorts.Count; m++)
                {
                    BuiltObject builtObject = empire.SpacePorts[m];
                    if (builtObject == null || (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == empire) || builtObject.Cargo == null)
                    {
                        continue;
                    }
                    for (int n = 0; n < builtObject.Cargo.Count; n++)
                    {
                        Cargo cargo2 = builtObject.Cargo[n];
                        if (cargo2 != null && cargo2.CommodityResource != null && cargo2.Available > 0)
                        {
                            Resource commodityResource3 = cargo2.CommodityResource;
                            array2[commodityResource3.ResourceID] += cargo2.Available;
                        }
                    }
                }
                for (int num = 0; num < empire.MiningStations.Count; num++)
                {
                    BuiltObject builtObject2 = empire.MiningStations[num];
                    if (builtObject2 == null || builtObject2.Cargo == null)
                    {
                        continue;
                    }
                    for (int num2 = 0; num2 < builtObject2.Cargo.Count; num2++)
                    {
                        Cargo cargo3 = builtObject2.Cargo[num2];
                        if (cargo3 != null && cargo3.CommodityResource != null && cargo3.Available > 0)
                        {
                            Resource commodityResource4 = cargo3.CommodityResource;
                            array2[commodityResource4.ResourceID] += cargo3.Available;
                        }
                    }
                }
            }
            for (int num3 = 0; num3 < ResourceSystem.Resources.Count; num3++)
            {
                ResourceDefinition resourceDefinition = ResourceSystem.Resources[num3];
                double num4 = (double)array[num3] / Math.Max(1.0, array2[num3]);
                double num5 = (double)resourceDefinition.BasePrice * num4;
                double num6 = num5 - ResourceCurrentPrices[num3];
                num6 = ((!(num6 > 0.0)) ? (num6 / 2.0) : (num6 / 4.0));
                if (num6 > ResourceCurrentPrices[num3] / 2.0)
                {
                    num6 = ResourceCurrentPrices[num3] / 2.0;
                }
                double num7 = ResourceCurrentPrices[num3];
                num7 += num6;
                double val = (double)resourceDefinition.BasePrice * 0.1667;
                double val2 = (double)resourceDefinition.BasePrice * 0.35;
                if (resourceDefinition.SuperLuxuryBonusAmount > 0)
                {
                    val = (double)resourceDefinition.BasePrice / 2.0;
                    val2 = (double)resourceDefinition.BasePrice * 3.0;
                }
                num7 = Math.Max(val, num7);
                num7 = Math.Min(val2, num7);
                if (double.IsNaN(num7))
                {
                    num7 = resourceDefinition.BasePrice;
                }
                ResourceCurrentPrices[num3] = num7;
            }
        }

        private int DeviationFromNormal(int value)
        {
            return Math.Abs(value - 100);
        }

        public string GenerateIndependentColonyReport(Empire potentialColonizer, Habitat colony, Race race)
        {
            Habitat habitat = DetermineHabitatSystemStar(colony);
            string text = string.Format(TextResolver.GetText("Independent Colony Report Intro"), race.Name, ResolveDescription(colony.Type).ToLower(CultureInfo.InvariantCulture), ResolveDescription(colony.Category).ToLower(CultureInfo.InvariantCulture), colony.Name, habitat.Name);
            text += ".\n\n";
            if (potentialColonizer.DominantRace != race)
            {
                text += GenerateRaceReport(race);
                text += "\n\n";
            }
            if (potentialColonizer == PlayerEmpire)
            {
                string text2 = GenerateIndependentColonyStoryClue(colony);
                if (!string.IsNullOrEmpty(text2))
                {
                    text += "*** ";
                    text += string.Format(TextResolver.GetText("Independent Colony Legend Intro"), race.Name);
                    text += text2;
                    text += " ***\n\n";
                }
            }
            _ = string.Empty;
            int num = CheckColonizationLikeliness(colony, potentialColonizer.DominantRace);
            if (num <= -20)
            {
                return text + string.Format(TextResolver.GetText("Independent Colony Colonization Hostile"), ResolveDescription(colony.Category));
            }
            if (num <= 0)
            {
                return text + string.Format(TextResolver.GetText("Independent Colony Colonization Unlikely"), ResolveDescription(colony.Category));
            }
            return text + string.Format(TextResolver.GetText("Independent Colony Colonization Good"), ResolveDescription(colony.Category));
        }

        public string ResolveColonizationLikelinessDescription(Habitat potentialColony, Empire colonizingEmpire)
        {
            string empty = string.Empty;
            int num = CheckColonizationLikeliness(potentialColony, colonizingEmpire.DominantRace);
            if (num <= -20)
            {
                return TextResolver.GetText("Most unlikely");
            }
            if (num <= -5)
            {
                return TextResolver.GetText("Unlikely");
            }
            if (num <= 5)
            {
                return TextResolver.GetText("Possible");
            }
            return TextResolver.GetText("Likely");
        }

        public int CheckColonizationLikeliness(Habitat potentialColony, Race colonizingRace)
        {
            int num = colonizingRace.FriendlinessLevel - colonizingRace.AggressionLevel;
            int num2 = 100;
            if (potentialColony.Empire == IndependentEmpire && potentialColony.Population != null && potentialColony.Population.DominantRace != null)
            {
                Race dominantRace = potentialColony.Population.DominantRace;
                num2 = dominantRace.FriendlinessLevel - dominantRace.AggressionLevel;
                if (dominantRace == colonizingRace)
                {
                    num2 += 35;
                    num2 = Math.Max(5, num2);
                    num += 25;
                    num = Math.Max(5, num);
                }
                else if (dominantRace.FamilyId == colonizingRace.FamilyId)
                {
                    num2 += 20;
                    num += 15;
                }
            }
            return num + num2;
        }

        public string GenerateRaceReport(Race race)
        {
            string empty = string.Empty;
            int num = 0;
            string text = string.Empty;
            if (DeviationFromNormal(race.AggressionLevel) > num)
            {
                num = DeviationFromNormal(race.AggressionLevel);
                text = ((race.AggressionLevel <= 100) ? TextResolver.GetText("Passive") : TextResolver.GetText("Aggressive"));
            }
            if (DeviationFromNormal(race.CautionLevel) > num)
            {
                num = DeviationFromNormal(race.CautionLevel);
                text = ((race.CautionLevel < 100) ? TextResolver.GetText("Reckless") : TextResolver.GetText("Cautious"));
            }
            if (DeviationFromNormal(race.FriendlinessLevel) > num)
            {
                num = DeviationFromNormal(race.FriendlinessLevel);
                text = ((race.FriendlinessLevel < 100) ? TextResolver.GetText("Unfriendly") : TextResolver.GetText("Friendly"));
            }
            if (DeviationFromNormal(race.IntelligenceLevel) > num)
            {
                num = DeviationFromNormal(race.IntelligenceLevel);
                text = ((race.IntelligenceLevel < 100) ? TextResolver.GetText("Stupid") : TextResolver.GetText("Intelligent"));
            }
            if (DeviationFromNormal(race.LoyaltyLevel) > num)
            {
                num = DeviationFromNormal(race.LoyaltyLevel);
                text = ((race.LoyaltyLevel < 100) ? TextResolver.GetText("Unreliable") : TextResolver.GetText("Dependable"));
            }
            string empty2 = string.Empty;
            empty2 = ((num > 30) ? TextResolver.GetText("Extremely") : ((num > 20) ? TextResolver.GetText("Very") : ((num <= 10) ? TextResolver.GetText("Slightly") : TextResolver.GetText("Quite"))));
            string empty3 = string.Empty;
            empty3 = ((race.IntelligenceLevel > 120) ? TextResolver.GetText("a highly advanced") : ((race.IntelligenceLevel > 109) ? TextResolver.GetText("an advanced") : ((race.IntelligenceLevel > 100) ? TextResolver.GetText("an average") : ((race.IntelligenceLevel <= 85) ? TextResolver.GetText("a primitive") : TextResolver.GetText("a slightly backward")))));
            empty = (string.IsNullOrEmpty(text) ? (empty + string.Format(TextResolver.GetText("Race Report RACE ADVANCEMENT RACEFAMILY"), race.Name, empty3, ResolveRaceFamilyDescription(race.FamilyId))) : (empty + string.Format(TextResolver.GetText("Race Report RACE ADVANCEMENT RACEFAMILY INTENSITY QUALITY"), race.Name, empty3, ResolveRaceFamilyDescription(race.FamilyId), empty2.ToLower(CultureInfo.InvariantCulture), text.ToLower(CultureInfo.InvariantCulture))));
            empty += ". ";
            string text2 = string.Empty;
            if (race.EspionageBonus > 0)
            {
                text2 = (string.IsNullOrEmpty(text2) ? (text2 + string.Format(TextResolver.GetText("Race Bonus ABILITY"), TextResolver.GetText("cunning spies"))) : (text2 + string.Format(TextResolver.GetText("Race Bonus Extra ABILITY"), TextResolver.GetText("cunning spies"))));
                text2 += ". ";
            }
            if (race.ResearchBonus > 0)
            {
                text2 = (string.IsNullOrEmpty(text2) ? (text2 + string.Format(TextResolver.GetText("Race Bonus ABILITY"), TextResolver.GetText("gifted scientists"))) : (text2 + string.Format(TextResolver.GetText("Race Bonus Extra ABILITY"), TextResolver.GetText("gifted scientists"))));
                text2 += ". ";
            }
            if (race.ResourceExtractionBonus > 0)
            {
                text2 = (string.IsNullOrEmpty(text2) ? (text2 + string.Format(TextResolver.GetText("Race Bonus ABILITY"), TextResolver.GetText("industrious miners"))) : (text2 + string.Format(TextResolver.GetText("Race Bonus Extra ABILITY"), TextResolver.GetText("industrious miners"))));
                text2 += ". ";
            }
            if (race.SatisfactionModifier > 0)
            {
                text2 = (string.IsNullOrEmpty(text2) ? (text2 + string.Format(TextResolver.GetText("Race Bonus ABILITY"), TextResolver.GetText("natural optimists"))) : (text2 + string.Format(TextResolver.GetText("Race Bonus Extra ABILITY"), TextResolver.GetText("natural optimists"))));
                text2 += ". ";
            }
            if (race.ShipMaintenanceSavings > 0)
            {
                text2 = (string.IsNullOrEmpty(text2) ? (text2 + string.Format(TextResolver.GetText("Race Bonus ABILITY"), TextResolver.GetText("master starship engineers"))) : (text2 + string.Format(TextResolver.GetText("Race Bonus Extra ABILITY"), TextResolver.GetText("master starship engineers"))));
                text2 += ". ";
            }
            if (race.TroopMaintenanceSavings > 0)
            {
                text2 = (string.IsNullOrEmpty(text2) ? (text2 + string.Format(TextResolver.GetText("Race Bonus ABILITY"), TextResolver.GetText("superb ground troops"))) : (text2 + string.Format(TextResolver.GetText("Race Bonus Extra ABILITY"), TextResolver.GetText("superb ground troops"))));
                text2 += ". ";
            }
            if (race.WarWearinessAttenuation > 0)
            {
                text2 = (string.IsNullOrEmpty(text2) ? (text2 + string.Format(TextResolver.GetText("Race Bonus ABILITY"), TextResolver.GetText("tenacious fighters"))) : (text2 + string.Format(TextResolver.GetText("Race Bonus Extra ABILITY"), TextResolver.GetText("tenacious fighters"))));
                text2 += ". ";
            }
            return empty + text2;
        }

        public static string SplitString(string input)
        {
            string[] array = Regex.Split(input, "([A-Z])");
            string text = string.Empty;
            int num;
            for (num = 1; num < array.Length; num++)
            {
                text += array[num];
                num++;
                text += array[num];
                text += " ";
            }
            return text.Trim();
        }

        public static bool CheckCharacterTraitAppliesOnlyToExistingSkills(CharacterTraitType trait)
        {
            switch (trait)
            {
                case CharacterTraitType.Lazy:
                case CharacterTraitType.Energetic:
                case CharacterTraitType.GoodTactician:
                case CharacterTraitType.PoorTactician:
                case CharacterTraitType.Drunk:
                case CharacterTraitType.ToughDiscipline:
                case CharacterTraitType.LaxDiscipline:
                case CharacterTraitType.IntelligenceAddict:
                case CharacterTraitType.IntelligenceSober:
                    return true;
                default:
                    return false;
            }
        }

        public static CharacterSkillList DetermineEffectsOfCharacterTrait(CharacterTraitType trait)
        {
            return DetermineEffectsOfCharacterTrait(trait, CharacterRole.Undefined);
        }

        public static CharacterSkillList DetermineEffectsOfCharacterTrait(CharacterTraitType trait, CharacterRole role)
        {
            CharacterSkillList characterSkillList = new CharacterSkillList();
            int num = 10;
            int num2 = 5;
            int num3 = 20;
            switch (trait)
            {
                case CharacterTraitType.Smuggler:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, num));
                    break;
                case CharacterTraitType.BountyHunter:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, num));
                    break;
                case CharacterTraitType.IntelligenceAddict:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num));
                    break;
                case CharacterTraitType.IntelligenceCorrupt:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num));
                    break;
                case CharacterTraitType.IntelligenceCourageous:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, num));
                    break;
                case CharacterTraitType.IntelligenceEloquentSpeaker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, num));
                    break;
                case CharacterTraitType.IntelligenceLawful:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num));
                    break;
                case CharacterTraitType.IntelligenceMeasured:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, num));
                    break;
                case CharacterTraitType.IntelligencePoorSpeaker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num));
                    break;
                case CharacterTraitType.IntelligenceSober:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, num));
                    break;
                case CharacterTraitType.IntelligenceTolerant:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, num));
                    break;
                case CharacterTraitType.IntelligenceUninhibited:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num));
                    break;
                case CharacterTraitType.IntelligenceWeak:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num));
                    break;
                case CharacterTraitType.IntelligenceXenophobic:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num));
                    break;
                case CharacterTraitType.Paranoid:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    break;
                case CharacterTraitType.Trusting:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    break;
                case CharacterTraitType.PeaceThroughStrength:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    break;
                case CharacterTraitType.Pacifist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    break;
                case CharacterTraitType.Expansionist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, num));
                    break;
                case CharacterTraitType.Isolationist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, -num));
                    break;
                case CharacterTraitType.Diplomat:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    break;
                case CharacterTraitType.Obnoxious:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    break;
                case CharacterTraitType.Famous:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, num));
                    break;
                case CharacterTraitType.Disliked:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, -num));
                    break;
                case CharacterTraitType.GoodAdministrator:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, num));
                    break;
                case CharacterTraitType.PoorAdministrator:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, -num));
                    break;
                case CharacterTraitType.BeanCounter:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    break;
                case CharacterTraitType.Generous:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    break;
                case CharacterTraitType.Engineer:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, num));
                    break;
                case CharacterTraitType.Luddite:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num));
                    break;
                case CharacterTraitType.FreeTrader:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, num));
                    break;
                case CharacterTraitType.Protectionist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num));
                    break;
                case CharacterTraitType.Environmentalist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, -num));
                    break;
                case CharacterTraitType.Industrialist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, num));
                    break;
                case CharacterTraitType.Organized:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, num));
                    break;
                case CharacterTraitType.Disorganized:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, -num));
                    break;
                case CharacterTraitType.HealthOriented:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, -num));
                    break;
                case CharacterTraitType.LaborOriented:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, num));
                    break;
                case CharacterTraitType.Spiritual:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    break;
                case CharacterTraitType.Logical:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    break;
                case CharacterTraitType.GoodStrategist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, num));
                    break;
                case CharacterTraitType.PoorStrategist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, -num));
                    break;
                case CharacterTraitType.Uninhibited:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    break;
                case CharacterTraitType.Measured:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    break;
                case CharacterTraitType.Addict:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    break;
                case CharacterTraitType.Sober:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    break;
                case CharacterTraitType.Courageous:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, num));
                    break;
                case CharacterTraitType.Weak:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, -num));
                    break;
                case CharacterTraitType.Tolerant:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    break;
                case CharacterTraitType.Xenophobic:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    break;
                case CharacterTraitType.EloquentSpeaker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    break;
                case CharacterTraitType.PoorSpeaker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    break;
                case CharacterTraitType.Corrupt:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, -num));
                    break;
                case CharacterTraitType.Lawful:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, num));
                    break;
                case CharacterTraitType.Lazy:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchEnergy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Fighters, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsRange, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.RepairBonus, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthArmor, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthInfantry, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthSpecialForces, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthPlanetaryDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, -num2));
                    break;
                case CharacterTraitType.Energetic:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchEnergy, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryBaseMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianBaseMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Fighters, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsRange, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.RepairBonus, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthArmor, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthInfantry, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthSpecialForces, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthPlanetaryDefense, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, num2));
                    break;
                case CharacterTraitType.Linguist:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, num));
                    break;
                case CharacterTraitType.TongueTied:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, -num));
                    break;
                case CharacterTraitType.Technical:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, num));
                    break;
                case CharacterTraitType.NonTechnical:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, -num));
                    break;
                case CharacterTraitType.PoorTactician:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchEnergy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Fighters, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsRange, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.RepairBonus, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthArmor, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthInfantry, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthSpecialForces, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthPlanetaryDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, -num2));
                    break;
                case CharacterTraitType.GoodTactician:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchEnergy, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryBaseMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianBaseMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Fighters, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsRange, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.RepairBonus, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthArmor, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthInfantry, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthSpecialForces, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthPlanetaryDefense, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, num2));
                    break;
                case CharacterTraitType.StrongSpaceAttacker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, num));
                    break;
                case CharacterTraitType.PoorSpaceAttacker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, -num));
                    break;
                case CharacterTraitType.StrongSpaceDefender:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, num));
                    break;
                case CharacterTraitType.PoorSpaceDefender:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, -num));
                    break;
                case CharacterTraitType.Drunk:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchEnergy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Fighters, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsRange, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.RepairBonus, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthArmor, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthInfantry, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthSpecialForces, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthPlanetaryDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, -num2));
                    break;
                case CharacterTraitType.ToughDiscipline:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchEnergy, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryBaseMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianBaseMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Fighters, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsRange, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.RepairBonus, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthArmor, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthInfantry, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthSpecialForces, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthPlanetaryDefense, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, num2));
                    break;
                case CharacterTraitType.LaxDiscipline:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Diplomacy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TradeIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TourismIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyCorruption, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyHappiness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PopulationGrowth, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MiningRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ColonyShipConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.FacilityConstructionSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchWeapons, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchEnergy, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ResearchHighTech, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianShipMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.MilitaryBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CivilianBaseMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WarWeariness, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipManeuvering, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Fighters, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsRange, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShieldRechargeRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.RepairBonus, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthArmor, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthInfantry, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthSpecialForces, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopStrengthPlanetaryDefense, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingIncome, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.SmugglingEvasion, -num2));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.BoardingAssault, -num2));
                    break;
                case CharacterTraitType.GoodSpaceLogistician:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, num));
                    break;
                case CharacterTraitType.PoorSpaceLogistician:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.ShipEnergyUsage, -num));
                    break;
                case CharacterTraitType.NaturalSpaceLeader:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.WeaponsDamage, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.DamageControl, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Targeting, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Countermeasures, num));
                    break;
                case CharacterTraitType.SkilledNavigator:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, num));
                    break;
                case CharacterTraitType.PoorNavigator:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.HyperjumpSpeed, -num));
                    break;
                case CharacterTraitType.StrongGroundAttacker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, num));
                    break;
                case CharacterTraitType.PoorGroundAttacker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, -num));
                    break;
                case CharacterTraitType.StrongGroundDefender:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, num));
                    break;
                case CharacterTraitType.PoorGroundDefender:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, -num));
                    break;
                case CharacterTraitType.GoodGroundLogistician:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, num));
                    break;
                case CharacterTraitType.PoorGroundLogistician:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopMaintenance, -num));
                    break;
                case CharacterTraitType.NaturalGroundLeader:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopExperienceGain, num));
                    break;
                case CharacterTraitType.GoodRecruiter:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, num));
                    break;
                case CharacterTraitType.PoorRecruiter:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecruitment, -num));
                    break;
                case CharacterTraitType.CarefulAttacker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, num));
                    break;
                case CharacterTraitType.RecklessAttacker:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundAttack, num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopGroundDefense, -num));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.TroopRecoveryRate, -num));
                    break;
                case CharacterTraitType.DoubleAgent:
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Espionage, -num3));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.CounterEspionage, -num3));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Sabotage, -num3));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Concealment, -num3));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.PsyOps, -num3));
                    characterSkillList.Add(new CharacterSkill(CharacterSkillType.Assassination, -num3));
                    break;
            }
            if (role != 0)
            {
                CharacterSkillList characterSkillList2 = new CharacterSkillList();
                for (int i = 0; i < characterSkillList.Count; i++)
                {
                    if (!Character.CheckSkillValid(characterSkillList[i].Type, role))
                    {
                        characterSkillList2.Add(characterSkillList[i]);
                    }
                }
                for (int j = 0; j < characterSkillList2.Count; j++)
                {
                    characterSkillList.Remove(characterSkillList2[j]);
                }
            }
            return characterSkillList;
        }

        public static List<CharacterSkillType> DetermineCharacterSkillsAffectedByEvent(CharacterEventType eventType, out List<float> relativeImportances)
        {
            List<CharacterSkillType> list = new List<CharacterSkillType>();
            relativeImportances = new List<float>();
            switch (eventType)
            {
                case CharacterEventType.CriticalResearchSuccess:
                case CharacterEventType.CriticalResearchFailure:
                    list.Add(CharacterSkillType.ResearchWeapons);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ResearchEnergy);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ResearchHighTech);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.Subjugated:
                    list.Add(CharacterSkillType.Diplomacy);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ColonyHappiness);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.MilitaryShipConstructionSpeed);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.TreatyBroken:
                    list.Add(CharacterSkillType.Diplomacy);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TourismIncome);
                    relativeImportances.Add(0.5f);
                    list.Add(CharacterSkillType.TradeIncome);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.BuildSpaceport:
                    list.Add(CharacterSkillType.MilitaryBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.MilitaryShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.BuildOtherBase:
                    list.Add(CharacterSkillType.CivilianBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.BuildCivilianShip:
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianShipMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ColonyIncome);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.BuildColonyShip:
                    list.Add(CharacterSkillType.ColonyShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.PopulationGrowth);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.BuildFacility:
                    list.Add(CharacterSkillType.FacilityConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ColonyIncome);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.BuildWonder:
                    list.Add(CharacterSkillType.FacilityConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ColonyIncome);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.BuildMilitaryBase:
                    list.Add(CharacterSkillType.MilitaryBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.MilitaryShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.BuildMilitaryShip:
                    list.Add(CharacterSkillType.MilitaryShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.MilitaryShipMaintenance);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.BuildMiningStation:
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.MiningRate);
                    relativeImportances.Add(2f);
                    break;
                case CharacterEventType.BuildResearchStationEnergy:
                    list.Add(CharacterSkillType.CivilianBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ResearchEnergy);
                    relativeImportances.Add(2f);
                    break;
                case CharacterEventType.BuildResearchStationHighTech:
                    list.Add(CharacterSkillType.CivilianBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ResearchHighTech);
                    relativeImportances.Add(2f);
                    break;
                case CharacterEventType.BuildResearchStationWeapons:
                    list.Add(CharacterSkillType.CivilianBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ResearchWeapons);
                    relativeImportances.Add(2f);
                    break;
                case CharacterEventType.BuildResortBase:
                    list.Add(CharacterSkillType.CivilianShipConstructionSpeed);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CivilianBaseMaintenance);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TourismIncome);
                    relativeImportances.Add(2f);
                    break;
                case CharacterEventType.CashNegative:
                    list.Add(CharacterSkillType.ColonyIncome);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.CashPositive:
                    list.Add(CharacterSkillType.ColonyIncome);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.ColonyDevelopmentIncrease:
                    list.Add(CharacterSkillType.ColonyHappiness);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.PopulationGrowth);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.ColonyDevelopmentDecrease:
                    list.Add(CharacterSkillType.ColonyHappiness);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.PopulationGrowth);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.GroundInvasion:
                    list.Add(CharacterSkillType.TroopExperienceGain);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TroopGroundAttack);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TroopGroundDefense);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TroopRecoveryRate);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TroopStrengthArmor);
                    relativeImportances.Add(0.5f);
                    list.Add(CharacterSkillType.TroopStrengthInfantry);
                    relativeImportances.Add(0.5f);
                    list.Add(CharacterSkillType.TroopStrengthSpecialForces);
                    relativeImportances.Add(0.5f);
                    list.Add(CharacterSkillType.TroopStrengthPlanetaryDefense);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.HyperjumpExit:
                    list.Add(CharacterSkillType.HyperjumpSpeed);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.IntelligenceAgentOursCaptured:
                    list.Add(CharacterSkillType.Espionage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Sabotage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Concealment);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.IntelligenceAgentRecruited:
                    list.Add(CharacterSkillType.Espionage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Sabotage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.CounterEspionage);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.IntelligenceMissionFailEspionage:
                    list.Add(CharacterSkillType.Espionage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Concealment);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.IntelligenceMissionFailSabotage:
                    list.Add(CharacterSkillType.Sabotage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.PsyOps);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.IntelligenceMissionInterceptEnemy:
                    list.Add(CharacterSkillType.CounterEspionage);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.IntelligenceMissionSucceedEspionage:
                    list.Add(CharacterSkillType.Espionage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Assassination);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.PsyOps);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Concealment);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.IntelligenceMissionSucceedSabotage:
                    list.Add(CharacterSkillType.Sabotage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Assassination);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.PsyOps);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Concealment);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.ResearchAdvanceEnergy:
                    list.Add(CharacterSkillType.ResearchEnergy);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.ResearchAdvanceHighTech:
                    list.Add(CharacterSkillType.ResearchHighTech);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.ResearchAdvanceWeapons:
                    list.Add(CharacterSkillType.ResearchWeapons);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.SpaceBattle:
                    list.Add(CharacterSkillType.Countermeasures);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.DamageControl);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Fighters);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.RepairBonus);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ShieldRechargeRate);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ShipEnergyUsage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ShipManeuvering);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Targeting);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.WeaponsDamage);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.WeaponsRange);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.TourismIncome:
                    list.Add(CharacterSkillType.TourismIncome);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Diplomacy);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.TradeIncome:
                    list.Add(CharacterSkillType.TradeIncome);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Diplomacy);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.TreatySigned:
                    list.Add(CharacterSkillType.Diplomacy);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TradeIncome);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.TroopComplete:
                    list.Add(CharacterSkillType.TroopRecruitment);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.TroopGroundDefense);
                    relativeImportances.Add(0.5f);
                    list.Add(CharacterSkillType.TroopMaintenance);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.WarEnded:
                    list.Add(CharacterSkillType.WarWeariness);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Diplomacy);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.WarStarted:
                    list.Add(CharacterSkillType.WarWeariness);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Diplomacy);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.Boarding:
                    list.Add(CharacterSkillType.BoardingAssault);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.ShipManeuvering);
                    relativeImportances.Add(0.5f);
                    list.Add(CharacterSkillType.Targeting);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.Raid:
                    list.Add(CharacterSkillType.BoardingAssault);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.Targeting);
                    relativeImportances.Add(0.5f);
                    list.Add(CharacterSkillType.SmugglingIncome);
                    relativeImportances.Add(0.5f);
                    break;
                case CharacterEventType.SmugglingSuccess:
                    list.Add(CharacterSkillType.SmugglingIncome);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.SmugglingEvasion);
                    relativeImportances.Add(1f);
                    break;
                case CharacterEventType.SmugglingDetection:
                    list.Add(CharacterSkillType.SmugglingIncome);
                    relativeImportances.Add(1f);
                    list.Add(CharacterSkillType.SmugglingEvasion);
                    relativeImportances.Add(1f);
                    break;
            }
            return list;
        }

        public static bool DetermineCharacterEventRelevantToRole(CharacterEventType eventType, CharacterRole role)
        {
            switch (role)
            {
                case CharacterRole.Ambassador:
                    switch (eventType)
                    {
                        case CharacterEventType.TreatySigned:
                        case CharacterEventType.WarStarted:
                        case CharacterEventType.WarEnded:
                        case CharacterEventType.TradeIncome:
                        case CharacterEventType.TourismIncome:
                        case CharacterEventType.IntelligenceMissionSucceedEspionage:
                        case CharacterEventType.IntelligenceMissionSucceedSabotage:
                        case CharacterEventType.IntelligenceMissionFailEspionage:
                        case CharacterEventType.IntelligenceMissionFailSabotage:
                        case CharacterEventType.IntelligenceMissionInterceptEnemy:
                        case CharacterEventType.IntelligenceAgentOursCaptured:
                        case CharacterEventType.IntelligenceAgentRecruited:
                        case CharacterEventType.TargetOfFailedAssassination:
                        case CharacterEventType.Subjugated:
                        case CharacterEventType.TreatyBroken:
                        case CharacterEventType.AmbassadorAssignedToEmpire:
                        case CharacterEventType.CharacterStart:
                        case CharacterEventType.CharacterTraitGain:
                        case CharacterEventType.CharacterSkillGain:
                        case CharacterEventType.CharacterSkillProgress:
                        case CharacterEventType.CharacterTransferLocation:
                            return true;
                    }
                    break;
                case CharacterRole.ColonyGovernor:
                    switch (eventType)
                    {
                        case CharacterEventType.TradeIncome:
                        case CharacterEventType.TourismIncome:
                        case CharacterEventType.ColonyDevelopmentIncrease:
                        case CharacterEventType.ColonyDevelopmentDecrease:
                        case CharacterEventType.CashNegative:
                        case CharacterEventType.CashPositive:
                        case CharacterEventType.TroopComplete:
                        case CharacterEventType.BuildMilitaryShip:
                        case CharacterEventType.BuildCivilianShip:
                        case CharacterEventType.BuildColonyShip:
                        case CharacterEventType.BuildMilitaryBase:
                        case CharacterEventType.BuildSpaceport:
                        case CharacterEventType.BuildResearchStationWeapons:
                        case CharacterEventType.BuildResearchStationEnergy:
                        case CharacterEventType.BuildResearchStationHighTech:
                        case CharacterEventType.BuildMiningStation:
                        case CharacterEventType.BuildResortBase:
                        case CharacterEventType.BuildOtherBase:
                        case CharacterEventType.BuildFacility:
                        case CharacterEventType.BuildWonder:
                        case CharacterEventType.TargetOfFailedAssassination:
                        case CharacterEventType.CharacterStart:
                        case CharacterEventType.CharacterTraitGain:
                        case CharacterEventType.CharacterSkillGain:
                        case CharacterEventType.CharacterSkillProgress:
                        case CharacterEventType.CharacterTransferLocation:
                            return true;
                    }
                    break;
                case CharacterRole.FleetAdmiral:
                    switch (eventType)
                    {
                        case CharacterEventType.WarStarted:
                        case CharacterEventType.WarEnded:
                        case CharacterEventType.HyperjumpExit:
                        case CharacterEventType.SpaceBattle:
                        case CharacterEventType.TargetOfFailedAssassination:
                        case CharacterEventType.CharacterStart:
                        case CharacterEventType.CharacterTraitGain:
                        case CharacterEventType.CharacterSkillGain:
                        case CharacterEventType.CharacterSkillProgress:
                        case CharacterEventType.CharacterTransferLocation:
                        case CharacterEventType.Raid:
                            return true;
                    }
                    break;
                case CharacterRole.ShipCaptain:
                    switch (eventType)
                    {
                        case CharacterEventType.WarStarted:
                        case CharacterEventType.WarEnded:
                        case CharacterEventType.HyperjumpExit:
                        case CharacterEventType.SpaceBattle:
                        case CharacterEventType.TargetOfFailedAssassination:
                        case CharacterEventType.CharacterStart:
                        case CharacterEventType.CharacterTraitGain:
                        case CharacterEventType.CharacterSkillGain:
                        case CharacterEventType.CharacterSkillProgress:
                        case CharacterEventType.CharacterTransferLocation:
                        case CharacterEventType.Boarding:
                        case CharacterEventType.Raid:
                        case CharacterEventType.SmugglingSuccess:
                        case CharacterEventType.SmugglingDetection:
                            return true;
                    }
                    break;
                case CharacterRole.IntelligenceAgent:
                    switch (eventType)
                    {
                        case CharacterEventType.IntelligenceMissionSucceedEspionage:
                        case CharacterEventType.IntelligenceMissionSucceedSabotage:
                        case CharacterEventType.IntelligenceMissionFailEspionage:
                        case CharacterEventType.IntelligenceMissionFailSabotage:
                        case CharacterEventType.IntelligenceMissionInterceptEnemy:
                        case CharacterEventType.IntelligenceAgentOursCaptured:
                        case CharacterEventType.IntelligenceAgentRecruited:
                        case CharacterEventType.TargetOfFailedAssassination:
                        case CharacterEventType.CharacterStart:
                        case CharacterEventType.CharacterTraitGain:
                        case CharacterEventType.CharacterSkillGain:
                        case CharacterEventType.CharacterSkillProgress:
                        case CharacterEventType.CharacterTransferLocation:
                            return true;
                    }
                    break;
                case CharacterRole.Leader:
                case CharacterRole.PirateLeader:
                    return true;
                case CharacterRole.Scientist:
                    switch (eventType)
                    {
                        case CharacterEventType.ResearchAdvanceWeapons:
                        case CharacterEventType.ResearchAdvanceEnergy:
                        case CharacterEventType.ResearchAdvanceHighTech:
                        case CharacterEventType.BuildResearchStationWeapons:
                        case CharacterEventType.BuildResearchStationEnergy:
                        case CharacterEventType.BuildResearchStationHighTech:
                        case CharacterEventType.TargetOfFailedAssassination:
                        case CharacterEventType.CriticalResearchSuccess:
                        case CharacterEventType.CriticalResearchFailure:
                        case CharacterEventType.CharacterStart:
                        case CharacterEventType.CharacterTraitGain:
                        case CharacterEventType.CharacterSkillGain:
                        case CharacterEventType.CharacterSkillProgress:
                        case CharacterEventType.CharacterTransferLocation:
                            return true;
                    }
                    break;
                case CharacterRole.TroopGeneral:
                    switch (eventType)
                    {
                        case CharacterEventType.WarStarted:
                        case CharacterEventType.WarEnded:
                        case CharacterEventType.TroopComplete:
                        case CharacterEventType.BuildMilitaryBase:
                        case CharacterEventType.BuildFacility:
                        case CharacterEventType.BuildWonder:
                        case CharacterEventType.GroundInvasion:
                        case CharacterEventType.TargetOfFailedAssassination:
                        case CharacterEventType.CharacterStart:
                        case CharacterEventType.CharacterTraitGain:
                        case CharacterEventType.CharacterSkillGain:
                        case CharacterEventType.CharacterSkillProgress:
                        case CharacterEventType.CharacterTransferLocation:
                            return true;
                    }
                    break;
            }
            return false;
        }

        public static bool DetermineCharacterEventIsPublic(CharacterEventType eventType)
        {
            switch (eventType)
            {
                case CharacterEventType.TreatySigned:
                case CharacterEventType.WarStarted:
                case CharacterEventType.WarEnded:
                case CharacterEventType.CashNegative:
                case CharacterEventType.TroopComplete:
                case CharacterEventType.IntelligenceMissionSucceedEspionage:
                case CharacterEventType.IntelligenceMissionSucceedSabotage:
                case CharacterEventType.IntelligenceMissionFailEspionage:
                case CharacterEventType.IntelligenceMissionFailSabotage:
                case CharacterEventType.IntelligenceMissionInterceptEnemy:
                case CharacterEventType.IntelligenceAgentOursCaptured:
                case CharacterEventType.IntelligenceAgentRecruited:
                case CharacterEventType.ResearchAdvanceWeapons:
                case CharacterEventType.ResearchAdvanceEnergy:
                case CharacterEventType.ResearchAdvanceHighTech:
                case CharacterEventType.BuildColonyShip:
                case CharacterEventType.BuildMilitaryBase:
                case CharacterEventType.BuildSpaceport:
                case CharacterEventType.BuildResearchStationWeapons:
                case CharacterEventType.BuildResearchStationEnergy:
                case CharacterEventType.BuildResearchStationHighTech:
                case CharacterEventType.BuildMiningStation:
                case CharacterEventType.BuildResortBase:
                case CharacterEventType.BuildOtherBase:
                case CharacterEventType.BuildFacility:
                case CharacterEventType.BuildWonder:
                case CharacterEventType.SpaceBattle:
                case CharacterEventType.GroundInvasion:
                case CharacterEventType.TargetOfFailedAssassination:
                case CharacterEventType.AmbassadorAssignedToEmpire:
                case CharacterEventType.CriticalResearchSuccess:
                case CharacterEventType.CriticalResearchFailure:
                case CharacterEventType.CharacterStart:
                case CharacterEventType.CharacterTraitGain:
                case CharacterEventType.CharacterSkillGain:
                case CharacterEventType.CharacterSkillProgress:
                case CharacterEventType.CharacterTransferLocation:
                case CharacterEventType.Boarding:
                case CharacterEventType.Raid:
                case CharacterEventType.SmugglingSuccess:
                case CharacterEventType.SmugglingDetection:
                    return true;
                default:
                    return false;
            }
        }

        public List<CharacterTraitType> IntersectTraitLists(List<CharacterTraitType> traits1, List<CharacterTraitType> traits2)
        {
            List<CharacterTraitType> list = new List<CharacterTraitType>();
            if (traits1 != null && traits2 != null)
            {
                for (int i = 0; i < traits1.Count; i++)
                {
                    if (traits2.Contains(traits1[i]))
                    {
                        list.Add(traits1[i]);
                    }
                }
            }
            return list;
        }

        public Habitat ResolveNearestLocation(StellarObject attackedTarget, BuiltObject ship, out bool nearby)
        {
            nearby = false;
            Habitat habitat = null;
            if (attackedTarget == null)
            {
                if (ship != null)
                {
                    habitat = FindNearestHabitat(ship.Xpos, ship.Ypos);
                    if (habitat != null)
                    {
                        double num = CalculateDistanceSquared(ship.Xpos, ship.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num < 9000000.0)
                        {
                            nearby = true;
                        }
                    }
                }
            }
            else if (attackedTarget is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)attackedTarget;
                if (builtObject.ParentHabitat != null)
                {
                    habitat = builtObject.ParentHabitat;
                    nearby = true;
                }
                else
                {
                    habitat = FindNearestHabitat(builtObject.Xpos, builtObject.Ypos);
                    if (habitat != null)
                    {
                        double num2 = CalculateDistanceSquared(builtObject.Xpos, builtObject.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num2 < 9000000.0)
                        {
                            nearby = true;
                        }
                    }
                }
            }
            else if (attackedTarget is Habitat)
            {
                habitat = (Habitat)attackedTarget;
                nearby = true;
            }
            return habitat;
        }

        public int CalculateEmpireScore(Empire empire)
        {
            int population;
            int economy;
            int colonies;
            int military;
            int research;
            int wonders;
            return CalculateEmpireScore(empire, out population, out economy, out colonies, out military, out research, out wonders);
        }

        public int CalculateEmpireScore(Empire empire, out int population, out int economy, out int colonies, out int military, out int research, out int wonders)
        {
            int result = 0;
            population = 0;
            economy = 0;
            colonies = 0;
            military = 0;
            research = 0;
            wonders = 0;
            if (empire != null)
            {
                if (empire.PirateEmpireBaseHabitat == null)
                {
                    population = (int)(empire.TotalPopulation / 1000000);
                    economy = (int)(empire.PrivateAnnualRevenue / 10.0);
                    colonies = empire.Colonies.Count * 1000;
                    military = empire.MilitaryPotency * 5;
                    research = (int)(empire.Research.TechTree.CalculateTotalCostResearchedProjects() / (float)BaseTechCost * 20f);
                    research = Math.Max(0, Math.Min(1000000, research));
                    wonders = empire.CumulateFacilityValue1(PlanetaryFacilityType.Wonder, mustBeCompleted: true) * 100;
                }
                else
                {
                    population = (int)(empire.CalculatePirateControlPopulationValue() / 1000000);
                    double num = 0.0;
                    if (empire.PirateEconomy != null)
                    {
                        if (empire.PirateEconomy.LastYear != null)
                        {
                            num = empire.PirateEconomy.LastYear.TotalIncome;
                        }
                        else if (empire.PirateEconomy.ThisYear != null)
                        {
                            num = empire.PirateEconomy.ThisYear.TotalIncome;
                        }
                    }
                    economy = (int)(num / 10.0);
                    colonies = empire.Colonies.Count * 1000;
                    military = empire.MilitaryPotency * 5;
                    research = (int)(empire.Research.TechTree.CalculateTotalCostResearchedProjects() / (float)BaseTechCost * 20f);
                    research = Math.Max(0, Math.Min(1000000, research));
                    wonders += empire.CountFacilities(PlanetaryFacilityType.PirateBase, mustBeCompleted: true) * 1000;
                    wonders += empire.CountFacilities(PlanetaryFacilityType.PirateFortress, mustBeCompleted: true) * 2000;
                    wonders += empire.CountFacilities(PlanetaryFacilityType.PirateCriminalNetwork, mustBeCompleted: true) * 5000;
                }
                result = population + economy + colonies + military + research + wonders;
            }
            return result;
        }

        public GameSummary DetermineGameSummary()
        {
            GameSummary gameSummary = new GameSummary();
            gameSummary.DifficultyLevel = DifficultyLevel;
            gameSummary.GalaxyStarCount = StarCount;
            if (PlayerEmpire != null)
            {
                gameSummary.PlayerAchievements = PlayerEmpire.Achievements;
                gameSummary.PlayerEmpireName = PlayerEmpire.Name;
                GovernmentAttributes governmentAttributes = null;
                if (PlayerEmpire.GovernmentId >= 0 && PlayerEmpire.GovernmentId < Governments.Count)
                {
                    governmentAttributes = Governments[PlayerEmpire.GovernmentId];
                    gameSummary.PlayerGovernmentName = governmentAttributes.Name;
                }
                gameSummary.PlayerMainColor = PlayerEmpire.MainColor;
                gameSummary.PlayerRace = PlayerEmpire.DominantRace;
                gameSummary.PlayerScore = CalculateEmpireScore(PlayerEmpire);
            }
            return gameSummary;
        }

        public void ReviewAchievements()
        {
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Counters != null)
                {
                    empire.Achievements = ReviewAchievementsForEmpire(empire);
                    empire.Score = CalculateEmpireScore(empire);
                }
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                if (empire2 != null && empire2.Counters != null)
                {
                    empire2.Achievements = ReviewAchievementsForEmpire(empire2);
                    empire2.Score = CalculateEmpireScore(empire2);
                }
            }
        }

        public AchievementList ReviewAchievementsForEmpire(Empire empire)
        {
            AchievementList achievementList = new AchievementList();
            if (empire != null && empire.Counters != null)
            {
                bool flag = false;
                long num = CurrentStarDate - ActualStartDate;
                if (num > RealSecondsInGalacticYear * 1000 * 10)
                {
                    flag = true;
                }
                if (GameRaceSpecificVictoryConditionsEnabled)
                {
                    RaceVictoryConditionProgressList conditionProgresses = new RaceVictoryConditionProgressList();
                    double num2 = CalculateRaceVictoryConditionsProgress(this, empire, empire.DominantRace, out conditionProgresses);
                    if (num2 >= 1.0)
                    {
                        achievementList.Add(new Achievement(AchievementType.AchieveAllRaceVictoryConditions, 0, empire.DominantRace));
                    }
                }
                if (empire.Counters.DestroyedEnemyMilitaryShipCount >= 50)
                {
                    achievementList.Add(new Achievement(AchievementType.DestroyEnemyMilitaryShipsAndBases, empire.Counters.DestroyedEnemyMilitaryShipCount, null));
                }
                if (empire.Counters.DestroyedEnemyCivilianShipCount >= 50)
                {
                    achievementList.Add(new Achievement(AchievementType.DestroyEnemyCivilianShipsAndBases, empire.Counters.DestroyedEnemyCivilianShipCount, null));
                }
                if (empire.Counters.DestroyedEnemyTroopCount >= 50)
                {
                    achievementList.Add(new Achievement(AchievementType.DestroyEnemyTroops, empire.Counters.DestroyedEnemyTroopCount, null));
                }
                int num3 = empire.Counters.DestroyedCreatureCountArdilus + empire.Counters.DestroyedCreatureCountKaltor + empire.Counters.DestroyedCreatureCountSandSlug + empire.Counters.DestroyedCreatureCountSpaceSlug;
                if (num3 >= 20)
                {
                    achievementList.Add(new Achievement(AchievementType.DestroySpaceMonsters, num3, null));
                }
                if (empire.Counters.DestroyedCreatureCountSilverMist >= 10)
                {
                    achievementList.Add(new Achievement(AchievementType.DestroySilverMists, empire.Counters.DestroyedCreatureCountSilverMist, null));
                }
                if (empire.Counters.ColoniesConqueredCount >= 10)
                {
                    achievementList.Add(new Achievement(AchievementType.ConquerEnemyColonies, empire.Counters.ColoniesConqueredCount, null));
                }
                int num4 = empire.Counters.IntelligenceMissionSuccessEspionageCount + empire.Counters.IntelligenceMissionSuccessSabotageCount;
                if (num4 >= 25)
                {
                    achievementList.Add(new Achievement(AchievementType.SuccessfulIntelligenceMissions, num4, null));
                }
                if (empire.Counters.WarsWeStartedCount >= 20)
                {
                    achievementList.Add(new Achievement(AchievementType.StartWars, empire.Counters.WarsWeStartedCount, null));
                }
                if (empire.Counters.BrokenTreatyCount >= 20)
                {
                    achievementList.Add(new Achievement(AchievementType.BreakTreaties, empire.Counters.BrokenTreatyCount, null));
                }
                if (empire.Counters.KillEnemyCharactersCount >= 20)
                {
                    achievementList.Add(new Achievement(AchievementType.EliminateEnemyCharacters, empire.Counters.KillEnemyCharactersCount, null));
                }
                if (empire.Counters.EliminateEmpireCount >= 1)
                {
                    achievementList.Add(new Achievement(AchievementType.EliminateEnemyEmpires, empire.Counters.EliminateEmpireCount, null));
                }
                if (empire.Counters.EliminatePirateEmpireCount >= 5)
                {
                    achievementList.Add(new Achievement(AchievementType.EliminatePirateFactions, empire.Counters.EliminatePirateEmpireCount, null));
                }
                double num5 = CalculateHighestTradeVolume();
                if (empire.Counters.TradeIncomeTotalVolume >= num5 && empire.Counters.TradeIncomeTotalVolume > 0.0 && flag)
                {
                    int value = Math.Min(int.MaxValue, (int)empire.Counters.TradeIncomeTotalVolume);
                    achievementList.Add(new Achievement(AchievementType.HighestTradeIncome, value, null));
                }
                double num6 = CalculateHighestMiningVolume();
                int num7 = empire.Counters.MiningExtractionGas + empire.Counters.MiningExtractionLuxury + empire.Counters.MiningExtractionStrategic;
                if ((double)num7 >= num6 && num7 > 0 && flag)
                {
                    achievementList.Add(new Achievement(AchievementType.HighestMiningVolume, num7, null));
                }
                if (empire.Counters.CaptureShipCount >= 10)
                {
                    achievementList.Add(new Achievement(AchievementType.CaptureEnemyShips, empire.Counters.CaptureShipCount, null));
                }
                long currentStarDate = CurrentStarDate;
                long num8 = empire.Counters.TimeSpentAtWar(currentStarDate);
                long num9 = currentStarDate - _StartStarDate;
                double num10 = (double)num8 / (double)num9;
                if (num10 >= 0.9 && flag)
                {
                    achievementList.Add(new Achievement(AchievementType.SpendAllTimeAtWar, 0, null));
                }
                else if (num10 <= 0.0 && flag)
                {
                    achievementList.Add(new Achievement(AchievementType.SpendNoTimeAtWar, 0, null));
                }
                if (empire.Counters.RaidSuccessCount >= 10)
                {
                    achievementList.Add(new Achievement(AchievementType.SuccessfulRaids, empire.Counters.RaidSuccessCount, null));
                }
                int num11 = empire.CountFacilities(PlanetaryFacilityType.Wonder, mustBeCompleted: true);
                if (num11 >= 1)
                {
                    achievementList.Add(new Achievement(AchievementType.BuildWonders, num11, null));
                }
                if (empire.Achievements.ContainsType(AchievementType.OwnOperationalPlanetDestroyer))
                {
                    achievementList.Add(new Achievement(AchievementType.OwnOperationalPlanetDestroyer, 0, null));
                }
                else
                {
                    int num12 = 0;
                    for (int i = 0; i < empire.BuiltObjects.Count; i++)
                    {
                        BuiltObject builtObject = empire.BuiltObjects[i];
                        if (builtObject != null && builtObject.UnbuiltComponentCount <= 0 && builtObject.SubRole == BuiltObjectSubRole.CapitalShip && builtObject.Components.ContainsComponentId(25))
                        {
                            num12++;
                        }
                    }
                    if (num12 > 0)
                    {
                        achievementList.Add(new Achievement(AchievementType.OwnOperationalPlanetDestroyer, num12, null));
                    }
                }
                if (empire.Achievements.ContainsType(AchievementType.JoinTheFreedomAlliance))
                {
                    achievementList.Add(new Achievement(AchievementType.JoinTheFreedomAlliance, 0, null));
                }
                else
                {
                    Empire empire2 = IdentifyMechanoidEmpire();
                    if (empire2 != null && empire.PirateEmpireBaseHabitat == null)
                    {
                        DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(empire2);
                        if (diplomaticRelation != null && diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact && diplomaticRelation.Locked)
                        {
                            achievementList.Add(new Achievement(AchievementType.JoinTheFreedomAlliance, 0, null));
                        }
                    }
                }
                if (empire.Achievements.ContainsType(AchievementType.JoinTheShakturi))
                {
                    achievementList.Add(new Achievement(AchievementType.JoinTheShakturi, 0, null));
                }
                else
                {
                    Empire empire3 = IdentifyShakturiEmpire();
                    if (empire3 != null && empire.PirateEmpireBaseHabitat == null)
                    {
                        DiplomaticRelation diplomaticRelation2 = empire.ObtainDiplomaticRelation(empire3);
                        if (diplomaticRelation2 != null && diplomaticRelation2.Type == DiplomaticRelationType.MutualDefensePact)
                        {
                            achievementList.Add(new Achievement(AchievementType.JoinTheShakturi, 0, null));
                        }
                    }
                }
                if (empire.EmpireSplitCount > 0)
                {
                    achievementList.Add(new Achievement(AchievementType.EmpireSplits, empire.EmpireSplitCount, null));
                }
                if (empire.HaveDefeatedAncientGuardians)
                {
                    achievementList.Add(new Achievement(AchievementType.DefeatAncients, 0, null));
                }
                if (empire.HaveDefeatedShakturi)
                {
                    achievementList.Add(new Achievement(AchievementType.DefeatShakturi, 0, null));
                }
                if (empire.DefeatedLegendaryPiratesCount > 0)
                {
                    achievementList.Add(new Achievement(AchievementType.DefeatLegendaryPirates, empire.DefeatedLegendaryPiratesCount, null));
                }
                if (empire.GovernmentAttributes != null && empire.GovernmentAttributes.Availability == 3)
                {
                    achievementList.Add(new Achievement(AchievementType.ChangeGovernmentToWayOfDarkness, 0, null));
                }
                if (empire.GovernmentAttributes != null && empire.GovernmentAttributes.Availability == 2)
                {
                    achievementList.Add(new Achievement(AchievementType.ChangeGovernmentToWayOfTheAncients, 0, null));
                }
            }
            return achievementList;
        }

        public static int ResolveAchievementMedalImageIndex(AchievementType achievementType, int level)
        {
            int num = 0;
            if (level > 0)
            {
                level--;
            }
            switch (achievementType)
            {
                case AchievementType.AchieveAllRaceVictoryConditions:
                    num = 0;
                    break;
                case AchievementType.DestroyEnemyMilitaryShipsAndBases:
                    num = 1;
                    break;
                case AchievementType.DestroyEnemyCivilianShipsAndBases:
                    num = 4;
                    break;
                case AchievementType.DestroyEnemyTroops:
                    num = 7;
                    break;
                case AchievementType.DestroySpaceMonsters:
                    num = 10;
                    break;
                case AchievementType.DestroySilverMists:
                    num = 13;
                    break;
                case AchievementType.ConquerEnemyColonies:
                    num = 16;
                    break;
                case AchievementType.StartWars:
                    num = 19;
                    break;
                case AchievementType.BreakTreaties:
                    num = 20;
                    break;
                case AchievementType.EliminateEnemyCharacters:
                    num = 21;
                    break;
                case AchievementType.EliminateEnemyEmpires:
                    num = 24;
                    break;
                case AchievementType.HighestTradeIncome:
                    num = 27;
                    break;
                case AchievementType.HighestMiningVolume:
                    num = 28;
                    break;
                case AchievementType.CaptureEnemyShips:
                    num = 29;
                    break;
                case AchievementType.EliminatePirateFactions:
                    num = 32;
                    break;
                case AchievementType.SpendAllTimeAtWar:
                    num = 35;
                    break;
                case AchievementType.SpendNoTimeAtWar:
                    num = 36;
                    break;
                case AchievementType.SuccessfulRaids:
                    num = 37;
                    break;
                case AchievementType.ChangeGovernmentToWayOfDarkness:
                    num = 40;
                    break;
                case AchievementType.ChangeGovernmentToWayOfTheAncients:
                    num = 41;
                    break;
                case AchievementType.EmpireSplits:
                    num = 42;
                    break;
                case AchievementType.BuildWonders:
                    num = 43;
                    break;
                case AchievementType.OwnOperationalPlanetDestroyer:
                    num = 46;
                    break;
                case AchievementType.JoinTheFreedomAlliance:
                    num = 47;
                    break;
                case AchievementType.JoinTheShakturi:
                    num = 48;
                    break;
                case AchievementType.DefeatAncients:
                    num = 49;
                    break;
                case AchievementType.DefeatShakturi:
                    num = 50;
                    break;
                case AchievementType.DefeatLegendaryPirates:
                    num = 51;
                    break;
                case AchievementType.SuccessfulIntelligenceMissions:
                    num = 52;
                    break;
            }
            return num + level;
        }

        public static int DetermineAchievementValueForLevel(AchievementType achievementType, int level)
        {
            int result = 0;
            switch (achievementType)
            {
                case AchievementType.DestroyEnemyMilitaryShipsAndBases:
                case AchievementType.DestroyEnemyCivilianShipsAndBases:
                case AchievementType.DestroyEnemyTroops:
                    switch (level)
                    {
                        case 1:
                            result = 50;
                            break;
                        case 2:
                            result = 100;
                            break;
                        case 3:
                            result = 1000;
                            break;
                    }
                    break;
                case AchievementType.DestroySpaceMonsters:
                case AchievementType.EliminateEnemyCharacters:
                    switch (level)
                    {
                        case 1:
                            result = 20;
                            break;
                        case 2:
                            result = 50;
                            break;
                        case 3:
                            result = 100;
                            break;
                    }
                    break;
                case AchievementType.DestroySilverMists:
                case AchievementType.ConquerEnemyColonies:
                case AchievementType.CaptureEnemyShips:
                case AchievementType.SuccessfulRaids:
                    switch (level)
                    {
                        case 1:
                            result = 10;
                            break;
                        case 2:
                            result = 50;
                            break;
                        case 3:
                            result = 100;
                            break;
                    }
                    break;
                case AchievementType.SuccessfulIntelligenceMissions:
                    switch (level)
                    {
                        case 1:
                            result = 25;
                            break;
                        case 2:
                            result = 100;
                            break;
                        case 3:
                            result = 1000;
                            break;
                    }
                    break;
                case AchievementType.EliminateEnemyEmpires:
                case AchievementType.BuildWonders:
                    switch (level)
                    {
                        case 1:
                            result = 1;
                            break;
                        case 2:
                            result = 5;
                            break;
                        case 3:
                            result = 10;
                            break;
                    }
                    break;
                case AchievementType.EliminatePirateFactions:
                    switch (level)
                    {
                        case 1:
                            result = 5;
                            break;
                        case 2:
                            result = 10;
                            break;
                        case 3:
                            result = 20;
                            break;
                    }
                    break;
                default:
                    result = 0;
                    break;
            }
            return result;
        }

        public static int DetermineAchievementLevel(AchievementType achievementType, int value)
        {
            int result = 0;
            switch (achievementType)
            {
                case AchievementType.AchieveAllRaceVictoryConditions:
                case AchievementType.StartWars:
                case AchievementType.BreakTreaties:
                case AchievementType.HighestTradeIncome:
                case AchievementType.HighestMiningVolume:
                case AchievementType.SpendAllTimeAtWar:
                case AchievementType.SpendNoTimeAtWar:
                case AchievementType.ChangeGovernmentToWayOfDarkness:
                case AchievementType.ChangeGovernmentToWayOfTheAncients:
                case AchievementType.EmpireSplits:
                case AchievementType.OwnOperationalPlanetDestroyer:
                case AchievementType.JoinTheFreedomAlliance:
                case AchievementType.JoinTheShakturi:
                case AchievementType.DefeatAncients:
                case AchievementType.DefeatShakturi:
                case AchievementType.DefeatLegendaryPirates:
                    result = 1;
                    break;
                case AchievementType.DestroyEnemyMilitaryShipsAndBases:
                case AchievementType.DestroyEnemyCivilianShipsAndBases:
                case AchievementType.DestroyEnemyTroops:
                    if (value >= 1000)
                    {
                        result = 3;
                    }
                    else if (value >= 100)
                    {
                        result = 2;
                    }
                    else if (value >= 50)
                    {
                        result = 1;
                    }
                    break;
                case AchievementType.DestroySpaceMonsters:
                case AchievementType.EliminateEnemyCharacters:
                    if (value >= 100)
                    {
                        result = 3;
                    }
                    else if (value >= 50)
                    {
                        result = 2;
                    }
                    else if (value >= 20)
                    {
                        result = 1;
                    }
                    break;
                case AchievementType.DestroySilverMists:
                case AchievementType.ConquerEnemyColonies:
                case AchievementType.CaptureEnemyShips:
                case AchievementType.SuccessfulRaids:
                    if (value >= 100)
                    {
                        result = 3;
                    }
                    else if (value >= 50)
                    {
                        result = 2;
                    }
                    else if (value >= 10)
                    {
                        result = 1;
                    }
                    break;
                case AchievementType.SuccessfulIntelligenceMissions:
                    if (value >= 1000)
                    {
                        result = 3;
                    }
                    else if (value >= 100)
                    {
                        result = 2;
                    }
                    else if (value >= 25)
                    {
                        result = 1;
                    }
                    break;
                case AchievementType.EliminateEnemyEmpires:
                case AchievementType.BuildWonders:
                    if (value >= 10)
                    {
                        result = 3;
                    }
                    else if (value >= 5)
                    {
                        result = 2;
                    }
                    else if (value >= 1)
                    {
                        result = 1;
                    }
                    break;
                case AchievementType.EliminatePirateFactions:
                    if (value >= 20)
                    {
                        result = 3;
                    }
                    else if (value >= 10)
                    {
                        result = 2;
                    }
                    else if (value >= 5)
                    {
                        result = 1;
                    }
                    break;
            }
            return result;
        }

        public static string ResolveAchievementTitleComplete(Achievement achievement)
        {
            string text = ResolveTitle(achievement.Type, achievement.AdditionalData);
            int level = DetermineAchievementLevel(achievement.Type, achievement.Value);
            string text2 = ResolveAchievementLevelDescription(achievement.Type, level);
            string text3 = text;
            if (!string.IsNullOrEmpty(text2))
            {
                text3 = text3 + " " + text2;
            }
            return text3;
        }

        public static string ResolveAchievementLevelDescription(AchievementType achievementType, int level)
        {
            string result = string.Empty;
            switch (achievementType)
            {
                case AchievementType.DestroyEnemyMilitaryShipsAndBases:
                    switch (level)
                    {
                        case 1:
                            result = TextResolver.GetText("Achievement Level L");
                            break;
                        case 2:
                            result = TextResolver.GetText("Achievement Level C");
                            break;
                        case 3:
                            result = TextResolver.GetText("Achievement Level M");
                            break;
                    }
                    break;
                case AchievementType.DestroyEnemyCivilianShipsAndBases:
                case AchievementType.DestroyEnemyTroops:
                case AchievementType.DestroySpaceMonsters:
                case AchievementType.DestroySilverMists:
                case AchievementType.ConquerEnemyColonies:
                case AchievementType.SuccessfulIntelligenceMissions:
                case AchievementType.EliminateEnemyCharacters:
                case AchievementType.EliminateEnemyEmpires:
                case AchievementType.CaptureEnemyShips:
                case AchievementType.EliminatePirateFactions:
                case AchievementType.SuccessfulRaids:
                case AchievementType.BuildWonders:
                    switch (level)
                    {
                        case 1:
                            result = TextResolver.GetText("Achievement Level I");
                            break;
                        case 2:
                            result = TextResolver.GetText("Achievement Level II");
                            break;
                        case 3:
                            result = TextResolver.GetText("Achievement Level III");
                            break;
                    }
                    break;
            }
            return result;
        }

        public static string ResolveDescription(Achievement achievement)
        {
            string result = string.Empty;
            int level = DetermineAchievementLevel(achievement.Type, achievement.Value);
            int num = DetermineAchievementValueForLevel(achievement.Type, level);
            switch (achievement.Type)
            {
                case AchievementType.AchieveAllRaceVictoryConditions:
                    result = TextResolver.GetText("AchievementType AchieveAllRaceVictoryConditions");
                    break;
                case AchievementType.BreakTreaties:
                    result = TextResolver.GetText("AchievementType BreakTreaties");
                    break;
                case AchievementType.BuildWonders:
                    result = string.Format(TextResolver.GetText("AchievementType BuildWonders"), num.ToString());
                    break;
                case AchievementType.CaptureEnemyShips:
                    result = string.Format(TextResolver.GetText("AchievementType CaptureEnemyShips"), num.ToString());
                    break;
                case AchievementType.ChangeGovernmentToWayOfDarkness:
                    result = TextResolver.GetText("AchievementType ChangeGovernmentToWayOfDarkness");
                    break;
                case AchievementType.ChangeGovernmentToWayOfTheAncients:
                    result = TextResolver.GetText("AchievementType ChangeGovernmentToWayOfTheAncients");
                    break;
                case AchievementType.ConquerEnemyColonies:
                    result = string.Format(TextResolver.GetText("AchievementType ConquerEnemyColonies"), num.ToString());
                    break;
                case AchievementType.DefeatAncients:
                    result = TextResolver.GetText("AchievementType DefeatAncients");
                    break;
                case AchievementType.DefeatLegendaryPirates:
                    result = TextResolver.GetText("AchievementType DefeatLegendaryPirates");
                    break;
                case AchievementType.DefeatShakturi:
                    result = TextResolver.GetText("AchievementType DefeatShakturi");
                    break;
                case AchievementType.DestroyEnemyCivilianShipsAndBases:
                    result = string.Format(TextResolver.GetText("AchievementType DestroyEnemyCivilianShipsAndBases"), num.ToString());
                    break;
                case AchievementType.DestroyEnemyMilitaryShipsAndBases:
                    result = string.Format(TextResolver.GetText("AchievementType DestroyEnemyMilitaryShipsAndBases"), num.ToString());
                    break;
                case AchievementType.DestroyEnemyTroops:
                    result = string.Format(TextResolver.GetText("AchievementType DestroyEnemyTroops"), num.ToString());
                    break;
                case AchievementType.DestroySilverMists:
                    result = string.Format(TextResolver.GetText("AchievementType DestroySilverMists"), num.ToString());
                    break;
                case AchievementType.DestroySpaceMonsters:
                    result = string.Format(TextResolver.GetText("AchievementType DestroySpaceMonsters"), num.ToString());
                    break;
                case AchievementType.EliminateEnemyCharacters:
                    result = string.Format(TextResolver.GetText("AchievementType EliminateEnemyCharacters"), num.ToString());
                    break;
                case AchievementType.EliminateEnemyEmpires:
                    result = string.Format(TextResolver.GetText("AchievementType EliminateEnemyEmpires"), num.ToString());
                    break;
                case AchievementType.EliminatePirateFactions:
                    result = string.Format(TextResolver.GetText("AchievementType EliminatePirateFactions"), num.ToString());
                    break;
                case AchievementType.EmpireSplits:
                    result = TextResolver.GetText("AchievementType EmpireSplits");
                    break;
                case AchievementType.HighestMiningVolume:
                    result = TextResolver.GetText("AchievementType HighestMiningVolume");
                    break;
                case AchievementType.HighestTradeIncome:
                    result = TextResolver.GetText("AchievementType HighestTradeIncome");
                    break;
                case AchievementType.JoinTheFreedomAlliance:
                    result = TextResolver.GetText("AchievementType JoinTheFreedomAlliance");
                    break;
                case AchievementType.JoinTheShakturi:
                    result = TextResolver.GetText("AchievementType JoinTheShakturi");
                    break;
                case AchievementType.OwnOperationalPlanetDestroyer:
                    result = TextResolver.GetText("AchievementType OwnOperationalPlanetDestroyer");
                    break;
                case AchievementType.SpendAllTimeAtWar:
                    result = TextResolver.GetText("AchievementType SpendAllTimeAtWar");
                    break;
                case AchievementType.SpendNoTimeAtWar:
                    result = TextResolver.GetText("AchievementType SpendNoTimeAtWar");
                    break;
                case AchievementType.StartWars:
                    result = TextResolver.GetText("AchievementType StartWars");
                    break;
                case AchievementType.SuccessfulIntelligenceMissions:
                    result = string.Format(TextResolver.GetText("AchievementType SuccessfulIntelligenceMissions"), num.ToString());
                    break;
                case AchievementType.SuccessfulRaids:
                    result = string.Format(TextResolver.GetText("AchievementType SuccessfulRaids"), num.ToString());
                    break;
            }
            return result;
        }

        public static string ResolveTitle(AchievementType achievementType, object additionalData)
        {
            string result = string.Empty;
            switch (achievementType)
            {
                case AchievementType.AchieveAllRaceVictoryConditions:
                    if (additionalData != null && additionalData is Race)
                    {
                        Race race = (Race)additionalData;
                        result = string.Format(TextResolver.GetText("AchievementTitle AchieveAllRaceVictoryConditions"), race.Name);
                    }
                    break;
                case AchievementType.BreakTreaties:
                    result = TextResolver.GetText("AchievementTitle BreakTreaties");
                    break;
                case AchievementType.BuildWonders:
                    result = TextResolver.GetText("AchievementTitle BuildWonders");
                    break;
                case AchievementType.CaptureEnemyShips:
                    result = TextResolver.GetText("AchievementTitle CaptureEnemyShips");
                    break;
                case AchievementType.ChangeGovernmentToWayOfDarkness:
                    result = TextResolver.GetText("AchievementTitle ChangeGovernmentToWayOfDarkness");
                    break;
                case AchievementType.ChangeGovernmentToWayOfTheAncients:
                    result = TextResolver.GetText("AchievementTitle ChangeGovernmentToWayOfTheAncients");
                    break;
                case AchievementType.ConquerEnemyColonies:
                    result = TextResolver.GetText("AchievementTitle ConquerEnemyColonies");
                    break;
                case AchievementType.DefeatAncients:
                    result = TextResolver.GetText("AchievementTitle DefeatAncients");
                    break;
                case AchievementType.DefeatLegendaryPirates:
                    result = TextResolver.GetText("AchievementTitle DefeatLegendaryPirates");
                    break;
                case AchievementType.DefeatShakturi:
                    result = TextResolver.GetText("AchievementTitle DefeatShakturi");
                    break;
                case AchievementType.DestroyEnemyCivilianShipsAndBases:
                    result = TextResolver.GetText("AchievementTitle DestroyEnemyCivilianShipsAndBases");
                    break;
                case AchievementType.DestroyEnemyMilitaryShipsAndBases:
                    result = TextResolver.GetText("AchievementTitle DestroyEnemyMilitaryShipsAndBases");
                    break;
                case AchievementType.DestroyEnemyTroops:
                    result = TextResolver.GetText("AchievementTitle DestroyEnemyTroops");
                    break;
                case AchievementType.DestroySilverMists:
                    result = TextResolver.GetText("AchievementTitle DestroySilverMists");
                    break;
                case AchievementType.DestroySpaceMonsters:
                    result = TextResolver.GetText("AchievementTitle DestroySpaceMonsters");
                    break;
                case AchievementType.EliminateEnemyCharacters:
                    result = TextResolver.GetText("AchievementTitle EliminateEnemyCharacters");
                    break;
                case AchievementType.EliminateEnemyEmpires:
                    result = TextResolver.GetText("AchievementTitle EliminateEnemyEmpires");
                    break;
                case AchievementType.EliminatePirateFactions:
                    result = TextResolver.GetText("AchievementTitle EliminatePirateFactions");
                    break;
                case AchievementType.EmpireSplits:
                    result = TextResolver.GetText("AchievementTitle EmpireSplits");
                    break;
                case AchievementType.HighestMiningVolume:
                    result = TextResolver.GetText("AchievementTitle HighestMiningVolume");
                    break;
                case AchievementType.HighestTradeIncome:
                    result = TextResolver.GetText("AchievementTitle HighestTradeIncome");
                    break;
                case AchievementType.JoinTheFreedomAlliance:
                    result = TextResolver.GetText("AchievementTitle JoinTheFreedomAlliance");
                    break;
                case AchievementType.JoinTheShakturi:
                    result = TextResolver.GetText("AchievementTitle JoinTheShakturi");
                    break;
                case AchievementType.OwnOperationalPlanetDestroyer:
                    result = TextResolver.GetText("AchievementTitle OwnOperationalPlanetDestroyer");
                    break;
                case AchievementType.SpendAllTimeAtWar:
                    result = TextResolver.GetText("AchievementTitle SpendAllTimeAtWar");
                    break;
                case AchievementType.SpendNoTimeAtWar:
                    result = TextResolver.GetText("AchievementTitle SpendNoTimeAtWar");
                    break;
                case AchievementType.StartWars:
                    result = TextResolver.GetText("AchievementTitle StartWars");
                    break;
                case AchievementType.SuccessfulIntelligenceMissions:
                    result = TextResolver.GetText("AchievementTitle SuccessfulIntelligenceMissions");
                    break;
                case AchievementType.SuccessfulRaids:
                    result = TextResolver.GetText("AchievementTitle SuccessfulRaids");
                    break;
            }
            return result;
        }

        public int CalculateHighestMiningVolume()
        {
            int num = 0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Counters != null)
                {
                    int num2 = empire.Counters.MiningExtractionGas + empire.Counters.MiningExtractionLuxury + empire.Counters.MiningExtractionStrategic;
                    if (num2 > num)
                    {
                        num = num2;
                    }
                }
            }
            return num;
        }

        public double CalculateHighestTradeVolume()
        {
            double num = 0.0;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Counters != null && empire.Counters.TradeIncomeTotalVolume > num)
                {
                    num = empire.Counters.TradeIncomeTotalVolume;
                }
            }
            return num;
        }

        public void DoCharacterEventLeader(CharacterEventType eventType, object eventData, Empire leaderEmpire)
        {
            CharacterList sourceCharacters = new CharacterList();
            DoCharacterEvent(eventType, eventData, sourceCharacters, includeLeader: true, leaderEmpire);
        }

        public void DoCharacterEvent(CharacterEventType eventType, object eventData, Character character)
        {
            CharacterList characterList = new CharacterList();
            characterList.Add(character);
            DoCharacterEvent(eventType, eventData, characterList);
        }

        public void DoCharacterEvent(CharacterEventType eventType, object eventData, CharacterList characters)
        {
            DoCharacterEvent(eventType, eventData, characters, includeLeader: false, null);
        }

        public void DoCharacterEvent(CharacterEventType eventType, object eventData, Character character, bool includeLeader, Empire leaderEmpire)
        {
            CharacterList characterList = new CharacterList();
            characterList.Add(character);
            DoCharacterEvent(eventType, eventData, characterList, includeLeader, leaderEmpire);
        }

        public void DoCharacterEvent(CharacterEventType eventType, object eventData, CharacterList sourceCharacters, bool includeLeader, Empire leaderEmpire)
        {
            if (sourceCharacters == null || sourceCharacters.Count <= 0)
            {
                return;
            }
            CharacterList characterList = new CharacterList();
            characterList.AddRange(sourceCharacters);
            if (includeLeader && leaderEmpire != null)
            {
                if (leaderEmpire.PirateEmpireBaseHabitat == null)
                {
                    CharacterList charactersByRole = leaderEmpire.Characters.GetCharactersByRole(CharacterRole.Leader);
                    for (int i = 0; i < charactersByRole.Count; i++)
                    {
                        Character character = charactersByRole[i];
                        if (character != null && !characterList.Contains(character))
                        {
                            characterList.Add(character);
                        }
                    }
                }
                else
                {
                    CharacterList charactersByRole2 = leaderEmpire.Characters.GetCharactersByRole(CharacterRole.PirateLeader);
                    for (int j = 0; j < charactersByRole2.Count; j++)
                    {
                        Character character2 = charactersByRole2[j];
                        if (character2 != null && !characterList.Contains(character2))
                        {
                            characterList.Add(character2);
                        }
                    }
                }
            }
            List<float> relativeImportances = new List<float>();
            List<CharacterSkillType> list = DetermineCharacterSkillsAffectedByEvent(eventType, out relativeImportances);
            if (eventType == CharacterEventType.GroundInvasion && eventData != null && eventData is InvasionStats)
            {
                InvasionStats invasionStats = (InvasionStats)eventData;
                if (invasionStats.Colony != null && invasionStats.Colony.Troops != null)
                {
                    if (list.Contains(CharacterSkillType.TroopStrengthArmor) && invasionStats.Colony.Troops.CountByType(TroopType.Armored) <= 0)
                    {
                        list.Remove(CharacterSkillType.TroopStrengthArmor);
                    }
                    if (list.Contains(CharacterSkillType.TroopStrengthInfantry) && invasionStats.Colony.Troops.CountByType(TroopType.Infantry) <= 0)
                    {
                        list.Remove(CharacterSkillType.TroopStrengthInfantry);
                    }
                    if (list.Contains(CharacterSkillType.TroopStrengthSpecialForces) && invasionStats.Colony.Troops.CountByType(TroopType.SpecialForces) <= 0)
                    {
                        list.Remove(CharacterSkillType.TroopStrengthSpecialForces);
                    }
                    if (list.Contains(CharacterSkillType.TroopStrengthPlanetaryDefense) && invasionStats.Colony.Troops.CountByType(TroopType.Artillery) <= 0)
                    {
                        list.Remove(CharacterSkillType.TroopStrengthPlanetaryDefense);
                    }
                }
            }
            for (int k = 0; k < characterList.Count; k++)
            {
                Character character3 = characterList[k];
                if (character3 == null)
                {
                    continue;
                }
                if (DetermineCharacterEventRelevantToRole(eventType, character3.Role))
                {
                    long currentStarDate = CurrentStarDate;
                    CharacterEvent characterEvent = new CharacterEvent(eventType, eventData, currentStarDate);
                    character3.EventHistory.Add(characterEvent);
                }
                List<CharacterTraitType> traits = Character.DetermineValidTraitsForRole(character3.Role);
                List<CharacterTraitType> list2 = new List<CharacterTraitType>();
                List<CharacterTraitType> list3 = new List<CharacterTraitType>();
                List<CharacterSkillType> validSkillsForRole = Character.DetermineValidSkillsForRole(character3.Role);
                bool flag = Rnd.Next(0, 5) == 1;
                bool flag2 = Rnd.Next(0, 20) == 1;
                bool flag3 = Rnd.Next(0, 80) == 1;
                if (character3.BonusesKnown)
                {
                    switch (eventType)
                    {
                        case CharacterEventType.Boarding:
                            {
                                if (!flag || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                if (Rnd.Next(0, 2) == 1)
                                {
                                    list2.Add(CharacterTraitType.BountyHunter);
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType2 = list3[Rnd.Next(0, list3.Count)];
                                if (character3.AddTrait(characterTraitType2, starting: false, this))
                                {
                                    string empty = string.Empty;
                                    if (eventData != null && eventData is BuiltObject)
                                    {
                                        BuiltObject builtObject = (BuiltObject)eventData;
                                        empty = string.Format(TextResolver.GetText("Character New Trait Boarding Location"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType2), builtObject.Name);
                                    }
                                    else
                                    {
                                        empty = string.Format(TextResolver.GetText("Character New Trait Boarding"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType2));
                                    }
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, empty);
                                }
                                break;
                            }
                        case CharacterEventType.Raid:
                            {
                                if (!flag || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                if (Rnd.Next(0, 2) == 1)
                                {
                                    list2.Add(CharacterTraitType.BountyHunter);
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType25 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType25, starting: false, this))
                                {
                                    break;
                                }
                                string empty4 = string.Empty;
                                if (eventData != null)
                                {
                                    string text19 = string.Empty;
                                    if (eventData is Habitat)
                                    {
                                        text19 = ((Habitat)eventData).Name;
                                    }
                                    else if (eventData is BuiltObject)
                                    {
                                        text19 = ((BuiltObject)eventData).Name;
                                    }
                                    empty4 = string.Format(TextResolver.GetText("Character New Trait Raid Location"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType25), text19);
                                }
                                else
                                {
                                    empty4 = string.Format(TextResolver.GetText("Character New Trait Raid"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType25));
                                }
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, empty4);
                                break;
                            }
                        case CharacterEventType.SmugglingSuccess:
                            {
                                if (!flag || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Smuggler);
                                if (Rnd.Next(0, 3) == 1)
                                {
                                    list2.Add(CharacterTraitType.Addict);
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType9 = list3[Rnd.Next(0, list3.Count)];
                                if (character3.AddTrait(characterTraitType9, starting: false, this))
                                {
                                    string empty2 = string.Empty;
                                    if (eventData != null && eventData is StellarObject)
                                    {
                                        StellarObject stellarObject = (StellarObject)eventData;
                                        empty2 = string.Format(TextResolver.GetText("Character New Trait Smuggling Success Location"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType9), stellarObject.Name);
                                    }
                                    else
                                    {
                                        empty2 = string.Format(TextResolver.GetText("Character New Trait Smuggling Success"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType9));
                                    }
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, empty2);
                                }
                                break;
                            }
                        case CharacterEventType.CriticalResearchFailure:
                            if (flag && !DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) && character3.AddTrait(CharacterTraitType.Methodical, starting: false, this) && eventData != null && eventData is ResearchNode)
                            {
                                ResearchNode researchNode4 = (ResearchNode)eventData;
                                string text16 = string.Empty;
                                if (researchNode4 != null)
                                {
                                    text16 = researchNode4.Name;
                                }
                                string description20 = string.Format(TextResolver.GetText("Character New Trait Critical Research Failure"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(CharacterTraitType.Methodical), text16);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description20);
                            }
                            break;
                        case CharacterEventType.CriticalResearchSuccess:
                            if (flag && !DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) && character3.AddTrait(CharacterTraitType.Creative, starting: false, this) && eventData != null && eventData is ResearchNode)
                            {
                                ResearchNode researchNode = (ResearchNode)eventData;
                                string text9 = string.Empty;
                                if (researchNode != null)
                                {
                                    text9 = researchNode.Name;
                                }
                                string description10 = string.Format(TextResolver.GetText("Character New Trait Critical Research Success"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(CharacterTraitType.Creative), text9);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description10);
                            }
                            break;
                        case CharacterEventType.TargetOfFailedAssassination:
                            if (flag && !DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) && character3.AddTrait(CharacterTraitType.Paranoid, starting: false, this))
                            {
                                string description2 = string.Format(TextResolver.GetText("Character New Trait Failed Assassination"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(CharacterTraitType.Paranoid));
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description2);
                            }
                            break;
                        case CharacterEventType.WarStarted:
                            if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                            {
                                break;
                            }
                            list2.Add(CharacterTraitType.PeaceThroughStrength);
                            if (eventData != null && eventData is Empire)
                            {
                                Empire empire2 = (Empire)eventData;
                                if (empire2.DominantRace != null && character3.Empire.DominantRace != null && empire2.DominantRace.FamilyId != character3.Empire.DominantRace.FamilyId)
                                {
                                    list2.Add(CharacterTraitType.Xenophobic);
                                    list2.Add(CharacterTraitType.IntelligenceXenophobic);
                                }
                            }
                            list3 = IntersectTraitLists(traits, list2);
                            if (list3.Count > 0)
                            {
                                CharacterTraitType characterTraitType12 = list3[Rnd.Next(0, list3.Count)];
                                if (character3.AddTrait(characterTraitType12, starting: false, this))
                                {
                                    string description11 = string.Format(TextResolver.GetText("Character New Trait War Started"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType12));
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description11);
                                }
                            }
                            break;
                        case CharacterEventType.WarEnded:
                            if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                            {
                                break;
                            }
                            list2.Add(CharacterTraitType.Drunk);
                            list3 = IntersectTraitLists(traits, list2);
                            if (list3.Count > 0)
                            {
                                CharacterTraitType characterTraitType21 = list3[Rnd.Next(0, list3.Count)];
                                if (character3.AddTrait(characterTraitType21, starting: false, this))
                                {
                                    string description21 = string.Format(TextResolver.GetText("Character New Trait War Ended"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType21));
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description21);
                                }
                            }
                            break;
                        case CharacterEventType.GroundInvasion:
                            {
                                if (!flag || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) || eventData == null || !(eventData is InvasionStats))
                                {
                                    break;
                                }
                                InvasionStats invasionStats2 = (InvasionStats)eventData;
                                if (invasionStats2 == null || invasionStats2.Colony == null)
                                {
                                    break;
                                }
                                if (invasionStats2.Colony.Empire != null)
                                {
                                    if (invasionStats2.Colony.Empire == character3.Empire)
                                    {
                                        list2.AddRange(new CharacterTraitType[2]
                                        {
                                CharacterTraitType.GoodStrategist,
                                CharacterTraitType.GoodTactician
                                        });
                                        if (invasionStats2.DefendingEmpire == character3.Empire)
                                        {
                                            list2.Add(CharacterTraitType.StrongGroundDefender);
                                            if (invasionStats2.TroopsDamageToDefenders < invasionStats2.TroopsDamageToInvaders)
                                            {
                                                list2.Add(CharacterTraitType.CarefulAttacker);
                                            }
                                            else
                                            {
                                                list2.Add(CharacterTraitType.RecklessAttacker);
                                            }
                                        }
                                        else
                                        {
                                            list2.Add(CharacterTraitType.StrongGroundAttacker);
                                            if (invasionStats2.TroopsDamageToDefenders < invasionStats2.TroopsDamageToInvaders)
                                            {
                                                list2.Add(CharacterTraitType.RecklessAttacker);
                                            }
                                            else
                                            {
                                                list2.Add(CharacterTraitType.CarefulAttacker);
                                            }
                                        }
                                        if (character3.Location != null)
                                        {
                                            double num = CalculateDistance(character3.Location.Xpos, character3.Location.Ypos, invasionStats2.Colony.Xpos, invasionStats2.Colony.Ypos);
                                            if (num < 3000.0)
                                            {
                                                list2.Add(CharacterTraitType.LocalDefenseTactics);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        list2.AddRange(new CharacterTraitType[2]
                                        {
                                CharacterTraitType.PoorStrategist,
                                CharacterTraitType.PoorTactician
                                        });
                                        if (invasionStats2.DefendingEmpire == character3.Empire)
                                        {
                                            list2.Add(CharacterTraitType.PoorGroundDefender);
                                            if (invasionStats2.DestroyedDefendingTroops > 4)
                                            {
                                                list2.Add(CharacterTraitType.Drunk);
                                            }
                                            if (invasionStats2.Colony.Population != null && invasionStats2.Colony.Population.TotalAmount > 100000000)
                                            {
                                                list2.Add(CharacterTraitType.PeaceThroughStrength);
                                            }
                                        }
                                        else
                                        {
                                            list2.Add(CharacterTraitType.PoorGroundAttacker);
                                            if (invasionStats2.DestroyedInvadingTroops > 4)
                                            {
                                                list2.Add(CharacterTraitType.Drunk);
                                            }
                                        }
                                    }
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count > 0)
                                {
                                    CharacterTraitType characterTraitType26 = list3[Rnd.Next(0, list3.Count)];
                                    if (character3.AddTrait(characterTraitType26, starting: false, this))
                                    {
                                        string description25 = string.Format(TextResolver.GetText("Character New Trait Ground Invasion"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType26), invasionStats2.Colony.Name);
                                        character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description25);
                                    }
                                }
                                break;
                            }
                        case CharacterEventType.SpaceBattle:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) || eventData == null || !(eventData is SpaceBattleStats))
                                {
                                    break;
                                }
                                SpaceBattleStats spaceBattleStats = (SpaceBattleStats)eventData;
                                if (spaceBattleStats == null)
                                {
                                    break;
                                }
                                if (spaceBattleStats.DestroyedEnemyShipBaseSize + spaceBattleStats.DestroyedEnemyShipBaseSizeByFighters > spaceBattleStats.DestroyedFriendlyShipBaseSize + spaceBattleStats.DestroyedFriendlyShipBaseSizeByFighters)
                                {
                                    list2.AddRange(new CharacterTraitType[4]
                                    {
                            CharacterTraitType.GoodStrategist,
                            CharacterTraitType.GoodTactician,
                            CharacterTraitType.StrongSpaceAttacker,
                            CharacterTraitType.StrongSpaceDefender
                                    });
                                    if (spaceBattleStats.DestroyedFriendlyShipsCapitalShip > 0 || spaceBattleStats.DestroyedFriendlyShipsCruiser > 0 || spaceBattleStats.DestroyedFriendlyShipsCarrier > 0 || spaceBattleStats.DestroyedFriendlyShipsDestroyer > 0 || spaceBattleStats.DestroyedEnemyShipsTroopTransport > 0 || spaceBattleStats.DestroyedEnemyShipsResupplyShip > 0)
                                    {
                                        list2.Add(CharacterTraitType.Drunk);
                                    }
                                    if (spaceBattleStats.Location != null && spaceBattleStats.NearLocation)
                                    {
                                        if (spaceBattleStats.Location.Empire != null && spaceBattleStats.Location.Empire == character3.Empire)
                                        {
                                            list2.Add(CharacterTraitType.LocalDefenseTactics);
                                        }
                                        else if (spaceBattleStats.Location.BasesAtHabitat != null && spaceBattleStats.Location.BasesAtHabitat.Count > 0)
                                        {
                                            for (int l = 0; l < spaceBattleStats.Location.BasesAtHabitat.Count; l++)
                                            {
                                                BuiltObject builtObject5 = spaceBattleStats.Location.BasesAtHabitat[l];
                                                if (builtObject5 != null && !builtObject5.HasBeenDestroyed && builtObject5.Empire != null && builtObject5.Empire == character3.Empire)
                                                {
                                                    list2.Add(CharacterTraitType.LocalDefenseTactics);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    list2.AddRange(new CharacterTraitType[4]
                                    {
                            CharacterTraitType.PoorStrategist,
                            CharacterTraitType.PoorTactician,
                            CharacterTraitType.PoorSpaceAttacker,
                            CharacterTraitType.PoorSpaceDefender
                                    });
                                    if (spaceBattleStats.DestroyedFriendlyShipsCapitalShip > 0 || spaceBattleStats.DestroyedFriendlyShipsCruiser > 0 || spaceBattleStats.DestroyedFriendlyShipsCarrier > 0 || spaceBattleStats.DestroyedFriendlyShipsDestroyer > 0 || spaceBattleStats.DestroyedFriendlyShipsFrigate > 0 || spaceBattleStats.DestroyedFriendlyShipsEscort > 0 || spaceBattleStats.DestroyedEnemyShipsTroopTransport > 0 || spaceBattleStats.DestroyedEnemyShipsResupplyShip > 0)
                                    {
                                        list2.Add(CharacterTraitType.Drunk);
                                    }
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count > 0)
                                {
                                    CharacterTraitType characterTraitType11 = list3[Rnd.Next(0, list3.Count)];
                                    if (character3.AddTrait(characterTraitType11, starting: false, this))
                                    {
                                        string empty3 = string.Empty;
                                        empty3 = ((spaceBattleStats.Location == null) ? string.Format(TextResolver.GetText("Character New Trait Space Battle"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType11)) : string.Format(TextResolver.GetText("Character New Trait Space Battle With Location"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType11), spaceBattleStats.Location.Name));
                                        character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, empty3);
                                    }
                                }
                                break;
                            }
                        case CharacterEventType.ResearchAdvanceEnergy:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) || eventData == null || !(eventData is ResearchNode))
                                {
                                    break;
                                }
                                ResearchNode researchNode5 = (ResearchNode)eventData;
                                if (researchNode5 == null || researchNode5.Industry != IndustryType.Energy)
                                {
                                    break;
                                }
                                if (researchNode5.Category == ComponentCategoryType.Extractor)
                                {
                                    list2.Add(CharacterTraitType.Expansionist);
                                    list2.Add(CharacterTraitType.LaborOriented);
                                }
                                else if (researchNode5.Category == ComponentCategoryType.Construction)
                                {
                                    list2.Add(CharacterTraitType.LaborOriented);
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count > 0)
                                {
                                    CharacterTraitType characterTraitType31 = list3[Rnd.Next(0, list3.Count)];
                                    if (character3.AddTrait(characterTraitType31, starting: false, this))
                                    {
                                        string description30 = string.Format(TextResolver.GetText("Character New Trait Research Advance"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType31), researchNode5.Name);
                                        character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description30);
                                    }
                                }
                                break;
                            }
                        case CharacterEventType.ResearchAdvanceHighTech:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) || eventData == null || !(eventData is ResearchNode))
                                {
                                    break;
                                }
                                ResearchNode researchNode2 = (ResearchNode)eventData;
                                if (researchNode2 == null || researchNode2.Industry != IndustryType.HighTech)
                                {
                                    break;
                                }
                                if (researchNode2.Abilities != null && researchNode2.Abilities.Count > 0 && (researchNode2.Abilities[0].Type == ResearchAbilityType.ColonizeHabitatType || researchNode2.Abilities[0].Type == ResearchAbilityType.PopulationGrowthRate))
                                {
                                    list2.Add(CharacterTraitType.Expansionist);
                                }
                                else if (researchNode2.Category == ComponentCategoryType.Storage)
                                {
                                    list2.Add(CharacterTraitType.Expansionist);
                                }
                                else if (researchNode2.ResolveComponentType() == ComponentType.HabitationMedicalCenter)
                                {
                                    list2.Add(CharacterTraitType.HealthOriented);
                                }
                                else if (researchNode2.ResolveComponentType() == ComponentType.ComputerCommandCenter)
                                {
                                    list2.Add(CharacterTraitType.GoodStrategist);
                                }
                                else if (researchNode2.ResolveComponentType() == ComponentType.HabitationRecreationCenter)
                                {
                                    list2.Add(CharacterTraitType.Uninhibited);
                                    list2.Add(CharacterTraitType.Addict);
                                    list2.Add(CharacterTraitType.IntelligenceUninhibited);
                                    list2.Add(CharacterTraitType.IntelligenceAddict);
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count > 0)
                                {
                                    CharacterTraitType characterTraitType13 = list3[Rnd.Next(0, list3.Count)];
                                    if (character3.AddTrait(characterTraitType13, starting: false, this))
                                    {
                                        string description12 = string.Format(TextResolver.GetText("Character New Trait Research Advance"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType13), researchNode2.Name);
                                        character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description12);
                                    }
                                }
                                break;
                            }
                        case CharacterEventType.ResearchAdvanceWeapons:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) || eventData == null || !(eventData is ResearchNode))
                                {
                                    break;
                                }
                                ResearchNode researchNode3 = (ResearchNode)eventData;
                                if (researchNode3 == null || researchNode3.Industry != IndustryType.Weapon)
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.PeaceThroughStrength);
                                list2.Add(CharacterTraitType.Isolationist);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count > 0)
                                {
                                    CharacterTraitType characterTraitType16 = list3[Rnd.Next(0, list3.Count)];
                                    if (character3.AddTrait(characterTraitType16, starting: false, this))
                                    {
                                        string description15 = string.Format(TextResolver.GetText("Character New Trait Research Advance"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType16), researchNode3.Name);
                                        character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description15);
                                    }
                                }
                                break;
                            }
                        case CharacterEventType.Subjugated:
                            {
                                if (!flag || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Pacifist);
                                list2.Add(CharacterTraitType.Weak);
                                list2.Add(CharacterTraitType.IntelligenceWeak);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType29 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType29, starting: false, this))
                                {
                                    break;
                                }
                                string text22 = string.Empty;
                                if (eventData != null && eventData is Empire)
                                {
                                    Empire empire3 = (Empire)eventData;
                                    if (empire3 != null)
                                    {
                                        text22 = empire3.Name;
                                    }
                                }
                                string description28 = string.Format(TextResolver.GetText("Character New Trait Subjugated"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType29), text22);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description28);
                                break;
                            }
                        case CharacterEventType.BuildMilitaryShip:
                            {
                                if (!flag3 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Isolationist);
                                list2.Add(CharacterTraitType.Engineer);
                                list2.Add(CharacterTraitType.Organized);
                                list2.Add(CharacterTraitType.Technical);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType3 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType3, starting: false, this))
                                {
                                    break;
                                }
                                string text2 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject2 = (BuiltObject)eventData;
                                    if (builtObject2 != null)
                                    {
                                        text2 = builtObject2.Name;
                                    }
                                }
                                string description3 = string.Format(TextResolver.GetText("Character New Trait Build Military Ship"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType3), text2);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description3);
                                break;
                            }
                        case CharacterEventType.BuildCivilianShip:
                            {
                                if (!flag3 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.LaborOriented);
                                list2.Add(CharacterTraitType.Technical);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType20 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType20, starting: false, this))
                                {
                                    break;
                                }
                                string text15 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject10 = (BuiltObject)eventData;
                                    if (builtObject10 != null)
                                    {
                                        text15 = builtObject10.Name;
                                    }
                                }
                                string description19 = string.Format(TextResolver.GetText("Character New Trait Build Civilian Ship"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType20), text15);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description19);
                                break;
                            }
                        case CharacterEventType.BuildColonyShip:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Expansionist);
                                list2.Add(CharacterTraitType.Organized);
                                list2.Add(CharacterTraitType.Technical);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType5 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType5, starting: false, this))
                                {
                                    break;
                                }
                                string text4 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject3 = (BuiltObject)eventData;
                                    if (builtObject3 != null)
                                    {
                                        text4 = builtObject3.Name;
                                    }
                                }
                                string description5 = string.Format(TextResolver.GetText("Character New Trait Build Colony Ship"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType5), text4);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description5);
                                break;
                            }
                        case CharacterEventType.BuildSpaceport:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject7 = (BuiltObject)eventData;
                                    if (builtObject7 != null && builtObject7.MedicalCapacity > 0)
                                    {
                                        list2.Add(CharacterTraitType.HealthOriented);
                                    }
                                }
                                list2.Add(CharacterTraitType.Engineer);
                                list2.Add(CharacterTraitType.Organized);
                                list2.Add(CharacterTraitType.Technical);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType15 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType15, starting: false, this))
                                {
                                    break;
                                }
                                string text11 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject8 = (BuiltObject)eventData;
                                    if (builtObject8 != null)
                                    {
                                        text11 = builtObject8.Name;
                                    }
                                }
                                string description14 = string.Format(TextResolver.GetText("Character New Trait Build Spaceport"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType15), text11);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description14);
                                break;
                            }
                        case CharacterEventType.BuildMilitaryBase:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Organized);
                                list2.Add(CharacterTraitType.Technical);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType22 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType22, starting: false, this))
                                {
                                    break;
                                }
                                string text17 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject11 = (BuiltObject)eventData;
                                    if (builtObject11 != null)
                                    {
                                        text17 = builtObject11.Name;
                                    }
                                }
                                string description22 = string.Format(TextResolver.GetText("Character New Trait Build Military Base"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType22), text17);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description22);
                                break;
                            }
                        case CharacterEventType.BuildResearchStationEnergy:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Engineer);
                                list2.Add(CharacterTraitType.Organized);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType18 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType18, starting: false, this))
                                {
                                    break;
                                }
                                string text14 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject9 = (BuiltObject)eventData;
                                    if (builtObject9 != null)
                                    {
                                        text14 = builtObject9.Name;
                                    }
                                }
                                string description17 = string.Format(TextResolver.GetText("Character New Trait Build Research Station"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType18), text14);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description17);
                                break;
                            }
                        case CharacterEventType.BuildResearchStationHighTech:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Engineer);
                                list2.Add(CharacterTraitType.Organized);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType27 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType27, starting: false, this))
                                {
                                    break;
                                }
                                string text20 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject12 = (BuiltObject)eventData;
                                    if (builtObject12 != null)
                                    {
                                        text20 = builtObject12.Name;
                                    }
                                }
                                string description26 = string.Format(TextResolver.GetText("Character New Trait Build Research Station"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType27), text20);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description26);
                                break;
                            }
                        case CharacterEventType.BuildResearchStationWeapons:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Engineer);
                                list2.Add(CharacterTraitType.Organized);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType14 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType14, starting: false, this))
                                {
                                    break;
                                }
                                string text10 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject6 = (BuiltObject)eventData;
                                    if (builtObject6 != null)
                                    {
                                        text10 = builtObject6.Name;
                                    }
                                }
                                string description13 = string.Format(TextResolver.GetText("Character New Trait Build Research Station"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType14), text10);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description13);
                                break;
                            }
                        case CharacterEventType.BuildResortBase:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Tolerant);
                                list2.Add(CharacterTraitType.IntelligenceTolerant);
                                list2.Add(CharacterTraitType.Organized);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType6 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType6, starting: false, this))
                                {
                                    break;
                                }
                                string text5 = string.Empty;
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject4 = (BuiltObject)eventData;
                                    if (builtObject4 != null)
                                    {
                                        text5 = builtObject4.Name;
                                    }
                                }
                                string description6 = string.Format(TextResolver.GetText("Character New Trait Build Resort Base"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType6), text5);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description6);
                                break;
                            }
                        case CharacterEventType.BuildFacility:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Organized);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType24 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType24, starting: false, this))
                                {
                                    break;
                                }
                                string text18 = string.Empty;
                                if (eventData != null && eventData is PlanetaryFacility)
                                {
                                    PlanetaryFacility planetaryFacility3 = (PlanetaryFacility)eventData;
                                    if (planetaryFacility3 != null)
                                    {
                                        text18 = planetaryFacility3.Name;
                                    }
                                }
                                string description24 = string.Format(TextResolver.GetText("Character New Trait Build Facility"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType24), text18);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description24);
                                break;
                            }
                        case CharacterEventType.BuildWonder:
                            {
                                if (!flag || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                if (eventData != null && eventData is PlanetaryFacility)
                                {
                                    PlanetaryFacility planetaryFacility = (PlanetaryFacility)eventData;
                                    if (planetaryFacility != null && planetaryFacility.Type == PlanetaryFacilityType.Wonder && (planetaryFacility.WonderType == WonderType.ColonyPopulationGrowth || planetaryFacility.WonderType == WonderType.EmpirePopulationGrowth))
                                    {
                                        list2.Add(CharacterTraitType.HealthOriented);
                                    }
                                }
                                list2.Add(CharacterTraitType.Organized);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType4 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType4, starting: false, this))
                                {
                                    break;
                                }
                                string text3 = string.Empty;
                                if (eventData != null && eventData is PlanetaryFacility)
                                {
                                    PlanetaryFacility planetaryFacility2 = (PlanetaryFacility)eventData;
                                    if (planetaryFacility2 != null)
                                    {
                                        text3 = planetaryFacility2.Name;
                                    }
                                }
                                string description4 = string.Format(TextResolver.GetText("Character New Trait Build Wonder"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType4), text3);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description4);
                                break;
                            }
                        case CharacterEventType.TreatySigned:
                            {
                                if (!flag || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData) || eventData == null || !(eventData is DiplomaticRelation))
                                {
                                    break;
                                }
                                DiplomaticRelation diplomaticRelation = (DiplomaticRelation)eventData;
                                if (diplomaticRelation == null || diplomaticRelation.OtherEmpire == null)
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Diplomat);
                                list2.Add(CharacterTraitType.FreeTrader);
                                list2.Add(CharacterTraitType.Measured);
                                list2.Add(CharacterTraitType.IntelligenceMeasured);
                                if (diplomaticRelation.OtherEmpire.DominantRace != null && character3.Empire.DominantRace != null && diplomaticRelation.OtherEmpire.DominantRace.FamilyId != character3.Empire.DominantRace.FamilyId)
                                {
                                    list2.Add(CharacterTraitType.Tolerant);
                                    list2.Add(CharacterTraitType.IntelligenceTolerant);
                                }
                                if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact)
                                {
                                    list2.Add(CharacterTraitType.EloquentSpeaker);
                                    list2.Add(CharacterTraitType.IntelligenceEloquentSpeaker);
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count > 0)
                                {
                                    CharacterTraitType characterTraitType19 = list3[Rnd.Next(0, list3.Count)];
                                    if (character3.AddTrait(characterTraitType19, starting: false, this))
                                    {
                                        string description18 = string.Format(TextResolver.GetText("Character New Trait Treaty Signed"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType19), diplomaticRelation.OtherEmpire.Name);
                                        character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description18);
                                    }
                                }
                                break;
                            }
                        case CharacterEventType.TreatyBroken:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Protectionist);
                                list2.Add(CharacterTraitType.PoorSpeaker);
                                list2.Add(CharacterTraitType.IntelligencePoorSpeaker);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType8 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType8, starting: false, this))
                                {
                                    break;
                                }
                                string text7 = string.Empty;
                                if (eventData != null && eventData is Empire)
                                {
                                    Empire empire = (Empire)eventData;
                                    if (empire != null)
                                    {
                                        text7 = empire.Name;
                                    }
                                }
                                string description8 = string.Format(TextResolver.GetText("Character New Trait Treaty Broken"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType8), text7);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description8);
                                break;
                            }
                        case CharacterEventType.AmbassadorAssignedToEmpire:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.Linguist);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType30 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType30, starting: false, this))
                                {
                                    break;
                                }
                                string text23 = string.Empty;
                                if (eventData != null && eventData is Empire)
                                {
                                    Empire empire4 = (Empire)eventData;
                                    if (empire4 != null)
                                    {
                                        text23 = empire4.Name;
                                    }
                                }
                                string description29 = string.Format(TextResolver.GetText("Character New Trait Ambassador Assigned To Empire"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType30), text23);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description29);
                                break;
                            }
                        case CharacterEventType.TroopComplete:
                            {
                                if (!flag3 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.GoodRecruiter);
                                list2.Add(CharacterTraitType.GoodGroundLogistician);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType17 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType17, starting: false, this))
                                {
                                    break;
                                }
                                string text12 = string.Empty;
                                string text13 = string.Empty;
                                if (eventData != null && eventData is Troop)
                                {
                                    Troop troop = (Troop)eventData;
                                    if (troop != null)
                                    {
                                        text12 = troop.Name;
                                        if (troop.Colony != null)
                                        {
                                            text13 = troop.Colony.Name;
                                        }
                                        else if (troop.BuiltObject != null)
                                        {
                                            text13 = troop.BuiltObject.Name;
                                        }
                                    }
                                }
                                string description16 = string.Format(TextResolver.GetText("Character New Trait Troop Complete"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType17), text13, text12);
                                character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description16);
                                break;
                            }
                        case CharacterEventType.IntelligenceMissionFailEspionage:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.DoubleAgent);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType7 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType7, starting: false, this) || eventData == null || !(eventData is IntelligenceMission))
                                {
                                    break;
                                }
                                IntelligenceMission intelligenceMission2 = (IntelligenceMission)eventData;
                                if (intelligenceMission2 != null)
                                {
                                    string text6 = string.Empty;
                                    if (intelligenceMission2.Agent != null)
                                    {
                                        text6 = intelligenceMission2.Agent.Name;
                                    }
                                    string description7 = string.Format(TextResolver.GetText("Character New Trait Intelligence Mission Failure"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType7), ResolveDescription(intelligenceMission2.Type), text6);
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description7);
                                }
                                break;
                            }
                        case CharacterEventType.IntelligenceMissionFailSabotage:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.DoubleAgent);
                                list2.Add(CharacterTraitType.IntelligenceAddict);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType28 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType28, starting: false, this) || eventData == null || !(eventData is IntelligenceMission))
                                {
                                    break;
                                }
                                IntelligenceMission intelligenceMission5 = (IntelligenceMission)eventData;
                                if (intelligenceMission5 != null)
                                {
                                    string text21 = string.Empty;
                                    if (intelligenceMission5.Agent != null)
                                    {
                                        text21 = intelligenceMission5.Agent.Name;
                                    }
                                    string description27 = string.Format(TextResolver.GetText("Character New Trait Intelligence Mission Failure"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType28), ResolveDescription(intelligenceMission5.Type), text21);
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description27);
                                }
                                break;
                            }
                        case CharacterEventType.IntelligenceMissionInterceptEnemy:
                            if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                            {
                                break;
                            }
                            list2.Add(CharacterTraitType.IntelligenceXenophobic);
                            list3 = IntersectTraitLists(traits, list2);
                            if (list3.Count > 0)
                            {
                                CharacterTraitType characterTraitType23 = list3[Rnd.Next(0, list3.Count)];
                                if (character3.AddTrait(characterTraitType23, starting: false, this))
                                {
                                    string description23 = string.Format(TextResolver.GetText("Character New Trait Intercept Foreign Agent"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType23));
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description23);
                                }
                            }
                            break;
                        case CharacterEventType.IntelligenceMissionSucceedEspionage:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.IntelligenceMeasured);
                                if (eventData != null && eventData is IntelligenceMission)
                                {
                                    IntelligenceMission intelligenceMission3 = (IntelligenceMission)eventData;
                                    if (intelligenceMission3 != null && intelligenceMission3.Type == IntelligenceMissionType.StealTechData)
                                    {
                                        list2.Add(CharacterTraitType.ForeignSpy);
                                    }
                                }
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType10 = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType10, starting: false, this) || eventData == null || !(eventData is IntelligenceMission))
                                {
                                    break;
                                }
                                IntelligenceMission intelligenceMission4 = (IntelligenceMission)eventData;
                                if (intelligenceMission4 != null)
                                {
                                    string text8 = string.Empty;
                                    if (intelligenceMission4.Agent != null)
                                    {
                                        text8 = intelligenceMission4.Agent.Name;
                                    }
                                    string description9 = string.Format(TextResolver.GetText("Character New Trait Intelligence Mission Success"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType10), ResolveDescription(intelligenceMission4.Type), text8);
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description9);
                                }
                                break;
                            }
                        case CharacterEventType.IntelligenceMissionSucceedSabotage:
                            {
                                if (!flag2 || DoCharacterEventChanceNewSkill(character3, list, validSkillsForRole, eventType, eventData))
                                {
                                    break;
                                }
                                list2.Add(CharacterTraitType.IntelligenceSober);
                                list2.Add(CharacterTraitType.IntelligenceCourageous);
                                list3 = IntersectTraitLists(traits, list2);
                                if (list3.Count <= 0)
                                {
                                    break;
                                }
                                CharacterTraitType characterTraitType = list3[Rnd.Next(0, list3.Count)];
                                if (!character3.AddTrait(characterTraitType, starting: true, this) || eventData == null || !(eventData is IntelligenceMission))
                                {
                                    break;
                                }
                                IntelligenceMission intelligenceMission = (IntelligenceMission)eventData;
                                if (intelligenceMission != null)
                                {
                                    string text = string.Empty;
                                    if (intelligenceMission.Agent != null)
                                    {
                                        text = intelligenceMission.Agent.Name;
                                    }
                                    string description = string.Format(TextResolver.GetText("Character New Trait Intelligence Mission Success"), ResolveDescription(character3.Role), character3.Name, ResolveDescription(characterTraitType), ResolveDescription(intelligenceMission.Type), text);
                                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description);
                                }
                                break;
                            }
                    }
                }
                if (!character3.BonusesKnown)
                {
                    switch (character3.Role)
                    {
                        case CharacterRole.ShipCaptain:
                            switch (eventType)
                            {
                                case CharacterEventType.SpaceBattle:
                                case CharacterEventType.Boarding:
                                case CharacterEventType.Raid:
                                    character3.BonusesKnown = true;
                                    break;
                            }
                            break;
                        case CharacterRole.FleetAdmiral:
                            switch (eventType)
                            {
                                case CharacterEventType.SpaceBattle:
                                case CharacterEventType.Boarding:
                                case CharacterEventType.Raid:
                                    character3.BonusesKnown = true;
                                    break;
                            }
                            break;
                        case CharacterRole.IntelligenceAgent:
                            switch (eventType)
                            {
                                case CharacterEventType.IntelligenceMissionSucceedEspionage:
                                case CharacterEventType.IntelligenceMissionSucceedSabotage:
                                case CharacterEventType.IntelligenceMissionFailEspionage:
                                case CharacterEventType.IntelligenceMissionFailSabotage:
                                case CharacterEventType.IntelligenceMissionInterceptEnemy:
                                    character3.BonusesKnown = true;
                                    break;
                            }
                            break;
                        case CharacterRole.TroopGeneral:
                            switch (eventType)
                            {
                                case CharacterEventType.SpaceBattle:
                                case CharacterEventType.GroundInvasion:
                                case CharacterEventType.Raid:
                                    character3.BonusesKnown = true;
                                    break;
                            }
                            break;
                    }
                }
                if (!character3.BonusesKnown || character3.Skills == null || character3.Skills.Count <= 0)
                {
                    continue;
                }
                List<CharacterSkillType> list4 = new List<CharacterSkillType>();
                List<float> list5 = new List<float>();
                for (int m = 0; m < character3.Skills.Count; m++)
                {
                    CharacterSkill characterSkill = character3.Skills[m];
                    for (int n = 0; n < list.Count; n++)
                    {
                        CharacterSkillType characterSkillType = list[n];
                        if (characterSkillType == characterSkill.Type)
                        {
                            list4.Add(characterSkillType);
                            list5.Add(relativeImportances[n]);
                        }
                    }
                }
                int num2 = -1;
                if (list4.Count > 0)
                {
                    num2 = Rnd.Next(0, list4.Count);
                }
                if (num2 < 0)
                {
                    continue;
                }
                CharacterSkillType characterSkillType2 = list4[num2];
                float num3 = list5[num2];
                if (characterSkillType2 == CharacterSkillType.Undefined)
                {
                    continue;
                }
                float num4 = 0f;
                switch (eventType)
                {
                    case CharacterEventType.Boarding:
                        num4 = 15f;
                        break;
                    case CharacterEventType.Raid:
                        num4 = 15f;
                        break;
                    case CharacterEventType.SmugglingSuccess:
                        num4 = 20f;
                        break;
                    case CharacterEventType.SmugglingDetection:
                        num4 = -40f;
                        break;
                    case CharacterEventType.CriticalResearchFailure:
                        num4 = -35f;
                        break;
                    case CharacterEventType.CriticalResearchSuccess:
                        num4 = 50f;
                        break;
                    case CharacterEventType.Subjugated:
                        num4 = -30f;
                        break;
                    case CharacterEventType.TreatyBroken:
                        num4 = -15f;
                        break;
                    case CharacterEventType.BuildCivilianShip:
                        num4 = 5f;
                        break;
                    case CharacterEventType.BuildColonyShip:
                        num4 = 40f;
                        break;
                    case CharacterEventType.BuildFacility:
                        num4 = 40f;
                        break;
                    case CharacterEventType.BuildWonder:
                        num4 = 100f;
                        break;
                    case CharacterEventType.BuildMilitaryBase:
                        num4 = 40f;
                        break;
                    case CharacterEventType.BuildMilitaryShip:
                        num4 = 9f;
                        break;
                    case CharacterEventType.BuildMiningStation:
                        num4 = 20f;
                        break;
                    case CharacterEventType.BuildOtherBase:
                        num4 = 20f;
                        break;
                    case CharacterEventType.BuildResearchStationEnergy:
                        num4 = 40f;
                        break;
                    case CharacterEventType.BuildResearchStationHighTech:
                        num4 = 40f;
                        break;
                    case CharacterEventType.BuildResearchStationWeapons:
                        num4 = 40f;
                        break;
                    case CharacterEventType.BuildResortBase:
                        num4 = 40f;
                        break;
                    case CharacterEventType.BuildSpaceport:
                        num4 = 40f;
                        break;
                    case CharacterEventType.CashNegative:
                        num4 = -8f;
                        break;
                    case CharacterEventType.CashPositive:
                        num4 = 1f;
                        break;
                    case CharacterEventType.ColonyDevelopmentIncrease:
                        num4 = 8f;
                        break;
                    case CharacterEventType.ColonyDevelopmentDecrease:
                        num4 = -8f;
                        break;
                    case CharacterEventType.GroundInvasion:
                        if (eventData != null && eventData is InvasionStats)
                        {
                            InvasionStats invasionStats3 = (InvasionStats)eventData;
                            if (invasionStats3 != null && invasionStats3.Colony != null)
                            {
                                num4 = ((invasionStats3.Colony.Empire != character3.Empire) ? (-50f) : 50f);
                            }
                        }
                        break;
                    case CharacterEventType.HyperjumpExit:
                        if (eventData != null && eventData is BuiltObject)
                        {
                            BuiltObject builtObject13 = (BuiltObject)eventData;
                            if (builtObject13 != null && builtObject13.ShipGroup != null)
                            {
                                num4 = builtObject13.LastHyperjumpDistance / 5000000f;
                            }
                        }
                        break;
                    case CharacterEventType.IntelligenceAgentOursCaptured:
                        num4 = -15f;
                        break;
                    case CharacterEventType.IntelligenceAgentRecruited:
                        num4 = 20f;
                        break;
                    case CharacterEventType.IntelligenceMissionFailEspionage:
                        num4 = -15f;
                        break;
                    case CharacterEventType.IntelligenceMissionFailSabotage:
                        num4 = -15f;
                        break;
                    case CharacterEventType.IntelligenceMissionInterceptEnemy:
                        num4 = 20f;
                        break;
                    case CharacterEventType.IntelligenceMissionSucceedEspionage:
                        num4 = 40f;
                        break;
                    case CharacterEventType.IntelligenceMissionSucceedSabotage:
                        num4 = 40f;
                        break;
                    case CharacterEventType.ResearchAdvanceEnergy:
                        num4 = 25f;
                        break;
                    case CharacterEventType.ResearchAdvanceHighTech:
                        num4 = 25f;
                        break;
                    case CharacterEventType.ResearchAdvanceWeapons:
                        num4 = 25f;
                        break;
                    case CharacterEventType.SpaceBattle:
                        {
                            if (eventData == null || !(eventData is SpaceBattleStats))
                            {
                                break;
                            }
                            SpaceBattleStats spaceBattleStats2 = (SpaceBattleStats)eventData;
                            if (spaceBattleStats2 != null)
                            {
                                double num5 = 1.0 + (double)(spaceBattleStats2.DestroyedEnemyShipBaseSize + spaceBattleStats2.DestroyedEnemyShipBaseSizeByFighters);
                                double num6 = 1.0 + (double)(spaceBattleStats2.DestroyedFriendlyShipBaseSize + spaceBattleStats2.DestroyedFriendlyShipBaseSizeByFighters);
                                double num7 = num5 / num6;
                                switch (characterSkillType2)
                                {
                                    case CharacterSkillType.Countermeasures:
                                        num4 = Math.Min(50f, 20f * (spaceBattleStats2.ShieldsDamageAbsorbed / (float)num5));
                                        break;
                                    case CharacterSkillType.DamageControl:
                                        num4 = (float)spaceBattleStats2.DamageToUs / 100f;
                                        break;
                                    case CharacterSkillType.Fighters:
                                        num4 = (float)spaceBattleStats2.DestroyedEnemyFighters / 5f * ((1f + (float)spaceBattleStats2.DestroyedEnemyFighters) / (1f + (float)spaceBattleStats2.DestroyedFriendlyFighters));
                                        break;
                                    case CharacterSkillType.RepairBonus:
                                        num4 = (float)spaceBattleStats2.DamageRepaired / 5f;
                                        break;
                                    case CharacterSkillType.ShieldRechargeRate:
                                        num4 = spaceBattleStats2.ShieldsDamageAbsorbed / 200f;
                                        break;
                                    case CharacterSkillType.ShipManeuvering:
                                        {
                                            float num8 = 1 + spaceBattleStats2.DestroyedEnemyShipsFrigate + spaceBattleStats2.DestroyedEnemyShipsEscort;
                                            float num9 = 1 + spaceBattleStats2.DestroyedFriendlyShipsFrigate + spaceBattleStats2.DestroyedFriendlyShipsEscort;
                                            float num10 = Math.Max(0.2f, Math.Min(5f, num8 / num9));
                                            num4 = Math.Min(50f, 20f * num10);
                                            break;
                                        }
                                    case CharacterSkillType.Targeting:
                                        {
                                            float val2 = (float)spaceBattleStats2.WeaponsHits / (float)spaceBattleStats2.WeaponsMisses;
                                            val2 = Math.Max(0.1f, Math.Min(1f, val2));
                                            float val3 = (1f + spaceBattleStats2.WeaponsDamageToEnemy) / (1f + spaceBattleStats2.ShieldsDamageAbsorbed);
                                            val3 = Math.Max(0.2f, Math.Min(5f, val3));
                                            num4 = Math.Min(50f, 20f * val2 * val3);
                                            break;
                                        }
                                    case CharacterSkillType.WeaponsDamage:
                                        num4 = Math.Min(50f, spaceBattleStats2.WeaponsDamageToEnemy / 100f);
                                        break;
                                    case CharacterSkillType.WeaponsRange:
                                        {
                                            float val = (float)spaceBattleStats2.WeaponsHitsLongRange / (float)spaceBattleStats2.WeaponsHits;
                                            val = Math.Max(0.1f, Math.Min(1f, val));
                                            num4 = Math.Min(100f, spaceBattleStats2.WeaponsDamageToEnemy / 20f) * val;
                                            num4 = Math.Min(50f, num4);
                                            break;
                                        }
                                    default:
                                        num4 = ((!(num7 < 1.0)) ? ((float)(num5 / 100.0)) : (-1f * (float)(num6 / 100.0)));
                                        break;
                                }
                                num4 = Math.Max(-50f, Math.Min(50f, num4));
                            }
                            break;
                        }
                    case CharacterEventType.TourismIncome:
                        num4 = 3f;
                        break;
                    case CharacterEventType.TradeIncome:
                        num4 = 2f;
                        break;
                    case CharacterEventType.TreatySigned:
                        if (eventData != null && eventData is DiplomaticRelationType)
                        {
                            switch ((DiplomaticRelationType)eventData)
                            {
                                case DiplomaticRelationType.FreeTradeAgreement:
                                    num4 = 30f;
                                    break;
                                case DiplomaticRelationType.MutualDefensePact:
                                case DiplomaticRelationType.Protectorate:
                                    num4 = 60f;
                                    break;
                            }
                        }
                        break;
                    case CharacterEventType.TroopComplete:
                        num4 = 7f;
                        break;
                    case CharacterEventType.WarEnded:
                        num4 = ((characterSkillType2 != CharacterSkillType.WarWeariness) ? 10f : 40f);
                        break;
                    case CharacterEventType.WarStarted:
                        num4 = ((characterSkillType2 != CharacterSkillType.WarWeariness) ? 10f : (-15f));
                        break;
                }
                num4 *= (float)(0.5 + Rnd.NextDouble());
                num4 *= num3;
                if (float.IsNaN(num4))
                {
                    num4 = 0f;
                }
                num4 /= 100f;
                CharacterSkill skill = character3.GetSkill(characterSkillType2);
                if (skill != null && character3.IncrementSkillProgress(characterSkillType2, num4, this) && character3.Empire != null)
                {
                    string text24 = string.Empty;
                    if (character3.Location != null)
                    {
                        text24 = character3.Location.Name;
                    }
                    int skillLevel = character3.GetSkillLevel(skill.Type);
                    string description31 = string.Format(TextResolver.GetText("Character Skill Increase Description"), ResolveDescription(character3.Role), character3.Name, text24, ResolveDescription(characterSkillType2), skillLevel.ToString("+0;-0"));
                    character3.Empire.SendMessageToEmpire(character3.Empire, EmpireMessageType.CharacterSkillTraitChange, character3, description31);
                }
            }
        }

        public bool DoCharacterEventChanceNewSkill(Character character, List<CharacterSkillType> skills, List<CharacterSkillType> validSkillsForRole, CharacterEventType eventType, object eventData)
        {
            if (Rnd.Next(0, 5) == 1)
            {
                for (int i = 0; i < skills.Count; i++)
                {
                    CharacterSkillType characterSkillType = skills[i];
                    if (characterSkillType == CharacterSkillType.Undefined || !validSkillsForRole.Contains(characterSkillType) || character.Skills.GetSkillByType(characterSkillType) != null || !character.AddSkill(characterSkillType, Rnd.Next(3, 7), this))
                    {
                        continue;
                    }
                    CharacterSkill skill = character.GetSkill(characterSkillType);
                    if (skill != null)
                    {
                        string description = string.Empty;
                        switch (eventType)
                        {
                            case CharacterEventType.Boarding:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject4 = (BuiltObject)eventData;
                                    string text6 = string.Empty;
                                    if (builtObject4 != null)
                                    {
                                        text6 = builtObject4.Name;
                                    }
                                    description = string.Format(TextResolver.GetText("Character New Skill Boarding"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), text6);
                                }
                                break;
                            case CharacterEventType.Raid:
                                if (eventData != null)
                                {
                                    string text9 = string.Empty;
                                    if (eventData is BuiltObject)
                                    {
                                        BuiltObject builtObject6 = (BuiltObject)eventData;
                                        text9 = builtObject6.Name;
                                    }
                                    else if (eventData is Habitat)
                                    {
                                        Habitat habitat = (Habitat)eventData;
                                        text9 = habitat.Name;
                                    }
                                    description = string.Format(TextResolver.GetText("Character New Skill Raid"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), text9);
                                }
                                break;
                            case CharacterEventType.SmugglingSuccess:
                                if (eventData != null && eventData is StellarObject)
                                {
                                    StellarObject stellarObject2 = (StellarObject)eventData;
                                    string text7 = string.Empty;
                                    if (stellarObject2 != null)
                                    {
                                        text7 = stellarObject2.Name;
                                    }
                                    description = string.Format(TextResolver.GetText("Character New Skill Smuggling Success"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), text7);
                                }
                                break;
                            case CharacterEventType.SmugglingDetection:
                                if (eventData != null && eventData is StellarObject)
                                {
                                    StellarObject stellarObject = (StellarObject)eventData;
                                    string text4 = string.Empty;
                                    if (stellarObject != null)
                                    {
                                        text4 = stellarObject.Name;
                                    }
                                    description = string.Format(TextResolver.GetText("Character New Skill Smuggling Detection"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), text4);
                                }
                                break;
                            case CharacterEventType.CriticalResearchFailure:
                                if (eventData != null && eventData is ResearchNode)
                                {
                                    ResearchNode researchNode4 = (ResearchNode)eventData;
                                    string text10 = string.Empty;
                                    if (researchNode4 != null)
                                    {
                                        text10 = researchNode4.Name;
                                    }
                                    description = string.Format(TextResolver.GetText("Character New Skill Critical Research Failure"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), text10);
                                }
                                break;
                            case CharacterEventType.CriticalResearchSuccess:
                                if (eventData != null && eventData is ResearchNode)
                                {
                                    ResearchNode researchNode = (ResearchNode)eventData;
                                    string text2 = string.Empty;
                                    if (researchNode != null)
                                    {
                                        text2 = researchNode.Name;
                                    }
                                    description = string.Format(TextResolver.GetText("Character New Skill Critical Research Success"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), text2);
                                }
                                break;
                            case CharacterEventType.TargetOfFailedAssassination:
                                description = string.Format(TextResolver.GetText("Character New Skill Failed Assassination"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type));
                                break;
                            case CharacterEventType.WarStarted:
                                description = string.Format(TextResolver.GetText("Character New Skill War Started"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type));
                                break;
                            case CharacterEventType.WarEnded:
                                description = string.Format(TextResolver.GetText("Character New Skill War Ended"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type));
                                break;
                            case CharacterEventType.GroundInvasion:
                                if (eventData != null && eventData is InvasionStats)
                                {
                                    InvasionStats invasionStats = (InvasionStats)eventData;
                                    if (invasionStats != null && invasionStats.Colony != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Ground Invasion"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), invasionStats.Colony.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.SpaceBattle:
                                if (eventData != null && eventData is SpaceBattleStats)
                                {
                                    SpaceBattleStats spaceBattleStats = (SpaceBattleStats)eventData;
                                    if (spaceBattleStats != null)
                                    {
                                        description = ((spaceBattleStats.Location == null) ? string.Format(TextResolver.GetText("Character New Skill Space Battle"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type)) : string.Format(TextResolver.GetText("Character New Skill Space Battle With Location"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), spaceBattleStats.Location.Name));
                                    }
                                }
                                break;
                            case CharacterEventType.ResearchAdvanceEnergy:
                                if (eventData != null && eventData is ResearchNode)
                                {
                                    ResearchNode researchNode2 = (ResearchNode)eventData;
                                    if (researchNode2 != null && researchNode2.Industry == IndustryType.Energy)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Research Advance"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), researchNode2.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.ResearchAdvanceHighTech:
                                if (eventData != null && eventData is ResearchNode)
                                {
                                    ResearchNode researchNode5 = (ResearchNode)eventData;
                                    if (researchNode5 != null && researchNode5.Industry == IndustryType.HighTech)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Research Advance"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), researchNode5.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.ResearchAdvanceWeapons:
                                if (eventData != null && eventData is ResearchNode)
                                {
                                    ResearchNode researchNode3 = (ResearchNode)eventData;
                                    if (researchNode3 != null && researchNode3.Industry == IndustryType.Weapon)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Research Advance"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), researchNode3.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.Subjugated:
                                if (eventData != null && eventData is Empire)
                                {
                                    Empire empire2 = (Empire)eventData;
                                    if (empire2 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Subjugated"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), empire2.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildMilitaryShip:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject2 = (BuiltObject)eventData;
                                    if (builtObject2 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Military Ship"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject2.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildCivilianShip:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject9 = (BuiltObject)eventData;
                                    if (builtObject9 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Civilian Ship"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject9.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildColonyShip:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject8 = (BuiltObject)eventData;
                                    if (builtObject8 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Colony Ship"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject8.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildSpaceport:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject5 = (BuiltObject)eventData;
                                    if (builtObject5 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Spaceport"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject5.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildMilitaryBase:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject3 = (BuiltObject)eventData;
                                    if (builtObject3 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Military Base"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject3.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildResearchStationEnergy:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject = (BuiltObject)eventData;
                                    if (builtObject != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Research Station"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildResearchStationHighTech:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject11 = (BuiltObject)eventData;
                                    if (builtObject11 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Research Station"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject11.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildResearchStationWeapons:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject10 = (BuiltObject)eventData;
                                    if (builtObject10 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Research Station"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject10.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildResortBase:
                                if (eventData != null && eventData is BuiltObject)
                                {
                                    BuiltObject builtObject7 = (BuiltObject)eventData;
                                    if (builtObject7 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Resort Base"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), builtObject7.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildFacility:
                                if (eventData != null && eventData is PlanetaryFacility)
                                {
                                    PlanetaryFacility planetaryFacility2 = (PlanetaryFacility)eventData;
                                    if (planetaryFacility2 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Facility"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), planetaryFacility2.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.BuildWonder:
                                if (eventData != null && eventData is PlanetaryFacility)
                                {
                                    PlanetaryFacility planetaryFacility = (PlanetaryFacility)eventData;
                                    if (planetaryFacility != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Build Wonder"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), planetaryFacility.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.TreatySigned:
                                if (eventData != null && eventData is DiplomaticRelation)
                                {
                                    DiplomaticRelation diplomaticRelation = (DiplomaticRelation)eventData;
                                    if (diplomaticRelation != null && diplomaticRelation.OtherEmpire != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Treaty Signed"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), diplomaticRelation.OtherEmpire.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.TreatyBroken:
                                if (eventData != null && eventData is Empire)
                                {
                                    Empire empire = (Empire)eventData;
                                    if (empire != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Treaty Broken"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), empire.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.AmbassadorAssignedToEmpire:
                                if (eventData != null && eventData is Empire)
                                {
                                    Empire empire3 = (Empire)eventData;
                                    if (empire3 != null)
                                    {
                                        description = string.Format(TextResolver.GetText("Character New Skill Ambassador Assigned To Empire"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), empire3.Name);
                                    }
                                }
                                break;
                            case CharacterEventType.TroopComplete:
                                {
                                    if (eventData == null || !(eventData is Troop))
                                    {
                                        break;
                                    }
                                    Troop troop = (Troop)eventData;
                                    if (troop != null)
                                    {
                                        string text11 = string.Empty;
                                        if (troop.Colony != null)
                                        {
                                            text11 = troop.Colony.Name;
                                        }
                                        else if (troop.BuiltObject != null)
                                        {
                                            text11 = troop.BuiltObject.Name;
                                        }
                                        description = string.Format(TextResolver.GetText("Character New Skill Troop Complete"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), text11, troop.Name);
                                    }
                                    break;
                                }
                            case CharacterEventType.IntelligenceMissionFailEspionage:
                                {
                                    if (eventData == null || !(eventData is IntelligenceMission))
                                    {
                                        break;
                                    }
                                    IntelligenceMission intelligenceMission4 = (IntelligenceMission)eventData;
                                    if (intelligenceMission4 != null)
                                    {
                                        string text8 = string.Empty;
                                        if (intelligenceMission4.Agent != null)
                                        {
                                            text8 = intelligenceMission4.Agent.Name;
                                        }
                                        description = string.Format(TextResolver.GetText("Character New Skill Intelligence Mission Failure"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), ResolveDescription(intelligenceMission4.Type), text8);
                                    }
                                    break;
                                }
                            case CharacterEventType.IntelligenceMissionFailSabotage:
                                {
                                    if (eventData == null || !(eventData is IntelligenceMission))
                                    {
                                        break;
                                    }
                                    IntelligenceMission intelligenceMission3 = (IntelligenceMission)eventData;
                                    if (intelligenceMission3 != null)
                                    {
                                        string text5 = string.Empty;
                                        if (intelligenceMission3.Agent != null)
                                        {
                                            text5 = intelligenceMission3.Agent.Name;
                                        }
                                        description = string.Format(TextResolver.GetText("Character New Skill Intelligence Mission Failure"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), ResolveDescription(intelligenceMission3.Type), text5);
                                    }
                                    break;
                                }
                            case CharacterEventType.IntelligenceMissionInterceptEnemy:
                                description = string.Format(TextResolver.GetText("Character New Skill Intercept Foreign Agent"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type));
                                break;
                            case CharacterEventType.IntelligenceMissionSucceedEspionage:
                                {
                                    if (eventData == null || !(eventData is IntelligenceMission))
                                    {
                                        break;
                                    }
                                    IntelligenceMission intelligenceMission2 = (IntelligenceMission)eventData;
                                    if (intelligenceMission2 != null)
                                    {
                                        string text3 = string.Empty;
                                        if (intelligenceMission2.Agent != null)
                                        {
                                            text3 = intelligenceMission2.Agent.Name;
                                        }
                                        description = string.Format(TextResolver.GetText("Character New Skill Intelligence Mission Success"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), ResolveDescription(intelligenceMission2.Type), text3);
                                    }
                                    break;
                                }
                            case CharacterEventType.IntelligenceMissionSucceedSabotage:
                                {
                                    if (eventData == null || !(eventData is IntelligenceMission))
                                    {
                                        break;
                                    }
                                    IntelligenceMission intelligenceMission = (IntelligenceMission)eventData;
                                    if (intelligenceMission != null)
                                    {
                                        string text = string.Empty;
                                        if (intelligenceMission.Agent != null)
                                        {
                                            text = intelligenceMission.Agent.Name;
                                        }
                                        description = string.Format(TextResolver.GetText("Character New Skill Intelligence Mission Success"), ResolveDescription(character.Role), character.Name, ResolveDescription(skill.Type), ResolveDescription(intelligenceMission.Type), text);
                                    }
                                    break;
                                }
                        }
                        character.Empire.SendMessageToEmpire(character.Empire, EmpireMessageType.CharacterSkillTraitChange, character, description);
                    }
                    return true;
                }
            }
            return false;
        }

        public static string ResolveDescription(CharacterEventType eventType)
        {
            string result = string.Empty;
            switch (eventType)
            {
                case CharacterEventType.BuildMilitaryShip:
                case CharacterEventType.BuildCivilianShip:
                case CharacterEventType.BuildColonyShip:
                    result = TextResolver.GetText("Character Event Ship Built");
                    break;
                case CharacterEventType.BuildFacility:
                    result = TextResolver.GetText("Character Event Facility Built");
                    break;
                case CharacterEventType.BuildMilitaryBase:
                case CharacterEventType.BuildResearchStationWeapons:
                case CharacterEventType.BuildResearchStationEnergy:
                case CharacterEventType.BuildResearchStationHighTech:
                case CharacterEventType.BuildMiningStation:
                case CharacterEventType.BuildResortBase:
                case CharacterEventType.BuildOtherBase:
                    result = TextResolver.GetText("Character Event Base Built");
                    break;
                case CharacterEventType.BuildSpaceport:
                    result = TextResolver.GetText("Character Event Spaceport Built");
                    break;
                case CharacterEventType.BuildWonder:
                    result = TextResolver.GetText("Character Event Wonder Built");
                    break;
                case CharacterEventType.CashNegative:
                    result = TextResolver.GetText("Character Event Cash Negative");
                    break;
                case CharacterEventType.CashPositive:
                    result = TextResolver.GetText("Character Event Cash Positive");
                    break;
                case CharacterEventType.GroundInvasion:
                    result = TextResolver.GetText("Character Event Ground Invasion");
                    break;
                case CharacterEventType.IntelligenceAgentOursCaptured:
                    result = TextResolver.GetText("Character Event Intelligence Agent Captured");
                    break;
                case CharacterEventType.IntelligenceAgentRecruited:
                    result = TextResolver.GetText("Character Event Intelligence Agent Recruited");
                    break;
                case CharacterEventType.IntelligenceMissionFailEspionage:
                case CharacterEventType.IntelligenceMissionFailSabotage:
                    result = TextResolver.GetText("Character Event Intelligence Mission Failed");
                    break;
                case CharacterEventType.IntelligenceMissionInterceptEnemy:
                    result = TextResolver.GetText("Character Event Intelligence Agent Intercepted");
                    break;
                case CharacterEventType.IntelligenceMissionSucceedEspionage:
                case CharacterEventType.IntelligenceMissionSucceedSabotage:
                    result = TextResolver.GetText("Character Event Intelligence Mission Succeeded");
                    break;
                case CharacterEventType.CriticalResearchFailure:
                    result = TextResolver.GetText("Character Event Research Critical Failure");
                    break;
                case CharacterEventType.CriticalResearchSuccess:
                    result = TextResolver.GetText("Character Event Research Critical Success");
                    break;
                case CharacterEventType.CharacterStart:
                    result = TextResolver.GetText("Character Event Start");
                    break;
                case CharacterEventType.CharacterTransferLocation:
                    result = TextResolver.GetText("Character Event Transfer Location");
                    break;
                case CharacterEventType.CharacterTraitGain:
                    result = TextResolver.GetText("Character Event Trait Gain");
                    break;
                case CharacterEventType.CharacterSkillGain:
                    result = TextResolver.GetText("Character Event Skill Gain");
                    break;
                case CharacterEventType.CharacterSkillProgress:
                    result = TextResolver.GetText("Character Event Skill Progress");
                    break;
                case CharacterEventType.ResearchAdvanceWeapons:
                case CharacterEventType.ResearchAdvanceEnergy:
                case CharacterEventType.ResearchAdvanceHighTech:
                    result = TextResolver.GetText("Character Event Research Breakthrough");
                    break;
                case CharacterEventType.SpaceBattle:
                    result = TextResolver.GetText("Character Event Space Battle");
                    break;
                case CharacterEventType.TourismIncome:
                    result = TextResolver.GetText("Character Event Tourism Income");
                    break;
                case CharacterEventType.TradeIncome:
                    result = TextResolver.GetText("Character Event Trade Income");
                    break;
                case CharacterEventType.TreatySigned:
                    result = TextResolver.GetText("Character Event Treaty Signed");
                    break;
                case CharacterEventType.TroopComplete:
                    result = TextResolver.GetText("Character Event Troop Complete");
                    break;
                case CharacterEventType.WarEnded:
                    result = TextResolver.GetText("Character Event War Ended");
                    break;
                case CharacterEventType.WarStarted:
                    result = TextResolver.GetText("Character Event War Started");
                    break;
                case CharacterEventType.TargetOfFailedAssassination:
                    result = TextResolver.GetText("Character Event Target Of Failed Assassination");
                    break;
                case CharacterEventType.Subjugated:
                    result = TextResolver.GetText("Character Event Subjugated");
                    break;
                case CharacterEventType.TreatyBroken:
                    result = TextResolver.GetText("Character Event Treaty Broken");
                    break;
                case CharacterEventType.AmbassadorAssignedToEmpire:
                    result = TextResolver.GetText("Character Event Ambassador Assigned To Empire");
                    break;
                case CharacterEventType.Boarding:
                    result = TextResolver.GetText("Character Event Boarding");
                    break;
                case CharacterEventType.Raid:
                    result = TextResolver.GetText("Character Event Raid");
                    break;
                case CharacterEventType.SmugglingSuccess:
                    result = TextResolver.GetText("Character Event Smuggling Success");
                    break;
                case CharacterEventType.SmugglingDetection:
                    result = TextResolver.GetText("Character Event Smuggling Detection");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(CharacterEvent characterEvent, Empire callingEmpire, out string title)
        {
            title = string.Empty;
            string text = string.Empty;
            if (characterEvent != null)
            {
                switch (characterEvent.Type)
                {
                    case CharacterEventType.Boarding:
                        if (characterEvent.EventData != null && characterEvent.EventData is BuiltObject)
                        {
                            BuiltObject builtObject8 = (BuiltObject)characterEvent.EventData;
                            if (builtObject8 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Boarding"), builtObject8.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Boarding"), builtObject8.Name);
                            }
                        }
                        break;
                    case CharacterEventType.Raid:
                        if (characterEvent.EventData == null)
                        {
                            break;
                        }
                        if (characterEvent.EventData is Habitat)
                        {
                            Habitat habitat3 = (Habitat)characterEvent.EventData;
                            if (habitat3 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Raid"), habitat3.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Raid"), habitat3.Name);
                            }
                        }
                        else if (characterEvent.EventData is BuiltObject)
                        {
                            BuiltObject builtObject3 = (BuiltObject)characterEvent.EventData;
                            if (builtObject3 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Raid"), builtObject3.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Raid"), builtObject3.Name);
                            }
                        }
                        break;
                    case CharacterEventType.SmugglingSuccess:
                        if (characterEvent.EventData != null && characterEvent.EventData is StellarObject)
                        {
                            StellarObject stellarObject4 = (StellarObject)characterEvent.EventData;
                            if (stellarObject4 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Smuggling Success"), stellarObject4.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Smuggling Success"), stellarObject4.Name);
                            }
                        }
                        break;
                    case CharacterEventType.SmugglingDetection:
                        if (characterEvent.EventData != null && characterEvent.EventData is StellarObject)
                        {
                            StellarObject stellarObject = (StellarObject)characterEvent.EventData;
                            if (stellarObject != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Smuggling Detection"), stellarObject.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Smuggling Detection"), stellarObject.Name);
                            }
                        }
                        break;
                    case CharacterEventType.CriticalResearchFailure:
                        if (characterEvent.EventData != null && characterEvent.EventData is ResearchNode)
                        {
                            ResearchNode researchNode = (ResearchNode)characterEvent.EventData;
                            if (researchNode != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Critical Research Failure"), researchNode.Name);
                            }
                        }
                        break;
                    case CharacterEventType.CriticalResearchSuccess:
                        if (characterEvent.EventData != null && characterEvent.EventData is ResearchNode)
                        {
                            ResearchNode researchNode3 = (ResearchNode)characterEvent.EventData;
                            if (researchNode3 != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Critical Research Success"), researchNode3.Name);
                            }
                        }
                        break;
                    case CharacterEventType.Subjugated:
                        if (characterEvent.EventData != null && characterEvent.EventData is Empire)
                        {
                            Empire empire = (Empire)characterEvent.EventData;
                            if (empire != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Subjugated"), empire.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Subjugated"), empire.Name);
                            }
                        }
                        break;
                    case CharacterEventType.TreatyBroken:
                        if (characterEvent.EventData != null && characterEvent.EventData is Empire)
                        {
                            Empire empire4 = (Empire)characterEvent.EventData;
                            if (empire4 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Treaty Broken"), empire4.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Treaty Broken"), empire4.Name);
                            }
                        }
                        break;
                    case CharacterEventType.AmbassadorAssignedToEmpire:
                        if (characterEvent.EventData != null && characterEvent.EventData is Empire)
                        {
                            Empire empire2 = (Empire)characterEvent.EventData;
                            if (empire2 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Ambassador Assigned To Empire"), empire2.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Ambassador Assigned To Empire"), empire2.Name);
                            }
                        }
                        break;
                    case CharacterEventType.TargetOfFailedAssassination:
                        text = TextResolver.GetText("Character Event Description Target Of Failed Assassination");
                        break;
                    case CharacterEventType.BuildMilitaryShip:
                    case CharacterEventType.BuildCivilianShip:
                    case CharacterEventType.BuildColonyShip:
                        if (characterEvent.EventData != null && characterEvent.EventData is BuiltObject)
                        {
                            BuiltObject builtObject = (BuiltObject)characterEvent.EventData;
                            if (builtObject != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title ShipBase Built"), ResolveDescription(builtObject.SubRole));
                                text = string.Format(TextResolver.GetText("Character Event Description Build Ship"), ResolveDescription(builtObject.SubRole), builtObject.Name);
                            }
                        }
                        break;
                    case CharacterEventType.BuildMilitaryBase:
                    case CharacterEventType.BuildResearchStationWeapons:
                    case CharacterEventType.BuildResearchStationEnergy:
                    case CharacterEventType.BuildResearchStationHighTech:
                    case CharacterEventType.BuildMiningStation:
                    case CharacterEventType.BuildResortBase:
                    case CharacterEventType.BuildOtherBase:
                        if (characterEvent.EventData != null && characterEvent.EventData is BuiltObject)
                        {
                            BuiltObject builtObject4 = (BuiltObject)characterEvent.EventData;
                            if (builtObject4 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title ShipBase Built"), ResolveDescription(builtObject4.SubRole));
                                text = string.Format(TextResolver.GetText("Character Event Description Build Base"), ResolveDescription(builtObject4.SubRole), builtObject4.Name);
                            }
                        }
                        break;
                    case CharacterEventType.BuildSpaceport:
                        if (characterEvent.EventData != null && characterEvent.EventData is BuiltObject)
                        {
                            BuiltObject builtObject2 = (BuiltObject)characterEvent.EventData;
                            if (builtObject2 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title ShipBase Built"), builtObject2.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Build Spaceport"), ResolveDescription(builtObject2.SubRole), builtObject2.Name);
                            }
                        }
                        break;
                    case CharacterEventType.CashNegative:
                        text = TextResolver.GetText("Character Event Description Cash Negative");
                        break;
                    case CharacterEventType.CashPositive:
                        text = TextResolver.GetText("Character Event Description Cash Positive");
                        break;
                    case CharacterEventType.ColonyDevelopmentIncrease:
                    case CharacterEventType.ColonyDevelopmentDecrease:
                        if (characterEvent.EventData != null && characterEvent.EventData is Habitat)
                        {
                            Habitat habitat2 = (Habitat)characterEvent.EventData;
                            if (habitat2 != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Colony Development Change"), habitat2.Name);
                            }
                        }
                        break;
                    case CharacterEventType.HyperjumpExit:
                        if (characterEvent.EventData != null && characterEvent.EventData is BuiltObject)
                        {
                            BuiltObject builtObject6 = (BuiltObject)characterEvent.EventData;
                            if (builtObject6 != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Hyperjump Exit"), ResolveDescription(builtObject6.SubRole), builtObject6.Name);
                            }
                        }
                        break;
                    case CharacterEventType.IntelligenceAgentRecruited:
                        if (characterEvent.EventData != null && characterEvent.EventData is Character)
                        {
                            Character character3 = (Character)characterEvent.EventData;
                            if (character3 != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Intelligence Agent Recruited"), character3.Name);
                            }
                        }
                        break;
                    case CharacterEventType.CharacterTransferLocation:
                        {
                            if (characterEvent.EventData == null || !(characterEvent.EventData is object[]))
                            {
                                break;
                            }
                            object[] array = (object[])characterEvent.EventData;
                            if (array.Length != 2)
                            {
                                break;
                            }
                            Character character4 = null;
                            StellarObject stellarObject2 = null;
                            if (array[0] != null && array[0] is Character)
                            {
                                character4 = (Character)array[0];
                            }
                            string text2 = string.Empty;
                            if (array[1] != null && array[1] is StellarObject)
                            {
                                stellarObject2 = (StellarObject)array[1];
                                text2 = stellarObject2.Name;
                                if (stellarObject2 is BuiltObject)
                                {
                                    BuiltObject builtObject5 = (BuiltObject)stellarObject2;
                                    if (builtObject5 != null && builtObject5.Role != BuiltObjectRole.Base)
                                    {
                                        text2 = ResolveDescription(builtObject5.SubRole) + " " + builtObject5.Name;
                                        if (builtObject5.ShipGroup != null)
                                        {
                                            text2 = text2 + " (" + builtObject5.ShipGroup.Name + ")";
                                        }
                                    }
                                }
                            }
                            if (character4 != null && stellarObject2 != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Transfer Location"), character4.Name, text2);
                            }
                            break;
                        }
                    case CharacterEventType.CharacterStart:
                        {
                            if (characterEvent.EventData == null || !(characterEvent.EventData is object[]))
                            {
                                break;
                            }
                            object[] array2 = (object[])characterEvent.EventData;
                            if (array2.Length != 2)
                            {
                                break;
                            }
                            Character character5 = null;
                            StellarObject stellarObject3 = null;
                            if (array2[0] != null && array2[0] is Character)
                            {
                                character5 = (Character)array2[0];
                            }
                            string text3 = string.Empty;
                            if (array2[1] != null && array2[1] is StellarObject)
                            {
                                stellarObject3 = (StellarObject)array2[1];
                                text3 = stellarObject3.Name;
                                if (stellarObject3 is BuiltObject)
                                {
                                    BuiltObject builtObject7 = (BuiltObject)stellarObject3;
                                    if (builtObject7 != null && builtObject7.Role != BuiltObjectRole.Base)
                                    {
                                        text3 = ResolveDescription(builtObject7.SubRole) + " " + builtObject7.Name;
                                        if (builtObject7.ShipGroup != null)
                                        {
                                            text3 = text3 + " (" + builtObject7.ShipGroup.Name + ")";
                                        }
                                    }
                                }
                            }
                            if (character5 != null && stellarObject3 != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Start"), ResolveDescription(character5.Role), character5.Name, text3);
                            }
                            break;
                        }
                    case CharacterEventType.CharacterTraitGain:
                        if (characterEvent.EventData != null && characterEvent.EventData is CharacterTraitType)
                        {
                            CharacterTraitType characterTraitType = (CharacterTraitType)characterEvent.EventData;
                            if (characterTraitType != 0)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Trait Gain"), ResolveDescription(characterTraitType));
                            }
                        }
                        break;
                    case CharacterEventType.CharacterSkillGain:
                        if (characterEvent.EventData != null && characterEvent.EventData is CharacterSkill)
                        {
                            CharacterSkill characterSkill = (CharacterSkill)characterEvent.EventData;
                            if (characterSkill != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Skill Gain"), ResolveDescription(characterSkill.Type));
                            }
                        }
                        break;
                    case CharacterEventType.CharacterSkillProgress:
                        if (characterEvent.EventData != null && characterEvent.EventData is CharacterSkill)
                        {
                            CharacterSkill characterSkill2 = (CharacterSkill)characterEvent.EventData;
                            if (characterSkill2 != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Skill Progress"), ResolveDescription(characterSkill2.Type));
                            }
                        }
                        break;
                    case CharacterEventType.ResearchAdvanceWeapons:
                    case CharacterEventType.ResearchAdvanceEnergy:
                    case CharacterEventType.ResearchAdvanceHighTech:
                        if (characterEvent.EventData != null && characterEvent.EventData is ResearchNode)
                        {
                            ResearchNode researchNode2 = (ResearchNode)characterEvent.EventData;
                            if (researchNode2 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Research Breakthrough"), researchNode2.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Research Advance"), researchNode2.Name);
                            }
                        }
                        break;
                    case CharacterEventType.TourismIncome:
                        text = TextResolver.GetText("Character Event Description Tourism Income");
                        break;
                    case CharacterEventType.TradeIncome:
                        text = BaconGalaxy.ResolveDescription(characterEvent, out title);
                        break;
                    case CharacterEventType.TreatySigned:
                        if (characterEvent.EventData != null && characterEvent.EventData is DiplomaticRelation)
                        {
                            DiplomaticRelation diplomaticRelation = (DiplomaticRelation)characterEvent.EventData;
                            if (diplomaticRelation != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Treaty Signed"), diplomaticRelation.OtherEmpire.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description Treaty Signed"), ResolveDescription(diplomaticRelation.Type), diplomaticRelation.OtherEmpire.Name);
                            }
                        }
                        break;
                    case CharacterEventType.TroopComplete:
                        if (characterEvent.EventData != null && characterEvent.EventData is Troop)
                        {
                            Troop troop = (Troop)characterEvent.EventData;
                            if (troop != null)
                            {
                                text = string.Format(TextResolver.GetText("Character Event Description Troop Complete"), troop.Name);
                            }
                        }
                        break;
                    case CharacterEventType.WarEnded:
                        if (characterEvent.EventData != null && characterEvent.EventData is Empire)
                        {
                            Empire empire5 = (Empire)characterEvent.EventData;
                            if (empire5 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title War Ended"), empire5.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description War Ended"), empire5.Name);
                            }
                        }
                        break;
                    case CharacterEventType.WarStarted:
                        if (characterEvent.EventData != null && characterEvent.EventData is Empire)
                        {
                            Empire empire3 = (Empire)characterEvent.EventData;
                            if (empire3 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title War Started"), empire3.Name);
                                text = string.Format(TextResolver.GetText("Character Event Description War Started"), empire3.Name);
                            }
                        }
                        break;
                    case CharacterEventType.SpaceBattle:
                        {
                            if (characterEvent.EventData == null || !(characterEvent.EventData is SpaceBattleStats))
                            {
                                break;
                            }
                            SpaceBattleStats spaceBattleStats = (SpaceBattleStats)characterEvent.EventData;
                            if (spaceBattleStats == null)
                            {
                                break;
                            }
                            int num = spaceBattleStats.DestroyedEnemyShipBaseSize + spaceBattleStats.DestroyedEnemyShipBaseSizeByFighters;
                            int num2 = spaceBattleStats.DestroyedEnemyShipsEscort + spaceBattleStats.DestroyedEnemyShipsFrigate + spaceBattleStats.DestroyedEnemyShipsDestroyer + spaceBattleStats.DestroyedEnemyShipsCruiser + spaceBattleStats.DestroyedEnemyShipsCapitalShip + spaceBattleStats.DestroyedEnemyShipsCarrier + spaceBattleStats.DestroyedEnemyShipsTroopTransport + spaceBattleStats.DestroyedEnemyShipsResupplyShip + spaceBattleStats.DestroyedEnemyShipsDefensiveBase + spaceBattleStats.DestroyedEnemyShipsOtherBase + spaceBattleStats.DestroyedEnemyShipsOtherShips + spaceBattleStats.DestroyedEnemyShipsSpaceport;
                            double num3 = (double)spaceBattleStats.DestroyedEnemyShipBaseSizeByFighters / (1.0 + (double)num);
                            int num4 = spaceBattleStats.DestroyedFriendlyShipBaseSize + spaceBattleStats.DestroyedFriendlyShipBaseSizeByFighters;
                            int num5 = spaceBattleStats.DestroyedFriendlyShipsEscort + spaceBattleStats.DestroyedFriendlyShipsFrigate + spaceBattleStats.DestroyedFriendlyShipsDestroyer + spaceBattleStats.DestroyedFriendlyShipsCruiser + spaceBattleStats.DestroyedFriendlyShipsCapitalShip + spaceBattleStats.DestroyedFriendlyShipsCarrier + spaceBattleStats.DestroyedFriendlyShipsTroopTransport + spaceBattleStats.DestroyedFriendlyShipsResupplyShip + spaceBattleStats.DestroyedFriendlyShipsDefensiveBase + spaceBattleStats.DestroyedFriendlyShipsOtherBase + spaceBattleStats.DestroyedFriendlyShipsOtherShips + spaceBattleStats.DestroyedFriendlyShipsSpaceport;
                            double num6 = (double)spaceBattleStats.DestroyedFriendlyShipBaseSizeByFighters / (1.0 + (double)num4);
                            _ = (1.0 + (double)num) / (1.0 + (double)num4);
                            int num7 = num + num4;
                            if (spaceBattleStats.Location != null)
                            {
                                if (num7 > 800)
                                {
                                    if (spaceBattleStats.NearLocation)
                                    {
                                        title = string.Format(TextResolver.GetText("Space Battle Title"), spaceBattleStats.Location.Name);
                                    }
                                    else
                                    {
                                        title = string.Format(TextResolver.GetText("Space Battle Title Nearby"), spaceBattleStats.Location.Name);
                                    }
                                }
                                else if (spaceBattleStats.NearLocation)
                                {
                                    title = string.Format(TextResolver.GetText("Space Skirmish Title"), spaceBattleStats.Location.Name);
                                }
                                else
                                {
                                    title = string.Format(TextResolver.GetText("Space Skirmish Title Nearby"), spaceBattleStats.Location.Name);
                                }
                            }
                            text += string.Format(TextResolver.GetText("Space Battle Stats Destroyed Tonnage"), num2.ToString("0"), num.ToString("###,###,##0"), num3.ToString("0%"), num5.ToString("0"), num4.ToString("###,###,##0"), num6.ToString("0%"));
                            text += "\n\n";
                            string text4 = string.Empty;
                            if (num <= 0 && spaceBattleStats.DestroyedEnemyFighters <= 0)
                            {
                                text4 = TextResolver.GetText("None");
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsEscort > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsEscort.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Escort) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsFrigate > 0)
                            {
                                string text6 = text4;
                                text4 = text6 + spaceBattleStats.DestroyedEnemyShipsFrigate.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Frigate) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsDestroyer > 0)
                            {
                                string text7 = text4;
                                text4 = text7 + spaceBattleStats.DestroyedEnemyShipsDestroyer.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Destroyer) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsCruiser > 0)
                            {
                                string text8 = text4;
                                text4 = text8 + spaceBattleStats.DestroyedEnemyShipsCruiser.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Cruiser) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsCapitalShip > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsCapitalShip.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.CapitalShip) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsCarrier > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsCarrier.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Carrier) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsTroopTransport > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsTroopTransport.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.TroopTransport) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyFighters > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyFighters.ToString("0") + " x " + TextResolver.GetText("Fighters") + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsResupplyShip > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsResupplyShip.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.ResupplyShip) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsSpaceport > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsSpaceport.ToString("0") + " x " + TextResolver.GetText("Space Port") + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsDefensiveBase > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsDefensiveBase.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.DefensiveBase) + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsOtherBase > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsOtherBase.ToString("0") + " x " + TextResolver.GetText("Other Bases") + ", ";
                            }
                            if (spaceBattleStats.DestroyedEnemyShipsOtherShips > 0)
                            {
                                string text5 = text4;
                                text4 = text5 + spaceBattleStats.DestroyedEnemyShipsOtherShips.ToString("0") + " x " + TextResolver.GetText("Other Ships") + ", ";
                            }
                            if ((num > 0 || spaceBattleStats.DestroyedEnemyFighters > 0) && !string.IsNullOrEmpty(text4) && text4.Length >= 2)
                            {
                                text4 = text4.Substring(0, text4.Length - 2);
                            }
                            if (!string.IsNullOrEmpty(text4))
                            {
                                text += string.Format(TextResolver.GetText("Space Battle Enemy Losses"), text4);
                                text += "\n\n";
                            }
                            string text9 = string.Empty;
                            if (num4 <= 0 && spaceBattleStats.DestroyedFriendlyFighters <= 0)
                            {
                                text9 = TextResolver.GetText("None");
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsEscort > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsEscort.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Escort) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsFrigate > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsFrigate.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Frigate) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsDestroyer > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsDestroyer.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Destroyer) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsCruiser > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsCruiser.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Cruiser) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsCapitalShip > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsCapitalShip.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.CapitalShip) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsCarrier > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsCarrier.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.Carrier) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsTroopTransport > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsTroopTransport.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.TroopTransport) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyFighters > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyFighters.ToString("0") + " x " + TextResolver.GetText("Fighters") + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsResupplyShip > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsResupplyShip.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.ResupplyShip) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsSpaceport > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsSpaceport.ToString("0") + " x " + TextResolver.GetText("Space Port") + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsDefensiveBase > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsDefensiveBase.ToString("0") + " x " + ResolveDescription(BuiltObjectSubRole.DefensiveBase) + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsOtherBase > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsOtherBase.ToString("0") + " x " + TextResolver.GetText("Other Bases") + ", ";
                            }
                            if (spaceBattleStats.DestroyedFriendlyShipsOtherShips > 0)
                            {
                                string text5 = text9;
                                text9 = text5 + spaceBattleStats.DestroyedFriendlyShipsOtherShips.ToString("0") + " x " + TextResolver.GetText("Other Ships") + ", ";
                            }
                            if ((num4 > 0 || spaceBattleStats.DestroyedFriendlyFighters > 0) && !string.IsNullOrEmpty(text9) && text9.Length >= 2)
                            {
                                text9 = text9.Substring(0, text9.Length - 2);
                            }
                            if (!string.IsNullOrEmpty(text9))
                            {
                                text += string.Format(TextResolver.GetText("Space Battle Friendly Losses"), text9);
                                text += "\n\n";
                            }
                            break;
                        }
                    case CharacterEventType.GroundInvasion:
                        {
                            if (characterEvent.EventData == null || !(characterEvent.EventData is InvasionStats))
                            {
                                break;
                            }
                            InvasionStats invasionStats = (InvasionStats)characterEvent.EventData;
                            if (invasionStats == null)
                            {
                                break;
                            }
                            if (invasionStats.Colony != null)
                            {
                                title = string.Format(TextResolver.GetText("Colony Invasion Title"), invasionStats.Colony.Name);
                                if (invasionStats.DefendingEmpire == callingEmpire)
                                {
                                    title = string.Format(TextResolver.GetText("Colony Defense Title"), invasionStats.Colony.Name);
                                }
                                text = ((invasionStats.DefendingEmpire == callingEmpire) ? ((!invasionStats.InvasionSucceeded) ? (text + string.Format(TextResolver.GetText("Colony Defense Succeeded"), invasionStats.Colony.Name)) : (text + string.Format(TextResolver.GetText("Colony Defense Failed"), invasionStats.Colony.Name))) : ((!invasionStats.InvasionSucceeded) ? (text + string.Format(TextResolver.GetText("Colony Invasion Failed"), invasionStats.Colony.Name)) : (text + string.Format(TextResolver.GetText("Colony Invasion Succeeded"), invasionStats.Colony.Name))));
                                text += "\n\n";
                            }
                            text += string.Format(TextResolver.GetText("Colony Invasion Troop Losses"), invasionStats.DestroyedDefendingTroops.ToString("0"), invasionStats.DestroyedInvadingTroops.ToString("0"));
                            break;
                        }
                    case CharacterEventType.IntelligenceAgentOursCaptured:
                        if (characterEvent.EventData != null && characterEvent.EventData is Character)
                        {
                            Character character2 = (Character)characterEvent.EventData;
                            if (character2 != null)
                            {
                                title = string.Format(TextResolver.GetText("Character Event Title Intelligence Agent Captured"), character2.Name);
                                text += ResolveDescriptionFull(character2.Mission, callingEmpire);
                            }
                        }
                        break;
                    case CharacterEventType.IntelligenceMissionInterceptEnemy:
                        if (characterEvent.EventData != null && characterEvent.EventData is Character)
                        {
                            Character character = (Character)characterEvent.EventData;
                            if (character != null)
                            {
                                text += string.Format(TextResolver.GetText("Enemy Agent Captured Generic"), character.Name);
                            }
                        }
                        break;
                    case CharacterEventType.IntelligenceMissionSucceedEspionage:
                    case CharacterEventType.IntelligenceMissionSucceedSabotage:
                    case CharacterEventType.IntelligenceMissionFailEspionage:
                    case CharacterEventType.IntelligenceMissionFailSabotage:
                        if (characterEvent.EventData != null && characterEvent.EventData is IntelligenceMission)
                        {
                            IntelligenceMission intelligenceMission = (IntelligenceMission)characterEvent.EventData;
                            if (intelligenceMission != null)
                            {
                                text += ResolveDescriptionFull(intelligenceMission, callingEmpire);
                            }
                        }
                        break;
                    case CharacterEventType.BuildFacility:
                    case CharacterEventType.BuildWonder:
                        {
                            if (characterEvent.EventData == null || !(characterEvent.EventData is PlanetaryFacility))
                            {
                                break;
                            }
                            PlanetaryFacility planetaryFacility = (PlanetaryFacility)characterEvent.EventData;
                            if (planetaryFacility != null)
                            {
                                string arg = string.Empty;
                                Habitat habitat = callingEmpire.Colonies.FindColonyWithFacility(planetaryFacility);
                                if (habitat != null)
                                {
                                    arg = habitat.Name;
                                }
                                if (planetaryFacility.Type == PlanetaryFacilityType.Wonder)
                                {
                                    title = string.Format(TextResolver.GetText("Wonder Build Title"), planetaryFacility.Name);
                                    text += string.Format(TextResolver.GetText("Wonder Built"), planetaryFacility.Name, arg);
                                }
                                else
                                {
                                    title = string.Format(TextResolver.GetText("Character Event Title Facility Built"), planetaryFacility.Name);
                                    text += string.Format(TextResolver.GetText("Facility Built"), planetaryFacility.Name, arg);
                                }
                            }
                            break;
                        }
                }
                if (string.IsNullOrEmpty(title))
                {
                    title = ResolveDescription(characterEvent.Type);
                }
            }
            return text;
        }

        public static string ResolveDescriptionFull(IntelligenceMission mission, Empire callingEmpire)
        {
            string result = string.Empty;
            if (mission != null)
            {
                Character agent = mission.Agent;
                switch (mission.Outcome)
                {
                    case IntelligenceMissionOutcome.Capture:
                        result = ((callingEmpire != mission.TargetEmpire) ? string.Format(TextResolver.GetText("Our Agent Captured In Act"), agent.Name, ResolveDescription(mission, callingEmpire)) : string.Format(TextResolver.GetText("Enemy Agent Captured In Act"), agent.Name, agent.Empire.Name, ResolveDescription(mission, callingEmpire)));
                        break;
                    case IntelligenceMissionOutcome.FailDetect:
                        result = ((callingEmpire != mission.TargetEmpire) ? string.Format(TextResolver.GetText("Our Agent Detect Fail"), agent.Name, ResolveDescription(mission, callingEmpire)) : string.Format(TextResolver.GetText("Enemy Agent Detect Fail"), agent.Name, agent.Empire.Name, ResolveDescription(mission, callingEmpire)));
                        break;
                    case IntelligenceMissionOutcome.SucceedDetect:
                        result = ((callingEmpire != mission.TargetEmpire) ? string.Format(TextResolver.GetText("Our Agent Detect Succeed"), agent.Name, ResolveDescription(mission, callingEmpire)) : string.Format(TextResolver.GetText("Enemy Agent Detect Succeed"), agent.Name, agent.Empire.Name, ResolveDescription(mission, callingEmpire)));
                        break;
                    case IntelligenceMissionOutcome.FailNotDetect:
                        result = ((callingEmpire != mission.TargetEmpire) ? string.Format(TextResolver.GetText("Our Agent Fail"), agent.Name, ResolveDescription(mission, callingEmpire)) : string.Format(TextResolver.GetText("Enemy Agent Fail"), agent.Name, agent.Empire.Name, ResolveDescription(mission, callingEmpire)));
                        break;
                    case IntelligenceMissionOutcome.SucceedNotDetect:
                        result = ((callingEmpire != mission.TargetEmpire) ? string.Format(TextResolver.GetText("Our Agent Succeed"), agent.Name, ResolveDescription(mission, callingEmpire)) : ((agent.Mission.Type != IntelligenceMissionType.InciteRevolution) ? string.Format(TextResolver.GetText("Enemy Agent Succeed"), agent.Name, agent.Empire.Name, ResolveDescription(mission, callingEmpire)) : string.Format(TextResolver.GetText("Agent Revolution"), mission.TargetEmpire.GovernmentAttributes.Name)));
                        break;
                }
            }
            return result;
        }

        public static string ResolveDescription(MultipleEventActionType multipleEventActionType)
        {
            string result = string.Empty;
            switch (multipleEventActionType)
            {
                case MultipleEventActionType.ExecuteAllActions:
                    result = TextResolver.GetText("MultipleEventActionType ExecuteAllActions");
                    break;
                case MultipleEventActionType.ExecuteSingleRandomAction:
                    result = TextResolver.GetText("MultipleEventActionType ExecuteSingleRandomAction");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(EventTriggerType eventTriggerType)
        {
            string result = string.Empty;
            switch (eventTriggerType)
            {
                case EventTriggerType.Build:
                    result = TextResolver.GetText("EventTriggerType Build");
                    break;
                case EventTriggerType.Capture:
                    result = TextResolver.GetText("EventTriggerType Capture");
                    break;
                case EventTriggerType.Destroy:
                    result = TextResolver.GetText("EventTriggerType Destroy");
                    break;
                case EventTriggerType.Investigate:
                    result = TextResolver.GetText("EventTriggerType Investigate");
                    break;
                case EventTriggerType.DiplomaticRelationChange:
                    result = TextResolver.GetText("EventTriggerType DiplomaticRelationChange");
                    break;
                case EventTriggerType.EmpireEncounter:
                    result = TextResolver.GetText("EventTriggerType EmpireEncounter");
                    break;
                case EventTriggerType.ResearchBreakthrough:
                    result = TextResolver.GetText("EventTriggerType ResearchBreakthrough");
                    break;
                case EventTriggerType.PlanetDestroyerConstructionCompleted:
                    result = TextResolver.GetText("EventTriggerType PlanetDestroyerConstructionCompleted");
                    break;
                case EventTriggerType.EmpireEliminated:
                    result = TextResolver.GetText("EventTriggerType EmpireEliminated");
                    break;
                case EventTriggerType.CharacterAppears:
                    result = TextResolver.GetText("EventTriggerType CharacterAppears");
                    break;
                case EventTriggerType.CharacterKilled:
                    result = TextResolver.GetText("EventTriggerType CharacterKilled");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(DesignImageScalingMode designImageScalingMode)
        {
            string result = string.Empty;
            switch (designImageScalingMode)
            {
                case DesignImageScalingMode.None:
                    result = TextResolver.GetText("DesignImageScalingMode None");
                    break;
                case DesignImageScalingMode.Absolute:
                    result = TextResolver.GetText("DesignImageScalingMode Absolute");
                    break;
                case DesignImageScalingMode.Scaled:
                    result = TextResolver.GetText("DesignImageScalingMode Scaled");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(GameEvent gameEvent)
        {
            string result = string.Empty;
            BuiltObject builtObject = null;
            Habitat habitat = null;
            Creature creature = null;
            if (gameEvent != null)
            {
                if (gameEvent.TriggerObject != null)
                {
                    if (gameEvent.TriggerObject is BuiltObject)
                    {
                        builtObject = (BuiltObject)gameEvent.TriggerObject;
                    }
                    else if (gameEvent.TriggerObject is Habitat)
                    {
                        habitat = (Habitat)gameEvent.TriggerObject;
                    }
                    else if (gameEvent.TriggerObject is Creature)
                    {
                        creature = (Creature)gameEvent.TriggerObject;
                    }
                }
                switch (gameEvent.TriggerType)
                {
                    case EventTriggerType.Build:
                        if (habitat != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType Build Description"), string.Empty, habitat.Name);
                            if (gameEvent.TriggerFacility != null)
                            {
                                result = string.Format(TextResolver.GetText("GameEvent TriggerType Build Description"), gameEvent.TriggerFacility.Name, habitat.Name);
                            }
                            else if (gameEvent.TriggerBuiltObjectSubRole != 0)
                            {
                                result = string.Format(TextResolver.GetText("GameEvent TriggerType Build Description"), ResolveDescription(gameEvent.TriggerBuiltObjectSubRole), habitat.Name);
                            }
                        }
                        break;
                    case EventTriggerType.Capture:
                        if (habitat != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType Capture Description Colony"), habitat.Name);
                        }
                        else if (builtObject != null)
                        {
                            result = ((builtObject.Role != BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("GameEvent TriggerType Capture Description"), ResolveDescription(builtObject.SubRole), builtObject.Name) : string.Format(TextResolver.GetText("GameEvent TriggerType Capture Description Base"), builtObject.Name));
                        }
                        break;
                    case EventTriggerType.Destroy:
                        if (habitat != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType Destroy Description Planet"), habitat.Name);
                        }
                        else if (builtObject != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType Destroy Description"), ResolveDescription(builtObject.SubRole), builtObject.Name);
                        }
                        else if (creature != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType Destroy Description Creature"), creature.Name);
                        }
                        break;
                    case EventTriggerType.Investigate:
                        if (builtObject != null)
                        {
                            result = ((builtObject.Role != BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("GameEvent TriggerType Investigate Description"), ResolveDescription(builtObject.SubRole), builtObject.Name) : string.Format(TextResolver.GetText("GameEvent TriggerType Investigate Description Base"), builtObject.Name));
                        }
                        else if (gameEvent.TriggerRuin != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType Investigate Description Ruins"), gameEvent.TriggerRuin.Name);
                        }
                        break;
                    case EventTriggerType.DiplomaticRelationChange:
                        if (gameEvent.Empire != null && gameEvent.EmpireOther != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType DiplomaticRelationChange"), gameEvent.Empire.Name, gameEvent.EmpireOther.Name, ResolveDescription(gameEvent.DiplomaticRelationType));
                        }
                        break;
                    case EventTriggerType.EmpireEncounter:
                        if (gameEvent.Empire != null && gameEvent.EmpireOther != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType EmpireEncounter"), gameEvent.Empire.Name, gameEvent.EmpireOther.Name);
                        }
                        break;
                    case EventTriggerType.ResearchBreakthrough:
                        if (gameEvent.Empire != null && gameEvent.ResearchProjectId >= 0 && gameEvent.ResearchProjectId < ResearchNodeDefinitionsStatic.Count)
                        {
                            ResearchNodeDefinition researchNodeDefinition = ResearchNodeDefinitionsStatic[gameEvent.ResearchProjectId];
                            if (researchNodeDefinition != null)
                            {
                                result = string.Format(TextResolver.GetText("GameEvent TriggerType ResearchBreakthrough"), gameEvent.Empire.Name, researchNodeDefinition.Name);
                            }
                        }
                        break;
                    case EventTriggerType.PlanetDestroyerConstructionCompleted:
                        if (gameEvent.Empire != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType PlanetDestroyerConstructionCompleted"), gameEvent.Empire.Name);
                        }
                        break;
                    case EventTriggerType.EmpireEliminated:
                        if (gameEvent.Empire != null)
                        {
                            result = ((gameEvent.EmpireOther != null) ? string.Format(TextResolver.GetText("GameEvent TriggerType EmpireEliminated By Empire"), gameEvent.Empire.Name, gameEvent.EmpireOther.Name) : string.Format(TextResolver.GetText("GameEvent TriggerType EmpireEliminated"), gameEvent.Empire.Name));
                        }
                        break;
                    case EventTriggerType.CharacterAppears:
                        if (gameEvent.Character != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType CharacterAppears"), gameEvent.Character.Name);
                        }
                        break;
                    case EventTriggerType.CharacterKilled:
                        if (gameEvent.Character != null)
                        {
                            result = string.Format(TextResolver.GetText("GameEvent TriggerType CharacterKilled"), gameEvent.Character.Name);
                        }
                        break;
                }
            }
            return result;
        }

        public static string ResolveDescription(EventAction eventAction)
        {
            string result = string.Empty;
            BuiltObject builtObject = null;
            Habitat habitat = null;
            if (eventAction != null)
            {
                if (eventAction.Target != null)
                {
                    if (eventAction.Target is BuiltObject)
                    {
                        builtObject = (BuiltObject)eventAction.Target;
                    }
                    else if (eventAction.Target is Habitat)
                    {
                        habitat = (Habitat)eventAction.Target;
                    }
                }
                if (eventAction != null)
                {
                    switch (eventAction.Type)
                    {
                        case EventActionType.AcquireBuiltObject:
                            if (builtObject != null)
                            {
                                result = ((builtObject.Role != BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("EventActionType Description AcquireBuiltObject"), ResolveDescription(builtObject.SubRole), builtObject.Name) : string.Format(TextResolver.GetText("EventActionType Description AcquireBuiltObject"), TextResolver.GetText("Base").ToLower(CultureInfo.InvariantCulture), builtObject.Name));
                            }
                            break;
                        case EventActionType.AcquireHabitat:
                            if (habitat != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description AcquireHabitat"), ResolveDescription(habitat.Category).ToLower(CultureInfo.InvariantCulture), habitat.Name);
                            }
                            break;
                        case EventActionType.BuildPlanetaryFacility:
                            if (eventAction.Value >= 0 && eventAction.Value < PlanetaryFacilityDefinitionsStatic.Count)
                            {
                                PlanetaryFacilityDefinition planetaryFacilityDefinition = PlanetaryFacilityDefinitionsStatic[eventAction.Value];
                                if (planetaryFacilityDefinition != null)
                                {
                                    result = ((habitat == null) ? string.Format(TextResolver.GetText("EventActionType Description BuildPlanetaryFacility Alt"), planetaryFacilityDefinition.Name) : string.Format(TextResolver.GetText("EventActionType Description BuildPlanetaryFacility"), planetaryFacilityDefinition.Name, habitat.Name));
                                }
                            }
                            break;
                        case EventActionType.ChangeEmpireGovernment:
                            if (eventAction.Empire != null && eventAction.Value >= 0 && eventAction.Value < GovernmentsStatic.Count)
                            {
                                GovernmentAttributes governmentAttributes = GovernmentsStatic[eventAction.Value];
                                if (governmentAttributes != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description ChangeEmpireGovernment"), eventAction.Empire.Name, governmentAttributes.Name);
                                }
                            }
                            break;
                        case EventActionType.ChangeRaceBias:
                            if (eventAction.Race != null && eventAction.RaceOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description ChangeRaceBias"), eventAction.Race.Name, eventAction.RaceOther.Name, eventAction.Value.ToString("0"));
                            }
                            break;
                        case EventActionType.RevealObject:
                            if (builtObject != null)
                            {
                                result = ((builtObject.Role != BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("EventActionType Description RevealShip"), ResolveDescription(builtObject.SubRole), builtObject.Name) : string.Format(TextResolver.GetText("EventActionType Description RevealBase"), builtObject.Name));
                            }
                            else if (habitat != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description RevealPlanet"), ResolveDescription(habitat.Category), habitat.Name);
                            }
                            break;
                        case EventActionType.DestroyBuiltObject:
                            if (builtObject != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description DestroyBuiltObject"), builtObject.Name);
                            }
                            break;
                        case EventActionType.DestroyPlanetaryFacility:
                            if (eventAction.Value >= 0 && eventAction.Value < PlanetaryFacilityDefinitionsStatic.Count)
                            {
                                PlanetaryFacilityDefinition planetaryFacilityDefinition2 = PlanetaryFacilityDefinitionsStatic[eventAction.Value];
                                if (planetaryFacilityDefinition2 != null)
                                {
                                    result = ((habitat == null) ? string.Format(TextResolver.GetText("EventActionType Description DestroyPlanetaryFacility Alt"), planetaryFacilityDefinition2.Name) : string.Format(TextResolver.GetText("EventActionType Description DestroyPlanetaryFacility"), planetaryFacilityDefinition2.Name, habitat.Name));
                                }
                            }
                            break;
                        case EventActionType.DisasterAtColony:
                            if (habitat != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description DisasterAtColony"), habitat.Name);
                            }
                            break;
                        case EventActionType.EmpireDeclaresWarOnTriggerEmpire:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description EmpireDeclaresWarOnTriggerEmpire"), eventAction.Empire.Name);
                            }
                            break;
                        case EventActionType.EndPlague:
                            result = ((habitat == null) ? TextResolver.GetText("EventActionType Description EndPlague Alt") : string.Format(TextResolver.GetText("EventActionType Description EndPlague"), habitat.Name));
                            break;
                        case EventActionType.EnemyFleetDefectsToTriggerEmpire:
                            result = TextResolver.GetText("EventActionType Description EnemyFleetDefectsToTriggerEmpire");
                            break;
                        case EventActionType.FindMoneyTreasure:
                            result = string.Format(TextResolver.GetText("EventActionType Description FindMoneyTreasure"), eventAction.MoneyAmount.ToString("###,###,##0"));
                            break;
                        case EventActionType.GenerateBuiltObject:
                            if (habitat != null && eventAction.BuiltObjectSubRole != 0)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description GenerateBuiltObject"), ResolveDescription(eventAction.BuiltObjectSubRole), habitat.Name);
                            }
                            break;
                        case EventActionType.GenerateCreatureSwarm:
                            if (habitat != null && eventAction.CreatureType != 0)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description GenerateCreatureSwarm"), eventAction.Value.ToString("0"), ResolveDescription(eventAction.CreatureType), habitat.Name);
                            }
                            break;
                        case EventActionType.GenerateNewEmpire:
                            if (eventAction.Race != null && habitat != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description GenerateNewEmpire"), eventAction.Race.Name, habitat.Name);
                            }
                            break;
                        case EventActionType.GenerateNewPirateFaction:
                            if (eventAction.Race != null && habitat != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description GenerateNewPirateFaction"), eventAction.Race.Name, habitat.Name);
                            }
                            break;
                        case EventActionType.GeneratePirateAmbush:
                            if (habitat != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description GeneratePirateAmbush"), eventAction.Value.ToString("0"), habitat.Name);
                            }
                            break;
                        case EventActionType.GenerateRefugeeFleet:
                            if (habitat != null)
                            {
                                result = ((eventAction.Race == null) ? string.Format(TextResolver.GetText("EventActionType Description GenerateRefugeeFleet Alt"), habitat.Name) : string.Format(TextResolver.GetText("EventActionType Description GenerateRefugeeFleet"), eventAction.Race.Name, habitat.Name));
                            }
                            break;
                        case EventActionType.GenerateResourceAtHabitat:
                            if (habitat != null && eventAction.Value >= 0 && eventAction.Value < ResourceSystemStatic.Resources.Count)
                            {
                                ResourceDefinition resourceDefinition2 = ResourceSystemStatic.Resources[eventAction.Value];
                                if (resourceDefinition2 != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description GenerateResourceAtHabitat"), resourceDefinition2.Name, habitat.Name);
                                }
                            }
                            break;
                        case EventActionType.InterceptResource:
                            if (eventAction.Value >= 0 && eventAction.Value < ResourceSystemStatic.Resources.Count)
                            {
                                ResourceDefinition resourceDefinition = ResourceSystemStatic.Resources[eventAction.Value];
                                if (resourceDefinition != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description InterceptResource"), resourceDefinition.Name);
                                }
                            }
                            break;
                        case EventActionType.LearnAboutLostColony:
                            if (habitat != null && eventAction.Race != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description LearnAboutLostColony"), eventAction.Race.Name, habitat.Name);
                            }
                            break;
                        case EventActionType.LearnAboutSpecialLocation:
                            if (eventAction.Location != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description LearnAboutSpecialLocation"), eventAction.Location.Name);
                            }
                            break;
                        case EventActionType.LearnExplorationInfo:
                            if (eventAction.Value > 0)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description LearnExplorationInfo"), eventAction.Value.ToString("0"));
                            }
                            break;
                        case EventActionType.LearnGovernmentType:
                            if (eventAction.Value >= 0 && eventAction.Value < GovernmentsStatic.Count)
                            {
                                GovernmentAttributes governmentAttributes2 = GovernmentsStatic[eventAction.Value];
                                if (governmentAttributes2 != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description LearnGovernmentType"), governmentAttributes2.Name);
                                }
                            }
                            break;
                        case EventActionType.LearnTech:
                            if (eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitionsStatic.Count)
                            {
                                ResearchNodeDefinition researchNodeDefinition4 = ResearchNodeDefinitionsStatic[eventAction.Value];
                                if (researchNodeDefinition4 != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description LearnTech"), researchNodeDefinition4.Name);
                                }
                            }
                            break;
                        case EventActionType.MakeEmpireContact:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description MakeEmpireContact"), eventAction.Empire.Name);
                            }
                            break;
                        case EventActionType.PirateFactionJoinsTriggerEmpire:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description PirateFactionJoinsTriggerEmpire"), eventAction.Empire.Name);
                            }
                            break;
                        case EventActionType.RemoveResourceAtHabitat:
                            if (habitat != null && eventAction.Value >= 0 && eventAction.Value < ResourceSystemStatic.Resources.Count)
                            {
                                ResourceDefinition resourceDefinition3 = ResourceSystemStatic.Resources[eventAction.Value];
                                if (resourceDefinition3 != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description RemoveResourceAtHabitat"), resourceDefinition3.Name, habitat.Name);
                                }
                            }
                            break;
                        case EventActionType.SleepingRaceAwokenAtHabitat:
                            if (habitat != null && eventAction.Race != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description SleepingRaceAwokenAtHabitat"), eventAction.Race.Name, habitat.Name);
                            }
                            break;
                        case EventActionType.SplitEmpireCivilWar:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description SplitEmpireCivilWar"), eventAction.Empire.Name);
                            }
                            break;
                        case EventActionType.SplitEmpirePeacefully:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description SplitEmpirePeacefully"), eventAction.Empire.Name);
                            }
                            break;
                        case EventActionType.StartPlague:
                            if (habitat != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description StartPlague"), habitat.Name);
                            }
                            break;
                        case EventActionType.UnlockTech:
                            if (eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitionsStatic.Count)
                            {
                                ResearchNodeDefinition researchNodeDefinition = ResearchNodeDefinitionsStatic[eventAction.Value];
                                if (researchNodeDefinition != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description UnlockTech"), researchNodeDefinition.Name);
                                }
                            }
                            break;
                        case EventActionType.ChangeEmpireReputation:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description ChangeEmpireReputation"), eventAction.Empire.Name, eventAction.Value.ToString("0"));
                            }
                            break;
                        case EventActionType.ChangeEmpireEvaluation:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description ChangeEmpireEvaluation"), eventAction.Empire.Name, eventAction.EmpireOther.Name, eventAction.Value.ToString("0"));
                            }
                            break;
                        case EventActionType.InitiateTreaty:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.DiplomaticRelationType != DiplomaticRelationType.None)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description InitiateTreaty"), eventAction.Empire.Name, eventAction.EmpireOther.Name, ResolveDescription(eventAction.DiplomaticRelationType));
                            }
                            break;
                        case EventActionType.BreakTreaty:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description BreakTreaty"), eventAction.Empire.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.StartTradingSuperLuxuryResources:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description StartTradingSuperLuxuryResources"), eventAction.Empire.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.StopTradingSuperLuxuryResources:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description StopTradingSuperLuxuryResources"), eventAction.Empire.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.GeneralMessageToEmpire:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description GeneralMessageToEmpire"), eventAction.Empire.Name);
                            }
                            break;
                        case EventActionType.EmpireMessageToEmpire:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description EmpireMessageToEmpire"), eventAction.Empire.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.ResearchBonusInProject:
                            if (eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitionsStatic.Count)
                            {
                                ResearchNodeDefinition researchNodeDefinition3 = ResearchNodeDefinitionsStatic[eventAction.Value];
                                if (researchNodeDefinition3 != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description ResearchBonusInProject"), researchNodeDefinition3.Name);
                                }
                            }
                            break;
                        case EventActionType.UnlockTechForEmpire:
                            if (eventAction.Empire != null && eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitionsStatic.Count)
                            {
                                ResearchNodeDefinition researchNodeDefinition2 = ResearchNodeDefinitionsStatic[eventAction.Value];
                                if (researchNodeDefinition2 != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description UnlockTechForEmpire"), researchNodeDefinition2.Name, eventAction.Empire.Name);
                                }
                            }
                            break;
                        case EventActionType.EmpireDeclaresWarOnOtherEmpire:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description EmpireDeclaresWarOnOtherEmpire"), eventAction.Empire.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.VictoryConditionBonus:
                            if (eventAction.Empire != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description VictoryConditionBonus"), eventAction.Empire.Name, eventAction.Value.ToString("+0;-0"));
                            }
                            break;
                        case EventActionType.SendFleetAttack:
                            if (eventAction.Target != null && eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description SendFleetAttack"), eventAction.Empire.Name, eventAction.Target.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.SendPlanetDestroyerAttack:
                            if (eventAction.Target != null && eventAction.Empire != null && eventAction.EmpireOther != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description SendPlanetDestroyerAttack"), eventAction.Empire.Name, eventAction.Target.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.IntergalacticConvoyMilitary:
                            if (eventAction.Empire != null && eventAction.Value > 0)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description IntergalacticConvoyMilitary"), eventAction.Empire.Name, eventAction.Value.ToString());
                            }
                            break;
                        case EventActionType.IntergalacticConvoyCivilian:
                            if (eventAction.Empire != null && eventAction.Value > 0)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description IntergalacticConvoyCivilian"), eventAction.Empire.Name, eventAction.Value.ToString());
                            }
                            break;
                        case EventActionType.CharacterGenerate:
                            if (eventAction.Empire != null)
                            {
                                if (eventAction.Character != null)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description CharacterGenerate"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name, eventAction.Target.Name);
                                }
                                else if (eventAction.CharacterRole != 0)
                                {
                                    result = string.Format(TextResolver.GetText("EventActionType Description CharacterGenerate Role"), ResolveDescription(eventAction.CharacterRole), eventAction.Target.Name);
                                }
                            }
                            break;
                        case EventActionType.CharacterKill:
                            if (eventAction.Empire != null && eventAction.Character != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description CharacterKill"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name);
                            }
                            break;
                        case EventActionType.CharacterChangeEmpire:
                            if (eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.Character != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description CharacterChangeEmpire"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name, eventAction.Empire.Name, eventAction.EmpireOther.Name);
                            }
                            break;
                        case EventActionType.CharacterChangeRole:
                            if (eventAction.Empire != null && eventAction.Character != null && eventAction.CharacterRole != 0)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description CharacterChangeRole"), eventAction.Character.Name, ResolveDescription(eventAction.Character.Role), ResolveDescription(eventAction.CharacterRole));
                            }
                            break;
                        case EventActionType.CharacterChangeImage:
                            if (eventAction.Empire != null && eventAction.Character != null)
                            {
                                result = string.Format(TextResolver.GetText("EventActionType Description CharacterChangeImage"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name, eventAction.ImageFilename);
                            }
                            break;
                    }
                }
            }
            return result;
        }

        public static string ResolveDescription(EventActionExecutionType eventActionExecutionType)
        {
            string result = string.Empty;
            switch (eventActionExecutionType)
            {
                case EventActionExecutionType.Immediately:
                    result = TextResolver.GetText("EventActionExecutionType Immediately");
                    break;
                case EventActionExecutionType.Delay:
                    result = TextResolver.GetText("EventActionExecutionType Delay");
                    break;
                case EventActionExecutionType.RandomDelay:
                    result = TextResolver.GetText("EventActionExecutionType RandomDelay");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(EventActionType eventActionType)
        {
            string result = string.Empty;
            switch (eventActionType)
            {
                case EventActionType.AcquireBuiltObject:
                    result = TextResolver.GetText("EventActionType AcquireBuiltObject");
                    break;
                case EventActionType.AcquireHabitat:
                    result = TextResolver.GetText("EventActionType AcquireHabitat");
                    break;
                case EventActionType.BuildPlanetaryFacility:
                    result = TextResolver.GetText("EventActionType BuildPlanetaryFacility");
                    break;
                case EventActionType.ChangeEmpireGovernment:
                    result = TextResolver.GetText("EventActionType ChangeEmpireGovernment");
                    break;
                case EventActionType.ChangeRaceBias:
                    result = TextResolver.GetText("EventActionType ChangeRaceBias");
                    break;
                case EventActionType.RevealObject:
                    result = TextResolver.GetText("EventActionType RevealObject");
                    break;
                case EventActionType.DestroyBuiltObject:
                    result = TextResolver.GetText("EventActionType DestroyBuiltObject");
                    break;
                case EventActionType.DestroyPlanetaryFacility:
                    result = TextResolver.GetText("EventActionType DestroyPlanetaryFacility");
                    break;
                case EventActionType.DisasterAtColony:
                    result = TextResolver.GetText("EventActionType DisasterAtColony");
                    break;
                case EventActionType.EmpireDeclaresWarOnTriggerEmpire:
                    result = TextResolver.GetText("EventActionType EmpireDeclaresWarOnTriggerEmpire");
                    break;
                case EventActionType.EndPlague:
                    result = TextResolver.GetText("EventActionType EndPlague");
                    break;
                case EventActionType.EnemyFleetDefectsToTriggerEmpire:
                    result = TextResolver.GetText("EventActionType EnemyFleetDefectsToTriggerEmpire");
                    break;
                case EventActionType.FindMoneyTreasure:
                    result = TextResolver.GetText("EventActionType FindMoneyTreasure");
                    break;
                case EventActionType.GenerateBuiltObject:
                    result = TextResolver.GetText("EventActionType GenerateBuiltObject");
                    break;
                case EventActionType.GenerateCreatureSwarm:
                    result = TextResolver.GetText("EventActionType GenerateCreatureSwarm");
                    break;
                case EventActionType.GenerateErutkah:
                    result = TextResolver.GetText("EventActionType GenerateErutkah");
                    break;
                case EventActionType.GenerateNewEmpire:
                    result = TextResolver.GetText("EventActionType GenerateNewEmpire");
                    break;
                case EventActionType.GenerateNewPirateFaction:
                    result = TextResolver.GetText("EventActionType GenerateNewPirateFaction");
                    break;
                case EventActionType.GeneratePirateAmbush:
                    result = TextResolver.GetText("EventActionType GeneratePirateAmbush");
                    break;
                case EventActionType.GenerateRefugeeFleet:
                    result = TextResolver.GetText("EventActionType GenerateRefugeeFleet");
                    break;
                case EventActionType.GenerateResourceAtHabitat:
                    result = TextResolver.GetText("EventActionType GenerateResourceAtHabitat");
                    break;
                case EventActionType.InterceptResource:
                    result = TextResolver.GetText("EventActionType InterceptResource");
                    break;
                case EventActionType.LearnAboutLostColony:
                    result = TextResolver.GetText("EventActionType LearnAboutLostColony");
                    break;
                case EventActionType.LearnAboutSpecialLocation:
                    result = TextResolver.GetText("EventActionType LearnAboutSpecialLocation");
                    break;
                case EventActionType.LearnExplorationInfo:
                    result = TextResolver.GetText("EventActionType LearnExplorationInfo");
                    break;
                case EventActionType.LearnGovernmentType:
                    result = TextResolver.GetText("EventActionType LearnGovernmentType");
                    break;
                case EventActionType.LearnTech:
                    result = TextResolver.GetText("EventActionType LearnTech");
                    break;
                case EventActionType.MakeEmpireContact:
                    result = TextResolver.GetText("EventActionType MakeEmpireContact");
                    break;
                case EventActionType.PirateFactionJoinsTriggerEmpire:
                    result = TextResolver.GetText("EventActionType PirateFactionJoinsTriggerEmpire");
                    break;
                case EventActionType.RemoveResourceAtHabitat:
                    result = TextResolver.GetText("EventActionType RemoveResourceAtHabitat");
                    break;
                case EventActionType.SleepingRaceAwokenAtHabitat:
                    result = TextResolver.GetText("EventActionType SleepingRaceAwokenAtHabitat");
                    break;
                case EventActionType.SplitEmpireCivilWar:
                    result = TextResolver.GetText("EventActionType SplitEmpireCivilWar");
                    break;
                case EventActionType.SplitEmpirePeacefully:
                    result = TextResolver.GetText("EventActionType SplitEmpirePeacefully");
                    break;
                case EventActionType.StartPlague:
                    result = TextResolver.GetText("EventActionType StartPlague");
                    break;
                case EventActionType.UnlockTech:
                    result = TextResolver.GetText("EventActionType UnlockTech");
                    break;
                case EventActionType.ChangeEmpireReputation:
                    result = TextResolver.GetText("EventActionType ChangeEmpireReputation");
                    break;
                case EventActionType.ChangeEmpireEvaluation:
                    result = TextResolver.GetText("EventActionType ChangeEmpireEvaluation");
                    break;
                case EventActionType.InitiateTreaty:
                    result = TextResolver.GetText("EventActionType InitiateTreaty");
                    break;
                case EventActionType.BreakTreaty:
                    result = TextResolver.GetText("EventActionType BreakTreaty");
                    break;
                case EventActionType.StartTradingSuperLuxuryResources:
                    result = TextResolver.GetText("EventActionType StartTradingSuperLuxuryResources");
                    break;
                case EventActionType.StopTradingSuperLuxuryResources:
                    result = TextResolver.GetText("EventActionType StopTradingSuperLuxuryResources");
                    break;
                case EventActionType.GeneralMessageToEmpire:
                    result = TextResolver.GetText("EventActionType GeneralMessageToEmpire");
                    break;
                case EventActionType.EmpireMessageToEmpire:
                    result = TextResolver.GetText("EventActionType EmpireMessageToEmpire");
                    break;
                case EventActionType.ResearchBonusInProject:
                    result = TextResolver.GetText("EventActionType ResearchBonusInProject");
                    break;
                case EventActionType.UnlockTechForEmpire:
                    result = TextResolver.GetText("EventActionType UnlockTechForEmpire");
                    break;
                case EventActionType.EmpireDeclaresWarOnOtherEmpire:
                    result = TextResolver.GetText("EventActionType EmpireDeclaresWarOnOtherEmpire");
                    break;
                case EventActionType.VictoryConditionBonus:
                    result = TextResolver.GetText("EventActionType VictoryConditionBonus");
                    break;
                case EventActionType.SendFleetAttack:
                    result = TextResolver.GetText("EventActionType SendFleetAttack");
                    break;
                case EventActionType.SendPlanetDestroyerAttack:
                    result = TextResolver.GetText("EventActionType SendPlanetDestroyerAttack");
                    break;
                case EventActionType.IntergalacticConvoyMilitary:
                    result = TextResolver.GetText("EventActionType IntergalacticConvoyMilitary");
                    break;
                case EventActionType.IntergalacticConvoyCivilian:
                    result = TextResolver.GetText("EventActionType IntergalacticConvoyCivilian");
                    break;
                case EventActionType.CharacterGenerate:
                    result = TextResolver.GetText("EventActionType CharacterGenerate");
                    break;
                case EventActionType.CharacterKill:
                    result = TextResolver.GetText("EventActionType CharacterKill");
                    break;
                case EventActionType.CharacterChangeEmpire:
                    result = TextResolver.GetText("EventActionType CharacterChangeEmpire");
                    break;
                case EventActionType.CharacterChangeRole:
                    result = TextResolver.GetText("EventActionType CharacterChangeRole");
                    break;
                case EventActionType.CharacterChangeImage:
                    result = TextResolver.GetText("EventActionType CharacterChangeImage");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(CharacterTraitType traitType)
        {
            string result = string.Empty;
            switch (traitType)
            {
                case CharacterTraitType.IntelligenceUninhibited:
                    result = TextResolver.GetText("Character Trait Uninhibited");
                    break;
                case CharacterTraitType.IntelligenceMeasured:
                    result = TextResolver.GetText("Character Trait Measured");
                    break;
                case CharacterTraitType.IntelligenceAddict:
                    result = TextResolver.GetText("Character Trait Addict");
                    break;
                case CharacterTraitType.IntelligenceSober:
                    result = TextResolver.GetText("Character Trait Sober");
                    break;
                case CharacterTraitType.IntelligenceCourageous:
                    result = TextResolver.GetText("Character Trait Courageous");
                    break;
                case CharacterTraitType.IntelligenceWeak:
                    result = TextResolver.GetText("Character Trait Weak");
                    break;
                case CharacterTraitType.IntelligenceTolerant:
                    result = TextResolver.GetText("Character Trait Tolerant");
                    break;
                case CharacterTraitType.IntelligenceXenophobic:
                    result = TextResolver.GetText("Character Trait Xenophobic");
                    break;
                case CharacterTraitType.IntelligenceEloquentSpeaker:
                    result = TextResolver.GetText("Character Trait EloquentSpeaker");
                    break;
                case CharacterTraitType.IntelligencePoorSpeaker:
                    result = TextResolver.GetText("Character Trait PoorSpeaker");
                    break;
                case CharacterTraitType.IntelligenceCorrupt:
                    result = TextResolver.GetText("Character Trait Corrupt");
                    break;
                case CharacterTraitType.IntelligenceLawful:
                    result = TextResolver.GetText("Character Trait Lawful");
                    break;
                case CharacterTraitType.Undefined:
                    result = TextResolver.GetText("None");
                    break;
                case CharacterTraitType.Addict:
                    result = TextResolver.GetText("Character Trait Addict");
                    break;
                case CharacterTraitType.BeanCounter:
                    result = TextResolver.GetText("Character Trait BeanCounter");
                    break;
                case CharacterTraitType.CarefulAttacker:
                    result = TextResolver.GetText("Character Trait CarefulAttacker");
                    break;
                case CharacterTraitType.Corrupt:
                    result = TextResolver.GetText("Character Trait Corrupt");
                    break;
                case CharacterTraitType.Courageous:
                    result = TextResolver.GetText("Character Trait Courageous");
                    break;
                case CharacterTraitType.Creative:
                    result = TextResolver.GetText("Character Trait Creative");
                    break;
                case CharacterTraitType.Demoralizing:
                    result = TextResolver.GetText("Character Trait Demoralizing");
                    break;
                case CharacterTraitType.Diplomat:
                    result = TextResolver.GetText("Character Trait Diplomat");
                    break;
                case CharacterTraitType.Disliked:
                    result = TextResolver.GetText("Character Trait Disliked");
                    break;
                case CharacterTraitType.Disorganized:
                    result = TextResolver.GetText("Character Trait Disorganized");
                    break;
                case CharacterTraitType.DoubleAgent:
                    result = TextResolver.GetText("Character Trait DoubleAgent");
                    break;
                case CharacterTraitType.Drunk:
                    result = TextResolver.GetText("Character Trait Drunk");
                    break;
                case CharacterTraitType.EloquentSpeaker:
                    result = TextResolver.GetText("Character Trait EloquentSpeaker");
                    break;
                case CharacterTraitType.Energetic:
                    result = TextResolver.GetText("Character Trait Energetic");
                    break;
                case CharacterTraitType.Engineer:
                    result = TextResolver.GetText("Character Trait Engineer");
                    break;
                case CharacterTraitType.Environmentalist:
                    result = TextResolver.GetText("Character Trait Environmentalist");
                    break;
                case CharacterTraitType.Expansionist:
                    result = TextResolver.GetText("Character Trait Expansionist");
                    break;
                case CharacterTraitType.Famous:
                    result = TextResolver.GetText("Character Trait Famous");
                    break;
                case CharacterTraitType.ForeignSpy:
                    result = TextResolver.GetText("Character Trait ForeignSpy");
                    break;
                case CharacterTraitType.FreeTrader:
                    result = TextResolver.GetText("Character Trait FreeTrader");
                    break;
                case CharacterTraitType.Generous:
                    result = TextResolver.GetText("Character Trait Generous");
                    break;
                case CharacterTraitType.GoodAdministrator:
                    result = TextResolver.GetText("Character Trait GoodAdministrator");
                    break;
                case CharacterTraitType.GoodGroundLogistician:
                    result = TextResolver.GetText("Character Trait GoodGroundLogistician");
                    break;
                case CharacterTraitType.GoodRecruiter:
                    result = TextResolver.GetText("Character Trait GoodRecruiter");
                    break;
                case CharacterTraitType.GoodSpaceLogistician:
                    result = TextResolver.GetText("Character Trait GoodSpaceLogistician");
                    break;
                case CharacterTraitType.GoodStrategist:
                    result = TextResolver.GetText("Character Trait GoodStrategist");
                    break;
                case CharacterTraitType.GoodTactician:
                    result = TextResolver.GetText("Character Trait GoodTactician");
                    break;
                case CharacterTraitType.HealthOriented:
                    result = TextResolver.GetText("Character Trait HealthOriented");
                    break;
                case CharacterTraitType.Industrialist:
                    result = TextResolver.GetText("Character Trait Industrialist");
                    break;
                case CharacterTraitType.InspiringPresence:
                    result = TextResolver.GetText("Character Trait InspiringPresence");
                    break;
                case CharacterTraitType.Isolationist:
                    result = TextResolver.GetText("Character Trait Isolationist");
                    break;
                case CharacterTraitType.LaborOriented:
                    result = TextResolver.GetText("Character Trait LaborOriented");
                    break;
                case CharacterTraitType.Lawful:
                    result = TextResolver.GetText("Character Trait Lawful");
                    break;
                case CharacterTraitType.LaxDiscipline:
                    result = TextResolver.GetText("Character Trait LaxDiscipline");
                    break;
                case CharacterTraitType.Lazy:
                    result = TextResolver.GetText("Character Trait Lazy");
                    break;
                case CharacterTraitType.Linguist:
                    result = TextResolver.GetText("Character Trait Linguist");
                    break;
                case CharacterTraitType.LocalDefenseTactics:
                    result = TextResolver.GetText("Character Trait LocalDefenseTactics");
                    break;
                case CharacterTraitType.Logical:
                    result = TextResolver.GetText("Character Trait Logical");
                    break;
                case CharacterTraitType.Luddite:
                    result = TextResolver.GetText("Character Trait Luddite");
                    break;
                case CharacterTraitType.Measured:
                    result = TextResolver.GetText("Character Trait Measured");
                    break;
                case CharacterTraitType.Methodical:
                    result = TextResolver.GetText("Character Trait Methodical");
                    break;
                case CharacterTraitType.NaturalGroundLeader:
                    result = TextResolver.GetText("Character Trait NaturalGroundLeader");
                    break;
                case CharacterTraitType.NaturalSpaceLeader:
                    result = TextResolver.GetText("Character Trait NaturalSpaceLeader");
                    break;
                case CharacterTraitType.NonTechnical:
                    result = TextResolver.GetText("Character Trait NonTechnical");
                    break;
                case CharacterTraitType.Obnoxious:
                    result = TextResolver.GetText("Character Trait Obnoxious");
                    break;
                case CharacterTraitType.Organized:
                    result = TextResolver.GetText("Character Trait Organized");
                    break;
                case CharacterTraitType.Pacifist:
                    result = TextResolver.GetText("Character Trait Pacifist");
                    break;
                case CharacterTraitType.Paranoid:
                    result = TextResolver.GetText("Character Trait Paranoid");
                    break;
                case CharacterTraitType.Patriot:
                    result = TextResolver.GetText("Character Trait Patriot");
                    break;
                case CharacterTraitType.PeaceThroughStrength:
                    result = TextResolver.GetText("Character Trait PeaceThroughStrength");
                    break;
                case CharacterTraitType.PlanetarySupport:
                    result = TextResolver.GetText("Character Trait PlanetarySupport");
                    break;
                case CharacterTraitType.PoorAdministrator:
                    result = TextResolver.GetText("Character Trait PoorAdministrator");
                    break;
                case CharacterTraitType.PoorGroundAttacker:
                    result = TextResolver.GetText("Character Trait PoorGroundAttacker");
                    break;
                case CharacterTraitType.PoorGroundDefender:
                    result = TextResolver.GetText("Character Trait PoorGroundDefender");
                    break;
                case CharacterTraitType.PoorGroundLogistician:
                    result = TextResolver.GetText("Character Trait PoorGroundLogistician");
                    break;
                case CharacterTraitType.PoorNavigator:
                    result = TextResolver.GetText("Character Trait PoorNavigator");
                    break;
                case CharacterTraitType.PoorRecruiter:
                    result = TextResolver.GetText("Character Trait PoorRecruiter");
                    break;
                case CharacterTraitType.PoorSpaceAttacker:
                    result = TextResolver.GetText("Character Trait PoorSpaceAttacker");
                    break;
                case CharacterTraitType.PoorSpaceDefender:
                    result = TextResolver.GetText("Character Trait PoorSpaceDefender");
                    break;
                case CharacterTraitType.PoorSpaceLogistician:
                    result = TextResolver.GetText("Character Trait PoorSpaceLogistician");
                    break;
                case CharacterTraitType.PoorSpeaker:
                    result = TextResolver.GetText("Character Trait PoorSpeaker");
                    break;
                case CharacterTraitType.PoorStrategist:
                    result = TextResolver.GetText("Character Trait PoorStrategist");
                    break;
                case CharacterTraitType.PoorTactician:
                    result = TextResolver.GetText("Character Trait PoorTactician");
                    break;
                case CharacterTraitType.Protectionist:
                    result = TextResolver.GetText("Character Trait Protectionist");
                    break;
                case CharacterTraitType.RecklessAttacker:
                    result = TextResolver.GetText("Character Trait RecklessAttacker");
                    break;
                case CharacterTraitType.SkilledNavigator:
                    result = TextResolver.GetText("Character Trait SkilledNavigator");
                    break;
                case CharacterTraitType.Sober:
                    result = TextResolver.GetText("Character Trait Sober");
                    break;
                case CharacterTraitType.Spiritual:
                    result = TextResolver.GetText("Character Trait Spiritual");
                    break;
                case CharacterTraitType.StrongGroundAttacker:
                    result = TextResolver.GetText("Character Trait StrongGroundAttacker");
                    break;
                case CharacterTraitType.StrongGroundDefender:
                    result = TextResolver.GetText("Character Trait StrongGroundDefender");
                    break;
                case CharacterTraitType.StrongSpaceAttacker:
                    result = TextResolver.GetText("Character Trait StrongSpaceAttacker");
                    break;
                case CharacterTraitType.StrongSpaceDefender:
                    result = TextResolver.GetText("Character Trait StrongSpaceDefender");
                    break;
                case CharacterTraitType.Technical:
                    result = TextResolver.GetText("Character Trait Technical");
                    break;
                case CharacterTraitType.Tolerant:
                    result = TextResolver.GetText("Character Trait Tolerant");
                    break;
                case CharacterTraitType.TongueTied:
                    result = TextResolver.GetText("Character Trait TongueTied");
                    break;
                case CharacterTraitType.ToughDiscipline:
                    result = TextResolver.GetText("Character Trait ToughDiscipline");
                    break;
                case CharacterTraitType.Trusting:
                    result = TextResolver.GetText("Character Trait Trusting");
                    break;
                case CharacterTraitType.UltraGenius:
                    result = TextResolver.GetText("Character Trait UltraGenius");
                    break;
                case CharacterTraitType.Uninhibited:
                    result = TextResolver.GetText("Character Trait Uninhibited");
                    break;
                case CharacterTraitType.Weak:
                    result = TextResolver.GetText("Character Trait Weak");
                    break;
                case CharacterTraitType.Xenophobic:
                    result = TextResolver.GetText("Character Trait Xenophobic");
                    break;
                case CharacterTraitType.Smuggler:
                    result = TextResolver.GetText("Character Trait Smuggler");
                    break;
                case CharacterTraitType.BountyHunter:
                    result = TextResolver.GetText("Character Trait BountyHunter");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(CharacterSkillType skillType)
        {
            string result = string.Empty;
            switch (skillType)
            {
                case CharacterSkillType.Undefined:
                    result = TextResolver.GetText("None");
                    break;
                case CharacterSkillType.Assassination:
                    result = TextResolver.GetText("Character Skill Assassination");
                    break;
                case CharacterSkillType.CivilianBaseMaintenance:
                    result = TextResolver.GetText("Character Skill CivilianBaseMaintenance");
                    break;
                case CharacterSkillType.CivilianShipConstructionSpeed:
                    result = TextResolver.GetText("Character Skill CivilianShipConstructionSpeed");
                    break;
                case CharacterSkillType.CivilianShipMaintenance:
                    result = TextResolver.GetText("Character Skill CivilianShipMaintenance");
                    break;
                case CharacterSkillType.ColonyCorruption:
                    result = TextResolver.GetText("Character Skill ColonyCorruption");
                    break;
                case CharacterSkillType.ColonyHappiness:
                    result = TextResolver.GetText("Character Skill ColonyHappiness");
                    break;
                case CharacterSkillType.ColonyIncome:
                    result = TextResolver.GetText("Character Skill ColonyIncome");
                    break;
                case CharacterSkillType.ColonyShipConstructionSpeed:
                    result = TextResolver.GetText("Character Skill ColonyShipConstructionSpeed");
                    break;
                case CharacterSkillType.Concealment:
                    result = TextResolver.GetText("Character Skill Concealment");
                    break;
                case CharacterSkillType.CounterEspionage:
                    result = TextResolver.GetText("Character Skill CounterEspionage");
                    break;
                case CharacterSkillType.Countermeasures:
                    result = TextResolver.GetText("Character Skill Countermeasures");
                    break;
                case CharacterSkillType.DamageControl:
                    result = TextResolver.GetText("Character Skill DamageControl");
                    break;
                case CharacterSkillType.Diplomacy:
                    result = TextResolver.GetText("Character Skill Diplomacy");
                    break;
                case CharacterSkillType.Espionage:
                    result = TextResolver.GetText("Character Skill Espionage");
                    break;
                case CharacterSkillType.FacilityConstructionSpeed:
                    result = TextResolver.GetText("Character Skill FacilityConstructionSpeed");
                    break;
                case CharacterSkillType.Fighters:
                    result = TextResolver.GetText("Character Skill Fighters");
                    break;
                case CharacterSkillType.HyperjumpSpeed:
                    result = TextResolver.GetText("Character Skill HyperjumpSpeed");
                    break;
                case CharacterSkillType.MilitaryBaseMaintenance:
                    result = TextResolver.GetText("Character Skill MilitaryBaseMaintenance");
                    break;
                case CharacterSkillType.MilitaryShipConstructionSpeed:
                    result = TextResolver.GetText("Character Skill MilitaryShipConstructionSpeed");
                    break;
                case CharacterSkillType.MilitaryShipMaintenance:
                    result = TextResolver.GetText("Character Skill MilitaryShipMaintenance");
                    break;
                case CharacterSkillType.MiningRate:
                    result = TextResolver.GetText("Character Skill MiningRate");
                    break;
                case CharacterSkillType.PopulationGrowth:
                    result = TextResolver.GetText("Character Skill PopulationGrowth");
                    break;
                case CharacterSkillType.PsyOps:
                    result = TextResolver.GetText("Character Skill PsyOps");
                    break;
                case CharacterSkillType.RepairBonus:
                    result = TextResolver.GetText("Character Skill RepairBonus");
                    break;
                case CharacterSkillType.ResearchEnergy:
                    result = TextResolver.GetText("Character Skill ResearchEnergy");
                    break;
                case CharacterSkillType.ResearchHighTech:
                    result = TextResolver.GetText("Character Skill ResearchHighTech");
                    break;
                case CharacterSkillType.ResearchWeapons:
                    result = TextResolver.GetText("Character Skill ResearchWeapons");
                    break;
                case CharacterSkillType.Sabotage:
                    result = TextResolver.GetText("Character Skill Sabotage");
                    break;
                case CharacterSkillType.ShieldRechargeRate:
                    result = TextResolver.GetText("Character Skill ShieldRechargeRate");
                    break;
                case CharacterSkillType.ShipEnergyUsage:
                    result = TextResolver.GetText("Character Skill ShipEnergyUsage");
                    break;
                case CharacterSkillType.ShipManeuvering:
                    result = TextResolver.GetText("Character Skill ShipManeuvering");
                    break;
                case CharacterSkillType.Targeting:
                    result = TextResolver.GetText("Character Skill Targeting");
                    break;
                case CharacterSkillType.TourismIncome:
                    result = TextResolver.GetText("Character Skill TourismIncome");
                    break;
                case CharacterSkillType.TradeIncome:
                    result = TextResolver.GetText("Character Skill TradeIncome");
                    break;
                case CharacterSkillType.TroopExperienceGain:
                    result = TextResolver.GetText("Character Skill TroopExperienceGain");
                    break;
                case CharacterSkillType.TroopGroundAttack:
                    result = TextResolver.GetText("Character Skill TroopGroundAttack");
                    break;
                case CharacterSkillType.TroopGroundDefense:
                    result = TextResolver.GetText("Character Skill TroopGroundDefense");
                    break;
                case CharacterSkillType.TroopMaintenance:
                    result = TextResolver.GetText("Character Skill TroopMaintenance");
                    break;
                case CharacterSkillType.TroopRecoveryRate:
                    result = TextResolver.GetText("Character Skill TroopRecoveryRate");
                    break;
                case CharacterSkillType.TroopRecruitment:
                    result = TextResolver.GetText("Character Skill TroopRecruitment");
                    break;
                case CharacterSkillType.WarWeariness:
                    result = TextResolver.GetText("Character Skill WarWeariness");
                    break;
                case CharacterSkillType.WeaponsDamage:
                    result = TextResolver.GetText("Character Skill WeaponsDamage");
                    break;
                case CharacterSkillType.WeaponsRange:
                    result = TextResolver.GetText("Character Skill WeaponsRange");
                    break;
                case CharacterSkillType.TroopStrengthArmor:
                    result = TextResolver.GetText("Character Skill TroopStrengthArmor");
                    break;
                case CharacterSkillType.TroopStrengthInfantry:
                    result = TextResolver.GetText("Character Skill TroopStrengthInfantry");
                    break;
                case CharacterSkillType.TroopStrengthSpecialForces:
                    result = TextResolver.GetText("Character Skill TroopStrengthSpecialForces");
                    break;
                case CharacterSkillType.TroopStrengthPlanetaryDefense:
                    result = TextResolver.GetText("Character Skill TroopStrengthPlanetaryDefense");
                    break;
                case CharacterSkillType.SmugglingIncome:
                    result = TextResolver.GetText("Character Skill SmugglingIncome");
                    break;
                case CharacterSkillType.SmugglingEvasion:
                    result = TextResolver.GetText("Character Skill SmugglingEvasion");
                    break;
                case CharacterSkillType.BoardingAssault:
                    result = TextResolver.GetText("Character Skill BoardingAssault");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(CharacterRole role)
        {
            string result = string.Empty;
            switch (role)
            {
                case CharacterRole.Ambassador:
                    result = TextResolver.GetText("Ambassador");
                    break;
                case CharacterRole.ColonyGovernor:
                    result = TextResolver.GetText("Colony Governor");
                    break;
                case CharacterRole.FleetAdmiral:
                    result = TextResolver.GetText("Fleet Admiral");
                    break;
                case CharacterRole.IntelligenceAgent:
                    result = TextResolver.GetText("Intelligence Agent");
                    break;
                case CharacterRole.Leader:
                    result = TextResolver.GetText("Leader");
                    break;
                case CharacterRole.Scientist:
                    result = TextResolver.GetText("Scientist");
                    break;
                case CharacterRole.TroopGeneral:
                    result = TextResolver.GetText("Troop General");
                    break;
                case CharacterRole.PirateLeader:
                    result = TextResolver.GetText("Pirate Leader");
                    break;
                case CharacterRole.ShipCaptain:
                    result = TextResolver.GetText("Ship Captain");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(ColonyPopulationPolicy colonyPopulationPolicy)
        {
            string result = string.Empty;
            switch (colonyPopulationPolicy)
            {
                case ColonyPopulationPolicy.Assimilate:
                    result = TextResolver.GetText("Assimilate");
                    break;
                case ColonyPopulationPolicy.DoNotAccept:
                    result = TextResolver.GetText("Do Not Accept");
                    break;
                case ColonyPopulationPolicy.Resettle:
                    result = TextResolver.GetText("Resettle");
                    break;
                case ColonyPopulationPolicy.Enslave:
                    result = TextResolver.GetText("Enslave");
                    break;
                case ColonyPopulationPolicy.Exterminate:
                    result = TextResolver.GetText("Exterminate");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(BuiltObjectMissionType missionType)
        {
            string empty = string.Empty;
            return missionType switch
            {
                BuiltObjectMissionType.ExtractResources => TextResolver.GetText("Mission Mine"),
                BuiltObjectMissionType.Undefined => "(" + TextResolver.GetText("No mission") + ")",
                BuiltObjectMissionType.Attack => TextResolver.GetText("Mission Attack"),
                BuiltObjectMissionType.Blockade => TextResolver.GetText("Mission Blockade"),
                BuiltObjectMissionType.Bombard => TextResolver.GetText("Mission Bombard"),
                BuiltObjectMissionType.Build => TextResolver.GetText("Mission Build"),
                BuiltObjectMissionType.BuildRepair => TextResolver.GetText("Mission Build"),
                BuiltObjectMissionType.Colonize => TextResolver.GetText("Mission Colonize"),
                BuiltObjectMissionType.Deploy => TextResolver.GetText("Mission Deploy"),
                BuiltObjectMissionType.Escape => TextResolver.GetText("Mission Escape"),
                BuiltObjectMissionType.Escort => TextResolver.GetText("Mission Escort"),
                BuiltObjectMissionType.Explore => TextResolver.GetText("Mission Explore"),
                BuiltObjectMissionType.Hold => TextResolver.GetText("Mission Wait"),
                BuiltObjectMissionType.LoadTroops => TextResolver.GetText("Mission Load Troops"),
                BuiltObjectMissionType.Move => TextResolver.GetText("Mission Move"),
                BuiltObjectMissionType.MoveAndWait => TextResolver.GetText("Mission Move and Wait"),
                BuiltObjectMissionType.Patrol => TextResolver.GetText("Mission Patrol"),
                BuiltObjectMissionType.Refuel => TextResolver.GetText("Mission Refuel"),
                BuiltObjectMissionType.Repair => TextResolver.GetText("Mission Repair"),
                BuiltObjectMissionType.Rescue => TextResolver.GetText("Mission Rescue"),
                BuiltObjectMissionType.Retire => TextResolver.GetText("Mission Retire"),
                BuiltObjectMissionType.Retrofit => TextResolver.GetText("Mission Retrofit"),
                BuiltObjectMissionType.Transport => TextResolver.GetText("Mission Transport"),
                BuiltObjectMissionType.Undeploy => TextResolver.GetText("Mission Undeploy"),
                BuiltObjectMissionType.UnloadTroops => TextResolver.GetText("Mission Unload Troops"),
                BuiltObjectMissionType.WaitAndAttack => TextResolver.GetText("Mission Prepare and Attack"),
                BuiltObjectMissionType.WaitAndBombard => TextResolver.GetText("Mission Prepare and Bombard"),
                BuiltObjectMissionType.Waypoint => TextResolver.GetText("Mission Waypoint"),
                _ => SplitString(missionType.ToString()),
            };
        }

        public static string ResolveRaceFamilyDescription(byte raceFamilyId)
        {
            if (raceFamilyId >= 0 && raceFamilyId < RaceFamiliesStatic.Count)
            {
                return RaceFamiliesStatic[raceFamilyId].Name;
            }
            return string.Empty;
        }

        public static string ResolveDescription(BuiltObjectRole role)
        {
            return role switch
            {
                BuiltObjectRole.Base => TextResolver.GetText("Ship Role Base"),
                BuiltObjectRole.Build => TextResolver.GetText("Ship Role Build"),
                BuiltObjectRole.Colony => TextResolver.GetText("Ship Role Colony"),
                BuiltObjectRole.Exploration => TextResolver.GetText("Ship Role Exploration"),
                BuiltObjectRole.Freight => TextResolver.GetText("Ship Role Freight"),
                BuiltObjectRole.Military => TextResolver.GetText("Ship Role Military"),
                BuiltObjectRole.Passenger => TextResolver.GetText("Ship Role Passenger"),
                BuiltObjectRole.Resource => TextResolver.GetText("Ship Role Resource"),
                BuiltObjectRole.Undefined => TextResolver.GetText("None"),
                _ => SplitString(role.ToString()),
            };
        }

        public static string ResolveDescriptionFleetPosture(ShipGroup fleet)
        {
            string result = "(" + TextResolver.GetText("None") + ")";
            if (fleet != null)
            {
                switch (fleet.Posture)
                {
                    case FleetPosture.Attack:
                        result = ((fleet.AttackPoint == null) ? TextResolver.GetText("Fleet Posture Attack Anywhere") : ((!(fleet.PostureRangeSquared <= 2250000.0)) ? ((!(fleet.PostureRangeSquared <= 2304000000.0)) ? ((!(fleet.PostureRangeSquared <= 250000000000.0)) ? ((!(fleet.PostureRangeSquared <= 1000000000000.0)) ? string.Format(TextResolver.GetText("Fleet Posture Attack Unlimited"), fleet.AttackPoint.Name) : string.Format(TextResolver.GetText("Fleet Posture Attack Sector"), fleet.AttackPoint.Name)) : string.Format(TextResolver.GetText("Fleet Posture Attack Area"), fleet.AttackPoint.Name)) : string.Format(TextResolver.GetText("Fleet Posture Attack System"), fleet.AttackPoint.Name)) : string.Format(TextResolver.GetText("Fleet Posture Attack Target"), fleet.AttackPoint.Name)));
                        break;
                    case FleetPosture.Defend:
                        result = ((fleet.GatherPoint == null) ? TextResolver.GetText("Fleet Posture Defend Anywhere") : ((!(fleet.PostureRangeSquared <= 2250000.0)) ? ((!(fleet.PostureRangeSquared <= 2304000000.0)) ? ((!(fleet.PostureRangeSquared <= 250000000000.0)) ? ((!(fleet.PostureRangeSquared <= 1000000000000.0)) ? string.Format(TextResolver.GetText("Fleet Posture Defend Unlimited"), fleet.GatherPoint.Name) : string.Format(TextResolver.GetText("Fleet Posture Defend Sector"), fleet.GatherPoint.Name)) : string.Format(TextResolver.GetText("Fleet Posture Defend Area"), fleet.GatherPoint.Name)) : string.Format(TextResolver.GetText("Fleet Posture Defend System"), fleet.GatherPoint.Name)) : string.Format(TextResolver.GetText("Fleet Posture Defend Target"), fleet.GatherPoint.Name)));
                        break;
                }
            }
            return result;
        }

        public static string ResolveDescription(BuiltObjectFleeWhen fleeWhen)
        {
            return fleeWhen switch
            {
                BuiltObjectFleeWhen.Attacked => TextResolver.GetText("Flee When Attacked"),
                BuiltObjectFleeWhen.EnemyMilitarySighted => TextResolver.GetText("Flee When Enemy Military Sighted"),
                BuiltObjectFleeWhen.Never => TextResolver.GetText("Flee When Never"),
                BuiltObjectFleeWhen.Shields20 => TextResolver.GetText("Flee When Shields 20"),
                BuiltObjectFleeWhen.Armor50 => TextResolver.GetText("Flee When Armor 50 or Shields 20"),
                BuiltObjectFleeWhen.Shields50 => TextResolver.GetText("Flee When Shields 50"),
                BuiltObjectFleeWhen.Undefined => TextResolver.GetText("None"),
                _ => SplitString(fleeWhen.ToString()),
            };
        }

        public static string ResolveDescription(BuiltObjectSubRole subRole)
        {
            return subRole switch
            {
                BuiltObjectSubRole.Carrier => TextResolver.GetText("Ship SubRole Carrier"),
                BuiltObjectSubRole.CapitalShip => TextResolver.GetText("Ship SubRole CapitalShip"),
                BuiltObjectSubRole.ColonyShip => TextResolver.GetText("Ship SubRole ColonyShip"),
                BuiltObjectSubRole.ConstructionShip => TextResolver.GetText("Ship SubRole ConstructionShip"),
                BuiltObjectSubRole.Cruiser => TextResolver.GetText("Ship SubRole Cruiser"),
                BuiltObjectSubRole.DefensiveBase => TextResolver.GetText("Ship SubRole DefensiveBase"),
                BuiltObjectSubRole.Destroyer => TextResolver.GetText("Ship SubRole Destroyer"),
                BuiltObjectSubRole.EnergyResearchStation => TextResolver.GetText("Ship SubRole EnergyResearchStation"),
                BuiltObjectSubRole.Escort => TextResolver.GetText("Ship SubRole Escort"),
                BuiltObjectSubRole.ExplorationShip => TextResolver.GetText("Ship SubRole ExplorationShip"),
                BuiltObjectSubRole.Frigate => TextResolver.GetText("Ship SubRole Frigate"),
                BuiltObjectSubRole.GasMiningShip => TextResolver.GetText("Ship SubRole GasMiningShip"),
                BuiltObjectSubRole.GasMiningStation => TextResolver.GetText("Ship SubRole GasMiningStation"),
                BuiltObjectSubRole.GenericBase => TextResolver.GetText("Ship SubRole GenericBase"),
                BuiltObjectSubRole.HighTechResearchStation => TextResolver.GetText("Ship SubRole HighTechResearchStation"),
                BuiltObjectSubRole.LargeFreighter => TextResolver.GetText("Ship SubRole LargeFreighter"),
                BuiltObjectSubRole.LargeSpacePort => TextResolver.GetText("Ship SubRole LargeSpacePort"),
                BuiltObjectSubRole.MediumFreighter => TextResolver.GetText("Ship SubRole MediumFreighter"),
                BuiltObjectSubRole.MediumSpacePort => TextResolver.GetText("Ship SubRole MediumSpacePort"),
                BuiltObjectSubRole.MiningShip => TextResolver.GetText("Ship SubRole MiningShip"),
                BuiltObjectSubRole.MiningStation => TextResolver.GetText("Ship SubRole MiningStation"),
                BuiltObjectSubRole.MonitoringStation => TextResolver.GetText("Ship SubRole MonitoringStation"),
                BuiltObjectSubRole.PassengerShip => TextResolver.GetText("Ship SubRole PassengerShip"),
                BuiltObjectSubRole.ResortBase => TextResolver.GetText("Ship SubRole ResortBase"),
                BuiltObjectSubRole.ResupplyShip => TextResolver.GetText("Ship SubRole ResupplyShip"),
                BuiltObjectSubRole.SmallFreighter => TextResolver.GetText("Ship SubRole SmallFreighter"),
                BuiltObjectSubRole.SmallSpacePort => TextResolver.GetText("Ship SubRole SmallSpacePort"),
                BuiltObjectSubRole.TroopTransport => TextResolver.GetText("Ship SubRole TroopTransport"),
                BuiltObjectSubRole.WeaponsResearchStation => TextResolver.GetText("Ship SubRole WeaponsResearchStation"),
                BuiltObjectSubRole.Undefined => TextResolver.GetText("None"),
                _ => SplitString(subRole.ToString()),
            };
        }

        public static string ResolveDescription(BuiltObjectStance stance)
        {
            return stance switch
            {
                BuiltObjectStance.AttackEnemies => TextResolver.GetText("Stance AttackEnemies"),
                BuiltObjectStance.AttackIfAttacked => TextResolver.GetText("Stance AttackIfAttacked"),
                BuiltObjectStance.AttackUnallied => TextResolver.GetText("Stance AttackUnallied"),
                BuiltObjectStance.DoNotAttack => TextResolver.GetText("Stance DoNotAttack"),
                BuiltObjectStance.Undefined => TextResolver.GetText("None"),
                _ => SplitString(stance.ToString()),
            };
        }

        public static string ResolveDescription(CommandAction action)
        {
            return SplitString(action.ToString());
        }

        public static string ResolveComponentCategoryAbbreviation(ComponentCategoryType category)
        {
            return category switch
            {
                ComponentCategoryType.Armor => "ARM",
                ComponentCategoryType.Computer => "CMP",
                ComponentCategoryType.Construction => "CST",
                ComponentCategoryType.EnergyCollector => "ECL",
                ComponentCategoryType.Engine => "ENG",
                ComponentCategoryType.Extractor => "EXT",
                ComponentCategoryType.Habitation => "HAB",
                ComponentCategoryType.HyperDrive => "HYP",
                ComponentCategoryType.Labs => "LAB",
                ComponentCategoryType.Manufacturer => "MNF",
                ComponentCategoryType.Reactor => "RCT",
                ComponentCategoryType.Sensor => "SEN",
                ComponentCategoryType.Shields => "SHD",
                ComponentCategoryType.ShieldRecharge => "SHR",
                ComponentCategoryType.Storage => "STR",
                ComponentCategoryType.WeaponArea => "WAR",
                ComponentCategoryType.WeaponBeam => "WBM",
                ComponentCategoryType.WeaponSuperArea => "WSA",
                ComponentCategoryType.WeaponSuperBeam => "WSB",
                ComponentCategoryType.WeaponSuperTorpedo => "WST",
                ComponentCategoryType.WeaponTorpedo => "WTP",
                ComponentCategoryType.Fighter => "FTR",
                ComponentCategoryType.WeaponPointDefense => "WPD",
                ComponentCategoryType.WeaponIon => "WIO",
                ComponentCategoryType.HyperDisrupt => "HDR",
                ComponentCategoryType.WeaponGravity => "WGR",
                ComponentCategoryType.AssaultPod => "ASP",
                _ => string.Empty,
            };
        }

        public static string ResolveDescription(ComponentCategoryType category)
        {
            return category switch
            {
                ComponentCategoryType.Armor => TextResolver.GetText("Component Category Armor"),
                ComponentCategoryType.Computer => TextResolver.GetText("Component Category Computer"),
                ComponentCategoryType.Construction => TextResolver.GetText("Component Category Construction"),
                ComponentCategoryType.EnergyCollector => TextResolver.GetText("Component Category EnergyCollector"),
                ComponentCategoryType.Engine => TextResolver.GetText("Component Category Engine"),
                ComponentCategoryType.Extractor => TextResolver.GetText("Component Category Extractor"),
                ComponentCategoryType.Habitation => TextResolver.GetText("Component Category Habitation"),
                ComponentCategoryType.HyperDrive => TextResolver.GetText("Component Category HyperDrive"),
                ComponentCategoryType.Labs => TextResolver.GetText("Component Category Labs"),
                ComponentCategoryType.Manufacturer => TextResolver.GetText("Component Category Manufacturer"),
                ComponentCategoryType.Reactor => TextResolver.GetText("Component Category Reactor"),
                ComponentCategoryType.Sensor => TextResolver.GetText("Component Category Sensor"),
                ComponentCategoryType.Shields => TextResolver.GetText("Component Category Shields"),
                ComponentCategoryType.Storage => TextResolver.GetText("Component Category Storage"),
                ComponentCategoryType.WeaponArea => TextResolver.GetText("Component Category WeaponArea"),
                ComponentCategoryType.WeaponBeam => TextResolver.GetText("Component Category WeaponBeam"),
                ComponentCategoryType.WeaponSuperArea => TextResolver.GetText("Component Category WeaponSuperArea"),
                ComponentCategoryType.WeaponSuperBeam => TextResolver.GetText("Component Category WeaponSuperBeam"),
                ComponentCategoryType.WeaponSuperTorpedo => TextResolver.GetText("Component Category WeaponSuperTorpedo"),
                ComponentCategoryType.WeaponTorpedo => TextResolver.GetText("Component Category WeaponTorpedo"),
                ComponentCategoryType.WeaponIon => TextResolver.GetText("Component Category Ion Weapon"),
                ComponentCategoryType.WeaponPointDefense => TextResolver.GetText("Component Category Point Defense Weapon"),
                ComponentCategoryType.WeaponGravity => TextResolver.GetText("Component Category WeaponGravity"),
                ComponentCategoryType.AssaultPod => TextResolver.GetText("Component Category AssaultPod"),
                ComponentCategoryType.Undefined => TextResolver.GetText("None"),
                _ => SplitString(category.ToString()),
            };
        }

        public static string ResolveDescription(ResearchNode researchProject)
        {
            string text = string.Empty;
            if (researchProject != null)
            {
                if (researchProject.Components != null && researchProject.Components.Count > 0)
                {
                    for (int i = 0; i < researchProject.Components.Count; i++)
                    {
                        text += researchProject.Components[i].Name;
                        text += ", ";
                    }
                    text = text.Substring(0, text.Length - 2);
                }
                if (researchProject.ComponentImprovements != null && researchProject.ComponentImprovements.Count > 0)
                {
                    if (text.Length > 0)
                    {
                        text += " + ";
                    }
                    string text2 = string.Empty;
                    for (int j = 0; j < researchProject.ComponentImprovements.Count; j++)
                    {
                        text2 += researchProject.ComponentImprovements[j].ImprovedComponent.Name;
                        text2 += ", ";
                    }
                    if (!string.IsNullOrEmpty(text2) && text2.Length >= 3)
                    {
                        text2 = text2.Substring(0, text2.Length - 2);
                    }
                    text += string.Format(TextResolver.GetText("Improvements to COMPONENT"), text2);
                }
                if (researchProject.Abilities != null && researchProject.Abilities.Count > 0)
                {
                    if (text.Length > 0)
                    {
                        text += " + ";
                    }
                    for (int k = 0; k < researchProject.Abilities.Count; k++)
                    {
                        text += researchProject.Abilities[k].Name;
                        text += ", ";
                    }
                    text = text.Substring(0, text.Length - 2);
                }
                if (researchProject.Fighters != null && researchProject.Fighters.Count > 0)
                {
                    if (text.Length > 0)
                    {
                        text += " + ";
                    }
                    for (int l = 0; l < researchProject.Fighters.Count; l++)
                    {
                        text += researchProject.Fighters[l].Name;
                        text += ", ";
                    }
                    text = text.Substring(0, text.Length - 2);
                }
                if (researchProject.PlanetaryFacility != null)
                {
                    if (text.Length > 0)
                    {
                        text += " + ";
                    }
                    text += string.Format(TextResolver.GetText("Build FACILITY"), researchProject.PlanetaryFacility.Name);
                }
            }
            return text;
        }

        public static string ResolveDescription(IndustryType industry)
        {
            return industry switch
            {
                IndustryType.Energy => TextResolver.GetText("Energy"),
                IndustryType.HighTech => TextResolver.GetText("HighTech"),
                IndustryType.Weapon => TextResolver.GetText("Weapons"),
                IndustryType.Undefined => TextResolver.GetText("None"),
                _ => SplitString(industry.ToString()),
            };
        }

        public static string ResolveDescription(ComponentType type)
        {
            return type switch
            {
                ComponentType.SensorStealth => TextResolver.GetText("Component Type Stealth"),
                ComponentType.DamageControl => TextResolver.GetText("Component Type Damage Control"),
                ComponentType.ComputerCommandCenter => TextResolver.GetText("Component Type Command Center"),
                ComponentType.ComputerCommerceCenter => TextResolver.GetText("Component Type Commerce Center"),
                ComponentType.ComputerCountermeasures => TextResolver.GetText("Component Type Countermeasures"),
                ComponentType.ComputerTargetting => TextResolver.GetText("Component Type Targetting"),
                ComponentType.ConstructionBuild => TextResolver.GetText("Component Type Construction Yard"),
                ComponentType.EngineMainThrust => TextResolver.GetText("Component Type Main Thrust Engine"),
                ComponentType.EngineVectoring => TextResolver.GetText("Component Type Vectoring Engine"),
                ComponentType.ExtractorGasExtractor => TextResolver.GetText("Component Type Gas Extractor"),
                ComponentType.ExtractorLuxury => TextResolver.GetText("Component Type Luxury Resource Extractor"),
                ComponentType.ExtractorMine => TextResolver.GetText("Component Type Mine"),
                ComponentType.HabitationColonization => TextResolver.GetText("Component Type Colony"),
                ComponentType.HabitationHabModule => TextResolver.GetText("Component Type Habitation Module"),
                ComponentType.HabitationLifeSupport => TextResolver.GetText("Component Type Life Support"),
                ComponentType.HabitationMedicalCenter => TextResolver.GetText("Component Type Medical Center"),
                ComponentType.HabitationRecreationCenter => TextResolver.GetText("Component Type Recreation Center"),
                ComponentType.LabsEnergyLab => TextResolver.GetText("Component Type Energy Lab"),
                ComponentType.LabsHighTechLab => TextResolver.GetText("Component Type HighTech Lab"),
                ComponentType.LabsWeaponsLab => TextResolver.GetText("Component Type Weapons Lab"),
                ComponentType.ManufacturerEnergyPlant => TextResolver.GetText("Component Type Energy Manufacturer"),
                ComponentType.ManufacturerHighTechPlant => TextResolver.GetText("Component Type HighTech Manufacturer"),
                ComponentType.ManufacturerWeaponsPlant => TextResolver.GetText("Component Type Weapons Manufacturer"),
                ComponentType.SensorProximityArray => TextResolver.GetText("Component Type Proximity Array"),
                ComponentType.SensorResourceProfileSensor => TextResolver.GetText("Component Type Resource Profile Sensor"),
                ComponentType.SensorLongRange => TextResolver.GetText("Component Type Long Range Scanner"),
                ComponentType.StorageCargo => TextResolver.GetText("Component Type Cargo Module"),
                ComponentType.StorageDockingBay => TextResolver.GetText("Component Type Docking Bay"),
                ComponentType.StorageFuel => TextResolver.GetText("Component Type Fuel Storage Cell"),
                ComponentType.StorageTroop => TextResolver.GetText("Component Type Troop Module"),
                ComponentType.WeaponAreaDestruction => TextResolver.GetText("Component Type Area Weapon"),
                ComponentType.WeaponSuperArea => TextResolver.GetText("Component Type Super Area Weapon"),
                ComponentType.WeaponSuperBeam => TextResolver.GetText("Component Type Super Beam Weapon"),
                ComponentType.WeaponSuperTorpedo => TextResolver.GetText("Component Type Super Torpedo Weapon"),
                ComponentType.WeaponSuperMissile => TextResolver.GetText("Component Type Super Missile Weapon"),
                ComponentType.WeaponSuperRailGun => TextResolver.GetText("Component Type Super RailGun Weapon"),
                ComponentType.WeaponSuperPhaser => TextResolver.GetText("Component Type Super Phaser Weapon"),
                ComponentType.WeaponMissile => TextResolver.GetText("Component Type Missile Weapon"),
                ComponentType.WeaponPointDefense => TextResolver.GetText("Component Type Point Defense"),
                ComponentType.WeaponIonCannon => TextResolver.GetText("Component Type Ion Cannon"),
                ComponentType.WeaponIonPulse => TextResolver.GetText("Component Type Ion Pulse"),
                ComponentType.WeaponIonDefense => TextResolver.GetText("Component Type Ion Defense"),
                ComponentType.HyperDeny => TextResolver.GetText("Component Type HyperDeny Weapon"),
                ComponentType.HyperStop => TextResolver.GetText("Component Type HyperStop"),
                ComponentType.FighterBay => TextResolver.GetText("Component Type Fighter Bay"),
                ComponentType.SensorTraceScanner => TextResolver.GetText("Component Type Sensor TraceScanner"),
                ComponentType.SensorScannerJammer => TextResolver.GetText("Component Type Sensor ScannerJammer"),
                ComponentType.ComputerTargettingFleet => TextResolver.GetText("Component Type Targetting Fleet"),
                ComponentType.ComputerCountermeasuresFleet => TextResolver.GetText("Component Type Countermeasures Fleet"),
                ComponentType.AssaultPod => TextResolver.GetText("Component Type Assault Pod"),
                ComponentType.WeaponTractorBeam => TextResolver.GetText("Component Type Tractor Beam Weapon"),
                ComponentType.WeaponAreaGravity => TextResolver.GetText("Component Type Gravity Area Weapon"),
                ComponentType.WeaponGravityBeam => TextResolver.GetText("Component Type Gravity Beam Weapon"),
                ComponentType.WeaponBombard => TextResolver.GetText("Component Type Bombard Weapon"),
                ComponentType.WeaponBeam => TextResolver.GetText("Component Type Beam Weapon"),
                ComponentType.WeaponTorpedo => TextResolver.GetText("Component Type Torpedo Weapon"),
                ComponentType.Shields => TextResolver.GetText("Component Type Shields"),
                ComponentType.HyperDrive => TextResolver.GetText("Component Type HyperDrive"),
                _ => SplitString(type.ToString()),
            };
        }

        public static string ResolveEngagementStanceDescription(BuiltObject militaryShip)
        {
            string result = "(" + TextResolver.GetText("None") + ")";
            if (militaryShip.Role == BuiltObjectRole.Military)
            {
                result = ((militaryShip.AttackRangeSquared == 0f) ? TextResolver.GetText("When attacked") : ((militaryShip.AttackRangeSquared == 4000000f) ? TextResolver.GetText("Nearby targets") : ((militaryShip.AttackRangeSquared != 2.304E+09f) ? TextResolver.GetText("Detected targets") : TextResolver.GetText("System targets"))));
            }
            return result;
        }

        public static string ResolveEngagementStanceDescription(ShipGroup shipGroup)
        {
            string text = "(" + TextResolver.GetText("None") + ")";
            if (shipGroup.AttackRangeSquared == 0f)
            {
                return TextResolver.GetText("When attacked");
            }
            if (shipGroup.AttackRangeSquared == 4000000f)
            {
                return TextResolver.GetText("Nearby targets");
            }
            if (shipGroup.AttackRangeSquared == 2.304E+09f)
            {
                return TextResolver.GetText("System targets");
            }
            return TextResolver.GetText("Detected targets");
        }

        public static string ResolveDescription(GalaxyShape galaxyShape)
        {
            return galaxyShape switch
            {
                GalaxyShape.Elliptical => TextResolver.GetText("Elliptical"),
                GalaxyShape.Spiral => TextResolver.GetText("Spiral"),
                GalaxyShape.Ring => TextResolver.GetText("Ring"),
                GalaxyShape.Irregular => TextResolver.GetText("Irregular"),
                GalaxyShape.ClustersEven => TextResolver.GetText("Even Clusters"),
                GalaxyShape.ClustersVaried => TextResolver.GetText("Varied Clusters"),
                _ => SplitString(galaxyShape.ToString()),
            };
        }

        public static string ResolveDescription(BattleTactics tactics)
        {
            return tactics switch
            {
                BattleTactics.AllWeapons => TextResolver.GetText("BattleTactics All Weapons"),
                BattleTactics.Evade => TextResolver.GetText("BattleTactics Evade"),
                BattleTactics.PointBlank => TextResolver.GetText("BattleTactics Point Blank"),
                BattleTactics.Standoff => TextResolver.GetText("BattleTactics Standoff"),
                BattleTactics.Undefined => TextResolver.GetText("None"),
                _ => SplitString(tactics.ToString()),
            };
        }

        public static string ResolveDescription(InvasionTactics tactics)
        {
            return tactics switch
            {
                InvasionTactics.DoNotInvade => TextResolver.GetText("InvasionTactics Do Not Invade"),
                InvasionTactics.InvadeImmediately => TextResolver.GetText("InvasionTactics Invade Immediately"),
                InvasionTactics.InvadeWhenClear => TextResolver.GetText("InvasionTactics Invade When Clear"),
                InvasionTactics.Undefined => TextResolver.GetText("None"),
                _ => SplitString(tactics.ToString()),
            };
        }

        public static string ResolveDescription(DisasterEventType disasterType)
        {
            return disasterType switch
            {
                DisasterEventType.Blizzard => TextResolver.GetText("Colony Disaster Blizzard"),
                DisasterEventType.Earthquake => TextResolver.GetText("Colony Disaster Earthquake"),
                DisasterEventType.EconomicCrisis => TextResolver.GetText("Empire Disaster Economic Crisis"),
                DisasterEventType.Eruption => TextResolver.GetText("Colony Disaster Eruption"),
                DisasterEventType.Plague => TextResolver.GetText("Colony Disaster Plague"),
                DisasterEventType.Sandstorm => TextResolver.GetText("Colony Disaster Sandstorm"),
                DisasterEventType.Sinkhole => TextResolver.GetText("Colony Disaster Sinkhole"),
                DisasterEventType.Tsunami => TextResolver.GetText("Colony Disaster Tsunami"),
                _ => string.Empty,
            };
        }

        public static string ResolveDescription(DiplomaticRelationType type)
        {
            return type switch
            {
                DiplomaticRelationType.FreeTradeAgreement => TextResolver.GetText("DiplomaticRelationType FreeTradeAgreement"),
                DiplomaticRelationType.MutualDefensePact => TextResolver.GetText("DiplomaticRelationType MutualDefensePact"),
                DiplomaticRelationType.None => TextResolver.GetText("DiplomaticRelationType None"),
                DiplomaticRelationType.NotMet => TextResolver.GetText("DiplomaticRelationType NotMet"),
                DiplomaticRelationType.Protectorate => TextResolver.GetText("DiplomaticRelationType Protectorate"),
                DiplomaticRelationType.SubjugatedDominion => TextResolver.GetText("DiplomaticRelationType SubjugatedDominion"),
                DiplomaticRelationType.TradeSanctions => TextResolver.GetText("DiplomaticRelationType TradeSanctions"),
                DiplomaticRelationType.Truce => TextResolver.GetText("DiplomaticRelationType Truce"),
                DiplomaticRelationType.War => TextResolver.GetText("DiplomaticRelationType War"),
                _ => SplitString(type.ToString()),
            };
        }

        public static string ResolveDescription(HabitatAtmosphereType atmosphere)
        {
            return SplitString(atmosphere.ToString());
        }

        public static string ResolveDescription(HabitatCategoryType type)
        {
            return type switch
            {
                HabitatCategoryType.Asteroid => TextResolver.GetText("HabitatCategoryType Asteroid"),
                HabitatCategoryType.GasCloud => TextResolver.GetText("HabitatCategoryType GasCloud"),
                HabitatCategoryType.Moon => TextResolver.GetText("HabitatCategoryType Moon"),
                HabitatCategoryType.Planet => TextResolver.GetText("HabitatCategoryType Planet"),
                HabitatCategoryType.Star => TextResolver.GetText("HabitatCategoryType Star"),
                _ => SplitString(type.ToString()),
            };
        }

        public static string ResolveDescription(HabitatType type)
        {
            return type switch
            {
                HabitatType.Ammonia => TextResolver.GetText("HabitatType Ammonia"),
                HabitatType.Argon => TextResolver.GetText("HabitatType Argon"),
                HabitatType.BarrenRock => TextResolver.GetText("HabitatType BarrenRock"),
                HabitatType.BlackHole => TextResolver.GetText("HabitatType BlackHole"),
                HabitatType.CarbonDioxide => TextResolver.GetText("HabitatType CarbonDioxide"),
                HabitatType.Chlorine => TextResolver.GetText("HabitatType Chlorine"),
                HabitatType.Continental => TextResolver.GetText("HabitatType Continental"),
                HabitatType.Desert => TextResolver.GetText("HabitatType Desert"),
                HabitatType.FrozenGasGiant => TextResolver.GetText("HabitatType FrozenGasGiant"),
                HabitatType.GasGiant => TextResolver.GetText("HabitatType GasGiant"),
                HabitatType.Helium => TextResolver.GetText("HabitatType Helium"),
                HabitatType.Hydrogen => TextResolver.GetText("HabitatType Hydrogen"),
                HabitatType.Ice => TextResolver.GetText("HabitatType Ice"),
                HabitatType.MainSequence => TextResolver.GetText("HabitatType MainSequence"),
                HabitatType.MarshySwamp => TextResolver.GetText("HabitatType MarshySwamp"),
                HabitatType.Metal => TextResolver.GetText("HabitatType Metal"),
                HabitatType.Neutron => TextResolver.GetText("HabitatType Neutron"),
                HabitatType.NitrogenOxygen => TextResolver.GetText("HabitatType NitrogenOxygen"),
                HabitatType.Ocean => TextResolver.GetText("HabitatType Ocean"),
                HabitatType.Oxygen => TextResolver.GetText("HabitatType Oxygen"),
                HabitatType.RedGiant => TextResolver.GetText("HabitatType RedGiant"),
                HabitatType.SuperGiant => TextResolver.GetText("HabitatType SuperGiant"),
                HabitatType.SuperNova => TextResolver.GetText("HabitatType SuperNova"),
                HabitatType.Volcanic => TextResolver.GetText("HabitatType Volcanic"),
                HabitatType.WhiteDwarf => TextResolver.GetText("HabitatType WhiteDwarf"),
                HabitatType.Undefined => TextResolver.GetText("None"),
                _ => SplitString(type.ToString()),
            };
        }

        public static string ResolveDescription(CreatureType type)
        {
            string empty = string.Empty;
            return type switch
            {
                CreatureType.Ardilus => TextResolver.GetText("Ardilus"),
                CreatureType.DesertSpaceSlug => TextResolver.GetText("Sand Slug"),
                CreatureType.RockSpaceSlug => TextResolver.GetText("Space Slug"),
                CreatureType.Kaltor => TextResolver.GetText("Giant Kaltor"),
                CreatureType.SilverMist => TextResolver.GetText("SilverMist"),
                _ => "(" + TextResolver.GetText("Unknown") + ")",
            };
        }

        public static string ResolveDescription(EncyclopediaCategory category)
        {
            return category switch
            {
                EncyclopediaCategory.Components => TextResolver.GetText("Components"),
                EncyclopediaCategory.Creatures => TextResolver.GetText("Space Creatures"),
                EncyclopediaCategory.Editor => TextResolver.GetText("Game Editor"),
                EncyclopediaCategory.GameConcepts => TextResolver.GetText("Game Concepts"),
                EncyclopediaCategory.GovernmentTypes => TextResolver.GetText("Government Types"),
                EncyclopediaCategory.PlanetsAndStars => TextResolver.GetText("Planet Types"),
                EncyclopediaCategory.Races => TextResolver.GetText("Alien Races"),
                EncyclopediaCategory.Resources => TextResolver.GetText("Resources"),
                EncyclopediaCategory.Screens => TextResolver.GetText("Game Screens"),
                EncyclopediaCategory.Ships => TextResolver.GetText("Ships and Bases"),
                EncyclopediaCategory.UserInterface => TextResolver.GetText("Finding Your Way Around"),
                EncyclopediaCategory.Undefined => TextResolver.GetText("None"),
                _ => SplitString(category.ToString()),
            };
        }

        public static string ResolveDescription(IntelligenceMissionType type)
        {
            return type switch
            {
                IntelligenceMissionType.CounterIntelligence => TextResolver.GetText("IntelligenceMissionType CounterIntelligence"),
                IntelligenceMissionType.DeepCover => TextResolver.GetText("IntelligenceMissionType DeepCover"),
                IntelligenceMissionType.InciteRevolution => TextResolver.GetText("IntelligenceMissionType InciteRevolution"),
                IntelligenceMissionType.SabotageColony => TextResolver.GetText("IntelligenceMissionType SabotageColony"),
                IntelligenceMissionType.SabotageConstruction => TextResolver.GetText("IntelligenceMissionType SabotageConstruction"),
                IntelligenceMissionType.StealGalaxyMap => TextResolver.GetText("IntelligenceMissionType StealGalaxyMap"),
                IntelligenceMissionType.StealOperationsMap => TextResolver.GetText("IntelligenceMissionType StealOperationsMap"),
                IntelligenceMissionType.StealTechData => TextResolver.GetText("IntelligenceMissionType StealTechData"),
                IntelligenceMissionType.StealTerritoryMap => TextResolver.GetText("IntelligenceMissionType StealTerritoryMap"),
                IntelligenceMissionType.DestroyBase => TextResolver.GetText("IntelligenceMissionType DestroyBase"),
                IntelligenceMissionType.AssassinateCharacter => TextResolver.GetText("IntelligenceMissionType AssassinateCharacter"),
                IntelligenceMissionType.Undefined => TextResolver.GetText("None"),
                _ => SplitString(type.ToString()),
            };
        }

        public static string CapitalizeFirstLetter(string text)
        {
            string text2 = text.Substring(0, 1);
            string text3 = text.Substring(1, text.Length - 1);
            return text2.ToUpper(CultureInfo.InvariantCulture) + text3;
        }

        public static string ResolveDescription(PiratePlayStyle piratePlayStyle)
        {
            string result = string.Empty;
            switch (piratePlayStyle)
            {
                case PiratePlayStyle.Undefined:
                    result = TextResolver.GetText("None");
                    break;
                case PiratePlayStyle.Balanced:
                    result = TextResolver.GetText("PiratePlayStyle Balanced");
                    break;
                case PiratePlayStyle.Pirate:
                    result = TextResolver.GetText("PiratePlayStyle Pirate");
                    break;
                case PiratePlayStyle.Mercenary:
                    result = TextResolver.GetText("PiratePlayStyle Mercenary");
                    break;
                case PiratePlayStyle.Smuggler:
                    result = TextResolver.GetText("PiratePlayStyle Smuggler");
                    break;
            }
            return result;
        }

        public static string ResolveDescription(RaceVictoryCondition raceVictoryCondition, Empire empire)
        {
            string result = string.Empty;
            if (raceVictoryCondition != null)
            {
                switch (raceVictoryCondition.Type)
                {
                    case RaceVictoryConditionType.PirateBuildCriminalNetwork:
                        result = TextResolver.GetText("Race Victory Condition PirateBuildCriminalNetwork");
                        break;
                    case RaceVictoryConditionType.PirateBuildHiddenFortress:
                        result = TextResolver.GetText("Race Victory Condition PirateBuildHiddenFortress");
                        break;
                    case RaceVictoryConditionType.PirateBuildMostHiddenBases:
                        result = TextResolver.GetText("Race Victory Condition PirateBuildMostHiddenBases");
                        break;
                    case RaceVictoryConditionType.PirateControlColoniesPercentage:
                        result = string.Format(TextResolver.GetText("Race Victory Condition PirateControlColoniesPercentage"), raceVictoryCondition.Amount.ToString("0"));
                        break;
                    case RaceVictoryConditionType.PirateEliminateMostPirateFactions:
                        result = TextResolver.GetText("Race Victory Condition PirateEliminateMostPirateFactions");
                        break;
                    case RaceVictoryConditionType.PirateMostProtectionIncome:
                        result = TextResolver.GetText("Race Victory Condition PirateMostProtectionIncome");
                        break;
                    case RaceVictoryConditionType.PirateMostSmugglingIncome:
                        result = TextResolver.GetText("Race Victory Condition PirateMostSmugglingIncome");
                        break;
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsAttack:
                        result = TextResolver.GetText("Race Victory Condition PirateMostSuccessfulMissionsAttack");
                        break;
                    case RaceVictoryConditionType.PirateMostSuccessfulRaids:
                        result = TextResolver.GetText("Race Victory Condition PirateMostSuccessfulRaids");
                        break;
                    case RaceVictoryConditionType.PirateMostSuccessfulMissionsDefend:
                        result = TextResolver.GetText("Race Victory Condition PirateMostSuccessfulMissionsDefend");
                        break;
                    case RaceVictoryConditionType.CaptureMostShips:
                        result = TextResolver.GetText("Race Victory Condition CaptureMostShips");
                        break;
                    case RaceVictoryConditionType.BuildWonder:
                        if (raceVictoryCondition.AdditionalData is PlanetaryFacilityDefinition)
                        {
                            PlanetaryFacilityDefinition planetaryFacilityDefinition = (PlanetaryFacilityDefinition)raceVictoryCondition.AdditionalData;
                            result = string.Format(TextResolver.GetText("Race Victory Condition BuildWonder"), planetaryFacilityDefinition.Name);
                        }
                        break;
                    case RaceVictoryConditionType.ConquerMostEnemyColonies:
                        result = TextResolver.GetText("Race Victory Condition ConquerMostEnemyColonies");
                        break;
                    case RaceVictoryConditionType.ControlHomeworld:
                        result = ((empire == null || empire.HomeWorld == null) ? string.Format(TextResolver.GetText("Race Victory Condition ControlHomeworld"), "") : string.Format(TextResolver.GetText("Race Victory Condition ControlHomeworld"), "(" + empire.HomeWorld.Name + ")"));
                        break;
                    case RaceVictoryConditionType.ControlLargestColoniesByType:
                        if (raceVictoryCondition.AdditionalData is HabitatType)
                        {
                            HabitatType type3 = (HabitatType)raceVictoryCondition.AdditionalData;
                            result = string.Format(TextResolver.GetText("Race Victory Condition ControlLargestColoniesByType"), raceVictoryCondition.Amount.ToString("0"), ResolveDescription(type3));
                        }
                        break;
                    case RaceVictoryConditionType.ControlMostRuins:
                        result = TextResolver.GetText("Race Victory Condition ControlMostRuins");
                        break;
                    case RaceVictoryConditionType.ControlPlanetTypePercentage:
                        if (raceVictoryCondition.AdditionalData is HabitatType)
                        {
                            HabitatType type2 = (HabitatType)raceVictoryCondition.AdditionalData;
                            result = string.Format(TextResolver.GetText("Race Victory Condition ControlPlanetTypePercentage"), raceVictoryCondition.Amount.ToString("0"), ResolveDescription(type2));
                        }
                        break;
                    case RaceVictoryConditionType.ControlRestrictedResourceSupply:
                        result = string.Format(TextResolver.GetText("Race Victory Condition ControlRestrictedResourceSupply"), raceVictoryCondition.Amount.ToString("0"));
                        break;
                    case RaceVictoryConditionType.DestroyMoreEnemyTroopsThanLoseTimesFactor:
                        result = ((raceVictoryCondition.Amount != 1.0) ? ((raceVictoryCondition.Amount % 1.0 != 0.0) ? string.Format(TextResolver.GetText("Race Victory Condition DestroyMoreEnemyTroopsThanLoseTimesFactor"), raceVictoryCondition.Amount.ToString("0.0")) : string.Format(TextResolver.GetText("Race Victory Condition DestroyMoreEnemyTroopsThanLoseTimesFactor"), raceVictoryCondition.Amount.ToString("0"))) : string.Format(TextResolver.GetText("Race Victory Condition DestroyMoreEnemyTroopsThanLoseTimesFactorSingle")));
                        break;
                    case RaceVictoryConditionType.DestroyMoreShipsThanLoseTimesFactor:
                        result = ((raceVictoryCondition.Amount != 1.0) ? ((raceVictoryCondition.Amount % 1.0 != 0.0) ? string.Format(TextResolver.GetText("Race Victory Condition DestroyMoreShipsThanLoseTimesFactor"), raceVictoryCondition.Amount.ToString("0.0")) : string.Format(TextResolver.GetText("Race Victory Condition DestroyMoreShipsThanLoseTimesFactor"), raceVictoryCondition.Amount.ToString("0"))) : string.Format(TextResolver.GetText("Race Victory Condition DestroyMoreShipsThanLoseTimesFactorSingle")));
                        break;
                    case RaceVictoryConditionType.DestroyMostCreaturesByType:
                        if (raceVictoryCondition.AdditionalData is CreatureType)
                        {
                            CreatureType type = (CreatureType)raceVictoryCondition.AdditionalData;
                            result = string.Format(TextResolver.GetText("Race Victory Condition DestroyMostCreaturesByType"), ResolveDescription(type));
                        }
                        break;
                    case RaceVictoryConditionType.DestroyMostShips:
                        result = TextResolver.GetText("Race Victory Condition DestroyMostShips");
                        break;
                    case RaceVictoryConditionType.DestroyMostTroops:
                        result = TextResolver.GetText("Race Victory Condition DestroyMostTroops");
                        break;
                    case RaceVictoryConditionType.EnslavePopulationProportionEmpire:
                        result = string.Format(TextResolver.GetText("Race Victory Condition EnslavePopulationProportionEmpire"), raceVictoryCondition.Amount.ToString("0"));
                        break;
                    case RaceVictoryConditionType.ExploreGalaxyPercentage:
                        result = string.Format(TextResolver.GetText("Race Victory Condition ExploreGalaxyPercentage"), raceVictoryCondition.Amount.ToString("0"));
                        break;
                    case RaceVictoryConditionType.ExploreMostSystems:
                        result = TextResolver.GetText("Race Victory Condition ExploreMostSystems");
                        break;
                    case RaceVictoryConditionType.ExterminateOrEnslaveMostPopulation:
                        result = TextResolver.GetText("Race Victory Condition ExterminateOrEnslaveMostPopulation");
                        break;
                    case RaceVictoryConditionType.FreeTradeAgreementsFormedProportionAllEmpires:
                        result = string.Format(TextResolver.GetText("Race Victory Condition FreeTradeAgreementsFormedProportionAllEmpires"), raceVictoryCondition.Amount.ToString("0"));
                        break;
                    case RaceVictoryConditionType.HighestPrivateRevenue:
                        result = TextResolver.GetText("Race Victory Condition HighestPrivateRevenue");
                        break;
                    case RaceVictoryConditionType.HighestTradeVolume:
                        result = TextResolver.GetText("Race Victory Condition HighestTradeVolume");
                        break;
                    case RaceVictoryConditionType.KeepLeaderAlive:
                        result = TextResolver.GetText("Race Victory Condition KeepLeaderAlive");
                        break;
                    case RaceVictoryConditionType.LargestMilitary:
                        result = TextResolver.GetText("Race Victory Condition LargestMilitary");
                        break;
                    case RaceVictoryConditionType.LargestMilitaryNonAllied:
                        result = TextResolver.GetText("Race Victory Condition LargestMilitaryNonAllied");
                        break;
                    case RaceVictoryConditionType.LeastBrokenTreaties:
                        result = TextResolver.GetText("Race Victory Condition LeastBrokenTreaties");
                        break;
                    case RaceVictoryConditionType.LeastTimeWarring:
                        result = TextResolver.GetText("Race Victory Condition LeastTimeWarring");
                        break;
                    case RaceVictoryConditionType.LeastTreaties:
                        result = TextResolver.GetText("Race Victory Condition LeastTreaties");
                        break;
                    case RaceVictoryConditionType.LeastWarsStarted:
                        result = TextResolver.GetText("Race Victory Condition LeastWars");
                        break;
                    case RaceVictoryConditionType.LoseFewestShips:
                        result = TextResolver.GetText("Race Victory Condition LoseFewestShips");
                        break;
                    case RaceVictoryConditionType.LoseFewestTroops:
                        result = TextResolver.GetText("Race Victory Condition LoseFewestTroops");
                        break;
                    case RaceVictoryConditionType.MostExperiencedAdmiral:
                        result = TextResolver.GetText("Race Victory Condition MostExperiencedAdmiral");
                        break;
                    case RaceVictoryConditionType.MostExperiencedGeneral:
                        result = TextResolver.GetText("Race Victory Condition MostExperiencedGeneral");
                        break;
                    case RaceVictoryConditionType.MostHomeworlds:
                        result = TextResolver.GetText("Race Victory Condition MostHomeworlds");
                        break;
                    case RaceVictoryConditionType.MostIntelligenceMissionsIntercepted:
                        result = TextResolver.GetText("Race Victory Condition MostIntelligenceMissionsIntercepted");
                        break;
                    case RaceVictoryConditionType.MostIntelligenceMissionsSucceed:
                        result = TextResolver.GetText("Race Victory Condition MostIntelligenceMissionsSucceed");
                        break;
                    case RaceVictoryConditionType.MostMiningStations:
                        result = TextResolver.GetText("Race Victory Condition MostMiningStations");
                        break;
                    case RaceVictoryConditionType.MostResortBases:
                        result = TextResolver.GetText("Race Victory Condition MostResortBases");
                        break;
                    case RaceVictoryConditionType.MostScientists:
                        result = TextResolver.GetText("Race Victory Condition MostScientists");
                        break;
                    case RaceVictoryConditionType.MostSpaceports:
                        result = TextResolver.GetText("Race Victory Condition MostSpaceports");
                        break;
                    case RaceVictoryConditionType.MostSubjugatedDominions:
                        result = TextResolver.GetText("Race Victory Condition MostSubjugatedDominions");
                        break;
                    case RaceVictoryConditionType.MostTimeWarring:
                        result = TextResolver.GetText("Race Victory Condition MostTimeWarring");
                        break;
                    case RaceVictoryConditionType.MostTourismIncome:
                        result = TextResolver.GetText("Race Victory Condition MostTourismIncome");
                        break;
                    case RaceVictoryConditionType.MostTradeIncome:
                        result = TextResolver.GetText("Race Victory Condition MostTradeIncome");
                        break;
                    case RaceVictoryConditionType.MostTroops:
                        result = TextResolver.GetText("Race Victory Condition MostTroops");
                        break;
                    case RaceVictoryConditionType.MostTroopsNonAllied:
                        result = TextResolver.GetText("Race Victory Condition MostTroopsNonAllied");
                        break;
                    case RaceVictoryConditionType.MutualDefensePactsFormedProportionAllEmpires:
                        result = string.Format(TextResolver.GetText("Race Victory Condition MutualDefensePactsFormedProportionAllEmpires"), raceVictoryCondition.Amount.ToString("0"));
                        break;
                    case RaceVictoryConditionType.OldestFreeTradeAgreement:
                        result = TextResolver.GetText("Race Victory Condition OldestFreeTradeAgreement");
                        break;
                    case RaceVictoryConditionType.OldestMutualDefensePact:
                        result = TextResolver.GetText("Race Victory Condition OldestMutualDefensePact");
                        break;
                    case RaceVictoryConditionType.OwnLargestCapitalShip:
                        result = TextResolver.GetText("Race Victory Condition OwnLargestCapitalShip");
                        break;
                    case RaceVictoryConditionType.PopulationHappiest:
                        result = TextResolver.GetText("Race Victory Condition PopulationHappiest");
                        break;
                    case RaceVictoryConditionType.PopulationHighest:
                        result = TextResolver.GetText("Race Victory Condition PopulationHighest");
                        break;
                    case RaceVictoryConditionType.ResearchLeastAdvanced:
                        result = TextResolver.GetText("Race Victory Condition ResearchLeastAdvanced");
                        break;
                    case RaceVictoryConditionType.ResearchMostAdvanced:
                        result = TextResolver.GetText("Race Victory Condition ResearchMostAdvanced");
                        break;
                    case RaceVictoryConditionType.ResearchMostCompletedBranches:
                        result = TextResolver.GetText("Race Victory Condition ResearchMostCompletedBranches");
                        break;
                    case RaceVictoryConditionType.ResearchMostCompletedBranchesByIndustry:
                        if (raceVictoryCondition.AdditionalData is IndustryType)
                        {
                            IndustryType industry = (IndustryType)raceVictoryCondition.AdditionalData;
                            result = string.Format(TextResolver.GetText("Race Victory Condition ResearchMostCompletedBranchesByIndustry"), ResolveDescription(industry));
                        }
                        break;
                    case RaceVictoryConditionType.MineMostResourcesLuxury:
                        result = TextResolver.GetText("Race Victory Condition MineMostResourcesLuxury");
                        break;
                    case RaceVictoryConditionType.MineMostResourcesStrategic:
                        result = TextResolver.GetText("Race Victory Condition MineMostResourcesStrategic");
                        break;
                    case RaceVictoryConditionType.MineMostResourcesColonyManufactured:
                        result = TextResolver.GetText("Race Victory Condition MineMostResourcesColonyManufactured");
                        break;
                    case RaceVictoryConditionType.BuildMostMilitaryShips:
                        result = TextResolver.GetText("Race Victory Condition BuildMostMilitaryShips");
                        break;
                    case RaceVictoryConditionType.BuildMostCivilianShips:
                        result = TextResolver.GetText("Race Victory Condition BuildMostCivilianShips");
                        break;
                    case RaceVictoryConditionType.BuildMostBases:
                        result = TextResolver.GetText("Race Victory Condition BuildMostBases");
                        break;
                }
            }
            return result;
        }

        public static string ResolveDescription(RaceEventType raceEventType)
        {
            string result = string.Empty;
            switch (raceEventType)
            {
                case RaceEventType.AntiXenoRiotsExterminate:
                    result = TextResolver.GetText("Race Event Title AntiXenoRiotsExterminate");
                    break;
                case RaceEventType.CannibalismPopulationShrinks:
                    result = TextResolver.GetText("Race Event Title CannibalismPopulationShrinks");
                    break;
                case RaceEventType.CreativeReengineeringFreeCrashResearch:
                    result = TextResolver.GetText("Race Event Title CreativeReengineeringFreeCrashResearch");
                    break;
                case RaceEventType.DeathCultExterminate:
                    result = TextResolver.GetText("Race Event Title DeathCultExterminate");
                    break;
                case RaceEventType.DestinyCharacterTraits:
                    result = TextResolver.GetText("Race Event Title DestinyCharacterTraits");
                    break;
                case RaceEventType.ForcedRetirementLeaderReplaced:
                    result = TextResolver.GetText("Race Event Title ForcedRetirementLeaderReplaced");
                    break;
                case RaceEventType.FriendsInManyPlacesRevealTerritory:
                    result = TextResolver.GetText("Race Event Title FriendsInManyPlacesRevealTerritory");
                    break;
                case RaceEventType.GrandPerformanceDiplomacyBonus:
                    result = TextResolver.GetText("Race Event Title GrandPerformanceDiplomacyBonus");
                    break;
                case RaceEventType.GreatHuntStrongTroops:
                    result = TextResolver.GetText("Race Event Title GreatHuntStrongTroops");
                    break;
                case RaceEventType.HistoricalDiscoveryExploreRuinsForResearchBoost:
                    result = TextResolver.GetText("Race Event Title HistoricalDiscoveryExploreRuinsForResearchBoost");
                    break;
                case RaceEventType.HistoricalKnowledgeUncoverHiddenLocation:
                    result = TextResolver.GetText("Race Event Title HistoricalKnowledgeUncoverHiddenLocation");
                    break;
                case RaceEventType.IsolationistsResetFirstContactPenalty:
                    result = TextResolver.GetText("Race Event Title IsolationistsResetFirstContactPenalty");
                    break;
                case RaceEventType.LuckyAvertColonyDisaster:
                    result = TextResolver.GetText("Race Event Title LuckyAvertColonyDisaster");
                    break;
                case RaceEventType.MetamorphosisCharacterChange:
                    result = TextResolver.GetText("Race Event Title MetamorphosisCharacterChange");
                    break;
                case RaceEventType.NaturalHarmonyColonyQualityIncreased:
                    result = TextResolver.GetText("Race Event Title NaturalHarmonyColonyQualityIncreased");
                    break;
                case RaceEventType.NepthysWineVintage:
                    result = TextResolver.GetText("Race Event Title NepthysWineVintage");
                    break;
                case RaceEventType.NeverSurrenderWarWearinessReset:
                    result = TextResolver.GetText("Race Event Title NeverSurrenderWarWearinessReset");
                    break;
                case RaceEventType.PredictiveHistory:
                    result = TextResolver.GetText("Race Event Title PredictiveHistory");
                    break;
                case RaceEventType.ScientificBreakthroughResearchProgress:
                    result = TextResolver.GetText("Race Event Title ScientificBreakthroughResearchProgress");
                    break;
                case RaceEventType.SecurityConcernsCharacterReplaced:
                    result = TextResolver.GetText("Race Event Title SecurityConcernsCharacterReplaced");
                    break;
                case RaceEventType.ShakturiArtifactWeaponResearch:
                    result = TextResolver.GetText("Race Event Title ShakturiArtifactWeaponResearch");
                    break;
                case RaceEventType.StrengthInNumbersMaintenanceLowerForSmallShips:
                    result = TextResolver.GetText("Race Event Title StrengthInNumbersMaintenanceLowerForSmallShips");
                    break;
                case RaceEventType.SuppressedKnowledgeLoseResearch:
                    result = TextResolver.GetText("Race Event Title SuppressedKnowledgeLoseResearch");
                    break;
                case RaceEventType.SupremeWarriorNewGeneral:
                    result = TextResolver.GetText("Race Event Title SupremeWarriorNewGeneral");
                    break;
                case RaceEventType.SwarmsFullTroopTransport:
                    result = TextResolver.GetText("Race Event Title SwarmsFullTroopTransport");
                    break;
                case RaceEventType.TodashGalacticChampionships:
                    result = TextResolver.GetText("Race Event Title TodashGalacticChampionships");
                    break;
                case RaceEventType.UnderwaterLeviathan:
                    result = TextResolver.GetText("Race Event Title UnderwaterLeviathan");
                    break;
                case RaceEventType.WarriorWaveTroopRecruitment:
                    result = TextResolver.GetText("Race Event Title WarriorWaveTroopRecruitment");
                    break;
                case RaceEventType.XenophobiaNoAssimilate:
                    result = TextResolver.GetText("Race Event Title XenophobiaNoAssimilate");
                    break;
            }
            return result;
        }

        public static RaceSummary GenerateRaceSummary(Race race)
        {
            if (race != null)
            {
                RaceSummary raceSummary = new RaceSummary(race);
                RaceSummarySection raceSummarySection = null;
                List<string> list = ResolveRaceBonuses(race);
                List<string> list2 = ResolveRaceCharacteristics(race);
                List<int> list3 = Empire.ResolveRaceSpecificGovernmentTypes(race);
                raceSummarySection = new RaceSummarySection("");
                raceSummarySection.Items.Add(TextResolver.GetText("Race Family") + ": " + ResolveRaceFamilyDescription(race.FamilyId));
                raceSummarySection.Items.Add(TextResolver.GetText("Native Planet Type") + ": " + ResolveDescription(race.NativeHabitatType));
                raceSummarySection.Items.Add(TextResolver.GetText("Default Reproduction Rate") + ": " + (race.ReproductiveRate - 1.0).ToString("+0%"));
                raceSummary.Sections.Add(raceSummarySection);
                raceSummarySection = new RaceSummarySection(TextResolver.GetText("Characteristics"));
                for (int i = 0; i < list2.Count; i++)
                {
                    raceSummarySection.Items.Add(list2[i]);
                }
                raceSummary.Sections.Add(raceSummarySection);
                if (list.Count > 0)
                {
                    raceSummarySection = new RaceSummarySection(TextResolver.GetText("Bonuses"));
                    for (int j = 0; j < list.Count; j++)
                    {
                        raceSummarySection.Items.Add(list[j]);
                    }
                    raceSummary.Sections.Add(raceSummarySection);
                }
                if (race.CriticalResources != null && race.CriticalResources.Count > 0)
                {
                    raceSummarySection = new RaceSummarySection(TextResolver.GetText("Resource Bonuses"));
                    for (int k = 0; k < race.CriticalResources.Count; k++)
                    {
                        ResourceBonus resourceBonus = race.CriticalResources[k];
                        if (resourceBonus != null)
                        {
                            raceSummarySection.Items.Add(ResolveDescriptionGeneral(resourceBonus));
                        }
                    }
                    raceSummary.Sections.Add(raceSummarySection);
                }
                if (race.VictoryConditions != null && race.VictoryConditions.Count > 0)
                {
                    raceSummarySection = new RaceSummarySection(TextResolver.GetText("Race Victory Conditions"));
                    for (int l = 0; l < race.VictoryConditions.Count; l++)
                    {
                        RaceVictoryCondition raceVictoryCondition = race.VictoryConditions[l];
                        if (raceVictoryCondition != null)
                        {
                            raceSummarySection.Items.Add(raceVictoryCondition.Proportion.ToString("0") + "%:  " + ResolveDescription(raceVictoryCondition, null));
                        }
                    }
                    raceSummary.Sections.Add(raceSummarySection);
                }
                raceSummarySection = new RaceSummarySection(TextResolver.GetText("Colonies"));
                if (race.ResearchColonizationCostFactorContinental != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colonization Cost Factor Description"), ResolveDescription(HabitatType.Continental), (race.ResearchColonizationCostFactorContinental - 1.0).ToString("+0%;-0%")));
                }
                if (race.ResearchColonizationCostFactorMarshySwamp != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colonization Cost Factor Description"), ResolveDescription(HabitatType.MarshySwamp), (race.ResearchColonizationCostFactorMarshySwamp - 1.0).ToString("+0%;-0%")));
                }
                if (race.ResearchColonizationCostFactorOcean != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colonization Cost Factor Description"), ResolveDescription(HabitatType.Ocean), (race.ResearchColonizationCostFactorOcean - 1.0).ToString("+0%;-0%")));
                }
                if (race.ResearchColonizationCostFactorDesert != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colonization Cost Factor Description"), ResolveDescription(HabitatType.Desert), (race.ResearchColonizationCostFactorDesert - 1.0).ToString("+0%;-0%")));
                }
                if (race.ResearchColonizationCostFactorIce != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colonization Cost Factor Description"), ResolveDescription(HabitatType.Ice), (race.ResearchColonizationCostFactorIce - 1.0).ToString("+0%;-0%")));
                }
                if (race.ResearchColonizationCostFactorVolcanic != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colonization Cost Factor Description"), ResolveDescription(HabitatType.Volcanic), (race.ResearchColonizationCostFactorVolcanic - 1.0).ToString("+0%;-0%")));
                }
                if (race.ColonyConstructionSpeedFactorContinental != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Construction Speed Factor Description"), ResolveDescription(HabitatType.Continental), (race.ColonyConstructionSpeedFactorContinental - 1.0).ToString("+0%;-0%")));
                }
                if (race.ColonyConstructionSpeedFactorMarshySwamp != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Construction Speed Factor Description"), ResolveDescription(HabitatType.MarshySwamp), (race.ColonyConstructionSpeedFactorMarshySwamp - 1.0).ToString("+0%;-0%")));
                }
                if (race.ColonyConstructionSpeedFactorOcean != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Construction Speed Factor Description"), ResolveDescription(HabitatType.Ocean), (race.ColonyConstructionSpeedFactorOcean - 1.0).ToString("+0%;-0%")));
                }
                if (race.ColonyConstructionSpeedFactorDesert != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Construction Speed Factor Description"), ResolveDescription(HabitatType.Desert), (race.ColonyConstructionSpeedFactorDesert - 1.0).ToString("+0%;-0%")));
                }
                if (race.ColonyConstructionSpeedFactorIce != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Construction Speed Factor Description"), ResolveDescription(HabitatType.Ice), (race.ColonyConstructionSpeedFactorIce - 1.0).ToString("+0%;-0%")));
                }
                if (race.ColonyConstructionSpeedFactorVolcanic != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Construction Speed Factor Description"), ResolveDescription(HabitatType.Volcanic), (race.ColonyConstructionSpeedFactorVolcanic - 1.0).ToString("+0%;-0%")));
                }
                if (race.ColonyPopulationPolicyGrowthFactorExterminate != 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Exterminate Policy Growth Factor Description"), (race.ColonyPopulationPolicyGrowthFactorExterminate - 1.0).ToString("+0%;-0%")));
                }
                if (race.ImmuneNaturalDisastersAtColonyType != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Colony Immune Disasters Description"), ResolveDescription(race.ImmuneNaturalDisastersAtColonyType)));
                }
                if (raceSummarySection.Items.Count > 0)
                {
                    raceSummary.Sections.Add(raceSummarySection);
                }
                raceSummarySection = new RaceSummarySection(TextResolver.GetText("Characters"));
                if (race.IntelligenceAgentAdditional > 0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Extra Intelligence Agents") + ": " + race.IntelligenceAgentAdditional);
                }
                if (race.CharacterRandomAppearanceChanceLeader < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.Leader), (race.CharacterRandomAppearanceChanceLeader - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceLeader > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.Leader), (race.CharacterRandomAppearanceChanceLeader - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChanceAmbassador < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.Ambassador), (race.CharacterRandomAppearanceChanceAmbassador - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceAmbassador > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.Ambassador), (race.CharacterRandomAppearanceChanceAmbassador - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChanceGovernor < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.ColonyGovernor), (race.CharacterRandomAppearanceChanceGovernor - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceGovernor > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.ColonyGovernor), (race.CharacterRandomAppearanceChanceGovernor - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChanceAdmiral < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.FleetAdmiral), (race.CharacterRandomAppearanceChanceAdmiral - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceAdmiral > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.FleetAdmiral), (race.CharacterRandomAppearanceChanceAdmiral - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChanceGeneral < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.TroopGeneral), (race.CharacterRandomAppearanceChanceGeneral - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceGeneral > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.TroopGeneral), (race.CharacterRandomAppearanceChanceGeneral - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChanceScientist < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.Scientist), (race.CharacterRandomAppearanceChanceScientist - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceScientist > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.Scientist), (race.CharacterRandomAppearanceChanceScientist - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChanceIntelligenceAgent < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.IntelligenceAgent), (race.CharacterRandomAppearanceChanceIntelligenceAgent - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceIntelligenceAgent > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.IntelligenceAgent), (race.CharacterRandomAppearanceChanceIntelligenceAgent - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChancePirateLeader < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.PirateLeader), (race.CharacterRandomAppearanceChancePirateLeader - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChancePirateLeader > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.PirateLeader), (race.CharacterRandomAppearanceChancePirateLeader - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterRandomAppearanceChanceShipCaptain < 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance Less Description"), ResolveDescription(CharacterRole.ShipCaptain), (race.CharacterRandomAppearanceChanceShipCaptain - 1.0).ToString("+0%;-0%")));
                }
                else if (race.CharacterRandomAppearanceChanceShipCaptain > 1.0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Appearance Chance More Description"), ResolveDescription(CharacterRole.ShipCaptain), (race.CharacterRandomAppearanceChanceShipCaptain - 1.0).ToString("+0%;-0%")));
                }
                if (race.CharacterStartingTraitLeader != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.Leader), ResolveDescription(race.CharacterStartingTraitLeader)));
                }
                if (race.CharacterStartingTraitAmbassador != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.Ambassador), ResolveDescription(race.CharacterStartingTraitAmbassador)));
                }
                if (race.CharacterStartingTraitGovernor != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.ColonyGovernor), ResolveDescription(race.CharacterStartingTraitGovernor)));
                }
                if (race.CharacterStartingTraitAdmiral != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.FleetAdmiral), ResolveDescription(race.CharacterStartingTraitAdmiral)));
                }
                if (race.CharacterStartingTraitGeneral != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.TroopGeneral), ResolveDescription(race.CharacterStartingTraitGeneral)));
                }
                if (race.CharacterStartingTraitScientist != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.Scientist), ResolveDescription(race.CharacterStartingTraitScientist)));
                }
                if (race.CharacterStartingTraitIntelligenceAgent != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.IntelligenceAgent), ResolveDescription(race.CharacterStartingTraitIntelligenceAgent)));
                }
                if (race.CharacterStartingTraitPirateLeader != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.PirateLeader), ResolveDescription(race.CharacterStartingTraitPirateLeader)));
                }
                if (race.CharacterStartingTraitShipCaptain != 0)
                {
                    raceSummarySection.Items.Add(string.Format(TextResolver.GetText("Character Starting Trait Description"), ResolveDescription(CharacterRole.ShipCaptain), ResolveDescription(race.CharacterStartingTraitShipCaptain)));
                }
                if (raceSummarySection.Items.Count > 0)
                {
                    raceSummary.Sections.Add(raceSummarySection);
                }
                raceSummarySection = new RaceSummarySection(TextResolver.GetText("Other"));
                foreach (int item3 in list3)
                {
                    GovernmentAttributes governmentAttributes = GovernmentsStatic[item3];
                    raceSummarySection.Items.Add(TextResolver.GetText("Special Government") + ": " + governmentAttributes.Name);
                }
                if (race.DisallowedGovernmentIds.Count > 0)
                {
                    string text = TextResolver.GetText("Disallowed Governments") + ": ";
                    for (int m = 0; m < race.DisallowedGovernmentIds.Count; m++)
                    {
                        GovernmentAttributes governmentAttributes2 = GovernmentsStatic[race.DisallowedGovernmentIds[m]];
                        text = text + governmentAttributes2.Name + ", ";
                    }
                    text = text.TrimEnd(' ', ',');
                    raceSummarySection.Items.Add(text);
                }
                ComponentList componentList = ResearchNodeDefinitionsStatic.ResolveRaceSpecificComponents(race);
                if (componentList != null)
                {
                    string text2 = TextResolver.GetText("Special Technology") + ": ";
                    if (componentList.Count > 0)
                    {
                        for (int n = 0; n < componentList.Count; n++)
                        {
                            string text3 = text2;
                            text2 = text3 + componentList[n].Name + " (" + ResolveDescription(componentList[n].Type) + "), ";
                        }
                        text2 = text2.Substring(0, text2.Length - 2);
                    }
                    else
                    {
                        text2 = text2 + "(" + TextResolver.GetText("None") + ")";
                    }
                    raceSummarySection.Items.Add(text2);
                }
                if (race.DisallowedResearchAreas != null && race.DisallowedResearchAreas.Count > 0)
                {
                    string text4 = string.Empty;
                    bool flag = false;
                    for (int num = 0; num < race.DisallowedResearchAreas.Count; num++)
                    {
                        if (race.DisallowedResearchAreas[num] != 0)
                        {
                            flag = true;
                        }
                    }
                    if (race.DisallowedComponents != null && race.DisallowedComponents.Count > 0)
                    {
                        flag = true;
                    }
                    if (!flag)
                    {
                        text4 = "(" + TextResolver.GetText("None") + ")";
                    }
                    else if (race.DisallowedResearchAreas.Count == 1 && race.DisallowedResearchAreas[0] == ComponentCategoryType.Undefined && (race.DisallowedComponents == null || race.DisallowedComponents.Count <= 0))
                    {
                        text4 = "(" + TextResolver.GetText("None") + ")";
                    }
                    else
                    {
                        for (int num2 = 0; num2 < race.DisallowedResearchAreas.Count; num2++)
                        {
                            ComponentCategoryType componentCategoryType = race.DisallowedResearchAreas[num2];
                            switch (componentCategoryType)
                            {
                                case ComponentCategoryType.WeaponPointDefense:
                                    text4 = text4 + ResolveDescription(ComponentType.WeaponMissile) + ", ";
                                    break;
                                default:
                                    text4 = text4 + ResolveDescription(componentCategoryType) + ", ";
                                    break;
                                case ComponentCategoryType.Undefined:
                                    break;
                            }
                        }
                        for (int num3 = 0; num3 < race.DisallowedComponents.Count; num3++)
                        {
                            Component component = race.DisallowedComponents[num3];
                            if (component != null)
                            {
                                text4 = text4 + component.Name + ", ";
                            }
                        }
                        if (text4.Length > 2)
                        {
                            text4 = text4.Substring(0, text4.Length - 2);
                        }
                    }
                    raceSummarySection.Items.Add(TextResolver.GetText("Disallowed Technology") + ": " + text4);
                }
                if (race.ChangePeriodYearsInterval > 0 && race.ChangePeriodYearsLength > 0)
                {
                    string arg = ResolveRaceChangeQualitiesDescription(race);
                    string item = string.Format(TextResolver.GetText("Regular X-year change cycle: For Y years have CHANGES"), race.ChangePeriodYearsInterval.ToString(), race.ChangePeriodYearsLength.ToString(), arg);
                    raceSummarySection.Items.Add(item);
                }
                if (race.MilitaryShipSizeFactor != 1.0)
                {
                    string empty = string.Empty;
                    double num4 = race.MilitaryShipSizeFactor - 1.0;
                    empty = ((!(race.MilitaryShipSizeFactor > 1.0)) ? (TextResolver.GetText("Smaller military ship sizes") + ": " + num4.ToString("0%")) : (TextResolver.GetText("Larger military ship sizes") + ": +" + num4.ToString("0%")));
                    raceSummarySection.Items.Add(empty);
                }
                if (race.CivilianShipSizeFactor != 1.0)
                {
                    string empty2 = string.Empty;
                    double num5 = race.CivilianShipSizeFactor - 1.0;
                    empty2 = ((!(race.CivilianShipSizeFactor > 1.0)) ? (TextResolver.GetText("Smaller civilian ship sizes") + ": " + num5.ToString("0%")) : (TextResolver.GetText("Larger civilian ship sizes") + ": +" + num5.ToString("0%")));
                    raceSummarySection.Items.Add(empty2);
                }
                if (race.ConstructionSpeedModifier != 1.0)
                {
                    double num6 = race.ConstructionSpeedModifier - 1.0;
                    string item2 = string.Empty;
                    if (num6 > 0.0)
                    {
                        item2 = TextResolver.GetText("Faster Construction Speed") + ": +" + num6.ToString("0%");
                    }
                    else if (num6 < 0.0)
                    {
                        item2 = TextResolver.GetText("Slower Construction Speed") + ": " + num6.ToString("0%");
                    }
                    raceSummarySection.Items.Add(item2);
                }
                if (race.SpaceportArmorStrengthFactor > 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Stronger Spaceport Armor") + ": " + (race.SpaceportArmorStrengthFactor - 1.0).ToString("+0%;-0%"));
                }
                else if (race.SpaceportArmorStrengthFactor < 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Weaker Spaceport Armor") + ": " + (race.SpaceportArmorStrengthFactor - 1.0).ToString("+0%;-0%"));
                }
                if (race.TourismIncomeFactor > 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Higher Tourism Income") + ": " + (race.TourismIncomeFactor - 1.0).ToString("+0%;-0%"));
                }
                else if (race.TourismIncomeFactor < 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Lower Tourism Income") + ": " + (race.TourismIncomeFactor - 1.0).ToString("+0%;-0%"));
                }
                if (race.FreeTradeIncomeFactor > 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Higher Trade Income") + ": " + (race.FreeTradeIncomeFactor - 1.0).ToString("+0%;-0%"));
                }
                else if (race.FreeTradeIncomeFactor < 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Lower Trade Income") + ": " + (race.FreeTradeIncomeFactor - 1.0).ToString("+0%;-0%"));
                }
                if (race.MigrationFactor > 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Higher Migration Rate") + ": " + (race.MigrationFactor - 1.0).ToString("+0%;-0%"));
                }
                else if (race.MigrationFactor < 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Lower Migration Rate") + ": " + (race.MigrationFactor - 1.0).ToString("+0%;-0%"));
                }
                if (race.TroopRegenerationFactor > 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Faster Troop Regeneration") + ": " + (race.TroopRegenerationFactor - 1.0).ToString("+0%;-0%"));
                }
                else if (race.TroopRegenerationFactor < 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Slower Troop Regeneration") + ": " + (race.TroopRegenerationFactor - 1.0).ToString("+0%;-0%"));
                }
                if ((double)race.KnownStartingGalacticHistoryLocations > 1.0)
                {
                    raceSummarySection.Items.Add(TextResolver.GetText("Historical Locations Known at Game Start") + ": " + race.KnownStartingGalacticHistoryLocations.ToString("0"));
                }
                if (raceSummarySection.Items.Count > 0)
                {
                    raceSummary.Sections.Add(raceSummarySection);
                }
                return raceSummary;
            }
            return null;
        }

        public static string ResolveDescription(AdvisorMessageType advisorMessageType, EmpireMessage message)
        {
            string result = string.Empty;
            switch (advisorMessageType)
            {
                case AdvisorMessageType.AllowTradeRestrictedResources:
                    result = TextResolver.GetText("Advisor Message AllowTradeRestrictedResources");
                    break;
                case AdvisorMessageType.BuildOneOff:
                    result = TextResolver.GetText("Advisor Message BuildOneOff");
                    break;
                case AdvisorMessageType.BuildOrder:
                    result = TextResolver.GetText("Advisor Message BuildOrder");
                    break;
                case AdvisorMessageType.CancelMilitaryRefueling:
                    result = TextResolver.GetText("Advisor Message CancelMilitaryRefueling");
                    break;
                case AdvisorMessageType.CancelMiningRights:
                    result = TextResolver.GetText("Advisor Message CancelMiningRights");
                    break;
                case AdvisorMessageType.Colonization:
                    result = TextResolver.GetText("Advisor Message Colonization");
                    break;
                case AdvisorMessageType.ColonyFacility:
                    result = TextResolver.GetText("Advisor Message ColonyFacility");
                    break;
                case AdvisorMessageType.ComplyTradeSanctionsOther:
                    result = TextResolver.GetText("Advisor Message ComplyTradeSanctionsOther");
                    break;
                case AdvisorMessageType.ComplyWarOther:
                    result = TextResolver.GetText("Advisor Message ComplyWarOther");
                    break;
                case AdvisorMessageType.DefendTerritory:
                    result = TextResolver.GetText("Advisor Message DefendTerritory");
                    break;
                case AdvisorMessageType.DiplomaticGift:
                    result = TextResolver.GetText("Advisor Message DiplomaticGift");
                    break;
                case AdvisorMessageType.DisallowTradeRestrictedResources:
                    result = TextResolver.GetText("Advisor Message DisallowTradeRestrictedResources");
                    break;
                case AdvisorMessageType.EnemyAttack:
                    result = TextResolver.GetText("Advisor Message EnemyAttack");
                    break;
                case AdvisorMessageType.EnemyAttackPlanetDestroyer:
                    result = TextResolver.GetText("Advisor Message EnemyAttackPlanetDestroyer");
                    break;
                case AdvisorMessageType.EnemyBlockade:
                    result = TextResolver.GetText("Advisor Message EnemyBlockade");
                    break;
                case AdvisorMessageType.EnemyBombard:
                    result = TextResolver.GetText("Advisor Message EnemyBombard");
                    break;
                case AdvisorMessageType.IntelligenceMission:
                    result = TextResolver.GetText("Advisor Message IntelligenceMission");
                    break;
                case AdvisorMessageType.InvadeIndependent:
                    result = TextResolver.GetText("Advisor Message InvadeIndependent");
                    break;
                case AdvisorMessageType.OfferMilitaryRefueling:
                    result = TextResolver.GetText("Advisor Message OfferMilitaryRefueling");
                    break;
                case AdvisorMessageType.OfferMiningRights:
                    result = TextResolver.GetText("Advisor Message OfferMiningRights");
                    break;
                case AdvisorMessageType.OfferPirateAttackMission:
                    result = TextResolver.GetText("Advisor Message OfferPirateAttackMission");
                    break;
                case AdvisorMessageType.OfferPirateDefendMission:
                    result = TextResolver.GetText("Advisor Message OfferPirateDefendMission");
                    break;
                case AdvisorMessageType.DefendTarget:
                    result = TextResolver.GetText("Advisor Message EnemyAttack");
                    break;
                case AdvisorMessageType.OfferPirateSmuggleMission:
                    result = TextResolver.GetText("Advisor Message OfferPirateSmuggleMission");
                    break;
                case AdvisorMessageType.AcceptPirateSmugglingMission:
                    result = TextResolver.GetText("Advisor Message AcceptPirateSmugglingMission");
                    break;
                case AdvisorMessageType.PirateRaid:
                    result = TextResolver.GetText("Advisor Message PirateRaid");
                    break;
                case AdvisorMessageType.PirateFacilityEradicate:
                    result = TextResolver.GetText("Advisor Message PirateFacilityEradicate");
                    break;
                case AdvisorMessageType.PrepareRaid:
                    result = TextResolver.GetText("Advisor Message PrepareRaid");
                    break;
                case AdvisorMessageType.RequestEndWarOther:
                    result = TextResolver.GetText("Advisor Message RequestEndWarOther");
                    break;
                case AdvisorMessageType.RequestLiftTradeSanctionsOther:
                    result = TextResolver.GetText("Advisor Message RequestLiftTradeSanctionsOther");
                    break;
                case AdvisorMessageType.Retrofit:
                    result = TextResolver.GetText("Advisor Message Retrofit");
                    break;
                case AdvisorMessageType.TreatyOffer:
                    result = TextResolver.GetText("Advisor Message TreatyOffer");
                    break;
                case AdvisorMessageType.WarTradeSanctions:
                    result = TextResolver.GetText("Advisor Message WarTradeSanctions");
                    if (message != null && message.Subject is Empire)
                    {
                        Empire empire = (Empire)message.Subject;
                        if (empire != null && message.AdvisorMessageData != null && message.AdvisorMessageData is DiplomaticRelationType)
                        {
                            result = (DiplomaticRelationType)message.AdvisorMessageData switch
                            {
                                DiplomaticRelationType.War => TextResolver.GetText("Advisor Message DeclareWar"),
                                DiplomaticRelationType.TradeSanctions => TextResolver.GetText("Advisor Message InitiateTradeSanctions"),
                                _ => TextResolver.GetText("Advisor Message WarTradeSanctions"),
                            };
                        }
                    }
                    break;
            }
            return result;
        }

        public static string ResolveCharacterSummary(Empire empire)
        {
            string text = string.Empty;
            if (empire != null && empire.Characters != null)
            {
                if (empire.PirateEmpireBaseHabitat == null)
                {
                    string text2 = text;
                    text = text2 + empire.Characters.CountCharactersByRole(CharacterRole.Leader) + " " + TextResolver.GetText("Leader") + ", ";
                    string text3 = text;
                    text = text3 + empire.Characters.CountCharactersByRole(CharacterRole.Ambassador) + " " + TextResolver.GetText("Ambassador") + ", ";
                    string text4 = text;
                    text = text4 + empire.Characters.CountCharactersByRole(CharacterRole.ColonyGovernor) + " " + TextResolver.GetText("Colony Governor") + ", ";
                    string text5 = text;
                    text = text5 + empire.Characters.CountCharactersByRole(CharacterRole.FleetAdmiral) + " " + TextResolver.GetText("Fleet Admiral") + ", ";
                    string text6 = text;
                    text = text6 + empire.Characters.CountCharactersByRole(CharacterRole.ShipCaptain) + " " + TextResolver.GetText("Ship Captain") + ", ";
                    string text7 = text;
                    text = text7 + empire.Characters.CountCharactersByRole(CharacterRole.TroopGeneral) + " " + TextResolver.GetText("Troop General") + ", ";
                    string text8 = text;
                    text = text8 + empire.Characters.CountCharactersByRole(CharacterRole.Scientist) + " " + TextResolver.GetText("Scientist") + ", ";
                    text = text + empire.Characters.CountCharactersByRole(CharacterRole.IntelligenceAgent) + " " + TextResolver.GetText("Intelligence Agent");
                }
                else
                {
                    string text9 = text;
                    text = text9 + empire.Characters.CountCharactersByRole(CharacterRole.PirateLeader) + " " + TextResolver.GetText("Pirate Leader") + ", ";
                    string text10 = text;
                    text = text10 + empire.Characters.CountCharactersByRole(CharacterRole.FleetAdmiral) + " " + TextResolver.GetText("Fleet Admiral") + ", ";
                    string text11 = text;
                    text = text11 + empire.Characters.CountCharactersByRole(CharacterRole.ShipCaptain) + " " + TextResolver.GetText("Ship Captain") + ", ";
                    string text12 = text;
                    text = text12 + empire.Characters.CountCharactersByRole(CharacterRole.Scientist) + " " + TextResolver.GetText("Scientist") + ", ";
                    text = text + empire.Characters.CountCharactersByRole(CharacterRole.IntelligenceAgent) + " " + TextResolver.GetText("Intelligence Agent");
                }
            }
            return text;
        }

        public static string ResolveCharacterLocationDescription(Character character)
        {
            string text = "(" + TextResolver.GetText("Unknown") + ")";
            if (character != null)
            {
                if (character.Location == null)
                {
                    text = "(" + TextResolver.GetText("None") + ")";
                }
                else
                {
                    switch (character.Role)
                    {
                        case CharacterRole.FleetAdmiral:
                        case CharacterRole.TroopGeneral:
                        case CharacterRole.ShipCaptain:
                            text = character.Location.Name;
                            if (character.Location is BuiltObject)
                            {
                                BuiltObject builtObject = (BuiltObject)character.Location;
                                if (builtObject.ShipGroup != null)
                                {
                                    text = text + "  (" + builtObject.ShipGroup.Name + ")";
                                }
                            }
                            break;
                        case CharacterRole.IntelligenceAgent:
                            if (character.Mission != null && character.Mission.Type != 0)
                            {
                                IntelligenceMissionType type = character.Mission.Type;
                                text = ((type != IntelligenceMissionType.CounterIntelligence) ? ("(" + TextResolver.GetText("Unknown") + ")") : character.Location.Name);
                            }
                            else
                            {
                                text = character.Location.Name;
                            }
                            break;
                        default:
                            text = character.Location.Name;
                            break;
                    }
                }
            }
            return text;
        }

        public static string GenerateLeaderBonusDescription(Character leader)
        {
            string text = string.Empty;
            if (leader != null)
            {
                if (leader.BonusesKnown)
                {
                    if (leader.Diplomacy != 0)
                    {
                        string text2 = text;
                        text = text2 + ResolveDescription(CharacterSkillType.Diplomacy) + " " + ((double)leader.Diplomacy / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.ColonyIncome != 0)
                    {
                        string text3 = text;
                        text = text3 + ResolveDescription(CharacterSkillType.ColonyIncome) + " " + ((double)leader.ColonyIncome / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.ColonyHappiness != 0)
                    {
                        string text4 = text;
                        text = text4 + ResolveDescription(CharacterSkillType.ColonyHappiness) + " " + ((double)leader.ColonyHappiness / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.PopulationGrowth != 0)
                    {
                        string text5 = text;
                        text = text5 + ResolveDescription(CharacterSkillType.PopulationGrowth) + " " + ((double)leader.PopulationGrowth / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.TradeIncome != 0)
                    {
                        string text6 = text;
                        text = text6 + ResolveDescription(CharacterSkillType.TradeIncome) + " " + ((double)leader.TradeIncome / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.TourismIncome != 0)
                    {
                        string text7 = text;
                        text = text7 + ResolveDescription(CharacterSkillType.TourismIncome) + " " + ((double)leader.TourismIncome / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.ColonyCorruption != 0)
                    {
                        string text8 = text;
                        text = text8 + ResolveDescription(CharacterSkillType.ColonyCorruption) + " " + ((double)leader.ColonyCorruption / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.MiningRate != 0)
                    {
                        string text9 = text;
                        text = text9 + ResolveDescription(CharacterSkillType.MiningRate) + " " + ((double)leader.MiningRate / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.TroopRecruitmentRate != 0)
                    {
                        string text10 = text;
                        text = text10 + ResolveDescription(CharacterSkillType.TroopRecruitment) + " " + ((double)leader.TroopRecruitmentRate / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.MilitaryShipConstructionSpeed != 0)
                    {
                        string text11 = text;
                        text = text11 + ResolveDescription(CharacterSkillType.MilitaryShipConstructionSpeed) + " " + ((double)leader.MilitaryShipConstructionSpeed / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.CivilianShipConstructionSpeed != 0)
                    {
                        string text12 = text;
                        text = text12 + ResolveDescription(CharacterSkillType.CivilianShipConstructionSpeed) + " " + ((double)leader.CivilianShipConstructionSpeed / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.ColonyShipConstructionSpeed != 0)
                    {
                        string text13 = text;
                        text = text13 + ResolveDescription(CharacterSkillType.ColonyShipConstructionSpeed) + " " + ((double)leader.ColonyShipConstructionSpeed / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.FacilityConstructionSpeed != 0)
                    {
                        string text14 = text;
                        text = text14 + ResolveDescription(CharacterSkillType.FacilityConstructionSpeed) + " " + ((double)leader.FacilityConstructionSpeed / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.ResearchEnergy != 0)
                    {
                        string text15 = text;
                        text = text15 + ResolveDescription(CharacterSkillType.ResearchEnergy) + " " + ((double)leader.ResearchEnergy / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.ResearchHighTech != 0)
                    {
                        string text16 = text;
                        text = text16 + ResolveDescription(CharacterSkillType.ResearchHighTech) + " " + ((double)leader.ResearchHighTech / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.ResearchWeapons != 0)
                    {
                        string text17 = text;
                        text = text17 + ResolveDescription(CharacterSkillType.ResearchWeapons) + " " + ((double)leader.ResearchWeapons / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.Espionage != 0)
                    {
                        string text18 = text;
                        text = text18 + ResolveDescription(CharacterSkillType.Espionage) + " " + ((double)leader.Espionage / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.CounterEspionage != 0)
                    {
                        string text19 = text;
                        text = text19 + ResolveDescription(CharacterSkillType.CounterEspionage) + " " + ((double)leader.CounterEspionage / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.MilitaryShipMaintenance != 0)
                    {
                        string text20 = text;
                        text = text20 + ResolveDescription(CharacterSkillType.MilitaryShipMaintenance) + " " + ((double)leader.MilitaryShipMaintenance / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.MilitaryBaseMaintenance != 0)
                    {
                        string text21 = text;
                        text = text21 + ResolveDescription(CharacterSkillType.MilitaryBaseMaintenance) + " " + ((double)leader.MilitaryBaseMaintenance / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.CivilianShipMaintenance != 0)
                    {
                        string text2 = text;
                        text = text2 + ResolveDescription(CharacterSkillType.CivilianShipMaintenance) + " " + ((double)leader.CivilianShipMaintenance / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.CivilianBaseMaintenance != 0)
                    {
                        string text2 = text;
                        text = text2 + ResolveDescription(CharacterSkillType.CivilianBaseMaintenance) + " " + ((double)leader.CivilianBaseMaintenance / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.TroopMaintenance != 0)
                    {
                        string text2 = text;
                        text = text2 + ResolveDescription(CharacterSkillType.TroopMaintenance) + " " + ((double)leader.TroopMaintenance / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (leader.WarWeariness != 0)
                    {
                        string text2 = text;
                        text = text2 + ResolveDescription(CharacterSkillType.WarWeariness) + " " + ((double)leader.WarWeariness / 100.0).ToString("+0%;-0%") + ", ";
                    }
                    if (!string.IsNullOrEmpty(text) && text.Length >= 2)
                    {
                        text = text.Substring(0, text.Length - 2);
                    }
                }
                else
                {
                    text = "?";
                }
                if (!string.IsNullOrEmpty(text))
                {
                    text = ResolveDescription(CharacterRole.Leader) + " " + leader.Name + ": " + text;
                }
            }
            return text;
        }

        public static string GenerateCharacterBonusDescription(Habitat habitat)
        {
            string text = string.Empty;
            if (habitat.Empire != null && habitat.Characters != null)
            {
                List<CharacterRole> list = new List<CharacterRole>();
                list.Add(CharacterRole.Leader);
                list.Add(CharacterRole.PirateLeader);
                list.Add(CharacterRole.Ambassador);
                List<CharacterRole> rolesToExclude = list;
                bool flag = false;
                bool flag2 = false;
                bool flag3 = false;
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                int num4 = 0;
                int num5 = 0;
                int num6 = 0;
                int num7 = 0;
                int num8 = 0;
                int num9 = 0;
                int num10 = 0;
                int num11 = 0;
                int num12 = 0;
                int num13 = 0;
                int num14 = 0;
                int num15 = 0;
                int num16 = 0;
                int num17 = 0;
                int num18 = 0;
                if (habitat.Characters != null && habitat.Characters.Count > 0)
                {
                    num = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ColonyIncome);
                    num2 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ColonyHappiness);
                    num3 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.PopulationGrowth);
                    num4 = habitat.Characters.GetHighestSkillLevelExcludeRoles(CharacterSkillType.TradeIncome, rolesToExclude);
                    num5 = habitat.Characters.GetHighestSkillLevelExcludeRoles(CharacterSkillType.TourismIncome, rolesToExclude);
                    num6 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ColonyCorruption);
                    num7 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.MiningRate);
                    num8 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.MilitaryShipConstructionSpeed);
                    num9 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.CivilianShipConstructionSpeed);
                    num10 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ColonyShipConstructionSpeed);
                    num11 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.FacilityConstructionSpeed);
                    num12 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.MilitaryBaseMaintenance);
                    num13 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.CivilianBaseMaintenance);
                    num14 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.WarWeariness);
                    if (num != 0 || num2 != 0 || num3 != 0 || num4 != 0 || num5 != 0 || num6 != 0 || num7 != 0 || num8 != 0 || num9 != 0 || num10 != 0 || num11 != 0 || num12 != 0 || num13 != 0 || num14 != 0)
                    {
                        flag2 = true;
                    }
                    num15 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopMaintenance);
                    if (num15 != 0)
                    {
                        Character characterWithHighestSkillLevelExcludeRole = habitat.Characters.GetCharacterWithHighestSkillLevelExcludeRole(CharacterSkillType.TroopMaintenance, CharacterRole.Leader);
                        if (characterWithHighestSkillLevelExcludeRole != null)
                        {
                            if (characterWithHighestSkillLevelExcludeRole.Role == CharacterRole.ColonyGovernor)
                            {
                                flag2 = true;
                            }
                            else if (characterWithHighestSkillLevelExcludeRole.Role == CharacterRole.TroopGeneral)
                            {
                                flag3 = true;
                            }
                        }
                    }
                    num16 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopRecruitment);
                    if (num16 != 0)
                    {
                        Character characterWithHighestSkillLevelExcludeRole2 = habitat.Characters.GetCharacterWithHighestSkillLevelExcludeRole(CharacterSkillType.TroopRecruitment, CharacterRole.Leader);
                        if (characterWithHighestSkillLevelExcludeRole2 != null)
                        {
                            if (characterWithHighestSkillLevelExcludeRole2.Role == CharacterRole.ColonyGovernor)
                            {
                                flag2 = true;
                            }
                            else if (characterWithHighestSkillLevelExcludeRole2.Role == CharacterRole.TroopGeneral)
                            {
                                flag3 = true;
                            }
                        }
                    }
                    num17 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopGroundDefense);
                    num18 = habitat.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.TroopRecoveryRate);
                    if (num17 != 0 || num18 != 0)
                    {
                        flag3 = true;
                    }
                }
                if (habitat.Empire != null && habitat.Empire.Leader != null)
                {
                    if (habitat.Empire.Leader.ColonyIncome != 0)
                    {
                        num += habitat.Empire.Leader.ColonyIncome;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.ColonyHappiness != 0)
                    {
                        num2 += habitat.Empire.Leader.ColonyHappiness;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.PopulationGrowth != 0)
                    {
                        num3 += habitat.Empire.Leader.PopulationGrowth;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.TradeIncome != 0)
                    {
                        num4 += habitat.Empire.Leader.TradeIncome;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.TourismIncome != 0)
                    {
                        num5 += habitat.Empire.Leader.TourismIncome;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.ColonyCorruption != 0)
                    {
                        num6 += habitat.Empire.Leader.ColonyCorruption;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.MiningRate != 0)
                    {
                        num7 += habitat.Empire.Leader.MiningRate;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.MilitaryShipConstructionSpeed != 0)
                    {
                        num8 += habitat.Empire.Leader.MilitaryShipConstructionSpeed;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.CivilianShipConstructionSpeed != 0)
                    {
                        num9 += habitat.Empire.Leader.CivilianShipConstructionSpeed;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.ColonyShipConstructionSpeed != 0)
                    {
                        num10 += habitat.Empire.Leader.ColonyShipConstructionSpeed;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.FacilityConstructionSpeed != 0)
                    {
                        num11 += habitat.Empire.Leader.FacilityConstructionSpeed;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.MilitaryBaseMaintenance != 0)
                    {
                        num12 += habitat.Empire.Leader.MilitaryBaseMaintenance;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.CivilianBaseMaintenance != 0)
                    {
                        num13 += habitat.Empire.Leader.CivilianBaseMaintenance;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.WarWeariness != 0)
                    {
                        num14 += habitat.Empire.Leader.WarWeariness;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.TroopMaintenance != 0)
                    {
                        num15 += habitat.Empire.Leader.TroopMaintenance;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.TroopRecruitmentRate != 0)
                    {
                        num16 += habitat.Empire.Leader.TroopRecruitmentRate;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.TroopGroundDefense != 0)
                    {
                        num17 += habitat.Empire.Leader.TroopGroundDefense;
                        flag = true;
                    }
                    if (habitat.Empire.Leader.TroopRecoveryRate != 0)
                    {
                        num18 += habitat.Empire.Leader.TroopRecoveryRate;
                        flag = true;
                    }
                }
                if (num != 0)
                {
                    string text2 = text;
                    text = text2 + ((double)num / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ColonyIncome) + ", ";
                }
                if (num2 != 0)
                {
                    string text3 = text;
                    text = text3 + ((double)num2 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ColonyHappiness) + ", ";
                }
                if (num3 != 0)
                {
                    string text4 = text;
                    text = text4 + ((double)num3 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.PopulationGrowth) + ", ";
                }
                if (num4 != 0)
                {
                    string text5 = text;
                    text = text5 + ((double)num4 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TradeIncome) + ", ";
                }
                if (num5 != 0)
                {
                    string text6 = text;
                    text = text6 + ((double)num5 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TourismIncome) + ", ";
                }
                if (num6 != 0)
                {
                    string text7 = text;
                    text = text7 + ((double)num6 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ColonyCorruption) + ", ";
                }
                if (num7 != 0)
                {
                    string text8 = text;
                    text = text8 + ((double)num7 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.MiningRate) + ", ";
                }
                if (num8 != 0)
                {
                    string text9 = text;
                    text = text9 + ((double)num8 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.MilitaryShipConstructionSpeed) + ", ";
                }
                if (num9 != 0)
                {
                    string text10 = text;
                    text = text10 + ((double)num9 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.CivilianShipConstructionSpeed) + ", ";
                }
                if (num10 != 0)
                {
                    string text11 = text;
                    text = text11 + ((double)num10 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ColonyShipConstructionSpeed) + ", ";
                }
                if (num11 != 0)
                {
                    string text12 = text;
                    text = text12 + ((double)num11 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.FacilityConstructionSpeed) + ", ";
                }
                if (num12 != 0)
                {
                    string text13 = text;
                    text = text13 + ((double)num12 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.MilitaryBaseMaintenance) + ", ";
                }
                if (num13 != 0)
                {
                    string text2 = text;
                    text = text2 + ((double)num13 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.CivilianBaseMaintenance) + ", ";
                }
                if (num14 != 0)
                {
                    string text2 = text;
                    text = text2 + ((double)num14 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.WarWeariness) + ", ";
                }
                if (num15 != 0)
                {
                    string text2 = text;
                    text = text2 + ((double)num15 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TroopMaintenance) + ", ";
                }
                if (num16 != 0)
                {
                    string text2 = text;
                    text = text2 + ((double)num16 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TroopRecruitment) + ", ";
                }
                if (num17 != 0)
                {
                    string text2 = text;
                    text = text2 + ((double)num17 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TroopGroundDefense) + ", ";
                }
                if (num18 != 0)
                {
                    string text2 = text;
                    text = text2 + ((double)num18 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TroopRecoveryRate) + ", ";
                }
                if (!string.IsNullOrEmpty(text) && text.Length >= 2)
                {
                    text = text.Substring(0, text.Length - 2);
                }
                if (flag || flag2 || flag3)
                {
                    string text14 = string.Empty;
                    if (flag)
                    {
                        text14 = text14 + ResolveDescription(CharacterRole.Leader) + " & ";
                    }
                    if (flag2)
                    {
                        text14 = text14 + ResolveDescription(CharacterRole.ColonyGovernor) + " & ";
                    }
                    if (flag3)
                    {
                        text14 = text14 + ResolveDescription(CharacterRole.TroopGeneral) + " & ";
                    }
                    if (!string.IsNullOrEmpty(text14) && text14.Length >= 3)
                    {
                        text14 = text14.Substring(0, text14.Length - 3);
                    }
                    text = text14 + ": " + text;
                }
            }
            return text;
        }

        public static string GenerateCharacterBonusDescription(Fighter fighter)
        {
            string text = string.Empty;
            if (fighter != null && fighter.ParentBuiltObject != null)
            {
                bool flag = false;
                bool flag2 = false;
                double num = fighter.ParentBuiltObject.CaptainFightersBonus;
                if (num != 1.0)
                {
                    flag = true;
                }
                if (fighter.ParentBuiltObject.ShipGroup != null)
                {
                    num += fighter.ParentBuiltObject.ShipGroup.FightersBonus;
                    if (fighter.ParentBuiltObject.ShipGroup.FightersBonus != 1.0)
                    {
                        flag2 = true;
                    }
                }
                if (num != 1.0)
                {
                    if (flag)
                    {
                        text = text + ResolveDescription(CharacterRole.ShipCaptain) + ", ";
                    }
                    if (flag2)
                    {
                        text = text + ResolveDescription(CharacterRole.FleetAdmiral) + ", ";
                    }
                    if (!string.IsNullOrEmpty(text) && text.Length > 2)
                    {
                        text = text.Substring(0, text.Length - 2);
                    }
                    string text2 = text;
                    text = text2 + ": " + (num - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.Fighters);
                }
            }
            return text;
        }

        public static string GenerateCharacterBonusDescription(ShipGroup fleet)
        {
            string text = string.Empty;
            if (fleet != null)
            {
                if (fleet.TargetingBonus != 1.0)
                {
                    string text2 = text;
                    text = text2 + (fleet.TargetingBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.Targeting) + ", ";
                }
                if (fleet.CountermeasuresBonus != 1.0)
                {
                    string text3 = text;
                    text = text3 + (fleet.CountermeasuresBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.Countermeasures) + ", ";
                }
                if (fleet.ShipManeuveringBonus != 1.0)
                {
                    string text4 = text;
                    text = text4 + (fleet.ShipManeuveringBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ShipManeuvering) + ", ";
                }
                if (fleet.FightersBonus != 1.0)
                {
                    string text5 = text;
                    text = text5 + (fleet.FightersBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.Fighters) + ", ";
                }
                if (fleet.ShipEnergyUsageBonus != 1.0)
                {
                    string text6 = text;
                    text = text6 + (fleet.ShipEnergyUsageBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ShipEnergyUsage) + ", ";
                }
                if (fleet.WeaponsDamageBonus != 1.0)
                {
                    string text7 = text;
                    text = text7 + (fleet.WeaponsDamageBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.WeaponsDamage) + ", ";
                }
                if (fleet.WeaponsRangeBonus != 1.0)
                {
                    string text8 = text;
                    text = text8 + (fleet.WeaponsRangeBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.WeaponsRange) + ", ";
                }
                if (fleet.ShieldRechargeRateBonus != 1.0)
                {
                    string text9 = text;
                    text = text9 + (fleet.ShieldRechargeRateBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ShieldRechargeRate) + ", ";
                }
                if (fleet.DamageControlBonus != 1.0)
                {
                    string text10 = text;
                    text = text10 + (fleet.DamageControlBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.DamageControl) + ", ";
                }
                if (fleet.RepairBonus != 1.0)
                {
                    string text11 = text;
                    text = text11 + (fleet.RepairBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.RepairBonus) + ", ";
                }
                if (fleet.HyperjumpSpeedBonus != 1.0)
                {
                    string text12 = text;
                    text = text12 + (fleet.HyperjumpSpeedBonus - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.HyperjumpSpeed) + ", ";
                }
                if (!string.IsNullOrEmpty(text) && text.Length >= 2)
                {
                    text = text.Substring(0, text.Length - 2);
                }
            }
            return text;
        }

        public static string GenerateCharacterBonusDescription(BuiltObject builtObject)
        {
            string text = string.Empty;
            if (builtObject != null)
            {
                List<CharacterRole> list = new List<CharacterRole>();
                list.Add(CharacterRole.Leader);
                list.Add(CharacterRole.Ambassador);
                List<CharacterRole> rolesToExclude = list;
                bool flag = false;
                bool flag2 = false;
                bool flag3 = false;
                bool flag4 = false;
                bool flag5 = false;
                if (builtObject.IsResourceExtractor)
                {
                    int num = 0;
                    CharacterList characterList = new CharacterList();
                    if (builtObject.Characters != null && builtObject.Characters.Count > 0)
                    {
                        characterList.AddRange(builtObject.Characters);
                    }
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == builtObject.Empire && builtObject.ParentHabitat.Characters != null && builtObject.ParentHabitat.Characters.Count > 0)
                    {
                        characterList.AddRange(builtObject.ParentHabitat.Characters);
                    }
                    if (characterList.Count > 0)
                    {
                        num = characterList.GetHighestSkillLevelExcludeRoles(CharacterSkillType.MiningRate, rolesToExclude);
                        if (num != 0)
                        {
                            flag2 = true;
                        }
                    }
                    if (builtObject.Empire != null && builtObject.Empire.Leader != null && builtObject.Empire.Leader.MiningRate != 0)
                    {
                        num += builtObject.Empire.Leader.MiningRate;
                        flag = true;
                    }
                    if (num != 0)
                    {
                        string text2 = text;
                        text = text2 + ((double)num / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.MiningRate) + ", ";
                    }
                }
                if (builtObject.IsSpacePort)
                {
                    int num2 = 0;
                    CharacterList characterList2 = new CharacterList();
                    if (builtObject.Characters != null && builtObject.Characters.Count > 0)
                    {
                        characterList2.AddRange(builtObject.Characters);
                    }
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == builtObject.Empire && builtObject.ParentHabitat.Characters != null && builtObject.ParentHabitat.Characters.Count > 0)
                    {
                        characterList2.AddRange(builtObject.ParentHabitat.Characters);
                    }
                    if (characterList2.Count > 0)
                    {
                        num2 = characterList2.GetHighestSkillLevelExcludeRoles(CharacterSkillType.TradeIncome, rolesToExclude);
                        if (num2 != 0)
                        {
                            flag2 = true;
                        }
                    }
                    if (builtObject.Empire != null && builtObject.Empire.Leader != null && builtObject.Empire.Leader.TradeIncome != 0)
                    {
                        num2 += builtObject.Empire.Leader.TradeIncome;
                        flag = true;
                    }
                    if (num2 != 0)
                    {
                        string text3 = text;
                        text = text3 + ((double)num2 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TradeIncome) + ", ";
                    }
                }
                if (builtObject.SubRole == BuiltObjectSubRole.ResortBase)
                {
                    int num3 = 0;
                    CharacterList characterList3 = new CharacterList();
                    if (builtObject.Characters != null && builtObject.Characters.Count > 0)
                    {
                        characterList3.AddRange(builtObject.Characters);
                    }
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == builtObject.Empire && builtObject.ParentHabitat.Characters != null && builtObject.ParentHabitat.Characters.Count > 0)
                    {
                        characterList3.AddRange(builtObject.ParentHabitat.Characters);
                    }
                    if (characterList3.Count > 0)
                    {
                        num3 = characterList3.GetHighestSkillLevelExcludeRoles(CharacterSkillType.TourismIncome, rolesToExclude);
                        if (num3 != 0)
                        {
                            flag2 = true;
                        }
                    }
                    if (builtObject.Empire != null && builtObject.Empire.Leader != null && builtObject.Empire.Leader.TourismIncome != 0)
                    {
                        num3 += builtObject.Empire.Leader.TourismIncome;
                        flag = true;
                    }
                    if (num3 != 0)
                    {
                        string text4 = text;
                        text = text4 + ((double)num3 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.TourismIncome) + ", ";
                    }
                }
                if (builtObject.ResearchEnergy > 0 || builtObject.ResearchHighTech > 0 || builtObject.ResearchWeapons > 0)
                {
                    int num4 = 0;
                    int num5 = 0;
                    int num6 = 0;
                    if (builtObject.Characters != null && builtObject.Characters.Count > 0)
                    {
                        num4 = builtObject.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ResearchEnergy);
                        num5 = builtObject.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ResearchHighTech);
                        num6 = builtObject.Characters.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.ResearchWeapons);
                        if (num4 != 0 || num5 != 0 || num6 != 0)
                        {
                            flag3 = true;
                        }
                    }
                    if (builtObject.Empire != null && builtObject.Empire.Leader != null)
                    {
                        if (builtObject.Empire.Leader.ResearchEnergy != 0)
                        {
                            num4 += builtObject.Empire.Leader.ResearchEnergy;
                            flag = true;
                        }
                        if (builtObject.Empire.Leader.ResearchHighTech != 0)
                        {
                            num5 += builtObject.Empire.Leader.ResearchHighTech;
                            flag = true;
                        }
                        if (builtObject.Empire.Leader.ResearchWeapons != 0)
                        {
                            num6 += builtObject.Empire.Leader.ResearchWeapons;
                            flag = true;
                        }
                    }
                    if (num4 != 0)
                    {
                        string text5 = text;
                        text = text5 + ((double)num4 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ResearchEnergy) + ", ";
                    }
                    if (num5 != 0)
                    {
                        string text6 = text;
                        text = text6 + ((double)num5 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ResearchHighTech) + ", ";
                    }
                    if (num6 != 0)
                    {
                        string text7 = text;
                        text = text7 + ((double)num6 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ResearchWeapons) + ", ";
                    }
                }
                if (builtObject.Role == BuiltObjectRole.Base)
                {
                    int num7 = 0;
                    int num8 = 0;
                    CharacterList characterList4 = new CharacterList();
                    if (builtObject.Characters != null && builtObject.Characters.Count > 0)
                    {
                        characterList4.AddRange(builtObject.Characters);
                    }
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == builtObject.Empire && builtObject.ParentHabitat.Characters != null && builtObject.ParentHabitat.Characters.Count > 0)
                    {
                        characterList4.AddRange(builtObject.ParentHabitat.Characters);
                    }
                    if (characterList4.Count > 0)
                    {
                        switch (builtObject.SubRole)
                        {
                            case BuiltObjectSubRole.SmallSpacePort:
                            case BuiltObjectSubRole.MediumSpacePort:
                            case BuiltObjectSubRole.LargeSpacePort:
                            case BuiltObjectSubRole.DefensiveBase:
                                num7 = characterList4.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.MilitaryBaseMaintenance);
                                break;
                            default:
                                num8 = characterList4.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.CivilianBaseMaintenance);
                                break;
                        }
                        if (num7 != 0 || num8 != 0)
                        {
                            flag2 = true;
                        }
                    }
                    if (builtObject.Empire != null && builtObject.Empire.Leader != null)
                    {
                        if (builtObject.Empire.Leader.MilitaryBaseMaintenance != 0)
                        {
                            num7 += builtObject.Empire.Leader.MilitaryBaseMaintenance;
                            flag = true;
                        }
                        if (builtObject.Empire.Leader.CivilianBaseMaintenance != 0)
                        {
                            num8 += builtObject.Empire.Leader.CivilianBaseMaintenance;
                            flag = true;
                        }
                    }
                    if (num7 != 0)
                    {
                        string text8 = text;
                        text = text8 + ((double)num7 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.MilitaryBaseMaintenance) + ", ";
                    }
                    if (num8 != 0)
                    {
                        string text2 = text;
                        text = text2 + ((double)num8 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.CivilianBaseMaintenance) + ", ";
                    }
                }
                else
                {
                    int num9 = 0;
                    int num10 = 0;
                    if (builtObject.Empire != null && builtObject.Empire.Leader != null)
                    {
                        if (builtObject.Role == BuiltObjectRole.Military && builtObject.Empire.Leader.MilitaryShipMaintenance != 0)
                        {
                            num9 += builtObject.Empire.Leader.MilitaryShipMaintenance;
                            flag = true;
                        }
                        if (builtObject.Role != BuiltObjectRole.Military && builtObject.Empire.Leader.CivilianShipMaintenance != 0)
                        {
                            num10 += builtObject.Empire.Leader.CivilianShipMaintenance;
                            flag = true;
                        }
                    }
                    if (builtObject.Role == BuiltObjectRole.Military && num9 != 0)
                    {
                        string text2 = text;
                        text = text2 + ((double)num9 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.MilitaryShipMaintenance) + ", ";
                    }
                    if (builtObject.Role != BuiltObjectRole.Military && num10 != 0)
                    {
                        string text2 = text;
                        text = text2 + ((double)num10 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.CivilianShipMaintenance) + ", ";
                    }
                }
                if (builtObject.IsShipYard && builtObject.ConstructionQueue != null)
                {
                    int num11 = 0;
                    int num12 = 0;
                    CharacterList characterList5 = new CharacterList();
                    if (builtObject.Characters != null && builtObject.Characters.Count > 0)
                    {
                        characterList5.AddRange(builtObject.Characters);
                    }
                    if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Empire == builtObject.Empire && builtObject.ParentHabitat.Characters != null && builtObject.ParentHabitat.Characters.Count > 0)
                    {
                        characterList5.AddRange(builtObject.ParentHabitat.Characters);
                    }
                    if (characterList5.Count > 0)
                    {
                        num11 = characterList5.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.MilitaryShipConstructionSpeed);
                        num12 = characterList5.GetHighestSkillLevelExcludeLeaders(CharacterSkillType.CivilianShipConstructionSpeed);
                        if (num11 != 0 || num12 != 0)
                        {
                            flag2 = true;
                        }
                    }
                    if (builtObject.Empire != null && builtObject.Empire.Leader != null)
                    {
                        if (builtObject.Empire.Leader.MilitaryShipConstructionSpeed != 0)
                        {
                            num11 += builtObject.Empire.Leader.MilitaryShipConstructionSpeed;
                            flag = true;
                        }
                        if (builtObject.Empire.Leader.CivilianShipConstructionSpeed != 0)
                        {
                            num12 += builtObject.Empire.Leader.CivilianShipConstructionSpeed;
                            flag = true;
                        }
                    }
                    if (num11 != 0)
                    {
                        string text2 = text;
                        text = text2 + ((double)num11 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.MilitaryShipConstructionSpeed) + ", ";
                    }
                    if (num12 != 0)
                    {
                        string text2 = text;
                        text = text2 + ((double)num12 / 100.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.CivilianShipConstructionSpeed) + ", ";
                    }
                }
                double num13 = 1.0;
                double num14 = builtObject.CaptainTargetingBonus;
                double num15 = builtObject.CaptainCountermeasuresBonus;
                double num16 = builtObject.CaptainShipManeuveringBonus;
                double num17 = builtObject.CaptainFightersBonus;
                double num18 = builtObject.CaptainShipEnergyUsageBonus;
                double num19 = builtObject.CaptainWeaponsDamageBonus;
                double num20 = builtObject.CaptainWeaponsRangeBonus;
                double num21 = builtObject.CaptainShieldRechargeRateBonus;
                double num22 = builtObject.CaptainDamageControlBonus;
                double num23 = builtObject.CaptainRepairBonus;
                double num24 = builtObject.CaptainHyperjumpSpeedBonus;
                if (builtObject.ShipGroup != null)
                {
                    num13 += 1.0;
                    num14 += builtObject.ShipGroup.TargetingBonus;
                    num15 += builtObject.ShipGroup.CountermeasuresBonus;
                    num16 += builtObject.ShipGroup.ShipManeuveringBonus;
                    num17 += builtObject.ShipGroup.FightersBonus;
                    num18 += builtObject.ShipGroup.ShipEnergyUsageBonus;
                    num19 += builtObject.ShipGroup.WeaponsDamageBonus;
                    num20 += builtObject.ShipGroup.WeaponsRangeBonus;
                    num21 += builtObject.ShipGroup.ShieldRechargeRateBonus;
                    num22 += builtObject.ShipGroup.DamageControlBonus;
                    num23 += builtObject.ShipGroup.RepairBonus;
                    num24 += builtObject.ShipGroup.HyperjumpSpeedBonus;
                }
                if (num14 != num13)
                {
                    string text2 = text;
                    text = text2 + (num14 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.Targeting) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num15 != num13)
                {
                    string text2 = text;
                    text = text2 + (num15 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.Countermeasures) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num16 != num13)
                {
                    string text2 = text;
                    text = text2 + (num16 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ShipManeuvering) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num17 != num13)
                {
                    string text2 = text;
                    text = text2 + (num17 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.Fighters) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num18 != num13)
                {
                    string text2 = text;
                    text = text2 + (num18 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ShipEnergyUsage) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num19 != num13)
                {
                    string text2 = text;
                    text = text2 + (num19 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.WeaponsDamage) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num20 != num13)
                {
                    string text2 = text;
                    text = text2 + (num20 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.WeaponsRange) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num21 != num13)
                {
                    string text2 = text;
                    text = text2 + (num21 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.ShieldRechargeRate) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num22 != num13)
                {
                    string text2 = text;
                    text = text2 + (num22 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.DamageControl) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num23 != num13)
                {
                    string text2 = text;
                    text = text2 + (num23 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.RepairBonus) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num24 != num13)
                {
                    string text2 = text;
                    text = text2 + (num24 - num13).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.HyperjumpSpeed) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                double num25 = 1.0 + (double)builtObject.Characters.GetHighestSkillLevel(CharacterSkillType.BoardingAssault) / 100.0;
                double num26 = 1.0 + (double)builtObject.Characters.GetHighestSkillLevel(CharacterSkillType.SmugglingIncome) / 100.0;
                double num27 = 1.0 + (double)builtObject.Characters.GetHighestSkillLevel(CharacterSkillType.SmugglingEvasion) / 100.0;
                if (num25 != 1.0)
                {
                    string text2 = text;
                    text = text2 + (num25 - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.BoardingAssault) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num26 != 1.0)
                {
                    string text2 = text;
                    text = text2 + (num26 - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.SmugglingIncome) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (num27 != 1.0)
                {
                    string text2 = text;
                    text = text2 + (num27 - 1.0).ToString("+0%;-0%") + " " + ResolveDescription(CharacterSkillType.SmugglingEvasion) + ", ";
                    flag4 = true;
                    flag5 = true;
                }
                if (!string.IsNullOrEmpty(text) && text.Length >= 2)
                {
                    text = text.Substring(0, text.Length - 2);
                }
                if (flag || flag3 || flag2 || flag4)
                {
                    string text9 = string.Empty;
                    if (flag)
                    {
                        text9 = text9 + ResolveDescription(CharacterRole.Leader) + " & ";
                    }
                    if (flag2)
                    {
                        text9 = text9 + ResolveDescription(CharacterRole.ColonyGovernor) + " & ";
                    }
                    if (flag3)
                    {
                        text9 = text9 + ResolveDescription(CharacterRole.Scientist) + " & ";
                    }
                    if (flag5)
                    {
                        text9 = text9 + ResolveDescription(CharacterRole.ShipCaptain) + " & ";
                    }
                    if (flag4)
                    {
                        text9 = text9 + ResolveDescription(CharacterRole.FleetAdmiral) + " & ";
                    }
                    if (!string.IsNullOrEmpty(text9) && text9.Length >= 3)
                    {
                        text9 = text9.Substring(0, text9.Length - 3);
                    }
                    text = text9 + ": " + text;
                }
            }
            return text;
        }

        public static string ResolveCharacterDescription(Character character)
        {
            return ResolveCharacterDescription(character, includeName: true);
        }

        public static string ResolveCharacterDescription(Character character, bool includeName)
        {
            string text = string.Empty;
            if (character != null)
            {
                if (includeName)
                {
                    string text2 = text;
                    text = text2 + character.Name + " (" + ResolveDescription(character.Role) + ")\n";
                    text += "\n";
                }
                if (!character.BonusesKnown)
                {
                    text = text + "(" + TextResolver.GetText("Character untested - skill levels and traits unknown") + ")\n\n";
                }
                text = text + TextResolver.GetText("Skills").ToUpper(CultureInfo.InvariantCulture) + " (";
                text = text + TextResolver.GetText("including bonuses from traits") + ")\n";
                List<CharacterSkillType> list = character.ResolveCharacterSkillTypes(includeUnknownBonuses: false);
                for (int i = 0; i < list.Count; i++)
                {
                    int skillLevel = character.GetSkillLevel(list[i]);
                    if (character.BonusesKnown)
                    {
                        if (skillLevel != 0)
                        {
                            text = text + ResolveDescription(list[i]) + ": ";
                            text = text + skillLevel.ToString("+#0;-#0") + "%\n";
                        }
                    }
                    else
                    {
                        text = text + ResolveDescription(list[i]) + ": ";
                        text += "?%\n";
                    }
                }
                if (character.Traits != null && character.Traits.Count > 0)
                {
                    text += "\n";
                    text = text + TextResolver.GetText("Traits").ToUpper(CultureInfo.InvariantCulture) + "\n";
                    if (character.BonusesKnown)
                    {
                        for (int j = 0; j < character.Traits.Count; j++)
                        {
                            CharacterTraitType characterTraitType = character.Traits[j];
                            CharacterSkillList characterSkillList = DetermineEffectsOfCharacterTrait(characterTraitType, character.Role);
                            text = text + ResolveDescription(characterTraitType) + ": ";
                            switch (characterTraitType)
                            {
                                case CharacterTraitType.Lazy:
                                case CharacterTraitType.PoorTactician:
                                case CharacterTraitType.Drunk:
                                case CharacterTraitType.LaxDiscipline:
                                    text += string.Format(TextResolver.GetText("Amount To All Skills"), "-5%");
                                    break;
                                case CharacterTraitType.Energetic:
                                case CharacterTraitType.GoodTactician:
                                case CharacterTraitType.ToughDiscipline:
                                    text += string.Format(TextResolver.GetText("Amount To All Skills"), "+5%");
                                    break;
                                case CharacterTraitType.InspiringPresence:
                                    text += TextResolver.GetText("Character Trait Description InspiringPresence");
                                    break;
                                case CharacterTraitType.Demoralizing:
                                    text += TextResolver.GetText("Character Trait Description Demoralizing");
                                    break;
                                case CharacterTraitType.LocalDefenseTactics:
                                    text += string.Format(TextResolver.GetText("Character Trait Description LocalDefenseTactics"), "+20%");
                                    break;
                                case CharacterTraitType.ForeignSpy:
                                    text += TextResolver.GetText("Character Trait Description ForeignSpy");
                                    break;
                                case CharacterTraitType.Patriot:
                                    text += TextResolver.GetText("Character Trait Description Patriot");
                                    break;
                                case CharacterTraitType.UltraGenius:
                                    text += string.Format(TextResolver.GetText("Character Trait Description UltraGenius"), "+20%");
                                    break;
                                case CharacterTraitType.Creative:
                                    text += TextResolver.GetText("Character Trait Description Creative");
                                    break;
                                case CharacterTraitType.Methodical:
                                    text += TextResolver.GetText("Character Trait Description Methodical");
                                    break;
                                default:
                                    {
                                        int num = 0;
                                        for (int k = 0; k < characterSkillList.Count; k++)
                                        {
                                            CharacterSkill characterSkill = characterSkillList[k];
                                            if (characterSkill != null)
                                            {
                                                if (num > 2)
                                                {
                                                    text += "\n";
                                                    num = 0;
                                                }
                                                string text3 = text;
                                                text = text3 + characterSkill.Level.ToString("+#0;-#0") + "% " + ResolveDescription(characterSkill.Type) + ", ";
                                                num++;
                                            }
                                        }
                                        if (characterSkillList.Count > 0)
                                        {
                                            text = text.Substring(0, text.Length - 2);
                                        }
                                        if (characterTraitType == CharacterTraitType.IntelligenceSober || characterTraitType == CharacterTraitType.IntelligenceAddict)
                                        {
                                            text = text + " (" + TextResolver.GetText("Character Trait Description OnlyAppliesToExistingSkills") + ")";
                                        }
                                        break;
                                    }
                            }
                            text += "\n";
                        }
                    }
                    else
                    {
                        text += "?\n";
                    }
                }
                if (!string.IsNullOrEmpty(text) && text.Length > 1)
                {
                    text = text.Substring(0, text.Length - 1);
                }
            }
            return text;
        }

        public CharacterList ResolveCharactersValidForLocation(StellarObject location, Empire empire)
        {
            CharacterList characterList = new CharacterList();
            if (empire != null && location != null)
            {
                if (location.Empire == empire)
                {
                    if (location is Habitat)
                    {
                        characterList = empire.Characters.GetNonTransferringCharacters();
                    }
                    else if (location is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)location;
                        if (builtObject.Owner == empire)
                        {
                            characterList = empire.Characters.GetNonTransferringCharacters();
                        }
                    }
                }
                else if (location is Habitat)
                {
                    Habitat habitat = (Habitat)location;
                    if (habitat.Empire != null && habitat.Empire != IndependentEmpire && habitat.Population != null && habitat.Population.TotalAmount > 0 && habitat == habitat.Empire.Capital)
                    {
                        DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(habitat.Empire);
                        if (diplomaticRelation.Type != 0 && diplomaticRelation.Type != DiplomaticRelationType.War)
                        {
                            characterList = empire.Characters.GetNonTransferringCharacters(CharacterRole.Ambassador);
                        }
                    }
                }
                CharacterList characterList2 = new CharacterList();
                for (int i = 0; i < characterList.Count; i++)
                {
                    if (characterList[i].Location == location)
                    {
                        characterList2.Add(characterList[i]);
                    }
                }
                for (int j = 0; j < characterList2.Count; j++)
                {
                    characterList.Remove(characterList2[j]);
                }
            }
            return characterList;
        }

        public bool ChanceColonyGovernorPromotion(Empire empire, Habitat colony)
        {
            if (empire != null && colony != null && colony.Characters != null && Rnd.Next(0, 40) == 1)
            {
                CharacterList charactersByRole = colony.Characters.GetCharactersByRole(CharacterRole.ColonyGovernor);
                if (charactersByRole.Count > 0)
                {
                    int index = Rnd.Next(0, charactersByRole.Count);
                    Character character = charactersByRole[index];
                }
            }
            return false;
        }

        public bool ChanceNewColonyGovernor(Empire empire, Habitat colony)
        {
            if (empire != null && colony != null && empire.Colonies != null && empire.Colonies.Count > 1)
            {
                int num = 15;
                if (empire.DominantRace != null)
                {
                    num = Math.Max(2, (int)((double)num / empire.DominantRace.CharacterRandomAppearanceChanceGovernor));
                }
                if (Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                {
                    Character character = empire.GenerateNewCharacter(CharacterRole.ColonyGovernor, colony);
                    string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                    string description = string.Format(TextResolver.GetText("New Character Event Colony Governor"), colony.Name, character.Name);
                    empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, description, title);
                    return true;
                }
            }
            return false;
        }

        public bool ChanceNewAmbassador(Empire empire, DiplomaticRelationType newRelationType, Empire otherEmpire)
        {
            if (empire != null && otherEmpire != null)
            {
                int num = 1000;
                switch (newRelationType)
                {
                    case DiplomaticRelationType.FreeTradeAgreement:
                        num = 20;
                        break;
                    case DiplomaticRelationType.Protectorate:
                        num = 10;
                        break;
                    case DiplomaticRelationType.MutualDefensePact:
                        num = 6;
                        break;
                }
                if (empire.DominantRace != null)
                {
                    num = Math.Max(2, (int)((double)num / empire.DominantRace.CharacterRandomAppearanceChanceAmbassador));
                }
                if (num < 100 && Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0 && otherEmpire != null && otherEmpire.Capital != null)
                {
                    Character character = empire.GenerateNewCharacter(CharacterRole.Ambassador, otherEmpire.Capital);
                    string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                    string description = string.Format(TextResolver.GetText("New Character Event Ambassador"), ResolveDescription(newRelationType), otherEmpire.Name, character.Name);
                    empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, description, title);
                    return true;
                }
            }
            return false;
        }

        public void ChanceScientistPromotion(Empire empire, ResearchNode researchProject)
        {
            if (empire == null || researchProject == null)
            {
                return;
            }
            CharacterList characterList = new CharacterList();
            CharacterEventType eventType = CharacterEventType.ResearchAdvanceEnergy;
            switch (researchProject.Industry)
            {
                case IndustryType.Weapon:
                    if (empire.ResearchBonusWeaponsStation != null && empire.ResearchBonusWeaponsStation.Characters != null)
                    {
                        characterList = empire.ResearchBonusWeaponsStation.Characters.GetCharactersByRole(CharacterRole.Scientist);
                        eventType = CharacterEventType.ResearchAdvanceWeapons;
                    }
                    break;
                case IndustryType.Energy:
                    if (empire.ResearchBonusEnergyStation != null && empire.ResearchBonusEnergyStation.Characters != null)
                    {
                        characterList = empire.ResearchBonusEnergyStation.Characters.GetCharactersByRole(CharacterRole.Scientist);
                        eventType = CharacterEventType.ResearchAdvanceEnergy;
                    }
                    break;
                case IndustryType.HighTech:
                    if (empire.ResearchBonusHighTechStation != null && empire.ResearchBonusHighTechStation.Characters != null)
                    {
                        characterList = empire.ResearchBonusHighTechStation.Characters.GetCharactersByRole(CharacterRole.Scientist);
                        eventType = CharacterEventType.ResearchAdvanceHighTech;
                    }
                    break;
            }
            if (characterList.Count > 0)
            {
                DoCharacterEvent(eventType, researchProject, characterList);
            }
        }

        public bool ChanceNewScientist(Empire empire, ResearchNode researchProject)
        {
            if (empire != null && researchProject != null)
            {
                int num = 25;
                if (empire.DominantRace != null)
                {
                    num = Math.Max(2, (int)((double)num / empire.DominantRace.CharacterRandomAppearanceChanceScientist));
                }
                if (Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                {
                    Character character = null;
                    switch (researchProject.Industry)
                    {
                        case IndustryType.Weapon:
                            if (empire.ResearchBonusWeaponsStation != null && empire.ResearchBonusWeaponsStation.Characters != null)
                            {
                                character = empire.GenerateNewCharacter(CharacterRole.Scientist, empire.ResearchBonusWeaponsStation);
                            }
                            break;
                        case IndustryType.Energy:
                            if (empire.ResearchBonusEnergyStation != null && empire.ResearchBonusEnergyStation.Characters != null)
                            {
                                character = empire.GenerateNewCharacter(CharacterRole.Scientist, empire.ResearchBonusEnergyStation);
                            }
                            break;
                        case IndustryType.HighTech:
                            if (empire.ResearchBonusHighTechStation != null && empire.ResearchBonusHighTechStation.Characters != null)
                            {
                                character = empire.GenerateNewCharacter(CharacterRole.Scientist, empire.ResearchBonusHighTechStation);
                            }
                            break;
                    }
                    if (character != null)
                    {
                        string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                        string description = string.Format(TextResolver.GetText("New Character Event Scientist"), researchProject.Name, character.Name);
                        empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, description, title);
                        return true;
                    }
                }
            }
            return false;
        }

        public bool ChanceNewScientistCriticalSuccess(Empire empire, ResearchNode researchProject)
        {
            if (empire != null && researchProject != null)
            {
                int num = 6;
                if (empire.DominantRace != null)
                {
                    num = Math.Max(2, (int)((double)num / empire.DominantRace.CharacterRandomAppearanceChanceScientist));
                }
                if (Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                {
                    Character character = null;
                    switch (researchProject.Industry)
                    {
                        case IndustryType.Weapon:
                            if (empire.ResearchBonusWeaponsStation != null && empire.ResearchBonusWeaponsStation.Characters != null)
                            {
                                character = empire.GenerateNewCharacter(CharacterRole.Scientist, empire.ResearchBonusWeaponsStation);
                            }
                            break;
                        case IndustryType.Energy:
                            if (empire.ResearchBonusEnergyStation != null && empire.ResearchBonusEnergyStation.Characters != null)
                            {
                                character = empire.GenerateNewCharacter(CharacterRole.Scientist, empire.ResearchBonusEnergyStation);
                            }
                            break;
                        case IndustryType.HighTech:
                            if (empire.ResearchBonusHighTechStation != null && empire.ResearchBonusHighTechStation.Characters != null)
                            {
                                character = empire.GenerateNewCharacter(CharacterRole.Scientist, empire.ResearchBonusHighTechStation);
                            }
                            break;
                    }
                    if (character != null)
                    {
                        string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                        string description = string.Format(TextResolver.GetText("New Character Event Scientist Critical Success"), researchProject.Name, character.Name);
                        empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, description, title);
                        return true;
                    }
                }
            }
            return false;
        }

        public bool ChanceRaceEvent(BuiltObject targetDestroyed, BuiltObject destroyer)
        {
            if (targetDestroyed != null && destroyer != null && destroyer.ShipGroup != null)
            {
                int num = 0;
                if (targetDestroyed.SubRole == BuiltObjectSubRole.MediumSpacePort)
                {
                    num = 6;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.LargeSpacePort)
                {
                    num = 3;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.Carrier)
                {
                    num = 10;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.ResupplyShip)
                {
                    num = 6;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.CapitalShip)
                {
                    num = 8;
                    if (targetDestroyed.IsPlanetDestroyer || targetDestroyed.Size > 2000)
                    {
                        num = 2;
                    }
                }
                if (num > 0 && Rnd.Next(0, num) == 1 && destroyer.Empire != null && destroyer.Empire.WarWeariness != 0.0 && destroyer.Empire.DominantRace != null && destroyer.Empire.DominantRace.RaceEvents.ContainsEventType(RaceEventType.NeverSurrenderWarWearinessReset))
                {
                    double num2 = 0.4 + Rnd.NextDouble() * 0.2;
                    destroyer.Empire.WarWearinessRaw *= num2;
                    string title = ResolveDescription(RaceEventType.NeverSurrenderWarWearinessReset);
                    string message = string.Format(TextResolver.GetText("Race Event Description NeverSurrenderWarWearinessReset"), destroyer.ShipGroup.Name);
                    destroyer.Empire.SendEventMessageToEmpire(EventMessageType.RaceEvent, title, message, RaceEventType.NeverSurrenderWarWearinessReset, destroyer);
                    return true;
                }
            }
            return false;
        }

        public bool ChanceNewShipCaptain(BuiltObject targetDestroyed, Empire empire, StellarObject location)
        {
            return ChanceNewShipCaptain(targetDestroyed, empire, location, targetCaptured: false, smuggler: false);
        }

        public bool ChanceNewShipCaptain(BuiltObject targetDestroyed, Empire empire, StellarObject location, bool targetCaptured, bool smuggler)
        {
            if (targetDestroyed != null && empire != null && location != null && !location.HasBeenDestroyed)
            {
                int num = 0;
                if (targetDestroyed.Role == BuiltObjectRole.Base && targetDestroyed.Size > 500)
                {
                    num = 7;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.MediumSpacePort)
                {
                    num = 6;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.LargeSpacePort)
                {
                    num = 3;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.Carrier)
                {
                    num = 8;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.Cruiser)
                {
                    num = 11;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.Destroyer)
                {
                    num = 25;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.ResupplyShip)
                {
                    num = 7;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.CapitalShip)
                {
                    num = 5;
                    if (targetDestroyed.IsPlanetDestroyer || targetDestroyed.Size > 2000)
                    {
                        num = 2;
                    }
                }
                if (num > 0)
                {
                    if (empire.DominantRace != null)
                    {
                        num = Math.Max(2, (int)((double)num / empire.DominantRace.CharacterRandomAppearanceChanceShipCaptain));
                    }
                    if (Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                    {
                        Character character = empire.GenerateNewCharacter(CharacterRole.ShipCaptain, location);
                        if (smuggler)
                        {
                            character.AddTrait(CharacterTraitType.Smuggler, starting: true, this);
                        }
                        string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                        string empty = string.Empty;
                        empty = ((!targetCaptured) ? string.Format(TextResolver.GetText("New Character Event Ship Captain"), targetDestroyed.Name, character.Name) : ((!smuggler) ? string.Format(TextResolver.GetText("New Character Event Ship Captain Capture"), targetDestroyed.Name, character.Name) : string.Format(TextResolver.GetText("New Character Event Ship Captain Smuggler Capture"), targetDestroyed.Name, character.Name)));
                        empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, empty, title);
                        return true;
                    }
                }
            }
            return false;
        }

        public bool ChanceNewFleetAdmiral(BuiltObject targetDestroyed, Empire empire, StellarObject location)
        {
            return ChanceNewFleetAdmiral(targetDestroyed, empire, location, targetCaptured: false);
        }

        public bool ChanceNewFleetAdmiral(BuiltObject targetDestroyed, Empire empire, StellarObject location, bool targetCaptured)
        {
            if (targetDestroyed != null && empire != null && location != null && !location.HasBeenDestroyed)
            {
                int num = 0;
                if (targetDestroyed.Role == BuiltObjectRole.Base && targetDestroyed.Empire != null && targetDestroyed.Empire.PirateEmpireBaseHabitat != null)
                {
                    num = 10;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.MediumSpacePort)
                {
                    num = 8;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.LargeSpacePort)
                {
                    num = 4;
                }
                if (targetDestroyed.SubRole == BuiltObjectSubRole.Carrier)
                {
                    num = 12;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.Cruiser)
                {
                    num = 16;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.Destroyer)
                {
                    num = 40;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.ResupplyShip)
                {
                    num = 10;
                }
                else if (targetDestroyed.SubRole == BuiltObjectSubRole.CapitalShip)
                {
                    num = 8;
                    if (targetDestroyed.IsPlanetDestroyer || targetDestroyed.Size > 2000)
                    {
                        num = 2;
                    }
                }
                if (num > 0 && Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                {
                    Character character = empire.GenerateNewCharacter(CharacterRole.FleetAdmiral, location);
                    string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                    string empty = string.Empty;
                    empty = ((!targetCaptured) ? string.Format(TextResolver.GetText("New Character Event Fleet Admiral"), targetDestroyed.Name, character.Name) : string.Format(TextResolver.GetText("New Character Event Fleet Admiral Capture"), targetDestroyed.Name, character.Name));
                    empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, empty, title);
                    return true;
                }
            }
            return false;
        }

        public bool ChanceNewFleetAdmiralFromConstruction(BuiltObject builtObjectConstructed, Empire empire, StellarObject location)
        {
            if (builtObjectConstructed != null && empire != null && location != null && !location.HasBeenDestroyed)
            {
                int num = 0;
                if (builtObjectConstructed.SubRole == BuiltObjectSubRole.DefensiveBase)
                {
                    num = 30;
                }
                else if (builtObjectConstructed.SubRole == BuiltObjectSubRole.Carrier)
                {
                    num = 20;
                }
                else if (builtObjectConstructed.SubRole == BuiltObjectSubRole.ResupplyShip)
                {
                    num = 15;
                }
                else if (builtObjectConstructed.SubRole == BuiltObjectSubRole.Cruiser)
                {
                    num = 20;
                }
                else if (builtObjectConstructed.SubRole == BuiltObjectSubRole.CapitalShip)
                {
                    num = 15;
                    if (builtObjectConstructed.IsPlanetDestroyer || builtObjectConstructed.Size > 2000)
                    {
                        num = 5;
                    }
                }
                if (num > 0 && Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                {
                    Character character = empire.GenerateNewCharacter(CharacterRole.FleetAdmiral, location);
                    string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                    string description = string.Format(TextResolver.GetText("New Character Event Construction Fleet Admiral"), ResolveDescription(builtObjectConstructed.SubRole), builtObjectConstructed.Name, character.Name);
                    empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, description, title);
                    return true;
                }
            }
            return false;
        }

        public bool ChanceNewTroopGeneralFromInvasion(Empire empire, Habitat invadedColony, bool invading)
        {
            if (empire != null && invadedColony != null && !invadedColony.HasBeenDestroyed && invadedColony.Population != null && invadedColony.Population.TotalAmount > 100000000)
            {
                int num = 8;
                if (empire.DominantRace != null)
                {
                    num = Math.Max(2, (int)((double)num / empire.DominantRace.CharacterRandomAppearanceChanceGeneral));
                }
                if (invading)
                {
                    num = (int)((double)num * 1.5);
                }
                if (Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                {
                    Character character = empire.GenerateNewCharacter(CharacterRole.TroopGeneral, invadedColony);
                    Habitat habitat = DetermineHabitatSystemStar(invadedColony);
                    string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                    string empty = string.Empty;
                    empty = ((!invading) ? string.Format(TextResolver.GetText("New Character Event Defense Troop General"), invadedColony.Name, habitat.Name, character.Name) : string.Format(TextResolver.GetText("New Character Event Invasion Troop General"), ResolveDescription(invadedColony.Type).ToLower(CultureInfo.InvariantCulture), ResolveDescription(invadedColony.Category).ToLower(CultureInfo.InvariantCulture), invadedColony.Name, habitat.Name, character.Name));
                    empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, empty, title);
                    return true;
                }
            }
            return false;
        }

        public bool ChanceNewTroopGeneralFromRecruitment(Troop troopRecruited, Empire empire, StellarObject location)
        {
            if (troopRecruited != null && empire != null && location != null && !location.HasBeenDestroyed)
            {
                int num = 70;
                if (empire.DominantRace != null)
                {
                    num = Math.Max(2, (int)((double)num / empire.DominantRace.CharacterRandomAppearanceChanceGeneral));
                }
                if (Rnd.Next(0, num) == 1 && empire.CharactersCanGenerateAmountNonIntelligenceAgent() > 0)
                {
                    Character character = empire.GenerateNewCharacter(CharacterRole.TroopGeneral, location);
                    string title = string.Format(TextResolver.GetText("New Character Event Title"), ResolveDescription(character.Role));
                    string description = string.Format(TextResolver.GetText("New Character Event Troop Recruit Troop General"), troopRecruited.Name, character.Name);
                    empire.SendMessageToEmpireWithTitle(empire, EmpireMessageType.CharacterAppearance, character, description, title);
                    return true;
                }
            }
            return false;
        }

        public static string ResolveDescriptionCharacterTask(Character character, Galaxy galaxy)
        {
            string result = string.Empty;
            if (character != null)
            {
                switch (character.Role)
                {
                    case CharacterRole.IntelligenceAgent:
                        result = "(" + TextResolver.GetText("No mission") + ")";
                        if (character.Mission != null && character.Mission.Type != 0)
                        {
                            string text3 = ResolveDescription(character.Mission, character.Empire);
                            text3 = CapitalizeFirstLetter(text3);
                            if (character.Mission.Type == IntelligenceMissionType.DeepCover && character.Mission.Outcome == IntelligenceMissionOutcome.SucceedNotDetect)
                            {
                                text3 = string.Format(TextResolver.GetText("Deep cover in the EMPIRE"), character.Mission.TargetEmpire.Name);
                            }
                            string arg3 = ResolveStarDateDescription(character.Mission.StartDate + character.Mission.TimeLength);
                            arg3 = string.Format(TextResolver.GetText("completed DATE"), arg3);
                            if (character.Mission.TimeLength > 1000000000)
                            {
                                arg3 = TextResolver.GetText("Until cancelled");
                            }
                            result = text3 + "  (" + arg3 + ")";
                        }
                        else if (character.TransferDestination != null && character.TransferTimeRemaining > 0f)
                        {
                            result = string.Format(TextResolver.GetText("Transferring to DESTINATION"), character.TransferDestination.Name);
                            string arg4 = ResolveStarDateDescription(character.TransferExpectedArrivalDate(galaxy));
                            result = result + " (" + string.Format(TextResolver.GetText("Expected Arrival"), arg4) + ")";
                        }
                        break;
                    case CharacterRole.TroopGeneral:
                        if (character.Location != null && character.Location.Empire != character.Empire && character.Empire.CheckAtWarWithEmpire(character.Location.Empire))
                        {
                            result = string.Format(TextResolver.GetText("Leading invasion of LOCATION"), character.Location.Name);
                        }
                        else
                        {
                            if (character.TransferDestination == null || !(character.TransferTimeRemaining > 0f))
                            {
                                break;
                            }
                            string text2 = character.TransferDestination.Name;
                            if (character.TransferDestination is BuiltObject)
                            {
                                BuiltObject builtObject3 = (BuiltObject)character.TransferDestination;
                                if (builtObject3.ShipGroup != null)
                                {
                                    text2 = text2 + "  (" + builtObject3.ShipGroup.Name + ")";
                                }
                            }
                            result = string.Format(TextResolver.GetText("Transferring to DESTINATION"), text2);
                            string arg2 = ResolveStarDateDescription(character.TransferExpectedArrivalDate(galaxy));
                            result = result + " (" + string.Format(TextResolver.GetText("Expected Arrival"), arg2) + ")";
                        }
                        break;
                    case CharacterRole.FleetAdmiral:
                        if (character.Location == null)
                        {
                            break;
                        }
                        if (character.Location is BuiltObject)
                        {
                            BuiltObject builtObject6 = (BuiltObject)character.Location;
                            if (builtObject6 != null)
                            {
                                result = ((builtObject6.ShipGroup == null) ? string.Format(TextResolver.GetText("Commanding SHIPNAME"), builtObject6.Name) : string.Format(TextResolver.GetText("Commanding FLEETNAME"), builtObject6.ShipGroup.Name));
                            }
                        }
                        else
                        {
                            result = string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name);
                        }
                        break;
                    case CharacterRole.ShipCaptain:
                        if (character.Location == null)
                        {
                            break;
                        }
                        if (character.Location is BuiltObject)
                        {
                            BuiltObject builtObject2 = (BuiltObject)character.Location;
                            if (builtObject2 != null)
                            {
                                result = ((builtObject2.Role == BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("Commanding SHIPNAME"), character.Location.Name) : string.Format(TextResolver.GetText("Commanding SHIPNAME"), builtObject2.Name));
                            }
                        }
                        else
                        {
                            result = string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name);
                        }
                        break;
                    case CharacterRole.Ambassador:
                        if (character.Location == null)
                        {
                            break;
                        }
                        if (character.Location is Habitat)
                        {
                            Habitat habitat = (Habitat)character.Location;
                            if (habitat != null)
                            {
                                result = ((habitat.Empire == null || habitat.Empire.Capital != habitat || habitat.Empire == character.Empire) ? string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name) : string.Format(TextResolver.GetText("Ambassador to EMPIRE at COLONY"), habitat.Empire.Name, habitat.Name));
                            }
                        }
                        else
                        {
                            result = string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name);
                        }
                        break;
                    case CharacterRole.ColonyGovernor:
                        if (character.Location == null)
                        {
                            break;
                        }
                        if (character.Location is Habitat)
                        {
                            Habitat habitat2 = (Habitat)character.Location;
                            if (habitat2 != null)
                            {
                                result = ((habitat2.Empire != character.Empire) ? string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name) : string.Format(TextResolver.GetText("Governing COLONY"), habitat2.Name));
                            }
                        }
                        else
                        {
                            result = string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name);
                        }
                        break;
                    case CharacterRole.Leader:
                        if (character.Location == null)
                        {
                            break;
                        }
                        if (character.Location is Habitat)
                        {
                            Habitat habitat4 = (Habitat)character.Location;
                            if (habitat4 != null)
                            {
                                result = ((habitat4.Empire == null || habitat4.Empire != character.Empire || !habitat4.Empire.Capitals.Contains(habitat4)) ? string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name) : string.Format(TextResolver.GetText("Ruling from COLONY"), habitat4.Name));
                            }
                        }
                        else
                        {
                            result = string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name);
                        }
                        break;
                    case CharacterRole.PirateLeader:
                        if (character.Location == null)
                        {
                            break;
                        }
                        if (character.Location is Habitat)
                        {
                            Habitat habitat3 = (Habitat)character.Location;
                            if (habitat3 != null)
                            {
                                result = ((!habitat3.GetPirateControl().CheckFactionHasControl(character.Empire.EmpireId)) ? string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name) : string.Format(TextResolver.GetText("Ruling from COLONY"), habitat3.Name));
                            }
                        }
                        else if (character.Location is BuiltObject)
                        {
                            BuiltObject builtObject5 = (BuiltObject)character.Location;
                            if (builtObject5 != null)
                            {
                                result = ((builtObject5.Empire != null && builtObject5.Empire == character.Empire && builtObject5.Role == BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("Ruling from COLONY"), builtObject5.Name) : ((builtObject5.ShipGroup == null) ? string.Format(TextResolver.GetText("Onboard SHIPNAME"), builtObject5.Name) : string.Format(TextResolver.GetText("Commanding FLEETNAME"), builtObject5.ShipGroup.Name)));
                            }
                        }
                        else
                        {
                            result = string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name);
                        }
                        break;
                    case CharacterRole.Scientist:
                        if (character.Location == null)
                        {
                            break;
                        }
                        if (character.Location is BuiltObject)
                        {
                            BuiltObject builtObject4 = (BuiltObject)character.Location;
                            if (builtObject4 != null)
                            {
                                result = ((builtObject4.ResearchEnergy <= 0 && builtObject4.ResearchWeapons <= 0 && builtObject4.ResearchHighTech <= 0) ? string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name) : string.Format(TextResolver.GetText("Researching at X"), builtObject4.Name));
                            }
                        }
                        else
                        {
                            result = string.Format(TextResolver.GetText("Waiting at X"), character.Location.Name);
                        }
                        break;
                    default:
                        {
                            if (character.TransferDestination == null || !(character.TransferTimeRemaining > 0f))
                            {
                                break;
                            }
                            string text = character.TransferDestination.Name;
                            if (character.TransferDestination is BuiltObject)
                            {
                                BuiltObject builtObject = (BuiltObject)character.TransferDestination;
                                if (builtObject.ShipGroup != null)
                                {
                                    text = text + "  (" + builtObject.ShipGroup.Name + ")";
                                }
                            }
                            result = string.Format(TextResolver.GetText("Transferring to DESTINATION"), text);
                            string arg = ResolveStarDateDescription(character.TransferExpectedArrivalDate(galaxy));
                            result = result + " (" + string.Format(TextResolver.GetText("Expected Arrival"), arg) + ")";
                            break;
                        }
                }
                if (character.TransferDestination != null && character.TransferTimeRemaining > 0f)
                {
                    string text4 = character.TransferDestination.Name;
                    if (character.TransferDestination is BuiltObject)
                    {
                        BuiltObject builtObject7 = (BuiltObject)character.TransferDestination;
                        if (builtObject7.ShipGroup != null)
                        {
                            text4 = text4 + "  (" + builtObject7.ShipGroup.Name + ")";
                        }
                    }
                    result = string.Format(TextResolver.GetText("Transferring to DESTINATION"), text4);
                    string arg5 = ResolveStarDateDescription(character.TransferExpectedArrivalDate(galaxy));
                    result = result + " (" + string.Format(TextResolver.GetText("Expected Arrival"), arg5) + ")";
                }
            }
            return result;
        }

        public static string ResolveDescriptionGeneral(ResourceBonus resourceBonus)
        {
            string result = string.Empty;
            if (resourceBonus != null)
            {
                Resource resource = new Resource(resourceBonus.ResourceId);
                switch (resourceBonus.Effect)
                {
                    case ColonyResourceEffect.BaseMaintenanceReduction:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General BaseMaintenanceReduction"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General BaseMaintenanceReduction Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ConstructionSpeed:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General ConstructionSpeed"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General ConstructionSpeed Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.Development:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General Development"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General Development Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.Happiness:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General Happiness"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General Happiness Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.IncomeBoost:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General IncomeBoost"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General IncomeBoost Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.PopulationGrowthRate:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General PopulationGrowthRate"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General PopulationGrowthRate Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.RecruitedTroopStrength:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General RecruitedTroopStrength"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General RecruitedTroopStrength Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ResearchEnergy:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General ResearchEnergy"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General ResearchEnergy Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ResearchHighTech:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General ResearchHighTech"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General ResearchHighTech Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ResearchWeapons:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General ResearchWeapons"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General ResearchWeapons Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.WarWearinessReduction:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus General WarWearinessReduction"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus General WarWearinessReduction Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                }
            }
            return result;
        }

        public static string ResolveDescription(ResourceBonus resourceBonus)
        {
            string result = string.Empty;
            if (resourceBonus != null)
            {
                Resource resource = new Resource(resourceBonus.ResourceId);
                switch (resourceBonus.Effect)
                {
                    case ColonyResourceEffect.BaseMaintenanceReduction:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus BaseMaintenanceReduction"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus BaseMaintenanceReduction Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ConstructionSpeed:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus ConstructionSpeed"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus ConstructionSpeed Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.Development:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus Development"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus Development Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.Happiness:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus Happiness"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus Happiness Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.IncomeBoost:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus IncomeBoost"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus IncomeBoost Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.PopulationGrowthRate:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus PopulationGrowthRate"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus PopulationGrowthRate Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.RecruitedTroopStrength:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus RecruitedTroopStrength"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus RecruitedTroopStrength Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ResearchEnergy:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus ResearchEnergy"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus ResearchEnergy Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ResearchHighTech:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus ResearchHighTech"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus ResearchHighTech Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.ResearchWeapons:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus ResearchWeapons"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus ResearchWeapons Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                    case ColonyResourceEffect.WarWearinessReduction:
                        result = ((!resourceBonus.AppliesOnlyToSources) ? string.Format(TextResolver.GetText("Race Resource Bonus WarWearinessReduction"), resource.Name, resourceBonus.Value.ToString("#0")) : string.Format(TextResolver.GetText("Race Resource Bonus WarWearinessReduction Source"), resource.Name, resourceBonus.Value.ToString("#0")));
                        break;
                }
            }
            return result;
        }

        public static string ResolveDescription(IntelligenceMission mission, Empire callingEmpire)
        {
            string result = string.Empty;
            if (mission != null)
            {
                bool flag = false;
                switch (mission.Outcome)
                {
                    case IntelligenceMissionOutcome.FailNotDetect:
                    case IntelligenceMissionOutcome.FailDetect:
                    case IntelligenceMissionOutcome.Capture:
                        flag = false;
                        break;
                    case IntelligenceMissionOutcome.SucceedNotDetect:
                    case IntelligenceMissionOutcome.SucceedDetect:
                        flag = true;
                        break;
                }
                switch (mission.Type)
                {
                    case IntelligenceMissionType.CounterIntelligence:
                        result = TextResolver.GetText("IntelligenceMissionOutcome CounterIntelligence");
                        break;
                    case IntelligenceMissionType.DeepCover:
                        result = ((mission.TargetEmpire != callingEmpire) ? ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome DeepCover Fail"), mission.TargetEmpire.Name) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome DeepCover Succeed"), mission.TargetEmpire.Name)) : ((!flag) ? TextResolver.GetText("IntelligenceMissionOutcome DeepCover OurEmpire Fail") : TextResolver.GetText("IntelligenceMissionOutcome DeepCover OurEmpire Succeed")));
                        break;
                    case IntelligenceMissionType.InciteRevolution:
                        result = ((mission.TargetEmpire != callingEmpire) ? ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome InciteRevolution Fail"), mission.TargetEmpire.Name) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome InciteRevolution Succeed"), mission.TargetEmpire.Name)) : ((!flag) ? TextResolver.GetText("IntelligenceMissionOutcome InciteRevolution OurEmpire Fail") : TextResolver.GetText("IntelligenceMissionOutcome InciteRevolution OurEmpire Succeed")));
                        break;
                    case IntelligenceMissionType.SabotageColony:
                        {
                            string arg2 = string.Empty;
                            if (mission.Target is BuiltObject)
                            {
                                arg2 = ((BuiltObject)mission.Target).Name;
                            }
                            else if (mission.Target is Habitat)
                            {
                                arg2 = ((Habitat)mission.Target).Name;
                            }
                            result = ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome SabotageColony Fail"), arg2) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome SabotageColony Succeed"), arg2));
                            break;
                        }
                    case IntelligenceMissionType.DestroyBase:
                        {
                            string arg = string.Empty;
                            if (mission.Target is BuiltObject)
                            {
                                arg = ((BuiltObject)mission.Target).Name;
                            }
                            result = ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome DestroyBase Fail"), arg) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome DestroyBase Succeed"), arg));
                            break;
                        }
                    case IntelligenceMissionType.AssassinateCharacter:
                        {
                            string arg4 = string.Empty;
                            string arg5 = string.Empty;
                            if (mission.Target is Character)
                            {
                                Character character = (Character)mission.Target;
                                arg4 = character.Name;
                                if (character.Location != null)
                                {
                                    arg5 = character.Location.Name;
                                }
                            }
                            result = ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome AssassinateCharacter Fail"), arg4, arg5) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome AssassinateCharacter Succeed"), arg4, arg5));
                            break;
                        }
                    case IntelligenceMissionType.SabotageConstruction:
                        {
                            string arg3 = string.Empty;
                            if (mission.Target is BuiltObject)
                            {
                                arg3 = ((BuiltObject)mission.Target).Name;
                            }
                            else if (mission.Target is Habitat)
                            {
                                arg3 = ((Habitat)mission.Target).Name;
                            }
                            result = ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome SabotageConstruction Fail"), arg3) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome SabotageConstruction Succeed"), arg3));
                            break;
                        }
                    case IntelligenceMissionType.StealGalaxyMap:
                        result = ((mission.TargetEmpire != callingEmpire) ? ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealGalaxyMap Fail"), mission.TargetEmpire.Name) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealGalaxyMap Succeed"), mission.TargetEmpire.Name)) : ((!flag) ? TextResolver.GetText("IntelligenceMissionOutcome StealGalaxyMap OurEmpire Fail") : TextResolver.GetText("IntelligenceMissionOutcome StealGalaxyMap OurEmpire Succeed")));
                        break;
                    case IntelligenceMissionType.StealTerritoryMap:
                        result = ((mission.TargetEmpire != callingEmpire) ? ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealTerritoryMap Fail"), mission.TargetEmpire.Name) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealTerritoryMap Succeed"), mission.TargetEmpire.Name)) : ((!flag) ? TextResolver.GetText("IntelligenceMissionOutcome StealTerritoryMap OurEmpire Fail") : TextResolver.GetText("IntelligenceMissionOutcome StealTerritoryMap OurEmpire Succeed")));
                        break;
                    case IntelligenceMissionType.StealOperationsMap:
                        result = ((mission.TargetEmpire != callingEmpire) ? ((!flag) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealOperationsMap Fail"), mission.TargetEmpire.Name) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealOperationsMap Succeed"), mission.TargetEmpire.Name)) : ((!flag) ? TextResolver.GetText("IntelligenceMissionOutcome StealOperationsMap OurEmpire Fail") : TextResolver.GetText("IntelligenceMissionOutcome StealOperationsMap OurEmpire Succeed")));
                        break;
                    case IntelligenceMissionType.StealTechData:
                        {
                            if (mission.TargetEmpire == callingEmpire)
                            {
                                result = ((!flag) ? TextResolver.GetText("IntelligenceMissionOutcome StealTechData OurEmpire Fail") : TextResolver.GetText("IntelligenceMissionOutcome StealTechData OurEmpire Succeed"));
                                break;
                            }
                            ResearchNode researchNode = null;
                            if (mission.Target is ResearchNode)
                            {
                                researchNode = (ResearchNode)mission.Target;
                            }
                            result = ((!flag) ? ((researchNode == null) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealTechData Fail"), mission.TargetEmpire.Name) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealTechData Project Fail"), researchNode.Name, mission.TargetEmpire.Name)) : ((researchNode == null) ? string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealTechData Succeed"), mission.TargetEmpire.Name) : string.Format(TextResolver.GetText("IntelligenceMissionOutcome StealTechData Project Succeed"), researchNode.Name, mission.TargetEmpire.Name)));
                            break;
                        }
                }
            }
            return result;
        }

        public static string ResolveMissionDescription(Fighter fighter)
        {
            string text = string.Empty;
            if (fighter != null)
            {
                switch (fighter.MissionType)
                {
                    case FighterMissionType.Undefined:
                        text = "(" + TextResolver.GetText("No mission") + ")";
                        break;
                    case FighterMissionType.Attack:
                        text = ((fighter.CurrentTarget == null) ? TextResolver.GetText("Attack") : string.Format(TextResolver.GetText("Attack X"), fighter.CurrentTarget.Name));
                        break;
                    case FighterMissionType.Patrol:
                        text = ((fighter.ParentBuiltObject == null) ? TextResolver.GetText("Patrol") : string.Format(TextResolver.GetText("Patrol X"), fighter.ParentBuiltObject.Name));
                        break;
                    case FighterMissionType.ReturnToCarrier:
                        text = TextResolver.GetText("Return to carrier");
                        if (fighter.ParentBuiltObject != null)
                        {
                            text = text + " (" + fighter.ParentBuiltObject.Name + ")";
                        }
                        break;
                }
            }
            return text;
        }

        public static string ResolveDescription(Empire empire, BuiltObjectMission mission)
        {
            string empty = string.Empty;
            if (empire == null || mission == null || mission.Type == BuiltObjectMissionType.Undefined)
            {
                return "(" + TextResolver.GetText("No mission") + ")";
            }
            string text = string.Empty;
            string text2 = string.Empty;
            if (mission.TargetSector != null)
            {
                text = string.Format(TextResolver.GetText("Sector X"), ResolveSectorDescription(mission.TargetSector));
            }
            else if (mission.TargetShipGroup != null)
            {
                text = mission.TargetShipGroup.Name;
            }
            else if (mission.TargetBuiltObject != null)
            {
                text = mission.TargetBuiltObject.Name;
            }
            else if (mission.TargetHabitat != null)
            {
                Habitat targetHabitat = mission.TargetHabitat;
                if (targetHabitat != null)
                {
                    text2 = ResolveDescription(targetHabitat.Category);
                    SystemVisibilityStatus systemVisibilityStatus = empire.CheckSystemVisibilityStatus(targetHabitat.SystemIndex);
                    text = ((systemVisibilityStatus != SystemVisibilityStatus.Unexplored) ? targetHabitat.Name : string.Format(TextResolver.GetText("Unknown X"), text2));
                }
            }
            else if (mission.TargetCreature != null)
            {
                text = mission.TargetCreature.Name;
            }
            switch (mission.Type)
            {
                case BuiltObjectMissionType.Undeploy:
                    empty = TextResolver.GetText("Undeploy");
                    break;
                case BuiltObjectMissionType.Deploy:
                    empty = string.Format(TextResolver.GetText("Deploy at X"), text);
                    break;
                case BuiltObjectMissionType.Attack:
                    empty = string.Format(TextResolver.GetText("Attack X"), text);
                    break;
                case BuiltObjectMissionType.Capture:
                    empty = string.Format(TextResolver.GetText("Capture X"), text);
                    break;
                case BuiltObjectMissionType.Raid:
                    empty = string.Format(TextResolver.GetText("Raid X"), text);
                    break;
                case BuiltObjectMissionType.Bombard:
                    empty = string.Format(TextResolver.GetText("Bombard X"), text);
                    break;
                case BuiltObjectMissionType.Blockade:
                    empty = string.Format(TextResolver.GetText("Blockade X"), text);
                    break;
                case BuiltObjectMissionType.Build:
                case BuiltObjectMissionType.BuildRepair:
                    if (mission.Design != null)
                    {
                        string text8 = string.Empty;
                        if (mission.TargetHabitat == null && mission.TargetBuiltObject == null && mission.TargetShipGroup == null)
                        {
                            if (mission.X > -2E+09f && mission.Y > -2E+09f)
                            {
                                text8 = mission.X.ToString("0,K") + "," + mission.Y.ToString("0,K");
                            }
                        }
                        else
                        {
                            if (mission.TargetHabitat != null)
                            {
                                text8 = text2 + " ";
                            }
                            text8 += text;
                        }
                        empty = string.Format(TextResolver.GetText("Build BASETYPE at X"), ResolveDescription(mission.Design.SubRole), text8);
                    }
                    else
                    {
                        BuiltObject secondaryTargetBuiltObject = mission.SecondaryTargetBuiltObject;
                        empty = string.Format(TextResolver.GetText("Repair X"), ResolveDescription(secondaryTargetBuiltObject.SubRole));
                    }
                    break;
                case BuiltObjectMissionType.Colonize:
                    {
                        string text9 = string.Empty;
                        if (mission.TargetHabitat != null)
                        {
                            text9 = text2 + " ";
                        }
                        text9 += text;
                        empty = string.Format(TextResolver.GetText("Colonize X"), text9);
                        break;
                    }
                case BuiltObjectMissionType.Escape:
                    empty = string.Format(TextResolver.GetText("Escape from X"), text);
                    break;
                case BuiltObjectMissionType.Escort:
                    empty = string.Format(TextResolver.GetText("Escort X"), text);
                    break;
                case BuiltObjectMissionType.Explore:
                    {
                        string text7 = string.Empty;
                        if (mission.TargetHabitat != null)
                        {
                            text7 = text2 + " ";
                        }
                        text7 += text;
                        empty = string.Format(TextResolver.GetText("Explore X"), text7);
                        break;
                    }
                case BuiltObjectMissionType.ExtractResources:
                    {
                        string text6 = string.Empty;
                        if (mission.TargetHabitat != null)
                        {
                            text6 = text6 + text2 + " ";
                        }
                        text6 += text;
                        empty = string.Format(TextResolver.GetText("Mine X"), text6);
                        break;
                    }
                case BuiltObjectMissionType.Hold:
                    {
                        string text4 = string.Empty;
                        if (mission.TargetHabitat == null && mission.TargetBuiltObject == null && mission.TargetShipGroup == null)
                        {
                            if (mission.X > -2E+09f && mission.Y > -2E+09f)
                            {
                                text4 = text4 + mission.X.ToString("0,K") + "," + mission.Y.ToString("0,K");
                            }
                        }
                        else
                        {
                            if (mission.TargetHabitat != null)
                            {
                                text4 = text4 + text2 + " ";
                            }
                            text4 += text;
                        }
                        empty = string.Format(TextResolver.GetText("Hold at X"), text4);
                        break;
                    }
                case BuiltObjectMissionType.LoadTroops:
                    empty = string.Format(TextResolver.GetText("Load Troops at X"), text);
                    if (string.IsNullOrEmpty(text))
                    {
                        empty = TextResolver.GetText("Load Troops");
                    }
                    break;
                case BuiltObjectMissionType.Patrol:
                    {
                        string empty3 = string.Empty;
                        if (mission.TargetHabitat != null)
                        {
                            if (mission.TargetHabitat.Category == HabitatCategoryType.Star || mission.TargetHabitat.Category == HabitatCategoryType.GasCloud)
                            {
                                SystemVisibilityStatus systemVisibilityStatus2 = empire.CheckSystemVisibilityStatus(mission.TargetHabitat.SystemIndex);
                                empty3 = ((systemVisibilityStatus2 != SystemVisibilityStatus.Unexplored) ? (mission.TargetHabitat.Name + " " + TextResolver.GetText("system")) : TextResolver.GetText("Unknown system"));
                            }
                            else
                            {
                                empty3 = text;
                            }
                        }
                        else
                        {
                            empty3 = text;
                        }
                        empty = string.Format(TextResolver.GetText("Patrol X"), empty3);
                        break;
                    }
                case BuiltObjectMissionType.Refuel:
                    empty = string.Format(TextResolver.GetText("Refuel at X"), text);
                    break;
                case BuiltObjectMissionType.Rescue:
                    empty = string.Format(TextResolver.GetText("Rescue X"), text);
                    break;
                case BuiltObjectMissionType.Repair:
                    empty = string.Format(TextResolver.GetText("Repair at X"), text);
                    break;
                case BuiltObjectMissionType.Retire:
                    empty = string.Format(TextResolver.GetText("Retire at X"), text);
                    break;
                case BuiltObjectMissionType.Retrofit:
                    empty = string.Format(TextResolver.GetText("Retrofit at X"), text);
                    break;
                case BuiltObjectMissionType.Transport:
                    if (mission.Cargo != null && mission.Cargo.Count > 0)
                    {
                        string text5 = string.Empty;
                        for (int i = 0; i < mission.Cargo.Count; i++)
                        {
                            Cargo cargo = mission.Cargo[i];
                            text5 = ((cargo.CommodityResource != null) ? (text5 + cargo.CommodityResource.Name) : ((cargo.CommodityComponent == null) ? (text5 + TextResolver.GetText("unknown cargo")) : (text5 + cargo.CommodityComponent.Name)));
                            if (i < mission.Cargo.Count - 1)
                            {
                                text5 += ", ";
                            }
                        }
                        empty = string.Format(TextResolver.GetText("Transport X"), text5);
                    }
                    else if (mission.Population != null && mission.Population.Count > 0)
                    {
                        string empty2 = string.Empty;
                        empty = string.Format(arg0: (mission.Population.TotalAmount < 1000000) ? TextResolver.GetText("Tourists") : ((mission.SecondaryTargetHabitat == null) ? TextResolver.GetText("Passengers") : TextResolver.GetText("Migrants")), format: TextResolver.GetText("Transport X"));
                    }
                    else
                    {
                        empty = string.Format(TextResolver.GetText("Transport X"), TextResolver.GetText("nothing"));
                    }
                    break;
                case BuiltObjectMissionType.UnloadTroops:
                    empty = string.Format(TextResolver.GetText("Unload Troops at X"), text);
                    break;
                case BuiltObjectMissionType.Waypoint:
                    {
                        string arg = string.Empty;
                        if (mission.TargetHabitat == null && mission.TargetBuiltObject == null && mission.TargetShipGroup == null)
                        {
                            if (mission.X > -2E+09f && mission.Y > -2E+09f)
                            {
                                arg = mission.X.ToString("0,K") + "," + mission.Y.ToString("0,K");
                            }
                        }
                        else
                        {
                            arg = text;
                        }
                        empty = string.Format(TextResolver.GetText("Waypoint at X"), arg);
                        break;
                    }
                case BuiltObjectMissionType.MoveAndWait:
                    {
                        string arg5 = string.Empty;
                        if (mission.TargetBuiltObject == null && mission.TargetHabitat == null && mission.TargetShipGroup == null)
                        {
                            if (mission.X > -2E+09f && mission.Y > -2E+09f)
                            {
                                arg5 = mission.X.ToString("0,K") + "," + mission.Y.ToString("0,K");
                            }
                        }
                        else
                        {
                            arg5 = text;
                        }
                        empty = string.Format(TextResolver.GetText("Wait at X"), arg5);
                        break;
                    }
                case BuiltObjectMissionType.WaitAndAttack:
                    {
                        string arg4 = string.Empty;
                        if (mission.TargetHabitat == null && mission.TargetBuiltObject == null && mission.TargetShipGroup == null)
                        {
                            if (mission.X > -2E+09f && mission.Y > -2E+09f)
                            {
                                arg4 = mission.X.ToString("0,K") + "," + mission.Y.ToString("0,K");
                            }
                        }
                        else
                        {
                            arg4 = text;
                        }
                        empty = string.Format(TextResolver.GetText("Assemble and attack X"), arg4);
                        break;
                    }
                case BuiltObjectMissionType.WaitAndBombard:
                    {
                        string arg2 = string.Empty;
                        if (mission.TargetHabitat == null && mission.TargetBuiltObject == null && mission.TargetShipGroup == null)
                        {
                            if (mission.X > -2E+09f && mission.Y > -2E+09f)
                            {
                                arg2 = mission.X.ToString("0,K") + "," + mission.Y.ToString("0,K");
                            }
                        }
                        else
                        {
                            arg2 = text;
                        }
                        empty = string.Format(TextResolver.GetText("Assemble and bombard X"), arg2);
                        break;
                    }
                case BuiltObjectMissionType.Move:
                    {
                        string text3 = string.Empty;
                        if (mission.TargetHabitat == null && mission.TargetBuiltObject == null && mission.TargetShipGroup == null)
                        {
                            if (mission.X > -2E+09f && mission.Y > -2E+09f)
                            {
                                text3 = mission.X.ToString("0,K") + "," + mission.Y.ToString("0,K");
                            }
                        }
                        else
                        {
                            if (mission.TargetHabitat != null)
                            {
                                text3 = text2 + " ";
                            }
                            text3 += text;
                        }
                        empty = string.Format(TextResolver.GetText("Move to X"), text3);
                        break;
                    }
                default:
                    empty = "(" + TextResolver.GetText("No mission") + ")";
                    break;
            }
            return empty;
        }

        public ComponentList ResolveComponentsThatUseResource(Resource resource)
        {
            ComponentList componentList = new ComponentList();
            ComponentDefinition[] componentDefinitionsStatic = ComponentDefinitionsStatic;
            foreach (ComponentDefinition componentDefinition in componentDefinitionsStatic)
            {
                if (componentDefinition.ComponentID == 106)
                {
                    continue;
                }
                foreach (ComponentResource requiredResource in componentDefinition.RequiredResources)
                {
                    if (requiredResource.ResourceID == resource.ResourceID)
                    {
                        componentList.Add(new Component(componentDefinition.ComponentID));
                    }
                }
            }
            return componentList;
        }

        public ResourceList ShowAvailableRestrictedResourcesForEmpireSelfSupplied(Empire empire)
        {
            ResourceList resourceList = new ResourceList();
            ResourceList supplied = empire.DetermineResourcesEmpireSupplies();
            for (int i = 0; i < ResourceSystem.SuperLuxuryResources.Count; i++)
            {
                Resource resource = new Resource(ResourceSystem.SuperLuxuryResources[i].ResourceID);
                resourceList = UpdateResourcesFromSuppliedResources(resourceList, resource, supplied);
            }
            return resourceList;
        }

        public ResourceList ShowAvailableRestrictedResourcesForEmpire(Empire empire)
        {
            ResourceList resourceList = new ResourceList();
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire2 = Empires[i];
                if (empire2 == empire)
                {
                    ResourceList supplied = empire.DetermineResourcesEmpireSupplies();
                    for (int j = 0; j < ResourceSystem.SuperLuxuryResources.Count; j++)
                    {
                        Resource resource = new Resource(ResourceSystem.SuperLuxuryResources[j].ResourceID);
                        resourceList = UpdateResourcesFromSuppliedResources(resourceList, resource, supplied);
                    }
                }
                else
                {
                    DiplomaticRelation diplomaticRelation = empire2.ObtainDiplomaticRelation(empire);
                    if (diplomaticRelation.Type != 0 && diplomaticRelation.SupplyRestrictedResources)
                    {
                        ResourceList supplied2 = empire2.DetermineResourcesEmpireSupplies();
                        for (int k = 0; k < ResourceSystem.SuperLuxuryResources.Count; k++)
                        {
                            Resource resource2 = new Resource(ResourceSystem.SuperLuxuryResources[k].ResourceID);
                            resourceList = UpdateResourcesFromSuppliedResources(resourceList, resource2, supplied2);
                        }
                    }
                }
                if (resourceList.Count >= 3)
                {
                    break;
                }
            }
            return resourceList;
        }

        private ResourceList UpdateResourcesFromSuppliedResources(ResourceList resources, Resource resource, ResourceList supplied)
        {
            if (supplied.Contains(resource) && !resources.Contains(resource))
            {
                resources.Add(resource);
            }
            return resources;
        }

        public ResourceList ShowCheapestLuxuryResources()
        {
            ResourceList resourceList = new ResourceList();
            for (int i = 0; i < ResourceSystem.Resources.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystem.Resources[i];
                if (resourceDefinition.Group == ResourceGroup.Luxury && resourceDefinition.SuperLuxuryBonusAmount <= 0)
                {
                    Resource resource = new Resource(resourceDefinition.ResourceID);
                    resource.SortTag = ResourceCurrentPrices[i];
                    resourceList.Add(resource);
                }
            }
            resourceList.Sort();
            return resourceList;
        }

        public Resource SelectRandomLuxuryResource()
        {
            Resource resource = new Resource(0);
            bool flag = false;
            int iterationCount = 0;
            while (ConditionCheckLimit(!flag, 50, ref iterationCount))
            {
                int index = Rnd.Next(0, ResourceSystem.LuxuryResources.Count);
                resource = new Resource(ResourceSystem.LuxuryResources[index].ResourceID);
                flag = true;
                if (resource.IsRestrictedResource || resource.ColonyManufacturingLevel > 0)
                {
                    flag = false;
                }
            }
            return resource;
        }

        public void CalculateEmpireWarValue(Empire empire, out int builtObjectWarValue, out int colonyWarValue)
        {
            builtObjectWarValue = 0;
            colonyWarValue = 0;
            for (int i = 0; i < empire.BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = empire.BuiltObjects[i];
                builtObjectWarValue += CalculateWarValue(builtObject);
            }
            for (int j = 0; j < empire.PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject2 = empire.PrivateBuiltObjects[j];
                builtObjectWarValue += CalculateWarValue(builtObject2);
            }
            for (int k = 0; k < empire.Colonies.Count; k++)
            {
                Habitat habitat = empire.Colonies[k];
                colonyWarValue += CalculateWarValue(habitat);
            }
        }

        public int CalculateWarValue(Fighter fighter)
        {
            int num = 0;
            return 1;
        }

        public int CalculateWarValue(BuiltObject builtObject)
        {
            int num = 0;
            switch (builtObject.Role)
            {
                case BuiltObjectRole.Military:
                    num = builtObject.Design.FirepowerRaw;
                    break;
                case BuiltObjectRole.Base:
                    switch (builtObject.SubRole)
                    {
                        case BuiltObjectSubRole.SmallSpacePort:
                        case BuiltObjectSubRole.MediumSpacePort:
                        case BuiltObjectSubRole.LargeSpacePort:
                            num = ((builtObject.ParentHabitat == null) ? (builtObject.Design.Size / 5) : (builtObject.ParentHabitat.StrategicValue / 200));
                            break;
                        default:
                            num = builtObject.Design.Size / 5;
                            break;
                    }
                    break;
                default:
                    num = builtObject.Design.Size / 20;
                    break;
            }
            if (builtObject.UnbuiltComponentCount > 0)
            {
                double num2 = (double)builtObject.UnbuiltComponentCount / (double)builtObject.Components.Count;
                num = Math.Max(1, (int)((double)num / 2.0 - (double)num * num2));
            }
            return num;
        }

        public int CalculateWarValue(Habitat habitat)
        {
            int result = 0;
            if (habitat.Empire != null && habitat.Empire != IndependentEmpire)
            {
                result = habitat.StrategicValue / 50;
            }
            return result;
        }

        public void InflictWarDamage(Empire inflictingEmpire, Fighter target)
        {
            if (target.Empire != null)
            {
                DiplomaticRelation diplomaticRelation = target.Empire.DiplomaticRelations[inflictingEmpire];
                if (diplomaticRelation != null)
                {
                    diplomaticRelation.WarDamageBuiltObject += CalculateWarValue(target);
                }
            }
        }

        public void InflictWarDamage(Empire inflictingEmpire, BuiltObject target)
        {
            if (target.Empire != null)
            {
                DiplomaticRelation diplomaticRelation = target.Empire.DiplomaticRelations[inflictingEmpire];
                if (diplomaticRelation != null)
                {
                    diplomaticRelation.WarDamageBuiltObject += CalculateWarValue(target);
                }
            }
        }

        public void InflictWarDamage(Empire inflictingEmpire, Habitat target)
        {
            if (target.Empire != null && target.Empire != IndependentEmpire)
            {
                DiplomaticRelation diplomaticRelation = target.Empire.DiplomaticRelations[inflictingEmpire];
                if (diplomaticRelation != null)
                {
                    diplomaticRelation.WarDamageColony += CalculateWarValue(target);
                }
            }
        }

        private string GenerateResortBaseName(Habitat habitat)
        {
            string empty = string.Empty;
            string[] array = new string[5] { "Royal", "Holiday", "Luxury", "Grand", "Horizon" };
            string[] array2 = new string[10] { "Resort", "Hotel", "Encounter", "Casino", "Retreat", "Stopover", "Lounge", "Lodge", "Club", "Palace" };
            if (habitat != null && Rnd.Next(0, 3) > 0)
            {
                if (!string.IsNullOrEmpty(habitat.ScenicFeature))
                {
                    if (habitat.ScenicFeature.Length < 26)
                    {
                        return habitat.ScenicFeature + " " + array2[Rnd.Next(0, array2.Length)];
                    }
                    return array[Rnd.Next(0, array.Length)] + " " + array2[Rnd.Next(0, array2.Length)];
                }
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                return habitat2.Name + " " + array2[Rnd.Next(0, array2.Length)];
            }
            return array[Rnd.Next(0, array.Length)] + " " + array2[Rnd.Next(0, array2.Length)];
        }

        public BuiltObjectList FastFindBasesInSystem(Empire empire, Habitat systemStar)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            if (systemStar != null && empire != null)
            {
                if (empire.BuiltObjects != null)
                {
                    for (int i = 0; i < empire.BuiltObjects.Count; i++)
                    {
                        BuiltObject builtObject = empire.BuiltObjects[i];
                        if (builtObject != null && !builtObject.HasBeenDestroyed && builtObject.Role == BuiltObjectRole.Base && builtObject.NearestSystemStar == systemStar)
                        {
                            builtObjectList.Add(builtObject);
                        }
                    }
                }
                if (empire.PrivateBuiltObjects != null)
                {
                    for (int j = 0; j < empire.PrivateBuiltObjects.Count; j++)
                    {
                        BuiltObject builtObject2 = empire.PrivateBuiltObjects[j];
                        if (builtObject2 != null && !builtObject2.HasBeenDestroyed && builtObject2.Role == BuiltObjectRole.Base && builtObject2.NearestSystemStar == systemStar)
                        {
                            builtObjectList.Add(builtObject2);
                        }
                    }
                }
            }
            return builtObjectList;
        }

        public bool FastTestShipInOwnSystem(BuiltObject builtObject)
        {
            if (builtObject.NearestSystemStar != null && Systems[builtObject.NearestSystemStar.SystemIndex].DominantEmpire != null && Systems[builtObject.NearestSystemStar.SystemIndex].DominantEmpire.Empire == builtObject.Empire)
            {
                return true;
            }
            return false;
        }

        public bool FastTestShipInColonizedSystem(BuiltObject builtObject)
        {
            if (builtObject.NearestSystemStar != null && Systems[builtObject.NearestSystemStar.SystemIndex].DominantEmpire != null && Systems[builtObject.NearestSystemStar.SystemIndex].DominantEmpire.Empire != null)
            {
                return true;
            }
            return false;
        }

        public BuiltObject FastFindNearestResearchFacility(int x, int y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.ResearchFacilities.Count; i++)
            {
                BuiltObject builtObject = empire.ResearchFacilities[i];
                if (builtObject != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestMonitoringStation(int x, int y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.LongRangeScanners.Count; i++)
            {
                BuiltObject builtObject = empire.LongRangeScanners[i];
                if (builtObject != null && builtObject.Role == BuiltObjectRole.Base && (builtObject.ParentHabitat == null || builtObject.ParentHabitat.Empire == null || builtObject.ParentHabitat.Empire == IndependentEmpire))
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestLongRangeScannerBase(int x, int y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.LongRangeScanners.Count; i++)
            {
                BuiltObject builtObject = empire.LongRangeScanners[i];
                if (builtObject != null && builtObject.Role == BuiltObjectRole.Base)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestLongRangeScanner(int x, int y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.LongRangeScanners.Count; i++)
            {
                BuiltObject builtObject = empire.LongRangeScanners[i];
                if (builtObject != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestSpacePort(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.SpacePorts.Count; i++)
            {
                BuiltObject builtObject = empire.SpacePorts[i];
                if (builtObject != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num && builtObject.IsSpacePort)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public void DetermineResupplyShipLocationByDestination(BuiltObject resupplyShip, out double x, out double y)
        {
            x = resupplyShip.Xpos;
            y = resupplyShip.Ypos;
            if (resupplyShip.IsFunctional && resupplyShip.Mission != null && resupplyShip.Mission.Type == BuiltObjectMissionType.Deploy)
            {
                Point point = resupplyShip.Mission.ResolveTargetCoordinates(resupplyShip.Mission);
                x = point.X;
                y = point.Y;
            }
            else if (resupplyShip.IsDeployed && resupplyShip.IsFunctional)
            {
                x = resupplyShip.Xpos;
                y = resupplyShip.Ypos;
            }
        }

        public BuiltObject FastFindNearestResupplyShipByDestination(double x, double y, Empire empire, BuiltObject resupplyShipToExclude)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            double x2 = 0.0;
            double y2 = 0.0;
            for (int i = 0; i < empire.ResupplyShips.Count; i++)
            {
                BuiltObject builtObject = empire.ResupplyShips[i];
                if (builtObject != null && builtObject != resupplyShipToExclude && (builtObject.IsDeployed || (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Deploy)))
                {
                    DetermineResupplyShipLocationByDestination(builtObject, out x2, out y2);
                    double num2 = CalculateDistanceSquared(x, y, x2, y2);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestResupplyShip(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.ResupplyShips.Count; i++)
            {
                BuiltObject builtObject = empire.ResupplyShips[i];
                if (builtObject != null && builtObject.IsDeployed && builtObject.IsFunctional)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestOtherSpacePort(int x, int y, Empire empire, BuiltObjectList spacePortsToExclude)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.SpacePorts.Count; i++)
            {
                BuiltObject builtObject = empire.SpacePorts[i];
                if (builtObject != null && !spacePortsToExclude.Contains(builtObject))
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num && builtObject.IsSpacePort)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestOtherSpacePort(int x, int y, Empire empire, BuiltObject spacePortToExclude)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.SpacePorts.Count; i++)
            {
                BuiltObject builtObject = empire.SpacePorts[i];
                if (builtObject != null && builtObject != spacePortToExclude)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num && builtObject.IsSpacePort)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObject FastFindNearestAvailableMilitaryShip(double x, double y, Empire empire)
        {
            return FastFindNearestAvailableMilitaryShip(x, y, empire, 1, includeUnAutomatedShips: true);
        }

        public BuiltObject FastFindNearestAvailableMilitaryShip(double x, double y, Empire empire, int minimumFirepower, bool includeUnAutomatedShips)
        {
            return FastFindNearestAvailableMilitaryShip(x, y, empire, minimumFirepower, includeUnAutomatedShips, allowShipsInFleets: true);
        }

        public BuiltObject FastFindNearestAvailableMilitaryShip(double x, double y, Empire empire, int minimumFirepower, bool includeUnAutomatedShips, bool allowShipsInFleets)
        {
            return FastFindNearestAvailableMilitaryShip(x, y, empire, minimumFirepower, includeUnAutomatedShips, allowShipsInFleets, includeBusyShips: true);
        }

        public BuiltObject FastFindNearestAvailableMilitaryShip(double x, double y, Empire empire, int minimumFirepower, bool includeUnAutomatedShips, bool allowShipsInFleets, bool includeBusyShips)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = empire.BuiltObjects[i];
                if (builtObject == null || builtObject.Role != BuiltObjectRole.Military || builtObject.FirepowerRaw < minimumFirepower || builtObject.UnbuiltComponentCount > 0 || builtObject.BuiltAt != null || builtObject.SubRole == BuiltObjectSubRole.TroopTransport || builtObject.SubRole == BuiltObjectSubRole.ResupplyShip || !builtObject.IsFunctional || (!allowShipsInFleets && builtObject.ShipGroup != null) || (!builtObject.IsAutoControlled && !includeUnAutomatedShips))
                {
                    continue;
                }
                bool flag = false;
                if (builtObject.Mission != null && (builtObject.Mission.Type == BuiltObjectMissionType.Attack || builtObject.Mission.Priority == BuiltObjectMissionPriority.VeryHigh || builtObject.Mission.Priority == BuiltObjectMissionPriority.High))
                {
                    flag = true;
                }
                if (!includeBusyShips && builtObject.Mission != null && builtObject.Mission.Type != 0)
                {
                    if (builtObject.Mission.Type == BuiltObjectMissionType.Refuel || builtObject.Mission.Type == BuiltObjectMissionType.Repair || builtObject.Mission.Type == BuiltObjectMissionType.Retrofit)
                    {
                        flag = true;
                    }
                    if (builtObject.Mission.Priority == BuiltObjectMissionPriority.High || builtObject.Mission.Priority == BuiltObjectMissionPriority.VeryHigh || builtObject.Mission.Priority == BuiltObjectMissionPriority.Unavailable)
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public BuiltObjectList ObtainAvailableMilitaryShips(Empire empire, int minimumFirepower, bool includeUnAutomatedShips, bool allowShipsInFleets, bool includeBusyShips)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            for (int i = 0; i < empire.BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = empire.BuiltObjects[i];
                if (builtObject.Role != BuiltObjectRole.Military || builtObject.FirepowerRaw < minimumFirepower || builtObject.UnbuiltComponentCount > 0 || builtObject.BuiltAt != null || builtObject.SubRole == BuiltObjectSubRole.TroopTransport || builtObject.SubRole == BuiltObjectSubRole.ResupplyShip || !builtObject.IsFunctional || (!allowShipsInFleets && builtObject.ShipGroup != null) || (!builtObject.IsAutoControlled && !includeUnAutomatedShips))
                {
                    continue;
                }
                bool flag = false;
                if (builtObject.Mission != null && (builtObject.Mission.Type == BuiltObjectMissionType.Attack || builtObject.Mission.Priority == BuiltObjectMissionPriority.VeryHigh || builtObject.Mission.Priority == BuiltObjectMissionPriority.High))
                {
                    flag = true;
                }
                if (!includeBusyShips && builtObject.Mission != null && builtObject.Mission.Type != 0)
                {
                    if (builtObject.Mission.Type == BuiltObjectMissionType.Refuel || builtObject.Mission.Type == BuiltObjectMissionType.Repair || builtObject.Mission.Type == BuiltObjectMissionType.Retrofit)
                    {
                        flag = true;
                    }
                    if (builtObject.Mission.Priority == BuiltObjectMissionPriority.High || builtObject.Mission.Priority == BuiltObjectMissionPriority.VeryHigh || builtObject.Mission.Priority == BuiltObjectMissionPriority.Unavailable)
                    {
                        flag = true;
                    }
                }
                if (!flag)
                {
                    builtObjectList.Add(builtObject);
                }
            }
            return builtObjectList;
        }

        public BuiltObject FastFindNearestMiningStation(int x, int y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            for (int i = 0; i < empire.MiningStations.Count; i++)
            {
                BuiltObject builtObject = empire.MiningStations[i];
                if (builtObject != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public bool DetermineEmpireColonyNearPoint(double x, double y, Empire empire, double maximumDistance)
        {
            Habitat habitat = FastFindNearestColony((int)x, (int)y, empire, 0);
            if (habitat != null)
            {
                double num = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
                if (num < maximumDistance)
                {
                    return true;
                }
            }
            return false;
        }

        public void FindLonelyNebulaLocation(out double x, out double y, GalaxyLocationEffectType effect)
        {
            FindLonelyNebulaLocation(out x, out y, effect, GalaxyLocationEffectType.LightningDamage);
        }

        public void FindLonelyNebulaLocation(out double x, out double y, GalaxyLocationEffectType effect, GalaxyLocationEffectType effectToExclude)
        {
            x = 100000.0 + Rnd.NextDouble() * (double)(SizeX - 200000);
            y = 100000.0 + Rnd.NextDouble() * (double)(SizeY - 200000);
            int num = 0;
            bool flag = false;
            while (!flag && num < 100)
            {
                int index = Rnd.Next(0, GalaxyLocations.Count);
                GalaxyLocation galaxyLocation = GalaxyLocations[index];
                if (effectToExclude != 0 && galaxyLocation.Effect == effectToExclude)
                {
                    flag = false;
                    continue;
                }
                if (effect != 0)
                {
                    if (galaxyLocation.Effect == effect && CheckNebulaLocation(galaxyLocation, out x, out y))
                    {
                        flag = true;
                    }
                }
                else if (CheckNebulaLocation(galaxyLocation, out x, out y))
                {
                    flag = true;
                }
                num++;
            }
        }

        private bool CheckNebulaLocation(GalaxyLocation location, out double x, out double y)
        {
            x = 100000.0 + Rnd.NextDouble() * (double)(SizeX - 200000);
            y = 100000.0 + Rnd.NextDouble() * (double)(SizeY - 200000);
            double num = (double)location.Xpos + (double)location.Width / 2.0;
            double num2 = (double)location.Ypos + (double)location.Height / 2.0;
            if (!CheckNearEmpireColony(num, num2, 250000.0) && !CheckNearBuiltObject(num, num2, 150000.0) && !CheckNearSystem(num, num2, 60000.0) && !CheckNearSpecialGalaxyLocation(num, num2, 1000000.0))
            {
                SelectRelativeParkingPoint(100000.0, out x, out y);
                x += num;
                y += num2;
                return true;
            }
            return false;
        }

        private bool CheckNearSpecialGalaxyLocation(double x, double y, double minimumRange)
        {
            for (int i = 0; i < GalaxyLocations.Count; i++)
            {
                if (GalaxyLocations[i].Type == GalaxyLocationType.DebrisField || GalaxyLocations[i].Type == GalaxyLocationType.PlanetDestroyer || GalaxyLocations[i].Type == GalaxyLocationType.RestrictedArea)
                {
                    double x2 = (double)GalaxyLocations[i].Xpos + (double)(GalaxyLocations[i].Width / 2f);
                    double y2 = (double)GalaxyLocations[i].Ypos + (double)(GalaxyLocations[i].Height / 2f);
                    double num = CalculateDistance(x, y, x2, y2);
                    if (num < minimumRange)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool CheckNearSystem(double x, double y, double minimumRange)
        {
            Habitat habitat = FastFindNearestSystemWithPlanets(x, y);
            if (habitat != null)
            {
                double num = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
                if (num < minimumRange)
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckNearBuiltObject(double x, double y, double minimumRange)
        {
            BuiltObject builtObject = FindNearestBuiltObject((int)x, (int)y, null);
            if (builtObject != null)
            {
                double num = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
                if (num < minimumRange)
                {
                    return true;
                }
            }
            return false;
        }

        public bool CheckInStorm(double x, double y)
        {
            GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsAtPoint(x, y, GalaxyLocationType.NebulaCloud);
            for (int i = 0; i < galaxyLocationList.Count; i++)
            {
                GalaxyLocation galaxyLocation = galaxyLocationList[i];
                if (galaxyLocation != null && galaxyLocation.Effect == GalaxyLocationEffectType.LightningDamage)
                {
                    return true;
                }
            }
            return false;
        }

        private bool CheckNearEmpireColony(double x, double y, double minimumRange)
        {
            Habitat habitat = FindNearestColony(x, y, null, 0);
            if (habitat != null)
            {
                double num = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
                if (num < minimumRange)
                {
                    return true;
                }
            }
            return false;
        }

        public void GenerateSpecialZoneResearchFacility()
        {
            FindLonelyNebulaLocation(out var x, out var y, GalaxyLocationEffectType.None);
            int num = Rnd.Next(0, 3);
            ComponentType labComponentType = ComponentType.LabsWeaponsLab;
            string namePart = string.Empty;
            switch (num)
            {
                case 0:
                    labComponentType = ComponentType.LabsWeaponsLab;
                    namePart = TextResolver.GetText("Weapons");
                    break;
                case 1:
                    labComponentType = ComponentType.LabsHighTechLab;
                    namePart = TextResolver.GetText("HighTech");
                    break;
                case 2:
                    labComponentType = ComponentType.LabsEnergyLab;
                    namePart = TextResolver.GetText("Energy");
                    break;
            }
            Design design = PlayerEmpire.GenerateResearchStationDesign(CurrentStarDate, labComponentType);
            int family = 0;
            switch (Rnd.Next(0, 2))
            {
                case 0:
                    family = ShipImageHelper.AncientHelpersFamily;
                    break;
                case 1:
                    family = ShipImageHelper.ShakturiAlliesFamily;
                    break;
            }
            design.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design.SubRole, aged: false);
            string name = GenerateResearchStationName(x, y, namePart);
            BuiltObject builtObject = GenerateStoryAbandonedBuiltObject(x, y, design, name);
            builtObject.EncounterTechAdvanceCount = 1;
            string name2 = GenerateRestrictedZoneName(x, y, new string[4]
            {
            TextResolver.GetText("Test Site"),
            TextResolver.GetText("Special Projects Area"),
            TextResolver.GetText("Research Zone"),
            TextResolver.GetText("Experimental Area")
            });
            string text = TextResolver.GetText("You have entered a restricted area");
            int soundScheme = 2;
            if (Rnd.Next(0, 2) == 1)
            {
                soundScheme = 0;
            }
            GalaxyLocation galaxyLocation = GenerateRestrictedZone(name2, text, 2000.0, x, y, soundScheme);
            galaxyLocation.RelatedBuiltObject = builtObject;
        }

        private string GenerateResearchStationName(double x, double y, string namePart)
        {
            string empty = string.Empty;
            Habitat habitat = FastFindNearestSystemWithPlanets(x, y);
            empty = habitat.Name;
            if (!string.IsNullOrEmpty(namePart))
            {
                empty = empty + " " + namePart;
            }
            string[] array = new string[7]
            {
            TextResolver.GetText("Research Station"),
            TextResolver.GetText("Research Facility"),
            TextResolver.GetText("Research Outpost"),
            TextResolver.GetText("Station"),
            TextResolver.GetText("Facility"),
            TextResolver.GetText("Projects Facility"),
            TextResolver.GetText("Research Installation")
            };
            int num = Rnd.Next(0, array.Length);
            return empty + " " + array[num];
        }

        public void GenerateSpecialZoneSupplyDepot()
        {
            FindLonelyNebulaLocation(out var x, out var y, GalaxyLocationEffectType.None);
            int family = 0;
            switch (Rnd.Next(0, 2))
            {
                case 0:
                    family = ShipImageHelper.AncientHelpersFamily;
                    break;
                case 1:
                    family = ShipImageHelper.FreedomAllianceFamily;
                    break;
            }
            DesignSpecification designSpecification = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.MediumSpacePort).Clone();
            bool flag = false;
            foreach (DesignSpecificationComponentRule componentRule in designSpecification.ComponentRules)
            {
                if (componentRule.ComponentCategory == ComponentCategoryType.Reactor)
                {
                    componentRule.Amount = 3;
                }
                if (componentRule.ComponentType == ComponentType.StorageCargo)
                {
                    componentRule.Amount = 75;
                    flag = true;
                }
            }
            if (!flag)
            {
                designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 75));
            }
            Design design = PlayerEmpire.GenerateDesignFromSpec(designSpecification, 5.0);
            design.Empire = null;
            DesignSpecification bySubRole = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate);
            Design design2 = PlayerEmpire.GenerateDesignFromSpec(bySubRole, 4.0);
            DesignSpecification bySubRole2 = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer);
            Design design3 = PlayerEmpire.GenerateDesignFromSpec(bySubRole2, 4.0);
            DesignSpecification bySubRole3 = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser);
            Design design4 = PlayerEmpire.GenerateDesignFromSpec(bySubRole3, 4.0);
            design.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design.SubRole, aged: false);
            design2.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design2.SubRole, aged: false);
            design3.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design3.SubRole, aged: false);
            design4.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design4.SubRole, aged: false);
            double num = 0.0;
            double num2 = 0.0;
            string name = GenerateRestrictedZoneName(x, y, new string[2]
            {
            TextResolver.GetText("Supply Depot"),
            TextResolver.GetText("Supply Outpost")
            });
            BuiltObject builtObject = GenerateStoryAbandonedBuiltObject(x + num, y + num2, design, name);
            for (int i = 0; i < ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null)
                {
                    int amount = (int)(10000f * resourceDefinition.RelativeImportance);
                    builtObject.Cargo.Add(new Cargo(new Resource(resourceDefinition.ResourceID), amount, IndependentEmpire));
                }
            }
            builtObject.EncounterMoneyBonus = 20000;
            int num3 = Rnd.Next(3, 6);
            for (int j = 0; j < num3; j++)
            {
                int num4 = Rnd.Next(0, 3);
                Design design5 = null;
                switch (num4)
                {
                    case 0:
                        design5 = design2;
                        name = SelectRandomUniqueMilitaryShipName(null);
                        break;
                    case 1:
                        design5 = design3;
                        name = SelectRandomUniqueMilitaryShipName(null);
                        break;
                    case 2:
                        design5 = design4;
                        name = SelectRandomUniqueMilitaryShipName(null);
                        break;
                }
                num = Rnd.Next(-600, 600);
                num2 = Rnd.Next(-600, 600);
                GenerateStoryAbandonedBuiltObject(x + num, y + num2, design5, name);
            }
            string text = GenerateRestrictedZoneName(x, y, new string[3]
            {
            TextResolver.GetText("Supply Outpost"),
            TextResolver.GetText("Forward Supply Zone"),
            TextResolver.GetText("Strategic Reserve")
            });
            string message = string.Format(TextResolver.GetText("Welcome to the Supply Depot"), text);
            GalaxyLocation galaxyLocation = GenerateRestrictedZone(text, message, 2000.0, x, y, 3);
            galaxyLocation.RelatedBuiltObject = builtObject;
        }

        public void GenerateSpecialZoneWeaponsTestingRange()
        {
            FindLonelyNebulaLocation(out var x, out var y, GalaxyLocationEffectType.None);
            int family = 0;
            switch (Rnd.Next(0, 2))
            {
                case 0:
                    family = ShipImageHelper.ShakturiAlliesFamily;
                    break;
                case 1:
                    family = ShipImageHelper.FreedomAllianceFamily;
                    break;
            }
            DesignSpecification bySubRole = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.CapitalShip);
            Design design = PlayerEmpire.GenerateDesignFromSpec(bySubRole, 4.0);
            DesignSpecification bySubRole2 = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser);
            Design design2 = PlayerEmpire.GenerateDesignFromSpec(bySubRole2, 4.0);
            DesignSpecification bySubRole3 = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer);
            Design design3 = PlayerEmpire.GenerateDesignFromSpec(bySubRole3, 4.0);
            DesignSpecification bySubRole4 = DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate);
            Design design4 = PlayerEmpire.GenerateDesignFromSpec(bySubRole4, 4.0);
            design4.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design4.SubRole, aged: false);
            design3.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design3.SubRole, aged: false);
            design2.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design2.SubRole, aged: false);
            design.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design.SubRole, aged: false);
            BuiltObject builtObject = null;
            int num = Rnd.Next(5, 9);
            for (int i = 0; i < num; i++)
            {
                int num2 = Rnd.Next(0, 4);
                Design design5 = null;
                switch (num2)
                {
                    case 0:
                        design5 = design;
                        break;
                    case 1:
                        design5 = design2;
                        break;
                    case 2:
                        design5 = design3;
                        break;
                    case 3:
                        design5 = design4;
                        break;
                }
                double num3 = Rnd.Next(-1000, 1000);
                double num4 = Rnd.Next(-1000, 1000);
                string name = SelectRandomUniqueMilitaryShipName();
                builtObject = GenerateStoryAbandonedBuiltObject(x + num3, y + num4, design5, name);
                if (Rnd.Next(0, 4) > 0)
                {
                    int num5 = Rnd.Next(5, builtObject.Components.Count - 1);
                    num5 = Math.Max(1, (int)((double)num5 * 0.7));
                    for (int j = 0; j < num5; j++)
                    {
                        int index = Rnd.Next(0, builtObject.Components.Count);
                        builtObject.Components[index].Status = ComponentStatus.Damaged;
                    }
                    builtObject.ReDefine();
                }
                builtObject.CurrentFuel = (double)builtObject.FuelCapacity * 0.2 + Rnd.NextDouble() * 0.7 * (double)builtObject.FuelCapacity;
            }
            string name2 = GenerateRestrictedZoneName(x, y, new string[3]
            {
            TextResolver.GetText("Weapons Testing Range"),
            TextResolver.GetText("Test Zone"),
            TextResolver.GetText("Military Test Site")
            });
            string text = TextResolver.GetText("You have entered a military weapons test zone");
            GalaxyLocation galaxyLocation = GenerateRestrictedZone(name2, text, 3000.0, x, y, 3);
            galaxyLocation.RelatedBuiltObject = builtObject;
        }

        private string GenerateRestrictedZoneName(double x, double y, string[] suffixes)
        {
            string text = string.Empty;
            GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsAtPoint(x, y, GalaxyLocationType.NebulaCloud);
            foreach (GalaxyLocation item in galaxyLocationList)
            {
                if (!string.IsNullOrEmpty(item.Name))
                {
                    text = item.Name;
                    break;
                }
            }
            if (string.IsNullOrEmpty(text))
            {
                Habitat habitat = FastFindNearestSystemWithPlanets(x, y);
                text = habitat.Name;
            }
            if (suffixes != null)
            {
                string text2 = suffixes[Rnd.Next(0, suffixes.Length)];
                text = text + " " + text2;
            }
            return text;
        }

        public GalaxyLocation GenerateRestrictedZone(string name, string message, double size, double x, double y, int soundScheme)
        {
            double num = size / 2.0;
            GalaxyLocation galaxyLocation = new GalaxyLocation(name, GalaxyLocationType.RestrictedArea, x - num, y - num, size, size, -1);
            galaxyLocation.ShowName = true;
            galaxyLocation.Effect = GalaxyLocationEffectType.HyperjumpDisabled;
            galaxyLocation.Shape = GalaxyLocationShape.Circular;
            galaxyLocation.Message = message;
            galaxyLocation.SoundScheme = (short)soundScheme;
            GalaxyLocations.Add(galaxyLocation);
            AddGalaxyLocationIndex(galaxyLocation);
            return galaxyLocation;
        }

        public void FindLonelyDeepSpaceLocation(out double x, out double y)
        {
            Habitat habitat = FindLonelyHabitat();
            int iterationCount = 0;
            while (ConditionCheckLimit(habitat == null, 200, ref iterationCount))
            {
                habitat = FindLonelyHabitat();
            }
            if (habitat != null)
            {
                int num = 0;
                while (CheckNearEmpireColony(habitat.Xpos, habitat.Ypos, 300000.0) && num < 50)
                {
                    habitat = FindLonelyHabitat();
                    num++;
                }
                SelectRelativeParkingPoint(150000.0, out x, out y);
                x += habitat.Xpos;
                y += habitat.Ypos;
            }
            else
            {
                x = Rnd.NextDouble() * (double)SizeX;
                y = Rnd.NextDouble() * (double)SizeY;
            }
        }

        public Habitat FindLonelyHabitatGalacticEdge(RuinType ruinTypeToExclude)
        {
            return FindLonelyHabitat(0.85, 1.0, ruinTypeToExclude, HabitatType.Undefined);
        }

        public Habitat FindLonelyHabitatGalacticEdge(RuinType ruinTypeToExclude, HabitatType habitatTypeToExclude)
        {
            return FindLonelyHabitat(0.85, 1.0, ruinTypeToExclude, habitatTypeToExclude);
        }

        public Habitat FindLonelyHabitat(HabitatType habitatTypeToExclude)
        {
            Habitat habitat = null;
            int num = 0;
            bool flag = true;
            while ((habitat == null || !flag) && num < 50)
            {
                habitat = FindLonelyHabitat();
                if (habitatTypeToExclude != 0 && habitat.Type == habitatTypeToExclude)
                {
                    flag = false;
                }
                num++;
            }
            return habitat;
        }

        public Habitat FindLonelyHabitat()
        {
            return FindLonelyHabitat(0.0, 1.0, RuinType.Undefined, HabitatType.Undefined);
        }

        public Habitat FindLonelyHabitat(RuinType ruinTypeToExclude)
        {
            return FindLonelyHabitat(0.0, 1.0, ruinTypeToExclude, HabitatType.Undefined);
        }

        public Habitat FindLonelyHabitat(RuinType ruinTypeToExclude, HabitatType habitatTypeToExclude)
        {
            return FindLonelyHabitat(0.0, 1.0, ruinTypeToExclude, habitatTypeToExclude);
        }

        public Habitat FindLonelyHabitat(double galaxyRadiusMinimum, double galaxyRadiusMaximum, RuinType ruinTypeToExclude, HabitatType habitatTypeToExclude)
        {
            Habitat habitat = null;
            int num = 0;
            double range = 800000.0;
            double val = Math.Sqrt(1400.0) / Math.Sqrt(StarCount);
            val = Math.Max(1.0, Math.Min(val, 2.5));
            double num2 = 5000000.0;
            ObtainRandomGalaxyCoordinates(galaxyRadiusMinimum, galaxyRadiusMaximum, out var x, out var y);
            double num3 = 0.0;
            double x2 = x;
            double y2 = y;
            Habitat habitat2 = FindNearestColony(x, y, null, 0, includeIndependentColonies: false);
            if (habitat2 != null)
            {
                double num4 = CalculateDistance(x, y, habitat2.Xpos, habitat2.Ypos);
                bool flag = false;
                while ((num4 < num2 || !flag) && num < 120)
                {
                    ObtainRandomGalaxyCoordinates(galaxyRadiusMinimum, galaxyRadiusMaximum, out x, out y);
                    habitat = FindNearestHabitatEmptySystem(x, y);
                    if (habitat != null)
                    {
                        x = habitat.Xpos;
                        y = habitat.Ypos;
                    }
                    habitat2 = FindNearestColony(x, y, null, 0, includeIndependentColonies: false);
                    num4 = CalculateDistance(x, y, habitat2.Xpos, habitat2.Ypos);
                    flag = true;
                    if (ruinTypeToExclude != 0)
                    {
                        Habitat habitat3 = FindNearestRuin(x, y, ruinTypeToExclude);
                        if (habitat3 != null && habitat3.Ruin != null && habitat3.Ruin.Type == ruinTypeToExclude)
                        {
                            double num5 = CalculateDistance(x, y, habitat3.Xpos, habitat3.Ypos);
                            if (num5 < 2000000.0)
                            {
                                flag = false;
                            }
                        }
                    }
                    if (flag && num4 > num3)
                    {
                        GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsInRangeAtPoint(x, y, range, GalaxyLocationType.DebrisField);
                        GalaxyLocationList galaxyLocationList2 = DetermineGalaxyLocationsInRangeAtPoint(x, y, range, GalaxyLocationType.PlanetDestroyer);
                        if ((galaxyLocationList == null || galaxyLocationList.Count == 0) && (galaxyLocationList2 == null || galaxyLocationList2.Count == 0))
                        {
                            num3 = num4;
                            x2 = x;
                            y2 = y;
                        }
                    }
                    num++;
                    num2 *= 0.97;
                }
            }
            return FindNearestUncolonizedHabitatNonBarrenRock(x2, y2);
        }

        private Habitat FindNearestUncolonizedHabitatNonBarrenRock(double x, double y)
        {
            double num = double.MaxValue;
            double num2 = double.MaxValue;
            double num3 = double.MaxValue;
            Habitat habitat = FindNearestUncolonizedHabitat(x, y, HabitatType.Desert);
            Habitat habitat2 = FindNearestUncolonizedHabitat(x, y, HabitatType.Ice);
            Habitat habitat3 = FindNearestUncolonizedHabitat(x, y, HabitatType.Volcanic);
            if (habitat != null)
            {
                num = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
            }
            if (habitat2 != null)
            {
                num2 = CalculateDistanceSquared(x, y, habitat2.Xpos, habitat2.Ypos);
            }
            if (habitat3 != null)
            {
                num3 = CalculateDistanceSquared(x, y, habitat3.Xpos, habitat3.Ypos);
            }
            if (habitat3 != null && num3 < num && num3 < num2)
            {
                return habitat3;
            }
            if (habitat != null && num < num3 && num < num2)
            {
                return habitat;
            }
            if (habitat2 != null && num2 < num && num2 < num3)
            {
                return habitat2;
            }
            return FindLonelyHabitat(x, y);
        }

        public Habitat FindLonelyHabitat(double x, double y)
        {
            return FindLonelyHabitat(x, y, HabitatType.Undefined);
        }

        public Habitat FindLonelyHabitat(double x, double y, HabitatType habitatTypeToExclude)
        {
            Habitat habitat = FindNearestHabitatEmptySystem(x, y);
            if (habitat == null || (habitatTypeToExclude != 0 && habitat.Type == habitatTypeToExclude))
            {
                habitat = FindNearestUncolonizedHabitat(x, y, HabitatType.Desert);
            }
            if (habitat == null || (habitatTypeToExclude != 0 && habitat.Type == habitatTypeToExclude))
            {
                habitat = FindNearestUncolonizedHabitat(x, y, HabitatType.Ice);
            }
            if (habitat == null || (habitatTypeToExclude != 0 && habitat.Type == habitatTypeToExclude))
            {
                habitat = FindNearestUncolonizedHabitat(x, y, HabitatType.Volcanic);
            }
            return habitat;
        }

        public Habitat FindLonelyColonyLocation(Empire empire)
        {
            double xpos = empire.Capital.Xpos;
            double ypos = empire.Capital.Ypos;
            double num = Rnd.NextDouble() * 600000.0 - 300000.0;
            double num2 = Rnd.NextDouble() * 600000.0 - 300000.0;
            xpos += num;
            ypos += num2;
            xpos = Math.Max(0.0, Math.Min(SizeX, xpos));
            ypos = Math.Max(0.0, Math.Min(SizeY, ypos));
            Habitat habitat = FindNearestColonizableHabitatEmptySystem(xpos, ypos, empire);
            if (habitat == null)
            {
                habitat = FindNearestColonizableHabitatUnoccupiedSystem(xpos, ypos, empire);
            }
            if (habitat == null)
            {
                habitat = FindNearestColonizableHabitat(xpos, ypos, empire);
            }
            if (habitat == null)
            {
                habitat = FindNearestUncolonizedHabitat(xpos, ypos, HabitatType.Ice);
            }
            return habitat;
        }

        public Habitat FindNearestColonyInSystem(SystemInfo system, double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            if (system != null && system.Habitats != null)
            {
                for (int i = 0; i < system.Habitats.Count; i++)
                {
                    Habitat habitat = system.Habitats[i];
                    if (habitat != null && !habitat.HasBeenDestroyed && habitat.Empire != null && habitat.Population != null && habitat.Population.Count > 0)
                    {
                        double num2 = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
                        if (num2 < num)
                        {
                            result = habitat;
                            num = num2;
                        }
                    }
                }
            }
            return result;
        }

        public Habitat FastFindNearestColonyNotInSystem(double x, double y, Empire empire, int strategicValueThreshhold, Habitat colonyToExclude)
        {
            double num = double.MaxValue;
            Habitat result = null;
            Habitat habitat = DetermineHabitatSystemStar(colonyToExclude);
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                if (empire.Colonies[i].StrategicValue < strategicValueThreshhold)
                {
                    continue;
                }
                Habitat habitat2 = DetermineHabitatSystemStar(empire.Colonies[i]);
                if (colonyToExclude == null || habitat2 != habitat)
                {
                    double num2 = CalculateDistanceSquared(x, y, empire.Colonies[i].Xpos, empire.Colonies[i].Ypos);
                    if (num2 < num)
                    {
                        result = empire.Colonies[i];
                        num = num2;
                    }
                }
            }
            return result;
        }

        public Habitat FastFindNearestColony(double x, double y, Empire empire, int strategicValueThreshhold)
        {
            return FastFindNearestColony(x, y, empire, strategicValueThreshhold, null);
        }

        public Habitat FastFindNearestColony(double x, double y, Empire empire, int strategicValueThreshhold, Habitat colonyToExclude)
        {
            double num = double.MaxValue;
            Habitat result = null;
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                if (empire.Colonies[i].StrategicValue >= strategicValueThreshhold && empire.Colonies[i] != colonyToExclude)
                {
                    double num2 = CalculateDistanceSquared(x, y, empire.Colonies[i].Xpos, empire.Colonies[i].Ypos);
                    if (num2 < num)
                    {
                        result = empire.Colonies[i];
                        num = num2;
                    }
                }
            }
            return result;
        }

        public Habitat FastFindNearestColonyBelowApproval(double x, double y, Empire empire, double empireApprovalThreshold)
        {
            double num = double.MaxValue;
            Habitat result = null;
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                if (empire.Colonies[i].EmpireApprovalRating < empireApprovalThreshold)
                {
                    double num2 = CalculateDistanceSquared(x, y, empire.Colonies[i].Xpos, empire.Colonies[i].Ypos);
                    if (num2 < num)
                    {
                        result = empire.Colonies[i];
                        num = num2;
                    }
                }
            }
            return result;
        }

        public Habitat FindNearestInfectableColonyWithNoPlague(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestInfectableColonyInIndexWithNoPlague(x, y, index, out distance);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestInfectableColonyInIndexWithNoPlague(double x, double y, GalaxyIndex index, out double distance)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                Habitat habitat2 = habitatList[i];
                if (habitat2 == null || habitat2.Population == null || habitat2.Population.Count <= 0)
                {
                    continue;
                }
                bool flag = false;
                for (int j = 0; j < habitat2.Population.Count; j++)
                {
                    Population population = habitat2.Population[j];
                    if (population != null && population.Race != null && !population.Race.ImmuneToPlagues)
                    {
                        flag = true;
                        break;
                    }
                }
                if (flag && habitat2.PlagueId < 0 && habitat2.PlagueTimeRemaining <= 0f)
                {
                    double num = CalculateDistanceSquared(x, y, habitat2.Xpos, habitat2.Ypos);
                    if (num < distance)
                    {
                        distance = num;
                        habitat = habitat2;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FindNearestColony(double x, double y, Empire empire, int strategicValueThreshhold)
        {
            return FindNearestColony(x, y, empire, strategicValueThreshhold, includeIndependentColonies: true);
        }

        public Habitat FindNearestColony(double x, double y, Empire empire, int strategicValueThreshhold, bool includeIndependentColonies)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestColonyInIndex(x, y, index, out distance, empire, strategicValueThreshhold, includeIndependentColonies);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestColonyInIndex(double x, double y, GalaxyIndex index, out double distance, Empire empire, int strategicValueThreshhold, bool includeIndependentColonies)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if ((includeIndependentColonies || habitatList[i].Empire != IndependentEmpire) && (habitatList[i].Owner == empire || empire == null) && habitatList[i].Population.Count > 0 && habitatList[i].StrategicValue >= strategicValueThreshhold)
                {
                    double num = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                    if (num < distance)
                    {
                        distance = num;
                        habitat = habitatList[i];
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public bool IsStellarObjectDockable(StellarObject stellarObject, Empire dockingEmpire)
        {
            if (stellarObject is Habitat)
            {
                Habitat habitat = (Habitat)stellarObject;
                if (habitat.Population == null || habitat.Population.Count == 0)
                {
                    return false;
                }
            }
            Empire empire = stellarObject.Empire;
            if (empire != null && dockingEmpire != null)
            {
                if (empire.PirateEmpireBaseHabitat != null && dockingEmpire != empire && dockingEmpire != IndependentEmpire)
                {
                    return false;
                }
                if (empire == IndependentEmpire && dockingEmpire.PirateEmpireBaseHabitat != null)
                {
                    return true;
                }
                if (dockingEmpire == IndependentEmpire && empire.PirateEmpireBaseHabitat != null)
                {
                    return true;
                }
                if (dockingEmpire.PirateEmpireBaseHabitat != null || empire.PirateEmpireBaseHabitat != null)
                {
                    PirateRelation pirateRelation = dockingEmpire.ObtainPirateRelation(empire);
                    if (pirateRelation.Type != PirateRelationType.Protection)
                    {
                        return false;
                    }
                }
                else
                {
                    DiplomaticRelation diplomaticRelation = dockingEmpire.DiplomaticRelations[empire];
                    if (diplomaticRelation != null && (diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions || diplomaticRelation.Type == DiplomaticRelationType.War))
                    {
                        return false;
                    }
                }
            }
            else if (empire == null)
            {
                return false;
            }
            if (stellarObject is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)stellarObject;
                if (builtObject.IsBlockaded)
                {
                    return false;
                }
            }
            else if (stellarObject is Habitat)
            {
                Habitat habitat2 = (Habitat)stellarObject;
                if (habitat2.IsBlockaded)
                {
                    return false;
                }
            }
            return true;
        }

        public int CalculateMaximumOrderFulfillmentDistance(Habitat habitat)
        {
            return CalculateMaximumOrderFulfillmentDistance(habitat.Xpos, habitat.Ypos);
        }

        public int CalculateMaximumOrderFulfillmentDistance(BuiltObject builtObject)
        {
            return CalculateMaximumOrderFulfillmentDistance(builtObject.Xpos, builtObject.Ypos);
        }

        public int CalculateMaximumOrderFulfillmentDistance(double xPos, double yPos)
        {
            int num = 0;
            switch (GalaxyShape)
            {
                case GalaxyShape.Elliptical:
                    {
                        int x = (int)xPos / SectorSize;
                        int y = (int)yPos / SectorSize;
                        CorrectSectorCoords(ref x, ref y);
                        num = ((x <= 3 || x >= 8 || y <= 3 || y >= 8) ? (TypicalMaximumOrderFulfillmentDistance * 2) : TypicalMaximumOrderFulfillmentDistance);
                        break;
                    }
                case GalaxyShape.Irregular:
                case GalaxyShape.ClustersEven:
                case GalaxyShape.ClustersVaried:
                    num = TypicalMaximumOrderFulfillmentDistance;
                    break;
                case GalaxyShape.Ring:
                    num = TypicalMaximumOrderFulfillmentDistance * 2;
                    break;
                case GalaxyShape.Spiral:
                    {
                        int num2 = (int)CalculateDistance(SizeX / 2, SizeY / 2, yPos, yPos);
                        num = Math.Min(1, num2 / (SizeX / 4)) * TypicalMaximumOrderFulfillmentDistance;
                        break;
                    }
            }
            if (SectorWidth > 10 || SectorHeight > 10)
            {
                num = (int)((double)num * ((double)Math.Max(SectorWidth, SectorHeight) / 10.0));
            }
            return num;
        }

        public static double ReduceAngle(double currentangle)
        {
            if (currentangle >= Math.PI * 2.0)
            {
                currentangle -= Math.PI * 2.0;
            }
            return currentangle;
        }

        public static double IncreaseAngle(double currentangle)
        {
            if (currentangle <= Math.PI * 2.0)
            {
                currentangle += Math.PI * 2.0;
            }
            return currentangle;
        }

        public static void SetResearchComponentMaxTechPoints(int baseTechCost)
        {
            ResearchSystem.CalculateComponentMinMaxTechPoints(baseTechCost, ResearchNodeDefinitionsStatic);
        }

        public static void SetResearchRaceSpecialProjects(RaceList races)
        {
            for (int i = 0; i < ResearchNodeDefinitionsStatic.Count; i++)
            {
                if (ResearchNodeDefinitionsStatic[i].AllowedRaces != null)
                {
                    ResearchNodeDefinitionsStatic[i].AllowedRaces.Clear();
                }
                if (ResearchNodeDefinitionsStatic[i].DisallowedRaces != null)
                {
                    ResearchNodeDefinitionsStatic[i].DisallowedRaces.Clear();
                }
            }
            for (int j = 0; j < ResearchNodeDefinitionsStatic.Count; j++)
            {
                if (ResearchNodeDefinitionsStatic[j].SpecifiedRaces == null || ResearchNodeDefinitionsStatic[j].SpecifiedRaces.Count <= 0)
                {
                    continue;
                }
                for (int k = 0; k < ResearchNodeDefinitionsStatic[j].SpecifiedRaces.Count; k++)
                {
                    if (ResearchNodeDefinitionsStatic[j].SpecifiedRaces[k] == null)
                    {
                        continue;
                    }
                    Race race = races[ResearchNodeDefinitionsStatic[j].SpecifiedRaces[k].Name];
                    if (race != null)
                    {
                        if (ResearchNodeDefinitionsStatic[j].AllowedRaces == null)
                        {
                            ResearchNodeDefinitionsStatic[j].AllowedRaces = new RaceList();
                        }
                        if (!ResearchNodeDefinitionsStatic[j].AllowedRaces.Contains(race))
                        {
                            ResearchNodeDefinitionsStatic[j].AllowedRaces.Add(race);
                        }
                    }
                }
            }
            for (int l = 0; l < races.Count; l++)
            {
                if (races[l].SpecialComponent != null)
                {
                    for (int m = 0; m < ResearchNodeDefinitionsStatic.Count; m++)
                    {
                        if (ResearchNodeDefinitionsStatic[m].Components != null && ResearchNodeDefinitionsStatic[m].Components.Count > 0)
                        {
                            for (int n = 0; n < ResearchNodeDefinitionsStatic[m].Components.Count; n++)
                            {
                                if (ResearchNodeDefinitionsStatic[m].Components[n].ComponentID == races[l].SpecialComponent.ComponentID)
                                {
                                    if (ResearchNodeDefinitionsStatic[m].AllowedRaces == null)
                                    {
                                        ResearchNodeDefinitionsStatic[m].AllowedRaces = new RaceList();
                                    }
                                    if (!ResearchNodeDefinitionsStatic[m].AllowedRaces.Contains(races[l]))
                                    {
                                        ResearchNodeDefinitionsStatic[m].AllowedRaces.Add(races[l]);
                                    }
                                    break;
                                }
                            }
                        }
                        if (ResearchNodeDefinitionsStatic[m].ComponentImprovements == null || ResearchNodeDefinitionsStatic[m].ComponentImprovements.Count <= 0)
                        {
                            continue;
                        }
                        for (int num = 0; num < ResearchNodeDefinitionsStatic[m].ComponentImprovements.Count; num++)
                        {
                            if (ResearchNodeDefinitionsStatic[m].ComponentImprovements[num].ImprovedComponent.ComponentID == races[l].SpecialComponent.ComponentID)
                            {
                                if (ResearchNodeDefinitionsStatic[m].AllowedRaces == null)
                                {
                                    ResearchNodeDefinitionsStatic[m].AllowedRaces = new RaceList();
                                }
                                if (!ResearchNodeDefinitionsStatic[m].AllowedRaces.Contains(races[l]))
                                {
                                    ResearchNodeDefinitionsStatic[m].AllowedRaces.Add(races[l]);
                                }
                                break;
                            }
                        }
                    }
                }
                if (races[l].VictoryConditions != null)
                {
                    for (int num2 = 0; num2 < races[l].VictoryConditions.Count; num2++)
                    {
                        RaceVictoryCondition raceVictoryCondition = races[l].VictoryConditions[num2];
                        if (raceVictoryCondition == null || raceVictoryCondition.Type != RaceVictoryConditionType.BuildWonder || !(raceVictoryCondition.AdditionalData is PlanetaryFacilityDefinition))
                        {
                            continue;
                        }
                        PlanetaryFacilityDefinition planetaryFacilityDefinition = (PlanetaryFacilityDefinition)raceVictoryCondition.AdditionalData;
                        if (planetaryFacilityDefinition.Type != PlanetaryFacilityType.Wonder || planetaryFacilityDefinition.WonderType != WonderType.RaceAchievement)
                        {
                            continue;
                        }
                        for (int num3 = 0; num3 < ResearchNodeDefinitionsStatic.Count; num3++)
                        {
                            if (ResearchNodeDefinitionsStatic[num3].PlanetaryFacility != null && ResearchNodeDefinitionsStatic[num3].PlanetaryFacility.PlanetaryFacilityDefinitionId == planetaryFacilityDefinition.PlanetaryFacilityDefinitionId)
                            {
                                if (ResearchNodeDefinitionsStatic[num3].AllowedRaces == null)
                                {
                                    ResearchNodeDefinitionsStatic[num3].AllowedRaces = new RaceList();
                                }
                                if (!ResearchNodeDefinitionsStatic[num3].AllowedRaces.Contains(races[l]))
                                {
                                    ResearchNodeDefinitionsStatic[num3].AllowedRaces.Add(races[l]);
                                }
                                break;
                            }
                        }
                    }
                }
                if (races[l].DisallowedResearchAreas != null && races[l].DisallowedResearchAreas.Count > 0)
                {
                    for (int num4 = 0; num4 < ResearchNodeDefinitionsStatic.Count; num4++)
                    {
                        if (races[l].DisallowedResearchAreas.Contains(ResearchNodeDefinitionsStatic[num4].Category))
                        {
                            if (ResearchNodeDefinitionsStatic[num4].DisallowedRaces == null)
                            {
                                ResearchNodeDefinitionsStatic[num4].DisallowedRaces = new RaceList();
                            }
                            if (!ResearchNodeDefinitionsStatic[num4].DisallowedRaces.Contains(races[l]))
                            {
                                ResearchNodeDefinitionsStatic[num4].DisallowedRaces.Add(races[l]);
                            }
                            if (ResearchNodeDefinitionsStatic[num4].AllowedRaces != null && ResearchNodeDefinitionsStatic[num4].AllowedRaces.Contains(races[l]))
                            {
                                ResearchNodeDefinitionsStatic[num4].AllowedRaces.Remove(races[l]);
                            }
                        }
                    }
                }
                if (races[l].DisallowedComponents == null || races[l].DisallowedComponents.Count <= 0)
                {
                    continue;
                }
                for (int num5 = 0; num5 < ResearchNodeDefinitionsStatic.Count; num5++)
                {
                    for (int num6 = 0; num6 < ResearchNodeDefinitionsStatic[num5].Components.Count; num6++)
                    {
                        if (races[l].DisallowedComponents.Contains(ResearchNodeDefinitionsStatic[num5].Components[num6]))
                        {
                            if (ResearchNodeDefinitionsStatic[num5].DisallowedRaces == null)
                            {
                                ResearchNodeDefinitionsStatic[num5].DisallowedRaces = new RaceList();
                            }
                            if (!ResearchNodeDefinitionsStatic[num5].DisallowedRaces.Contains(races[l]))
                            {
                                ResearchNodeDefinitionsStatic[num5].DisallowedRaces.Add(races[l]);
                            }
                            if (ResearchNodeDefinitionsStatic[num5].AllowedRaces != null && ResearchNodeDefinitionsStatic[num5].AllowedRaces.Contains(races[l]))
                            {
                                ResearchNodeDefinitionsStatic[num5].AllowedRaces.Remove(races[l]);
                            }
                        }
                    }
                    for (int num7 = 0; num7 < ResearchNodeDefinitionsStatic[num5].ComponentImprovements.Count; num7++)
                    {
                        if (races[l].DisallowedComponents.Contains(ResearchNodeDefinitionsStatic[num5].ComponentImprovements[num7].ImprovedComponent))
                        {
                            if (ResearchNodeDefinitionsStatic[num5].DisallowedRaces == null)
                            {
                                ResearchNodeDefinitionsStatic[num5].DisallowedRaces = new RaceList();
                            }
                            if (!ResearchNodeDefinitionsStatic[num5].DisallowedRaces.Contains(races[l]))
                            {
                                ResearchNodeDefinitionsStatic[num5].DisallowedRaces.Add(races[l]);
                            }
                            if (ResearchNodeDefinitionsStatic[num5].AllowedRaces != null && ResearchNodeDefinitionsStatic[num5].AllowedRaces.Contains(races[l]))
                            {
                                ResearchNodeDefinitionsStatic[num5].AllowedRaces.Remove(races[l]);
                            }
                        }
                    }
                }
            }
        }

        public static void InitializeRaceFamilyBiases(string applicationStartupPath, string customizationSetName, ref RaceFamilyList raceFamilies)
        {
            string text = "raceFamilyBiases.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            RaceFamilyBiasList.LoadFromFile(filePath, ref raceFamilies);
        }

        public static RaceFamilyList InitializeRaceFamilies(string applicationStartupPath, string customizationSetName)
        {
            RaceFamilyList raceFamilyList = new RaceFamilyList();
            string text = "raceFamilies.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            raceFamilyList.LoadFromFile(filePath);
            return raceFamilyList;
        }

        public static PlagueList InitializePlagues(string applicationStartupPath, string customizationSetName)
        {
            PlagueList plagueList = new PlagueList();
            string text = "plagues.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            plagueList.LoadFromFile(filePath);
            return plagueList;
        }

        public static void InitializeGovernmentBiases(string applicationStartupPath, string customizationSetName, ref GovernmentAttributesList governments)
        {
            string text = "governmentBiases.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            GovernmentBiasList.LoadFromFile(filePath, ref governments);
        }

        public static GovernmentAttributesList InitializeGovernments(string applicationStartupPath, string customizationSetName)
        {
            GovernmentAttributesList governmentAttributesList = new GovernmentAttributesList();
            string text = "governments.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            governmentAttributesList.LoadFromFile(filePath);
            return governmentAttributesList;
        }

        public static PlanetaryFacilityDefinitionList InitializePlanetaryFacilityDefinitions(string applicationStartupPath, string customizationSetName)
        {
            PlanetaryFacilityDefinitionList planetaryFacilityDefinitionList = new PlanetaryFacilityDefinitionList();
            string text = "facilities.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            planetaryFacilityDefinitionList.LoadFromFile(filePath);
            return planetaryFacilityDefinitionList;
        }

        public static ResourceSystem InitializeResourceDefinitions(string applicationStartupPath, string customizationSetName)
        {
            ResourceSystem resourceSystem = new ResourceSystem();
            string text = "resources.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            resourceSystem.LoadFromFile(filePath);
            return resourceSystem;
        }

        public static void GenerateOrderedComponentLists()
        {
            ComponentsWeaponBeamOrderedByRange = GenerateOrderedComponentList(ComponentCategoryType.WeaponBeam, 2);
            ComponentsWeaponTorpedoOrderedByRange = GenerateOrderedComponentList(ComponentCategoryType.WeaponTorpedo, 2);
            ComponentsWeaponAreaOrderedByRange = GenerateOrderedComponentList(ComponentType.WeaponAreaDestruction, 2);
            ComponentsWeaponBeamOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.WeaponBeam, 1);
            ComponentsWeaponTorpedoOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.WeaponTorpedo, 1);
            ComponentsWeaponAreaOrderedByPower = GenerateOrderedComponentList(ComponentType.WeaponAreaDestruction, 1);
            ComponentsReactorOrderedByEfficiency = GenerateOrderedComponentList(ComponentCategoryType.Reactor, 3, 2);
            ComponentsReactorOrderedByEfficiency.Reverse();
            ComponentsReactorOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.Reactor, 1);
            ComponentsEngineMainThrustOrderedByPower = GenerateOrderedComponentList(ComponentType.EngineMainThrust, 1);
            ComponentsEngineVectoringOrderedByPower = GenerateOrderedComponentList(ComponentType.EngineVectoring, 1);
            ComponentsEngineMainThrustOrderedByEfficiency = GenerateOrderedComponentList(ComponentType.EngineMainThrust, 1, 2);
            ComponentsEngineVectoringOrderedByEfficiency = GenerateOrderedComponentList(ComponentType.EngineVectoring, 1, 2);
            ComponentsHyperdriveOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.HyperDrive, 1);
            ComponentsHyperdriveOrderedByEfficiency = GenerateOrderedComponentList(ComponentCategoryType.HyperDrive, 1, 2);
            ComponentsHyperdriveOrderedByJumpInitiation = GenerateOrderedComponentList(ComponentCategoryType.HyperDrive, 3, orderHighestToLowest: false);
        }

        public static ComponentDefinition[] InitializeComponentDefinitions(ResourceSystem resourceSystem, string applicationStartupPath, string customizationSetName)
        {
            ComponentDefinitionList componentDefinitionList = new ComponentDefinitionList();
            string text = "components.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            componentDefinitionList.LoadFromFile(filePath);
            return componentDefinitionList.ToArray();
        }

        public static void InitializeComponentDefinitions_OLD(ResourceSystem resourceSystem)
        {
            object[] array = new object[130];
            object[] array2 = new object[130];
            array[0] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponBeam,
            0,
            "Maxos Blaster",
            5,
            48000,
            0,
            5,
            190,
            12,
            360,
            1,
            1240
            };
            array2[0] = new int[10] { 1, 2, 4, 4, 14, 3, 0, 0, 0, 0 };
            array[1] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponBeam,
            0,
            "Shatterforce Laser",
            4,
            140000,
            0,
            7,
            320,
            20,
            310,
            1,
            1500
            };
            array2[1] = new int[10] { 0, 3, 6, 5, 15, 5, 0, 0, 0, 0 };
            array[2] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponBeam,
            0,
            "Impact Assault Blaster",
            5,
            220000,
            0,
            12,
            220,
            38,
            260,
            3,
            1700
            };
            array2[2] = new int[10] { 2, 3, 5, 4, 14, 5, 12, 4, 0, 0 };
            array[3] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponBeam,
            0,
            "Titan Beam",
            6,
            830000,
            0,
            20,
            390,
            28,
            330,
            4,
            1400
            };
            array2[3] = new int[10] { 3, 4, 7, 3, 15, 5, 12, 5, 0, 0 };
            array[4] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponBeam,
            0,
            "PulseWave Cannon",
            5,
            1900000,
            0,
            13,
            310,
            24,
            350,
            3,
            1400
            };
            array2[4] = new int[10] { 3, 4, 7, 3, 15, 5, 12, 5, 0, 0 };
            array[5] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponTorpedo,
            0,
            "Epsilon Torpedo",
            15,
            64000,
            0,
            11,
            300,
            30,
            60,
            3,
            2900
            };
            array2[5] = new int[10] { 1, 2, 4, 4, 14, 3, 12, 7, 0, 0 };
            array[6] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponTorpedo,
            0,
            "Velocity Shard",
            11,
            190000,
            0,
            16,
            630,
            44,
            120,
            2,
            3300
            };
            array2[6] = new int[10] { 0, 2, 6, 4, 15, 5, 12, 9, 0, 0 };
            array[7] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponTorpedo,
            0,
            "Shockwave Torpedo",
            12,
            280000,
            0,
            24,
            430,
            60,
            75,
            4,
            3800
            };
            array2[7] = new int[10] { 2, 2, 5, 4, 14, 4, 12, 8, 0, 0 };
            array[8] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponTorpedo,
            0,
            "Plasma Thunderbolt",
            12,
            980000,
            0,
            36,
            690,
            64,
            125,
            4,
            3200
            };
            array2[8] = new int[10] { 3, 3, 7, 3, 15, 3, 12, 8, 0, 0 };
            array[9] = new object[15]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponTorpedo,
            0,
            "Shaktur FireStorm",
            12,
            1560000,
            0,
            36,
            295,
            52,
            65,
            10,
            2900,
            6
            };
            array2[9] = new int[10] { 3, 4, 7, 4, 15, 4, 12, 10, 0, 0 };
            array[10] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponMissile,
            0,
            "Concussion Missile",
            10,
            240000,
            0,
            6,
            520,
            18,
            120,
            0,
            2700
            };
            array2[10] = new int[10] { 11, 3, 17, 2, 6, 5, 0, 0, 0, 0 };
            array[11] = new object[15]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponBombard,
            0,
            "Nuclear Devastator",
            8,
            128000,
            0,
            0,
            210,
            15,
            50,
            0,
            6000,
            3
            };
            array2[11] = new int[10] { 3, 4, 7, 4, 15, 4, 12, 10, 0, 0 };
            array[12] = new object[15]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponBombard,
            0,
            "Nuclear Exterminator",
            14,
            1090000,
            0,
            0,
            270,
            44,
            60,
            13,
            6700,
            8
            };
            array2[12] = new int[10] { 3, 4, 7, 5, 15, 6, 12, 11, 0, 0 };
            array[13] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponPointDefense,
            ComponentType.WeaponPointDefense,
            0,
            "Point Defense Cannon",
            3,
            60000,
            0,
            3,
            140,
            4,
            430,
            1,
            540
            };
            array2[13] = new int[10] { 1, 2, 8, 4, 13, 3, 15, 2, 0, 0 };
            array[14] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponPointDefense,
            ComponentType.WeaponPointDefense,
            0,
            "Terminator AutoCannon",
            3,
            370000,
            0,
            6,
            190,
            6,
            550,
            1,
            480
            };
            array2[14] = new int[10] { 0, 2, 8, 4, 13, 4, 15, 3, 0, 0 };
            array[15] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponIon,
            ComponentType.WeaponIonCannon,
            0,
            "Ion Cannon",
            12,
            310000,
            0,
            20,
            260,
            80,
            230,
            5,
            3300
            };
            array2[15] = new int[10] { 13, 6, 14, 4, 5, 5, 12, 2, 0, 0 };
            array[16] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponIon,
            ComponentType.WeaponIonPulse,
            0,
            "Ion Pulse",
            20,
            570000,
            0,
            24,
            210,
            125,
            120,
            7,
            6600
            };
            array2[16] = new int[10] { 13, 9, 14, 6, 5, 6, 12, 3, 0, 0 };
            array[17] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponIon,
            ComponentType.WeaponIonDefense,
            0,
            "Ion Defense",
            2,
            430000,
            0,
            18,
            0,
            0,
            0,
            0,
            0
            };
            array2[17] = new int[10] { 15, 5, 9, 6, 3, 4, 0, 0, 0, 0 };
            array[18] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDisrupt,
            ComponentType.HyperDeny,
            0,
            "HyperDeny GW1000",
            12,
            125000,
            5,
            3,
            340,
            2,
            0,
            0,
            0
            };
            array2[18] = new int[10] { 1, 3, 4, 6, 14, 3, 11, 2, 0, 0 };
            array[19] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponArea,
            ComponentType.WeaponAreaDestruction,
            0,
            "Intimidator Surgewave",
            16,
            190000,
            0,
            35,
            220,
            54,
            120,
            13,
            8200
            };
            array2[19] = new int[10] { 1, 4, 5, 7, 14, 5, 11, 3, 0, 0 };
            array[20] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.HyperDisrupt,
            ComponentType.HyperDeny,
            0,
            "HyperDeny GW4000",
            14,
            670000,
            6,
            6,
            1020,
            2,
            0,
            0,
            0
            };
            array2[20] = new int[10] { 0, 4, 5, 7, 15, 4, 11, 3, 0, 0 };
            array[21] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponArea,
            ComponentType.WeaponAreaDestruction,
            0,
            "Derasian Shockwave",
            18,
            270000,
            0,
            74,
            300,
            90,
            150,
            21,
            9000
            };
            array2[21] = new int[10] { 0, 5, 6, 7, 15, 5, 11, 4, 3, 2 };
            array[22] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.HyperDisrupt,
            ComponentType.HyperStop,
            0,
            "Gravity Well Projector",
            52,
            790000,
            1,
            6,
            1800,
            92,
            0,
            0,
            0
            };
            array2[22] = new int[10] { 0, 28, 5, 50, 15, 22, 11, 24, 0, 0 };
            array[23] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponSuperBeam,
            ComponentType.WeaponSuperBeam,
            0,
            "Death Ray",
            140,
            9999999,
            0,
            1800,
            440,
            400,
            370,
            270,
            8500
            };
            array2[23] = new int[10] { 3, 180, 7, 120, 15, 190, 12, 110, 0, 0 };
            array[24] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponSuperArea,
            ComponentType.WeaponSuperArea,
            0,
            "Devastator Pulse",
            170,
            9999999,
            0,
            1200,
            520,
            470,
            125,
            210,
            12000
            };
            array2[24] = new int[10] { 3, 150, 7, 130, 15, 120, 11, 80, 0, 0 };
            array[25] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponSuperBeam,
            ComponentType.WeaponSuperBeam,
            0,
            "Super Laser",
            640,
            19999999,
            0,
            30000,
            700,
            800,
            450,
            380,
            32000
            };
            array2[25] = new int[10] { 3, 680, 7, 460, 15, 320, 12, 240, 0, 0 };
            array[26] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.Fighter,
            ComponentType.FighterBay,
            0,
            "Standard Fighter Bay",
            50,
            100000,
            4,
            40,
            4,
            0,
            0,
            0,
            0
            };
            array2[26] = new int[10] { 10, 20, 17, 7, 16, 4, 0, 0, 0, 0 };
            array[27] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.Fighter,
            ComponentType.FighterBay,
            0,
            "Advanced Fighter Bay",
            45,
            450000,
            5,
            40,
            7,
            0,
            0,
            0,
            0
            };
            array2[27] = new int[10] { 10, 16, 17, 5, 16, 3, 0, 0, 0, 0 };
            array[28] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.Armor,
            ComponentType.Armor,
            0,
            "Standard Armor",
            1,
            54000,
            0,
            10,
            2,
            0,
            0,
            0,
            0
            };
            array2[28] = new int[10] { 10, 5, 0, 0, 0, 0, 0, 0, 0, 0 };
            array[29] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.Armor,
            ComponentType.Armor,
            0,
            "Enhanced Armor",
            1,
            170000,
            0,
            18,
            4,
            0,
            0,
            0,
            0
            };
            array2[29] = new int[10] { 17, 1, 10, 4, 0, 0, 0, 0, 0, 0 };
            array[30] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.Armor,
            ComponentType.Armor,
            0,
            "Reactive Armor",
            1,
            380000,
            0,
            25,
            7,
            0,
            0,
            0,
            0
            };
            array2[30] = new int[10] { 17, 1, 11, 3, 12, 2, 0, 0, 0, 0 };
            array[31] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.Armor,
            ComponentType.Armor,
            0,
            "UltraDense Armor",
            1,
            710000,
            0,
            40,
            10,
            0,
            0,
            0,
            0
            };
            array2[31] = new int[10] { 17, 1, 11, 4, 12, 3, 0, 0, 0, 0 };
            array[32] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Shields,
            ComponentType.Shields,
            0,
            "Corvidian Shields",
            10,
            50000,
            0,
            100,
            3,
            0,
            0,
            0,
            0
            };
            array2[32] = new int[10] { 4, 3, 14, 4, 13, 8, 0, 0, 0, 0 };
            array[33] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Shields,
            ComponentType.Shields,
            0,
            "Talassos Shields",
            10,
            90000,
            0,
            130,
            8,
            0,
            0,
            0,
            0
            };
            array2[33] = new int[10] { 5, 3, 14, 5, 13, 7, 0, 0, 0, 0 };
            array[34] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Shields,
            ComponentType.Shields,
            0,
            "Deucalios Shields",
            10,
            170000,
            0,
            180,
            4,
            0,
            0,
            0,
            0
            };
            array2[34] = new int[10] { 6, 4, 14, 4, 13, 8, 0, 0, 0, 0 };
            array[35] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Shields,
            ComponentType.Shields,
            0,
            "Meridian Shields",
            10,
            470000,
            0,
            220,
            10,
            0,
            0,
            0,
            0
            };
            array2[35] = new int[10] { 7, 4, 14, 5, 13, 9, 3, 3, 0, 0 };
            array[36] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Shields,
            ComponentType.Shields,
            0,
            "Megatron Z4",
            9,
            2000000,
            0,
            155,
            12,
            0,
            0,
            0,
            0
            };
            array2[36] = new int[10] { 6, 4, 14, 4, 13, 8, 3, 3, 7, 2 };
            array[37] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.ShieldRecharge,
            ComponentType.ShieldRecharge,
            0,
            "Area Shield Recharge",
            20,
            560000,
            0,
            250,
            400,
            600,
            0,
            0,
            0
            };
            array2[37] = new int[10] { 4, 20, 14, 10, 13, 6, 3, 12, 12, 8 };
            array[38] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineMainThrust,
            0,
            "Proton Thruster",
            7,
            40000,
            0,
            1000,
            5,
            560,
            2,
            0,
            0
            };
            array2[38] = new int[10] { 17, 1, 10, 4, 0, 0, 0, 0, 0, 0 };
            array[39] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineMainThrust,
            0,
            "Quantum Engine",
            8,
            175000,
            0,
            1230,
            5,
            620,
            2,
            0,
            0
            };
            array2[39] = new int[10] { 17, 2, 11, 3, 0, 0, 0, 0, 0, 0 };
            array[40] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineMainThrust,
            0,
            "Acceleros Engine",
            8,
            230000,
            0,
            1540,
            8,
            720,
            3,
            0,
            0
            };
            array2[40] = new int[10] { 17, 2, 11, 3, 0, 0, 0, 0, 0, 0 };
            array[41] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineMainThrust,
            0,
            "Vortex Engine",
            8,
            620000,
            0,
            1630,
            6,
            950,
            3,
            0,
            0
            };
            array2[41] = new int[10] { 17, 2, 11, 4, 0, 0, 0, 0, 0, 0 };
            array[42] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineMainThrust,
            0,
            "TurboThruster",
            7,
            1900000,
            0,
            1380,
            3,
            850,
            1,
            0,
            0
            };
            array2[42] = new int[10] { 17, 1, 11, 3, 0, 0, 0, 0, 0, 0 };
            array[43] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineMainThrust,
            0,
            "StarBurner",
            7,
            1900000,
            0,
            1880,
            7,
            1180,
            4,
            0,
            0
            };
            array2[43] = new int[10] { 17, 2, 11, 3, 0, 0, 0, 0, 0, 0 };
            array[44] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineVectoring,
            0,
            "Thrust Vector",
            2,
            70000,
            0,
            6,
            1,
            0,
            0,
            0,
            0
            };
            array2[44] = new int[10] { 17, 1, 10, 2, 0, 0, 0, 0, 0, 0 };
            array[45] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineVectoring,
            0,
            "Multi Vector",
            2,
            560000,
            0,
            12,
            1,
            0,
            0,
            0,
            0
            };
            array2[45] = new int[10] { 17, 1, 11, 3, 0, 0, 0, 0, 0, 0 };
            array[46] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineVectoring,
            0,
            "Swift Vector",
            2,
            1900000,
            0,
            10,
            1,
            0,
            0,
            0,
            0
            };
            array2[46] = new int[10] { 17, 1, 11, 3, 0, 0, 0, 0, 0, 0 };
            array[47] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDrive,
            ComponentType.HyperDrive,
            0,
            "Gerax HyperDrive",
            11,
            75000,
            0,
            12500,
            78,
            15,
            0,
            0,
            0
            };
            array2[47] = new int[10] { 17, 5, 4, 9, 10, 7, 0, 0, 0, 0 };
            array[48] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDrive,
            ComponentType.HyperDrive,
            0,
            "Kaldos HyperDrive",
            9,
            160000,
            0,
            13750,
            94,
            7,
            0,
            0,
            0
            };
            array2[48] = new int[10] { 17, 4, 5, 9, 10, 8, 0, 0, 0, 0 };
            array[49] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDrive,
            ComponentType.HyperDrive,
            0,
            "Equinox JumpDrive",
            9,
            220000,
            0,
            18750,
            88,
            13,
            0,
            0,
            0
            };
            array2[49] = new int[10] { 17, 4, 6, 10, 12, 5, 10, 4, 0, 0 };
            array[50] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDrive,
            ComponentType.HyperDrive,
            0,
            "Calista-Dal WarpDrive",
            9,
            190000,
            0,
            15000,
            60,
            12,
            0,
            0,
            0
            };
            array2[50] = new int[10] { 17, 5, 7, 7, 12, 5, 10, 6, 0, 0 };
            array[51] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDrive,
            ComponentType.HyperDrive,
            0,
            "Torrent Drive",
            9,
            1270000,
            0,
            25000,
            83,
            6,
            0,
            0,
            0
            };
            array2[51] = new int[10] { 17, 5, 7, 8, 12, 6, 10, 6, 0, 0 };
            array[52] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDrive,
            ComponentType.HyperDrive,
            0,
            "VelocityDrive",
            8,
            1500000,
            0,
            23500,
            64,
            6,
            0,
            0,
            0
            };
            array2[52] = new int[10] { 17, 4, 7, 7, 12, 5, 10, 6, 0, 0 };
            array[53] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Reactor,
            ComponentType.Reactor,
            0,
            "Fission Reactor",
            22,
            35000,
            0,
            60,
            105,
            400,
            18,
            0,
            0
            };
            array2[53] = new int[10] { 15, 6, 4, 9, 10, 5, 13, 4, 0, 0 };
            array[54] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Reactor,
            ComponentType.Reactor,
            0,
            "Fusion Reactor",
            15,
            190000,
            0,
            84,
            180,
            520,
            8,
            0,
            0
            };
            array2[54] = new int[10] { 15, 7, 5, 10, 10, 6, 0, 0, 0, 0 };
            array[55] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Reactor,
            ComponentType.Reactor,
            0,
            "Quantum Reactor",
            18,
            240000,
            0,
            120,
            230,
            800,
            18,
            0,
            0
            };
            array2[55] = new int[10] { 15, 6, 6, 11, 10, 4, 17, 2, 7, 2 };
            array[56] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Reactor,
            ComponentType.Reactor,
            0,
            "HyperFusion Reactor",
            16,
            960000,
            0,
            180,
            350,
            975,
            8,
            0,
            0
            };
            array2[56] = new int[10] { 15, 8, 4, 12, 10, 6, 11, 4, 7, 4 };
            array[57] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Reactor,
            ComponentType.Reactor,
            0,
            "NovaCore Reactor",
            20,
            1500000,
            0,
            120,
            240,
            480,
            8,
            0,
            0
            };
            array2[57] = new int[10] { 15, 6, 6, 9, 10, 4, 11, 3, 7, 2 };
            array[58] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.EnergyCollector,
            ComponentType.EnergyCollector,
            0,
            "Energy Collector",
            8,
            30000,
            0,
            24,
            0,
            0,
            0,
            0,
            0
            };
            array2[58] = new int[10] { 16, 2, 9, 7, 14, 4, 12, 5, 0, 0 };
            array[59] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Extractor,
            ComponentType.ExtractorMine,
            0,
            "Mining Engine",
            14,
            25000,
            3,
            3,
            0,
            0,
            0,
            0,
            0
            };
            array2[59] = new int[10] { 10, 5, 11, 5, 0, 0, 0, 0, 0, 0 };
            array[60] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Extractor,
            ComponentType.ExtractorGasExtractor,
            0,
            "Gas Extractor",
            16,
            31000,
            2,
            20,
            0,
            0,
            0,
            0,
            0
            };
            array2[60] = new int[10] { 10, 4, 16, 3, 0, 0, 0, 0, 0, 0 };
            array[61] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Extractor,
            ComponentType.ExtractorLuxury,
            0,
            "Luxury Resource Extractor",
            22,
            50000,
            3,
            3,
            0,
            0,
            0,
            0,
            0
            };
            array2[61] = new int[10] { 10, 3, 11, 3, 0, 0, 0, 0, 0, 0 };
            array[62] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Manufacturer,
            ComponentType.ManufacturerWeaponsPlant,
            0,
            "Weapons Plant",
            35,
            28000,
            2,
            20000,
            0,
            0,
            0,
            0,
            0
            };
            array2[62] = new int[10] { 10, 3, 4, 4, 12, 4, 0, 0, 0, 0 };
            array[63] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Manufacturer,
            ComponentType.ManufacturerEnergyPlant,
            0,
            "Energy Plant",
            35,
            24000,
            2,
            20000,
            0,
            0,
            0,
            0,
            0
            };
            array2[63] = new int[10] { 10, 3, 16, 3, 13, 4, 0, 0, 0, 0 };
            array[64] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Manufacturer,
            ComponentType.ManufacturerHighTechPlant,
            0,
            "HighTech Plant",
            28,
            26000,
            2,
            20000,
            0,
            0,
            0,
            0,
            0
            };
            array2[64] = new int[10] { 10, 3, 9, 6, 0, 0, 0, 0, 0, 0 };
            array[65] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageFuel,
            0,
            "Standard Fuel Cell",
            6,
            28000,
            0,
            65,
            0,
            0,
            0,
            0,
            0
            };
            array2[65] = new int[10] { 10, 2, 16, 1, 0, 0, 0, 0, 0, 0 };
            array[66] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageFuel,
            0,
            "UltraDense Fuel Cell",
            6,
            650000,
            0,
            100,
            0,
            0,
            0,
            0,
            0
            };
            array2[66] = new int[10] { 10, 3, 16, 2, 0, 0, 0, 0, 0, 0 };
            array[67] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageFuel,
            0,
            "Mega-Density Fuel Cell",
            6,
            1060000,
            0,
            140,
            0,
            0,
            0,
            0,
            0
            };
            array2[67] = new int[10] { 10, 3, 16, 2, 0, 0, 0, 0, 0, 0 };
            array[68] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageCargo,
            0,
            "Standard Cargo Bay",
            8,
            20000,
            0,
            500,
            0,
            0,
            0,
            0,
            0
            };
            array2[68] = new int[10] { 10, 3, 16, 1, 0, 0, 0, 0, 0, 0 };
            array[69] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageCargo,
            0,
            "Massive Cargo Bay",
            8,
            490000,
            0,
            800,
            0,
            0,
            0,
            0,
            0
            };
            array2[69] = new int[10] { 10, 4, 16, 2, 0, 0, 0, 0, 0, 0 };
            array[70] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageTroop,
            0,
            "Standard Troop Compartment",
            8,
            20000,
            0,
            100,
            0,
            0,
            0,
            0,
            0
            };
            array2[70] = new int[10] { 10, 4, 16, 2, 0, 0, 0, 0, 0, 0 };
            array[71] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageTroop,
            0,
            "Massive Troop Compartment",
            8,
            240000,
            0,
            160,
            0,
            0,
            0,
            0,
            0
            };
            array2[71] = new int[10] { 10, 5, 16, 3, 0, 0, 0, 0, 0, 0 };
            array[72] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StoragePassenger,
            0,
            "Standard Passenger Compartment",
            10,
            15000,
            0,
            1200000,
            0,
            0,
            0,
            0,
            0
            };
            array2[72] = new int[10] { 10, 4, 16, 2, 0, 0, 0, 0, 0, 0 };
            array[73] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StoragePassenger,
            0,
            "Massive Passenger Compartment",
            10,
            384000,
            0,
            2400000,
            0,
            0,
            0,
            0,
            0
            };
            array2[73] = new int[10] { 10, 5, 16, 3, 0, 0, 0, 0, 0, 0 };
            array[74] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageDockingBay,
            0,
            "Docking Bay",
            4,
            30000,
            0,
            150,
            0,
            0,
            0,
            0,
            0
            };
            array2[74] = new int[10] { 10, 4, 0, 0, 0, 0, 0, 0, 0, 0 };
            array[75] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorProximityArray,
            0,
            "Basic Proximity Array",
            3,
            40000,
            1,
            48000,
            1,
            0,
            0,
            0,
            0
            };
            array2[75] = new int[10] { 9, 5, 14, 3, 0, 0, 0, 0, 0, 0 };
            array[76] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorProximityArray,
            0,
            "Advanced Proximity Array",
            3,
            340000,
            1,
            54000,
            10,
            0,
            0,
            0,
            0
            };
            array2[76] = new int[10] { 9, 5, 14, 3, 0, 0, 0, 0, 0, 0 };
            array[77] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorResourceProfileSensor,
            0,
            "Resource Profile Sensor",
            2,
            35000,
            1,
            500,
            0,
            0,
            0,
            0,
            0
            };
            array2[77] = new int[10] { 9, 6, 14, 4, 0, 0, 0, 0, 0, 0 };
            array[78] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorLongRange,
            0,
            "Long Range Scanner",
            72,
            56000,
            60,
            450000,
            0,
            0,
            0,
            0,
            0
            };
            array2[78] = new int[10] { 9, 36, 15, 14, 0, 0, 0, 0, 0, 0 };
            array[79] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorLongRange,
            0,
            "Ultra Long Range Scanner",
            98,
            630000,
            110,
            1100000,
            0,
            0,
            0,
            0,
            0
            };
            array2[79] = new int[10] { 9, 55, 15, 20, 0, 0, 0, 0, 0, 0 };
            array[80] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorTraceScanner,
            0,
            "Trace Scanner",
            2,
            390000,
            1,
            500,
            10,
            0,
            0,
            0,
            0
            };
            array2[80] = new int[10] { 9, 4, 14, 3, 0, 0, 0, 0, 0, 0 };
            array[81] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorScannerJammer,
            0,
            "Scanner Jammer",
            2,
            510000,
            1,
            0,
            10,
            0,
            0,
            0,
            0
            };
            array2[81] = new int[10] { 9, 4, 14, 3, 0, 0, 0, 0, 0, 0 };
            array[82] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Sensor,
            ComponentType.SensorStealth,
            0,
            "Stealth Cloak",
            60,
            275000,
            10,
            500,
            0,
            0,
            0,
            0,
            0
            };
            array2[82] = new int[10] { 17, 5, 11, 3, 12, 6, 10, 7, 7, 8 };
            array[83] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerTargetting,
            0,
            "Combat Targetting System",
            1,
            55000,
            1,
            10,
            0,
            0,
            0,
            0,
            0
            };
            array2[83] = new int[10] { 9, 3, 14, 3, 16, 1, 0, 0, 0, 0 };
            array[84] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerCountermeasures,
            0,
            "Countermeasures System",
            1,
            75000,
            1,
            10,
            0,
            0,
            0,
            0,
            0
            };
            array2[84] = new int[10] { 9, 3, 14, 3, 16, 1, 0, 0, 0, 0 };
            array[85] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerCommandCenter,
            0,
            "Command Center",
            2,
            20000,
            2,
            0,
            0,
            0,
            0,
            0,
            0
            };
            array2[85] = new int[10] { 9, 5, 14, 4, 16, 2, 0, 0, 0, 0 };
            array[86] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerCommerceCenter,
            0,
            "Commerce Center",
            3,
            25000,
            2,
            50,
            0,
            0,
            0,
            0,
            0
            };
            array2[86] = new int[10] { 9, 7, 14, 5, 16, 3, 0, 0, 0, 0 };
            array[87] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerCountermeasures,
            0,
            "ShadowGhost ECM",
            1,
            2000000,
            1,
            40,
            0,
            0,
            0,
            0,
            0
            };
            array2[87] = new int[10] { 9, 4, 14, 3, 16, 2, 0, 0, 0, 0 };
            array[88] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerTargetting,
            0,
            "Raptor Targetting System",
            1,
            1900000,
            1,
            40,
            0,
            0,
            0,
            0,
            0
            };
            array2[88] = new int[10] { 9, 3, 14, 4, 16, 2, 0, 0, 0, 0 };
            array[89] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerTargettingFleet,
            0,
            "Fleet Targetting System",
            3,
            55000,
            5,
            25,
            10,
            0,
            0,
            0,
            0
            };
            array2[89] = new int[10] { 9, 5, 14, 4, 16, 3, 0, 0, 0, 0 };
            array[90] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Computer,
            ComponentType.ComputerCountermeasuresFleet,
            0,
            "Fleet Countermeasures System",
            3,
            75000,
            5,
            25,
            10,
            0,
            0,
            0,
            0
            };
            array2[90] = new int[10] { 9, 5, 14, 4, 16, 3, 0, 0, 0, 0 };
            array[91] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Labs,
            ComponentType.LabsWeaponsLab,
            0,
            "Weapons Lab",
            20,
            44000,
            5,
            20000,
            0,
            0,
            0,
            0,
            0
            };
            array2[91] = new int[10] { 16, 5, 14, 6, 9, 7, 0, 0, 0, 0 };
            array[92] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Labs,
            ComponentType.LabsEnergyLab,
            0,
            "Energy Lab",
            20,
            38000,
            5,
            20000,
            0,
            0,
            0,
            0,
            0
            };
            array2[92] = new int[10] { 16, 5, 14, 6, 9, 7, 0, 0, 0, 0 };
            array[93] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Labs,
            ComponentType.LabsHighTechLab,
            0,
            "HighTech Lab",
            20,
            32000,
            5,
            20000,
            0,
            0,
            0,
            0,
            0
            };
            array2[93] = new int[10] { 16, 5, 14, 6, 9, 8, 0, 0, 0, 0 };
            array[94] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Construction,
            ComponentType.ConstructionBuild,
            0,
            "Construction Yard",
            10,
            45000,
            2,
            200,
            100,
            0,
            0,
            0,
            0
            };
            array2[94] = new int[10] { 10, 8, 17, 3, 0, 0, 0, 0, 0, 0 };
            array[95] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Construction,
            ComponentType.DamageControl,
            0,
            "Damage Control Unit",
            4,
            96000,
            1,
            400,
            0,
            0,
            0,
            0,
            0
            };
            array2[95] = new int[10] { 10, 5, 17, 2, 0, 0, 0, 0, 0, 0 };
            array[96] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Construction,
            ComponentType.DamageControl,
            0,
            "S2F4 RepairBot",
            3,
            520000,
            1,
            500,
            5,
            0,
            0,
            0,
            0
            };
            array2[96] = new int[10] { 10, 6, 17, 1, 0, 0, 0, 0, 0, 0 };
            array[97] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Construction,
            ComponentType.DamageControl,
            0,
            "S2F7 RepairBot",
            2,
            890000,
            1,
            650,
            4,
            0,
            0,
            0,
            0
            };
            array2[97] = new int[10] { 10, 5, 17, 2, 0, 0, 0, 0, 0, 0 };
            array[98] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Habitation,
            ComponentType.HabitationLifeSupport,
            0,
            "Life Support",
            1,
            15000,
            1,
            60,
            0,
            0,
            0,
            0,
            0
            };
            array2[98] = new int[10] { 16, 1, 14, 2, 0, 0, 0, 0, 0, 0 };
            array[99] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Habitation,
            ComponentType.HabitationHabModule,
            0,
            "Hab Module",
            2,
            17000,
            1,
            60,
            0,
            0,
            0,
            0,
            0
            };
            array2[99] = new int[10] { 10, 3, 16, 2, 0, 0, 0, 0, 0, 0 };
            array[100] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Habitation,
            ComponentType.HabitationMedicalCenter,
            0,
            "Medical Center",
            4,
            37000,
            3,
            100,
            0,
            0,
            0,
            0,
            0
            };
            array2[100] = new int[10] { 10, 6, 16, 4, 11, 5, 0, 0, 0, 0 };
            array[101] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Habitation,
            ComponentType.HabitationRecreationCenter,
            0,
            "Recreation Center",
            20,
            42000,
            15,
            100,
            0,
            0,
            0,
            0,
            0
            };
            array2[101] = new int[10] { 10, 18, 16, 10, 0, 0, 0, 0, 0, 0 };
            array[102] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Habitation,
            ComponentType.HabitationColonization,
            0,
            "Basic Colonization Module",
            360,
            68000,
            6,
            30000000,
            0,
            0,
            0,
            0,
            0
            };
            array2[102] = new int[10] { 8, 400, 10, 180, 16, 100, 0, 0, 0, 0 };
            array[103] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Habitation,
            ComponentType.HabitationColonization,
            0,
            "Enhanced Colonization Module",
            390,
            195000,
            7,
            60000000,
            0,
            0,
            0,
            0,
            0
            };
            array2[103] = new int[10] { 8, 460, 10, 200, 16, 120, 0, 0, 0, 0 };
            array[104] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Habitation,
            ComponentType.HabitationColonization,
            0,
            "Massive Colonization Module",
            440,
            315000,
            7,
            100000000,
            0,
            0,
            0,
            0,
            0
            };
            array2[104] = new int[10] { 8, 520, 10, 230, 16, 130, 0, 0, 0, 0 };
            array[106] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponIon,
            ComponentType.WeaponIonCannon,
            0,
            "Giant Ion Cannon",
            12,
            99999999,
            0,
            220,
            400,
            0,
            220,
            4,
            8000
            };
            array2[106] = new int[10] { 13, 6, 14, 4, 5, 5, 12, 2, 0, 0 };
            array[107] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponPhaser,
            0,
            "Phaser Cannon",
            7,
            48000,
            0,
            9,
            200,
            32,
            500,
            0,
            2200
            };
            array2[107] = new int[10] { 1, 3, 4, 6, 14, 4, 0, 0, 0, 0 };
            array[108] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponRailGun,
            0,
            "Rail Gun",
            7,
            60000,
            0,
            6,
            120,
            6,
            120,
            0,
            1000
            };
            array2[108] = new int[10] { 1, 3, 8, 6, 13, 4, 15, 3, 0, 0 };
            array[109] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponMissile,
            0,
            "Assault Missile",
            14,
            240000,
            0,
            20,
            740,
            18,
            110,
            0,
            4200
            };
            array2[109] = new int[10] { 11, 4, 17, 2, 6, 7, 0, 0, 0, 0 };
            array[110] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.EnergyCollector,
            ComponentType.EnergyToFuel,
            0,
            "Energy To Fuel Converter",
            280,
            30000,
            0,
            50,
            0,
            0,
            0,
            0,
            0
            };
            array2[110] = new int[10] { 10, 74, 16, 48, 9, 28, 12, 37, 7, 42 };
            array[111] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponPhaser,
            0,
            "Phaser Lance",
            9,
            48000,
            0,
            20,
            300,
            50,
            520,
            0,
            4000
            };
            array2[111] = new int[10] { 1, 3, 4, 7, 14, 5, 0, 0, 0, 0 };
            array[112] = new object[15]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponRailGun,
            0,
            "Heavy Rail Gun",
            12,
            60000,
            0,
            10,
            180,
            8,
            180,
            0,
            2000,
            1
            };
            array2[112] = new int[10] { 1, 4, 8, 8, 13, 4, 15, 4, 0, 0 };
            array[113] = new object[15]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponRailGun,
            0,
            "Massive Rail Gun",
            18,
            120000,
            0,
            16,
            280,
            12,
            200,
            0,
            2800,
            2
            };
            array2[113] = new int[10] { 1, 5, 8, 10, 13, 5, 15, 5, 0, 0 };
            array[114] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponGravity,
            ComponentType.WeaponTractorBeam,
            0,
            "Tractor Beam",
            10,
            310000,
            0,
            10,
            320,
            28,
            800,
            5,
            4000
            };
            array2[114] = new int[10] { 13, 5, 15, 3, 6, 4, 12, 3, 0, 0 };
            array[115] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.AssaultPod,
            ComponentType.AssaultPod,
            0,
            "Assault Pod",
            8,
            240000,
            0,
            50,
            140,
            6,
            50,
            20,
            120000
            };
            array2[115] = new int[10] { 10, 6, 16, 3, 17, 1, 11, 2, 0, 0 };
            array[116] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponGravity,
            ComponentType.WeaponGravityBeam,
            0,
            "Graviton Beam",
            20,
            310000,
            0,
            15,
            150,
            40,
            400,
            4,
            7000
            };
            array2[116] = new int[10] { 0, 3, 12, 2, 15, 2, 0, 0, 0, 0 };
            array[117] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponGravity,
            ComponentType.WeaponGravityBeam,
            0,
            "Resonant Graviton Beam",
            30,
            310000,
            0,
            28,
            240,
            60,
            400,
            3,
            7000
            };
            array2[117] = new int[10] { 0, 4, 12, 3, 15, 4, 3, 2, 0, 0 };
            array[118] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponGravity,
            ComponentType.WeaponTractorBeam,
            0,
            "High Power Tractor Beam",
            10,
            310000,
            0,
            16,
            400,
            34,
            400,
            2,
            4000
            };
            array2[118] = new int[10] { 13, 6, 15, 4, 6, 5, 12, 4, 0, 0 };
            array[119] = new object[15]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponGravity,
            ComponentType.WeaponAreaGravity,
            0,
            "Area Graviton Pulse",
            40,
            310000,
            0,
            40,
            360,
            100,
            60,
            240,
            9000,
            80
            };
            array2[119] = new int[10] { 0, 5, 6, 6, 15, 5, 11, 4, 3, 5 };
            array[120] = new object[15]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponGravity,
            ComponentType.WeaponAreaGravity,
            0,
            "Area Transient Singularity",
            50,
            310000,
            0,
            100,
            520,
            200,
            65,
            350,
            12000,
            120
            };
            array2[120] = new int[10] { 0, 8, 6, 9, 15, 8, 11, 5, 3, 10 };
            array[121] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Reactor,
            ComponentType.Reactor,
            0,
            "Basic Space Reactor",
            18,
            35000,
            0,
            46,
            90,
            370,
            18,
            0,
            0
            };
            array2[121] = new int[10] { 10, 5, 4, 7, 13, 3, 0, 0, 0, 0 };
            array[122] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineMainThrust,
            0,
            "Ion Thruster",
            6,
            40000,
            0,
            600,
            4,
            520,
            2,
            0,
            0
            };
            array2[122] = new int[10] { 17, 1, 10, 4, 0, 0, 0, 0, 0, 0 };
            array[123] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.Engine,
            ComponentType.EngineVectoring,
            0,
            "Directional Thruster",
            2,
            70000,
            0,
            3,
            1,
            0,
            0,
            0,
            0
            };
            array2[123] = new int[10] { 17, 1, 10, 2, 0, 0, 0, 0, 0, 0 };
            array[124] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageFuel,
            0,
            "Small Fuel Cell",
            6,
            28000,
            0,
            55,
            0,
            0,
            0,
            0,
            0
            };
            array2[124] = new int[10] { 10, 2, 16, 1, 0, 0, 0, 0, 0, 0 };
            array[125] = new object[14]
            {
            IndustryType.HighTech,
            ComponentCategoryType.Storage,
            ComponentType.StorageCargo,
            0,
            "Small Cargo Bay",
            8,
            20000,
            0,
            350,
            0,
            0,
            0,
            0,
            0
            };
            array2[125] = new int[10] { 10, 3, 16, 1, 0, 0, 0, 0, 0, 0 };
            array[126] = new object[14]
            {
            IndustryType.Energy,
            ComponentCategoryType.HyperDrive,
            ComponentType.HyperDrive,
            0,
            "Warp Bubble Generator",
            10,
            75000,
            0,
            2000,
            132,
            18,
            0,
            0,
            0
            };
            array2[126] = new int[10] { 17, 4, 4, 7, 10, 5, 0, 0, 0, 0 };
            array[127] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponBeam,
            0,
            "Pulse Blaster",
            4,
            40000,
            0,
            4,
            150,
            13,
            360,
            1,
            1240
            };
            array2[127] = new int[10] { 1, 2, 4, 3, 14, 3, 0, 0, 0, 0 };
            array[128] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponBeam,
            ComponentType.WeaponRailGun,
            0,
            "Long Range Gun",
            6,
            50000,
            0,
            5,
            100,
            7,
            100,
            0,
            1000
            };
            array2[128] = new int[10] { 1, 3, 8, 5, 13, 3, 15, 3, 0, 0 };
            array[129] = new object[14]
            {
            IndustryType.Weapon,
            ComponentCategoryType.WeaponTorpedo,
            ComponentType.WeaponMissile,
            0,
            "Seeking Missile",
            8,
            120000,
            0,
            5,
            400,
            20,
            80,
            0,
            2700
            };
            array2[129] = new int[10] { 11, 3, 17, 1, 6, 4, 0, 0, 0, 0 };
            for (int i = 0; i < array.Length; i++)
            {
                object[] array3 = (object[])array[i];
                ComponentDefinition componentDefinition = new ComponentDefinition((ComponentType)array3[2], i, (string)array3[4], (int)array3[5], (int)array3[6]);
                if (array3.Length == 15)
                {
                    componentDefinition.Value7 = (int)array3[14];
                }
                int[] array4 = (int[])array2[i];
                for (int j = 0; j < 5; j++)
                {
                    if (array4[j * 2 + 1] != 0)
                    {
                        ComponentResource resource = new ComponentResource(resourceSystem.Resources[array4[j * 2]].ResourceID, (short)array4[j * 2 + 1]);
                        if (componentDefinition.RequiredResources == null)
                        {
                            componentDefinition.RequiredResources = new ComponentResourceList();
                        }
                        componentDefinition.RequiredResources.Add(resource);
                    }
                }
                componentDefinition.ComponentID = i;
                componentDefinition.Value1 = (int)array3[8];
                componentDefinition.Value2 = (int)array3[9];
                componentDefinition.Value3 = (int)array3[10];
                componentDefinition.Value4 = (int)array3[11];
                componentDefinition.Value5 = (int)array3[12];
                componentDefinition.Value6 = (int)array3[13];
                ComponentDefinitionsStatic[i] = componentDefinition;
            }
            ComponentsWeaponBeamOrderedByRange = GenerateOrderedComponentList(ComponentCategoryType.WeaponBeam, 2);
            ComponentsWeaponTorpedoOrderedByRange = GenerateOrderedComponentList(ComponentCategoryType.WeaponTorpedo, 2);
            ComponentsWeaponAreaOrderedByRange = GenerateOrderedComponentList(ComponentType.WeaponAreaDestruction, 2);
            ComponentsWeaponBeamOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.WeaponBeam, 1);
            ComponentsWeaponTorpedoOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.WeaponTorpedo, 1);
            ComponentsWeaponAreaOrderedByPower = GenerateOrderedComponentList(ComponentType.WeaponAreaDestruction, 1);
            ComponentsReactorOrderedByEfficiency = GenerateOrderedComponentList(ComponentCategoryType.Reactor, 3, 2);
            ComponentsReactorOrderedByEfficiency.Reverse();
            ComponentsReactorOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.Reactor, 1);
            ComponentsEngineMainThrustOrderedByPower = GenerateOrderedComponentList(ComponentType.EngineMainThrust, 1);
            ComponentsEngineVectoringOrderedByPower = GenerateOrderedComponentList(ComponentType.EngineVectoring, 1);
            ComponentsEngineMainThrustOrderedByEfficiency = GenerateOrderedComponentList(ComponentType.EngineMainThrust, 1, 2);
            ComponentsEngineVectoringOrderedByEfficiency = GenerateOrderedComponentList(ComponentType.EngineVectoring, 1, 2);
            ComponentsHyperdriveOrderedByPower = GenerateOrderedComponentList(ComponentCategoryType.HyperDrive, 1);
            ComponentsHyperdriveOrderedByEfficiency = GenerateOrderedComponentList(ComponentCategoryType.HyperDrive, 1, 2);
            ComponentsHyperdriveOrderedByJumpInitiation = GenerateOrderedComponentList(ComponentCategoryType.HyperDrive, 3, orderHighestToLowest: false);
        }

        public static ResearchNodeDefinitionList InitializeResearchNodeDefinitions(string applicationStartupPath, string customizationSetName)
        {
            string text = "research.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            RaceList races = LoadRaces(applicationStartupPath, customizationSetName);
            ResearchNodeDefinitionList researchNodeDefinitionList = new ResearchNodeDefinitionList();
            researchNodeDefinitionList.LoadFromFile(filePath, races);
            SetResearchCosts(120000, researchNodeDefinitionList);
            return researchNodeDefinitionList;
        }

        public static void WriteResearchNodesToFile(ResearchNodeDefinitionList researchNodes, string applicationStartupPath)
        {
            try
            {
                string text = "research_output.txt";
                string path = applicationStartupPath + "\\" + text;
                using FileStream stream = new FileStream(path, FileMode.Create, FileAccess.Write);
                using StreamWriter streamWriter = new StreamWriter(stream);
                for (int i = 0; i < researchNodes.Count; i++)
                {
                    ResearchNodeDefinition researchNodeDefinition = researchNodes[i];
                    string empty = string.Empty;
                    empty += "PROJECT\t\t\t;";
                    empty = empty + researchNodeDefinition.ResearchNodeId + ", ";
                    empty = empty + researchNodeDefinition.Name + ", ";
                    empty = empty + researchNodeDefinition.TechLevel + ", ";
                    empty = empty + researchNodeDefinition.Row + ", ";
                    empty += "\t\t";
                    int num = 0;
                    switch (researchNodeDefinition.Industry)
                    {
                        case IndustryType.Weapon:
                            num = 0;
                            break;
                        case IndustryType.Energy:
                            num = 1;
                            break;
                        case IndustryType.HighTech:
                            num = 2;
                            break;
                    }
                    empty = empty + num + ", ";
                    empty = empty + DetermineIndexOfComponentCategory(researchNodeDefinition.Category) + ", ";
                    empty = empty + researchNodeDefinition.SpecialFunctionCode + ", ";
                    empty = empty + researchNodeDefinition.BaseCostMultiplierOverride.ToString("0.0") + ", ";
                    streamWriter.WriteLine(empty);
                    if (researchNodeDefinition.Components != null && researchNodeDefinition.Components.Count > 0)
                    {
                        empty = "COMPONENTS\t\t;";
                        for (int j = 0; j < researchNodeDefinition.Components.Count; j++)
                        {
                            Component component = researchNodeDefinition.Components[j];
                            if (component != null)
                            {
                                empty += component.ComponentID;
                                empty += ", ";
                            }
                        }
                        empty = empty.Substring(0, empty.Length - 2);
                        streamWriter.WriteLine(empty);
                    }
                    if (researchNodeDefinition.ComponentImprovements != null && researchNodeDefinition.ComponentImprovements.Count > 0)
                    {
                        empty = "COMPONENT IMPROVEMENTS\t;";
                        for (int k = 0; k < researchNodeDefinition.ComponentImprovements.Count; k++)
                        {
                            ComponentImprovement componentImprovement = researchNodeDefinition.ComponentImprovements[k];
                            if (componentImprovement != null)
                            {
                                empty = empty + componentImprovement.ImprovedComponent.ComponentID + ", ";
                                empty = empty + componentImprovement.TechLevel + ", ";
                                empty = empty + componentImprovement.Value1 + ", ";
                                empty = empty + componentImprovement.Value2 + ", ";
                                empty = empty + componentImprovement.Value3 + ", ";
                                empty = empty + componentImprovement.Value4 + ", ";
                                empty = empty + componentImprovement.Value5 + ", ";
                                empty = empty + componentImprovement.Value6 + ", ";
                                empty = empty + componentImprovement.Value7 + ",";
                                empty += "\t\t";
                            }
                        }
                        empty = empty.Substring(0, empty.Length - 2);
                        streamWriter.WriteLine(empty);
                    }
                    if (researchNodeDefinition.Fighters != null && researchNodeDefinition.Fighters.Count > 0)
                    {
                        empty = "FIGHTERS\t\t;";
                        for (int l = 0; l < researchNodeDefinition.Fighters.Count; l++)
                        {
                            FighterSpecification fighterSpecification = researchNodeDefinition.Fighters[l];
                            if (fighterSpecification != null)
                            {
                                empty += fighterSpecification.FighterSpecificationId;
                                empty += ", ";
                            }
                        }
                        empty = empty.Substring(0, empty.Length - 2);
                        streamWriter.WriteLine(empty);
                    }
                    if (researchNodeDefinition.PlanetaryFacility != null)
                    {
                        empty = "FACILITY\t\t;";
                        empty += researchNodeDefinition.PlanetaryFacility.PlanetaryFacilityDefinitionId;
                        streamWriter.WriteLine(empty);
                    }
                    if (researchNodeDefinition.Abilities != null && researchNodeDefinition.Abilities.Count > 0)
                    {
                        empty = "ABILITIES\t\t;";
                        for (int m = 0; m < researchNodeDefinition.Abilities.Count; m++)
                        {
                            ResearchAbility researchAbility = researchNodeDefinition.Abilities[m];
                            if (researchAbility == null)
                            {
                                continue;
                            }
                            empty = empty + researchAbility.Name + ", ";
                            int num2 = 0;
                            int num3 = 0;
                            switch (researchAbility.Type)
                            {
                                case ResearchAbilityType.Boarding:
                                    num2 = 0;
                                    break;
                                case ResearchAbilityType.ColonizeHabitatType:
                                    num2 = 1;
                                    break;
                                case ResearchAbilityType.ConstructionSize:
                                    num2 = 2;
                                    break;
                                case ResearchAbilityType.EnableShipSubRole:
                                    num2 = 3;
                                    if (researchAbility.RelatedObject is BuiltObjectSubRole)
                                    {
                                        switch ((BuiltObjectSubRole)researchAbility.RelatedObject)
                                        {
                                            case BuiltObjectSubRole.Carrier:
                                                num3 = 0;
                                                break;
                                            case BuiltObjectSubRole.ResupplyShip:
                                                num3 = 1;
                                                break;
                                        }
                                    }
                                    break;
                                case ResearchAbilityType.PopulationGrowthRate:
                                    num2 = 4;
                                    break;
                                case ResearchAbilityType.Troop:
                                    num2 = 5;
                                    if (researchAbility.RelatedObject is TroopType)
                                    {
                                        switch ((TroopType)researchAbility.RelatedObject)
                                        {
                                            case TroopType.Infantry:
                                                num3 = 0;
                                                break;
                                            case TroopType.Armored:
                                                num3 = 1;
                                                break;
                                            case TroopType.Artillery:
                                                num3 = 2;
                                                break;
                                            case TroopType.SpecialForces:
                                                num3 = 3;
                                                break;
                                        }
                                    }
                                    break;
                            }
                            empty = empty + num2 + ", ";
                            empty = empty + researchAbility.Level + ", ";
                            empty = empty + researchAbility.Value + ", ";
                            empty = empty + num3 + ",";
                            empty += "\t\t";
                        }
                        empty = empty.Substring(0, empty.Length - 3);
                        streamWriter.WriteLine(empty);
                    }
                    if (researchNodeDefinition.ParentNodes != null && researchNodeDefinition.ParentNodes.Count > 0)
                    {
                        empty = "PARENTS\t\t\t;";
                        for (int n = 0; n < researchNodeDefinition.ParentNodes.Count; n++)
                        {
                            ResearchNodeDefinition researchNodeDefinition2 = researchNodeDefinition.ParentNodes[n];
                            if (researchNodeDefinition2 != null)
                            {
                                empty += researchNodeDefinition2.ResearchNodeId;
                                empty += ", ";
                                bool flag = false;
                                if (researchNodeDefinition.ParentIsRequired.Count > n)
                                {
                                    flag = researchNodeDefinition.ParentIsRequired[n];
                                }
                                empty = ((!flag) ? (empty + "N, ") : (empty + "Y, "));
                            }
                        }
                        empty = empty.Substring(0, empty.Length - 2);
                        streamWriter.WriteLine(empty);
                    }
                    streamWriter.WriteLine();
                }
            }
            catch (Exception)
            {
            }
        }

        public static void InitializeData(string applicationStartupPath, string customizationSetName, out ResourceSystem resourceSystem)
        {
            InitializeData(applicationStartupPath, customizationSetName, out resourceSystem, out var _, out var _, out var _, out var _, out var _, out var _, out var _);
        }

        public static void InitializeData(string applicationStartupPath, string customizationSetName, out ResourceSystem resourceSystem, out PlanetaryFacilityDefinitionList facilityDefinitions, out ComponentDefinition[] componentDefinitions, out FighterSpecificationList fighterSpecifications, out ResearchNodeDefinitionList researchNodeDefinitions, out GovernmentAttributesList governments, out RaceFamilyList raceFamilies, out PlagueList plagues)
        {
            facilityDefinitions = InitializePlanetaryFacilityDefinitions(applicationStartupPath, customizationSetName);
            PlanetaryFacilityDefinitionsStatic = facilityDefinitions.Clone();
            resourceSystem = InitializeResourceDefinitions(applicationStartupPath, customizationSetName);
            ResourceSystemStatic.Initialize(resourceSystem);
            componentDefinitions = InitializeComponentDefinitions(resourceSystem, applicationStartupPath, customizationSetName);
            ComponentDefinition[] array = new ComponentDefinition[componentDefinitions.Length];
            Array.Copy(componentDefinitions, array, componentDefinitions.Length);
            ComponentDefinitionsStatic = array;
            GenerateOrderedComponentLists();
            resourceSystem.Update(ComponentDefinitionsStatic);
            ResourceSystemStatic.Initialize(resourceSystem, ComponentDefinitionsStatic);
            fighterSpecifications = GenerateFighterSpecifications(applicationStartupPath, customizationSetName);
            FighterSpecificationsStatic = fighterSpecifications.Clone();
            plagues = InitializePlagues(applicationStartupPath, customizationSetName);
            PlaguesStatic = plagues.Clone();
            governments = InitializeGovernments(applicationStartupPath, customizationSetName);
            InitializeGovernmentBiases(applicationStartupPath, customizationSetName, ref governments);
            GovernmentsStatic = governments.Clone();
            researchNodeDefinitions = InitializeResearchNodeDefinitions(applicationStartupPath, customizationSetName);
            ResearchNodeDefinitionsStatic = researchNodeDefinitions.Clone();
            raceFamilies = InitializeRaceFamilies(applicationStartupPath, customizationSetName);
            InitializeRaceFamilyBiases(applicationStartupPath, customizationSetName, ref raceFamilies);
            RaceFamiliesStatic = raceFamilies.Clone();
            CopyGalaxyStaticDataToBackup();
        }

        public static void CopyBackupGalaxyStaticDataToStatic()
        {
            ResourceSystemStatic.Initialize(BackupResourceSystemStatic);
            PlanetaryFacilityDefinitionsStatic = BackupPlanetaryFacilityDefinitionsStatic.Clone();
            ComponentDefinition[] array = new ComponentDefinition[BackupComponentDefinitionsStatic.Length];
            Array.Copy(BackupComponentDefinitionsStatic, array, BackupComponentDefinitionsStatic.Length);
            ComponentDefinitionsStatic = array;
            GenerateOrderedComponentLists();
            FighterSpecificationsStatic = BackupFighterSpecificationsStatic.Clone();
            PlaguesStatic = BackupPlaguesStatic.Clone();
            ResearchNodeDefinitionsStatic = BackupResearchNodeDefinitionsStatic.Clone();
            GovernmentsStatic = BackupGovernmentsStatic.Clone();
            RaceFamiliesStatic = BackupRaceFamiliesStatic.Clone();
        }

        private static void CopyGalaxyStaticDataToBackup()
        {
            BackupResourceSystemStatic.Initialize(ResourceSystemStatic);
            BackupPlanetaryFacilityDefinitionsStatic = PlanetaryFacilityDefinitionsStatic.Clone();
            ComponentDefinition[] array = new ComponentDefinition[ComponentDefinitionsStatic.Length];
            Array.Copy(ComponentDefinitionsStatic, array, ComponentDefinitionsStatic.Length);
            BackupComponentDefinitionsStatic = array;
            BackupFighterSpecificationsStatic = FighterSpecificationsStatic.Clone();
            BackupPlaguesStatic = PlaguesStatic.Clone();
            BackupResearchNodeDefinitionsStatic = ResearchNodeDefinitionsStatic.Clone();
            BackupGovernmentsStatic = GovernmentsStatic.Clone();
            BackupRaceFamiliesStatic = RaceFamiliesStatic.Clone();
        }

        public static void AssignGalaxyDataToStatic(ResourceSystem resourceSystem, PlanetaryFacilityDefinitionList facilityDefinitions, ComponentDefinition[] componentDefinitions, FighterSpecificationList fighterSpecifications, ResearchNodeDefinitionList researchNodeDefinitions, GovernmentAttributesList governments, RaceFamilyList raceFamilies, PlagueList plagues)
        {
            CopyGalaxyStaticDataToBackup();
            ResourceSystemStatic.Initialize(resourceSystem);
            PlanetaryFacilityDefinitionsStatic = facilityDefinitions.Clone();
            ComponentDefinition[] array = new ComponentDefinition[componentDefinitions.Length];
            Array.Copy(componentDefinitions, array, componentDefinitions.Length);
            ComponentDefinitionsStatic = array;
            GenerateOrderedComponentLists();
            FighterSpecificationsStatic = fighterSpecifications.Clone();
            PlaguesStatic = plagues.Clone();
            ResearchNodeDefinitionsStatic = researchNodeDefinitions.Clone();
            GovernmentsStatic = governments.Clone();
            RaceFamiliesStatic = raceFamilies.Clone();
        }

        public void AssignGalaxyStaticDataToInstance()
        {
            ResourceSystem.Initialize(ResourceSystemStatic);
            PlanetaryFacilityDefinitions = PlanetaryFacilityDefinitionsStatic.Clone();
            ComponentDefinition[] array = new ComponentDefinition[ComponentDefinitionsStatic.Length];
            Array.Copy(ComponentDefinitionsStatic, array, ComponentDefinitionsStatic.Length);
            ComponentDefinitions = array;
            FighterSpecifications = FighterSpecificationsStatic.Clone();
            Plagues = PlaguesStatic.Clone();
            ResearchNodeDefinitions = ResearchNodeDefinitionsStatic.Clone();
            Governments = GovernmentsStatic.Clone();
            RaceFamilies = RaceFamiliesStatic.Clone();
        }

        static Galaxy()
        {
            FlagShapes = new List<Bitmap>();
            FlagShapesPirates = new List<Bitmap>();
            _CharacterList = new CharacterList();
            DesignSpecifications = new DesignSpecificationList();
            IndexMaxX = 50;
            IndexMaxY = 50;
            SizeX = 20000000;
            SizeY = 20000000;
            IndexSize = 400000;
            SectorMaxX = 10;
            SectorMaxY = 10;
            SectorSizeX = 2000000;
            SectorSizeY = 2000000;
            SectorSize = 2000000;
            HyperJumpThreshhold = 12000;
            BaseHyperJumpAccuracy = 3000.0;
            HyperJumpKickout = 10000;
            ThreatRange = 40000;
            StrikeRangeSquared = 90000.0;
            PatrolOrbitDistance = 400;
            EscortRange = 200;
            MaxSolarSystemSize = 23000;
            MaxMoonOrbitSize = 1600;
            MovementPrecision = 30;
            InvasionDropoffRange = 15;
            MovementDecelerationRangeInvasion = 50;
            MovementDecelerationRange = 150;
            MovementImpulseSpeed = 3;
            UndockRange = 30;
            RefuelRate = 40;
            ImpulseMargin = 5;
            ParentRelativeRange = 700;
            ParentRelativeRangeSquared = 490000;
            EscapeSprintDistance = 300;
            EscapeHyperDistance = 200000;
            ExplosionExpansionRate = 100;
            ExplosionMinimumLifetime = 55;
            ExplosionImageCount = 20;
            ExplosionHabitatImageCount = 120;
            HabitatColonizationThreshhold = 5;
            MiningStationResourceThreshhold = 10;
            HabitatSmallSpacePortPopulationRequirement = 1000000L;
            HabitatMediumSpacePortPopulationRequirement = 500000000L;
            HabitatLargeSpacePortPopulationRequirement = 3000000000L;
            BuildColonyShipPopulationRequirement = 500000000L;
            FreightBaseCharge = 20.0;
            FreightChargePerUnitPerDistance = 1E-05;
            ColonyAnnualResourceConsumptionRate = 1E-08;
            ColonyAnnualLuxuryResourceConsumptionRate = 2E-08;
            TypicalMaximumOrderFulfillmentDistance = 8000000;
            HabitatToEmpireThreshhold = 270000000000L;
            HabitatToEmpireMinimumIntelligence = 69;
            IncidentEvaluationAnnualNeutralizationAmount = 3;
            CivilityRatingAnnualNeutralizationAmount = 3;
            CivilityRatingAnnualRiseAmount = 1.5;
            TroopStrengthAnnualNeutralizationAmount = 1;
            TroopSizeAnnualRegenerationAmount = 50;
            TroopAnnualRecruitmentAmount = 150;
            OrderExpiryYears = 1.5;
            OrderExpiryYearsLuxury = 0.6;
            MinimumDiplomacyTradeProposalIntervalYears = 1.25;
            MinimumLevelForRefuellingPoint = 600;
            RefuelThreshholdPercentage = 0.3;
            MinimumHabitatPopulationAmount = 1000000L;
            MinimumDesignReviewIntervalYears = 0.5;
            MinimumContractSize = 300;
            MiningStationResourceTransportThreshhold = 1000;
            ColonyResourceTransportThreshhold = 300;
            ColonyMinimumResourceReorderAmount = 500;
            MinimumLuxuryResourceReorderAmount = 100;
            MinimumRestrictedResourceReorderAmount = 10;
            MinimumOrderAmount = 60;
            MinimumDistanceBetweenBases = 120;
            DistressSignalResponseMaximumDistance = SectorSize;
            RetirementYears = 20;
            RetrofitYears = 1;
            MaximumConstructionQueueWaitTimeYears = 2.5;
            MaximumEmpireCount = 255;
            MajorColonyStrategicThreshhold = 20000;
            TorpedoWeaponHitRange = 25.0;
            AttackOvermatchFactor = 2.0;
            AttackEvaluationRangeFactor = 20000.0;
            ColonyMaximumTroopStrength = 150000;
            TroopAnnualMaintenance = 1000.0;
            AgentAnnualMaintenance = 1000.0;
            BlockadeEmpireEvaluationValue = -20;
            GovernmentStyleAffinityFactor = 10.0;
            SystemCompetitionColonyFactor = 20;
            SystemCompetitionMiningStationFactor = 4;
            AcceptableWarValueLossesBuiltObject = 0.35;
            AcceptableWarValueLossesColony = 0.2;
            DistressSignalLocationOverlapRangeSquared = 1000000.0;
            DistressSignalDateRange = 90000L;
            AllowableYearsMaintenanceFromCashOnHand = 3.0;
            FleetMaximumCount = 30;
            MouseHoverHabitatProximityRange = 120.0;
            EmpireAgeExpansionRateMinimum = 2.3;
            EmpireAgeExpansionRateMaximum = 2.7;
            PointBlankWeaponsRange = 50;
            EmpireEvaluationTrendingFactor = 300.0;
            IncidentImpactWhenDeclareWar = 40;
            DeclareWarReputationImpact = 1.0;
            TreatyOfferValidYears = 0.2;
            AttackOnPiratesRange = 6000000.0;
            EspionageStealResearchMaxAmount = 80000;
            DestroySilverMistReputationBonus = 1.5;
            TradeBonusAnnualIncrease = 0.1;
            TradeBonusMaximumFreeTrade = 0.2;
            TradeBonusMaximumFreeTradeAmount = 20000.0;
            TradeBonusMaximumMutualDefense = 0.3;
            TradeBonusMaximumMutualDefenseAmount = 30000.0;
            SubjugationTributePercentage = 0.1;
            IndependentTraderFreightRange = 5000000;
            ShipMarkupFactor = 5.0;
            ShipMarkupFactorPirates = 2.5;
            PirateEmpireMaxShips = 20;
            PirateEmpireMaxShipsSuper = 60;
            BuiltObjectDrawResizeFactor = 8.0;
            CreatureDrawResizeFactor = 8.0;
            TradeColonyThreshhold = 30;
            TradeMiningStationThreshhold = 10;
            TradeTerritoryMapThreshhold = 5;
            TradeGalaxyMapThreshhold = 15;
            TradeResearchThreshhold = 25;
            TradeResearchSpecialThreshhold = 50;
            FleetTypicalSize = 15;
            StrikeForceTypicalSize = 4;
            ShipMaintenanceCostPerSizeUnit = 1.0;
            ColonyStrategicResourceConsumptionPerMillionPerYear = 0.33;
            ColonyShipBuildFactor = 10.0;
            ColonyStateSupportCost = 1000.0;
            ColonyRevenueDivisor = 3500000.0;
            RevenueDropoffPopulationThreshholdMin = 20000000000L;
            RevenueDropoffPopulationThreshholdMax = 200000000000L;
            RevenueDropoffRate = 0.5;
            ColonyTaxResistanceThreshhold = 200000000000L;
            ColonyTaxResistanceRate = 1.5;
            ColonyDevelopmentLevelMaximumAnnualChange = 25;
            ColonyAnnualRestrictedResourceConsumptionRate = 1E-08;
            ColonyDevelopmentBaseline = 50;
            ColonyCorruptionPopulationThreshhold = 100000000L;
            MainViewShipHighlightDistance = 100;
            WarWhenStrongerAngerLevel = -80;
            WarWhenEvenAngerLevel = -60;
            WarIncidentLevel = -60;
            SpendingAgentPercentage = 0.05;
            SpendingTroopPercentage = 0.3;
            SpendingShipPercentage = 0.5;
            DesiredForeignColonyStrategicThreshhold = 60;
            DesiredForeignColonyResourceThreshhold = 40;
            WarWearinessMaximum = 40.0;
            SpacePortMinimumDistance = 700000.0;
            ResupplyShipMinimumDistance = 1000000.0;
            ColonyResourceLimit = 20000;
            RaceFamilyAffinityBias = 10.0;
            PlanetDestroyReputationImpact = 20;
            IndependentColonyInvadeReputationImpact = 4.0;
            PirateEmpireAttackDistance = 2000000.0;
            PirateEmpireAttackExpiryDateLength = 300000L;
            FleetAssembleAttackWaitPeriodPerShip = 25000L;
            MaximumMissionRefusals = 1;
            IdealTimeBetweenGifts = 1200000L;
            AdvancedTechBonusFactor = 200.0;
            ColonyBuildSpeedIdealPopulation = 10000000000.0;
            HabitatDamageAnnualRegeneration = 0.02;
            MinimumWarLengthPeriodYears = 0.5;
            ResourceLevelOneQuantity = 4000.0;
            ResourceLevelTwoQuantity = 2000.0;
            ResourceLevelThreeQuantity = 1000.0;
            ResourceLevelFourQuantity = 500.0;
            ResourceLevelFiveQuantity = 300.0;
            ResourceLevelSixQuantity = 150.0;
            ColonyCorruptionFactorDefault = 1.0;
            ResearchRateDefault = 1.0;
            PopulationGrowthRateDefault = 1.0;
            MiningRateDefault = 1.0;
            TargettingFactorDefault = 1.0;
            CountermeasuresFactorDefault = 1.0;
            ColonyShipBuildSpeedRateDefault = 1.0;
            WarWearinessFactorDefault = 1.0;
            ColonyIncomeFactorDefault = 1.0;
            RealSecondsInGalacticYear = 600;
            IntermediateProcessingSpan = new TimeSpan(0, 0, 3);
            PeriodicProcessingSpan = new TimeSpan(0, 0, 10);
            LongProcessingSpan = new TimeSpan(0, 0, 60);
            HugeProcessingSpan = new TimeSpan(0, 0, 240);
            YearLength = RealSecondsInGalacticYear * 1000;
            RndStatic = new Random();
            StartStarDate = 1260000000L;
            ResourceSystemStatic = new ResourceSystem();
            ComponentDefinitionsStatic = new ComponentDefinition[130];
            ResearchNodeDefinitionsStatic = new ResearchNodeDefinitionList();
            PlanetaryFacilityDefinitionsStatic = new PlanetaryFacilityDefinitionList();
            FighterSpecificationsStatic = new FighterSpecificationList();
            GovernmentsStatic = new GovernmentAttributesList();
            RaceFamiliesStatic = new RaceFamilyList();
            PlaguesStatic = new PlagueList();
            BackupResourceSystemStatic = new ResourceSystem();
            BackupComponentDefinitionsStatic = new ComponentDefinition[130];
            BackupResearchNodeDefinitionsStatic = new ResearchNodeDefinitionList();
            BackupPlanetaryFacilityDefinitionsStatic = new PlanetaryFacilityDefinitionList();
            BackupFighterSpecificationsStatic = new FighterSpecificationList();
            BackupGovernmentsStatic = new GovernmentAttributesList();
            BackupRaceFamiliesStatic = new RaceFamilyList();
            BackupPlaguesStatic = new PlagueList();
            DesignSpecificationComponentRuleList items = new DesignSpecificationComponentRuleList
        {
            new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.HyperDrive, 1),
            new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1)
        };
            DesignSpecificationComponentRuleList items2 = new DesignSpecificationComponentRuleList
        {
            new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1)
        };
            DesignSpecification designSpecification = new DesignSpecification(BuiltObjectSubRole.SmallSpacePort, mobile: false);
            designSpecification.ComponentRules.AddRange(items2);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ConstructionBuild, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationRecreationCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsEnergyLab, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsHighTechLab, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsWeaponsLab, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerEnergyPlant, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerHighTechPlant, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerWeaponsPlant, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 15));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponTorpedo, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.MediumSpacePort, mobile: false);
            designSpecification.ComponentRules.AddRange(items2);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ConstructionBuild, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationRecreationCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsEnergyLab, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsHighTechLab, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsWeaponsLab, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerEnergyPlant, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerHighTechPlant, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerWeaponsPlant, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorTraceScanner, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorLongRange, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.EnergyToFuel, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HyperStop, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 30));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ShieldRecharge, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.FighterBay, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonCannon, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponAreaDestruction, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.LargeSpacePort, mobile: false);
            designSpecification.ComponentRules.AddRange(items2);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 24));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ConstructionBuild, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationRecreationCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsEnergyLab, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsHighTechLab, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsWeaponsLab, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerEnergyPlant, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerHighTechPlant, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerWeaponsPlant, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorLongRange, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorTraceScanner, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.EnergyToFuel, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HyperStop, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 60));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 32));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ShieldRecharge, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.FighterBay, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 30));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonCannon, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponAreaDestruction, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.WeaponSuperArea, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.WeaponSuperBeam, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.ResortBase, mobile: false);
            designSpecification.ComponentRules.AddRange(items2);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StoragePassenger, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationRecreationCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponTorpedo, 4));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.EnergyResearchStation, mobile: false)
            {
                ComponentRules =
            {
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsEnergyLab, 6),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationRecreationCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponBeam, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorStealth, 1)
            }
            };
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.WeaponsResearchStation, mobile: false)
            {
                ComponentRules =
            {
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsWeaponsLab, 6),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationRecreationCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponBeam, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorStealth, 1)
            }
            };
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.HighTechResearchStation, mobile: false)
            {
                ComponentRules =
            {
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.LabsHighTechLab, 6),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationRecreationCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponBeam, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorStealth, 1)
            }
            };
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.MonitoringStation, mobile: false)
            {
                ComponentRules =
            {
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 3),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorLongRange, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 6),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 6),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponBeam, 6),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorStealth, 1)
            }
            };
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.DefensiveBase, mobile: false)
            {
                ComponentRules =
            {
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 3),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 4),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 6),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorTraceScanner, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 30),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 16),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ShieldRecharge, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.FighterBay, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 20),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 10),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonCannon, 2),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 12),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentCategoryType.WeaponArea, 1),
                new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1)
            }
            };
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.ResupplyShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 16));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorGasExtractor, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorResourceProfileSensor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorLongRange, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.FighterBay, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.WeaponIonPulse, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 20));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.ColonyShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationColonization, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorResourceProfileSensor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 2));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.PassengerShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 7));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StoragePassenger, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 2));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.ConstructionShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ConstructionBuild, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerEnergyPlant, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerHighTechPlant, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ManufacturerWeaponsPlant, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 2));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.ExplorationShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorResourceProfileSensor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.SmallFreighter, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.MediumFreighter, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.LargeFreighter, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.Escort, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.Frigate, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.Destroyer, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 7));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageTroop, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.Cruiser, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 10));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargettingFleet, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasuresFleet, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageTroop, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.FighterBay, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.CapitalShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ShieldRecharge, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 30));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonCannon, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HyperDeny, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargettingFleet, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasuresFleet, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorTraceScanner, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageTroop, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.FighterBay, 2));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.TroopTransport, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageTroop, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorScannerJammer, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.Carrier, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 12));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 5));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponPointDefense, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ComputerTargettingFleet, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.ComputerCountermeasuresFleet, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.ShouldHave, ComponentType.SensorTraceScanner, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.DamageControl, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponIonDefense, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.FighterBay, 5));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.GasMiningStation, mobile: false);
            designSpecification.ComponentRules.AddRange(items2);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorGasExtractor, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorLuxury, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 2));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.MiningStation, mobile: false);
            designSpecification.ComponentRules.AddRange(items2);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorMine, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorLuxury, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 2));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.GasMiningShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorGasExtractor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorLuxury, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 1));
            DesignSpecifications.Add(designSpecification);
            designSpecification = new DesignSpecification(BuiltObjectSubRole.MiningShip, mobile: true);
            designSpecification.ComponentRules.AddRange(items);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EnergyCollector, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorMine, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ExtractorLuxury, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Armor, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 1));
            DesignSpecifications.Add(designSpecification);
        }

        public static void SetGalaxyPhysicalDimensions(int sectorWidth, int sectorHeight)
        {
            sectorWidth = Math.Max(4, Math.Min(15, sectorWidth));
            sectorHeight = Math.Max(4, Math.Min(15, sectorHeight));
            SectorMaxX = sectorWidth;
            SectorMaxY = sectorHeight;
            SizeX = sectorWidth * SectorSizeX;
            SizeY = sectorHeight * SectorSizeY;
            IndexMaxX = SizeX / IndexSize;
            IndexMaxY = SizeY / IndexSize;
        }

        public static void SetHyperDriveSpeeds(ResourceSystem resourceSystem, double multiplier, int baseTechCost, string applicationStartupPath, string customizationSetName)
        {
            ComponentDefinitionsStatic = InitializeComponentDefinitions(resourceSystem, applicationStartupPath, customizationSetName);
            SetResearchCosts(baseTechCost, ResearchNodeDefinitionsStatic = InitializeResearchNodeDefinitions(applicationStartupPath, customizationSetName));
            for (int i = 0; i < ComponentDefinitionsStatic.Length; i++)
            {
                ComponentDefinition componentDefinition = ComponentDefinitionsStatic[i];
                if (componentDefinition.Category == ComponentCategoryType.HyperDrive)
                {
                    double num = (double)componentDefinition.Value1 * multiplier;
                    componentDefinition.Value1 = (int)num;
                }
            }
            for (int j = 0; j < ResearchNodeDefinitionsStatic.Count; j++)
            {
                ResearchNodeDefinition researchNodeDefinition = ResearchNodeDefinitionsStatic[j];
                if (researchNodeDefinition.ComponentImprovements == null || researchNodeDefinition.ComponentImprovements.Count <= 0)
                {
                    continue;
                }
                for (int k = 0; k < researchNodeDefinition.ComponentImprovements.Count; k++)
                {
                    if (researchNodeDefinition.ComponentImprovements[k].ImprovedComponent.Category == ComponentCategoryType.HyperDrive)
                    {
                        double num2 = (double)researchNodeDefinition.ComponentImprovements[k].Value1 * multiplier;
                        researchNodeDefinition.ComponentImprovements[k].Value1 = (int)num2;
                    }
                }
            }
        }

        public static void SetResearchCosts(int baseTechCost, ResearchNodeDefinitionList researchNodeDefinitions)
        {
            for (int i = 0; i < researchNodeDefinitions.Count; i++)
            {
                ResearchNodeDefinition researchNodeDefinition = researchNodeDefinitions[i];
                double num = 1.0;
                num = ((researchNodeDefinition.TechLevel >= 100) ? 256.0 : Math.Pow(2.0, (double)researchNodeDefinition.TechLevel - 1.0));
                if (researchNodeDefinition.BaseCostMultiplierOverride > 0.0)
                {
                    num = researchNodeDefinition.BaseCostMultiplierOverride;
                }
                researchNodeDefinition.Cost = (float)(num * (double)baseTechCost);
                if (researchNodeDefinition.Components != null && researchNodeDefinition.Components.Count > 0)
                {
                    for (int j = 0; j < researchNodeDefinition.Components.Count; j++)
                    {
                        ComponentDefinitionsStatic[researchNodeDefinition.Components[j].ComponentID].TechLevel = researchNodeDefinition.TechLevel;
                    }
                }
                if (researchNodeDefinition.ComponentImprovements != null && researchNodeDefinition.ComponentImprovements.Count > 0)
                {
                    for (int k = 0; k < researchNodeDefinition.ComponentImprovements.Count; k++)
                    {
                        researchNodeDefinition.ComponentImprovements[k].TechLevel = researchNodeDefinition.TechLevel;
                    }
                }
            }
        }

        public static FighterSpecificationList GenerateFighterSpecifications(string applicationStartupPath, string customizationSetName)
        {
            FighterSpecificationList fighterSpecificationList = new FighterSpecificationList();
            string text = "fighters.txt";
            string filePath = applicationStartupPath + "\\" + text;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\" + text;
                if (File.Exists(text2))
                {
                    filePath = text2;
                }
            }
            fighterSpecificationList.LoadFromFile(filePath);
            return fighterSpecificationList;
        }

        public static ComponentList GenerateOrderedComponentList(ComponentCategoryType category, int valueBase, int valueDivisor)
        {
            ComponentList componentList = new ComponentList();
            List<double> list = new List<double>();
            ComponentDefinition[] componentDefinitionsStatic = ComponentDefinitionsStatic;
            foreach (ComponentDefinition componentDefinition in componentDefinitionsStatic)
            {
                if (componentDefinition.Category == category)
                {
                    componentList.Add(new Component(componentDefinition.ComponentID));
                    int num = 0;
                    int num2 = 0;
                    switch (valueBase)
                    {
                        case 1:
                            num = componentDefinition.Value1;
                            break;
                        case 2:
                            num = componentDefinition.Value2;
                            break;
                        case 3:
                            num = componentDefinition.Value3;
                            break;
                        case 4:
                            num = componentDefinition.Value4;
                            break;
                        case 5:
                            num = componentDefinition.Value5;
                            break;
                        case 6:
                            num = componentDefinition.Value6;
                            break;
                    }
                    switch (valueDivisor)
                    {
                        case 1:
                            num2 = componentDefinition.Value1;
                            break;
                        case 2:
                            num2 = componentDefinition.Value2;
                            break;
                        case 3:
                            num2 = componentDefinition.Value3;
                            break;
                        case 4:
                            num2 = componentDefinition.Value4;
                            break;
                        case 5:
                            num2 = componentDefinition.Value5;
                            break;
                        case 6:
                            num2 = componentDefinition.Value6;
                            break;
                    }
                    double item = (double)num / (double)num2;
                    list.Add(item);
                }
            }
            Component[] array = componentList.ToArray();
            double[] keys = list.ToArray();
            Array.Sort(keys, array);
            Array.Reverse(array);
            componentList.Clear();
            componentList.AddRange(array);
            return componentList;
        }

        public static ComponentList GenerateOrderedComponentList(ComponentType type, int valueBase, int valueDivisor)
        {
            ComponentList componentList = new ComponentList();
            List<double> list = new List<double>();
            ComponentDefinition[] componentDefinitionsStatic = ComponentDefinitionsStatic;
            foreach (ComponentDefinition componentDefinition in componentDefinitionsStatic)
            {
                if (componentDefinition.Type == type)
                {
                    componentList.Add(new Component(componentDefinition.ComponentID));
                    int num = 0;
                    int num2 = 0;
                    switch (valueBase)
                    {
                        case 1:
                            num = componentDefinition.Value1;
                            break;
                        case 2:
                            num = componentDefinition.Value2;
                            break;
                        case 3:
                            num = componentDefinition.Value3;
                            break;
                        case 4:
                            num = componentDefinition.Value4;
                            break;
                        case 5:
                            num = componentDefinition.Value5;
                            break;
                        case 6:
                            num = componentDefinition.Value6;
                            break;
                    }
                    switch (valueDivisor)
                    {
                        case 1:
                            num2 = componentDefinition.Value1;
                            break;
                        case 2:
                            num2 = componentDefinition.Value2;
                            break;
                        case 3:
                            num2 = componentDefinition.Value3;
                            break;
                        case 4:
                            num2 = componentDefinition.Value4;
                            break;
                        case 5:
                            num2 = componentDefinition.Value5;
                            break;
                        case 6:
                            num2 = componentDefinition.Value6;
                            break;
                    }
                    double item = (double)num / (double)num2;
                    list.Add(item);
                }
            }
            Component[] array = componentList.ToArray();
            double[] keys = list.ToArray();
            Array.Sort(keys, array);
            Array.Reverse(array);
            componentList.Clear();
            componentList.AddRange(array);
            return componentList;
        }

        public static ComponentImprovementList GenerateOrderedComponentImprovementList(ComponentCategoryType category, int valueType)
        {
            ComponentList components = GenerateOrderedComponentList(category, valueType, orderHighestToLowest: true);
            return new ComponentImprovementList(components);
        }

        public static ComponentList GenerateOrderedComponentList(ComponentCategoryType category, int valueType)
        {
            return GenerateOrderedComponentList(category, valueType, orderHighestToLowest: true);
        }

        public static ComponentList GenerateOrderedComponentList(ComponentCategoryType category, int valueType, bool orderHighestToLowest)
        {
            ComponentList componentList = new ComponentList();
            List<int> list = new List<int>();
            ComponentDefinition[] componentDefinitionsStatic = ComponentDefinitionsStatic;
            foreach (ComponentDefinition componentDefinition in componentDefinitionsStatic)
            {
                if (CheckComponentMatchesCategoryStrict(componentDefinition, category))
                {
                    componentList.Add(new Component(componentDefinition.ComponentID));
                    switch (valueType)
                    {
                        case 1:
                            list.Add(componentDefinition.Value1);
                            break;
                        case 2:
                            list.Add(componentDefinition.Value2);
                            break;
                        case 3:
                            list.Add(componentDefinition.Value3);
                            break;
                        case 4:
                            list.Add(componentDefinition.Value4);
                            break;
                        case 5:
                            list.Add(componentDefinition.Value5);
                            break;
                        case 6:
                            list.Add(componentDefinition.Value6);
                            break;
                    }
                }
            }
            Component[] array = componentList.ToArray();
            int[] keys = list.ToArray();
            Array.Sort(keys, array);
            if (orderHighestToLowest)
            {
                Array.Reverse(array);
            }
            componentList.Clear();
            componentList.AddRange(array);
            return componentList;
        }

        public static bool CheckComponentMatchesCategoryStrict(ComponentDefinition component, ComponentCategoryType category)
        {
            return CheckComponentMatchesCategoryStrict(component.Category, component.Type, category);
        }

        public static bool CheckComponentMatchesCategoryStrict(ComponentCategoryType componentCategory, ComponentType componentType, ComponentCategoryType category)
        {
            switch (category)
            {
                case ComponentCategoryType.WeaponTorpedo:
                    switch (componentType)
                    {
                        case ComponentType.WeaponBombard:
                        case ComponentType.WeaponMissile:
                            return false;
                        case ComponentType.WeaponTorpedo:
                            return true;
                    }
                    break;
                case ComponentCategoryType.WeaponBeam:
                    switch (componentType)
                    {
                        case ComponentType.WeaponPhaser:
                        case ComponentType.WeaponRailGun:
                            return false;
                        case ComponentType.WeaponBeam:
                            return true;
                    }
                    break;
                default:
                    if (componentCategory == category)
                    {
                        return true;
                    }
                    break;
            }
            return false;
        }

        public static ComponentList GenerateOrderedComponentList(ComponentType type, int valueType)
        {
            ComponentList componentList = new ComponentList();
            List<int> list = new List<int>();
            ComponentDefinition[] componentDefinitionsStatic = ComponentDefinitionsStatic;
            foreach (ComponentDefinition componentDefinition in componentDefinitionsStatic)
            {
                if (componentDefinition.Type == type)
                {
                    componentList.Add(new Component(componentDefinition.ComponentID));
                    switch (valueType)
                    {
                        case 1:
                            list.Add(componentDefinition.Value1);
                            break;
                        case 2:
                            list.Add(componentDefinition.Value2);
                            break;
                        case 3:
                            list.Add(componentDefinition.Value3);
                            break;
                        case 4:
                            list.Add(componentDefinition.Value4);
                            break;
                        case 5:
                            list.Add(componentDefinition.Value5);
                            break;
                        case 6:
                            list.Add(componentDefinition.Value6);
                            break;
                    }
                }
            }
            Component[] array = componentList.ToArray();
            int[] keys = list.ToArray();
            Array.Sort(keys, array);
            Array.Reverse(array);
            componentList.Clear();
            componentList.AddRange(array);
            return componentList;
        }

        public static float CalculateTroopMaintenanceMultiplier(Race race)
        {
            float result = 1f;
            if (race != null && race.TroopMaintenanceSavings > 0)
            {
                result = (float)(1.0 - (double)race.TroopMaintenanceSavings / 100.0);
            }
            return result;
        }

        public static List<string> LoadColonyNames(string applicationStartupPath, string customizationSetName)
        {
            List<string> list = new List<string>();
            int num = 0;
            string text = applicationStartupPath + "\\colonyNames.txt";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\colonyNames.txt";
            }
            try
            {
                if (!File.Exists(text))
                {
                    return list;
                }
                using FileStream stream = File.OpenRead(text);
                using StreamReader streamReader = new StreamReader(stream);
                while (!streamReader.EndOfStream)
                {
                    string validFileLine = GetValidFileLine(streamReader);
                    num++;
                    if (string.IsNullOrEmpty(validFileLine))
                    {
                        continue;
                    }
                    string[] array = validFileLine.Replace(" ", "").Split(',');
                    for (int i = 0; i < array.Length; i++)
                    {
                        if (!string.IsNullOrWhiteSpace(array[i]))
                        {
                            list.Add(array[i]);
                        }
                    }
                }
                return list;
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error at line " + num + " reading file " + text);
            }
        }

        public static SubRoleNameSet LoadShipNames(string applicationStartupPath, string customizationSetName)
        {
            int num = 0;
            string text = applicationStartupPath + "\\shipNames.txt";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\shipNames.txt";
            }
            string[] names = Enum.GetNames(typeof(BuiltObjectSubRole));
            SubRoleNameSet subRoleNameSet = new SubRoleNameSet();
            try
            {
                if (!File.Exists(text))
                {
                    return subRoleNameSet;
                }
                FileStream fileStream = File.OpenRead(text);
                StreamReader streamReader = new StreamReader(fileStream);
                while (!streamReader.EndOfStream)
                {
                    string text2 = GetValidFileLine(streamReader);
                    num++;
                    if (string.IsNullOrEmpty(text2))
                    {
                        continue;
                    }
                    string text3 = string.Empty;
                    int num2 = text2.IndexOf(":");
                    if (num2 > 0)
                    {
                        text3 = text2.Substring(0, num2);
                        text3 = text3.Trim();
                    }
                    if (string.IsNullOrEmpty(text3))
                    {
                        continue;
                    }
                    BuiltObjectSubRole builtObjectSubRole = BuiltObjectSubRole.Undefined;
                    for (int i = 0; i < names.Length; i++)
                    {
                        if (names[i].ToLower(CultureInfo.InvariantCulture) == text3.ToLower(CultureInfo.InvariantCulture))
                        {
                            builtObjectSubRole = (BuiltObjectSubRole)Enum.Parse(typeof(BuiltObjectSubRole), text3, ignoreCase: true);
                            break;
                        }
                    }
                    if (builtObjectSubRole == BuiltObjectSubRole.Undefined)
                    {
                        continue;
                    }
                    if (text2.Length > num2)
                    {
                        text2 = text2.Substring(num2 + 1, text2.Length - (num2 + 1));
                    }
                    if (!string.IsNullOrEmpty(text2) && text2.Length > 0)
                    {
                        string[] array = text2.Split(',');
                        if (array.Length == 1 && string.IsNullOrEmpty(array[0].Trim()))
                        {
                            array = new string[0];
                        }
                        for (int j = 0; j < array.Length; j++)
                        {
                            string text4 = (array[j] = array[j].Trim());
                        }
                        SubRoleNameList subRoleNameList = new SubRoleNameList(builtObjectSubRole);
                        subRoleNameList.Names.AddRange(array);
                        subRoleNameSet.SubRoleNames.Add(subRoleNameList);
                    }
                }
                streamReader.Close();
                fileStream.Close();
                return subRoleNameSet;
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error at line " + num + " reading file " + text);
            }
        }

        private static string GetValidFileLine(StreamReader reader)
        {
            string text = string.Empty;
            while (!reader.EndOfStream && (string.IsNullOrEmpty(text) || text.Trim() == string.Empty || text.Trim().Substring(0, 1) == "'"))
            {
                text = reader.ReadLine();
            }
            return text;
        }

        public void LoadAgentNames(string applicationStartupPath, string customizationSetName)
        {
            int num = 0;
            string text = applicationStartupPath + "\\characterNames.txt";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\characterNames.txt";
            }
            if (!File.Exists(text))
            {
                text = applicationStartupPath + "\\characterNames.txt";
            }
            try
            {
                if (!File.Exists(text))
                {
                    throw new ApplicationException("Missing file: " + text);
                }
                FileStream fileStream = File.OpenRead(text);
                StreamReader streamReader = new StreamReader(fileStream);
                for (int i = 0; i < RaceFamilies.Count; i++)
                {
                    string[] item = GetValidFileLine(streamReader).Replace(" ", "").Split(',');
                    string[] item2 = GetValidFileLine(streamReader).Replace(" ", "").Split(',');
                    _AgentFirstNames.Add(item);
                    _AgentLastNames.Add(item2);
                }
                streamReader.Close();
                fileStream.Close();
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error at line " + num + " reading file " + text);
            }
        }

        public static List<Bitmap> LoadFlagShapes(string applicationStartupPath, string customizationSetName)
        {
            List<Bitmap> list = new List<Bitmap>();
            string path = applicationStartupPath + "\\images\\ui\\flagshapes\\";
            string path2 = applicationStartupPath + "\\customization\\" + customizationSetName + "\\images\\ui\\flagshapes\\";
            string[] array = new string[0];
            if (Directory.Exists(path2))
            {
                array = Directory.GetFiles(path2, "*.png", SearchOption.TopDirectoryOnly);
            }
            else if (Directory.Exists(path))
            {
                array = Directory.GetFiles(path, "*.png", SearchOption.TopDirectoryOnly);
            }
            Array.Sort(array);
            foreach (string text in array)
            {
                Bitmap bitmap = null;
                if (File.Exists(text))
                {
                    bitmap = new Bitmap(text);
                    list.Add(bitmap);
                }
            }
            return list;
        }

        public static List<Bitmap> LoadFlagShapesPirates(string applicationStartupPath, string customizationSetName)
        {
            List<Bitmap> list = new List<Bitmap>();
            string path = applicationStartupPath + "\\images\\ui\\flagshapes\\pirate\\";
            string path2 = applicationStartupPath + "\\customization\\" + customizationSetName + "\\images\\ui\\flagshapes\\pirate\\";
            string[] array = new string[0];
            if (Directory.Exists(path2))
            {
                array = Directory.GetFiles(path2, "*.png", SearchOption.TopDirectoryOnly);
            }
            else if (Directory.Exists(path))
            {
                array = Directory.GetFiles(path, "*.png", SearchOption.TopDirectoryOnly);
            }
            Array.Sort(array);
            foreach (string text in array)
            {
                Bitmap bitmap = null;
                if (File.Exists(text))
                {
                    bitmap = new Bitmap(text);
                    list.Add(bitmap);
                }
            }
            return list;
        }

        public ContractList DetermineContractsWithSupplier(StellarObject supplier)
        {
            ContractList contractList = new ContractList();
            for (int i = 0; i < Orders.Count; i++)
            {
                Order order = Orders[i];
                if (order == null || order.Contracts == null)
                {
                    continue;
                }
                for (int j = 0; j < order.Contracts.Count; j++)
                {
                    Contract contract = order.Contracts[j];
                    if (contract != null && contract.Supplier == supplier)
                    {
                        contractList.Add(contract);
                    }
                }
            }
            return contractList;
        }

        public static int ResolveTechFocusIndex(ComponentType type)
        {
            int result = 0;
            switch (type)
            {
                case ComponentType.WeaponPhaser:
                    result = 2;
                    break;
                case ComponentType.WeaponRailGun:
                    result = 3;
                    break;
                case ComponentType.WeaponBombard:
                    result = 5;
                    break;
                case ComponentType.WeaponMissile:
                    result = 6;
                    break;
                case ComponentType.Armor:
                    result = 10;
                    break;
                case ComponentType.EngineMainThrust:
                    result = 13;
                    break;
                case ComponentType.EngineVectoring:
                    result = 14;
                    break;
                case ComponentType.DamageControl:
                    result = 18;
                    break;
                case ComponentType.ComputerTargetting:
                    result = 19;
                    break;
                case ComponentType.ComputerCountermeasures:
                    result = 20;
                    break;
                case ComponentType.HabitationMedicalCenter:
                    result = 22;
                    break;
                case ComponentType.HabitationRecreationCenter:
                    result = 23;
                    break;
                case ComponentType.WeaponTractorBeam:
                    result = 24;
                    break;
                case ComponentType.AssaultPod:
                    result = 25;
                    break;
                case ComponentType.WeaponGravityBeam:
                    result = 26;
                    break;
                case ComponentType.WeaponAreaGravity:
                    result = 27;
                    break;
            }
            return result;
        }

        public static int ResolveTechFocusIndex(ComponentCategoryType category)
        {
            int result = 0;
            switch (category)
            {
                case ComponentCategoryType.WeaponBeam:
                    result = 1;
                    break;
                case ComponentCategoryType.WeaponTorpedo:
                    result = 4;
                    break;
                case ComponentCategoryType.WeaponArea:
                    result = 7;
                    break;
                case ComponentCategoryType.WeaponIon:
                    result = 8;
                    break;
                case ComponentCategoryType.Fighter:
                    result = 9;
                    break;
                case ComponentCategoryType.Shields:
                    result = 11;
                    break;
                case ComponentCategoryType.Reactor:
                    result = 12;
                    break;
                case ComponentCategoryType.HyperDrive:
                    result = 15;
                    break;
                case ComponentCategoryType.HyperDisrupt:
                    result = 16;
                    break;
                case ComponentCategoryType.Construction:
                    result = 17;
                    break;
                case ComponentCategoryType.Sensor:
                    result = 21;
                    break;
                case ComponentCategoryType.AssaultPod:
                    result = 25;
                    break;
            }
            return result;
        }

        public static ComponentCategoryType ResolveTechDisallow(int index)
        {
            ComponentCategoryType componentCategoryType = ComponentCategoryType.Undefined;
            return index switch
            {
                1 => ComponentCategoryType.WeaponTorpedo,
                2 => ComponentCategoryType.WeaponPointDefense,
                3 => ComponentCategoryType.WeaponArea,
                4 => ComponentCategoryType.WeaponIon,
                5 => ComponentCategoryType.Fighter,
                6 => ComponentCategoryType.Armor,
                7 => ComponentCategoryType.HyperDisrupt,
                8 => ComponentCategoryType.Sensor,
                _ => ComponentCategoryType.Undefined,
            };
        }

        public static bool CheckUsePlanetDestroyerAgainstEmpire(Empire attacker, Empire target)
        {
            bool result = false;
            if (attacker != null && attacker.Policy != null && target != null)
            {
                switch (attacker.Policy.WarAttacksAllowPlanetDestroying)
                {
                    case 0:
                        result = true;
                        break;
                    case 1:
                        {
                            EmpireEvaluation empireEvaluation = attacker.ObtainEmpireEvaluation(target);
                            if (empireEvaluation.OverallAttitude <= -80)
                            {
                                result = true;
                            }
                            break;
                        }
                    case 2:
                        if (target.CivilityRating <= -50.0)
                        {
                            result = true;
                        }
                        break;
                    case 3:
                        result = false;
                        break;
                }
            }
            return result;
        }

        public static bool CheckUseBombardmentAgainstEmpire(Empire attacker, Empire target)
        {
            bool result = false;
            if (attacker != null && attacker.Policy != null && target != null)
            {
                switch (attacker.Policy.WarAttacksAllowColonyBombardment)
                {
                    case 0:
                        result = true;
                        break;
                    case 1:
                        {
                            EmpireEvaluation empireEvaluation = attacker.ObtainEmpireEvaluation(target);
                            if (empireEvaluation.OverallAttitude <= -80)
                            {
                                result = true;
                            }
                            break;
                        }
                    case 2:
                        if (target.CivilityRating <= -50.0)
                        {
                            result = true;
                        }
                        break;
                    case 3:
                        result = false;
                        break;
                }
            }
            return result;
        }

        public EmpireList SortEmpiresByMilitaryPriority(Empire empire, EmpireList targetEmpires)
        {
            double[] array = new double[targetEmpires.Count];
            Empire[] array2 = new Empire[targetEmpires.Count];
            for (int i = 0; i < targetEmpires.Count; i++)
            {
                Empire empire2 = targetEmpires[i];
                if (empire2 != null)
                {
                    double num = empire2.TotalColonyStrategicValue / 1000;
                    EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(empire2);
                    num *= (double)(empireEvaluation.OverallAttitude * -1);
                    if (empire2 == PlayerEmpire && empire != PlayerEmpire)
                    {
                        num *= 2.0;
                    }
                    array[i] = num;
                    array2[i] = targetEmpires[i];
                }
            }
            Array.Sort(array, array2);
            Array.Reverse(array2);
            EmpireList empireList = new EmpireList();
            empireList.AddRange(array2);
            return empireList;
        }

        public static HabitatType ResolveColonyHabitatTypeByIndexIncludingUndefinedDesertBeforeOcean(int index)
        {
            return index switch
            {
                0 => HabitatType.Undefined,
                1 => HabitatType.Continental,
                2 => HabitatType.MarshySwamp,
                3 => HabitatType.Desert,
                4 => HabitatType.Ocean,
                5 => HabitatType.Ice,
                6 => HabitatType.Volcanic,
                _ => HabitatType.Undefined,
            };
        }

        public static HabitatType ResolveColonyHabitatTypeByIndexIncludingUndefined(int index)
        {
            return index switch
            {
                0 => HabitatType.Undefined,
                1 => HabitatType.Continental,
                2 => HabitatType.MarshySwamp,
                3 => HabitatType.Ocean,
                4 => HabitatType.Desert,
                5 => HabitatType.Ice,
                6 => HabitatType.Volcanic,
                _ => HabitatType.Undefined,
            };
        }

        public static HabitatType ResolveColonyHabitatTypeByIndex(int index)
        {
            return index switch
            {
                0 => HabitatType.Continental,
                1 => HabitatType.MarshySwamp,
                2 => HabitatType.Ocean,
                3 => HabitatType.Desert,
                4 => HabitatType.Ice,
                5 => HabitatType.Volcanic,
                _ => HabitatType.Continental,
            };
        }

        public static HabitatType ResolveColonyHabitatTypeByIndexDesertBeforeOcean(int index)
        {
            return index switch
            {
                0 => HabitatType.Continental,
                1 => HabitatType.MarshySwamp,
                2 => HabitatType.Desert,
                3 => HabitatType.Ocean,
                4 => HabitatType.Ice,
                5 => HabitatType.Volcanic,
                _ => HabitatType.Continental,
            };
        }

        public static int ResolveColonyIndexByHabitatTypeDesertBeforeOcean(HabitatType type)
        {
            return type switch
            {
                HabitatType.Continental => 0,
                HabitatType.MarshySwamp => 1,
                HabitatType.Desert => 2,
                HabitatType.Ocean => 3,
                HabitatType.Ice => 4,
                HabitatType.Volcanic => 5,
                _ => -1,
            };
        }

        public static HabitatType ResolveHabitatTypeByIndexIncludeGasClouds(int index)
        {
            return index switch
            {
                0 => HabitatType.Continental,
                1 => HabitatType.MarshySwamp,
                2 => HabitatType.Ocean,
                3 => HabitatType.Desert,
                4 => HabitatType.Ice,
                5 => HabitatType.Volcanic,
                6 => HabitatType.BarrenRock,
                7 => HabitatType.GasGiant,
                8 => HabitatType.FrozenGasGiant,
                9 => HabitatType.Metal,
                10 => HabitatType.Ammonia,
                11 => HabitatType.Argon,
                12 => HabitatType.CarbonDioxide,
                13 => HabitatType.Chlorine,
                14 => HabitatType.Helium,
                15 => HabitatType.Hydrogen,
                16 => HabitatType.NitrogenOxygen,
                17 => HabitatType.Oxygen,
                _ => HabitatType.Continental,
            };
        }

        public static CreatureType ResolveCreatureTypeByIndex(int index)
        {
            CreatureType result = CreatureType.Undefined;
            switch (index)
            {
                case 1:
                    result = CreatureType.Kaltor;
                    break;
                case 2:
                    result = CreatureType.RockSpaceSlug;
                    break;
                case 3:
                    result = CreatureType.DesertSpaceSlug;
                    break;
                case 4:
                    result = CreatureType.Ardilus;
                    break;
                case 5:
                    result = CreatureType.SilverMist;
                    break;
            }
            return result;
        }

        public static Component ResolveSpecialComponent(int specialComponentCode)
        {
            Component result = null;
            if (specialComponentCode >= 0 && specialComponentCode < ComponentDefinitionsStatic.Length)
            {
                result = new Component(specialComponentCode);
            }
            return result;
        }

        public static PlanetaryFacilityDefinition ResolveRaceWonder(int index)
        {
            PlanetaryFacilityDefinition planetaryFacilityDefinition = null;
            return index switch
            {
                1 => PlanetaryFacilityDefinitionsStatic[21],
                2 => PlanetaryFacilityDefinitionsStatic[22],
                3 => PlanetaryFacilityDefinitionsStatic[23],
                4 => PlanetaryFacilityDefinitionsStatic[24],
                _ => null,
            };
        }

        public static int DetermineIndexOfComponentCategory(ComponentCategoryType category)
        {
            return category switch
            {
                ComponentCategoryType.Armor => 0,
                ComponentCategoryType.AssaultPod => 1,
                ComponentCategoryType.Computer => 2,
                ComponentCategoryType.Construction => 3,
                ComponentCategoryType.EnergyCollector => 4,
                ComponentCategoryType.Engine => 5,
                ComponentCategoryType.Extractor => 6,
                ComponentCategoryType.Fighter => 7,
                ComponentCategoryType.Habitation => 8,
                ComponentCategoryType.HyperDisrupt => 9,
                ComponentCategoryType.HyperDrive => 10,
                ComponentCategoryType.Labs => 11,
                ComponentCategoryType.Manufacturer => 12,
                ComponentCategoryType.Reactor => 13,
                ComponentCategoryType.Sensor => 14,
                ComponentCategoryType.ShieldRecharge => 15,
                ComponentCategoryType.Shields => 16,
                ComponentCategoryType.Storage => 17,
                ComponentCategoryType.WeaponArea => 18,
                ComponentCategoryType.WeaponBeam => 19,
                ComponentCategoryType.WeaponGravity => 20,
                ComponentCategoryType.WeaponIon => 21,
                ComponentCategoryType.WeaponPointDefense => 22,
                ComponentCategoryType.WeaponSuperArea => 23,
                ComponentCategoryType.WeaponSuperBeam => 24,
                ComponentCategoryType.WeaponTorpedo => 25,
                ComponentCategoryType.WeaponSuperTorpedo => 26,
                _ => -1,
            };
        }

        public static ComponentCategoryType DetermineComponentCategoryByIndex(int index)
        {
            return index switch
            {
                0 => ComponentCategoryType.Armor,
                1 => ComponentCategoryType.AssaultPod,
                2 => ComponentCategoryType.Computer,
                3 => ComponentCategoryType.Construction,
                4 => ComponentCategoryType.EnergyCollector,
                5 => ComponentCategoryType.Engine,
                6 => ComponentCategoryType.Extractor,
                7 => ComponentCategoryType.Fighter,
                8 => ComponentCategoryType.Habitation,
                9 => ComponentCategoryType.HyperDisrupt,
                10 => ComponentCategoryType.HyperDrive,
                11 => ComponentCategoryType.Labs,
                12 => ComponentCategoryType.Manufacturer,
                13 => ComponentCategoryType.Reactor,
                14 => ComponentCategoryType.Sensor,
                15 => ComponentCategoryType.ShieldRecharge,
                16 => ComponentCategoryType.Shields,
                17 => ComponentCategoryType.Storage,
                18 => ComponentCategoryType.WeaponArea,
                19 => ComponentCategoryType.WeaponBeam,
                20 => ComponentCategoryType.WeaponGravity,
                21 => ComponentCategoryType.WeaponIon,
                22 => ComponentCategoryType.WeaponPointDefense,
                23 => ComponentCategoryType.WeaponSuperArea,
                24 => ComponentCategoryType.WeaponSuperBeam,
                25 => ComponentCategoryType.WeaponTorpedo,
                26 => ComponentCategoryType.WeaponSuperTorpedo,
                _ => ComponentCategoryType.Undefined,
            };
        }

        public static void ResolveTechFocus(int index, out ComponentCategoryType category, out ComponentType type)
        {
            category = ComponentCategoryType.Undefined;
            type = ComponentType.Undefined;
            switch (index)
            {
                case 1:
                    category = ComponentCategoryType.WeaponBeam;
                    break;
                case 2:
                    type = ComponentType.WeaponPhaser;
                    break;
                case 3:
                    type = ComponentType.WeaponRailGun;
                    break;
                case 4:
                    category = ComponentCategoryType.WeaponTorpedo;
                    break;
                case 5:
                    type = ComponentType.WeaponBombard;
                    break;
                case 6:
                    type = ComponentType.WeaponMissile;
                    break;
                case 7:
                    category = ComponentCategoryType.WeaponArea;
                    break;
                case 8:
                    category = ComponentCategoryType.WeaponIon;
                    break;
                case 9:
                    category = ComponentCategoryType.Fighter;
                    break;
                case 10:
                    type = ComponentType.Armor;
                    break;
                case 11:
                    category = ComponentCategoryType.Shields;
                    break;
                case 12:
                    category = ComponentCategoryType.Reactor;
                    break;
                case 13:
                    type = ComponentType.EngineMainThrust;
                    break;
                case 14:
                    type = ComponentType.EngineVectoring;
                    break;
                case 15:
                    category = ComponentCategoryType.HyperDrive;
                    break;
                case 16:
                    category = ComponentCategoryType.HyperDisrupt;
                    break;
                case 17:
                    category = ComponentCategoryType.Construction;
                    break;
                case 18:
                    type = ComponentType.DamageControl;
                    break;
                case 19:
                    type = ComponentType.ComputerTargetting;
                    break;
                case 20:
                    type = ComponentType.ComputerCountermeasures;
                    break;
                case 21:
                    category = ComponentCategoryType.Sensor;
                    break;
                case 22:
                    type = ComponentType.HabitationMedicalCenter;
                    break;
                case 23:
                    type = ComponentType.HabitationRecreationCenter;
                    break;
                case 24:
                    type = ComponentType.WeaponTractorBeam;
                    break;
                case 25:
                    type = ComponentType.AssaultPod;
                    break;
                case 26:
                    type = ComponentType.WeaponGravityBeam;
                    break;
                case 27:
                    type = ComponentType.WeaponAreaGravity;
                    break;
                case 28:
                    type = ComponentType.WeaponSuperBeam;
                    break;
                case 29:
                    type = ComponentType.WeaponSuperArea;
                    break;
                case 30:
                    type = ComponentType.WeaponSuperTorpedo;
                    break;
                case 31:
                    type = ComponentType.WeaponSuperMissile;
                    break;
                case 32:
                    type = ComponentType.WeaponSuperRailGun;
                    break;
                case 33:
                    type = ComponentType.WeaponSuperPhaser;
                    break;
            }
        }

        public static void ResolveTechFocuses(Empire empire, out List<ComponentCategoryType> techFocusCategories, out List<ComponentType> techFocusTypes)
        {
            ResolveTechFocuses(empire.Policy, out techFocusCategories, out techFocusTypes);
        }

        public static void ResolveTechFocuses(EmpirePolicy policy, out List<ComponentCategoryType> techFocusCategories, out List<ComponentType> techFocusTypes)
        {
            techFocusCategories = new List<ComponentCategoryType>();
            techFocusTypes = new List<ComponentType>();
            if (policy != null)
            {
                if (policy.ResearchDesignTechFocus1 != 0)
                {
                    techFocusCategories.Add(policy.ResearchDesignTechFocus1);
                }
                else if (policy.ResearchDesignTechFocusType1 != 0)
                {
                    techFocusTypes.Add(policy.ResearchDesignTechFocusType1);
                }
                if (policy.ResearchDesignTechFocus2 != 0)
                {
                    techFocusCategories.Add(policy.ResearchDesignTechFocus2);
                }
                else if (policy.ResearchDesignTechFocusType2 != 0)
                {
                    techFocusTypes.Add(policy.ResearchDesignTechFocusType2);
                }
                if (policy.ResearchDesignTechFocus3 != 0)
                {
                    techFocusCategories.Add(policy.ResearchDesignTechFocus3);
                }
                else if (policy.ResearchDesignTechFocusType3 != 0)
                {
                    techFocusTypes.Add(policy.ResearchDesignTechFocusType3);
                }
                if (policy.ResearchDesignTechFocus4 != 0)
                {
                    techFocusCategories.Add(policy.ResearchDesignTechFocus4);
                }
                else if (policy.ResearchDesignTechFocusType4 != 0)
                {
                    techFocusTypes.Add(policy.ResearchDesignTechFocusType4);
                }
                if (policy.ResearchDesignTechFocus5 != 0)
                {
                    techFocusCategories.Add(policy.ResearchDesignTechFocus5);
                }
                else if (policy.ResearchDesignTechFocusType5 != 0)
                {
                    techFocusTypes.Add(policy.ResearchDesignTechFocusType5);
                }
                if (policy.ResearchDesignTechFocus6 != 0)
                {
                    techFocusCategories.Add(policy.ResearchDesignTechFocus6);
                }
                else if (policy.ResearchDesignTechFocusType6 != 0)
                {
                    techFocusTypes.Add(policy.ResearchDesignTechFocusType6);
                }
            }
        }

        public static DesignList LoadDesigns(Stream stream, Empire empire, bool markLoadedDesignsAsOptimized, long starDate)
        {
            DesignList designList = new DesignList();
            if (empire != null && stream != null && stream.CanRead)
            {
                BinaryFormatter binaryFormatter = new BinaryFormatter();
                DesignList designList2 = (DesignList)binaryFormatter.Deserialize(stream);
                foreach (Design item in designList2)
                {
                    item.Empire = empire;
                }
                {
                    foreach (Design item2 in designList2)
                    {
                        bool flag = true;
                        foreach (Design design in empire.Designs)
                        {
                            if (item2.IsEquivalent(design) && item2.Name == design.Name)
                            {
                                flag = false;
                                break;
                            }
                        }
                        if (flag)
                        {
                            if (markLoadedDesignsAsOptimized)
                            {
                                item2.OptimizedDesign = 1;
                            }
                            item2.BuildCount = 0;
                            item2.DateCreated = starDate;
                            empire.Designs.Add(item2);
                            designList.Add(item2);
                        }
                    }
                    return designList;
                }
            }
            return designList;
        }

        public static DesignList LoadOptimizedDesignsForEmpire(Empire empire, string applicationStartupPath, string customizationSetPath, long starDate)
        {
            DesignList designList = new DesignList();
            if (empire != null && empire.DominantRace != null)
            {
                string path = applicationStartupPath + "\\designs\\" + empire.DominantRace.Name + "\\";
                if (!string.IsNullOrEmpty(customizationSetPath))
                {
                    path = customizationSetPath + "\\designs\\" + empire.DominantRace.Name + "\\";
                }
                if (!Directory.Exists(path))
                {
                    path = applicationStartupPath + "\\designs\\" + empire.DominantRace.Name + "\\";
                }
                if (Directory.Exists(path))
                {
                    try
                    {
                        string[] files = Directory.GetFiles(path, "*.dwd", SearchOption.TopDirectoryOnly);
                        foreach (string path2 in files)
                        {
                            if (File.Exists(path2))
                            {
                                try
                                {
                                    using FileStream stream = new FileStream(path2, FileMode.Open, FileAccess.Read);
                                    DesignList items = LoadDesigns(stream, empire, markLoadedDesignsAsOptimized: true, starDate);
                                    designList.AddRange(items);
                                }
                                catch (ApplicationException)
                                {
                                }
                                catch (Exception)
                                {
                                }
                            }
                        }
                        return designList;
                    }
                    catch (ApplicationException)
                    {
                        return designList;
                    }
                }
            }
            return designList;
        }

        public static RaceList LoadRaces(string applicationStartupPath, string customizationSetName)
        {
            RaceList raceList = new RaceList();
            List<Task<Race>> taskList = new List<Task<Race>>();
            string text = string.Empty;
            string path = applicationStartupPath + "\\races\\";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                path = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\races\\";
            }
            if (!Directory.Exists(path))
            {
                path = applicationStartupPath + "\\races\\";
            }
            try
            {
                string[] files = Directory.GetFiles(path, "*.txt", SearchOption.TopDirectoryOnly);
                for (int i = 0; i < files.Length; i++)
                {
                    text = files[i];
                    if (File.Exists(text))
                    {
                        string localText = text;
                        //Race item = Race.LoadFromFile(text);
                        //raceList.Add(item);
                        taskList.Add(Task.Run(() => Race.LoadFromFile(localText)));
                    }
                }
                Task.WaitAll(taskList.ToArray());
                foreach (var item in taskList)
                {
                    if (item.Result != null)
                    { raceList.Add(item.Result); }
                }
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error reading txt file of some race");
            }
            LoadRaceBiases(applicationStartupPath, customizationSetName, raceList);
            return raceList;
        }

        public static void SetRaceStartupCharacters(string applicationStartupPath, string customizationSetName, RaceList races)
        {
            for (int i = 0; i < races.Count; i++)
            {
                races[i].AvailableCharacters = LoadCharacters(applicationStartupPath, customizationSetName, races[i], races);
            }
        }

        public static CharacterList LoadCharacters(string applicationStartupPath, string customizationSetName, Race race, RaceList allRaces)
        {
            return LoadCharacters(applicationStartupPath, customizationSetName, race.Name, race, allRaces);
        }

        public static CharacterList LoadCharacters(string applicationStartupPath, string customizationSetName, string filename, Race race, RaceList allRaces)
        {
            string text = applicationStartupPath + "\\characters\\" + filename + ".txt";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\characters\\" + filename + ".txt";
            }
            if (!File.Exists(text))
            {
                text = applicationStartupPath + "\\characters\\" + filename + ".txt";
            }
            return LoadCharactersCompleteFilePath(text, race, allRaces);
        }

        public static CharacterList LoadCharactersCompleteFilePath(string filePath, Race race, RaceList allRaces)
        {
            CharacterList characterList = new CharacterList();
            string value = ",";
            int num = 0;
            try
            {
                if (File.Exists(filePath))
                {
                    using (FileStream stream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
                    {
                        using StreamReader streamReader = new StreamReader(stream);
                        CharacterList characterList2 = new CharacterList();
                        while (!streamReader.EndOfStream)
                        {
                            num++;
                            int appearanceOrder = 0;
                            string empty = string.Empty;
                            CharacterRole role = CharacterRole.Undefined;
                            string empty2 = string.Empty;
                            string empty3 = string.Empty;
                            CharacterSkillType characterSkillType = CharacterSkillType.Undefined;
                            CharacterSkillType characterSkillType2 = CharacterSkillType.Undefined;
                            CharacterSkillType characterSkillType3 = CharacterSkillType.Undefined;
                            CharacterSkillType characterSkillType4 = CharacterSkillType.Undefined;
                            int num2 = 0;
                            int num3 = 0;
                            int num4 = 0;
                            int num5 = 0;
                            CharacterTraitType characterTraitType = CharacterTraitType.Undefined;
                            CharacterTraitType characterTraitType2 = CharacterTraitType.Undefined;
                            CharacterTraitType characterTraitType3 = CharacterTraitType.Undefined;
                            string text = streamReader.ReadLine();
                            if (!string.IsNullOrEmpty(text) && text.Trim() != string.Empty && text.Trim().Substring(0, 1) != "'")
                            {
                                int num6 = 0;
                                bool flag = false;
                                bool flag2 = false;
                                int num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Appearance Order at line " + num + " of file " + filePath);
                                }
                                string text2 = text.Substring(num6, num7 - num6);
                                text2 = text2.Trim();
                                if (text2 == "?")
                                {
                                    flag = true;
                                }
                                else if (text2 == "-")
                                {
                                    flag2 = true;
                                }
                                else
                                {
                                    appearanceOrder = int.Parse(text2);
                                }
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Name at line " + num + " of file " + filePath);
                                }
                                string text3 = text.Substring(num6, num7 - num6);
                                text3 = text3.Trim();
                                empty = text3;
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Role at line " + num + " of file " + filePath);
                                }
                                string text4 = text.Substring(num6, num7 - num6);
                                text4 = text4.Trim();
                                byte b = (byte)int.Parse(text4);
                                if (Enum.IsDefined(typeof(CharacterRole), b))
                                {
                                    role = (CharacterRole)b;
                                }
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Picture Filename at line " + num + " of file " + filePath);
                                }
                                string text5 = text.Substring(num6, num7 - num6);
                                text5 = text5.Trim();
                                empty2 = text5;
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Race Name at line " + num + " of file " + filePath);
                                }
                                string text6 = text.Substring(num6, num7 - num6);
                                text6 = text6.Trim();
                                empty3 = text6;
                                num6 = num7 + 1;
                                List<CharacterSkillType> list = new List<CharacterSkillType>();
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Type 1 at line " + num + " of file " + filePath);
                                }
                                string text7 = text.Substring(num6, num7 - num6);
                                text7 = text7.Trim();
                                if (text7 == "?")
                                {
                                    characterSkillType = SelectRandomSkillForRole(role, list);
                                    if (characterSkillType != 0)
                                    {
                                        list.Add(characterSkillType);
                                    }
                                }
                                else
                                {
                                    byte b2 = (byte)int.Parse(text7);
                                    if (Enum.IsDefined(typeof(CharacterSkillType), b2))
                                    {
                                        characterSkillType = (CharacterSkillType)b2;
                                        list.Add(characterSkillType);
                                    }
                                }
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Level 1 at line " + num + " of file " + filePath);
                                }
                                string text8 = text.Substring(num6, num7 - num6);
                                text8 = text8.Trim();
                                num2 = ((!(text8 == "?")) ? int.Parse(text8) : RndStatic.Next(1, 21));
                                num2 = Math.Max(-100, Math.Min(100, num2));
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Type 2 at line " + num + " of file " + filePath);
                                }
                                string text9 = text.Substring(num6, num7 - num6);
                                text9 = text9.Trim();
                                if (text9 == "?")
                                {
                                    characterSkillType2 = SelectRandomSkillForRole(role, list);
                                    if (characterSkillType2 != 0)
                                    {
                                        list.Add(characterSkillType2);
                                    }
                                }
                                else
                                {
                                    byte b3 = (byte)int.Parse(text9);
                                    if (Enum.IsDefined(typeof(CharacterSkillType), b3))
                                    {
                                        characterSkillType2 = (CharacterSkillType)b3;
                                        list.Add(characterSkillType2);
                                    }
                                }
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Level 2 at line " + num + " of file " + filePath);
                                }
                                string text10 = text.Substring(num6, num7 - num6);
                                text10 = text10.Trim();
                                num3 = ((!(text10 == "?")) ? int.Parse(text10) : RndStatic.Next(1, 21));
                                num3 = Math.Max(-100, Math.Min(100, num3));
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Type 3 at line " + num + " of file " + filePath);
                                }
                                string text11 = text.Substring(num6, num7 - num6);
                                text11 = text11.Trim();
                                if (text11 == "?")
                                {
                                    characterSkillType3 = SelectRandomSkillForRole(role, list);
                                    if (characterSkillType3 != 0)
                                    {
                                        list.Add(characterSkillType3);
                                    }
                                }
                                else
                                {
                                    byte b4 = (byte)int.Parse(text11);
                                    if (Enum.IsDefined(typeof(CharacterSkillType), b4))
                                    {
                                        characterSkillType3 = (CharacterSkillType)b4;
                                        list.Add(characterSkillType3);
                                    }
                                }
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Level 3 at line " + num + " of file " + filePath);
                                }
                                string text12 = text.Substring(num6, num7 - num6);
                                text12 = text12.Trim();
                                num4 = ((!(text12 == "?")) ? int.Parse(text12) : RndStatic.Next(1, 21));
                                num4 = Math.Max(-100, Math.Min(100, num4));
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Type 4 at line " + num + " of file " + filePath);
                                }
                                string text13 = text.Substring(num6, num7 - num6);
                                text13 = text13.Trim();
                                if (text13 == "?")
                                {
                                    characterSkillType4 = SelectRandomSkillForRole(role, list);
                                    if (characterSkillType4 != 0)
                                    {
                                        list.Add(characterSkillType4);
                                    }
                                }
                                else
                                {
                                    byte b5 = (byte)int.Parse(text13);
                                    if (Enum.IsDefined(typeof(CharacterSkillType), b5))
                                    {
                                        characterSkillType4 = (CharacterSkillType)b5;
                                        list.Add(characterSkillType4);
                                    }
                                }
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Skill Level 4 at line " + num + " of file " + filePath);
                                }
                                string text14 = text.Substring(num6, num7 - num6);
                                text14 = text14.Trim();
                                num5 = ((!(text14 == "?")) ? int.Parse(text14) : RndStatic.Next(1, 21));
                                num5 = Math.Max(-100, Math.Min(100, num5));
                                num6 = num7 + 1;
                                List<CharacterTraitType> list2 = new List<CharacterTraitType>();
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Trait Type 1 at line " + num + " of file " + filePath);
                                }
                                string text15 = text.Substring(num6, num7 - num6);
                                text15 = text15.Trim();
                                if (text15 == "?")
                                {
                                    characterTraitType = SelectRandomTraitForRole(role, list2);
                                    if (characterTraitType != 0)
                                    {
                                        list2.Add(characterTraitType);
                                    }
                                }
                                else
                                {
                                    byte b6 = (byte)int.Parse(text15);
                                    if (Enum.IsDefined(typeof(CharacterTraitType), b6))
                                    {
                                        characterTraitType = (CharacterTraitType)b6;
                                        list2.Add(characterTraitType);
                                    }
                                }
                                num6 = num7 + 1;
                                num7 = text.IndexOf(value, num6);
                                if (num7 < 0)
                                {
                                    throw new ApplicationException("Could not read Trait Type 2 at line " + num + " of file " + filePath);
                                }
                                string text16 = text.Substring(num6, num7 - num6);
                                text16 = text16.Trim();
                                if (text16 == "?")
                                {
                                    characterTraitType2 = SelectRandomTraitForRole(role, list2);
                                    if (characterTraitType2 != 0)
                                    {
                                        list2.Add(characterTraitType2);
                                    }
                                }
                                else
                                {
                                    byte b7 = (byte)int.Parse(text16);
                                    if (Enum.IsDefined(typeof(CharacterTraitType), b7))
                                    {
                                        characterTraitType2 = (CharacterTraitType)b7;
                                        list2.Add(characterTraitType2);
                                    }
                                }
                                num6 = num7 + 1;
                                string text17 = text.Substring(num6);
                                text17 = text17.Trim();
                                if (text17 == "?")
                                {
                                    characterTraitType3 = SelectRandomTraitForRole(role, list2);
                                    if (characterTraitType3 != 0)
                                    {
                                        list2.Add(characterTraitType3);
                                    }
                                }
                                else
                                {
                                    byte b8 = (byte)int.Parse(text17);
                                    if (Enum.IsDefined(typeof(CharacterTraitType), b8))
                                    {
                                        characterTraitType3 = (CharacterTraitType)b8;
                                        list2.Add(characterTraitType3);
                                    }
                                }
                                num6 = num7 + 1;
                                Race race2 = race;
                                if (!string.IsNullOrEmpty(empty3) && allRaces != null)
                                {
                                    race2 = allRaces[empty3];
                                    if (race2 == null)
                                    {
                                        race2 = race;
                                    }
                                }
                                if (flag2)
                                {
                                    appearanceOrder = int.MinValue;
                                }
                                Character character = new Character(empty, role, empty2, race2, null, null, appearanceOrder);
                                if (flag)
                                {
                                    characterList2.Add(character);
                                }
                                if (characterSkillType != 0)
                                {
                                    character.AddSkill(characterSkillType, num2, null);
                                }
                                if (characterSkillType2 != 0)
                                {
                                    character.AddSkill(characterSkillType2, num3, null);
                                }
                                if (characterSkillType3 != 0)
                                {
                                    character.AddSkill(characterSkillType3, num4, null);
                                }
                                if (characterSkillType4 != 0)
                                {
                                    character.AddSkill(characterSkillType4, num5, null);
                                }
                                if (characterTraitType != 0)
                                {
                                    character.AddTrait(characterTraitType, starting: true, null);
                                }
                                if (characterTraitType2 != 0)
                                {
                                    character.AddTrait(characterTraitType2, starting: true, null);
                                }
                                if (characterTraitType3 != 0)
                                {
                                    character.AddTrait(characterTraitType3, starting: true, null);
                                }
                                characterList.Add(character);
                            }
                        }
                        if (characterList2.Count <= 0)
                        {
                            return characterList;
                        }
                        Random random = new Random();
                        int num8 = characterList.GetHighestAppearanceOrder();
                        if (num8 < 1)
                        {
                            num8 = characterList.Count;
                        }
                        else if (num8 < characterList.Count / 3)
                        {
                            num8 = characterList.Count;
                        }
                        for (int i = 0; i < characterList2.Count; i++)
                        {
                            Character character2 = characterList2[i];
                            if (character2 != null)
                            {
                                int num9 = 1;
                                int maxValue = Math.Max(num9 + 1, num8 + 2);
                                character2.AppearanceOrder = random.Next(num9, maxValue);
                            }
                        }
                        return characterList;
                    }
                }
                return characterList;
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error at line " + num + " reading file " + filePath);
            }
        }

        public static CharacterTraitType SelectRandomTraitForRole(CharacterRole role, List<CharacterTraitType> traitsToExclude)
        {
            List<CharacterTraitType> list = Character.DetermineValidTraitsForRole(role, includeStartingTraits: true, includeHighlyNegativeTraits: false);
            if (list.Count > 0)
            {
                for (int i = 0; i < traitsToExclude.Count; i++)
                {
                    list.Remove(traitsToExclude[i]);
                }
                if (list.Count > 0)
                {
                    int index = RndStatic.Next(0, list.Count);
                    return list[index];
                }
            }
            return CharacterTraitType.Undefined;
        }

        public static CharacterSkillType SelectRandomSkillForRole(CharacterRole role, List<CharacterSkillType> skillsToExclude)
        {
            List<CharacterSkillType> list = Character.DetermineValidSkillsForRole(role);
            if (list.Count > 0)
            {
                for (int i = 0; i < skillsToExclude.Count; i++)
                {
                    list.Remove(skillsToExclude[i]);
                }
                if (list.Count > 0)
                {
                    int index = RndStatic.Next(0, list.Count);
                    return list[index];
                }
            }
            return CharacterSkillType.Undefined;
        }

        public EmpirePolicy LoadEmpirePolicy(Race race, bool isPirate)
        {
            return LoadEmpirePolicy(ApplicationStartupPath, CustomizationSetPath, race.Name, isPirate);
        }

        public EmpirePolicy LoadEmpirePolicy(string name, bool isPirate)
        {
            return LoadEmpirePolicy(ApplicationStartupPath, CustomizationSetPath, name, isPirate);
        }

        public static EmpirePolicy LoadEmpirePolicy(string applicationPath, string customPath, string name, bool isPirate)
        {
            EmpirePolicy empirePolicy = new EmpirePolicy();
            try
            {
                string text = applicationPath + "\\Policy\\";
                if (isPirate)
                {
                    text += "pirate\\";
                }
                string text2 = text;
                string text3 = string.Empty;
                if (!string.IsNullOrEmpty(customPath))
                {
                    text3 = customPath + "Policy\\";
                    if (isPirate)
                    {
                        text3 += "pirate\\";
                    }
                }
                string text4 = name + ".txt";
                if (!string.IsNullOrEmpty(text3) && File.Exists(text3 + text4))
                {
                    empirePolicy.LoadFromFile(text3 + text4);
                    return empirePolicy;
                }
                if (File.Exists(text2 + text4))
                {
                    empirePolicy.LoadFromFile(text2 + text4);
                    return empirePolicy;
                }
                return empirePolicy;
            }
            catch (Exception)
            {
                return empirePolicy;
            }
        }

        public Habitat GetHabitat(int index)
        {
            if (index >= 0)
            {
                return Habitats[index];
            }
            return null;
        }

        public int SetHabitat(Habitat habitat)
        {
            if (habitat == null)
            {
                return -1;
            }
            return Habitats.IndexOf(habitat);
        }

        public BuiltObject GetBuiltObject(int index)
        {
            if (index >= 0)
            {
                return BuiltObjects[index];
            }
            return null;
        }

        public int SetBuiltObject(BuiltObject builtObject)
        {
            if (builtObject == null)
            {
                return -1;
            }
            return BuiltObjects.IndexOf(builtObject);
        }

        public static int SelectCharacterLandscapeImageIndex(Character character)
        {
            if (character != null && character.Location != null && character.Location is Habitat)
            {
                Habitat habitat = (Habitat)character.Location;
                return habitat.LandscapePictureRef;
            }
            return -1;
        }

        public static int ResolveGovernmentId(string governmentName, Race race)
        {
            int result = -1;
            if (governmentName == "(" + TextResolver.GetText("Random") + ")")
            {
                result = ((race.PreferredStartingGovernmentId < 0) ? Empire.SelectSuitableGovernment(race, -1, Empire.ResolveDefaultAllowableGovernmentTypes(race)) : race.PreferredStartingGovernmentId);
            }
            else
            {
                GovernmentAttributes byName = GovernmentsStatic.GetByName(governmentName);
                if (byName != null)
                {
                    result = byName.GovernmentId;
                }
            }
            return result;
        }

        public static double ResolveTechBonusFactor(Empire empire, Galaxy galaxy, BuiltObject builtObject)
        {
            double result = 1.0;
            int num = 0;
            double num2 = 0.0;
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                int minTechPoints = ResearchSystem.GetMinTechPoints(builtObject.Components[i]);
                int num3 = galaxy.BaseTechCost;
                if (empire != null && empire.Research != null && empire.Research.CheckComponentResearched(builtObject.Components[i]))
                {
                    num3 = minTechPoints;
                }
                double val = (double)minTechPoints / (double)num3;
                val = Math.Max(1.0, val);
                val -= 1.0;
                if (val > 0.0)
                {
                    num2 += (double)builtObject.Components[i].Size * val;
                    num += builtObject.Components[i].Size;
                }
            }
            if (num2 > 0.0)
            {
                result = 1.0 + num2 / (double)num;
            }
            return result;
        }

        public static double ResolveBuildSpeed(Empire buildingEmpire, Galaxy galaxy, BuiltObject builtObject)
        {
            ComponentCategoryType researchCategory = ComponentCategoryType.Undefined;
            return ResolveBuildSpeed(buildingEmpire, galaxy, builtObject, out researchCategory);
        }

        public static double ResolveBuildSpeed(Empire buildingEmpire, Galaxy galaxy, BuiltObject builtObject, bool considerAllComponents)
        {
            ComponentCategoryType researchCategory = ComponentCategoryType.Undefined;
            return ResolveBuildSpeed(buildingEmpire, galaxy, builtObject, considerAllComponents, out researchCategory);
        }

        public static double ResolveBuildSpeed(Empire buildingEmpire, Galaxy galaxy, BuiltObject builtObject, out ComponentCategoryType researchCategory)
        {
            return ResolveBuildSpeed(buildingEmpire, galaxy, builtObject, considerAllComponents: true, out researchCategory);
        }

        public static double ResolveBuildSpeed(Empire buildingEmpire, Galaxy galaxy, BuiltObject builtObject, bool considerAllComponents, out ComponentCategoryType researchCategory)
        {
            double result = 1.0;
            int num = 0;
            double num2 = 0.0;
            double num3 = 0.0;
            ComponentCategoryType componentCategoryType = ComponentCategoryType.Undefined;
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                BuiltObjectComponent builtObjectComponent = builtObject.Components[i];
                if (!considerAllComponents && builtObjectComponent.Status == ComponentStatus.Normal)
                {
                    continue;
                }
                int minTechPoints = ResearchSystem.GetMinTechPoints(builtObjectComponent);
                int num4 = (int)((double)galaxy.BaseTechCost * 0.5);
                if (buildingEmpire != null && buildingEmpire.Research != null && buildingEmpire.Research.CheckComponentResearched(builtObjectComponent))
                {
                    num4 = minTechPoints;
                }
                double val = ((double)minTechPoints + 1.0) / ((double)num4 + 1.0);
                val = Math.Max(1.0, val);
                val -= 1.0;
                val = Math.Min(val, 20.0);
                if (val > 0.0)
                {
                    num2 += (double)builtObjectComponent.Size * val;
                    num += builtObjectComponent.Size;
                    if (val > num3)
                    {
                        num3 = val;
                        componentCategoryType = builtObjectComponent.Category;
                    }
                }
            }
            if (num2 > 0.0)
            {
                result = 1.0 + num2 / (double)num;
            }
            researchCategory = componentCategoryType;
            return result;
        }

        public static Bitmap CreateBitmapSafely(int requestedWidth, int requestedHeight, PixelFormat pixelFormat)
        {
            Bitmap result = null;
            int num = 0;
            bool flag = false;
            while (!flag && num < 10)
            {
                try
                {
                    result = new Bitmap(requestedWidth, requestedHeight, pixelFormat);
                    flag = true;
                }
                catch
                {
                    requestedWidth /= 2;
                    requestedHeight /= 2;
                    requestedWidth = Math.Max(1, requestedWidth);
                    requestedHeight = Math.Max(1, requestedHeight);
                }
                num++;
            }
            return result;
        }

        public Bitmap GenerateNebulae(bool generateImage, Bitmap galaxyBackground, Bitmap[] cloudImages, out GalaxyLocationList locations)
        {
            List<Color> list = new List<Color>();
            list.Add(Color.FromArgb(17, 13, 20));
            list.Add(Color.FromArgb(14, 13, 24));
            GalaxyNebulaeGenerator galaxyNebulaeGenerator = new GalaxyNebulaeGenerator(cloudImages, SystemNames, list);
            return galaxyNebulaeGenerator.GenerateGalaxyNebulae(generateImage, RandomSeed, StarCount, GalaxyShape, galaxyBackground.Width, galaxyBackground.Height, galaxyBackground, out locations);
        }

        public GalaxyLocation DetermineNearestRaceRegion(double x, double y)
        {
            GalaxyLocation result = null;
            double num = double.MaxValue;
            for (int i = 0; i < GalaxyLocations.Count; i++)
            {
                if (GalaxyLocations[i].Type == GalaxyLocationType.RaceRegion)
                {
                    GalaxyLocations[i].ResolveLocationCenter(out var x2, out var y2);
                    double num2 = CalculateDistanceSquared(x, y, x2, y2);
                    if (num2 < num)
                    {
                        result = GalaxyLocations[i];
                        num = num2;
                    }
                }
            }
            return result;
        }

        public GalaxyLocationList DetermineGalaxyLocationsAtPoint(double x, double y)
        {
            return DetermineGalaxyLocationsAtPoint(x, y, GalaxyLocationType.Undefined);
        }

        public GalaxyLocationList DetermineGalaxyLocationsAtPoint(double x, double y, GalaxyLocationType type)
        {
            GalaxyLocationList galaxyLocationList = new GalaxyLocationList();
            Point point = ResolveGalaxyLocationIndexes(x, y);
            for (int i = 0; i < GalaxyLocationIndex[point.X][point.Y].Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocationIndex[point.X][point.Y][i];
                double num = (double)galaxyLocation.Width / 2.0;
                double num2 = num * num;
                if (type == GalaxyLocationType.Undefined || galaxyLocation.Type == type)
                {
                    double num3 = CalculateDistanceSquared(x, y, (double)galaxyLocation.Xpos + num, (double)galaxyLocation.Ypos + (double)galaxyLocation.Height / 2.0);
                    if (num3 < num2)
                    {
                        galaxyLocationList.Add(galaxyLocation);
                    }
                }
            }
            return galaxyLocationList;
        }

        public bool DetermineGalaxyLocationsAtPoint(double x, double y, GalaxyLocationType type, ref GalaxyLocationList locations)
        {
            bool result = false;
            Point point = ResolveGalaxyLocationIndexes(x, y);
            for (int i = 0; i < GalaxyLocationIndex[point.X][point.Y].Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocationIndex[point.X][point.Y][i];
                double num = (double)galaxyLocation.Width / 2.0;
                double num2 = num * num;
                if (type != 0 && galaxyLocation.Type != type)
                {
                    continue;
                }
                double num3 = CalculateDistanceSquared(x, y, (double)galaxyLocation.Xpos + num, (double)galaxyLocation.Ypos + (double)galaxyLocation.Height / 2.0);
                if (num3 < num2)
                {
                    if (locations == null)
                    {
                        locations = new GalaxyLocationList();
                    }
                    locations.Add(galaxyLocation);
                    result = true;
                }
            }
            return result;
        }

        public void DetermineGalaxyLocationsAtPointSuppliedList(double x, double y, GalaxyLocationType type, ref GalaxyLocationList locations)
        {
            locations.Clear();
            Point point = ResolveGalaxyLocationIndexes(x, y);
            for (int i = 0; i < GalaxyLocationIndex[point.X][point.Y].Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocationIndex[point.X][point.Y][i];
                double num = (double)galaxyLocation.Width / 2.0;
                double num2 = num * num;
                if (type == GalaxyLocationType.Undefined || galaxyLocation.Type == type)
                {
                    double num3 = CalculateDistanceSquared(x, y, (double)galaxyLocation.Xpos + num, (double)galaxyLocation.Ypos + (double)galaxyLocation.Height / 2.0);
                    if (num3 < num2)
                    {
                        locations.Add(galaxyLocation);
                    }
                }
            }
        }

        public GalaxyLocationList DetermineGalaxyLocationsInRangeAtPoint(double x, double y, double range, GalaxyLocationType type)
        {
            GalaxyLocationList galaxyLocationList = new GalaxyLocationList();
            Point point = ResolveGalaxyLocationIndexes(x, y);
            for (int i = 0; i < GalaxyLocationIndex[point.X][point.Y].Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocationIndex[point.X][point.Y][i];
                double num = (double)galaxyLocation.Width / 2.0;
                double num2 = (num + range) * (num + range);
                if (type == GalaxyLocationType.Undefined || galaxyLocation.Type == type)
                {
                    double num3 = CalculateDistanceSquared(x, y, (double)galaxyLocation.Xpos + num, (double)galaxyLocation.Ypos + (double)galaxyLocation.Height / 2.0);
                    if (num3 < num2)
                    {
                        galaxyLocationList.Add(galaxyLocation);
                    }
                }
            }
            return galaxyLocationList;
        }

        public void AddGalaxyLocationIndex(GalaxyLocation location)
        {
            Point point = ResolveGalaxyLocationIndexes(location.Xpos, location.Ypos);
            Point point2 = ResolveGalaxyLocationIndexes(location.Xpos + location.Width, location.Ypos + location.Height);
            for (int i = point.X; i <= point2.X; i++)
            {
                for (int j = point.Y; j <= point2.Y; j++)
                {
                    if (!GalaxyLocationIndex[i][j].Contains(location))
                    {
                        GalaxyLocationIndex[i][j].Add(location);
                    }
                }
            }
        }

        public void RemoveGalaxyLocationIndex(GalaxyLocation location)
        {
            Point point = ResolveGalaxyLocationIndexes(location.Xpos, location.Ypos);
            Point point2 = ResolveGalaxyLocationIndexes(location.Xpos + location.Width, location.Ypos + location.Height);
            for (int i = point.X; i <= point2.X; i++)
            {
                for (int j = point.Y; j <= point2.Y; j++)
                {
                    if (GalaxyLocationIndex[i][j].Contains(location))
                    {
                        GalaxyLocationIndex[i][j].Remove(location);
                    }
                }
            }
        }

        public Point ResolveGalaxyLocationIndexes(double x, double y)
        {
            int x2 = (int)x / IndexSize;
            int y2 = (int)y / IndexSize;
            CorrectIndexCoords(ref x2, ref y2);
            return new Point(x2, y2);
        }

        public static double ResolveColonyRevenueFactorFromDifficultyForNonPlayer(int difficultyLevel)
        {
            double result = 1.0;
            switch (difficultyLevel)
            {
                case 3:
                    result = 1.2;
                    break;
                case 4:
                    result = 1.4;
                    break;
            }
            return result;
        }

        public Galaxy(int galaxyRandomSeed, GalaxyShape galaxyShape, int starCount, double colonyPrevalence, int lifePrevalence, double creaturePrevalence, double piratePrevalence, int pirateProximity, long startStarDate, double baseTechCost, double hyperdriveSpeedMultiplier, int age, double aggressionLevel, int maximumEmpireAmount, bool spawnNewEmpires, EmpireStartList empireStarts, string applicationStartupPath, string customizationSetName, Bitmap galaxyBackground, Bitmap[] cloudImages, double difficultyLevel, int sectorWidth, int sectorHeight, ResourceSystem resourceSystem, bool allowGiantKaltorGeneration)
        {
            _StopWatch = new BasicStopWatch();
            _StopWatch.Start();
            _StartDateTime = DateTime.Now.ToUniversalTime();
            _TrackedDateTime = DateTime.Now.ToUniversalTime();
            _StartStarDate = startStarDate;
            sectorWidth = Math.Max(4, Math.Min(15, sectorWidth));
            sectorHeight = Math.Max(4, Math.Min(15, sectorHeight));
            SectorWidth = sectorWidth;
            SectorHeight = sectorHeight;
            SetGalaxyPhysicalDimensions(sectorWidth, sectorHeight);
            AssignGalaxyStaticDataToInstance();
            ResourceSystem.Clear();
            ResourceSystem.Initialize(resourceSystem);
            DifficultyLevel = difficultyLevel;
            _RandomSeed = galaxyRandomSeed;
            HabitatIndex = new HabitatList[IndexMaxX][];
            for (int i = 0; i < IndexMaxX; i++)
            {
                HabitatIndex[i] = new HabitatList[IndexMaxY];
            }
            BuiltObjectIndex = new BuiltObjectList[IndexMaxX][];
            for (int j = 0; j < IndexMaxX; j++)
            {
                BuiltObjectIndex[j] = new BuiltObjectList[IndexMaxY];
            }
            GalaxyLocationIndex = new GalaxyLocationList[IndexMaxX][];
            for (int k = 0; k < IndexMaxX; k++)
            {
                GalaxyLocationIndex[k] = new GalaxyLocationList[IndexMaxY];
            }
            SystemsIndex = new SystemInfoList[IndexMaxX][];
            for (int l = 0; l < IndexMaxX; l++)
            {
                SystemsIndex[l] = new SystemInfoList[IndexMaxY];
            }
            GalaxyShape = galaxyShape;
            _StarCount = starCount;
            ApplicationStartupPath = applicationStartupPath;
            if (!string.IsNullOrEmpty(customizationSetName))
            {
                CustomizationSetPath = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\";
            }
            Races = LoadRaces(applicationStartupPath, customizationSetName);
            LoadAgentNames(applicationStartupPath, customizationSetName);
            SetRaceStartupCharacters(applicationStartupPath, customizationSetName, Races);
            SetResearchRaceSpecialProjects(Races);
            SetResearchComponentMaxTechPoints((int)baseTechCost);
            if (lifePrevalence > 2500 || lifePrevalence <= 0)
            {
                throw new ArgumentOutOfRangeException("lifePrevalence", "Must be greater than zero and less than 2500");
            }
            _LifePrevalence = lifePrevalence;
            _CreaturePrevalence = creaturePrevalence;
            AllowGiantKaltorGeneration = allowGiantKaltorGeneration;
            _PiratePrevalence = piratePrevalence;
            _PirateProximity = pirateProximity;
            _ColonyPrevalence = colonyPrevalence;
            _ResearchSpeedModifier = 1.0;
            _BaseTechCost = (int)baseTechCost;
            _HyperdriveSpeedMultiplier = hyperdriveSpeedMultiplier;
            _Age = age;
            _AggressionLevel = aggressionLevel;
            _MaximumEmpireAmount = maximumEmpireAmount;
            _SpawnNewEmpires = spawnNewEmpires;
            for (int m = 0; m < IndexMaxX; m++)
            {
                for (int n = 0; n < IndexMaxY; n++)
                {
                    HabitatIndex[m][n] = new HabitatList();
                }
            }
            for (int num = 0; num < IndexMaxX; num++)
            {
                for (int num2 = 0; num2 < IndexMaxY; num2++)
                {
                    BuiltObjectIndex[num][num2] = new BuiltObjectList();
                }
            }
            for (int num3 = 0; num3 < IndexMaxX; num3++)
            {
                for (int num4 = 0; num4 < IndexMaxY; num4++)
                {
                    SystemsIndex[num3][num4] = new SystemInfoList();
                }
            }
            foreach (ResourceDefinition resource in ResourceSystem.Resources)
            {
                ResourceCurrentPrices.Add(resource.BasePrice);
            }
            ComponentDefinition[] componentDefinitionsStatic = ComponentDefinitionsStatic;
            foreach (ComponentDefinition componentDefinition in componentDefinitionsStatic)
            {
                int count = ComponentCurrentPrices.Count;
                ComponentCurrentPrices.Add(0.0);
                foreach (ComponentResource requiredResource in componentDefinition.RequiredResources)
                {
                    ComponentCurrentPrices[count] += (double)requiredResource.BasePrice * (double)requiredResource.Quantity;
                }
            }
            LoadDesignNames(applicationStartupPath, customizationSetName);
            LoadSystemNames(applicationStartupPath, customizationSetName);
            GalaxyLocationList locations = null;
            GenerateNebulae(generateImage: true, galaxyBackground, cloudImages, out locations);
            _GalaxyLocations = locations;
            for (int num6 = 0; num6 < IndexMaxX; num6++)
            {
                for (int num7 = 0; num7 < IndexMaxY; num7++)
                {
                    GalaxyLocationIndex[num6][num7] = new GalaxyLocationList();
                }
            }
            foreach (GalaxyLocation galaxyLocation in _GalaxyLocations)
            {
                AddGalaxyLocationIndex(galaxyLocation);
            }
            empireStarts.Update(Races);
            int aggressiveRacesRequired = 0;
            if (aggressionLevel >= 1.5)
            {
                aggressiveRacesRequired = 3;
            }
            else if (aggressionLevel >= 1.3)
            {
                aggressiveRacesRequired = 2;
            }
            else if (aggressionLevel >= 1.1)
            {
                aggressiveRacesRequired = 1;
            }
            SetupAlienRacePopulations(empireStarts, aggressiveRacesRequired);
            _LifePrevalenceMultiplier = 0.8 * (Math.Sqrt(1400.0) / Math.Sqrt(_StarCount));
            if (galaxyShape == GalaxyShape.ClustersEven || galaxyShape == GalaxyShape.ClustersVaried)
            {
                int num8 = Math.Min(20, Math.Max(5, starCount / 55));
                double num9 = (double)SizeX / (Math.Sqrt(num8) * 3.0);
                double num10 = 0.0;
                for (int num11 = 0; num11 < num8; num11++)
                {
                    bool flag = false;
                    int num12 = 0;
                    while (!flag && num12 < 50)
                    {
                        flag = true;
                        double num13 = 0.0;
                        if (galaxyShape == GalaxyShape.ClustersEven)
                        {
                            num13 = 1.0 / (double)num8;
                        }
                        else
                        {
                            num13 = 1.0 / (double)num8;
                            double val = num13 / 2.0;
                            if (Rnd.Next(0, 2) != 1)
                            {
                                double num14 = 1.0 + Rnd.NextDouble() * 4.0;
                                num13 *= num14;
                                num13 = Math.Max(num13, val);
                            }
                        }
                        double num15 = (double)SizeX * 0.1 + Rnd.NextDouble() * ((double)SizeX * 0.8);
                        double num16 = (double)SizeY * 0.1 + Rnd.NextDouble() * ((double)SizeY * 0.8);
                        for (int num17 = 0; num17 < _StarClusterLocations.Count; num17++)
                        {
                            double num18 = CalculateDistance(num15, num16, _StarClusterLocations[num17].X, _StarClusterLocations[num17].Y);
                            double num19 = Math.Sqrt(_StarClusterPortions[num17]) * (double)SizeX * 0.4;
                            if (num18 < num9 + num19)
                            {
                                flag = false;
                                break;
                            }
                        }
                        if (flag)
                        {
                            num10 += num13;
                            _StarClusterPortions.Add(num13);
                            _StarClusterLocations.Add(new Point((int)num15, (int)num16));
                        }
                        num12++;
                    }
                }
                if (num10 > 1.0)
                {
                    for (int num20 = 0; num20 < _StarClusterPortions.Count; num20++)
                    {
                        _StarClusterPortions[num20] /= num10;
                    }
                }
            }
            List<HabitatList> list = new List<HabitatList>();
            for (int num21 = 0; num21 < starCount; num21++)
            {
                HabitatList asteroidField = null;
                HabitatList habitatList = SetupSolarSystem(galaxyShape, out asteroidField);
                list.Add(habitatList);
                if (asteroidField != null)
                {
                    _AsteroidFields.Add(asteroidField);
                }
                for (int num22 = 0; num22 < habitatList.Count; num22++)
                {
                    Habitats.Add(habitatList[num22]);
                    int x = (int)(habitatList[num22].Xpos / (double)IndexSize);
                    int y = (int)(habitatList[num22].Ypos / (double)IndexSize);
                    CorrectIndexCoords(ref x, ref y);
                    HabitatIndex[x][y].Add(habitatList[num22]);
                }
            }
            int num23 = Rnd.Next(starCount / 5, starCount / 2);
            for (int num24 = 0; num24 < num23; num24++)
            {
                HabitatList habitatList2 = new HabitatList();
                Habitat habitat = GenerateGasCloud();
                SelectCreatures(habitat);
                habitatList2.Add(habitat);
                list.Add(habitatList2);
                for (int num25 = 0; num25 < habitatList2.Count; num25++)
                {
                    Habitats.Add(habitatList2[num25]);
                    int x2 = (int)(habitatList2[num25].Xpos / (double)IndexSize);
                    int y2 = (int)(habitatList2[num25].Ypos / (double)IndexSize);
                    CorrectIndexCoords(ref x2, ref y2);
                    HabitatIndex[x2][y2].Add(habitatList2[num25]);
                }
            }
            list.Sort();
            Habitats.Clear();
            for (int num26 = 0; num26 < IndexMaxX; num26++)
            {
                for (int num27 = 0; num27 < IndexMaxY; num27++)
                {
                    HabitatIndex[num26][num27].Clear();
                }
            }
            for (int num28 = 0; num28 < list.Count; num28++)
            {
                int x3 = (int)(list[num28][0].Xpos / (double)IndexSize);
                int y3 = (int)(list[num28][0].Ypos / (double)IndexSize);
                CorrectIndexCoords(ref x3, ref y3);
                for (int num29 = 0; num29 < list[num28].Count; num29++)
                {
                    list[num28][num29].HabitatIndex = Habitats.Count;
                    Habitats.Add(list[num28][num29]);
                    HabitatIndex[x3][y3].Add(list[num28][num29]);
                }
            }
            for (int num30 = 0; num30 < list.Count; num30++)
            {
                SystemInfo systemInfo = new SystemInfo();
                systemInfo.SystemStar = list[num30][0];
                systemInfo.Sector = ResolveSector(systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                systemInfo.Habitats = DetermineHabitatsInSystem(list[num30][0]);
                systemInfo.SystemStar.SystemIndex = Systems.Count;
                foreach (Habitat habitat2 in systemInfo.Habitats)
                {
                    habitat2.SystemIndex = Systems.Count;
                }
                Systems.Add(systemInfo);
            }
            UpdateSystemInfo(null);
            for (int num31 = 0; num31 < Creatures.Count; num31++)
            {
                if (!Systems[Creatures[num31].ParentHabitat.SystemIndex].Creatures.Contains(Creatures[num31]))
                {
                    Systems[Creatures[num31].ParentHabitat.SystemIndex].Creatures.Add(Creatures[num31]);
                }
            }
            Orders.EnableIndexing();
            GameSummary = DetermineGameSummary();
            list = null;
        }

        public string GenerateBuiltObjectName(Design design)
        {
            return GenerateBuiltObjectName(design, null);
        }

        public string GenerateBuiltObjectName(Design design, Habitat habitat)
        {
            return GenerateBuiltObjectName(design, habitat, uniqueNamesForSmallMilitaryShips: false);
        }

        public string GenerateBuiltObjectName(Design design, Habitat habitat, bool uniqueNamesForSmallMilitaryShips)
        {
            string empty = string.Empty;
            bool flag = false;
            empty = GetCustomName(design);
            if (string.IsNullOrEmpty(empty))
            {
                switch (design.SubRole)
                {
                    case BuiltObjectSubRole.Escort:
                    case BuiltObjectSubRole.Frigate:
                    case BuiltObjectSubRole.Destroyer:
                    case BuiltObjectSubRole.TroopTransport:
                        if (!uniqueNamesForSmallMilitaryShips)
                        {
                            flag = true;
                        }
                        break;
                    case BuiltObjectSubRole.ResupplyShip:
                    case BuiltObjectSubRole.ExplorationShip:
                    case BuiltObjectSubRole.SmallFreighter:
                    case BuiltObjectSubRole.MediumFreighter:
                    case BuiltObjectSubRole.LargeFreighter:
                    case BuiltObjectSubRole.ColonyShip:
                    case BuiltObjectSubRole.PassengerShip:
                    case BuiltObjectSubRole.ConstructionShip:
                    case BuiltObjectSubRole.GasMiningShip:
                    case BuiltObjectSubRole.MiningShip:
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                    case BuiltObjectSubRole.ResortBase:
                    case BuiltObjectSubRole.GenericBase:
                    case BuiltObjectSubRole.EnergyResearchStation:
                    case BuiltObjectSubRole.WeaponsResearchStation:
                    case BuiltObjectSubRole.HighTechResearchStation:
                    case BuiltObjectSubRole.MonitoringStation:
                    case BuiltObjectSubRole.DefensiveBase:
                        flag = false;
                        break;
                    default:
                        if (design.BuildCount <= 1 && design.SubRole != BuiltObjectSubRole.Carrier)
                        {
                            flag = true;
                        }
                        break;
                }
            }
            if (flag)
            {
                switch (design.SubRole)
                {
                    case BuiltObjectSubRole.GenericBase:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.Escort:
                    case BuiltObjectSubRole.Frigate:
                    case BuiltObjectSubRole.Destroyer:
                    case BuiltObjectSubRole.TroopTransport:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.Cruiser:
                    case BuiltObjectSubRole.CapitalShip:
                    case BuiltObjectSubRole.Carrier:
                    case BuiltObjectSubRole.ResupplyShip:
                        empty = design.Name;
                        break;
                    case BuiltObjectSubRole.MonitoringStation:
                        empty = design.Name + " " + ResolveDescription(BuiltObjectSubRole.MonitoringStation) + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.DefensiveBase:
                        empty = design.Name + " " + ResolveDescription(BuiltObjectSubRole.DefensiveBase) + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.EnergyResearchStation:
                        empty = design.Name + " " + ResolveDescription(BuiltObjectSubRole.EnergyResearchStation) + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.WeaponsResearchStation:
                        empty = design.Name + " " + ResolveDescription(BuiltObjectSubRole.WeaponsResearchStation) + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.HighTechResearchStation:
                        empty = design.Name + " " + ResolveDescription(BuiltObjectSubRole.HighTechResearchStation) + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                        empty = design.Name + " " + TextResolver.GetText("Space Port") + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.MiningShip:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.GasMiningShip:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.MiningStation:
                        empty = design.Name + " " + ResolveDescription(BuiltObjectSubRole.MiningStation) + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.GasMiningStation:
                        empty = design.Name + " " + ResolveDescription(BuiltObjectSubRole.GasMiningStation) + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.SmallFreighter:
                    case BuiltObjectSubRole.MediumFreighter:
                    case BuiltObjectSubRole.LargeFreighter:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.ColonyShip:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.ConstructionShip:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                    case BuiltObjectSubRole.ExplorationShip:
                        empty = design.Name + " " + design.BuildCount.ToString("000");
                        break;
                }
            }
            else
            {
                empty = SelectUniqueBuiltObjectName(design, habitat);
            }
            return empty;
        }

        public bool DetermineBuiltObjectIsState(BuiltObjectSubRole subRole)
        {
            switch (subRole)
            {
                case BuiltObjectSubRole.Escort:
                case BuiltObjectSubRole.Frigate:
                case BuiltObjectSubRole.Destroyer:
                case BuiltObjectSubRole.Cruiser:
                case BuiltObjectSubRole.CapitalShip:
                case BuiltObjectSubRole.TroopTransport:
                case BuiltObjectSubRole.Carrier:
                case BuiltObjectSubRole.ResupplyShip:
                case BuiltObjectSubRole.ExplorationShip:
                case BuiltObjectSubRole.ColonyShip:
                case BuiltObjectSubRole.ConstructionShip:
                case BuiltObjectSubRole.SmallSpacePort:
                case BuiltObjectSubRole.MediumSpacePort:
                case BuiltObjectSubRole.LargeSpacePort:
                case BuiltObjectSubRole.GenericBase:
                case BuiltObjectSubRole.EnergyResearchStation:
                case BuiltObjectSubRole.WeaponsResearchStation:
                case BuiltObjectSubRole.HighTechResearchStation:
                case BuiltObjectSubRole.MonitoringStation:
                case BuiltObjectSubRole.DefensiveBase:
                    return true;
                case BuiltObjectSubRole.SmallFreighter:
                case BuiltObjectSubRole.MediumFreighter:
                case BuiltObjectSubRole.LargeFreighter:
                case BuiltObjectSubRole.GasMiningShip:
                case BuiltObjectSubRole.MiningShip:
                case BuiltObjectSubRole.GasMiningStation:
                case BuiltObjectSubRole.MiningStation:
                    return false;
                default:
                    return false;
            }
        }

        public string GenerateMoonName(Habitat moon)
        {
            string text = GenerateCodeName();
            _ = moon.Parent;
            DetermineHabitatSystemStar(moon);
            return GenerateRandomNameAlt();
        }

        public string GenerateRandomName()
        {
            string text = string.Empty;
            string[] array = new string[6] { "a", "e", "i", "o", "u", "y" };
            string[] array2 = new string[21]
            {
            "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
            "n", "p", "q", "r", "s", "t", "v", "w", "x", "y",
            "z"
            };
            int num = 7;
            int num2 = Rnd.Next(2, 5);
            for (int i = 0; i < num2; i++)
            {
                int num3 = 0;
                int num4 = 0;
                switch (Rnd.Next(0, 4))
                {
                    case 0:
                        num3 = Rnd.Next(0, array2.Length);
                        text += array2[num3];
                        num4 = Rnd.Next(0, array.Length);
                        text += array[num4];
                        break;
                    case 1:
                        {
                            num4 = Rnd.Next(0, array.Length);
                            int iterationCount2 = 0;
                            while (ConditionCheckLimit(CheckForIllegalVowelCombination(text, array[num4]), 50, ref iterationCount2))
                            {
                                num4 = Rnd.Next(0, array.Length);
                            }
                            text += array[num4];
                            num3 = Rnd.Next(0, array2.Length);
                            text += array2[num3];
                            break;
                        }
                    case 2:
                        num3 = Rnd.Next(0, array2.Length);
                        text += array2[num3];
                        num4 = Rnd.Next(0, array.Length);
                        text += array[num4];
                        num3 = Rnd.Next(0, array2.Length);
                        text += array2[num3];
                        break;
                    case 3:
                        {
                            num4 = Rnd.Next(0, array.Length);
                            int iterationCount = 0;
                            while (ConditionCheckLimit(CheckForIllegalVowelCombination(text, array[num4]), 50, ref iterationCount))
                            {
                                num4 = Rnd.Next(0, array.Length);
                            }
                            text += array[num4];
                            num3 = Rnd.Next(0, array2.Length);
                            text += array2[num3];
                            num4 = Rnd.Next(0, array.Length);
                            text += array[num4];
                            break;
                        }
                }
                if (text.Length > num)
                {
                    break;
                }
            }
            return text.Substring(0, 1).ToUpper(CultureInfo.InvariantCulture) + text.Substring(1, text.Length - 1);
        }

        private string GenerateRandomNameAlt()
        {
            string text = string.Empty;
            int num = Rnd.Next(4, 9);
            int num2 = Rnd.Next(0, 2);
            int num3 = 0;
            int num4 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(text.Length < num, 50, ref iterationCount))
            {
                switch (num2)
                {
                    case 0:
                        if (Rnd.Next(0, 2) == 0 && text.Length > 0 && num3 == 0)
                        {
                            text = ((text.Length < num - 2) ? AddVowelCombination(text) : AddVowelCombinationEnd(text));
                            num3++;
                        }
                        else
                        {
                            text = AddVowel(text);
                        }
                        num2 = 1;
                        break;
                    case 1:
                        if (Rnd.Next(0, 2) != 0 || num4 != 0)
                        {
                            text = ((text.Length < num - 1) ? AddConsonant(text) : AddConsonantEnd(text));
                        }
                        else
                        {
                            text = ((text.Length <= 0) ? AddConsonantCombinationStart(text) : ((text.Length < num - 2) ? AddConsonantCombination(text) : AddConsonantCombinationEnd(text)));
                            num4++;
                        }
                        num2 = 0;
                        break;
                }
            }
            return text.Substring(0, 1).ToUpper(CultureInfo.InvariantCulture) + text.Substring(1, text.Length - 1);
        }

        private string AddVowel(string word)
        {
            string[] array = new string[12]
            {
            "a", "a", "a", "e", "e", "e", "e", "i", "i", "o",
            "o", "u"
            };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddVowelEnd(string word)
        {
            string[] array = new string[6] { "a", "a", "o", "o", "u", "y" };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddVowelCombination(string word)
        {
            string[] array = new string[12]
            {
            "ai", "au", "ea", "ee", "ei", "eu", "ey", "oa", "oi", "oo",
            "ou", "ui"
            };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddVowelCombinationEnd(string word)
        {
            string[] array = new string[10] { "ai", "au", "ea", "eu", "ie", "oa", "oi", "oo", "oy", "ui" };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddConsonant(string word)
        {
            string[] array = new string[65]
            {
            "b", "b", "c", "c", "c", "d", "d", "d", "d", "f",
            "f", "g", "g", "h", "h", "h", "h", "h", "h", "j",
            "k", "l", "l", "l", "l", "m", "m", "m", "n", "n",
            "n", "n", "n", "n", "n", "p", "p", "r", "r", "r",
            "r", "r", "r", "s", "s", "s", "s", "s", "s", "t",
            "t", "t", "t", "t", "t", "t", "t", "t", "v", "w",
            "w", "x", "y", "y", "z"
            };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddConsonantEnd(string word)
        {
            string[] array = new string[35]
            {
            "b", "d", "d", "d", "d", "d", "f", "f", "g", "k",
            "l", "l", "m", "n", "n", "n", "n", "p", "r", "r",
            "r", "s", "s", "s", "s", "s", "s", "s", "t", "t",
            "t", "t", "v", "x", "z"
            };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddConsonantCombinationStart(string word)
        {
            string[] array = new string[29]
            {
            "bl", "br", "ch", "cl", "cr", "dr", "fl", "fr", "gh", "gl",
            "gr", "kl", "kr", "ph", "pl", "pr", "qu", "rh", "ry", "sc",
            "sh", "sk", "sl", "sm", "sn", "sp", "st", "th", "tr"
            };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddConsonantCombinationEnd(string word)
        {
            string[] array = new string[36]
            {
            "ff", "gh", "ld", "lf", "lg", "lk", "ll", "lm", "lt", "ms",
            "nc", "nd", "ng", "nk", "ns", "nt", "ny", "ph", "rc", "rd",
            "rf", "rg", "rk", "rl", "rm", "rn", "rp", "rs", "rt", "ry",
            "sc", "sh", "sk", "ss", "st", "th"
            };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private string AddConsonantCombination(string word)
        {
            string[] array = new string[73]
            {
            "bb", "bl", "br", "ch", "cl", "cr", "dd", "dr", "ff", "fl",
            "fr", "gg", "gl", "gr", "kl", "kr", "lc", "ld", "lf", "lg",
            "lk", "ll", "lm", "ln", "lp", "ls", "lt", "mb", "mm", "mn",
            "mp", "ms", "nc", "nd", "ng", "nk", "nn", "ns", "nt", "ph",
            "pl", "pp", "pr", "ps", "qu", "rb", "rc", "rd", "rf", "rg",
            "rh", "rk", "rl", "rm", "rn", "rp", "rr", "rs", "rt", "ry",
            "sc", "sh", "sk", "sl", "sm", "sn", "sp", "ss", "st", "th",
            "tr", "wl", "xx"
            };
            int num = Rnd.Next(0, array.Length);
            word += array[num];
            return word;
        }

        private bool CheckForIllegalVowelCombination(string word, string newChar)
        {
            string[] array = new string[13]
            {
            "aa", "ae", "ao", "eo", "ia", "ii", "io", "iu", "iy", "ua",
            "uo", "uu", "uy"
            };
            if (word.Length > 0)
            {
                string text = word.Substring(word.Length - 1, 1);
                for (int i = 0; i < array.Length; i++)
                {
                    if (text + newChar == array[i])
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public string GenerateCodeName()
        {
            string text = ((char)Rnd.Next(65, 91)).ToString() + (char)Rnd.Next(65, 91);
            return text + Rnd.Next(1, 1000);
        }

        private Habitat GenerateGasCloud()
        {
            HabitatType habitatType = HabitatType.Ammonia;
            switch (Rnd.Next(0, 15))
            {
                case 0:
                    habitatType = HabitatType.Ammonia;
                    break;
                case 1:
                    habitatType = HabitatType.Argon;
                    break;
                case 2:
                    habitatType = HabitatType.CarbonDioxide;
                    break;
                case 3:
                    habitatType = HabitatType.Chlorine;
                    break;
                case 4:
                case 5:
                    habitatType = HabitatType.Helium;
                    break;
                case 6:
                case 7:
                case 8:
                    habitatType = HabitatType.Hydrogen;
                    break;
                case 9:
                case 10:
                case 11:
                case 12:
                    habitatType = HabitatType.NitrogenOxygen;
                    break;
                case 13:
                case 14:
                    habitatType = HabitatType.Oxygen;
                    break;
            }
            double num = 0.0;
            int num2 = 0;
            Habitat habitat;
            do
            {
                int index = Rnd.Next(0, _GalaxyLocations.Count);
                int iterationCount = 0;
                while (ConditionCheckLimit(_GalaxyLocations[index].Type != GalaxyLocationType.NebulaCloud, 200, ref iterationCount))
                {
                    index = Rnd.Next(0, _GalaxyLocations.Count);
                }
                double num3 = (double)_GalaxyLocations[index].Width * 0.15 + Rnd.NextDouble() * (double)_GalaxyLocations[index].Width * 0.7;
                double num4 = (double)_GalaxyLocations[index].Height * 0.15 + Rnd.NextDouble() * (double)_GalaxyLocations[index].Height * 0.7;
                double x = (double)_GalaxyLocations[index].Xpos + num3;
                double y = (double)_GalaxyLocations[index].Ypos + num4;
                habitat = new Habitat(this, HabitatCategoryType.GasCloud, habitatType, GenerateCodeName(), x, y);
                habitat.Diameter = (short)Rnd.Next(8000, 32000);
                Habitat habitat2 = FindNearestSystemGasCloudAsteroid(habitat.Xpos, habitat.Ypos);
                num = ((habitat2 == null) ? double.MaxValue : CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos));
                num2++;
            }
            while (num < (double)(MaxSolarSystemSize * 4) && num2 < 200);
            byte solarRadiation = (byte)Rnd.Next(40, 60);
            byte microwaveRadiation = (byte)Rnd.Next(1, 5);
            byte xrayRadiation = (byte)Rnd.Next(0, 3);
            habitat.SolarRadiation = solarRadiation;
            habitat.MicrowaveRadiation = microwaveRadiation;
            habitat.XrayRadiation = xrayRadiation;
            habitat = SelectResources(habitat);
            switch (habitat.Type)
            {
                case HabitatType.Hydrogen:
                case HabitatType.Helium:
                    if (habitat.Diameter >= 0 && habitat.Diameter < 1750)
                    {
                        habitat.PictureRef = 79;
                    }
                    else if (habitat.Diameter >= 1750 && habitat.Diameter < 3000)
                    {
                        habitat.PictureRef = 80;
                    }
                    else if (habitat.Diameter >= 3000 && habitat.Diameter < 4250)
                    {
                        habitat.PictureRef = 81;
                    }
                    else
                    {
                        habitat.PictureRef = 82;
                    }
                    break;
                case HabitatType.Argon:
                case HabitatType.Ammonia:
                case HabitatType.CarbonDioxide:
                    if (habitat.Diameter >= 0 && habitat.Diameter < 1750)
                    {
                        habitat.PictureRef = 75;
                    }
                    else if (habitat.Diameter >= 1750 && habitat.Diameter < 3000)
                    {
                        habitat.PictureRef = 76;
                    }
                    else if (habitat.Diameter >= 3000 && habitat.Diameter < 4250)
                    {
                        habitat.PictureRef = 77;
                    }
                    else
                    {
                        habitat.PictureRef = 78;
                    }
                    break;
                case HabitatType.Oxygen:
                case HabitatType.NitrogenOxygen:
                case HabitatType.Chlorine:
                    if (habitat.Diameter >= 0 && habitat.Diameter < 1750)
                    {
                        habitat.PictureRef = 71;
                    }
                    else if (habitat.Diameter >= 1750 && habitat.Diameter < 3000)
                    {
                        habitat.PictureRef = 72;
                    }
                    else if (habitat.Diameter >= 3000 && habitat.Diameter < 4250)
                    {
                        habitat.PictureRef = 73;
                    }
                    else
                    {
                        habitat.PictureRef = 74;
                    }
                    break;
            }
            switch (habitat.Type)
            {
                case HabitatType.Ammonia:
                    habitat.MapPictureRef = 16;
                    break;
                case HabitatType.Argon:
                    habitat.MapPictureRef = 17;
                    break;
                case HabitatType.CarbonDioxide:
                    habitat.MapPictureRef = 18;
                    break;
                case HabitatType.Chlorine:
                    habitat.MapPictureRef = 19;
                    break;
                case HabitatType.Helium:
                    habitat.MapPictureRef = 20;
                    break;
                case HabitatType.Hydrogen:
                    habitat.MapPictureRef = 21;
                    break;
                case HabitatType.NitrogenOxygen:
                    habitat.MapPictureRef = 22;
                    break;
                case HabitatType.Oxygen:
                    habitat.MapPictureRef = 23;
                    break;
            }
            habitat.LandscapePictureRef = -1;
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            return habitat;
        }

        public Habitat GenerateGasCloud(HabitatType habitatType, double x, double y)
        {
            Habitat habitat = null;
            Rnd.Next(0, 7);
            double num = 0.0;
            habitat = new Habitat(this, HabitatCategoryType.GasCloud, habitatType, GenerateCodeName(), x, y);
            habitat.Diameter = (short)Rnd.Next(8000, 32000);
            Habitat habitat2 = FindNearestSystemGasCloudAsteroid(habitat.Xpos, habitat.Ypos);
            num = ((habitat2 == null) ? double.MaxValue : CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos));
            if (num < (double)(MaxSolarSystemSize * 4))
            {
                return null;
            }
            byte solarRadiation = (byte)Rnd.Next(40, 60);
            byte microwaveRadiation = (byte)Rnd.Next(1, 5);
            byte xrayRadiation = (byte)Rnd.Next(0, 3);
            habitat.SolarRadiation = solarRadiation;
            habitat.MicrowaveRadiation = microwaveRadiation;
            habitat.XrayRadiation = xrayRadiation;
            habitat = SelectResources(habitat);
            switch (habitat.Type)
            {
                case HabitatType.Hydrogen:
                case HabitatType.Helium:
                    if (habitat.Diameter >= 0 && habitat.Diameter < 1750)
                    {
                        habitat.PictureRef = 79;
                    }
                    else if (habitat.Diameter >= 1750 && habitat.Diameter < 3000)
                    {
                        habitat.PictureRef = 80;
                    }
                    else if (habitat.Diameter >= 3000 && habitat.Diameter < 4250)
                    {
                        habitat.PictureRef = 81;
                    }
                    else
                    {
                        habitat.PictureRef = 82;
                    }
                    break;
                case HabitatType.Argon:
                case HabitatType.Ammonia:
                case HabitatType.CarbonDioxide:
                    if (habitat.Diameter >= 0 && habitat.Diameter < 1750)
                    {
                        habitat.PictureRef = 75;
                    }
                    else if (habitat.Diameter >= 1750 && habitat.Diameter < 3000)
                    {
                        habitat.PictureRef = 76;
                    }
                    else if (habitat.Diameter >= 3000 && habitat.Diameter < 4250)
                    {
                        habitat.PictureRef = 77;
                    }
                    else
                    {
                        habitat.PictureRef = 78;
                    }
                    break;
                case HabitatType.Oxygen:
                case HabitatType.NitrogenOxygen:
                case HabitatType.Chlorine:
                    if (habitat.Diameter >= 0 && habitat.Diameter < 1750)
                    {
                        habitat.PictureRef = 71;
                    }
                    else if (habitat.Diameter >= 1750 && habitat.Diameter < 3000)
                    {
                        habitat.PictureRef = 72;
                    }
                    else if (habitat.Diameter >= 3000 && habitat.Diameter < 4250)
                    {
                        habitat.PictureRef = 73;
                    }
                    else
                    {
                        habitat.PictureRef = 74;
                    }
                    break;
            }
            switch (habitat.Type)
            {
                case HabitatType.Ammonia:
                    habitat.MapPictureRef = 16;
                    break;
                case HabitatType.Argon:
                    habitat.MapPictureRef = 17;
                    break;
                case HabitatType.CarbonDioxide:
                    habitat.MapPictureRef = 18;
                    break;
                case HabitatType.Chlorine:
                    habitat.MapPictureRef = 19;
                    break;
                case HabitatType.Helium:
                    habitat.MapPictureRef = 20;
                    break;
                case HabitatType.Hydrogen:
                    habitat.MapPictureRef = 21;
                    break;
                case HabitatType.NitrogenOxygen:
                    habitat.MapPictureRef = 22;
                    break;
                case HabitatType.Oxygen:
                    habitat.MapPictureRef = 23;
                    break;
            }
            habitat.LandscapePictureRef = -1;
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            return habitat;
        }

        public void SetRestrictedResources()
        {
            for (int i = 0; i < ResourceSystem.SuperLuxuryResources.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystem.SuperLuxuryResources[i];
                if (resourceDefinition == null || resourceDefinition.Prevalence == null)
                {
                    continue;
                }
                for (int j = 0; j < resourceDefinition.Prevalence.Count; j++)
                {
                    ResourcePrevalence resourcePrevalence = resourceDefinition.Prevalence[j];
                    if (resourcePrevalence == null)
                    {
                        continue;
                    }
                    int num = Math.Max(1, (int)(resourcePrevalence.Prevalence * ((float)StarCount / 700f)));
                    bool nameUsed = false;
                    string nameIfMoon = string.Empty;
                    if (!resourcePrevalence.HabitatIsAsteroid && !resourcePrevalence.HabitatIsGasCloud)
                    {
                        switch (resourceDefinition.Name)
                        {
                            case "Korabbian Spice":
                                nameIfMoon = "Korabbia";
                                break;
                            case "Loros Fruit":
                                nameIfMoon = "Loros";
                                break;
                            case "Zentabia Fluid":
                                nameIfMoon = "Zentabia";
                                break;
                        }
                    }
                    for (int k = 0; k < num; k++)
                    {
                        if (nameUsed)
                        {
                            nameIfMoon = string.Empty;
                        }
                        SetSingleRestrictedResource(resourceDefinition.ResourceID, resourcePrevalence.HabitatType, nameIfMoon, out nameUsed);
                    }
                }
            }
        }

        private void SetSingleRestrictedResource(byte resourceId, HabitatType habitatType, string nameIfMoon, out bool nameUsed)
        {
            nameUsed = false;
            FindLonelyDeepSpaceLocation(out var x, out var y);
            Habitat habitat = FindNearestHabitat(x, y, habitatType);
            bool flag = false;
            int num = 0;
            while (!flag && num < 100)
            {
                if (habitat != null)
                {
                    bool flag2 = true;
                    Habitat habitat2 = FindNearestColony(habitat.Xpos, habitat.Ypos, null, 0, includeIndependentColonies: false);
                    if (habitat2 != null)
                    {
                        double num2 = CalculateDistance(habitat2.Xpos, habitat2.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num2 < (double)MaxSolarSystemSize * 2.1)
                        {
                            flag2 = false;
                        }
                    }
                    if (habitat.Resources.Count >= 5)
                    {
                        flag2 = false;
                    }
                    int num3 = habitat.Resources.IndexOf(resourceId, 0);
                    if (num3 >= 0)
                    {
                        flag2 = false;
                    }
                    if (flag2)
                    {
                        habitat.Resources.Add(new HabitatResource(resourceId, Rnd.Next(700, 1000)));
                        flag = true;
                        if (!string.IsNullOrEmpty(nameIfMoon) && habitat.Category == HabitatCategoryType.Moon)
                        {
                            habitat.Name = nameIfMoon;
                            nameUsed = true;
                        }
                    }
                    else
                    {
                        FindLonelyDeepSpaceLocation(out x, out y);
                        habitat = FindNearestHabitat(x, y, habitatType);
                    }
                }
                num++;
            }
        }

        public float SelectHabitatQuality(Habitat habitat, float colonyPrevalence)
        {
            float num = 1f;
            float num2 = 0f;
            float num3 = 0f;
            float num4 = 0f;
            float num5 = 0f;
            float num6 = 0f;
            switch (habitat.Type)
            {
                case HabitatType.BarrenRock:
                    num2 = 0f;
                    num3 = 0.02f;
                    num4 = 0f;
                    break;
                case HabitatType.Continental:
                    num2 = 1f;
                    num3 = 0.2f;
                    num4 = 0f;
                    break;
                case HabitatType.Ice:
                    num2 = 0.3f;
                    num3 = 0.18f;
                    num4 = 0.11f;
                    num4 *= colonyPrevalence;
                    break;
                case HabitatType.MarshySwamp:
                    num2 = 0.85f;
                    num3 = 0.15f;
                    num4 = 0f;
                    break;
                case HabitatType.Ocean:
                    num2 = 0.8f;
                    num3 = 0.75f;
                    num5 = num2 - 0.5f;
                    num6 = num5 * colonyPrevalence;
                    num2 = num6 + 0.5f;
                    num4 = 0.03f;
                    num4 *= colonyPrevalence;
                    break;
                case HabitatType.Desert:
                    num2 = 0.75f;
                    num3 = 0.72f;
                    num5 = num2 - 0.5f;
                    num6 = num5 * colonyPrevalence;
                    num2 = num6 + 0.5f;
                    num4 = 0.08f;
                    num4 *= colonyPrevalence;
                    break;
                case HabitatType.Volcanic:
                    num2 = 0.25f;
                    num3 = 0.18f;
                    num4 = 0.18f;
                    num4 *= colonyPrevalence;
                    break;
                default:
                    num2 = 0f;
                    num3 = 0f;
                    num4 = 0f;
                    break;
            }
            num = num2 - (float)Rnd.NextDouble() * num3;
            if ((float)Rnd.NextDouble() < num4)
            {
                num = 0.5f + (float)Rnd.NextDouble() * 0.5f;
            }
            if (num >= 0.5f && num < 0.6f && Rnd.Next(0, 5) > 0)
            {
                num = 0.6f + (float)Rnd.NextDouble() * 0.12f;
            }
            return Math.Min(1f, Math.Max(0f, num));
        }

        public static List<byte> ResolveValidResourcesForHabitatTypeExcludeManufactured(HabitatType habitatType)
        {
            return ResolveValidResourcesForHabitatTypeExcludeManufactured(habitatType, allowSuperLuxuryResources: true);
        }

        public static List<byte> ResolveValidResourcesForHabitatTypeExcludeManufactured(HabitatType habitatType, bool allowSuperLuxuryResources)
        {
            List<byte> list = new List<byte>();
            for (int i = 0; i < ResourceSystemStatic.Resources.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystemStatic.Resources[i];
                if (resourceDefinition == null || (!allowSuperLuxuryResources && resourceDefinition.SuperLuxuryBonusAmount > 0) || resourceDefinition.ColonyManufacturingLevel > 0 || resourceDefinition.Prevalence == null || resourceDefinition.Prevalence.Count <= 0)
                {
                    continue;
                }
                for (int j = 0; j < resourceDefinition.Prevalence.Count; j++)
                {
                    ResourcePrevalence resourcePrevalence = resourceDefinition.Prevalence[j];
                    if (resourcePrevalence != null && resourcePrevalence.HabitatType == habitatType && !list.Contains(resourceDefinition.ResourceID))
                    {
                        list.Add(resourceDefinition.ResourceID);
                    }
                }
            }
            return list;
        }

        public Habitat SelectResources(Habitat habitat)
        {
            return SelectResources(habitat, 0);
        }

        public Habitat SelectResources(Habitat habitat, int minimumResourceCount)
        {
            return SelectResources(habitat, minimumResourceCount, null, 0);
        }

        public Habitat SelectResources(Habitat habitat, int minimumResourceCount, Race dominantRace, int minimumCriticalResourceCount)
        {
            return SelectResources(habitat, minimumResourceCount, null, minimumCriticalResourceCount, null);
        }

        public Habitat SelectResources(Habitat habitat, int minimumResourceCount, Race dominantRace, int minimumCriticalResourceCount, ResourceDefinitionList randomOrderedResources)
        {
            int num = 0;
            if (_StarCount <= 250)
            {
                num = 1;
            }
            int num2;
            if (habitat.Diameter >= 85)
            {
                num2 = ((habitat.Diameter < 130) ? Rnd.Next(0, 3 + num) : ((habitat.Diameter >= 170) ? Rnd.Next(1 + num, 6) : Rnd.Next(0, 4 + num)));
            }
            else
            {
                num2 = Rnd.Next(0, 2 + num);
                if (habitat.Category == HabitatCategoryType.Asteroid)
                {
                    num2 = 0;
                    if (Rnd.Next(0, 3) == 1)
                    {
                        num2 = Rnd.Next(0, 2 + num);
                    }
                }
            }
            if (num2 < minimumResourceCount)
            {
                num2 = minimumResourceCount;
            }
            minimumCriticalResourceCount = Math.Min(minimumCriticalResourceCount, num2);
            ResourceList resourceList = new ResourceList();
            if (dominantRace != null && minimumResourceCount > 0)
            {
                ResourceList resourceList2 = dominantRace.CriticalResources.ResolveResources();
                for (int i = 0; i < resourceList2.Count && i < minimumCriticalResourceCount; i++)
                {
                    resourceList.Add(resourceList2[i]);
                }
                ResourceList resourceList3 = ResourceSystem.Resources.ResolveValidResourcesForHabitatExcludeManufactured(habitat);
                for (int j = 0; j < resourceList.Count; j++)
                {
                    if (resourceList3.Contains(resourceList[j]))
                    {
                        habitat.Resources.Add(new HabitatResource(resourceList[j].ResourceID, Rnd.Next(200, 800)));
                    }
                }
            }
            if (randomOrderedResources == null || randomOrderedResources.Count <= 0)
            {
                randomOrderedResources = ResourceSystem.GenerateRandomOrderedResources();
            }
            for (int k = 0; k < randomOrderedResources.Count; k++)
            {
                if (habitat.Resources.Count >= 5)
                {
                    break;
                }
                ResourceDefinition resourceDefinition = randomOrderedResources[k];
                if (resourceDefinition == null || resourceDefinition.ColonyManufacturingLevel > 0 || resourceDefinition.Prevalence == null || resourceDefinition.Prevalence.Count <= 0 || resourceDefinition.SuperLuxuryBonusAmount > 0)
                {
                    continue;
                }
                for (int l = 0; l < resourceDefinition.Prevalence.Count; l++)
                {
                    ResourcePrevalence resourcePrevalence = resourceDefinition.Prevalence[l];
                    if (resourcePrevalence == null || !ResourceSystem.Resources.CheckPrevalenceValidForHabitat(habitat, resourcePrevalence))
                    {
                        continue;
                    }
                    float num3 = (float)CryptoRnd.NextDouble();
                    if (num3 < resourcePrevalence.Prevalence)
                    {
                        int val = (int)(resourcePrevalence.AbundanceMinimum * 1000f);
                        int val2 = (int)(resourcePrevalence.AbundanceMaximum * 1000f);
                        val = Math.Max(0, Math.Min(1000, val));
                        val2 = Math.Max(0, Math.Min(1000, val2));
                        if (val > val2)
                        {
                            val = val2;
                        }
                        habitat.Resources.Add(new HabitatResource(resourceDefinition.ResourceID, CryptoRnd.Next(val, val2)));
                    }
                }
            }
            return habitat;
        }

        public void LoadDesignNames(string applicationStartupPath, string customizationSetName)
        {
            int num = 0;
            string text = applicationStartupPath + "\\designNames.txt";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\designNames.txt";
            }
            if (!File.Exists(text))
            {
                text = applicationStartupPath + "\\designNames.txt";
            }
            try
            {
                if (!File.Exists(text))
                {
                    throw new ApplicationException("Missing file: " + text);
                }
                FileStream fileStream = File.OpenRead(text);
                StreamReader streamReader = new StreamReader(fileStream);
                while (!streamReader.EndOfStream)
                {
                    num++;
                    List<string> list = new List<string>();
                    string text2 = streamReader.ReadLine();
                    if (string.IsNullOrEmpty(text2) || !(text2.Trim() != string.Empty) || !(text2.Trim().Substring(0, 1) != "'"))
                    {
                        continue;
                    }
                    int num2 = 0;
                    int num3 = 0;
                    while (num3 >= 0)
                    {
                        num3 = text2.IndexOf(",", num2);
                        string empty = string.Empty;
                        empty = ((num3 < 0) ? text2.Substring(num2, text2.Length - num2) : text2.Substring(num2, num3 - num2));
                        empty = empty.Trim();
                        if (!string.IsNullOrEmpty(empty))
                        {
                            list.Add(empty);
                        }
                        num2 = num3 + 1;
                    }
                    if (list.Count == 0)
                    {
                        throw new ApplicationException("No design names at line " + num + " in file " + text);
                    }
                    _DesignNames.Add(list.ToArray());
                }
                streamReader.Close();
                fileStream.Close();
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error at line " + num + " reading file " + text);
            }
            if (_DesignNames.Count < 14)
            {
                throw new ApplicationException("Must be at least 14 design name families in designs.txt");
            }
        }

        private void LoadSystemNames(string applicationStartupPath, string customizationSetName)
        {
            int num = 0;
            string text = applicationStartupPath + "\\systemNames.txt";
            if (!string.IsNullOrEmpty(customizationSetName) && customizationSetName.ToLower(CultureInfo.InvariantCulture) != "default")
            {
                text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\systemNames.txt";
            }
            if (!File.Exists(text))
            {
                text = applicationStartupPath + "\\systemNames.txt";
            }
            try
            {
                if (!File.Exists(text))
                {
                    throw new ApplicationException("Missing file: " + text);
                }
                FileStream fileStream = File.OpenRead(text);
                StreamReader streamReader = new StreamReader(fileStream);
                while (!streamReader.EndOfStream)
                {
                    num++;
                    string text2 = streamReader.ReadLine();
                    if (string.IsNullOrEmpty(text2) || !(text2.Trim() != string.Empty) || !(text2.Trim().Substring(0, 1) != "'"))
                    {
                        continue;
                    }
                    int num2 = 0;
                    int num3 = 0;
                    while (num3 >= 0)
                    {
                        num3 = text2.IndexOf(",", num2);
                        string empty = string.Empty;
                        empty = ((num3 < 0) ? text2.Substring(num2, text2.Length - num2) : text2.Substring(num2, num3 - num2));
                        empty = empty.Trim();
                        if (!string.IsNullOrEmpty(empty))
                        {
                            SystemNames.Add(empty);
                            SystemNamesUsedPlain.Add(item: false);
                            SystemNamesUsedAlternative.Add(item: false);
                        }
                        num2 = num3 + 1;
                    }
                }
                streamReader.Close();
                fileStream.Close();
            }
            catch (ApplicationException)
            {
                throw;
            }
            catch (Exception)
            {
                throw new ApplicationException("Error at line " + num + " reading file " + text);
            }
        }

        public bool AssignSystemName(Habitat habitat, int PlanetCount)
        {
            string empty = string.Empty;
            if (PlanetCount <= 0)
            {
                empty = ((habitat.Type != HabitatType.BlackHole) ? GenerateCodeName() : GenerateBlackHoleName());
            }
            else
            {
                int num = 0;
                int index = Rnd.Next(0, SystemNames.Count);
                while (SystemNamesUsedPlain[index] && num < 100)
                {
                    index = Rnd.Next(0, SystemNames.Count);
                    num++;
                }
                if (SystemNamesUsedPlain[index])
                {
                    if (SystemNamesUsedAlternative[index])
                    {
                        return false;
                    }
                    empty = SystemNames[index];
                    switch (Rnd.Next(0, 4))
                    {
                        case 0:
                            empty += " Major";
                            break;
                        case 1:
                            empty += " Minor";
                            break;
                        case 2:
                            empty += " Junction";
                            break;
                        case 3:
                            empty += " Prime";
                            break;
                    }
                    SystemNamesUsedAlternative[index] = true;
                }
                else
                {
                    empty = SystemNames[index];
                    SystemNamesUsedPlain[index] = true;
                }
            }
            habitat.Name = empty;
            return true;
        }

        public static double CalculateDistanceFactor(double distance)
        {
            return Math.Max(1000000000.0, Math.Pow(distance, 1.8)) / 1000000000.0;
        }

        public double GetRefactorForEmpire(Empire requestingEmpire, Empire offeringEmpire)
        {
            double num = 1.0;
            int num2 = 0;
            if (requestingEmpire.PirateEmpireBaseHabitat == null && offeringEmpire.PirateEmpireBaseHabitat == null)
            {
                EmpireEvaluation empireEvaluation = offeringEmpire.ObtainEmpireEvaluation(requestingEmpire);
                num2 = empireEvaluation.OverallAttitude;
            }
            else
            {
                PirateRelation pirateRelation = offeringEmpire.ObtainPirateRelation(requestingEmpire);
                num2 = (int)pirateRelation.Evaluation;
            }
            num = ((num2 > 0) ? Math.Min(1.0, 10.0 / (double)Math.Min(50, num2)) : ((num2 != 0) ? Math.Max(1.0, Math.Abs((double)Math.Max(-50, num2)) / 10.0) : 1.0));
            double num3 = 0.7 * ((5.0 + (5.0 - DifficultyLevel)) / 10.0);
            if (requestingEmpire == PlayerEmpire)
            {
                num /= num3;
            }
            return num;
        }

        public int RefactorValueForEmpire(int value, Empire requestingEmpire, Empire offeringEmpire)
        {
            return BaconGalaxy.RefactorValueForEmpire(this, value, requestingEmpire, offeringEmpire);
        }

        public double GetMoneyRate()
        {
            return TotalMoneyInGalaxy / 1000000.0;
        }

        public int ValueMoney(double moneyAmount)
        {
            int num = -1;
            return (int)moneyAmount;
        }

        public int ValueColonyForEmpire(Habitat colony, Empire empire)
        {
            long num = -1L;
            long num2 = empire.DetermineColonizationValue(colony);
            long num3 = (long)((double)colony.StrategicValue * 1.5);
            num = num3 + num2 * 100;
            if (empire == PlayerEmpire)
            {
                num = (long)((double)num * (PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel));
            }
            num = (long)((double)num * GetMoneyRate());
            if (num > 1073741823)
            {
                num = 1073741823L;
            }
            return (int)num;
        }

        public int ValueBaseForEmpire(BuiltObject station, Empire empire)
        {
            int result = -1;
            if (station.Role == BuiltObjectRole.Base)
            {
                double num = 1.0;
                switch (station.SubRole)
                {
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                        {
                            Habitat parentHabitat2 = station.ParentHabitat;
                            if (parentHabitat2 != null)
                            {
                                num = empire.DetermineResourceValue(parentHabitat2) * 2000.0;
                            }
                            break;
                        }
                    case BuiltObjectSubRole.EnergyResearchStation:
                    case BuiltObjectSubRole.WeaponsResearchStation:
                    case BuiltObjectSubRole.HighTechResearchStation:
                        {
                            double num3 = station.ResearchEnergy + station.ResearchHighTech + station.ResearchWeapons;
                            num = Math.Max(100.0, num3 / 5.0);
                            break;
                        }
                    case BuiltObjectSubRole.MonitoringStation:
                        num = 20000.0;
                        break;
                    case BuiltObjectSubRole.DefensiveBase:
                        num = 5000.0;
                        break;
                    case BuiltObjectSubRole.GenericBase:
                        num = 5000.0;
                        if (station.Design != null && station.Design.Name.ToLower(CultureInfo.InvariantCulture).Contains(TextResolver.GetText("Research").ToLower(CultureInfo.InvariantCulture)))
                        {
                            double num2 = station.ResearchEnergy + station.ResearchHighTech + station.ResearchWeapons;
                            num = Math.Max(100.0, num2 / 5.0);
                        }
                        else if (station.SensorLongRange > 0)
                        {
                            num = 20000.0;
                        }
                        break;
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                        {
                            num = 15000.0;
                            Habitat parentHabitat = station.ParentHabitat;
                            if (parentHabitat != null)
                            {
                                num = Math.Max(num, (double)parentHabitat.StrategicValue * 0.5);
                            }
                            break;
                        }
                    case BuiltObjectSubRole.ResortBase:
                        num = 15000.0;
                        break;
                }
                double num4 = empire.DetermineProximityFromCapital(station);
                result = (int)(num * num4);
                int val = (int)(1000000.0 * ((double)station.AnnualSupportCost / TotalMoneyInGalaxy));
                if (empire == PlayerEmpire)
                {
                    result = (int)((double)result * (PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel));
                }
                result = Math.Max(result, val);
                result = (int)((double)result * GetMoneyRate());
            }
            return result;
        }

        public int ValueTerritoryMapForEmpire(Empire mapEmpire, Empire requestingEmpire)
        {
            int num = -1;
            int num2 = 0;
            HabitatList habitatList = mapEmpire.DetermineEmpireSystems(mapEmpire, mustOwnColonies: true);
            foreach (Habitat item in habitatList)
            {
                if (!requestingEmpire.CheckSystemExplored(item.SystemIndex))
                {
                    num2 += Systems[item.SystemIndex].PlanetCount + Systems[item.SystemIndex].MoonCount;
                }
            }
            num = num2 * 100;
            if (requestingEmpire == PlayerEmpire)
            {
                num = (int)((double)num * (PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel));
            }
            return num;
        }

        public void MergeGalaxyMap(Empire giver, Empire receiver)
        {
            if (giver == null || receiver == null || giver.ResourceMap == null || receiver.ResourceMap == null || giver.SystemVisibility == null || receiver.SystemVisibility == null || giver.KnownGalaxyLocations == null || receiver.KnownGalaxyLocations == null)
            {
                return;
            }
            receiver.ResourceMap.MergeMap(giver.ResourceMap._ResourcesKnown);
            for (int i = 0; i < giver.SystemVisibility.Count; i++)
            {
                SystemVisibilityStatus status = giver.SystemVisibility[i].Status;
                if (status != SystemVisibilityStatus.Explored && status != SystemVisibilityStatus.Visible)
                {
                    continue;
                }
                SystemVisibilityStatus status2 = receiver.SystemVisibility[i].Status;
                if (status2 != SystemVisibilityStatus.Unexplored && status2 != 0)
                {
                    continue;
                }
                receiver.SystemVisibility[i].Status = SystemVisibilityStatus.Explored;
                SystemInfo systemInfo = Systems[receiver.SystemVisibility[i].SystemStar];
                if (systemInfo != null)
                {
                    if (systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != null)
                    {
                        if (receiver.PirateEmpireBaseHabitat != null)
                        {
                            PirateRelation pirateRelation = receiver.ObtainPirateRelation(systemInfo.DominantEmpire.Empire);
                            if (pirateRelation.Type == PirateRelationType.NotMet)
                            {
                                receiver.ChangePirateRelation(systemInfo.DominantEmpire.Empire, PirateRelationType.None, CurrentStarDate);
                                string description = string.Format(TextResolver.GetText("Empire Contact From Galaxy Map"), receiver.Name);
                                systemInfo.DominantEmpire.Empire.SendMessageToEmpire(systemInfo.DominantEmpire.Empire, EmpireMessageType.EmpireDiscovered, receiver, description);
                            }
                        }
                        else
                        {
                            DiplomaticRelation diplomaticRelation = receiver.ObtainDiplomaticRelation(systemInfo.DominantEmpire.Empire);
                            if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
                            {
                                receiver.ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                                string description2 = string.Format(TextResolver.GetText("Empire Contact From Galaxy Map"), receiver.Name);
                                systemInfo.DominantEmpire.Empire.SendMessageToEmpire(systemInfo.DominantEmpire.Empire, EmpireMessageType.EmpireDiscovered, receiver, description2);
                            }
                        }
                    }
                    if (systemInfo.OtherEmpires != null && systemInfo.OtherEmpires.Count > 0)
                    {
                        for (int j = 0; j < systemInfo.OtherEmpires.Count; j++)
                        {
                            EmpireSystemSummary empireSystemSummary = systemInfo.OtherEmpires[j];
                            if (empireSystemSummary == null || empireSystemSummary.Empire == null)
                            {
                                continue;
                            }
                            if (receiver.PirateEmpireBaseHabitat != null)
                            {
                                PirateRelation pirateRelation2 = receiver.ObtainPirateRelation(empireSystemSummary.Empire);
                                if (pirateRelation2.Type == PirateRelationType.NotMet)
                                {
                                    receiver.ChangePirateRelation(systemInfo.DominantEmpire.Empire, PirateRelationType.None, CurrentStarDate);
                                    string description3 = string.Format(TextResolver.GetText("Empire Contact From Galaxy Map"), receiver.Name);
                                    systemInfo.DominantEmpire.Empire.SendMessageToEmpire(systemInfo.DominantEmpire.Empire, EmpireMessageType.EmpireDiscovered, receiver, description3);
                                }
                            }
                            else
                            {
                                DiplomaticRelation diplomaticRelation2 = receiver.ObtainDiplomaticRelation(empireSystemSummary.Empire);
                                if (diplomaticRelation2.Type == DiplomaticRelationType.NotMet)
                                {
                                    receiver.ChangeDiplomaticRelation(diplomaticRelation2, DiplomaticRelationType.None);
                                    string description4 = string.Format(TextResolver.GetText("Empire Contact From Galaxy Map"), receiver.Name);
                                    systemInfo.DominantEmpire.Empire.SendMessageToEmpire(systemInfo.DominantEmpire.Empire, EmpireMessageType.EmpireDiscovered, receiver, description4);
                                }
                            }
                        }
                    }
                }
                if (!receiver.SystemsVisible.Contains(receiver.SystemVisibility[i].SystemStar))
                {
                    receiver.SystemsVisible.Add(receiver.SystemVisibility[i].SystemStar);
                }
            }
            for (int k = 0; k < giver.KnownGalaxyLocations.Count; k++)
            {
                GalaxyLocation item = giver.KnownGalaxyLocations[k];
                if (!receiver.KnownGalaxyLocations.Contains(item))
                {
                    receiver.KnownGalaxyLocations.Add(item);
                }
            }
            if (giver.KnownPirateBases != null && receiver.KnownPirateBases != null)
            {
                for (int l = 0; l < giver.KnownPirateBases.Count; l++)
                {
                    BuiltObject builtObject = giver.KnownPirateBases[l];
                    if (builtObject != null && !builtObject.HasBeenDestroyed && !receiver.KnownPirateBases.Contains(builtObject))
                    {
                        receiver.KnownPirateBases.Add(builtObject);
                    }
                }
            }
            if (receiver == PlayerEmpire)
            {
                ReviewEmpireTerritory(onlySystems: true);
            }
        }

        public void GiveTerritoryMap(Empire giver, Empire receiver)
        {
            if (giver == null || receiver == null)
            {
                return;
            }
            HabitatList habitatList = giver.DetermineEmpireSystems(giver);
            foreach (Habitat item in habitatList)
            {
                HabitatList habitatList2 = DetermineHabitatsInSystem(item);
                foreach (Habitat item2 in habitatList2)
                {
                    _ = item2;
                    SystemVisibilityStatus status = receiver.SystemVisibility[item.SystemIndex].Status;
                    if (status != SystemVisibilityStatus.Visible)
                    {
                        receiver.SetSystemVisibility(item, SystemVisibilityStatus.Explored);
                    }
                }
            }
            if (giver.PirateEmpireBaseHabitat != null && giver.SpacePorts != null && receiver.KnownPirateBases != null)
            {
                for (int i = 0; i < giver.SpacePorts.Count; i++)
                {
                    BuiltObject builtObject = giver.SpacePorts[i];
                    if (builtObject == null || builtObject.HasBeenDestroyed)
                    {
                        continue;
                    }
                    if (builtObject.NearestSystemStar != null)
                    {
                        SystemVisibilityStatus status2 = receiver.SystemVisibility[builtObject.NearestSystemStar.SystemIndex].Status;
                        if (status2 != SystemVisibilityStatus.Visible)
                        {
                            receiver.SetSystemVisibility(builtObject.NearestSystemStar, SystemVisibilityStatus.Explored);
                        }
                    }
                    if (!receiver.KnownPirateBases.Contains(builtObject))
                    {
                        receiver.KnownPirateBases.Add(builtObject);
                    }
                }
            }
            if (receiver == PlayerEmpire)
            {
                ReviewEmpireTerritory(onlySystems: true);
            }
        }

        public void GiveTradeableItem(Empire giver, Empire receiver, TradeableItem item, TradeableItemList exchangedItems)
        {
            DiplomaticRelation diplomaticRelation = null;
            DiplomaticRelation diplomaticRelation2 = null;
            PirateRelation pirateRelation = null;
            switch (item.Type)
            {
                case TradeableItemType.Money:
                    {
                        double num2 = 0.0;
                        if (item.Item is double)
                        {
                            num2 = (double)item.Item;
                        }
                        giver.StateMoney -= num2;
                        bool flag = false;
                        if (exchangedItems != null && exchangedItems.Count > 0 && (exchangedItems.ContainsType(TradeableItemType.ContactEmpire) || exchangedItems.ContainsType(TradeableItemType.IndependentColonyLocation) || exchangedItems.ContainsType(TradeableItemType.SecretLocation) || exchangedItems.ContainsType(TradeableItemType.SystemMap)))
                        {
                            flag = true;
                        }
                        giver.PirateEconomy.PerformExpense(num2, PirateExpenseType.Undefined, CurrentStarDate);
                        receiver.StateMoney += num2;
                        if (flag)
                        {
                            receiver.PirateEconomy.PerformIncome(num2, PirateIncomeType.SellInfo, CurrentStarDate);
                        }
                        else
                        {
                            receiver.PirateEconomy.PerformIncome(num2, PirateIncomeType.Undefined, CurrentStarDate);
                        }
                        break;
                    }
                case TradeableItemType.Base:
                    {
                        BuiltObject builtObject = null;
                        if (item.Item is BuiltObject)
                        {
                            builtObject = (BuiltObject)item.Item;
                        }
                        if (builtObject != null)
                        {
                            receiver.TakeOwnershipOfBuiltObject(builtObject, receiver, setDesignAsObsolete: true);
                        }
                        break;
                    }
                case TradeableItemType.Colony:
                    {
                        Habitat habitat2 = null;
                        if (item.Item is Habitat)
                        {
                            habitat2 = (Habitat)item.Item;
                        }
                        if (habitat2 != null)
                        {
                            receiver.TakeOwnershipOfColony(habitat2, receiver);
                        }
                        break;
                    }
                case TradeableItemType.TerritoryMap:
                    GiveTerritoryMap(giver, receiver);
                    break;
                case TradeableItemType.GalaxyMap:
                    MergeGalaxyMap(giver, receiver);
                    break;
                case TradeableItemType.ContactEmpire:
                    {
                        if (!(item.Item is Empire))
                        {
                            break;
                        }
                        Empire empire3 = (Empire)item.Item;
                        if (receiver.PirateEmpireBaseHabitat != null && empire3 != null)
                        {
                            pirateRelation = receiver.ObtainPirateRelation(empire3);
                            if (pirateRelation.Type == PirateRelationType.NotMet)
                            {
                                pirateRelation.Type = PirateRelationType.None;
                            }
                            string title = string.Format(TextResolver.GetText("Inform Empire Their Contact Details Sold Title"), receiver.Name);
                            string description = string.Format(TextResolver.GetText("Inform Empire Their Contact Details Sold"), giver.Name, receiver.Name);
                            empire3.SendMessageToEmpireWithTitle(empire3, EmpireMessageType.GeneralNeutralEvent, null, description, title);
                            PirateRelation pirateRelation2 = empire3.ObtainPirateRelation(receiver);
                            if (pirateRelation2.Type == PirateRelationType.NotMet)
                            {
                                pirateRelation2.Type = PirateRelationType.None;
                            }
                        }
                        else
                        {
                            diplomaticRelation = receiver.ObtainDiplomaticRelation(empire3);
                            if (diplomaticRelation.Type == DiplomaticRelationType.NotMet)
                            {
                                diplomaticRelation.Type = DiplomaticRelationType.None;
                            }
                            string title2 = string.Format(TextResolver.GetText("Inform Empire Their Contact Details Sold Title"), receiver.Name);
                            string description2 = string.Format(TextResolver.GetText("Inform Empire Their Contact Details Sold"), giver.Name, receiver.Name);
                            empire3.SendMessageToEmpireWithTitle(empire3, EmpireMessageType.GeneralNeutralEvent, null, description2, title2);
                            DiplomaticRelation diplomaticRelation5 = empire3.ObtainDiplomaticRelation(receiver);
                            if (diplomaticRelation5.Type == DiplomaticRelationType.NotMet)
                            {
                                diplomaticRelation5.Type = DiplomaticRelationType.None;
                            }
                        }
                        break;
                    }
                case TradeableItemType.SystemMap:
                    if (item.Item is Habitat)
                    {
                        Habitat systemStar = (Habitat)item.Item;
                        if (receiver.CheckSystemVisibilityStatus(systemStar) == SystemVisibilityStatus.Unexplored)
                        {
                            receiver.SetSystemVisibility(systemStar, SystemVisibilityStatus.Explored);
                        }
                    }
                    break;
                case TradeableItemType.IndependentColonyLocation:
                    if (item.Item is Habitat)
                    {
                        Habitat habitat3 = (Habitat)item.Item;
                        Habitat systemStar3 = DetermineHabitatSystemStar(habitat3);
                        if (receiver.CheckSystemVisibilityStatus(systemStar3) == SystemVisibilityStatus.Unexplored)
                        {
                            receiver.SetSystemVisibility(systemStar3, SystemVisibilityStatus.Explored);
                        }
                        receiver.AddLocationHint(new Point((int)habitat3.Xpos, (int)habitat3.Ypos));
                    }
                    break;
                case TradeableItemType.SecretLocation:
                    if (item.Item is GalaxyLocation)
                    {
                        GalaxyLocation galaxyLocation = (GalaxyLocation)item.Item;
                        if (!receiver.KnownGalaxyLocations.Contains(galaxyLocation))
                        {
                            receiver.KnownGalaxyLocations.Add(galaxyLocation);
                        }
                        receiver.AddLocationHint(new Point((int)galaxyLocation.Xpos, (int)galaxyLocation.Ypos));
                    }
                    else if (item.Item is Habitat)
                    {
                        Habitat habitat = (Habitat)item.Item;
                        Habitat systemStar2 = DetermineHabitatSystemStar(habitat);
                        if (receiver.CheckSystemVisibilityStatus(systemStar2) == SystemVisibilityStatus.Unexplored)
                        {
                            receiver.SetSystemVisibility(systemStar2, SystemVisibilityStatus.Explored);
                        }
                        receiver.AddLocationHint(new Point((int)habitat.Xpos, (int)habitat.Ypos));
                    }
                    break;
                case TradeableItemType.ResearchProject:
                    {
                        ResearchNode researchNode = null;
                        if (item.Item is ResearchNode)
                        {
                            researchNode = (ResearchNode)item.Item;
                        }
                        if (researchNode != null)
                        {
                            int num = receiver.Research.ResearchQueueEnergy.IndexOf(researchNode);
                            if (num >= 0)
                            {
                                receiver.Research.ResearchQueueEnergy.RemoveAt(num);
                            }
                            num = receiver.Research.ResearchQueueHighTech.IndexOf(researchNode);
                            if (num >= 0)
                            {
                                receiver.Research.ResearchQueueHighTech.RemoveAt(num);
                            }
                            num = receiver.Research.ResearchQueueWeapons.IndexOf(researchNode);
                            if (num >= 0)
                            {
                                receiver.Research.ResearchQueueWeapons.RemoveAt(num);
                            }
                            num = receiver.Research.TechTree.IndexOf(researchNode);
                            if (num >= 0)
                            {
                                receiver.DoResearchBreakthrough(receiver.Research.TechTree[num], selfResearched: false, blockMessages: true, suppressUpdate: true);
                            }
                            receiver.Research.Update(receiver.DominantRace);
                        }
                        break;
                    }
                case TradeableItemType.AdoptGovernmentStyle:
                    if (giver.PirateEmpireBaseHabitat == null)
                    {
                        GovernmentAttributes governmentAttributes = null;
                        if (item.Item is GovernmentAttributes)
                        {
                            governmentAttributes = (GovernmentAttributes)item.Item;
                        }
                        if (governmentAttributes != null)
                        {
                            giver.HaveRevolution(giver.DominantRace, governmentAttributes.GovernmentId);
                        }
                    }
                    break;
                case TradeableItemType.DeclareWarOther:
                    {
                        Empire empire4 = null;
                        if (item.Item is Empire)
                        {
                            empire4 = (Empire)item.Item;
                        }
                        if (empire4 != null && giver.PirateEmpireBaseHabitat == null && empire4.PirateEmpireBaseHabitat == null)
                        {
                            giver.DeclareWar(empire4, receiver);
                        }
                        break;
                    }
                case TradeableItemType.EndWar:
                    if (giver.PirateEmpireBaseHabitat == null && receiver.PirateEmpireBaseHabitat == null)
                    {
                        diplomaticRelation = giver.ObtainDiplomaticRelation(receiver);
                        giver.ResetAttitudeLevelsAtEndOfWar(diplomaticRelation);
                        diplomaticRelation.Type = DiplomaticRelationType.None;
                        diplomaticRelation.LastDiplomacyTradeOfferDate = CurrentStarDate;
                        diplomaticRelation2 = receiver.ObtainDiplomaticRelation(giver);
                        diplomaticRelation2.Type = DiplomaticRelationType.None;
                        diplomaticRelation2.LastDiplomacyTradeOfferDate = CurrentStarDate;
                        giver.ProcessEndOfWarWithEmpire(receiver);
                        receiver.ProcessEndOfWarWithEmpire(giver);
                        giver.ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                        giver.SendNewsBroadcastWarStartEnd(diplomaticRelation);
                    }
                    break;
                case TradeableItemType.LiftTradeSanctions:
                    if (giver.PirateEmpireBaseHabitat == null && receiver.PirateEmpireBaseHabitat == null)
                    {
                        diplomaticRelation = giver.ObtainDiplomaticRelation(receiver);
                        if (diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                        {
                            giver.ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                            giver.SendMessageToEmpire(receiver, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, TextResolver.GetText("Our trade sanctions against you have been lifted - we will now resume trade."), ResolveDescription(DiplomaticRelationType.TradeSanctions));
                            giver.CancelBlockades(receiver);
                            receiver.CancelBlockades(giver);
                        }
                    }
                    break;
                case TradeableItemType.EndWarOther:
                    {
                        Empire empire5 = null;
                        if (item.Item is Empire)
                        {
                            empire5 = (Empire)item.Item;
                        }
                        if (empire5 != null && giver.PirateEmpireBaseHabitat == null && empire5.PirateEmpireBaseHabitat == null)
                        {
                            diplomaticRelation = giver.ObtainDiplomaticRelation(empire5);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War)
                            {
                                giver.ResetAttitudeLevelsAtEndOfWar(diplomaticRelation);
                                diplomaticRelation.Type = DiplomaticRelationType.None;
                                diplomaticRelation.LastDiplomacyTradeOfferDate = CurrentStarDate;
                                diplomaticRelation2 = empire5.ObtainDiplomaticRelation(giver);
                                diplomaticRelation2.Type = DiplomaticRelationType.None;
                                diplomaticRelation2.LastDiplomacyTradeOfferDate = CurrentStarDate;
                                giver.ProcessEndOfWarWithEmpire(empire5);
                                empire5.ProcessEndOfWarWithEmpire(giver);
                                giver.ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                                giver.SendMessageToEmpire(empire5, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, TextResolver.GetText("We are ending our war with you"), ResolveDescription(DiplomaticRelationType.War));
                                giver.SendNewsBroadcastWarStartEnd(diplomaticRelation);
                            }
                        }
                        break;
                    }
                case TradeableItemType.InitiateTradeSanctionsOther:
                    {
                        Empire empire2 = null;
                        if (item.Item is Empire)
                        {
                            empire2 = (Empire)item.Item;
                        }
                        if (empire2 != null && giver.PirateEmpireBaseHabitat == null && empire2.PirateEmpireBaseHabitat == null)
                        {
                            DiplomaticRelation diplomaticRelation4 = giver.DiplomaticRelations[empire2];
                            if (diplomaticRelation4 != null)
                            {
                                giver.ChangeDiplomaticRelation(diplomaticRelation4, DiplomaticRelationType.TradeSanctions);
                                giver.SendMessageToEmpire(empire2, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.TradeSanctions, TextResolver.GetText("Our blockade is perfectly legal..."), "PERSUADED");
                            }
                        }
                        break;
                    }
                case TradeableItemType.LiftTradeSanctionsOther:
                    {
                        Empire empire = null;
                        if (item.Item is Empire)
                        {
                            empire = (Empire)item.Item;
                        }
                        if (empire != null && giver.PirateEmpireBaseHabitat == null && empire.PirateEmpireBaseHabitat == null)
                        {
                            DiplomaticRelation diplomaticRelation3 = giver.DiplomaticRelations[empire];
                            if (diplomaticRelation3 != null)
                            {
                                giver.ChangeDiplomaticRelation(diplomaticRelation3, DiplomaticRelationType.None);
                                giver.SendMessageToEmpire(empire, EmpireMessageType.DiplomaticRelationChange, DiplomaticRelationType.None, TextResolver.GetText("Our trade sanctions against you have been lifted - we will now resume trade."), ResolveDescription(DiplomaticRelationType.TradeSanctions));
                                giver.CancelBlockades(empire);
                                empire.CancelBlockades(giver);
                            }
                        }
                        break;
                    }
                case TradeableItemType.ThreatenWar:
                case TradeableItemType.ThreatenTradeSanctions:
                    break;
            }
        }

        public int UpdateValueDeclareWarOnEmpire(int value, Empire requester, Empire giver, Empire targetEmpire)
        {
            DiplomaticRelation diplomaticRelation = giver.ObtainDiplomaticRelation(targetEmpire);
            DiplomaticRelation diplomaticRelation2 = giver.ObtainDiplomaticRelation(requester);
            if ((diplomaticRelation2.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation2.Type == DiplomaticRelationType.Protectorate && diplomaticRelation2.Initiator == giver)) && diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact && diplomaticRelation.Type != DiplomaticRelationType.Protectorate)
            {
                value = 0;
            }
            return value;
        }

        public TradeableItemList ResolveTradeableItemsDiplomacy(Empire giver, Empire receiver, bool refactorValuesForEmpire)
        {
            TradeableItemList tradeableItemList = new TradeableItemList();
            EmpireList empireList = new EmpireList();
            EmpireList empireList2 = new EmpireList();
            for (int i = 0; i < giver.DiplomaticRelations.Count; i++)
            {
                DiplomaticRelation diplomaticRelation = giver.DiplomaticRelations[i];
                if (diplomaticRelation.OtherEmpire != receiver && diplomaticRelation.Initiator == giver && !diplomaticRelation.Locked)
                {
                    if (diplomaticRelation.Type == DiplomaticRelationType.War)
                    {
                        empireList.Add(diplomaticRelation.OtherEmpire);
                    }
                    else if (diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                    {
                        empireList2.Add(diplomaticRelation.OtherEmpire);
                    }
                }
            }
            for (int j = 0; j < receiver.DiplomaticRelations.Count; j++)
            {
                DiplomaticRelation diplomaticRelation2 = receiver.DiplomaticRelations[j];
                if (diplomaticRelation2.OtherEmpire == giver)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation3 = giver.DiplomaticRelations[diplomaticRelation2.OtherEmpire];
                if (diplomaticRelation3 != null && diplomaticRelation3.Type != 0 && diplomaticRelation3.Type != DiplomaticRelationType.War && diplomaticRelation2.Type == DiplomaticRelationType.War && !diplomaticRelation3.Locked)
                {
                    int value = ValueDeclareWarOnEmpire(giver, diplomaticRelation2.OtherEmpire);
                    value = UpdateValueDeclareWarOnEmpire(value, receiver, giver, diplomaticRelation2.OtherEmpire);
                    if (value >= 0 && refactorValuesForEmpire)
                    {
                        value = RefactorValueForEmpire(value, receiver, giver);
                    }
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.DeclareWarOther, diplomaticRelation2.OtherEmpire, value));
                }
            }
            for (int k = 0; k < receiver.DiplomaticRelations.Count; k++)
            {
                DiplomaticRelation diplomaticRelation4 = receiver.DiplomaticRelations[k];
                if (diplomaticRelation4.OtherEmpire == giver)
                {
                    continue;
                }
                DiplomaticRelation diplomaticRelation5 = giver.DiplomaticRelations[diplomaticRelation4.OtherEmpire];
                if (diplomaticRelation5 != null && diplomaticRelation5.Type != 0 && diplomaticRelation5.Type != DiplomaticRelationType.TradeSanctions && diplomaticRelation5.Type != DiplomaticRelationType.War && diplomaticRelation4.Type == DiplomaticRelationType.TradeSanctions && !diplomaticRelation5.Locked)
                {
                    int num = ValueInitiateTradeSanctionsAgainstEmpire(giver, diplomaticRelation4.OtherEmpire);
                    if (num >= 0 && refactorValuesForEmpire)
                    {
                        num = RefactorValueForEmpire(num, receiver, giver);
                    }
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.InitiateTradeSanctionsOther, diplomaticRelation4.OtherEmpire, num));
                }
            }
            foreach (Empire item in empireList)
            {
                int num2 = ValueEndWarWithEmpire(receiver, giver, item);
                if (num2 >= 0 && refactorValuesForEmpire)
                {
                    num2 = RefactorValueForEmpire(num2, receiver, giver);
                }
                if (num2 >= 0)
                {
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.EndWarOther, item, num2));
                }
            }
            foreach (Empire item2 in empireList2)
            {
                int num3 = ValueLiftTradeSanctionsAgainstEmpire(receiver, giver, item2);
                if (num3 >= 0 && refactorValuesForEmpire)
                {
                    num3 = RefactorValueForEmpire(num3, receiver, giver);
                }
                if (num3 >= 0)
                {
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.LiftTradeSanctionsOther, item2, num3));
                }
            }
            DiplomaticRelation diplomaticRelation6 = giver.ObtainDiplomaticRelation(receiver);
            if (diplomaticRelation6.Type == DiplomaticRelationType.War && !diplomaticRelation6.Locked)
            {
                int num4 = ValueEndWarAgainstUs(giver, receiver);
                if (num4 >= 0 && refactorValuesForEmpire)
                {
                    num4 = RefactorValueForEmpire(num4, receiver, giver);
                }
                if (num4 >= 0)
                {
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.EndWar, giver, num4));
                }
            }
            else if (diplomaticRelation6.Type == DiplomaticRelationType.TradeSanctions && !diplomaticRelation6.Locked)
            {
                int num5 = ValueLiftTradeSanctionsAgainstUs(giver, receiver);
                if (num5 >= 0 && refactorValuesForEmpire)
                {
                    num5 = RefactorValueForEmpire(num5, receiver, giver);
                }
                if (num5 >= 0)
                {
                    tradeableItemList.Add(new TradeableItem(TradeableItemType.LiftTradeSanctions, receiver, num5));
                }
            }
            if (diplomaticRelation6.Type != DiplomaticRelationType.War && !diplomaticRelation6.Locked)
            {
                int value2 = 0;
                tradeableItemList.Add(new TradeableItem(TradeableItemType.ThreatenWar, receiver, value2));
            }
            if (diplomaticRelation6.Type != DiplomaticRelationType.War && diplomaticRelation6.Type != DiplomaticRelationType.TradeSanctions && !diplomaticRelation6.Locked)
            {
                int value3 = 0;
                tradeableItemList.Add(new TradeableItem(TradeableItemType.ThreatenTradeSanctions, receiver, value3));
            }
            return tradeableItemList;
        }

        public TradeableItemList ResolveTradeableItemsColoniesBases(Empire giver, Empire receiver)
        {
            return ResolveTradeableItemsColoniesBases(giver, receiver, includeNearestColony: false, refactorValuesForEmpire: true);
        }

        public TradeableItemList ResolveTradeableItemsColoniesBases(Empire giver, Empire receiver, bool includeNearestColony, bool refactorValuesForEmpire)
        {
            return BaconGalaxy.ResolveTradeableItemsColoniesBases(this, giver, receiver, refactorValuesForEmpire);
        }

        public TradeableItemList ResolveTradeableItemsResearchProjects(Empire giver, Empire receiver, bool refactorValuesForEmpire, bool includeSpecialTech)
        {
            return ResolveTradeableItemsResearchProjects(giver, receiver, refactorValuesForEmpire, includeSpecialTech, includeWarpColonizationWeapons: true);
        }

        public TradeableItemList ResolveTradeableItemsResearchProjects(Empire giver, Empire receiver, bool refactorValuesForEmpire, bool includeSpecialTech, bool includeWarpColonizationWeapons)
        {
            TradeableItemList tradeableItemList = new TradeableItemList();
            ResearchNodeList researchNodeList = receiver.Research.ResolveMoreAdvancedProjects(giver, includeSpecialTech);
            for (int i = 0; i < researchNodeList.Count; i++)
            {
                ResearchNode researchNode = researchNodeList[i];
                if (!researchNode.SelfResearched)
                {
                    continue;
                }
                bool flag = true;
                if (!includeWarpColonizationWeapons)
                {
                    switch (researchNode.Category)
                    {
                        case ComponentCategoryType.WeaponBeam:
                        case ComponentCategoryType.WeaponTorpedo:
                        case ComponentCategoryType.WeaponArea:
                        case ComponentCategoryType.WeaponPointDefense:
                        case ComponentCategoryType.WeaponIon:
                        case ComponentCategoryType.WeaponGravity:
                        case ComponentCategoryType.AssaultPod:
                        case ComponentCategoryType.Fighter:
                        case ComponentCategoryType.HyperDrive:
                        case ComponentCategoryType.WeaponSuperBeam:
                        case ComponentCategoryType.WeaponSuperArea:
                        case ComponentCategoryType.WeaponSuperTorpedo:
                            flag = false;
                            break;
                    }
                    ResearchAbilityType researchAbilityType = researchNode.ResolveResearchAbilityType();
                    ResearchAbilityType researchAbilityType2 = researchAbilityType;
                    if (researchAbilityType2 == ResearchAbilityType.ColonizeHabitatType)
                    {
                        flag = false;
                    }
                    if (researchNode.CheckAnyComponentTypeMatches(ComponentType.HabitationColonization))
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    int num = ValueResearchProjectForEmpire(researchNode, receiver);
                    double num2 = 0.67 / DifficultyLevel;
                    if (giver == PlayerEmpire)
                    {
                        num = (int)((double)num * num2);
                    }
                    else if (receiver == PlayerEmpire)
                    {
                        num = (int)((double)num / num2);
                    }
                    if (num >= 0 && refactorValuesForEmpire)
                    {
                        num = RefactorValueForEmpire(num, receiver, giver);
                    }
                    if (num > 0)
                    {
                        tradeableItemList.Add(new TradeableItem(TradeableItemType.ResearchProject, researchNode, num));
                    }
                }
            }
            return tradeableItemList;
        }

        public TradeableItemList ResolveTradeableItemsMaps(Empire giver, Empire receiver, bool refactorValuesForEmpire)
        {
            TradeableItemList tradeableItemList = new TradeableItemList();
            int num = ValueTerritoryMapForEmpire(giver, receiver);
            if (num >= 0 && refactorValuesForEmpire)
            {
                num = RefactorValueForEmpire(num, receiver, giver);
            }
            if (num >= 0)
            {
                tradeableItemList.Add(new TradeableItem(TradeableItemType.TerritoryMap, null, num));
            }
            int num2 = ValueGalaxyMapForEmpire(giver, receiver);
            if (num2 >= 0 && refactorValuesForEmpire)
            {
                num2 = RefactorValueForEmpire(num2, receiver, giver);
            }
            if (num2 >= 0)
            {
                tradeableItemList.Add(new TradeableItem(TradeableItemType.GalaxyMap, null, num2));
            }
            return tradeableItemList;
        }

        public TradeableItemList ResolveTradeableItems(Empire giver, Empire receiver, bool includeNearestColony, bool refactorValuesForEmpire)
        {
            return ResolveTradeableItems(giver, receiver, includeNearestColony, refactorValuesForEmpire, includeAllItems: false);
        }

        public TradeableItemList ResolveTradeableItems(Empire giver, Empire receiver, bool includeNearestColony, bool refactorValuesForEmpire, bool includeAllItems)
        {
            TradeableItemList tradeableItemList = new TradeableItemList();
            int num = 0;
            if (giver.PirateEmpireBaseHabitat == null && receiver.PirateEmpireBaseHabitat == null)
            {
                EmpireEvaluation empireEvaluation = giver.ObtainEmpireEvaluation(receiver);
                if (empireEvaluation != null)
                {
                    num = empireEvaluation.OverallAttitude;
                }
            }
            else
            {
                PirateRelation pirateRelation = giver.ObtainPirateRelation(receiver);
                num = (int)pirateRelation.Evaluation;
            }
            int value = ValueMoney(10.0);
            tradeableItemList.Add(new TradeableItem(TradeableItemType.Money, 10.0, value));
            value = ValueMoney(100.0);
            tradeableItemList.Add(new TradeableItem(TradeableItemType.Money, 100.0, value));
            value = ValueMoney(1000.0);
            tradeableItemList.Add(new TradeableItem(TradeableItemType.Money, 1000.0, value));
            value = ValueMoney(10000.0);
            tradeableItemList.Add(new TradeableItem(TradeableItemType.Money, 10000.0, value));
            value = ValueMoney(100000.0);
            tradeableItemList.Add(new TradeableItem(TradeableItemType.Money, 100000.0, value));
            if (receiver.PirateEmpireBaseHabitat == null)
            {
                tradeableItemList.AddRange(ResolveTradeableItemsColoniesBases(giver, receiver, includeNearestColony, refactorValuesForEmpire));
            }
            if (includeAllItems || num >= TradeTerritoryMapThreshhold)
            {
                tradeableItemList.AddRange(ResolveTradeableItemsMaps(giver, receiver, refactorValuesForEmpire));
            }
            if (AllowTechTrading)
            {
                int num2 = TradeResearchThreshhold;
                if (receiver == PlayerEmpire)
                {
                    num2 = (int)((double)TradeResearchThreshhold * DifficultyLevel);
                }
                if (includeAllItems || num >= num2)
                {
                    int num3 = TradeResearchSpecialThreshhold;
                    if (receiver == PlayerEmpire)
                    {
                        num3 = (int)((double)TradeResearchSpecialThreshhold * DifficultyLevel);
                    }
                    bool includeSpecialTech = false;
                    if (includeAllItems || num >= num3)
                    {
                        includeSpecialTech = true;
                    }
                    tradeableItemList.AddRange(ResolveTradeableItemsResearchProjects(giver, receiver, refactorValuesForEmpire, includeSpecialTech));
                }
            }
            if (giver.PirateEmpireBaseHabitat == null && receiver.PirateEmpireBaseHabitat == null)
            {
                tradeableItemList.AddRange(ResolveTradeableItemsDiplomacy(giver, receiver, refactorValuesForEmpire));
            }
            if (giver.PirateEmpireBaseHabitat != null)
            {
                tradeableItemList.AddRange(ResolveTradeableItemsPirateInfo(giver, receiver, refactorValuesForEmpire));
            }
            return tradeableItemList;
        }

        public TradeableItemList ResolveTradeableItemsPirateInfo(Empire pirateGiver, Empire receiver, bool refactorValuesForEmpire)
        {
            TradeableItemList tradeableItemList = new TradeableItemList();
            pirateGiver.GenerateSaleableInfoForEmpire(pirateGiver, receiver, out var unmetEmpires, out var unexploredSystems, out var independentColonies, out var ruinHabitats, out var debrisFieldLocations, out var planetDestroyerLocations, out var restrictedAreaLocations);
            for (int i = 0; i < unmetEmpires.Count; i++)
            {
                double value = (double)unmetEmpires[i].TotalColonyStrategicValue / 200.0;
                value = Math.Round(value, 0);
                value = Math.Min(value, 10000.0);
                TradeableItem item = new TradeableItem(TradeableItemType.ContactEmpire, unmetEmpires[i], (int)value);
                tradeableItemList.Add(item);
            }
            for (int j = 0; j < unexploredSystems.Count; j++)
            {
                TradeableItem item2 = new TradeableItem(TradeableItemType.SystemMap, unexploredSystems[j], 2000);
                tradeableItemList.Add(item2);
            }
            for (int k = 0; k < independentColonies.Count; k++)
            {
                TradeableItem item3 = new TradeableItem(TradeableItemType.IndependentColonyLocation, independentColonies[k], 20000);
                tradeableItemList.Add(item3);
            }
            for (int l = 0; l < ruinHabitats.Count; l++)
            {
                TradeableItem item4 = new TradeableItem(TradeableItemType.SecretLocation, ruinHabitats[l], 30000);
                tradeableItemList.Add(item4);
            }
            for (int m = 0; m < debrisFieldLocations.Count; m++)
            {
                TradeableItem item5 = new TradeableItem(TradeableItemType.SecretLocation, debrisFieldLocations[m], 30000);
                tradeableItemList.Add(item5);
            }
            for (int n = 0; n < planetDestroyerLocations.Count; n++)
            {
                TradeableItem item6 = new TradeableItem(TradeableItemType.SecretLocation, planetDestroyerLocations[n], 30000);
                tradeableItemList.Add(item6);
            }
            for (int num = 0; num < restrictedAreaLocations.Count; num++)
            {
                TradeableItem item7 = new TradeableItem(TradeableItemType.SecretLocation, restrictedAreaLocations[num], 30000);
                tradeableItemList.Add(item7);
            }
            return tradeableItemList;
        }

        public int ValueThreatenWar(Empire threateningEmpire, Empire targetEmpire)
        {
            int result = -1;
            if (threateningEmpire != targetEmpire)
            {
                DiplomaticRelation diplomaticRelation = threateningEmpire.ObtainDiplomaticRelation(targetEmpire);
                if (diplomaticRelation.Type != DiplomaticRelationType.War)
                {
                    double val = (double)threateningEmpire.WeightedMilitaryPotency / (double)targetEmpire.WeightedMilitaryPotency;
                    val = Math.Min(Math.Max(val, 0.2), 5.0);
                    result = (int)(val * 10000.0);
                }
            }
            return result;
        }

        public int ValueThreatenTradeSanctions(Empire threateningEmpire, Empire targetEmpire)
        {
            int result = -1;
            if (threateningEmpire != targetEmpire)
            {
                DiplomaticRelation diplomaticRelation = threateningEmpire.ObtainDiplomaticRelation(targetEmpire);
                if (diplomaticRelation.Type != DiplomaticRelationType.War && diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions)
                {
                    double val = (double)threateningEmpire.WeightedMilitaryPotency / (double)targetEmpire.WeightedMilitaryPotency;
                    val = Math.Min(Math.Max(val, 0.2), 5.0);
                    result = (int)(val * 5000.0);
                }
            }
            return result;
        }

        public int ValueResearchProjectForEmpire(ResearchNode project, Empire requestingEmpire)
        {
            long num = -1L;
            if (project != null)
            {
                int num2 = (int)(project.Cost - requestingEmpire.Research.TechTree.GetEquivalent(project).Progress);
                int num3 = 0;
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire.Research.TechTree.GetEquivalent(project).IsResearched)
                    {
                        num3++;
                    }
                }
                num = (long)((double)num2 * 3.0);
                if (project.AllowedRaces != null && project.AllowedRaces.Count > 0)
                {
                    num *= 5;
                }
                if (num3 > 1)
                {
                    num = (long)((double)num / Math.Sqrt(num3));
                }
                bool flag = false;
                if (((project.Components != null && project.Components.Count > 0) || (project.ComponentImprovements != null && project.ComponentImprovements.Count > 0)) && (project.Abilities == null || project.Abilities.Count <= 0) && (project.Fighters == null || project.Fighters.Count <= 0) && project.PlanetaryFacility == null)
                {
                    if (project.Components != null && project.Components.Count > 0)
                    {
                        for (int j = 0; j < project.Components.Count; j++)
                        {
                            Component component = project.Components[j];
                            if (component != null && requestingEmpire.DesignSpecifications != null && requestingEmpire.DesignSpecifications.CheckAnyDesignSpecificationsUseComponent(component))
                            {
                                flag = true;
                                break;
                            }
                        }
                    }
                    if (project.ComponentImprovements != null && project.ComponentImprovements.Count > 0)
                    {
                        for (int k = 0; k < project.ComponentImprovements.Count; k++)
                        {
                            ComponentImprovement componentImprovement = project.ComponentImprovements[k];
                            if (componentImprovement != null)
                            {
                                Component improvedComponent = componentImprovement.ImprovedComponent;
                                if (improvedComponent != null && requestingEmpire.DesignSpecifications != null && requestingEmpire.DesignSpecifications.CheckAnyDesignSpecificationsUseComponent(improvedComponent))
                                {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (requestingEmpire != PlayerEmpire && !flag)
                {
                    num = 0L;
                }
                if (requestingEmpire == PlayerEmpire)
                {
                    num = (long)((double)num * (PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel));
                }
                if (num > 1073741823)
                {
                    num = 1073741823L;
                }
            }
            return (int)num;
        }

        public int ValueGalaxyMapForEmpire(Empire mapEmpire, Empire requestingEmpire)
        {
            int num = -1;
            int num2 = 0;
            if (mapEmpire.ResourceMap != null)
            {
                for (int i = 0; i < mapEmpire.SystemVisibility.Count; i++)
                {
                    if (!mapEmpire.CheckSystemExplored(i))
                    {
                        continue;
                    }
                    for (int j = 0; j < Systems[i].Habitats.Count; j++)
                    {
                        if (Systems[i].Habitats[j].Category != HabitatCategoryType.Asteroid && mapEmpire.ResourceMap.CheckResourcesKnown(Systems[i].Habitats[j]) && !requestingEmpire.ResourceMap.CheckResourcesKnown(Systems[i].Habitats[j]))
                        {
                            num2++;
                        }
                    }
                }
            }
            num = num2 * 200;
            if (requestingEmpire == PlayerEmpire)
            {
                num = (int)((double)num * (PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel));
            }
            return num;
        }

        public int ValueDeclareWarOnEmpire(Empire empire, Empire targetEmpire)
        {
            long num = -1L;
            DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(targetEmpire);
            if (diplomaticRelation != null && diplomaticRelation.Type != DiplomaticRelationType.War && diplomaticRelation.Type != 0)
            {
                double num2 = 1.0;
                empire.ResolveTypicalAttitudeLevel(DiplomaticRelationType.War, out var _, out var upperLevel);
                EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(targetEmpire);
                if (empireEvaluation != null)
                {
                    num2 = ((empireEvaluation.OverallAttitude <= upperLevel) ? 1.0 : ((double)(empireEvaluation.OverallAttitude - upperLevel)));
                }
                if (diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement)
                {
                    double num3 = Math.Max(1.0, (double)empire.DominantRace.LoyaltyLevel / 100.0);
                    num2 = num2 * 2.0 * (num3 * num3);
                }
                else if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                {
                    double num4 = Math.Max(1.0, (double)empire.DominantRace.LoyaltyLevel / 100.0);
                    num2 = num2 * 3.5 * (num4 * num4 * num4);
                }
                num2 = Math.Pow(num2, 0.75);
                double num5 = (double)targetEmpire.WeightedMilitaryPotency / (double)empire.WeightedMilitaryPotency;
                if (targetEmpire == PlayerEmpire)
                {
                    num5 /= PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel;
                }
                num5 = Math.Min(Math.Max(num5, 0.5), 10.0);
                num = (long)(num2 * num5 * 10000.0);
            }
            num = (long)((double)num * GetMoneyRate());
            if (num > 1073741823)
            {
                num = 1073741823L;
            }
            return (int)num;
        }

        public int ValueInitiateTradeSanctionsAgainstEmpire(Empire empire, Empire targetEmpire)
        {
            long num = -1L;
            DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(targetEmpire);
            if (diplomaticRelation != null && diplomaticRelation.Type != DiplomaticRelationType.TradeSanctions && diplomaticRelation.Type != DiplomaticRelationType.War && diplomaticRelation.Type != 0)
            {
                double num2 = 1.0;
                empire.ResolveTypicalAttitudeLevel(DiplomaticRelationType.TradeSanctions, out var _, out var upperLevel);
                EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(targetEmpire);
                if (empireEvaluation != null)
                {
                    num2 = ((empireEvaluation.OverallAttitude <= upperLevel) ? 1.0 : ((double)(empireEvaluation.OverallAttitude - upperLevel)));
                }
                if (diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement)
                {
                    double num3 = Math.Max(1.0, (double)empire.DominantRace.LoyaltyLevel / 100.0);
                    num2 = num2 * 2.0 * (num3 * num3);
                }
                else if (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || diplomaticRelation.Type == DiplomaticRelationType.Protectorate)
                {
                    double num4 = Math.Max(1.0, (double)empire.DominantRace.LoyaltyLevel / 100.0);
                    num2 = num2 * 3.5 * (num4 * num4 * num4);
                }
                num2 = Math.Pow(num2, 0.75);
                double num5 = (double)targetEmpire.WeightedMilitaryPotency / (double)empire.WeightedMilitaryPotency;
                if (targetEmpire == PlayerEmpire)
                {
                    num5 /= PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel;
                }
                num5 = Math.Min(Math.Max(num5, 0.5), 10.0);
                num = (long)(num2 * num5 * 4000.0);
            }
            num = (long)((double)num * GetMoneyRate());
            if (num > 1073741823)
            {
                num = 1073741823L;
            }
            return (int)num;
        }

        public int ValueEndWarAgainstUs(Empire attackingEmpire, Empire targetEmpire)
        {
            long num = -1L;
            if (attackingEmpire != targetEmpire)
            {
                DiplomaticRelation diplomaticRelation = attackingEmpire.ObtainDiplomaticRelation(targetEmpire);
                if (diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    num = 10000L;
                    double winningRatio = 1.0;
                    int loserRawDamageBuiltObject = 0;
                    int loserRawDamageColony = 0;
                    int winnerRawDamageBuiltObject = 0;
                    int winnerRawDamageColony = 0;
                    Empire loser = null;
                    Empire empire = attackingEmpire.DetermineVictorInWar(diplomaticRelation, out winningRatio, out loser, out loserRawDamageBuiltObject, out loserRawDamageColony, out winnerRawDamageBuiltObject, out winnerRawDamageColony);
                    if (empire == attackingEmpire)
                    {
                        double num2 = (double)empire.WeightedMilitaryPotency / (double)loser.WeightedMilitaryPotency;
                        if (loser == PlayerEmpire)
                        {
                            num2 *= PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel;
                        }
                        num2 = Math.Min(Math.Max(num2, 0.5), 5.0);
                        num = (long)(num2 * 80000.0 * winningRatio);
                    }
                    else
                    {
                        double val = (double)loser.WeightedMilitaryPotency / (double)empire.WeightedMilitaryPotency;
                        val = Math.Min(Math.Max(val, 0.5), 5.0);
                        num = (long)(val * 40000.0 / winningRatio);
                    }
                }
            }
            if (num > 1073741823)
            {
                num = 1073741823L;
            }
            return (int)num;
        }

        public int ValueEndWarWithEmpire(Empire requestingEmpire, Empire empire, Empire targetEmpire)
        {
            long num = -1L;
            DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(targetEmpire);
            if (diplomaticRelation.OtherEmpire != empire && diplomaticRelation.Type != 0)
            {
                DiplomaticRelation diplomaticRelation2 = requestingEmpire.ObtainDiplomaticRelation(diplomaticRelation.OtherEmpire);
                if (diplomaticRelation2 != null && diplomaticRelation2.Type != 0 && diplomaticRelation.Type == DiplomaticRelationType.War)
                {
                    EmpireEvaluation empireEvaluation = requestingEmpire.ObtainEmpireEvaluation(targetEmpire);
                    int num2 = 30;
                    if (empireEvaluation.OverallAttitude > num2)
                    {
                        int num3 = 0;
                        EmpireEvaluation empireEvaluation2 = empire.ObtainEmpireEvaluation(requestingEmpire);
                        if (empireEvaluation2 != null)
                        {
                            num3 = empireEvaluation2.OverallAttitude;
                        }
                        num3 = 60 - num3;
                        if (num3 < 20)
                        {
                            num3 = 20;
                        }
                        double val = (double)empire.WeightedMilitaryPotency / (double)requestingEmpire.WeightedMilitaryPotency;
                        double num4 = (double)(empireEvaluation.OverallAttitude - num2) / 20.0;
                        val = Math.Min(Math.Max(val, 0.5), 5.0);
                        num = (long)((double)num3 * val * num4 * 2000.0);
                    }
                }
            }
            num = (long)((double)num * GetMoneyRate());
            if (num > 1073741823)
            {
                num = 1073741823L;
            }
            return (int)num;
        }

        public int ValueLiftTradeSanctionsAgainstUs(Empire attackingEmpire, Empire targetEmpire)
        {
            long num = -1L;
            if (attackingEmpire != targetEmpire)
            {
                DiplomaticRelation diplomaticRelation = attackingEmpire.ObtainDiplomaticRelation(targetEmpire);
                if (diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                {
                    num = 5000L;
                    double num2 = (double)attackingEmpire.WeightedMilitaryPotency / (double)targetEmpire.WeightedMilitaryPotency;
                    if (targetEmpire == PlayerEmpire)
                    {
                        num2 *= PlayerEmpire.DifficultyLevel * PlayerEmpire.DifficultyLevel;
                    }
                    num2 = Math.Min(Math.Max(num2, 0.5), 5.0);
                    num = (long)(num2 * 15000.0);
                }
            }
            if (num > 1073741823)
            {
                num = 1073741823L;
            }
            return (int)num;
        }

        public int ValueLiftTradeSanctionsAgainstEmpire(Empire requestingEmpire, Empire empire, Empire targetEmpire)
        {
            long num = -1L;
            DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(targetEmpire);
            if (diplomaticRelation.OtherEmpire != empire && diplomaticRelation.Type != 0)
            {
                DiplomaticRelation diplomaticRelation2 = requestingEmpire.ObtainDiplomaticRelation(diplomaticRelation.OtherEmpire);
                if (diplomaticRelation2 != null && diplomaticRelation2.Type != 0 && diplomaticRelation.Type == DiplomaticRelationType.TradeSanctions)
                {
                    EmpireEvaluation empireEvaluation = requestingEmpire.ObtainEmpireEvaluation(targetEmpire);
                    int num2 = 30;
                    if (empireEvaluation.OverallAttitude > num2)
                    {
                        int num3 = 0;
                        EmpireEvaluation empireEvaluation2 = empire.EmpireEvaluations[requestingEmpire];
                        if (empireEvaluation2 != null)
                        {
                            num3 = empireEvaluation2.OverallAttitude;
                        }
                        num3 = 60 - num3;
                        if (num3 < 20)
                        {
                            num3 = 20;
                        }
                        double val = (double)empire.WeightedMilitaryPotency / (double)requestingEmpire.WeightedMilitaryPotency;
                        double num4 = (double)(empireEvaluation.OverallAttitude - num2) / 20.0;
                        val = Math.Min(Math.Max(val, 0.5), 5.0);
                        num = (long)((double)num3 * val * num4 * 900.0);
                    }
                }
            }
            num = (long)((double)num * GetMoneyRate());
            if (num > 1073741823)
            {
                num = 1073741823L;
            }
            return (int)num;
        }

        public static int DetermineRequiredTroopStrength(Empire empire, object target)
        {
            int num = 0;
            int num2 = 35000;
            int num3 = 0;
            if (target != null && target is Habitat)
            {
                Habitat habitat = (Habitat)target;
                bool isDefending = false;
                num3 = habitat.CalculatePopulationStrength(out isDefending);
                if (empire.IsObjectVisibleToThisEmpire(habitat))
                {
                    if (habitat.Troops != null)
                    {
                        num = habitat.Troops.TotalDefendStrength + num2 + num3;
                        if (habitat.DefensiveFortressBonus > 0)
                        {
                            num = (int)((double)num * (1.0 + (double)(int)habitat.DefensiveFortressBonus / 10.0));
                        }
                    }
                }
                else
                {
                    num = habitat.TroopLevelRequired * 100 + num2 + num3;
                    if (habitat.DefensiveFortressBonus > 0)
                    {
                        num = (int)((double)num * (1.0 + (double)(int)habitat.DefensiveFortressBonus / 10.0));
                    }
                }
            }
            if (empire != null)
            {
                num = (int)((double)num * empire.Policy.InvasionOverkillFactor);
            }
            return num;
        }

        public int DetermineMaximumConstructionSizeForYard(ResearchNodeList researchProjects, ResearchNode researchProject)
        {
            return researchProjects.CheckAncestorsForAbility(researchProject, ResearchAbilityType.ConstructionSize)?.Value ?? 160;
        }

        public void CheckCancelWonderBuilding(PlanetaryFacility completedWonder)
        {
            lock (_WonderLockObject)
            {
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire == null || !empire.Active)
                    {
                        continue;
                    }
                    for (int j = 0; j < empire.Colonies.Count; j++)
                    {
                        Habitat habitat = empire.Colonies[j];
                        if (habitat == null || habitat.HasBeenDestroyed)
                        {
                            continue;
                        }
                        PlanetaryFacilityList planetaryFacilityList = new PlanetaryFacilityList();
                        for (int k = 0; k < habitat.Facilities.Count; k++)
                        {
                            PlanetaryFacility planetaryFacility = habitat.Facilities[k];
                            if (planetaryFacility == null || !(planetaryFacility.ConstructionProgress < 1f) || planetaryFacility.Type != PlanetaryFacilityType.Wonder || planetaryFacility.PlanetaryFacilityDefinitionId != completedWonder.PlanetaryFacilityDefinitionId)
                            {
                                continue;
                            }
                            ResearchNode researchNode = null;
                            double num = 0.0;
                            string text = string.Empty;
                            switch (planetaryFacility.WonderType)
                            {
                                case WonderType.ColonyConstructionSpeed:
                                    text = TextResolver.GetText("Wonder Cancel Substitute Research");
                                    researchNode = empire.Research.SelectRandomNextResearchProjectExcludeSuperWeapons(this, ComponentCategoryType.Construction);
                                    if (researchNode != null)
                                    {
                                        text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Research"), researchNode.Name);
                                        float num5 = (float)(60000.0 + Rnd.NextDouble() * 20000.0);
                                        researchNode.Progress += num5;
                                        if (researchNode.Progress >= researchNode.Cost)
                                        {
                                            empire.DoResearchBreakthrough(researchNode, selfResearched: true);
                                        }
                                    }
                                    break;
                                case WonderType.ColonyDefense:
                                    {
                                        PlanetaryFacility planetaryFacility2 = habitat.Facilities.FindByType(PlanetaryFacilityType.FortifiedBunker);
                                        if (planetaryFacility2 == null)
                                        {
                                            habitat.QueueFacilityConstruction(PlanetaryFacilityType.FortifiedBunker);
                                            PlanetaryFacility planetaryFacility3 = habitat.Facilities.FindByType(PlanetaryFacilityType.FortifiedBunker);
                                            if (planetaryFacility3 != null)
                                            {
                                                planetaryFacility3.ConstructionProgress = 1f;
                                                habitat.ReviewPlanetaryFacilities(habitat.Empire);
                                                habitat.Empire.RefreshColonyFacilityInfo();
                                                text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Facility"), planetaryFacility3.Name);
                                            }
                                        }
                                        else
                                        {
                                            num = 25000.0;
                                            empire.StateMoney += num;
                                            text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Money"), num.ToString("###,###,###,##0"));
                                        }
                                        break;
                                    }
                                case WonderType.ColonyHappiness:
                                    num = 25000.0;
                                    empire.StateMoney += num;
                                    text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Money"), num.ToString("###,###,###,##0"));
                                    break;
                                case WonderType.ColonyIncome:
                                    num = 25000.0;
                                    empire.StateMoney += num;
                                    text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Money"), num.ToString("###,###,###,##0"));
                                    break;
                                case WonderType.ColonyPopulationGrowth:
                                    num = 25000.0;
                                    empire.StateMoney += num;
                                    text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Money"), num.ToString("###,###,###,##0"));
                                    break;
                                case WonderType.EmpireHappiness:
                                    num = 50000.0;
                                    empire.StateMoney += num;
                                    text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Money"), num.ToString("###,###,###,##0"));
                                    break;
                                case WonderType.EmpireIncome:
                                    num = 50000.0;
                                    empire.StateMoney += num;
                                    text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Money"), num.ToString("###,###,###,##0"));
                                    break;
                                case WonderType.EmpirePopulationGrowth:
                                    num = 50000.0;
                                    empire.StateMoney += num;
                                    text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Money"), num.ToString("###,###,###,##0"));
                                    break;
                                case WonderType.EmpireResearchEnergy:
                                    researchNode = empire.Research.SelectRandomNextResearchProjectExcludeSuperWeapons(this, IndustryType.Energy);
                                    if (researchNode != null)
                                    {
                                        text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Research"), researchNode.Name);
                                        float num4 = (float)(100000.0 + Rnd.NextDouble() * 40000.0);
                                        researchNode.Progress += num4;
                                        if (researchNode.Progress >= researchNode.Cost)
                                        {
                                            empire.DoResearchBreakthrough(researchNode, selfResearched: true);
                                        }
                                    }
                                    break;
                                case WonderType.EmpireResearchHighTech:
                                    researchNode = empire.Research.SelectRandomNextResearchProjectExcludeSuperWeapons(this, IndustryType.HighTech);
                                    if (researchNode != null)
                                    {
                                        text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Research"), researchNode.Name);
                                        float num3 = (float)(100000.0 + Rnd.NextDouble() * 40000.0);
                                        researchNode.Progress += num3;
                                        if (researchNode.Progress >= researchNode.Cost)
                                        {
                                            empire.DoResearchBreakthrough(researchNode, selfResearched: true);
                                        }
                                    }
                                    break;
                                case WonderType.EmpireResearchWeapons:
                                    researchNode = empire.Research.SelectRandomNextResearchProjectExcludeSuperWeapons(this, IndustryType.Weapon);
                                    if (researchNode != null)
                                    {
                                        text = string.Format(TextResolver.GetText("Wonder Cancel Substitute Research"), researchNode.Name);
                                        float num2 = (float)(100000.0 + Rnd.NextDouble() * 40000.0);
                                        researchNode.Progress += num2;
                                        if (researchNode.Progress >= researchNode.Cost)
                                        {
                                            empire.DoResearchBreakthrough(researchNode, selfResearched: true);
                                        }
                                    }
                                    break;
                            }
                            PlanetaryFacilityDefinition byId = PlanetaryFacilityDefinitionsStatic.GetById(planetaryFacility.PlanetaryFacilityDefinitionId);
                            string text2 = string.Format(TextResolver.GetText("Construction of the WONDER at COLONY has been cancelled"), planetaryFacility.Name, habitat.Name);
                            if (!string.IsNullOrEmpty(text))
                            {
                                text2 = text2 + ". " + text;
                            }
                            empire.SendMessageToEmpire(empire, EmpireMessageType.ColonyFacilityCancelled, byId, text2, new Point((int)habitat.Xpos, (int)habitat.Ypos), string.Empty);
                            planetaryFacilityList.Add(planetaryFacility);
                        }
                        for (int l = 0; l < planetaryFacilityList.Count; l++)
                        {
                            habitat.Facilities.Remove(planetaryFacilityList[l]);
                            habitat.CheckRemoveFacilityTracking(planetaryFacilityList[l]);
                        }
                    }
                }
            }
        }

        public bool CheckWonderBuilt(PlanetaryFacilityDefinition wonder)
        {
            if (wonder != null)
            {
                lock (_WonderLockObject)
                {
                    return _WondersBuilt[wonder.PlanetaryFacilityDefinitionId];
                }
            }
            return false;
        }

        public void ReviewWondersBuilt()
        {
            lock (_WonderLockObject)
            {
                _WondersBuilt = new bool[PlanetaryFacilityDefinitionsStatic.Count];
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire == null || !empire.Active)
                    {
                        continue;
                    }
                    for (int j = 0; j < empire.Colonies.Count; j++)
                    {
                        Habitat habitat = empire.Colonies[j];
                        if (habitat == null || habitat.HasBeenDestroyed)
                        {
                            continue;
                        }
                        for (int k = 0; k < habitat.Facilities.Count; k++)
                        {
                            PlanetaryFacility planetaryFacility = habitat.Facilities[k];
                            if (planetaryFacility != null && planetaryFacility.ConstructionProgress >= 1f && planetaryFacility.Type == PlanetaryFacilityType.Wonder)
                            {
                                _WondersBuilt[planetaryFacility.PlanetaryFacilityDefinitionId] = true;
                            }
                        }
                    }
                }
                for (int l = 0; l < PirateEmpires.Count; l++)
                {
                    Empire empire2 = PirateEmpires[l];
                    if (empire2 == null || !empire2.Active)
                    {
                        continue;
                    }
                    for (int m = 0; m < empire2.Colonies.Count; m++)
                    {
                        Habitat habitat2 = empire2.Colonies[m];
                        if (habitat2 == null || habitat2.HasBeenDestroyed || habitat2.Owner != empire2)
                        {
                            continue;
                        }
                        for (int n = 0; n < habitat2.Facilities.Count; n++)
                        {
                            PlanetaryFacility planetaryFacility2 = habitat2.Facilities[n];
                            if (planetaryFacility2 != null && planetaryFacility2.ConstructionProgress >= 1f && planetaryFacility2.Type == PlanetaryFacilityType.Wonder)
                            {
                                _WondersBuilt[planetaryFacility2.PlanetaryFacilityDefinitionId] = true;
                            }
                        }
                    }
                }
            }
        }

        public void ResolveFighterDescription(Empire empire, FighterSpecification fighter, ResearchNode project, out string[] descriptions, out string[] values)
        {
            descriptions = new string[9];
            values = new string[9];
            descriptions[0] = fighter.Name;
            descriptions[1] = TextResolver.GetText("Top Speed");
            descriptions[2] = TextResolver.GetText("Turn Rate");
            descriptions[3] = TextResolver.GetText("Shields");
            descriptions[4] = TextResolver.GetText("Targetting");
            descriptions[5] = TextResolver.GetText("Countermeasures");
            values[1] = fighter.TopSpeed.ToString();
            string text = ((double)fighter.TurnRate * (180.0 / Math.PI)).ToString("##0") + "°/" + TextResolver.GetText("second abbreviation");
            values[2] = text;
            values[3] = fighter.ShieldsCapacity.ToString();
            values[4] = fighter.TargettingModifier + "%";
            values[5] = fighter.CountermeasureModifier + "%";
            if (fighter.Type == FighterType.Bomber)
            {
                descriptions[6] = TextResolver.GetText("Bombing Damage");
                descriptions[7] = TextResolver.GetText("Bombing Range");
                descriptions[8] = TextResolver.GetText("Bombing Fire Rate");
                values[6] = fighter.WeaponDamage.ToString();
                values[7] = fighter.WeaponRange.ToString();
                values[8] = ((double)fighter.WeaponFireRate / 1000.0).ToString("0.00") + " " + TextResolver.GetText("seconds abbreviation");
            }
            else if (fighter.Type == FighterType.Interceptor)
            {
                descriptions[6] = TextResolver.GetText("Weapons Damage");
                descriptions[7] = TextResolver.GetText("Weapons Range");
                descriptions[8] = TextResolver.GetText("Weapons Fire Rate");
                values[6] = fighter.WeaponDamage.ToString();
                values[7] = fighter.WeaponRange.ToString();
                values[8] = ((double)fighter.WeaponFireRate / 1000.0).ToString("0.00") + " " + TextResolver.GetText("seconds abbreviation");
            }
        }

        public string ResolveWonderDescriptionShort(PlanetaryFacilityDefinition planetaryFacility)
        {
            string result = string.Empty;
            if (planetaryFacility != null)
            {
                string empty = string.Empty;
                switch (planetaryFacility.WonderType)
                {
                    case WonderType.ColonyConstructionSpeed:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Construction Speed");
                        result = string.Format(TextResolver.GetText("Wonder Description Colony"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.ColonyDefense:
                        empty = "+" + planetaryFacility.Value2 * 10 + "% " + TextResolver.GetText("Colony Defense");
                        result = string.Format(TextResolver.GetText("Wonder Description Colony"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.ColonyHappiness:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Colony Happiness");
                        result = string.Format(TextResolver.GetText("Wonder Description Colony"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.ColonyIncome:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Colony Income");
                        result = string.Format(TextResolver.GetText("Wonder Description Colony"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.ColonyPopulationGrowth:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Population Growth");
                        result = string.Format(TextResolver.GetText("Wonder Description Colony"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.EmpireHappiness:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Empire Happiness");
                        result = string.Format(TextResolver.GetText("Wonder Description Empire"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.EmpireIncome:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Empire Income");
                        result = string.Format(TextResolver.GetText("Wonder Description Empire"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.EmpirePopulationGrowth:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Population Growth");
                        result = string.Format(TextResolver.GetText("Wonder Description Empire"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.EmpireResearchEnergy:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Energy Research");
                        result = string.Format(TextResolver.GetText("Wonder Description Empire"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.EmpireResearchHighTech:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("HighTech Research");
                        result = string.Format(TextResolver.GetText("Wonder Description Empire"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.EmpireResearchWeapons:
                        empty = "+" + planetaryFacility.Value2 + "% " + TextResolver.GetText("Weapons Research");
                        result = string.Format(TextResolver.GetText("Wonder Description Empire"), planetaryFacility.Name, empty);
                        break;
                    case WonderType.RaceAchievement:
                        empty = "+" + planetaryFacility.Value1 + "% " + TextResolver.GetText("Colony Development Bonus");
                        result = string.Format(TextResolver.GetText("Wonder Description Colony"), planetaryFacility.Name, empty);
                        break;
                }
            }
            return result;
        }

        public string ResolveWonderDescription(PlanetaryFacilityDefinition planetaryFacility)
        {
            string text = string.Empty;
            if (planetaryFacility != null && planetaryFacility.Type == PlanetaryFacilityType.Wonder)
            {
                ResolvePlanetaryFacilityLines(planetaryFacility, out var descriptions, out var values, includeExtraWonderNotes: false);
                for (int i = 1; i < descriptions.Length; i++)
                {
                    if (!string.IsNullOrEmpty(descriptions[i]))
                    {
                        text += descriptions[i];
                        if (!string.IsNullOrEmpty(values[i]))
                        {
                            text = text + ": " + values[i];
                        }
                        text += "\n";
                    }
                }
            }
            if (!string.IsNullOrEmpty(text) && text.Length >= 1)
            {
                text = text.Substring(0, text.Length - 1);
            }
            return text;
        }

        public string ResolvePirateFacilityDescription(PlanetaryFacilityDefinition planetaryFacility)
        {
            string text = string.Empty;
            if (planetaryFacility != null && (planetaryFacility.Type == PlanetaryFacilityType.PirateBase || planetaryFacility.Type == PlanetaryFacilityType.PirateFortress || planetaryFacility.Type == PlanetaryFacilityType.PirateCriminalNetwork))
            {
                switch (planetaryFacility.Type)
                {
                    case PlanetaryFacilityType.PirateBase:
                        text = planetaryFacility.Description + "\n\n";
                        text += "\n\n";
                        break;
                    case PlanetaryFacilityType.PirateFortress:
                        text = planetaryFacility.Description + "\n\n";
                        text += "\n\n";
                        break;
                    case PlanetaryFacilityType.PirateCriminalNetwork:
                        text = planetaryFacility.Description + "\n\n";
                        text += "\n\n";
                        break;
                }
                ResolvePlanetaryFacilityLines(planetaryFacility, out var descriptions, out var values, includeExtraWonderNotes: false);
                for (int i = 1; i < descriptions.Length; i++)
                {
                    if (!string.IsNullOrEmpty(descriptions[i]))
                    {
                        text += descriptions[i];
                        if (!string.IsNullOrEmpty(values[i]))
                        {
                            text = text + ": " + values[i];
                        }
                        text += "\n";
                    }
                }
            }
            if (!string.IsNullOrEmpty(text) && text.Length >= 1)
            {
                text = text.Substring(0, text.Length - 1);
            }
            return text;
        }

        public void ResolvePlanetaryFacilityLines(PlanetaryFacilityDefinition planetaryFacility, out string[] descriptions, out string[] values)
        {
            ResolvePlanetaryFacilityLines(planetaryFacility, out descriptions, out values, includeExtraWonderNotes: true);
        }

        public void ResolvePlanetaryFacilityLines(PlanetaryFacilityDefinition planetaryFacility, out string[] descriptions, out string[] values, bool includeExtraWonderNotes)
        {
            descriptions = new string[6];
            values = new string[6];
            descriptions[0] = planetaryFacility.Name;
            switch (planetaryFacility.Type)
            {
                case PlanetaryFacilityType.Wonder:
                    {
                        string text = "\n" + TextResolver.GetText("Note that each wonder may only be built once in the galaxy");
                        string empty = string.Empty;
                        if (planetaryFacility.Value3 > 0)
                        {
                            HabitatType type = ResolveColonyHabitatTypeByIndexDesertBeforeOcean(planetaryFacility.Value3 - 1);
                            empty = ". " + string.Format(TextResolver.GetText("Wonder Build Location Requirement"), ResolveDescription(type).ToUpper(CultureInfo.InvariantCulture));
                            text += empty;
                        }
                        if (!includeExtraWonderNotes)
                        {
                            text = string.Empty;
                            empty = string.Empty;
                        }
                        switch (planetaryFacility.WonderType)
                        {
                            case WonderType.ColonyConstructionSpeed:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Construction Speed");
                                values[3] = string.Format(TextResolver.GetText("X% faster"), "+" + planetaryFacility.Value2);
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.ColonyDefense:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Colony Defense");
                                values[3] = "+" + planetaryFacility.Value2 * 10 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.ColonyHappiness:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Colony Happiness");
                                values[3] = "+" + planetaryFacility.Value2 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.ColonyIncome:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Colony Income");
                                values[3] = "+" + planetaryFacility.Value2 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.ColonyPopulationGrowth:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Colony Population");
                                values[3] = string.Format(TextResolver.GetText("X% faster growth"), "+" + planetaryFacility.Value2);
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.EmpireHappiness:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Empire Happiness");
                                values[3] = "+" + planetaryFacility.Value2 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.EmpireIncome:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Empire Income");
                                values[3] = "+" + planetaryFacility.Value2 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.EmpirePopulationGrowth:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Empire Population");
                                values[3] = string.Format(TextResolver.GetText("X% faster growth"), "+" + planetaryFacility.Value2);
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.EmpireResearchEnergy:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Energy Research");
                                values[3] = "+" + planetaryFacility.Value2 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.EmpireResearchHighTech:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("HighTech Research");
                                values[3] = "+" + planetaryFacility.Value2 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.EmpireResearchWeapons:
                                descriptions[1] = TextResolver.GetText("Wonder Description Empire Research Weapons") + text;
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Weapons Research");
                                values[3] = "+" + planetaryFacility.Value2 + "%";
                                descriptions[4] = TextResolver.GetText("Facility Maintenance Cost");
                                values[4] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                            case WonderType.RaceAchievement:
                                descriptions[1] = planetaryFacility.Description + text;
                                descriptions[2] = TextResolver.GetText("Colony Development Bonus");
                                values[2] = "+" + planetaryFacility.Value1 + "%";
                                descriptions[3] = TextResolver.GetText("Facility Maintenance Cost");
                                values[3] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                                break;
                        }
                        break;
                    }
                case PlanetaryFacilityType.TerraformingFacility:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.TroopTrainingCenter:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.RoboticTroopFoundry:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.CloningFacility:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.FortifiedBunker:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Defensive bonus");
                    values[2] = planetaryFacility.Value1 * 10 + "%";
                    break;
                case PlanetaryFacilityType.ArmoredFactory:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.SpyAcademy:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.ScienceAcademy:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.NavalAcademy:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.MilitaryAcademy:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.IonCannon:
                    {
                        descriptions[1] = planetaryFacility.Description;
                        descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                        values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                        ComponentDefinition componentDefinition = ComponentDefinitionsStatic[planetaryFacility.Value1];
                        descriptions[3] = TextResolver.GetText("Power");
                        values[3] = componentDefinition.Value1.ToString();
                        descriptions[4] = TextResolver.GetText("Range");
                        values[4] = componentDefinition.Value2.ToString();
                        descriptions[5] = TextResolver.GetText("Rate of fire");
                        values[5] = ((double)componentDefinition.Value6 / 1000.0).ToString("0.0") + " " + TextResolver.GetText("seconds abbreviation");
                        break;
                    }
                case PlanetaryFacilityType.PlanetaryShield:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.RegionalCapital:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Facility Maintenance Cost");
                    values[2] = planetaryFacility.Maintenance.ToString("#,###,##0") + " " + TextResolver.GetText("credits");
                    break;
                case PlanetaryFacilityType.PirateBase:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Empire Research Bonus");
                    values[2] = "+" + planetaryFacility.Value1.ToString("0") + "%";
                    descriptions[3] = TextResolver.GetText("Colony Income Bonus");
                    values[3] = "+" + planetaryFacility.Value2.ToString("0") + "%";
                    descriptions[4] = TextResolver.GetText("Colony Corruption");
                    values[4] = "+" + planetaryFacility.Value3.ToString("0") + "%";
                    break;
                case PlanetaryFacilityType.PirateFortress:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Empire Research Bonus");
                    values[2] = "+" + planetaryFacility.Value1.ToString("0") + "%";
                    descriptions[3] = TextResolver.GetText("Colony Income Bonus");
                    values[3] = "+" + planetaryFacility.Value2.ToString("0") + "%";
                    descriptions[4] = TextResolver.GetText("Colony Corruption");
                    values[4] = "+" + planetaryFacility.Value3.ToString("0") + "%";
                    break;
                case PlanetaryFacilityType.PirateCriminalNetwork:
                    descriptions[1] = planetaryFacility.Description;
                    descriptions[2] = TextResolver.GetText("Empire Research Bonus");
                    values[2] = "+" + planetaryFacility.Value1.ToString("0") + "%";
                    descriptions[3] = TextResolver.GetText("Colony Corruption");
                    values[3] = "+" + planetaryFacility.Value3.ToString("0") + "%";
                    break;
            }
        }

        public void ResolveResearchAbilityLines(ResearchAbility ability, out string[] descriptions, out string[] values)
        {
            descriptions = new string[4];
            values = new string[4];
            switch (ability.Type)
            {
                case ResearchAbilityType.Troop:
                    {
                        TroopType troopType = TroopType.Undefined;
                        if (ability.RelatedObject != null && ability.RelatedObject is TroopType)
                        {
                            troopType = (TroopType)ability.RelatedObject;
                        }
                        if (troopType != 0)
                        {
                            descriptions[0] = ability.Name;
                            values[0] = string.Empty;
                            if (ability.Value > 0)
                            {
                                descriptions[1] = string.Format(TextResolver.GetText("Increases the Attack Strength of newly recruited TROOPTYPE"), ResolveDescription(troopType));
                                descriptions[2] = TextResolver.GetText("Bonus");
                                values[2] = Math.Abs(ability.Value).ToString("+0") + "%";
                                break;
                            }
                            if (ability.Value < 0)
                            {
                                if (troopType == TroopType.Artillery)
                                {
                                    descriptions[1] = string.Format(TextResolver.GetText("Increases the interception accuracy of all TROOPTYPE against invaders"), ResolveDescription(troopType));
                                    descriptions[2] = TextResolver.GetText("Bonus");
                                    values[2] = Math.Abs(ability.Value).ToString("+0") + "%";
                                }
                                else
                                {
                                    descriptions[1] = string.Format(TextResolver.GetText("Increases the Defend Strength of newly recruited TROOPTYPE"), ResolveDescription(troopType));
                                    descriptions[2] = TextResolver.GetText("Bonus");
                                    values[2] = Math.Abs(ability.Value).ToString("+0") + "%";
                                }
                                break;
                            }
                            descriptions[1] = string.Format(TextResolver.GetText("Enable recruiting TROOPTYPE"), ResolveDescription(troopType));
                            string text = string.Empty;
                            switch (troopType)
                            {
                                case TroopType.Infantry:
                                    text = TextResolver.GetText("Troop Type Description Infantry");
                                    break;
                                case TroopType.Armored:
                                    text = TextResolver.GetText("Troop Type Description Armored");
                                    break;
                                case TroopType.Artillery:
                                    text = TextResolver.GetText("Troop Type Description Artillery");
                                    break;
                                case TroopType.SpecialForces:
                                    text = TextResolver.GetText("Troop Type Description SpecialForces");
                                    break;
                            }
                            string[] array;
                            (array = descriptions)[1] = array[1] + "\n" + text;
                        }
                        else
                        {
                            descriptions[0] = ability.Name;
                            values[0] = string.Empty;
                            descriptions[1] = TextResolver.GetText("Lowers maintenance costs of all troops");
                            descriptions[2] = TextResolver.GetText("Bonus");
                            values[2] = Math.Abs(ability.Value).ToString("-0") + "%";
                        }
                        break;
                    }
                case ResearchAbilityType.Boarding:
                    descriptions[0] = ability.Name;
                    values[0] = string.Empty;
                    if (ability.Value > 0)
                    {
                        descriptions[1] = TextResolver.GetText("Improved Boarding attack strength");
                        descriptions[2] = TextResolver.GetText("Bonus");
                        values[2] = Math.Abs(ability.Value).ToString("+0") + "%";
                    }
                    else if (ability.Value < 0)
                    {
                        descriptions[1] = TextResolver.GetText("Improved Boarding defense strength");
                        descriptions[2] = TextResolver.GetText("Bonus");
                        values[2] = Math.Abs(ability.Value).ToString("+0") + "%";
                    }
                    break;
                case ResearchAbilityType.EnableShipSubRole:
                    {
                        BuiltObjectSubRole builtObjectSubRole = BuiltObjectSubRole.Undefined;
                        if (ability.RelatedObject != null && ability.RelatedObject is BuiltObjectSubRole)
                        {
                            builtObjectSubRole = (BuiltObjectSubRole)ability.RelatedObject;
                        }
                        if (builtObjectSubRole != 0)
                        {
                            descriptions[0] = ability.Name;
                            values[0] = string.Empty;
                            descriptions[1] = string.Format(TextResolver.GetText("Enable building of SHIPTYPE"), ResolveDescription(builtObjectSubRole)) + "  (" + TextResolver.GetText("When construction size allows").ToLower(CultureInfo.InvariantCulture) + ")";
                            values[1] = string.Empty;
                            if (builtObjectSubRole == BuiltObjectSubRole.Carrier)
                            {
                                descriptions[2] = TextResolver.GetText("Note that Carriers can be built 50% larger than current maximum ship construction size");
                                values[2] = string.Empty;
                            }
                        }
                        break;
                    }
                case ResearchAbilityType.ColonizeHabitatType:
                    descriptions[0] = ability.Name;
                    values[0] = "";
                    break;
                case ResearchAbilityType.ConstructionSize:
                    descriptions[0] = ability.Name;
                    values[0] = string.Empty;
                    descriptions[1] = TextResolver.GetText("Maximum ship size");
                    values[1] = ability.Value.ToString();
                    descriptions[2] = TextResolver.GetText("Maximum base size");
                    values[2] = (ability.Value * 3).ToString();
                    descriptions[3] = "(" + TextResolver.GetText("Bases built at colonies have unlimited size") + ")";
                    break;
                case ResearchAbilityType.PopulationGrowthRate:
                    descriptions[0] = ability.Name;
                    values[0] = "";
                    break;
            }
        }

        public void ResolveComponentDescriptionLines(Empire empire, Component component, ComponentImprovement improvement, ResearchNode project, out string[] descriptions, out string[] values)
        {
            descriptions = new string[10];
            values = new string[10];
            if (improvement != null && improvement.TechLevel != component.TechLevel)
            {
                descriptions[0] = string.Format(TextResolver.GetText("Improvements to COMPONENT"), component.Name);
            }
            else
            {
                descriptions[0] = component.Name;
            }
            descriptions[1] = TextResolver.GetText("Size") + ": " + component.Size + ",   " + TextResolver.GetText("Static Energy Used") + ": " + component.EnergyUsed;
            string[] descriptions2 = new string[8];
            string[] values2 = new string[8];
            ResolveComponentDescriptionDetailed(empire, component, improvement, project, out descriptions2, out values2);
            for (int i = 0; i < descriptions2.Length; i++)
            {
                descriptions[i + 2] = descriptions2[i];
                values[i + 2] = values2[i];
            }
        }

        public void ResolveComponentDescriptionDetailed(Empire empire, Component component, ComponentImprovement improvement, ResearchNode project, out string[] descriptions, out string[] values)
        {
            BaconGalaxy.ResolveComponentDescriptionDetailed(this, empire, component, improvement, project, out descriptions, out values);
        }

        public void ResolveComponentDescriptionComplete(Empire empire, Component component, ComponentImprovement improvement, out string title, out string type, out string sizeCost, out string staticEnergy, out string[] descriptions, out string[] values)
        {
            ResearchNode researchNode = null;
            if (empire != null)
            {
                if (improvement == null)
                {
                    improvement = empire.Research.ResolveImprovedComponentValues(component);
                    researchNode = ((improvement.TechLevel != component.TechLevel) ? empire.Research.FindProjectForComponentImprovement(improvement) : empire.Research.FindProjectForComponent(component));
                }
                else
                {
                    researchNode = empire.Research.FindProjectForComponentImprovement(improvement);
                }
            }
            title = component.Name;
            type = ResolveDescription(component.Type) + " (" + component.Industry.ToString() + ")";
            if (component.Category == ComponentCategoryType.WeaponTorpedo && component.Value7 > 0)
            {
                type = TextResolver.GetText("Bombarding Torpedo Weapon") + " (" + component.Industry.ToString() + ")";
            }
            sizeCost = TextResolver.GetText("Size") + ":" + component.Size;
            if (researchNode != null)
            {
                string text = sizeCost;
                sizeCost = text + ", " + TextResolver.GetText("Cost") + ":" + researchNode.Cost.ToString("0,K");
            }
            staticEnergy = component.EnergyUsed.ToString();
            descriptions = new string[8];
            values = new string[8];
            ResolveComponentDescriptionDetailed(empire, component, improvement, researchNode, out descriptions, out values);
        }

        public void GenerateBenefitDetail(ResearchNode project, Empire empire, out List<string[]> allDescriptions, out List<string[]> allValues)
        {
            allDescriptions = new List<string[]>();
            allValues = new List<string[]>();
            if (project == null)
            {
                return;
            }
            if (project.Components != null && project.Components.Count > 0)
            {
                for (int i = 0; i < project.Components.Count; i++)
                {
                    string[] descriptions = new string[8];
                    string[] values = new string[8];
                    ResolveComponentDescriptionLines(empire, project.Components[i], null, project, out descriptions, out values);
                    allDescriptions.Add(descriptions);
                    allValues.Add(values);
                }
            }
            if (project.ComponentImprovements != null && project.ComponentImprovements.Count > 0)
            {
                for (int j = 0; j < project.ComponentImprovements.Count; j++)
                {
                    string[] descriptions2 = new string[8];
                    string[] values2 = new string[8];
                    ResolveComponentDescriptionLines(empire, project.ComponentImprovements[j].ImprovedComponent, project.ComponentImprovements[j], project, out descriptions2, out values2);
                    allDescriptions.Add(descriptions2);
                    allValues.Add(values2);
                }
            }
            if (project.Fighters != null && project.Fighters.Count > 0)
            {
                for (int k = 0; k < project.Fighters.Count; k++)
                {
                    string[] descriptions3 = new string[7];
                    string[] values3 = new string[7];
                    ResolveFighterDescription(empire, project.Fighters[k], project, out descriptions3, out values3);
                    allDescriptions.Add(descriptions3);
                    allValues.Add(values3);
                }
            }
            if (project.Abilities != null && project.Abilities.Count > 0)
            {
                for (int l = 0; l < project.Abilities.Count; l++)
                {
                    string[] descriptions4 = new string[7];
                    string[] values4 = new string[7];
                    ResolveResearchAbilityLines(project.Abilities[l], out descriptions4, out values4);
                    allDescriptions.Add(descriptions4);
                    allValues.Add(values4);
                }
            }
            if (project.PlanetaryFacility != null)
            {
                string[] descriptions5 = new string[7];
                string[] values5 = new string[7];
                ResolvePlanetaryFacilityLines(project.PlanetaryFacility, out descriptions5, out values5);
                double num = CalculatePlanetaryFacilityCost(project.PlanetaryFacility, empire);
                if (project.PlanetaryFacility.Type == PlanetaryFacilityType.Wonder)
                {
                    descriptions5[0] = TextResolver.GetText("Wonder") + ": " + descriptions5[0] + "  (" + string.Format(TextResolver.GetText("X credits"), num.ToString("#,###,##0")) + ")";
                    if (CheckWonderBuilt(project.PlanetaryFacility))
                    {
                        descriptions5[0] = TextResolver.GetText("Wonder Already Built").ToUpper(CultureInfo.InvariantCulture) + "\n" + descriptions5[0];
                    }
                }
                else
                {
                    descriptions5[0] = TextResolver.GetText("Planetary Facility") + ": " + descriptions5[0] + "  (" + string.Format(TextResolver.GetText("X credits"), num.ToString("#,###,##0")) + ")";
                }
                allDescriptions.Add(descriptions5);
                allValues.Add(values5);
            }
            if (project.PlagueChange == null)
            {
                return;
            }
            Plague plague = Plagues[project.PlagueChange.PlagueId];
            string[] array = new string[8];
            string[] array2 = new string[8];
            array[0] = plague.Name;
            array[1] = project.PlagueChange.Description;
            array[2] = TextResolver.GetText("Mortality Rate");
            array2[2] = project.PlagueChange.MortalityRate.ToString("0.000");
            array[3] = TextResolver.GetText("Infection");
            array2[3] = project.PlagueChange.InfectionChance.ToString("0");
            array[4] = TextResolver.GetText("Duration");
            array2[4] = string.Format(arg0: (project.PlagueChange.Duration / (float)RealSecondsInGalacticYear * 12f).ToString("0.0"), format: TextResolver.GetText("X months"));
            if (!string.IsNullOrEmpty(plague.ExceptionRaceName))
            {
                Race race = Races[plague.ExceptionRaceName];
                if (race != null)
                {
                    array[5] = plague.ExceptionRaceName + " " + TextResolver.GetText("Mortality Rate");
                    array2[5] = project.PlagueChange.ExceptionMortalityRate.ToString("0.000");
                    array[6] = plague.ExceptionRaceName + " " + TextResolver.GetText("Infection");
                    array2[6] = project.PlagueChange.ExceptionInfectionChance.ToString("0");
                    array[7] = plague.ExceptionRaceName + " " + TextResolver.GetText("Duration");
                    array2[7] = string.Format(arg0: (project.PlagueChange.ExceptionDuration / (float)RealSecondsInGalacticYear * 12f).ToString("0.0"), format: TextResolver.GetText("X months"));
                }
            }
            allDescriptions.Add(array);
            allValues.Add(array2);
        }

        private int SelectClusterIndex(double selection)
        {
            double num = 0.0;
            for (int i = 0; i < _StarClusterPortions.Count; i++)
            {
                if (selection >= num && selection < num + _StarClusterPortions[i])
                {
                    return i;
                }
                num += _StarClusterPortions[i];
            }
            return -1;
        }

        private Habitat SetupSun(GalaxyShape galaxyShape)
        {
            int num = 0;
            double num2 = 0.0;
            double num3 = 0.0;
            double val = 300000.0 + 175000000.0 / Math.Sqrt(StarCount);
            double num4 = 4000000.0;
            num4 = ((StarCount >= 1400) ? 5000000.0 : ((StarCount >= 1000) ? 4250000.0 : ((StarCount >= 700) ? 3600000.0 : ((StarCount < 400) ? 2000000.0 : 2700000.0))));
            val = Math.Min(val, num4);
            int num5 = 0;
            double num6 = 0.0;
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            do
            {
                switch (galaxyShape)
                {
                    case GalaxyShape.ClustersEven:
                    case GalaxyShape.ClustersVaried:
                        {
                            if (Rnd.Next(0, 10) == 1)
                            {
                                num2 = (double)SizeX * 0.02 + Rnd.NextDouble() * ((double)SizeX * 0.96);
                                num3 = (double)SizeY * 0.02 + Rnd.NextDouble() * ((double)SizeY * 0.96);
                                break;
                            }
                            int num9 = SelectClusterIndex(Rnd.NextDouble());
                            if (num9 >= 0)
                            {
                                _ = 1.0 / (double)_StarClusterPortions.Count;
                                double num10 = Math.Sqrt(_StarClusterPortions[num9]) * val * 3.0;
                                double num11 = Rnd.NextDouble() * (num10 / 2.0);
                                double num12 = Rnd.NextDouble() * Math.PI * 2.0;
                                double num13 = Math.Sin(num12) * num11;
                                double num14 = Math.Cos(num12) * num11;
                                num2 = (double)_StarClusterLocations[num9].X + num13;
                                num3 = (double)_StarClusterLocations[num9].Y + num14;
                            }
                            else
                            {
                                num2 = (double)SizeX * 0.02 + Rnd.NextDouble() * ((double)SizeX * 0.96);
                                num3 = (double)SizeY * 0.02 + Rnd.NextDouble() * ((double)SizeY * 0.96);
                            }
                            break;
                        }
                    case GalaxyShape.Ring:
                        {
                            int num16 = Rnd.Next(0, 20);
                            if (num16 >= 3)
                            {
                                double num11 = (double)(SizeX / 2) - (double)(SizeX / 2) * Rnd.NextDouble() * 0.15;
                                double num12 = Rnd.NextDouble() * Math.PI * 2.0;
                                double num13 = Math.Sin(num12) * num11;
                                double num14 = Math.Cos(num12) * num11;
                                num2 = (double)(SizeY / 2) + num13;
                                num3 = (double)(SizeX / 2) + num14;
                                break;
                            }
                            double num7 = (double)Rnd.Next(2, 10) / 10.0 * ((double)Rnd.Next(2, 10) / 10.0) * Rnd.NextDouble() * (double)SizeX / 2.0;
                            double num8 = (double)Rnd.Next(2, 10) / 10.0 * ((double)Rnd.Next(2, 10) / 10.0) * Rnd.NextDouble() * (double)SizeY / 2.0;
                            switch (Rnd.Next(1, 3))
                            {
                                case 1:
                                    num2 = (double)(SizeX / 2) + num7;
                                    break;
                                case 2:
                                    num2 = (double)(SizeX / 2) - num7;
                                    break;
                            }
                            switch (Rnd.Next(1, 3))
                            {
                                case 1:
                                    num3 = (double)(SizeY / 2) + num8;
                                    break;
                                case 2:
                                    num3 = (double)(SizeY / 2) - num8;
                                    break;
                            }
                            break;
                        }
                    case GalaxyShape.Elliptical:
                        {
                            int num15 = Rnd.Next(0, 16);
                            if (num15 >= 10)
                            {
                                double num7 = (double)Rnd.Next(2, 10) / 10.0 * ((double)Rnd.Next(2, 10) / 10.0) * Rnd.NextDouble() * (double)SizeX / 2.0;
                                double num8 = (double)Rnd.Next(2, 10) / 10.0 * ((double)Rnd.Next(2, 10) / 10.0) * Rnd.NextDouble() * (double)SizeY / 2.0;
                                switch (Rnd.Next(1, 3))
                                {
                                    case 1:
                                        num2 = (double)(SizeX / 2) + num7;
                                        break;
                                    case 2:
                                        num2 = (double)(SizeX / 2) - num7;
                                        break;
                                }
                                switch (Rnd.Next(1, 3))
                                {
                                    case 1:
                                        num3 = (double)(SizeY / 2) + num8;
                                        break;
                                    case 2:
                                        num3 = (double)(SizeY / 2) - num8;
                                        break;
                                }
                            }
                            else if (num15 >= 5)
                            {
                                double num11 = (double)(SizeX / 2) - (double)(SizeX / 2) * Rnd.NextDouble() * 0.1;
                                double num12 = Rnd.NextDouble() * Math.PI * 2.0;
                                double num13 = Math.Sin(num12) * num11;
                                double num14 = Math.Cos(num12) * num11;
                                num2 = (double)(SizeY / 2) + num13;
                                num3 = (double)(SizeX / 2) + num14;
                            }
                            else
                            {
                                double num11 = (double)(SizeX / 2) * (0.25 + Rnd.NextDouble() * 0.6);
                                double num12 = Rnd.NextDouble() * Math.PI * 2.0;
                                double num13 = Math.Sin(num12) * num11;
                                double num14 = Math.Cos(num12) * num11;
                                num2 = (double)(SizeY / 2) + num13;
                                num3 = (double)(SizeX / 2) + num14;
                            }
                            break;
                        }
                    case GalaxyShape.Spiral:
                        {
                            double num7 = Rnd.NextDouble() * Rnd.NextDouble() * (double)SizeX / 2.0;
                            double num8 = Rnd.NextDouble() * Rnd.NextDouble() * (double)SizeY / 2.0;
                            switch (Rnd.Next(1, 3))
                            {
                                case 1:
                                    num2 = (double)(SizeX / 2) + num7;
                                    break;
                                case 2:
                                    num2 = (double)(SizeX / 2) - num7;
                                    break;
                            }
                            switch (Rnd.Next(1, 3))
                            {
                                case 1:
                                    num3 = (double)(SizeY / 2) + num8;
                                    break;
                                case 2:
                                    num3 = (double)(SizeY / 2) - num8;
                                    break;
                            }
                            break;
                        }
                    case GalaxyShape.Irregular:
                        num2 = Rnd.NextDouble() * (double)SizeX;
                        num3 = Rnd.NextDouble() * (double)SizeY;
                        break;
                }
                flag2 = true;
                double num17 = (double)MaxSolarSystemSize + 500.0;
                if (num2 < num17 || num2 > (double)SizeX - num17 || num3 < num17 || num3 > (double)SizeY - num17)
                {
                    flag2 = false;
                }
                Habitat habitat = FindNearestSystemGasCloudAsteroid(num2, num3);
                num6 = ((habitat == null) ? double.MaxValue : CalculateDistance(num2, num3, habitat.Xpos, habitat.Ypos));
                GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsAtPoint(num2, num3, GalaxyLocationType.NebulaCloud);
                if (galaxyLocationList.Count > 0)
                {
                    if (Rnd.Next(0, 15) == 1)
                    {
                        flag = true;
                        foreach (GalaxyLocation item in galaxyLocationList)
                        {
                            if (item.Effect == GalaxyLocationEffectType.LightningDamage)
                            {
                                flag3 = true;
                                break;
                            }
                        }
                    }
                    else
                    {
                        flag = false;
                    }
                }
                else
                {
                    flag = true;
                }
                num5++;
            }
            while ((num6 < (double)(MaxSolarSystemSize * 4) || !flag || !flag2) && num5 < 100);
            HabitatType type = HabitatType.MainSequence;
            int pictureRef = 0;
            int mapPictureRef = 0;
            int diameter = 0;
            short solarRadiation = 0;
            short microwaveRadiation = 0;
            short xrayRadiation = 0;
            bool flag4 = false;
            while (!flag4)
            {
                SelectStar(out type, out diameter, out pictureRef, out mapPictureRef, out solarRadiation, out microwaveRadiation, out xrayRadiation);
                flag4 = true;
                if (flag3)
                {
                    switch (type)
                    {
                        case HabitatType.MainSequence:
                        case HabitatType.RedGiant:
                        case HabitatType.SuperGiant:
                            flag4 = false;
                            break;
                        default:
                            flag4 = true;
                            break;
                    }
                }
            }
            Habitat habitat2 = new Habitat(this, HabitatCategoryType.Star, type, GenerateCodeName(), num2, num3);
            habitat2.Diameter = (short)diameter;
            habitat2.PictureRef = (short)pictureRef;
            habitat2.MapPictureRef = (byte)mapPictureRef;
            habitat2.LandscapePictureRef = -1;
            habitat2.SolarRadiation = (byte)solarRadiation;
            habitat2.MicrowaveRadiation = (byte)microwaveRadiation;
            habitat2.XrayRadiation = (byte)xrayRadiation;
            SelectHabitatPictures(habitat2);
            if (habitat2.Type == HabitatType.BlackHole)
            {
                string text = (habitat2.Name = GenerateBlackHoleName());
                double num18 = (double)habitat2.Diameter * 1.1;
                double num19 = (double)habitat2.Diameter * 1.1;
                double x = num2 - num18 / 2.0;
                double y = num3 - num19 / 2.0;
                GalaxyLocation galaxyLocation = new GalaxyLocation(text + " Pull", GalaxyLocationType.BlackHole, x, y, num18, num19, -1);
                galaxyLocation.ShowName = false;
                galaxyLocation.Effect = GalaxyLocationEffectType.ShipPull;
                galaxyLocation.EffectAmount = (float)habitat2.Diameter / 600f;
                _GalaxyLocations.Add(galaxyLocation);
                AddGalaxyLocationIndex(galaxyLocation);
                num18 = (double)habitat2.Diameter * 0.04;
                num19 = (double)habitat2.Diameter * 0.04;
                x = num2 - num18 / 2.0;
                y = num3 - num19 / 2.0;
                galaxyLocation = new GalaxyLocation(text + " Event Horizon", GalaxyLocationType.BlackHole, x, y, num18, num19, -1);
                galaxyLocation.ShowName = false;
                galaxyLocation.Effect = GalaxyLocationEffectType.ShipDamage;
                galaxyLocation.EffectAmount = (float)habitat2.Diameter;
                _GalaxyLocations.Add(galaxyLocation);
                AddGalaxyLocationIndex(galaxyLocation);
            }
            else if (habitat2.Type == HabitatType.SuperNova)
            {
                string name = (habitat2.Name = TextResolver.GetText("HabitatType SuperNova") + " " + GenerateCodeName());
                habitat2.NovaProgression = (float)(30000.0 + Rnd.NextDouble() * 60000.0);
                habitat2.NovaImageIndexMajor = (short)Rnd.Next(0, GalaxyImages.NovaImageCountMajor);
                habitat2.NovaImageIndexMinor = (short)Rnd.Next(0, GalaxyImages.NovaImageCountMinor);
                int num20 = (int)((double)habitat2.NovaProgression * 2.0);
                habitat2.Diameter = (short)(num20 / 10);
                double num21 = num20;
                double num22 = num20;
                double x2 = num2 - num21 / 2.0;
                double y2 = num3 - num22 / 2.0;
                GalaxyLocation galaxyLocation2 = new GalaxyLocation(name, GalaxyLocationType.SuperNova, x2, y2, num21, num22, -1);
                galaxyLocation2.ShowName = false;
                galaxyLocation2.Shape = GalaxyLocationShape.Circular;
                galaxyLocation2.Effect = GalaxyLocationEffectType.ShieldReduction;
                _GalaxyLocations.Add(galaxyLocation2);
                AddGalaxyLocationIndex(galaxyLocation2);
            }
            return habitat2;
        }

        private HabitatList SetupSolarSystem(GalaxyShape galaxyShape, out HabitatList asteroidField)
        {
            return SetupSolarSystem(galaxyShape, null, out asteroidField);
        }

        public HabitatList SetupSolarSystem(GalaxyShape galaxyShape, Habitat sunHabitat)
        {
            HabitatList asteroidField = null;
            return SetupSolarSystem(galaxyShape, sunHabitat, out asteroidField);
        }

        public HabitatList SetupSolarSystem(GalaxyShape galaxyShape, Habitat sunHabitat, out HabitatList asteroidField)
        {
            asteroidField = null;
            int num = 0;
            int num2 = 0;
            bool flag = true;
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = new HabitatList();
            int minValue = 0;
            if (sunHabitat == null)
            {
                sunHabitat = SetupSun(galaxyShape);
            }
            else
            {
                switch (sunHabitat.Type)
                {
                    case HabitatType.MainSequence:
                    case HabitatType.RedGiant:
                    case HabitatType.SuperGiant:
                        minValue = 1;
                        break;
                    case HabitatType.WhiteDwarf:
                        minValue = 4;
                        break;
                    case HabitatType.Neutron:
                        minValue = 4;
                        break;
                }
            }
            int maxValue = 0;
            switch (sunHabitat.Type)
            {
                case HabitatType.MainSequence:
                case HabitatType.RedGiant:
                case HabitatType.SuperGiant:
                    maxValue = 12;
                    if (StarCount <= 400)
                    {
                        switch (Rnd.Next(minValue, 8))
                        {
                            case 0:
                                num2 = 0;
                                break;
                            case 1:
                            case 2:
                                num2 = Rnd.Next(1, 4);
                                break;
                            case 3:
                            case 4:
                                num2 = Rnd.Next(2, 7);
                                break;
                            case 5:
                            case 6:
                                num2 = Rnd.Next(5, 10);
                                break;
                            case 7:
                                num2 = Rnd.Next(6, 16);
                                break;
                        }
                    }
                    else if (StarCount <= 1000)
                    {
                        switch (Rnd.Next(minValue, 7))
                        {
                            case 0:
                                num2 = 0;
                                break;
                            case 1:
                            case 2:
                                num2 = Rnd.Next(1, 4);
                                break;
                            case 3:
                            case 4:
                                num2 = Rnd.Next(3, 7);
                                break;
                            case 5:
                                num2 = Rnd.Next(4, 9);
                                break;
                            case 6:
                                num2 = Rnd.Next(5, 15);
                                break;
                        }
                    }
                    else
                    {
                        switch (Rnd.Next(minValue, 5))
                        {
                            case 0:
                                num2 = 0;
                                break;
                            case 1:
                                num2 = Rnd.Next(1, 3);
                                break;
                            case 2:
                                num2 = Rnd.Next(2, 5);
                                break;
                            case 3:
                                num2 = Rnd.Next(3, 7);
                                break;
                            case 4:
                                num2 = Rnd.Next(4, 11);
                                break;
                        }
                    }
                    break;
                case HabitatType.WhiteDwarf:
                    maxValue = 3;
                    switch (Rnd.Next(minValue, 6))
                    {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            num2 = 0;
                            break;
                        case 4:
                        case 5:
                            num2 = Rnd.Next(1, 3);
                            break;
                    }
                    break;
                case HabitatType.Neutron:
                    maxValue = 24;
                    switch (Rnd.Next(minValue, 6))
                    {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            num2 = 0;
                            break;
                        case 4:
                        case 5:
                            num2 = 1;
                            break;
                    }
                    break;
                case HabitatType.SuperNova:
                    maxValue = 2;
                    flag = false;
                    num2 = 0;
                    break;
            }
            if (num2 > 0)
            {
                int num3 = 0;
                while (true)
                {
                    if (num3 < 20)
                    {
                        if (AssignSystemName(sunHabitat, num2))
                        {
                            break;
                        }
                        num3++;
                        continue;
                    }
                    sunHabitat.Name = GenerateCodeName();
                    break;
                }
            }
            SetScenicFactor(sunHabitat);
            SetResearchBonus(sunHabitat);
            habitatList2.Add(sunHabitat);
            Habitat habitat;
            if (num2 > 0)
            {
                for (int i = 0; i < num2; i++)
                {
                    habitat = sunHabitat;
                    SelectPlanetType(habitat, out var type, out var pictureRef, out var diameter, out var minOrbitDistance, out var maxOrbitDistance, out var landscapePictureRef);
                    int num4 = diameter / 4;
                    int num5 = 0;
                    int num6 = Rnd.Next(minOrbitDistance, maxOrbitDistance);
                    int newMin = num6 - (diameter / 2 + num4);
                    int newMax = num6 + (diameter / 2 + num4);
                    bool flag2 = true;
                    while (flag2 && num5 < 50)
                    {
                        flag2 = false;
                        foreach (Habitat item3 in habitatList)
                        {
                            int existingMin = item3.OrbitDistance - (item3.Diameter / 2 + num4);
                            int existingMax = item3.OrbitDistance + (item3.Diameter / 2 + num4);
                            if (CheckOrbitOverlap(existingMin, existingMax, newMin, newMax))
                            {
                                num6 = Rnd.Next(minOrbitDistance, maxOrbitDistance);
                                newMin = num6 - (diameter / 2 + num4);
                                newMax = num6 + (diameter / 2 + num4);
                                flag2 = true;
                                break;
                            }
                        }
                        num5++;
                    }
                    Habitat habitat2 = new Habitat(this, HabitatCategoryType.Planet, type, "Planet", habitat, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, num6, Rnd.Next(2, 5));
                    habitat2.Diameter = (short)diameter;
                    habitat2.PictureRef = (short)pictureRef;
                    habitat2.LandscapePictureRef = (short)landscapePictureRef;
                    habitat2.BaseQuality = SelectHabitatQuality(habitat2, (float)_ColonyPrevalence);
                    habitat2.DoTasks(CurrentDateTime);
                    habitat2 = SelectResources(habitat2);
                    SetScenicFactor(habitat2);
                    SetResearchBonus(habitat2);
                    SelectHabitatPictures(habitat2);
                    if (Rnd.Next(0, 5) == 2)
                    {
                        habitat2.OrbitDirection = false;
                    }
                    if (habitat2.Type == HabitatType.GasGiant && habitat2.Diameter < 760)
                    {
                        habitat2.HasRings = true;
                    }
                    int num7 = 1;
                    if (Rnd.Next(0, 4) == 1)
                    {
                        num7++;
                    }
                    for (int j = 0; j < num7; j++)
                    {
                        SelectPopulation(habitat2, sunHabitat);
                    }
                    if (habitat2.Population.Count > 0)
                    {
                        habitat2.Cargo = new CargoList();
                        habitat2.Troops = new TroopList();
                        habitat2.TroopsToRecruit = new TroopList();
                        habitat2.InvadingTroops = new TroopList();
                        habitat2.Characters = new CharacterList();
                        habitat2.InvadingCharacters = new CharacterList();
                        habitat2.ConstructionQueue = new ConstructionQueue(habitat2, this);
                        habitat2.ManufacturingQueue = new ManufacturingQueue(habitat2, this);
                        habitat2.DockingBays = new DockingBayList();
                        int num8 = 1;
                        switch (habitat2.Type)
                        {
                            case HabitatType.Volcanic:
                            case HabitatType.Desert:
                            case HabitatType.MarshySwamp:
                            case HabitatType.Continental:
                            case HabitatType.Ocean:
                            case HabitatType.BarrenRock:
                            case HabitatType.Ice:
                            case HabitatType.Metal:
                                num8 = ((habitat2.Category == HabitatCategoryType.Asteroid || habitat2.Type == HabitatType.BarrenRock) ? 1 : 20);
                                break;
                            default:
                                num8 = 1;
                                break;
                        }
                        for (int k = 0; k < num8; k++)
                        {
                            BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                            int capacity = 100;
                            DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, capacity);
                            habitat2.DockingBays.Add(item);
                        }
                        habitat2.DockingBayWaitQueue = new BuiltObjectList();
                    }
                    else
                    {
                        SelectCreatures(habitat2);
                    }
                    habitatList.Add(habitat2);
                    habitat = habitat2;
                    if (StarCount <= 400)
                    {
                        if (habitat2.Diameter <= 370)
                        {
                            num = ((habitat2.Diameter > 260) ? Rnd.Next(0, 3) : ((habitat2.Diameter > 150) ? Rnd.Next(0, 2) : 0));
                        }
                        else
                        {
                            int maxValue2 = Math.Min(5, habitat2.Diameter / 165);
                            num = Rnd.Next(0, maxValue2);
                        }
                    }
                    else if (StarCount <= 1000)
                    {
                        if (habitat2.Diameter <= 370)
                        {
                            num = ((habitat2.Diameter > 260) ? Rnd.Next(0, 3) : ((habitat2.Diameter > 165) ? Rnd.Next(0, 2) : 0));
                        }
                        else
                        {
                            int maxValue3 = Math.Min(5, habitat2.Diameter / 180);
                            num = Rnd.Next(0, maxValue3);
                        }
                    }
                    else if (habitat2.Diameter <= 370)
                    {
                        num = ((habitat2.Diameter > 260) ? Rnd.Next(0, 3) : ((habitat2.Diameter > 180) ? Rnd.Next(0, 2) : 0));
                    }
                    else
                    {
                        int maxValue4 = Math.Min(5, habitat2.Diameter / 180);
                        num = Rnd.Next(0, maxValue4);
                    }
                    HabitatList habitatList3 = new HabitatList();
                    for (int l = 0; l < num; l++)
                    {
                        SelectMoonType(habitat, out diameter, out type, out var _, out var _, out pictureRef, out landscapePictureRef);
                        habitat2 = new Habitat(this, HabitatCategoryType.Moon, type, GenerateCodeName(), habitat, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, Rnd.Next(5, 32), Rnd.Next(4, 9));
                        if (diameter < 15)
                        {
                            diameter = 15;
                        }
                        habitat2.Diameter = (short)diameter;
                        habitat2.PictureRef = (short)pictureRef;
                        habitat2.LandscapePictureRef = (short)landscapePictureRef;
                        habitat2.BaseQuality = SelectHabitatQuality(habitat2, (float)_ColonyPrevalence);
                        int val = (int)((double)habitat.Diameter * 0.75);
                        val = Math.Max(150, val);
                        int num9 = (int)((double)habitat.Diameter * 3.3);
                        if (num9 > MaxMoonOrbitSize)
                        {
                            num9 = MaxMoonOrbitSize;
                        }
                        int num10 = 5;
                        num5 = 0;
                        num6 = Rnd.Next(val, num9);
                        newMin = num6 - (diameter / 2 + num10);
                        newMax = num6 + (diameter / 2 + num10);
                        flag2 = true;
                        while (flag2 && num5 < 50)
                        {
                            flag2 = false;
                            foreach (Habitat item4 in habitatList3)
                            {
                                int existingMin2 = item4.OrbitDistance - (item4.Diameter / 2 + num10);
                                int existingMax2 = item4.OrbitDistance + (item4.Diameter / 2 + num10);
                                if (CheckOrbitOverlap(existingMin2, existingMax2, newMin, newMax))
                                {
                                    num6 = Rnd.Next(val, num9);
                                    newMin = num6 - (diameter / 2 + num10);
                                    newMax = num6 + (diameter / 2 + num10);
                                    flag2 = true;
                                    break;
                                }
                            }
                            num5++;
                        }
                        habitatList3.Add(habitat2);
                        habitat2.OrbitDistance = (short)num6;
                        habitat2.DoTasks(CurrentDateTime);
                        habitat2 = SelectResources(habitat2);
                        SetScenicFactor(habitat2);
                        SetResearchBonus(habitat2);
                        SelectHabitatPictures(habitat2);
                        if (Rnd.Next(0, 5) == 2)
                        {
                            habitat2.OrbitDirection = false;
                        }
                        num7 = 1;
                        if (Rnd.Next(0, 4) == 1 && habitat2.Type != HabitatType.BarrenRock)
                        {
                            num7++;
                        }
                        for (int m = 0; m < num7; m++)
                        {
                            SelectPopulation(habitat2, sunHabitat);
                        }
                        if (habitat2.Population.Count > 0)
                        {
                            habitat2.Cargo = new CargoList();
                            habitat2.Troops = new TroopList();
                            habitat2.TroopsToRecruit = new TroopList();
                            habitat2.InvadingTroops = new TroopList();
                            habitat2.ConstructionQueue = new ConstructionQueue(habitat2, this);
                            habitat2.ManufacturingQueue = new ManufacturingQueue(habitat2, this);
                            habitat2.DockingBays = new DockingBayList();
                            int num11 = 1;
                            switch (habitat2.Type)
                            {
                                case HabitatType.Volcanic:
                                case HabitatType.Desert:
                                case HabitatType.MarshySwamp:
                                case HabitatType.Continental:
                                case HabitatType.Ocean:
                                case HabitatType.BarrenRock:
                                case HabitatType.Ice:
                                case HabitatType.Metal:
                                    num11 = ((habitat2.Category == HabitatCategoryType.Asteroid || habitat2.Type == HabitatType.BarrenRock) ? 1 : 20);
                                    break;
                                default:
                                    num11 = 1;
                                    break;
                            }
                            for (int n = 0; n < num11; n++)
                            {
                                BuiltObjectComponent builtObjectComponent2 = new BuiltObjectComponent(74, ComponentStatus.Normal);
                                DockingBay item2 = new DockingBay(builtObjectComponent2.ComponentID, builtObjectComponent2.BuiltObjectComponentId, 100);
                                habitat2.DockingBays.Add(item2);
                            }
                            habitat2.DockingBayWaitQueue = new BuiltObjectList();
                        }
                        else
                        {
                            SelectCreatures(habitat2);
                        }
                        habitatList.Add(habitat2);
                    }
                }
                habitat = sunHabitat;
                int num12 = Rnd.Next(0, (int)((double)num2 * 4.5));
                for (int num13 = 0; num13 < num12; num13++)
                {
                    string name = GenerateCodeName();
                    int diameter = Rnd.Next(20, 35);
                    int pictureRef = GalaxyImages.HabitatImageOffsetAsteroidsNormal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsNormal);
                    double orbitangle = Rnd.NextDouble() * Math.PI * 2.0;
                    Habitat habitat2 = new Habitat(this, HabitatCategoryType.Asteroid, HabitatType.BarrenRock, name, habitat, orbitangle, orbitdirection: true, Rnd.Next(10500, 11500), Rnd.Next(2, 8));
                    habitat2.Diameter = (short)diameter;
                    habitat2.PictureRef = (short)pictureRef;
                    habitat2.LandscapePictureRef = -1;
                    habitat2.BaseQuality = SelectHabitatQuality(habitat2, (float)_ColonyPrevalence);
                    habitat2 = SelectResources(habitat2);
                    SelectHabitatPictures(habitat2);
                    if (Rnd.Next(0, 5) == 2)
                    {
                        habitat2.OrbitDirection = false;
                    }
                    SelectCreatures(habitat2);
                    habitatList.Add(habitat2);
                }
            }
            habitat = sunHabitat;
            if (Rnd.Next(0, maxValue) == 1)
            {
                int num14 = 1;
                if (sunHabitat.Type == HabitatType.SuperNova && Rnd.Next(0, 2) == 1)
                {
                    num14 = 2;
                }
                for (int num15 = 0; num15 < num14; num15++)
                {
                    asteroidField = new HabitatList();
                    int num16 = Rnd.Next(80, 350);
                    double num17 = Rnd.NextDouble() * Math.PI * 2.0;
                    int num18 = Rnd.Next(9500, 10500);
                    HabitatType habitatType = HabitatType.BarrenRock;
                    switch (Rnd.Next(0, 4))
                    {
                        case 1:
                            habitatType = HabitatType.Metal;
                            break;
                        case 2:
                            habitatType = HabitatType.Ice;
                            break;
                    }
                    if (sunHabitat.Type == HabitatType.SuperNova)
                    {
                        habitatType = HabitatType.Metal;
                    }
                    if (habitatType == HabitatType.Ice)
                    {
                        num18 = Rnd.Next(17200, 22200);
                    }
                    int num19 = Rnd.Next(1, 4);
                    bool flag3 = true;
                    if (Rnd.Next(0, 4) == 2)
                    {
                        flag3 = false;
                    }
                    double num20 = Math.Max(0.06, 0.13 * ((double)num16 / 350.0));
                    double num21 = Math.Max(250.0, 500.0 * ((double)num16 / 350.0));
                    double num22 = 0.4;
                    double num23 = num22 * -1.0;
                    double num24 = (double)num18 + num23 * num21;
                    double num25 = (double)num18 + num22 * num21;
                    double num26 = num17 + num23 * num20;
                    double num27 = num17 + num22 * num20;
                    if (num26 > num27)
                    {
                        double num28 = num27;
                        num27 = num26;
                        num26 = num28;
                    }
                    for (int num29 = 0; num29 < num16; num29++)
                    {
                        string name = GenerateCodeName();
                        name = name + ", " + TextResolver.GetText("Asteroid Field");
                        int diameter = Rnd.Next(10, 25);
                        if (Rnd.Next(0, 30) == 5)
                        {
                            diameter = Rnd.Next(26, 45);
                        }
                        int pictureRef = GalaxyImages.HabitatImageOffsetAsteroidsNormal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsNormal);
                        int num30 = num18 + (int)((Rnd.NextDouble() - 0.5) * Rnd.NextDouble() * 2.0 * num21);
                        double num31 = num17 + (Rnd.NextDouble() - 0.5) * Rnd.NextDouble() * 2.0 * num20;
                        if ((double)num30 > num24 && (double)num30 < num25 && num31 > num26 && num31 < num27)
                        {
                            double num32 = Rnd.NextDouble() * 0.8 - 0.4;
                            double num33 = Rnd.NextDouble() * 0.8 - 0.4;
                            num30 = num18 + (int)(num32 * num21);
                            num31 = num17 + num33 * num20;
                        }
                        Habitat habitat3 = new Habitat(this, HabitatCategoryType.Asteroid, HabitatType.BarrenRock, name, habitat, num31, flag3, num30, num19);
                        habitat3.Diameter = (short)diameter;
                        habitat3.PictureRef = (short)pictureRef;
                        habitat3.LandscapePictureRef = -1;
                        habitat3.BaseQuality = SelectHabitatQuality(habitat3, (float)_ColonyPrevalence);
                        int minimumResourceCount = 0;
                        if (habitatType == HabitatType.Metal && Rnd.Next(0, 3) > 0)
                        {
                            minimumResourceCount = 1;
                        }
                        habitat3.Type = habitatType;
                        habitat3 = SelectResources(habitat3, minimumResourceCount);
                        SelectHabitatPictures(habitat3);
                        if (flag)
                        {
                            SelectCreatures(habitat3);
                        }
                        if (Rnd.Next(0, 1300) == 1)
                        {
                            habitat3 = GenerateTreasureAsteroid(habitat, num31, num30, flag3, num19, doInitialMove: true);
                        }
                        asteroidField.Add(habitat3);
                        habitatList.Add(habitat3);
                    }
                }
            }
            List<int> list = new List<int>();
            HabitatList habitatList4 = new HabitatList();
            for (int num34 = 0; num34 < habitatList.Count; num34++)
            {
                if (habitatList[num34].Category == HabitatCategoryType.Planet || habitatList[num34].Category == HabitatCategoryType.Asteroid)
                {
                    list.Add(habitatList[num34].OrbitDistance);
                    habitatList4.Add(habitatList[num34]);
                }
            }
            int[] keys = list.ToArray();
            Habitat[] array = habitatList4.ToArray();
            Array.Sort(keys, array);
            int num35 = 1;
            for (int num36 = 0; num36 < array.Length; num36++)
            {
                if (array[num36].Category == HabitatCategoryType.Planet)
                {
                    array[num36].Name = sunHabitat.Name + " " + num35;
                    num35++;
                }
                if (!habitatList2.Contains(array[num36]))
                {
                    habitatList2.Add(array[num36]);
                }
                for (int num37 = 0; num37 < habitatList.Count; num37++)
                {
                    if (habitatList[num37].Parent == array[num36])
                    {
                        habitatList[num37].Name = GenerateMoonName(habitatList[num37]);
                        habitatList2.Add(habitatList[num37]);
                    }
                }
            }
            return habitatList2;
        }

        public void SetResearchBonus(Habitat habitat)
        {
            SetResearchBonus(habitat, definitelySet: false);
        }

        public void SetResearchBonus(Habitat habitat, bool definitelySet)
        {
            switch (habitat.Type)
            {
                case HabitatType.Neutron:
                case HabitatType.BlackHole:
                case HabitatType.SuperNova:
                    if (definitelySet || Rnd.Next(0, 4) > 0)
                    {
                        int num2 = Rnd.Next(5, 16);
                        IndustryType researchBonusIndustry2 = IndustryType.Undefined;
                        switch (Rnd.Next(0, 3))
                        {
                            case 0:
                                researchBonusIndustry2 = IndustryType.Weapon;
                                break;
                            case 1:
                                researchBonusIndustry2 = IndustryType.Energy;
                                break;
                            case 2:
                                researchBonusIndustry2 = IndustryType.HighTech;
                                break;
                        }
                        habitat.ResearchBonus = (byte)num2;
                        habitat.ResearchBonusIndustry = researchBonusIndustry2;
                    }
                    break;
                case HabitatType.Volcanic:
                case HabitatType.GasGiant:
                case HabitatType.FrozenGasGiant:
                    if (definitelySet || Rnd.Next(0, 40) == 1)
                    {
                        int num = Rnd.Next(10, 31);
                        IndustryType researchBonusIndustry = IndustryType.Undefined;
                        switch (Rnd.Next(0, 3))
                        {
                            case 0:
                                researchBonusIndustry = IndustryType.Weapon;
                                break;
                            case 1:
                                researchBonusIndustry = IndustryType.Energy;
                                break;
                            case 2:
                                researchBonusIndustry = IndustryType.HighTech;
                                break;
                        }
                        habitat.ResearchBonus = (byte)num;
                        habitat.ResearchBonusIndustry = researchBonusIndustry;
                    }
                    break;
            }
        }

        public void SetScenicFactor(Habitat habitat)
        {
            SetScenicFactor(habitat, definitelySet: false);
        }

        public void SetScenicFactor(Habitat habitat, bool definitelySet)
        {
            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
            switch (habitat.Type)
            {
                case HabitatType.BarrenRock:
                    if ((habitat.Category == HabitatCategoryType.Planet || habitat.Category == HabitatCategoryType.Moon) && (definitelySet || Rnd.Next(0, 600) == 1))
                    {
                        habitat.ScenicFactor = (float)(0.1 + Rnd.NextDouble() * 0.3);
                        habitat.ScenicFeature = string.Format(TextResolver.GetText("Ancient Monolith of X"), habitat2.Name);
                    }
                    break;
                case HabitatType.MarshySwamp:
                case HabitatType.Continental:
                    if (definitelySet || Rnd.Next(0, 70) == 1)
                    {
                        habitat.ScenicFactor = (float)(0.2 + Rnd.NextDouble() * 0.4);
                        switch (Rnd.Next(0, 2))
                        {
                            case 0:
                                habitat.ScenicFeature = string.Format(TextResolver.GetText("Rings of X"), habitat2.Name);
                                habitat.HasRings = true;
                                break;
                            case 1:
                                habitat.ScenicFeature = string.Format(TextResolver.GetText("X Falls"), habitat2.Name);
                                break;
                        }
                    }
                    break;
                case HabitatType.Ocean:
                    if (definitelySet || Rnd.Next(0, 100) == 1)
                    {
                        habitat.ScenicFactor = (float)(0.1 + Rnd.NextDouble() * 0.3);
                        habitat.ScenicFeature = string.Format(TextResolver.GetText("Undersea Ruins of X"), habitat2.Name);
                    }
                    break;
                case HabitatType.Ice:
                    if (definitelySet || Rnd.Next(0, 200) == 1)
                    {
                        habitat.ScenicFactor = (float)(0.2 + Rnd.NextDouble() * 0.4);
                        habitat.ScenicFeature = string.Format(TextResolver.GetText("Ice Rings of X"), habitat2.Name);
                        habitat.HasRings = true;
                    }
                    break;
                case HabitatType.Volcanic:
                case HabitatType.Desert:
                    if (!definitelySet && Rnd.Next(0, 200) != 1)
                    {
                        break;
                    }
                    habitat.ScenicFactor = (float)(0.2 + Rnd.NextDouble() * 0.4);
                    switch (Rnd.Next(0, 2))
                    {
                        case 0:
                            {
                                string scenicFeature2 = string.Format(TextResolver.GetText("Rings of X"), habitat2.Name);
                                if (habitat.Type == HabitatType.Volcanic)
                                {
                                    scenicFeature2 = string.Format(TextResolver.GetText("Fire Rings of X"), habitat2.Name);
                                }
                                habitat.ScenicFeature = scenicFeature2;
                                habitat.HasRings = true;
                                break;
                            }
                        case 1:
                            {
                                string scenicFeature = TextResolver.GetText("Great Canyon");
                                if (habitat2.Name.Length < 15)
                                {
                                    scenicFeature = string.Format(TextResolver.GetText("X Canyon"), habitat2.Name);
                                }
                                habitat.ScenicFeature = scenicFeature;
                                break;
                            }
                    }
                    break;
                case HabitatType.BlackHole:
                    habitat.ScenicFactor = (float)(0.3 + Rnd.NextDouble() * 0.6);
                    break;
                case HabitatType.GasGiant:
                    if (definitelySet || Rnd.Next(0, 100) == 1)
                    {
                        habitat.ScenicFactor = (float)(0.2 + Rnd.NextDouble() * 0.2);
                    }
                    break;
                case HabitatType.Neutron:
                    if (definitelySet || Rnd.Next(0, 2) > 0)
                    {
                        habitat.ScenicFactor = (float)(0.3 + Rnd.NextDouble() * 0.3);
                    }
                    break;
                case HabitatType.SuperNova:
                    break;
            }
        }

        private bool CheckOrbitOverlap(int existingMin, int existingMax, int newMin, int newMax)
        {
            if (newMin >= existingMin && newMin <= existingMax)
            {
                return true;
            }
            if (newMax >= existingMin && newMax <= existingMax)
            {
                return true;
            }
            if (newMin < existingMin && newMax > existingMax)
            {
                return true;
            }
            return false;
        }

        public void AddCargoBaysToDesign(Design design, int cargoBayAmount)
        {
            if (design == null)
            {
                return;
            }
            ComponentDefinition lowestTechByType = ComponentDefinition.GetLowestTechByType(ComponentType.StorageCargo, ComponentDefinitionsStatic);
            if (lowestTechByType != null)
            {
                for (int i = 0; i < cargoBayAmount; i++)
                {
                    design.Components.Add(new Component(lowestTechByType.ComponentID));
                }
            }
            design.ReDefine();
        }

        public BuiltObject GenerateAbandonedBuiltObject(Habitat habitat, Design design)
        {
            return GenerateAbandonedBuiltObject(habitat, design, allowCreatures: true);
        }

        public BuiltObject GenerateAbandonedBuiltObject(Habitat habitat, Design design, bool allowCreatures)
        {
            return GenerateAbandonedBuiltObject(habitat, design, allowCreatures, allowNegativeEffects: true, BuiltObjectEncounterAction.Prompt);
        }

        public BuiltObject GenerateAbandonedBuiltObject(Habitat habitat, Design design, bool allowCreatures, bool allowNegativeEffects, BuiltObjectEncounterAction encounterAction)
        {
            string name = SelectUniqueBuiltObjectName(design, habitat);
            BuiltObject builtObject = GenerateUnownedBuiltObjectFromDesign(design, name, habitat);
            builtObject.IsAutoControlled = false;
            builtObject.PlayerEmpireEncounterAction = encounterAction;
            BuiltObjectEncounterEventType builtObjectEncounterEventType = BuiltObjectEncounterEventType.Acquire;
            string encounterDescription = string.Empty;
            bool flag = false;
            if (design.SubRole == BuiltObjectSubRole.ColonyShip || design.SubRole == BuiltObjectSubRole.ConstructionShip || design.SubRole == BuiltObjectSubRole.ExplorationShip || design.SubRole == BuiltObjectSubRole.GasMiningShip || design.SubRole == BuiltObjectSubRole.MiningShip || design.SubRole == BuiltObjectSubRole.CapitalShip || design.SubRole == BuiltObjectSubRole.ResupplyShip || design.Role == BuiltObjectRole.Base)
            {
                flag = true;
            }
            if (allowNegativeEffects && Rnd.Next(0, 3) == 1)
            {
                switch (Rnd.Next(0, 2))
                {
                    case 0:
                        builtObjectEncounterEventType = BuiltObjectEncounterEventType.Explodes;
                        encounterDescription = "";
                        break;
                    case 1:
                        if (!flag && _PiratePrevalence > 0.0)
                        {
                            builtObjectEncounterEventType = BuiltObjectEncounterEventType.PirateAmbush;
                            encounterDescription = "";
                        }
                        break;
                }
            }
            if (builtObject.Role == BuiltObjectRole.Base && builtObjectEncounterEventType == BuiltObjectEncounterEventType.PirateAmbush)
            {
                builtObjectEncounterEventType = BuiltObjectEncounterEventType.Acquire;
                encounterDescription = string.Empty;
            }
            builtObject.EncounterEventType = builtObjectEncounterEventType;
            builtObject.EncounterDescription = encounterDescription;
            if (allowCreatures && Rnd.Next(0, 3) == 1 && _CreaturePrevalence > 0.0 && AllowGiantKaltorGeneration)
            {
                GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat, lockLocation: true);
            }
            if ((builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort) && builtObject.Cargo != null)
            {
                for (int i = 0; i < ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
                {
                    ResourceDefinition resourceDefinition = ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                    if (resourceDefinition != null)
                    {
                        int amount = 300;
                        if (resourceDefinition.IsFuel)
                        {
                            amount = 3000;
                        }
                        builtObject.Cargo.Add(new Cargo(new Resource(resourceDefinition.ResourceID), amount, IndependentEmpire));
                    }
                }
            }
            AbandonedBuiltObjects.Add(builtObject);
            AbandonedShipCount++;
            return builtObject;
        }

        public BuiltObject GenerateStoryAbandonedBuiltObject(double x, double y, Design design, string name)
        {
            BuiltObject builtObject = GenerateUnownedBuiltObjectFromDesign(design, name, null, x, y);
            builtObject.IsAutoControlled = false;
            builtObject.IsAutoControlled = true;
            builtObject.PlayerEmpireEncounterAction = BuiltObjectEncounterAction.Prompt;
            builtObject.EncounterEventType = BuiltObjectEncounterEventType.Acquire;
            AbandonedShipCount++;
            return builtObject;
        }

        private string GetCustomName(Design design)
        {
            string text = string.Empty;
            List<string> list = null;
            if (design.Empire == PlayerEmpire && _SubRoleNameSet != null)
            {
                list = _SubRoleNameSet.GetNames(design.SubRole);
            }
            if (list != null && list.Count > 0)
            {
                bool flag = false;
                BuiltObjectList builtObjectList = new BuiltObjectList();
                builtObjectList.AddRange(design.Empire.BuiltObjects);
                builtObjectList.AddRange(design.Empire.PrivateBuiltObjects);
                for (int num = builtObjectList.Count - 1; num >= 0; num--)
                {
                    if (builtObjectList[num].SubRole == design.SubRole)
                    {
                        int num2 = list.IndexOf(builtObjectList[num].Name);
                        if (num2 >= 0)
                        {
                            if (num2 == list.Count - 1)
                            {
                                flag = true;
                            }
                            else
                            {
                                text = list[num2 + 1];
                            }
                            break;
                        }
                    }
                }
                if (string.IsNullOrEmpty(text) && !flag)
                {
                    text = list[0];
                }
            }
            return text;
        }

        public string SelectUniqueBuiltObjectName(Design design, Habitat parentHabitat)
        {
            string empty = string.Empty;
            empty = GetCustomName(design);
            if (!string.IsNullOrEmpty(empty))
            {
                return empty;
            }
            string text = string.Empty;
            string text2 = string.Empty;
            if (parentHabitat != null)
            {
                text = parentHabitat.Name;
                Habitat habitat = DetermineHabitatSystemStar(parentHabitat);
                text2 = habitat.Name;
            }
            switch (design.SubRole)
            {
                case BuiltObjectSubRole.MiningStation:
                    empty = text + " " + ResolveDescription(BuiltObjectSubRole.MiningStation);
                    break;
                case BuiltObjectSubRole.GasMiningStation:
                    empty = text + " " + ResolveDescription(BuiltObjectSubRole.GasMiningStation);
                    break;
                case BuiltObjectSubRole.Escort:
                case BuiltObjectSubRole.Frigate:
                case BuiltObjectSubRole.Destroyer:
                case BuiltObjectSubRole.Cruiser:
                case BuiltObjectSubRole.CapitalShip:
                case BuiltObjectSubRole.TroopTransport:
                case BuiltObjectSubRole.Carrier:
                case BuiltObjectSubRole.ResupplyShip:
                    empty = SelectRandomUniqueMilitaryShipName(parentHabitat);
                    break;
                case BuiltObjectSubRole.ResortBase:
                    empty = GenerateResortBaseName(parentHabitat);
                    break;
                case BuiltObjectSubRole.MonitoringStation:
                    {
                        string[] array = new string[4] { "Beacon", "Sentinel", "Station", "Monitoring Facility" };
                        empty = ((!string.IsNullOrEmpty(text2)) ? (text2 + " " + array[Rnd.Next(0, array.Length)]) : (array[Rnd.Next(0, array.Length)] + " " + design.BuildCount.ToString("000")));
                        break;
                    }
                case BuiltObjectSubRole.EnergyResearchStation:
                case BuiltObjectSubRole.WeaponsResearchStation:
                case BuiltObjectSubRole.HighTechResearchStation:
                    {
                        string[] array = new string[4] { "Research Center", "Station", "Research Station", "Research Facility" };
                        empty = ((!string.IsNullOrEmpty(text2)) ? (text2 + " " + array[Rnd.Next(0, array.Length)]) : (array[Rnd.Next(0, array.Length)] + " " + design.BuildCount.ToString("000")));
                        break;
                    }
                case BuiltObjectSubRole.DefensiveBase:
                    {
                        string[] array = new string[4]
                        {
                TextResolver.GetText("Defensive Base"),
                TextResolver.GetText("Weapons Platform"),
                TextResolver.GetText("Defense Battery"),
                TextResolver.GetText("Orbital Battery")
                        };
                        empty = ((!string.IsNullOrEmpty(text)) ? (text + " " + array[Rnd.Next(0, array.Length)]) : (array[Rnd.Next(0, array.Length)] + " " + design.BuildCount.ToString("000")));
                        break;
                    }
                case BuiltObjectSubRole.GenericBase:
                    {
                        string[] array = new string[2] { "Base", "Station" };
                        string text3 = array[Rnd.Next(0, array.Length)];
                        if (string.IsNullOrEmpty(empty))
                        {
                            empty = text2 + " " + text3;
                        }
                        break;
                    }
                case BuiltObjectSubRole.ExplorationShip:
                case BuiltObjectSubRole.SmallFreighter:
                case BuiltObjectSubRole.MediumFreighter:
                case BuiltObjectSubRole.LargeFreighter:
                case BuiltObjectSubRole.ColonyShip:
                case BuiltObjectSubRole.PassengerShip:
                case BuiltObjectSubRole.ConstructionShip:
                case BuiltObjectSubRole.GasMiningShip:
                case BuiltObjectSubRole.MiningShip:
                    empty = SelectRandomUniqueStandardShipName(parentHabitat);
                    break;
                case BuiltObjectSubRole.SmallSpacePort:
                case BuiltObjectSubRole.MediumSpacePort:
                case BuiltObjectSubRole.LargeSpacePort:
                    empty = text + " " + TextResolver.GetText("Space Port");
                    break;
                default:
                    empty = design.Name + " X";
                    break;
            }
            return empty;
        }

        public string SelectRandomUniqueStandardShipName(Habitat habitat)
        {
            string empty = string.Empty;
            string[] array = new string[127]
            {
            "Lucky", "Grand", "Bright", "Sublime", "Lonesome", "Charming", "Enchanted", "Brazen", "Serene", "Placid",
            "Quiet", "Friendly", "Happy", "Fortunate", "Merry", "Smiling", "Cautious", "Idle", "Brisk", "Bold",
            "Solitary", "Radiant", "Lavish", "Handsome", "Majestic", "Bountiful", "Gallant", "Intrepid", "Valiant", "Stout",
            "Superb", "Regal", "Noble", "Hardy", "Strange", "Shining", "Glowing", "Lively", "Daunting", "Slippery",
            "Crafty", "Risky", "Sneaky", "Lone", "Arduous", "Tenacious", "Outrageous", "Distant", "Doubtful", "Jubilant",
            "Cheerful", "Adamant", "Resolute", "Curious", "Extravagant", "Audacious", "Futile", "Vain", "Aimless", "Cryptic",
            "Prudent", "Worthy", "Honest", "Venerable", "Precious", "Celestial", "Foolish", "Roaming", "Blind", "Dusty",
            "Lost", "Solar", "Swift", "Stellar", "Last", "Wild", "Express", "Rusty", "Far", "Broken",
            "Fading", "Silent", "Ancient", "Pristine", "Shabby", "Tired", "Weary", "Secretive", "Conspicuous", "Hidden",
            "Dubious", "Devious", "Elusive", "Shady", "Wily", "Lawless", "Crooked", "Forbidden", "Wry", "Cowering",
            "Muffled", "Grasping", "Hasty", "Mocking", "Humble", "Sombre", "Solemn", "Eager", "Deep", "Meagre",
            "Frugal", "Daring", "Nimble", "Feeble", "Arcane", "Profound", "Obscure", "Graceful", "Vanishing", "Trusty",
            "Late", "Decrepit", "Grimy", "Surly", "Dire", "Tarnished", "Galactic"
            };
            string[] array2 = new string[125]
            {
            "Queen", "Princess", "Sun", "Star", "Hope", "Chance", "Gamble", "Aspiration", "Traveller", "Voyager",
            "Wayfarer", "Scoundrel", "Wanderer", "Trader", "Merchant", "Encounter", "Scout", "Obsession", "Moon", "Empress",
            "Dream", "Fantasy", "Illusion", "Mirage", "Ruse", "Bluff", "Miracle", "Novelty", "Wonder", "Scheme",
            "Impulse", "Venture", "Wager", "Adventure", "Intrigue", "Luxury", "Challenge", "Maneuver", "Smuggler", "Lurker",
            "Prowler", "Imposter", "Subterfuge", "Mystery", "Enterprise", "Escapade", "Peril", "Ploy", "Quest", "Force",
            "Whim", "Adversity", "Navigator", "Ruse", "Gambit", "Subterfuge", "Pearl", "Jewel", "Treasure", "Prize",
            "Hoard", "Rogue", "Agent", "Envoy", "Guide", "Lady", "Pathfinder", "Expedition", "Journey", "Odyssey",
            "Errand", "Sojourn", "Bargain", "Way", "Guardian", "Dawn", "Echo", "Interlude", "Ranger", "Victory",
            "Renegade", "Starseeker", "Starwind", "Solace", "Pride", "Rimrunner", "Starway", "Beggar", "Rover", "Starfire",
            "Raider", "Deal", "Rendezvous", "Twilight", "Courage", "Burden", "Spirit", "Nightstar", "Profit", "Relic",
            "Bootlegger", "Shroud", "Remorse", "Disturbance", "Trailblazer", "Resolution", "Decoy", "Culprit", "Destiny", "Tramp",
            "Vagrant", "Splendor", "Starrider", "Negotiator", "Partisan", "Discovery", "Distress", "Rebel", "Evasion", "Pathway",
            "Endeavour", "Memory", "Orbit", "Impasse", "Nova"
            };
            int num = Rnd.Next(0, array.Length);
            string text = array[num];
            num = Rnd.Next(0, array2.Length);
            string text2 = array2[num];
            empty = text + " " + text2;
            if (Rnd.Next(0, 7) < 2 && habitat != null)
            {
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                if (habitat2.Category == HabitatCategoryType.Star && habitat2.Name.Length < 16 && habitat2.Name.Length > 1)
                {
                    string text3 = habitat2.Name.Substring(1, 1);
                    if (text3.ToLower(CultureInfo.InvariantCulture) == text3)
                    {
                        empty = ((Rnd.Next(0, 3) != 1) ? (habitat2.Name + " " + text2) : (text2 + " of " + habitat2.Name));
                    }
                }
            }
            return empty;
        }

        private string GenerateFleetName()
        {
            string[] array = new string[20]
            {
            "Fleet", "Armada", "Strike Force", "Battle Group", "Task Force", "Strike Group", "Starfleet", "Flotilla", "", "",
            "", "", "", "", "", "", "", "", "", ""
            };
            return array[Rnd.Next(0, array.Length)];
        }

        public string SelectRandomUniqueMilitaryShipName()
        {
            return SelectRandomUniqueMilitaryShipName(null);
        }

        public string SelectRandomUniqueMilitaryShipName(Habitat habitat)
        {
            string empty = string.Empty;
            string empty2 = string.Empty;
            string empty3 = string.Empty;
            string[] array = new string[76]
            {
            "Grievous", "Prime", "Deadly", "Grand", "Black", "Swift", "Mighty", "Dreadful", "Crushing", "Shattering",
            "Silent", "Dark", "Supreme", "Ultimate", "Lethal", "Implacable", "Immortal", "Majestic", "Forceful", "Potent",
            "Great", "Ruinous", "Sinister", "Bleak", "Grim", "Devious", "Overwhelming", "Merciless", "Fearsome", "Cruel",
            "Iron", "Cunning", "Sly", "Fearless", "Insidious", "Evil", "Fearless", "Eternal", "Terrible", "Looming",
            "Overpowering", "Smashing", "Angry", "Raging", "Relentless", "Intrepid", "Wrathful", "Bitter", "Evasive", "Decisive",
            "Proud", "Indomitable", "Elusive", "Inevitable", "Belligerent", "Courageous", "Invincible", "Shrouded", "Growling", "Elite",
            "Final", "Assured", "Lamented", "Wailing", "Banished", "Discarded", "Worthy", "Desperate", "Reckless", "Fatal",
            "Hostile", "Tenacious", "Crimson", "Red", "Scarlet", "Formidable"
            };
            string[] array2 = new string[162]
            {
            "Zenith", "Hand", "Vengeance", "Axe", "Dagger", "Eclipse", "Moon", "Sun", "Phantom", "Executioner",
            "Revenge", "Horizon", "Star", "Crucible", "Action", "Devastation", "Shadow", "Exploit", "Reprisal", "Surprise",
            "Strike", "Judgment", "Courage", "Stealth", "Enigma", "Mystery", "Fist", "Death", "Warrior", "Assassin",
            "Rendezvous", "Fate", "Destiny", "Doom", "Despair", "Curse", "Thunder", "Demise", "Revolution", "Annihilation",
            "Dominator", "Triumph", "Victory", "Conquest", "Invader", "Downfall", "Chaos", "Turmoil", "Anarchy", "Rebellion",
            "Sting", "Leader", "Master", "Victor", "Assault", "Cataclysm", "Tyrant", "Plague", "Fury", "Justice",
            "Reckoning", "Emancipator", "Defender", "Defiance", "Liberty", "Retribution", "Adversary", "Sentinel", "Sentry", "Ravager",
            "Subjugator", "Starfall", "Vigilance", "Starstream", "Inquisitor", "Swarm", "Intruder", "Bandit", "Allegiance", "Behemoth",
            "Emperor", "Firestorm", "Nemesis", "Onslaught", "Predator", "Rampage", "Stalker", "Trap", "Arrow", "Skirmish",
            "Spectre", "Hero", "Verdict", "Mandate", "Dictator", "Decree", "Revolt", "Protector", "Bastion", "Vindication",
            "Guardian", "Shield", "Champion", "Advocate", "Challenger", "Provocation", "Spite", "Mutiny", "Repulser", "Resistance",
            "Liberator", "Deception", "Exile", "Outcast", "Fugitive", "Renegade", "Cutlass", "Affliction", "Conflict", "Aggressor",
            "Banshee", "Battle", "Firelance", "Chariot", "Conqueror", "Demolisher", "Desolation", "Eminence", "Encounter", "Enforcer",
            "Eviscerator", "Exactor", "Fireclaw", "Firestorm", "Dragon", "Gauntlet", "Claw", "Hammer", "Hunter", "Hydra",
            "Intimidator", "Mauler", "Mayhem", "Monarch", "Nexus", "Rage", "Sovereign", "Scorpion", "Scourge", "Serpent",
            "Terror", "Vendetta", "Warlord", "Wolf", "Nightfall", "Night", "Legacy", "Backstab", "Fire", "Marauder",
            "Nova", "Raider"
            };
            int num = Rnd.Next(0, array.Length);
            empty2 = array[num];
            num = Rnd.Next(0, array2.Length);
            empty3 = array2[num];
            empty = empty2 + " " + empty3;
            if (Rnd.Next(0, 5) < 2 && habitat != null)
            {
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                if (habitat2.Category == HabitatCategoryType.Star && habitat2.Name.Length < 16 && habitat2.Name.Length > 1)
                {
                    string text = habitat2.Name.Substring(1, 1);
                    if (text.ToLower(CultureInfo.InvariantCulture) == text)
                    {
                        empty = ((Rnd.Next(0, 3) != 1) ? (empty3 + " of " + habitat2.Name) : (habitat2.Name + " " + empty3));
                    }
                }
            }
            return empty;
        }

        public string GenerateBlackHoleName()
        {
            string empty = string.Empty;
            string empty2 = string.Empty;
            string empty3 = string.Empty;
            string[] array = new string[9] { "Devil's", "Dark", "Ravenous", "Deadly", "Perilous", "Traitor's", "Wretched", "Devouring", "Destroyer's" };
            string[] array2 = new string[16]
            {
            "Gate", "Vortex", "Whirlpool", "Wheel", "Lair", "Snare", "Desolation", "End", "Mouth", "Cauldron",
            "Pit", "Abyss", "Chasm", "Dungeon", "Inferno", "Void"
            };
            int num = Rnd.Next(0, array.Length);
            empty2 = array[num];
            num = Rnd.Next(0, array2.Length);
            empty3 = array2[num];
            return empty2 + " " + empty3;
        }

        public string GenerateUniqueAgentName(byte raceFamilyId)
        {
            string[] array = null;
            string[] array2 = null;
            if (raceFamilyId >= 0 && _AgentFirstNames.Count > raceFamilyId && _AgentLastNames.Count > raceFamilyId)
            {
                array = _AgentFirstNames[raceFamilyId];
                array2 = _AgentLastNames[raceFamilyId];
            }
            int num = Rnd.Next(0, array.Length);
            int num2 = Rnd.Next(0, array2.Length);
            return array[num] + " " + array2[num2];
        }

        private BuiltObject GenerateUnownedBuiltObjectFromDesign(Design design, string name, Habitat parentHabitat)
        {
            return GenerateUnownedBuiltObjectFromDesign(design, name, parentHabitat, -2000000001.0, -2000000001.0);
        }

        private BuiltObject GenerateUnownedBuiltObjectFromDesign(Design design, string name, Habitat parentHabitat, double x, double y)
        {
            BuiltObject builtObject = new BuiltObject(design, name, this, fullyBuilt: true, doNotAssignEmpire: true);
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                builtObject.Components[i].Status = ComponentStatus.Normal;
            }
            builtObject.BuiltObjectID = GetNextBuiltObjectID();
            builtObject.Empire = null;
            builtObject.Owner = null;
            builtObject.DateBuilt = CurrentStarDate;
            builtObject.ParentHabitat = parentHabitat;
            if (parentHabitat != null)
            {
                double x2;
                double y2;
                if (design.Role == BuiltObjectRole.Base)
                {
                    if (parentHabitat.Category == HabitatCategoryType.Star)
                    {
                        double minimumDistance = parentHabitat.Diameter;
                        if (parentHabitat.Type == HabitatType.BlackHole)
                        {
                            minimumDistance = (double)parentHabitat.Diameter * 0.6;
                        }
                        else if (parentHabitat.Type == HabitatType.SuperNova)
                        {
                            minimumDistance = (double)parentHabitat.Diameter * 0.55;
                        }
                        SelectRelativeParkingPoint(minimumDistance, out x2, out y2);
                    }
                    else
                    {
                        SelectRelativeHabitatSurfacePoint(parentHabitat, out x2, out y2);
                        if (parentHabitat.BasesAtHabitat == null)
                        {
                            parentHabitat.BasesAtHabitat = new BuiltObjectList();
                        }
                        parentHabitat.BasesAtHabitat.Add(builtObject);
                    }
                }
                else if (parentHabitat.Category == HabitatCategoryType.Star)
                {
                    double minimumDistance2 = parentHabitat.Diameter;
                    if (parentHabitat.Type == HabitatType.BlackHole)
                    {
                        minimumDistance2 = (double)parentHabitat.Diameter * 0.6;
                    }
                    SelectRelativeParkingPoint(minimumDistance2, out x2, out y2);
                }
                else
                {
                    SelectRelativeParkingPoint(out x2, out y2);
                }
                builtObject.ParentOffsetX = x2;
                builtObject.ParentOffsetY = y2;
                builtObject.Xpos = parentHabitat.Xpos + x2;
                builtObject.Ypos = parentHabitat.Ypos + y2;
            }
            else
            {
                builtObject.Xpos = x;
                builtObject.Ypos = y;
            }
            builtObject.Heading = SelectRandomHeading();
            builtObject.TargetHeading = builtObject.Heading;
            builtObject.SupportCostFactor = 0.5f;
            if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip)
            {
                if (parentHabitat != null && parentHabitat.Population != null && parentHabitat.Population.DominantRace != null)
                {
                    builtObject.NativeRace = parentHabitat.Population.DominantRace;
                }
                else
                {
                    builtObject.NativeRace = SelectRandomRace(0);
                }
            }
            builtObject.ReDefine();
            builtObject.CurrentFuel = builtObject.FuelCapacity;
            builtObject.CurrentShields = builtObject.ShieldsCapacity;
            BuiltObjects.Add(builtObject);
            int x3 = (int)builtObject.Xpos / IndexSize;
            int y3 = (int)builtObject.Ypos / IndexSize;
            CorrectIndexCoords(ref x3, ref y3);
            BuiltObjectIndex[x3][y3].Add(builtObject);
            Habitat habitat = FastFindNearestSystem(builtObject.Xpos, builtObject.Ypos);
            if (habitat != null)
            {
                double num = CalculateDistance(builtObject.Xpos, builtObject.Ypos, habitat.Xpos, habitat.Ypos);
                if (num < (double)MaxSolarSystemSize + 1000.0)
                {
                    builtObject.NearestSystemStar = habitat;
                }
            }
            builtObject.ReDefine();
            return builtObject;
        }

        private string GenerateRuinName(Habitat habitat, out int pictureRef)
        {
            pictureRef = 0;
            List<int> list = new List<int>();
            string empty = string.Empty;
            string text = string.Empty;
            string text2 = string.Empty;
            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
            Race race = null;
            if (habitat.Population != null && habitat.Population.DominantRace != null)
            {
                race = habitat.Population.DominantRace;
            }
            string[] array = new string[15]
            {
            "Hidden", "Great", "Grand", "Forgotten", "Granite", "Lofty", "High", "Exalted", "Stone", "Secluded",
            "", "", "", "", ""
            };
            empty = array[Rnd.Next(0, array.Length)];
            switch (Rnd.Next(0, 19))
            {
                case 0:
                    text = "Hall";
                    list.Add(0);
                    list.Add(10);
                    list.Add(7);
                    list.Add(8);
                    list.Add(14);
                    list.Add(15);
                    break;
                case 1:
                    text = "Temple";
                    list.Add(1);
                    list.Add(2);
                    list.Add(3);
                    list.Add(9);
                    list.Add(10);
                    break;
                case 2:
                    text = "Pyramid";
                    list.Add(1);
                    list.Add(2);
                    break;
                case 3:
                    text = "Citadel";
                    list.Add(3);
                    list.Add(7);
                    list.Add(8);
                    list.Add(14);
                    list.Add(15);
                    break;
                case 4:
                    text = "Fortress";
                    list.Add(7);
                    list.Add(8);
                    list.Add(14);
                    list.Add(15);
                    break;
                case 5:
                    text = "Tower";
                    list.Add(5);
                    list.Add(6);
                    break;
                case 6:
                    text = "Tomb";
                    list.Add(1);
                    list.Add(2);
                    list.Add(9);
                    break;
                case 7:
                    text = "Sanctuary";
                    list.Add(3);
                    list.Add(9);
                    list.Add(10);
                    break;
                case 8:
                    text = "Library";
                    list.Add(0);
                    list.Add(10);
                    break;
                case 9:
                    text = "Palace";
                    list.Add(3);
                    list.Add(7);
                    list.Add(8);
                    break;
                case 10:
                    text = "Archives";
                    list.Add(0);
                    list.Add(10);
                    break;
                case 11:
                    text = "Monastery";
                    list.Add(7);
                    list.Add(8);
                    list.Add(14);
                    list.Add(15);
                    break;
                case 12:
                    text = "Retreat";
                    list.Add(14);
                    list.Add(15);
                    break;
                case 13:
                    text = "Nexus";
                    list.Add(7);
                    list.Add(8);
                    list.Add(13);
                    break;
                case 14:
                    text = "Chamber";
                    list.Add(1);
                    list.Add(2);
                    list.Add(9);
                    break;
                case 15:
                    text = "Pillar";
                    list.Add(5);
                    list.Add(6);
                    break;
                case 16:
                    text = "Obelisk";
                    list.Add(5);
                    list.Add(6);
                    break;
                case 17:
                    text = "Gate";
                    list.Add(4);
                    break;
                case 18:
                    text = "City";
                    list.Add(13);
                    break;
            }
            switch (Rnd.Next(0, 5))
            {
                case 0:
                    text2 = "of " + habitat2.Name;
                    break;
                case 1:
                case 2:
                    text2 = ((race == null) ? ("of " + habitat2.Name) : ("of the " + race.Name + "s"));
                    break;
                case 3:
                case 4:
                    text2 = (string.IsNullOrEmpty(empty) ? ("of " + habitat2.Name) : string.Empty);
                    break;
            }
            List<int> list2 = new List<int>();
            List<int> list3 = new List<int>();
            List<int> list4 = new List<int>();
            list2.Add(15);
            list3.Add(2);
            list3.Add(10);
            list4.Add(1);
            list4.Add(8);
            list4.Add(9);
            if (habitat.Type == HabitatType.MarshySwamp || habitat.Type == HabitatType.Desert || habitat.Type == HabitatType.Volcanic || habitat.Type == HabitatType.Ocean)
            {
                foreach (int item in list2)
                {
                    if (list.Contains(item))
                    {
                        list.Remove(item);
                    }
                }
            }
            if (habitat.Type == HabitatType.MarshySwamp || habitat.Type == HabitatType.Continental || habitat.Type == HabitatType.Ice || habitat.Type == HabitatType.BarrenRock || habitat.Type == HabitatType.Ocean)
            {
                foreach (int item2 in list3)
                {
                    if (list.Contains(item2))
                    {
                        list.Remove(item2);
                    }
                }
            }
            if (habitat.Type == HabitatType.Desert || habitat.Type == HabitatType.Volcanic || habitat.Type == HabitatType.Ice || habitat.Type == HabitatType.BarrenRock)
            {
                foreach (int item3 in list4)
                {
                    if (list.Contains(item3))
                    {
                        list.Remove(item3);
                    }
                }
            }
            if (list.Count > 0)
            {
                pictureRef = list[Rnd.Next(0, list.Count)];
            }
            else
            {
                pictureRef = 0;
            }
            string text3 = string.Empty;
            if (!string.IsNullOrEmpty(empty))
            {
                text3 = text3 + empty + " ";
            }
            text3 += text;
            if (!string.IsNullOrEmpty(text2))
            {
                text3 = text3 + " " + text2;
            }
            return text3;
        }

        public void ObtainRandomGalaxyCoordinates(out double x, out double y)
        {
            x = Rnd.NextDouble() * (double)SizeX;
            y = Rnd.NextDouble() * (double)SizeY;
        }

        public void ObtainRandomGalaxyCoordinatesFromPoint(double startX, double startY, double distance, out double x, out double y)
        {
            int num = 0;
            x = -1.0;
            y = -1.0;
            while ((x < 0.0 || x >= (double)SizeX || y < 0.0 || y >= (double)SizeY) && num < 200)
            {
                double num2 = Rnd.NextDouble() * Math.PI * 2.0;
                double num3 = Math.Cos(num2) * distance;
                double num4 = Math.Sin(num2) * distance;
                x = startX + num3;
                y = startY + num4;
                num++;
            }
        }

        private void ObtainRandomGalaxyCoordinates(double radiusFromCenterMinimum, double radiusFromCenterMaximum, out double x, out double y)
        {
            double num = (double)SizeX / 2.0;
            double num2 = (double)SizeY / 2.0;
            double num3 = (double)SizeX / 2.0;
            double num4 = num3 * radiusFromCenterMinimum;
            double num5 = Rnd.NextDouble() * num3 * (radiusFromCenterMaximum - radiusFromCenterMinimum);
            double num6 = num4 + num5;
            double num7 = Rnd.NextDouble() * Math.PI * 2.0;
            double num8 = Math.Cos(num7) * num6;
            double num9 = Math.Sin(num7) * num6;
            x = num + num8;
            y = num2 + num9;
        }

        private void ClearCompletedPlanetDestroyerProjects()
        {
            GalaxyLocationList galaxyLocationList = new GalaxyLocationList();
            for (int i = 0; i < GalaxyLocations.Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocations[i];
                if (galaxyLocation.Type == GalaxyLocationType.PlanetDestroyer && galaxyLocation.RelatedBuiltObject != null && (galaxyLocation.RelatedBuiltObject.UnbuiltComponentCount == 0 || galaxyLocation.RelatedBuiltObject.HasBeenDestroyed))
                {
                    galaxyLocationList.Add(galaxyLocation);
                }
            }
            foreach (GalaxyLocation item in galaxyLocationList)
            {
                for (int j = 0; j < Empires.Count; j++)
                {
                    Empire empire = Empires[j];
                    if (empire.KnownGalaxyLocations.Contains(item))
                    {
                        empire.KnownGalaxyLocations.Remove(item);
                    }
                }
                RemoveGalaxyLocationIndex(item);
                GalaxyLocations.Remove(item);
            }
        }

        private void ClearEmptyDebrisFields()
        {
            GalaxyLocationList galaxyLocationList = new GalaxyLocationList();
            for (int i = 0; i < GalaxyLocations.Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocations[i];
                if (galaxyLocation.Type == GalaxyLocationType.DebrisField)
                {
                    BuiltObjectList builtObjectList = FindAbandonedShipsInDebrisField(galaxyLocation);
                    if (builtObjectList.Count == 0)
                    {
                        galaxyLocationList.Add(galaxyLocation);
                    }
                }
            }
            foreach (GalaxyLocation item in galaxyLocationList)
            {
                for (int j = 0; j < Empires.Count; j++)
                {
                    Empire empire = Empires[j];
                    if (empire.KnownGalaxyLocations.Contains(item))
                    {
                        empire.KnownGalaxyLocations.Remove(item);
                    }
                }
                RemoveGalaxyLocationIndex(item);
                GalaxyLocations.Remove(item);
            }
        }

        public bool CheckShouldExplore(Empire empire, Habitat habitat)
        {
            if (habitat.Ruin != null && (CheckRuinsHaveBenefit(habitat.Ruin, empire) || (empire == PlayerEmpire && (habitat.Ruin.StoryClueLevel >= 0 || !habitat.Ruin.PlayerEmpireEncountered))))
            {
                return true;
            }
            if (empire.ResourceMap != null && empire.ResourceMap.CheckResourcesKnown(habitat))
            {
                return false;
            }
            return true;
        }

        public bool CheckBuiltObjectScanned(BuiltObject builtObject)
        {
            if (builtObject.CurrentSpeed <= (float)builtObject.TopSpeed)
            {
                BuiltObjectList builtObjectsAtLocation = GetBuiltObjectsAtLocation(builtObject.Xpos, builtObject.Ypos, 1000);
                for (int i = 0; i < builtObjectsAtLocation.Count; i++)
                {
                    BuiltObject builtObject2 = builtObjectsAtLocation[i];
                    if (builtObject2 != null && builtObject2.Empire == PlayerEmpire && builtObject2.SensorTraceScannerRange > 0 && builtObject2.SensorTraceScannerPower > builtObject.SensorTraceScannerJamming)
                    {
                        double num = CalculateDistance(builtObject.Xpos, builtObject.Ypos, builtObject2.Xpos, builtObject2.Ypos);
                        if (num < (double)builtObject2.SensorTraceScannerRange)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public FighterList GetFightersForBuiltObjects(BuiltObjectList builtObjects)
        {
            FighterList fighterList = new FighterList();
            for (int i = 0; i < builtObjects.Count; i++)
            {
                BuiltObject builtObject = builtObjects[i];
                if (builtObject != null && builtObject.Fighters != null && builtObject.Fighters.Count > 0)
                {
                    fighterList.AddRange(ListHelper.ToArrayThreadSafe(builtObject.Fighters));
                }
            }
            return fighterList;
        }

        public BuiltObjectList SortBuiltObjectsByDistance(double x, double y, BuiltObjectList builtObjects)
        {
            if (builtObjects != null)
            {
                for (int i = 0; i < builtObjects.Count; i++)
                {
                    double sortTag = CalculateDistanceSquared(x, y, builtObjects[i].Xpos, builtObjects[i].Ypos);
                    builtObjects[i].SortTag = sortTag;
                }
                builtObjects.Sort();
            }
            return builtObjects;
        }

        public BuiltObject FindNearestBuiltObjectInSet(double x, double y, BuiltObjectList builtObjects)
        {
            BuiltObject result = null;
            double num = double.MaxValue;
            if (builtObjects != null)
            {
                for (int i = 0; i < builtObjects.Count; i++)
                {
                    BuiltObject builtObject = builtObjects[i];
                    if (builtObject != null)
                    {
                        double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        if (num2 < num)
                        {
                            num = num2;
                            result = builtObject;
                        }
                    }
                }
            }
            return result;
        }

        public int CalculateNearbyOverallStrength(double x, double y, Empire empire, double range)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            int x2 = (int)x / IndexSize;
            int y2 = (int)y / IndexSize;
            CorrectIndexCoords(ref x2, ref y2);
            builtObjectList.AddRange(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[x2][y2]));
            return CalculateNearbyOverallStrength(x, y, empire, range, builtObjectList);
        }

        public int CalculateNearbyOverallStrength(double x, double y, Empire empire, double range, BuiltObjectList builtObjects)
        {
            int num = 0;
            double num2 = range * range;
            for (int i = 0; i < builtObjects.Count; i++)
            {
                BuiltObject builtObject = builtObjects[i];
                if (builtObject == null || builtObject.HasBeenDestroyed || builtObject.Empire != empire || builtObject.BuiltAt != null)
                {
                    continue;
                }
                if (builtObject.Role == BuiltObjectRole.Base)
                {
                    double num3 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num3 < num2)
                    {
                        num += builtObject.CalculateOverallStrengthFactor();
                    }
                }
                else
                {
                    if (builtObject.Role != BuiltObjectRole.Military)
                    {
                        continue;
                    }
                    bool flag = true;
                    BuiltObjectMission mission = builtObject.Mission;
                    if (mission != null && (mission.Type == BuiltObjectMissionType.Escape || mission.Type == BuiltObjectMissionType.Refuel || mission.Type == BuiltObjectMissionType.Repair || mission.Type == BuiltObjectMissionType.Retire || mission.Type == BuiltObjectMissionType.Retrofit))
                    {
                        flag = false;
                    }
                    if (flag)
                    {
                        double num4 = num2;
                        if (builtObject.WarpSpeed >= 0)
                        {
                            num4 = 2304000000.0;
                        }
                        double num5 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        if (num5 < num4)
                        {
                            num += builtObject.CalculateOverallStrengthFactor();
                        }
                    }
                }
            }
            return num;
        }

        public BuiltObjectList GetNearbyBuiltObjects(double x, double y, double range)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            BuiltObjectList builtObjectsAtLocation = GetBuiltObjectsAtLocation(x, y, (int)range);
            double num = range * range;
            for (int i = 0; i < builtObjectsAtLocation.Count; i++)
            {
                BuiltObject builtObject = builtObjectsAtLocation[i];
                if (builtObject != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        builtObjectList.Add(builtObject);
                    }
                }
            }
            return builtObjectList;
        }

        public List<BuiltObject[]> GetBuiltObjectsAtLocationByArrays(double x, double y, int range)
        {
            List<BuiltObject[]> list = new List<BuiltObject[]>();
            int x2 = (int)x / IndexSize;
            int y2 = (int)y / IndexSize;
            CorrectIndexCoords(ref x2, ref y2);
            list.Add(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[x2][y2]));
            int nearestX;
            int nearestY;
            int num = DetermineClosestIndexEdgesCustom((int)x, (int)y, x2, x2, y2, y2, out nearestX, out nearestY);
            if (num < range)
            {
                int num2 = x2 + nearestX;
                int num3 = y2 + nearestY;
                if (num3 < IndexMaxY && num3 >= 0)
                {
                    list.Add(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[x2][num3]));
                }
                if (num2 < IndexMaxX && num2 >= 0)
                {
                    list.Add(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[num2][y2]));
                }
                if (num2 < IndexMaxX && num2 >= 0 && num3 < IndexMaxY && num3 >= 0)
                {
                    list.Add(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[num2][num3]));
                }
            }
            return list;
        }

        public BuiltObjectList GetBuiltObjectsAtLocation(double x, double y, int range)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            int x2 = (int)x / IndexSize;
            int y2 = (int)y / IndexSize;
            CorrectIndexCoords(ref x2, ref y2);
            builtObjectList.AddRange(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[x2][y2]));
            int nearestX;
            int nearestY;
            int num = DetermineClosestIndexEdgesCustom((int)x, (int)y, x2, x2, y2, y2, out nearestX, out nearestY);
            if (num < range)
            {
                int num2 = x2 + nearestX;
                int num3 = y2 + nearestY;
                if (num3 < IndexMaxY && num3 >= 0)
                {
                    builtObjectList.AddRange(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[x2][num3]));
                }
                if (num2 < IndexMaxX && num2 >= 0)
                {
                    builtObjectList.AddRange(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[num2][y2]));
                }
                if (num2 < IndexMaxX && num2 >= 0 && num3 < IndexMaxY && num3 >= 0)
                {
                    builtObjectList.AddRange(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[num2][num3]));
                }
            }
            return builtObjectList;
        }

        public BuiltObjectList GetBuiltObjectsInRectangle(int x, int y, int width, int height)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            int x2 = x / IndexSize;
            int y2 = y / IndexSize;
            CorrectIndexCoords(ref x2, ref y2);
            int x3 = (x + width) / IndexSize;
            int y3 = (y + height) / IndexSize;
            CorrectIndexCoords(ref x3, ref y3);
            for (int i = x2; i <= x3; i++)
            {
                for (int j = y2; j <= y3; j++)
                {
                    builtObjectList.AddRange(ListHelper.ToArrayThreadSafe(BuiltObjectIndex[i][j]));
                }
            }
            return builtObjectList;
        }

        public HabitatList GetHabitatsAtLocation(double x, double y, int range)
        {
            int x2 = (int)x / IndexSize;
            int y2 = (int)y / IndexSize;
            CorrectIndexCoords(ref x2, ref y2);
            HabitatList habitatList = HabitatIndex[x2][y2];
            int nearestX;
            int nearestY;
            int num = DetermineClosestIndexEdgesCustom((int)x, (int)y, x2, x2, y2, y2, out nearestX, out nearestY);
            if (num < range)
            {
                int num2 = x2 + nearestX;
                int num3 = y2 + nearestY;
                habitatList = new HabitatList();
                habitatList.AddRange(HabitatIndex[x2][y2]);
                if (num3 < IndexMaxY && num3 >= 0)
                {
                    habitatList.AddRange(HabitatIndex[x2][num3]);
                }
                if (num2 < IndexMaxX && num2 >= 0)
                {
                    habitatList.AddRange(HabitatIndex[num2][y2]);
                }
                if (num2 < IndexMaxX && num2 >= 0 && num3 < IndexMaxY && num3 >= 0)
                {
                    habitatList.AddRange(HabitatIndex[num2][num3]);
                }
            }
            return habitatList;
        }

        public void RebuildIndexes()
        {
            RebuildHabitatIndexes();
            RebuildSystemIndexes();
            RebuildGalaxyLocationIndexes();
            RebuildBuiltObjectIndexes();
        }

        public void RebuildBuiltObjectIndexes()
        {
            BuiltObjectIndex = new BuiltObjectList[IndexMaxX][];
            for (int i = 0; i < IndexMaxX; i++)
            {
                BuiltObjectIndex[i] = new BuiltObjectList[IndexMaxY];
                for (int j = 0; j < BuiltObjectIndex[i].Length; j++)
                {
                    BuiltObjectIndex[i][j] = new BuiltObjectList();
                }
            }
            for (int k = 0; k < BuiltObjects.Count; k++)
            {
                BuiltObject builtObject = BuiltObjects[k];
                if (builtObject != null && !builtObject.HasBeenDestroyed)
                {
                    GalaxyIndex galaxyIndex = ResolveIndex(builtObject.Xpos, builtObject.Ypos);
                    BuiltObjectIndex[galaxyIndex.X][galaxyIndex.Y].Add(builtObject);
                }
            }
        }

        public void RebuildGalaxyLocationIndexes()
        {
            GalaxyLocationIndex = new GalaxyLocationList[IndexMaxX][];
            for (int i = 0; i < IndexMaxX; i++)
            {
                GalaxyLocationIndex[i] = new GalaxyLocationList[IndexMaxY];
                for (int j = 0; j < GalaxyLocationIndex[i].Length; j++)
                {
                    GalaxyLocationIndex[i][j] = new GalaxyLocationList();
                }
            }
            for (int k = 0; k < GalaxyLocations.Count; k++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocations[k];
                if (galaxyLocation == null)
                {
                    continue;
                }
                GalaxyIndex galaxyIndex = ResolveIndex(galaxyLocation.Xpos, galaxyLocation.Ypos);
                GalaxyIndex galaxyIndex2 = ResolveIndex(galaxyLocation.Xpos + galaxyLocation.Width, galaxyLocation.Ypos + galaxyLocation.Height);
                for (int l = galaxyIndex.X; l <= galaxyIndex2.X; l++)
                {
                    for (int m = galaxyIndex.Y; m <= galaxyIndex2.Y; m++)
                    {
                        if (!GalaxyLocationIndex[l][m].Contains(galaxyLocation))
                        {
                            GalaxyLocationIndex[l][m].Add(galaxyLocation);
                        }
                    }
                }
            }
        }

        public void RebuildSystemIndexes()
        {
            SystemsIndex = new SystemInfoList[IndexMaxX][];
            for (int i = 0; i < IndexMaxX; i++)
            {
                SystemsIndex[i] = new SystemInfoList[IndexMaxY];
                for (int j = 0; j < SystemsIndex[i].Length; j++)
                {
                    SystemsIndex[i][j] = new SystemInfoList();
                }
            }
            for (int k = 0; k < Systems.Count; k++)
            {
                SystemInfo systemInfo = Systems[k];
                if (systemInfo != null && systemInfo.SystemStar != null)
                {
                    GalaxyIndex galaxyIndex = ResolveIndex(systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                    SystemsIndex[galaxyIndex.X][galaxyIndex.Y].Add(systemInfo);
                }
            }
        }

        public void RebuildHabitatIndexes()
        {
            HabitatIndex = new HabitatList[IndexMaxX][];
            for (int i = 0; i < IndexMaxX; i++)
            {
                HabitatIndex[i] = new HabitatList[IndexMaxY];
                for (int j = 0; j < HabitatIndex[i].Length; j++)
                {
                    HabitatIndex[i][j] = new HabitatList();
                }
            }
            for (int k = 0; k < Habitats.Count; k++)
            {
                Habitat habitat = Habitats[k];
                if (habitat != null && !habitat.HasBeenDestroyed)
                {
                    GalaxyIndex galaxyIndex = ResolveIndex(habitat.Xpos, habitat.Ypos);
                    HabitatIndex[galaxyIndex.X][galaxyIndex.Y].Add(habitat);
                }
            }
        }

        public static string OrderedNumberDescription(int number)
        {
            string text = number.ToString();
            switch (text.Substring(text.Length - 1, 1))
            {
                case "0":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    text += "th";
                    break;
                case "1":
                    text = ((number % 100 != 11) ? (text + "st") : (text + "th"));
                    break;
                case "2":
                    text = ((number % 100 != 12) ? (text + "nd") : (text + "th"));
                    break;
                case "3":
                    text = ((number % 100 != 13) ? (text + "rd") : (text + "th"));
                    break;
            }
            return text;
        }

        public EmpirePriorityList DetermineOrderedKnownEmpires(Empire empire, EmpireComparisonType comparisonType)
        {
            EmpireList empireList = new EmpireList();
            empireList.Add(empire);
            foreach (DiplomaticRelation diplomaticRelation in empire.DiplomaticRelations)
            {
                if (diplomaticRelation.Type != 0)
                {
                    empireList.Add(diplomaticRelation.OtherEmpire);
                }
            }
            EmpirePriorityList empirePriorityList = new EmpirePriorityList();
            foreach (Empire item2 in empireList)
            {
                double priority = 0.0;
                switch (comparisonType)
                {
                    case EmpireComparisonType.Population:
                        priority = item2.TotalPopulation;
                        break;
                    case EmpireComparisonType.Territory:
                        priority = item2.Colonies.Count;
                        break;
                    case EmpireComparisonType.Economy:
                        priority = item2.PrivateAnnualRevenue;
                        break;
                    case EmpireComparisonType.StrategicValue:
                        priority = item2.TotalColonyStrategicValue;
                        break;
                    case EmpireComparisonType.MilitaryStrength:
                        priority = item2.MilitaryPotency;
                        break;
                }
                EmpirePriority item = new EmpirePriority(item2, priority);
                empirePriorityList.Add(item);
            }
            empirePriorityList.Sort();
            empirePriorityList.Reverse();
            return empirePriorityList;
        }

        public BuiltObjectList FindAbandonedShipsInDebrisField(GalaxyLocation location)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            if (location != null && location.Type == GalaxyLocationType.DebrisField)
            {
                double num = (double)location.Width / 2.0;
                double num2 = (double)location.Height / 2.0;
                int range = (int)Math.Max((double)location.Width / 2.0, (double)location.Height / 2.0);
                BuiltObjectList builtObjectsAtLocation = GetBuiltObjectsAtLocation((double)location.Xpos + num, (double)location.Ypos + num2, range);
                double num3 = (double)location.Xpos - (double)location.Width / 2.0;
                double num4 = (double)location.Xpos + (double)location.Width / 2.0;
                double num5 = (double)location.Ypos - (double)location.Height / 2.0;
                double num6 = (double)location.Ypos + (double)location.Height / 2.0;
                for (int i = 0; i < builtObjectsAtLocation.Count; i++)
                {
                    BuiltObject builtObject = builtObjectsAtLocation[i];
                    if (builtObject != null && builtObject.Empire == null && builtObject.Xpos > num3 && builtObject.Xpos < num4 && builtObject.Ypos > num5 && builtObject.Ypos < num6 && !builtObjectList.Contains(builtObject))
                    {
                        builtObjectList.Add(builtObject);
                    }
                }
            }
            return builtObjectList;
        }

        public string GeneratePlanetDestroyerName()
        {
            string[] array = new string[4] { "World Destroyer", "Devastation Moon", "Desolation Moon", "World Annihilator" };
            return array[Rnd.Next(0, array.Length)];
        }

        public void GeneratePlanetDestroyer()
        {
            Habitat habitat = FindLonelyHabitat();
            string name = GeneratePlanetDestroyerName();
            if (habitat == null)
            {
                return;
            }
            BuiltObject builtObject = GenerateIncompletePlanetDestroyer(name, habitat);
            BuiltObject builtObject2 = null;
            Design design = null;
            Design design2 = null;
            Design design3 = null;
            if (Empires.Count > 0)
            {
                int index = Rnd.Next(0, Empires.Count);
                double techAdvanceAmount = 6.0;
                design = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate), techAdvanceAmount);
                design2 = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer), techAdvanceAmount);
                design3 = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser), techAdvanceAmount);
            }
            else if (PirateEmpires.Count > 0)
            {
                int index2 = Rnd.Next(0, PirateEmpires.Count);
                double techAdvanceAmount2 = 6.0;
                design = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate), techAdvanceAmount2);
                design2 = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer), techAdvanceAmount2);
                design3 = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser), techAdvanceAmount2);
            }
            if (design != null && design2 != null && design3 != null)
            {
                design.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.ShakturiFamily, design.SubRole, aged: false);
                design2.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.ShakturiFamily, design2.SubRole, aged: false);
                design3.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.ShakturiFamily, design3.SubRole, aged: false);
                builtObject2 = GenerateUnownedShipAtLocation(design, habitat.Xpos, habitat.Ypos);
                DamageBuiltObjectComponents(builtObject2, 0.5);
                builtObject2 = GenerateUnownedShipAtLocation(design, habitat.Xpos, habitat.Ypos);
                DamageBuiltObjectComponents(builtObject2, 0.7);
                builtObject2 = GenerateUnownedShipAtLocation(design, habitat.Xpos, habitat.Ypos);
                DamageBuiltObjectComponents(builtObject2, 0.3);
                builtObject2 = GenerateUnownedShipAtLocation(design2, habitat.Xpos, habitat.Ypos);
                builtObject2 = GenerateUnownedShipAtLocation(design2, habitat.Xpos, habitat.Ypos);
                DamageBuiltObjectComponents(builtObject2, 0.6);
                builtObject2 = GenerateUnownedShipAtLocation(design3, habitat.Xpos, habitat.Ypos);
                DamageBuiltObjectComponents(builtObject2, 0.3);
                GalaxyLocation galaxyLocation = new GalaxyLocation(string.Format(TextResolver.GetText("X Project"), builtObject.Name), GalaxyLocationType.PlanetDestroyer, builtObject.Xpos - 600.0, builtObject.Ypos - 600.0, 1200.0, 1200.0, -1);
                galaxyLocation.RelatedBuiltObject = builtObject;
                int amount = Rnd.Next(5, 8);
                galaxyLocation.RelatedCreatures = GenerateCreaturesAtLocation(CreatureType.RockSpaceSlug, amount, builtObject.Xpos, builtObject.Ypos, 350, 280);
                CreatureList creatureList = GenerateCreaturesAtLocation(CreatureType.RockSpaceSlug, 1, builtObject.Xpos, builtObject.Ypos, 300, 150);
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                if (creatureList != null && creatureList.Count > 0 && habitat2 != null)
                {
                    creatureList[0].Name = string.Format(TextResolver.GetText("Guardian of X"), habitat2.Name);
                    creatureList[0].Size = Rnd.Next(420, 520);
                    creatureList[0].MaxSize = 620;
                    creatureList[0].AttackStrength = (int)((double)creatureList[0].Size / 20.0);
                    creatureList[0].DamageKillThreshhold = (int)((double)creatureList[0].Size * 1.1);
                    creatureList[0].SetMovementSpeed(11);
                    galaxyLocation.RelatedCreatures.AddRange(creatureList);
                }
                galaxyLocation.ShowName = true;
                _GalaxyLocations.Add(galaxyLocation);
                AddGalaxyLocationIndex(galaxyLocation);
            }
        }

        public BuiltObject GenerateUnownedShipAtLocation(Design design, double x, double y)
        {
            string name = SelectUniqueBuiltObjectName(design, null);
            SelectRelativeParkingPoint(out var x2, out var y2);
            BuiltObject builtObject = GenerateUnownedBuiltObjectFromDesign(design, name, null, x + x2, y + y2);
            builtObject.IsAutoControlled = true;
            builtObject.CurrentFuel = (double)builtObject.FuelCapacity * 0.1 + Rnd.NextDouble() * 0.8 * (double)builtObject.FuelCapacity;
            builtObject.PlayerEmpireEncounterAction = BuiltObjectEncounterAction.Notify;
            return builtObject;
        }

        public BuiltObject GenerateUnownedShipAtHabitat(Design design, Habitat parentHabitat)
        {
            string name = SelectUniqueBuiltObjectName(design, null);
            BuiltObject builtObject = GenerateUnownedBuiltObjectFromDesign(design, name, parentHabitat);
            builtObject.IsAutoControlled = true;
            builtObject.CurrentFuel = (double)builtObject.FuelCapacity * 0.1 + Rnd.NextDouble() * 0.8 * (double)builtObject.FuelCapacity;
            return builtObject;
        }

        public void GenerateRavagerFleet()
        {
        }

        public void GenerateDMZ()
        {
        }

        public void GenerateDebrisFieldLarge()
        {
            int shipCount = Rnd.Next(15, 23);
            GenerateDebrisField(shipCount);
        }

        public void GenerateDebrisFieldSmall()
        {
            int shipCount = Rnd.Next(6, 10);
            GenerateDebrisField(shipCount);
        }

        private void GenerateDebrisField(int shipCount)
        {
            Habitat habitat = FindLonelyHabitat();
            if (habitat != null)
            {
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                string name = string.Format(TextResolver.GetText("X Debris Field"), habitat2.Name);
                SelectRelativeParkingPoint(495.0, out var x, out var y);
                GenerateDebrisField(habitat.Xpos + x, habitat.Ypos + y, name, shipCount);
            }
        }

        public void GenerateDebrisField(double x, double y, string name, int shipCount)
        {
            if (string.IsNullOrEmpty(name))
            {
                name = string.Format(TextResolver.GetText("X Debris Field"), string.Empty);
            }
            double width = Rnd.Next(1100, 1500);
            double height = Rnd.Next(1100, 1500);
            GalaxyLocation galaxyLocation = new GalaxyLocation(name, GalaxyLocationType.DebrisField, x, y, width, height, -1);
            galaxyLocation.ShowName = true;
            GalaxyLocations.Add(galaxyLocation);
            AddGalaxyLocationIndex(galaxyLocation);
            int family = Rnd.Next(0, 4);
            Design design = null;
            Design design2 = null;
            Design design3 = null;
            Design design4 = null;
            Design design5 = null;
            Design design6 = null;
            if (Empires.Count > 0)
            {
                int index = Rnd.Next(0, Empires.Count);
                double techAdvanceAmount = 3.0;
                design = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate), techAdvanceAmount);
                design2 = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer), techAdvanceAmount);
                design3 = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser), techAdvanceAmount);
                design4 = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.CapitalShip), techAdvanceAmount);
                design5 = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.TroopTransport), techAdvanceAmount);
                design6 = Empires[index].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.CapitalShip), techAdvanceAmount);
            }
            else if (PirateEmpires.Count > 0)
            {
                int index2 = Rnd.Next(0, PirateEmpires.Count);
                double techAdvanceAmount2 = 3.0;
                design = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate), techAdvanceAmount2);
                design2 = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer), techAdvanceAmount2);
                design3 = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser), techAdvanceAmount2);
                design4 = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.CapitalShip), techAdvanceAmount2);
                design5 = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.TroopTransport), techAdvanceAmount2);
                design6 = PirateEmpires[index2].GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.CapitalShip), techAdvanceAmount2);
            }
            for (int i = 0; i < shipCount; i++)
            {
                Design design7 = null;
                switch (Rnd.Next(0, 15))
                {
                    case 0:
                    case 1:
                        design7 = design;
                        break;
                    case 2:
                    case 3:
                    case 4:
                        design7 = design2;
                        break;
                    case 5:
                    case 6:
                    case 7:
                        design7 = design3;
                        break;
                    case 8:
                    case 9:
                    case 10:
                        design7 = design4;
                        break;
                    case 11:
                    case 12:
                        design7 = design5;
                        break;
                    case 13:
                    case 14:
                        design7 = design6;
                        break;
                }
                if (design7 != null)
                {
                    design7.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(family, design7.SubRole, aged: false);
                    string name2 = SelectUniqueBuiltObjectName(design7, null);
                    SelectRelativePoint((double)Math.Min(galaxyLocation.Width, galaxyLocation.Height) / 2.0, out var x2, out var y2);
                    BuiltObject builtObject = GenerateUnownedBuiltObjectFromDesign(design7, name2, null, (double)(galaxyLocation.Xpos + galaxyLocation.Width / 2f) + x2, (double)(galaxyLocation.Ypos + galaxyLocation.Height / 2f) + y2);
                    builtObject.IsAutoControlled = true;
                    builtObject.PlayerEmpireEncounterAction = BuiltObjectEncounterAction.Notify;
                    int num = Rnd.Next(5, builtObject.Components.Count - 1);
                    for (int j = 0; j < num; j++)
                    {
                        int index3 = Rnd.Next(0, builtObject.Components.Count);
                        builtObject.Components[index3].Status = ComponentStatus.Damaged;
                    }
                    builtObject.ReDefine();
                    builtObject.CurrentFuel = (double)builtObject.FuelCapacity * 0.2 + Rnd.NextDouble() * 0.7 * (double)builtObject.FuelCapacity;
                    galaxyLocation.RelatedBuiltObject = builtObject;
                }
            }
            if (AllowGiantKaltorGeneration)
            {
                int amount = Math.Max(5, (int)((double)shipCount / 3.0));
                galaxyLocation.RelatedCreatures = GenerateCreaturesAtLocation(CreatureType.Kaltor, amount, (double)galaxyLocation.Xpos + (double)galaxyLocation.Width / 2.0, (double)galaxyLocation.Ypos + (double)galaxyLocation.Height / 2.0, (int)((double)galaxyLocation.Width / 2.0) + 150, (int)((double)galaxyLocation.Width / 2.0) - 50);
            }
        }

        private bool CheckAllStoryCluesUsed()
        {
            foreach (bool item in StoryClueUsed)
            {
                if (!item)
                {
                    return false;
                }
            }
            return true;
        }

        public int SelectUnusedStoryClue()
        {
            int num = 0;
            bool condition = true;
            int iterationCount = 0;
            while (ConditionCheckLimit(condition, 50, ref iterationCount))
            {
                num++;
                if (num < StoryClueUsed.Count)
                {
                    condition = StoryClueUsed[num];
                    if (StoryClueLocations.Count > num && StoryClueLocations[num].HasBeenDestroyed)
                    {
                        condition = true;
                    }
                }
                else
                {
                    num = -1;
                    condition = false;
                }
            }
            return num;
        }

        public bool CheckStoryLocationHintExists()
        {
            if (StoryCluesEnabled && !CheckAllStoryCluesUsed())
            {
                int num = SelectUnusedStoryClue();
                if (num >= 0)
                {
                    return true;
                }
            }
            return false;
        }

        public string CheckForStoryLocationHint()
        {
            string result = string.Empty;
            if (StoryCluesEnabled && !CheckAllStoryCluesUsed())
            {
                int num = SelectUnusedStoryClue();
                if (num >= 0)
                {
                    StellarObject stellarObject = StoryClueLocations[num];
                    if (!stellarObject.HasBeenDestroyed)
                    {
                        result = string.Format(TextResolver.GetText("coordinates X,Y"), stellarObject.Xpos.ToString("0,K"), stellarObject.Ypos.ToString("0,K"));
                        result = result + ", " + GenerateLocationDescription(stellarObject.Xpos, stellarObject.Ypos, prefixWithA: true);
                        PlayerEmpire.AddLocationHint(new Point((int)stellarObject.Xpos, (int)stellarObject.Ypos));
                    }
                }
            }
            return result;
        }

        public string GenerateIndependentColonyStoryClue(Habitat colony)
        {
            string result = string.Empty;
            int num = SelectUnusedStoryClue();
            num--;
            List<int> list = new List<int>();
            list.Add(0);
            list.Add(0);
            list.Add(1);
            list.Add(1);
            List<int> list2 = new List<int>();
            for (int i = 0; i < list.Count; i++)
            {
                if (list[i] <= num && !StorySecondaryClueUsed[i])
                {
                    list2.Add(i);
                }
            }
            int num2 = -1;
            if (list2.Count > 0)
            {
                int index = Rnd.Next(0, list2.Count);
                StorySecondaryClueUsed[list2[index]] = true;
                num2 = list2[index];
            }
            if (num2 >= 0)
            {
                result = GenerateSecondaryStoryClue(num2, colony);
            }
            return result;
        }

        public int SelectUnusedSecondaryStoryClueIndex()
        {
            int result = -1;
            if (StoryDistantWorldsEnabled)
            {
                int num = SelectUnusedStoryClue();
                if (num < 0)
                {
                    num = 6;
                }
                num--;
                List<int> list = new List<int>();
                list.Add(0);
                list.Add(0);
                list.Add(1);
                list.Add(1);
                list.Add(2);
                list.Add(3);
                list.Add(4);
                list.Add(4);
                list.Add(5);
                List<int> list2 = new List<int>();
                for (int i = 4; i < list.Count; i++)
                {
                    if (list[i] <= num && !StorySecondaryClueUsed[i])
                    {
                        list2.Add(i);
                    }
                }
                if (list2.Count > 0)
                {
                    int index = Rnd.Next(0, list2.Count);
                    result = list2[index];
                }
            }
            return result;
        }

        public string GenerateBuiltObjectStoryClue(BuiltObject builtObject)
        {
            string result = string.Empty;
            int num = SelectUnusedSecondaryStoryClueIndex();
            if (num >= 0)
            {
                StorySecondaryClueUsed[num] = true;
                result = GenerateSecondaryStoryClue(num, builtObject);
            }
            return result;
        }

        public string GenerateMajorStoryItem(int storyLevel)
        {
            string text = string.Empty;
            switch (storyLevel)
            {
                case 0:
                    text += TextResolver.GetText("MajorStoryEvent1");
                    break;
                case 1:
                    text += TextResolver.GetText("MajorStoryEvent2");
                    break;
                case 2:
                    text += TextResolver.GetText("MajorStoryEvent3");
                    break;
                case 3:
                    text += TextResolver.GetText("MajorStoryEvent4");
                    break;
                case 4:
                    text += TextResolver.GetText("MajorStoryEvent5");
                    break;
            }
            return text;
        }

        public string GenerateMajorStoryVictoryMessage(GameEndOutcome outcome)
        {
            string text = string.Empty;
            switch (outcome)
            {
                case GameEndOutcome.Victory:
                    text += TextResolver.GetText("ShakturiPlayerVictory");
                    break;
                case GameEndOutcome.Defeat:
                    text += TextResolver.GetText("ShakturiPlayerDefeat");
                    break;
            }
            return text;
        }

        private string GenerateSecondaryStoryClue(int selectionValue, object clueLocation)
        {
            string result = string.Empty;
            string text = TextResolver.GetText("SecondaryStoryClue1");
            string text2 = TextResolver.GetText("SecondaryStoryClue2");
            string text3 = TextResolver.GetText("SecondaryStoryClue3");
            string text4 = TextResolver.GetText("SecondaryStoryClue4");
            string text5 = TextResolver.GetText("SecondaryStoryClue5");
            string text6 = TextResolver.GetText("SecondaryStoryClue6");
            string text7 = TextResolver.GetText("SecondaryStoryClue7");
            string text8 = TextResolver.GetText("SecondaryStoryClue8");
            string text9 = TextResolver.GetText("SecondaryStoryClue9");
            switch (selectionValue)
            {
                case 0:
                    result = text;
                    break;
                case 1:
                    result = text2;
                    break;
                case 2:
                    result = text3;
                    break;
                case 3:
                    result = text4;
                    break;
                case 4:
                    result = text5;
                    break;
                case 5:
                    result = text6;
                    break;
                case 6:
                    result = text7;
                    break;
                case 7:
                    result = text8;
                    break;
                case 8:
                    {
                        FindLonelyNebulaLocation(out var x, out var y, GalaxyLocationEffectType.MovementSlowed);
                        if (x != 175000.0 && y != 122000.0)
                        {
                            Design design = PlayerEmpire.GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.SmallSpacePort), 0.0);
                            string name = TextResolver.GetText("Archival Refuge Station");
                            Habitat habitat = FastFindNearestSystemWithPlanets(x, y);
                            if (habitat != null)
                            {
                                name = string.Format(TextResolver.GetText("X Archival Refuge"), habitat.Name);
                            }
                            design = design.Clone();
                            design.PictureRef = ShipImageHelper.ResolveMajorShipImageIndex(ShipImageHelper.FreedomAllianceFamily, design.SubRole, aged: false);
                            BuiltObject builtObject = GenerateStoryAbandonedBuiltObject(x, y, design, name);
                            builtObject.EncounterTechAdvanceCount = 8;
                            builtObject.EncounterMoneyBonus = Rnd.Next(110000, 200000);
                            int minValue = (int)((double)StarCount * 0.15);
                            int maxValue = (int)((double)StarCount * 0.25);
                            builtObject.EncounterExplorationBonus = (short)Rnd.Next(minValue, maxValue);
                            GovernmentAttributes firstByAvailability = Governments.GetFirstByAvailability(2);
                            if (firstByAvailability != null)
                            {
                                builtObject.EncounterGovernmentTypeId = (byte)firstByAvailability.GovernmentId;
                            }
                            Point location = new Point((int)builtObject.Xpos, (int)builtObject.Ypos);
                            PlayerEmpire.AddLocationHint(location);
                            string text10 = GenerateLocationDescription(x, y, prefixWithA: true);
                            text9 += string.Format(TextResolver.GetText("SecondaryStoryClue9 Location"), builtObject.Name, x.ToString("0,K"), y.ToString("0,K"), text10);
                        }
                        text9 += "========================================";
                        result = text9;
                        break;
                    }
            }
            return result;
        }

        public string GenerateStoryClue(StellarObject location)
        {
            string result = string.Empty;
            string text = string.Empty;
            if (location is BuiltObject && ((BuiltObject)location).Empire == null)
            {
                text = GenerateBuiltObjectStoryClue((BuiltObject)location);
            }
            if (!string.IsNullOrEmpty(text))
            {
                result = text;
            }
            int num = StoryClueLocations.IndexOf(location);
            if (num < 0)
            {
                return result;
            }
            string text2 = TextResolver.GetText("StoryClue1");
            string text3 = TextResolver.GetText("StoryClue2");
            string text4 = TextResolver.GetText("StoryClue3");
            string text5 = TextResolver.GetText("StoryClue4");
            string text6 = TextResolver.GetText("StoryClue5");
            string text7 = "";
            text7 = text7 ?? "";
            switch (num)
            {
                case 0:
                    result = text2;
                    break;
                case 1:
                    result = text3;
                    break;
                case 2:
                    result = text4;
                    break;
                case 3:
                    result = text5;
                    break;
                case 4:
                    result = text6;
                    break;
                case 5:
                    result = text7;
                    break;
            }
            if (!StoryCluesEnabled)
            {
                StoryCluesEnabled = true;
            }
            StoryClueUsed[num] = true;
            return result;
        }

        public bool CheckRuinBonuses(Ruin ruin)
        {
            if (ruin != null && (ruin.BonusDefensive > 0.0 || ruin.BonusDiplomacy > 0.0 || ruin.BonusHappiness > 0.0 || ruin.BonusResearchEnergy > 0.0 || ruin.BonusResearchHighTech > 0.0 || ruin.BonusResearchWeapons > 0.0 || ruin.BonusWealth > 0.0))
            {
                return true;
            }
            return false;
        }

        public bool CheckRuinsHaveBenefit(Ruin ruin, Empire empire)
        {
            bool result = false;
            if (ruin != null)
            {
                if (empire != null && empire.PirateEmpireBaseHabitat != null && empire != IndependentEmpire)
                {
                    return false;
                }
                if (ruin.GameEventId >= 0)
                {
                    return true;
                }
                if (ruin.ResearchBonus > 0 || ruin.MapSystemReveal > 0 || ruin.MoneyBonus > 0.0)
                {
                    result = true;
                }
                if (empire == PlayerEmpire && ruin.StoryClueLevel >= 0)
                {
                    result = true;
                }
                switch (ruin.Type)
                {
                    case RuinType.CreatureSwarm:
                    case RuinType.CreatureSwarmSilverMist:
                        if (!ruin.CreatureSwarmGenerated)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.PirateAmbush:
                        if (!ruin.PirateAmbushGenerated)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.Component:
                    case RuinType.UnlockResearchProject:
                        if (ruin.ResearchProjectId >= 0)
                        {
                            result = true;
                            if (ruin.Type == RuinType.UnlockResearchProject && empire != null && empire.Research != null && empire.Research.TechTree != null && empire.Research.TechTree[ruin.ResearchProjectId].IsEnabled)
                            {
                                result = false;
                            }
                        }
                        break;
                    case RuinType.Government:
                        if (ruin.SpecialGovernmentId >= 0)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.NewPopulation:
                        if (ruin.HabitatNewRace != null)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.Origins:
                        if (ruin.OriginsApprovalRatingBonus != 0)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.Refugees:
                        if (!ruin.RefugeesGenerated)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.LostBuiltObject:
                        if (!ruin.LostBuiltObjectGenerated)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.LostColony:
                        if (!ruin.LostColonyGenerated)
                        {
                            result = true;
                        }
                        break;
                    case RuinType.StoryEvent:
                        if (ruin.StoryEventData > 0)
                        {
                            result = true;
                        }
                        break;
                }
            }
            return result;
        }

        public void InvestigateRuins(Empire investigatingEmpire, Habitat ruinsHabitat)
        {
            if (ruinsHabitat == null || investigatingEmpire == null)
            {
                return;
            }
            Ruin ruin = ruinsHabitat.Ruin;
            if (ruin == null)
            {
                return;
            }
            string text = "";
            string text2 = string.Empty;
            if (investigatingEmpire == PlayerEmpire)
            {
                string text3 = CheckForStoryLocationHint();
                if (!string.IsNullOrEmpty(text3) && Rnd.Next(0, 2) == 1)
                {
                    text2 = "\n\n";
                    text2 = text2 + "*** " + TextResolver.GetText("A datacore recovered from the ruins NAVIGATIONAL DIRECTIONS") + ":";
                    text2 += text3;
                    text2 += ". ***\n\n";
                    text2 += TextResolver.GetText("We should send a ship to investigate this location.");
                }
            }
            if (CheckRuinsHaveBenefit(ruin, investigatingEmpire) || CheckRuinBonuses(ruin))
            {
                if (StoryDistantWorldsEnabled && ruin.StoryClueLevel >= 0 && investigatingEmpire == PlayerEmpire)
                {
                    text = text + string.Format(TextResolver.GetText("Ruins Discovery Historical Details"), ruin.Name) + " ";
                    text += GenerateStoryClue(ruinsHabitat);
                    investigatingEmpire.SendEventMessageToEmpire(EventMessageType.StoryClue, TextResolver.GetText("Galactic History revealed"), text, ruin, ruinsHabitat);
                    if (investigatingEmpire == PlayerEmpire)
                    {
                        ruin.StoryClueLevel = -1;
                    }
                }
                if (ruin.GameEventId >= 0)
                {
                    CheckTriggerEvent(ruin.GameEventId, investigatingEmpire, EventTriggerType.Investigate, null);
                }
                if (ruin.MoneyBonus > 0.0)
                {
                    investigatingEmpire.StateMoney += ruin.MoneyBonus;
                    investigatingEmpire.PirateEconomy.PerformIncome(ruin.MoneyBonus, PirateIncomeType.Undefined, CurrentStarDate);
                    text += string.Format(TextResolver.GetText("Ruins Discovery Money"), ruin.Name, ruin.MoneyBonus.ToString());
                    text += text2;
                    investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, TextResolver.GetText("Treasure Recovered"), text, ruin, ruinsHabitat);
                }
                if (ruin.ResearchBonus > 0 && investigatingEmpire.Research != null)
                {
                    ResearchNode researchNode = investigatingEmpire.Research.SelectRandomNextResearchProjectExcludeSuperWeapons(this);
                    if (researchNode != null)
                    {
                        researchNode.Progress += ruin.ResearchBonus;
                        if (researchNode.Progress >= researchNode.Cost)
                        {
                            text += string.Format(TextResolver.GetText("Ruins Discovery Research"), ruin.Name, researchNode.Name);
                            investigatingEmpire.DoResearchBreakthrough(researchNode, selfResearched: true, blockMessages: true, suppressUpdate: true);
                            investigatingEmpire.Research.Update(investigatingEmpire.DominantRace);
                            investigatingEmpire.ReviewDesignsBuiltObjectsImprovedComponents();
                            investigatingEmpire.ReviewResearchAbilities();
                        }
                        else
                        {
                            text += string.Format(TextResolver.GetText("Ruins Discovery Research"), ruin.Name, researchNode.Name);
                        }
                        text += text2;
                        investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, TextResolver.GetText("Technology Recovered"), text, ruin, ruinsHabitat);
                    }
                }
                if (ruin.MapSystemReveal > 0)
                {
                    int mapSystemReveal = ruin.MapSystemReveal;
                    ruin.MapSystemReveal = 0;
                    if (investigatingEmpire.SystemVisibility != null && investigatingEmpire.ResourceMap != null)
                    {
                        for (int i = 0; i < mapSystemReveal; i++)
                        {
                            Habitat habitat = FastFindNearestUnexploredHabitat(ruinsHabitat.Xpos, ruinsHabitat.Ypos, investigatingEmpire);
                            if (habitat == null)
                            {
                                break;
                            }
                            SystemInfo systemInfo = Systems[habitat.SystemIndex];
                            if (systemInfo == null || systemInfo.Habitats == null)
                            {
                                continue;
                            }
                            investigatingEmpire.SystemVisibility[habitat.SystemIndex].TotallyExplored = true;
                            if (investigatingEmpire.ResourceMap != null)
                            {
                                for (int j = 0; j < systemInfo.Habitats.Count; j++)
                                {
                                    Habitat habitat2 = systemInfo.Habitats[j];
                                    if (habitat2 != null)
                                    {
                                        investigatingEmpire.ResourceMap.SetResourcesKnown(habitat2, known: true);
                                    }
                                }
                                if (systemInfo.SystemStar != null)
                                {
                                    investigatingEmpire.ResourceMap.SetResourcesKnown(systemInfo.SystemStar, known: true);
                                }
                            }
                            SystemVisibilityStatus status = investigatingEmpire.SystemVisibility[habitat.SystemIndex].Status;
                            if (status == SystemVisibilityStatus.Unexplored || status == SystemVisibilityStatus.Undefined)
                            {
                                investigatingEmpire.SystemVisibility[habitat.SystemIndex].Status = SystemVisibilityStatus.Explored;
                            }
                        }
                        text += string.Format(TextResolver.GetText("Ruins Discovery Maps"), ruin.Name, mapSystemReveal.ToString());
                        text += text2;
                        investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, TextResolver.GetText("System Maps Recovered"), text, ruin, ruinsHabitat);
                    }
                }
                string empty = string.Empty;
                string empty2 = string.Empty;
                switch (ruin.Type)
                {
                    case RuinType.EmpireBonus:
                        {
                            empty = TextResolver.GetText("Empire Bonus when Colonized");
                            text = string.Format(TextResolver.GetText("Ruins Empire Bonus"), ruin.Name, ResolveDescription(ruinsHabitat.Category).ToLower(CultureInfo.InvariantCulture));
                            text += ":\n\n";
                            string text4 = string.Empty;
                            if (ruin.BonusDefensive > 0.0)
                            {
                                text += string.Format(TextResolver.GetText("Ruins Bonus Defensive"), ResolveDescription(ruinsHabitat.Category).ToLower(CultureInfo.InvariantCulture), ruin.BonusDefensive.ToString("#%"));
                            }
                            else
                            {
                                if (ruin.BonusDiplomacy > 0.0)
                                {
                                    text4 = string.Format(TextResolver.GetText("Ruins Bonus Diplomacy"), ruin.BonusDiplomacy.ToString("#%"));
                                }
                                else if (ruin.BonusHappiness > 0.0)
                                {
                                    text4 = string.Format(TextResolver.GetText("Ruins Bonus Happiness"), ruin.BonusHappiness.ToString("#%"));
                                }
                                else if (ruin.BonusResearchEnergy > 0.0)
                                {
                                    text4 = string.Format(TextResolver.GetText("Ruins Bonus Energy Research"), ruin.BonusResearchEnergy.ToString("#%"));
                                }
                                else if (ruin.BonusResearchHighTech > 0.0)
                                {
                                    text4 = string.Format(TextResolver.GetText("Ruins Bonus HighTech Research"), ruin.BonusResearchHighTech.ToString("#%"));
                                }
                                else if (ruin.BonusResearchWeapons > 0.0)
                                {
                                    text4 = string.Format(TextResolver.GetText("Ruins Bonus Weapons Research"), ruin.BonusResearchWeapons.ToString("#%"));
                                }
                                else if (ruin.BonusWealth > 0.0)
                                {
                                    text4 = string.Format(TextResolver.GetText("Ruins Bonus Colony Income"), ruin.BonusWealth.ToString("#%"));
                                }
                                text += text4;
                                text += "\n\n";
                            }
                            text += TextResolver.GetText("We should immediately send a colony ship to colonize this extremely valuable world");
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.RuinsEmpireBonus, empty, text, ruin, ruinsHabitat);
                            break;
                        }
                    case RuinType.CreatureSwarmSilverMist:
                        {
                            empty = TextResolver.GetText("SilverMist Released");
                            text = string.Format(TextResolver.GetText("Ruins SilverMist"), ruin.Name);
                            Creature creature = GenerateCreatureAtHabitat(CreatureType.SilverMist, ruinsHabitat, lockLocation: false);
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.CreatureOutbreak, empty, text, creature, ruinsHabitat);
                            investigatingEmpire.SendNewsBroadcast(EventMessageType.CreatureOutbreak, creature, DisasterEventType.Undefined, warStartEnd: false, wonderBegun: false, ruinsHabitat);
                            break;
                        }
                    case RuinType.CreatureSwarm:
                        {
                            empty = TextResolver.GetText("Kaltor Swarm Released");
                            text = string.Format(TextResolver.GetText("Ruins Kaltor Swarm"), ruin.Name);
                            int num4 = Rnd.Next(3, 6);
                            for (int l = 0; l < num4; l++)
                            {
                                GenerateCreatureAtHabitat(CreatureType.Kaltor, ruinsHabitat, lockLocation: false);
                            }
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.CreatureOutbreak, empty, text, ruin, ruinsHabitat);
                            break;
                        }
                    case RuinType.PirateAmbush:
                        {
                            empty = TextResolver.GetText("Pirate Ambush") + "!";
                            Empire empire2 = FindNearestPirateFaction(ruinsHabitat.Xpos, ruinsHabitat.Ypos, PlayerEmpire, includeSuperPirates: false);
                            if (empire2 != null)
                            {
                                text = string.Format(TextResolver.GetText("Ruins Pirate Ambush"), ruin.Name, empire2.Name);
                                int num5 = Rnd.Next(3, 5);
                                Habitat habitat10 = ruinsHabitat;
                                double num6 = ruinsHabitat.Xpos;
                                double num7 = ruinsHabitat.Ypos;
                                int num8 = 0;
                                Habitat habitat11 = DetermineHabitatSystemStar(ruinsHabitat);
                                while (habitat10 == habitat11 && num8 < 20)
                                {
                                    num6 += Rnd.NextDouble() * 200000.0 - 100000.0;
                                    num7 += Rnd.NextDouble() * 200000.0 - 100000.0;
                                    habitat10 = FindNearestSystemGasCloudAsteroid(num6, num7);
                                    num8++;
                                }
                                for (int m = 0; m < num5; m++)
                                {
                                    GeneratePirateShip(empire2, BuiltObjectSubRole.Frigate, habitat10)?.AssignMission(BuiltObjectMissionType.Move, ruinsHabitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                }
                                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.PirateAmbush, empty, text, ruin, ruinsHabitat);
                            }
                            break;
                        }
                    case RuinType.UnlockResearchProject:
                        if (investigatingEmpire.Research != null && investigatingEmpire.Research.TechTree != null)
                        {
                            ResearchNode researchNode3 = investigatingEmpire.Research.TechTree.FindNodeById(ruin.ResearchProjectId);
                            if (researchNode3 != null && !researchNode3.IsEnabled)
                            {
                                empty = TextResolver.GetText("Ancient Knowledge Cache Discovered");
                                string name = researchNode3.Name;
                                text += string.Format(TextResolver.GetText("Ruins Ancient Knowledge Cache Discovered"), ruin.Name, name);
                                text += ".\n\n";
                                researchNode3.IsEnabled = true;
                                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.ExoticTechDiscovered, empty, text, ruin, ruinsHabitat);
                            }
                            else
                            {
                                text = string.Format(TextResolver.GetText("Our survey team found nothing of interest in the RUINNAME"), ruin.Name);
                                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, TextResolver.GetText("Ruins are Silent"), text, ruin, ruinsHabitat);
                            }
                        }
                        break;
                    case RuinType.Component:
                        {
                            if (investigatingEmpire.Research == null || investigatingEmpire.Research.TechTree == null)
                            {
                                break;
                            }
                            ResearchNode researchNode2 = investigatingEmpire.Research.TechTree.FindNodeById(ruin.ResearchProjectId);
                            empty = TextResolver.GetText("Secret Super Weapon Discovered");
                            string arg = string.Empty;
                            if (researchNode2 != null)
                            {
                                if (researchNode2.Components != null && researchNode2.Components.Count > 0)
                                {
                                    arg = researchNode2.Components[0].Name;
                                }
                                else if (researchNode2.ComponentImprovements != null && researchNode2.ComponentImprovements.Count > 0)
                                {
                                    if (researchNode2.ComponentImprovements[0].ImprovedComponent != null)
                                    {
                                        arg = researchNode2.ComponentImprovements[0].ImprovedComponent.Name;
                                    }
                                }
                                else
                                {
                                    arg = researchNode2.Name;
                                }
                            }
                            text += string.Format(TextResolver.GetText("Ruins Secret Super Weapon Discovered"), ruin.Name, arg);
                            text += ".\n\n";
                            investigatingEmpire.DoResearchBreakthrough(researchNode2, selfResearched: true, blockMessages: true, suppressUpdate: true);
                            investigatingEmpire.Research.Update(investigatingEmpire.DominantRace);
                            investigatingEmpire.ReviewDesignsBuiltObjectsImprovedComponents();
                            investigatingEmpire.ReviewResearchAbilities();
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.ExoticTechDiscovered, empty, text, ruin, ruinsHabitat);
                            break;
                        }
                    case RuinType.Government:
                        {
                            if (investigatingEmpire.AllowableGovernmentTypes == null)
                            {
                                break;
                            }
                            empty = TextResolver.GetText("Secret Form of Government Revealed");
                            if (!investigatingEmpire.AllowableGovernmentTypes.Contains(ruin.SpecialGovernmentId))
                            {
                                investigatingEmpire.AllowableGovernmentTypes.Add(ruin.SpecialGovernmentId);
                            }
                            GovernmentAttributes governmentAttributes = Governments[ruin.SpecialGovernmentId];
                            text += string.Format(TextResolver.GetText("Ruins Secret Form of Government Revealed"), ruin.Name, governmentAttributes.Name);
                            string text6 = string.Empty;
                            switch (governmentAttributes.Availability)
                            {
                                case 3:
                                    text6 = TextResolver.GetText("Government Description Way of Darkness");
                                    text6 += "\n\n";
                                    break;
                                case 2:
                                    text6 = TextResolver.GetText("Government Description Way of the Ancients");
                                    text6 += "\n\n";
                                    break;
                            }
                            text += text6;
                            text += TextResolver.GetText("Ruins Secret Form of Government Revealed Adoption");
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.SpecialGovernmentType, empty, text, ruin, ruinsHabitat);
                            if (investigatingEmpire == PlayerEmpire)
                            {
                                break;
                            }
                            GovernmentAttributesList governmentAttributesList = Empire.DetermineMostSuitableGovermentTypes(investigatingEmpire.DominantRace, investigatingEmpire.AllowableGovernmentTypes);
                            if (governmentAttributesList != null && governmentAttributesList.Count > 0)
                            {
                                int governmentId = governmentAttributesList[0].GovernmentId;
                                if (governmentId == ruin.SpecialGovernmentId)
                                {
                                    investigatingEmpire.HaveRevolution(investigatingEmpire.DominantRace, governmentId);
                                }
                            }
                            break;
                        }
                    case RuinType.LostBuiltObject:
                        {
                            DesignSpecification designSpecification4 = null;
                            BuiltObjectSubRole subRole = BuiltObjectSubRole.Undefined;
                            switch (Rnd.Next(0, 2))
                            {
                                case 0:
                                    subRole = BuiltObjectSubRole.Cruiser;
                                    break;
                                case 1:
                                    subRole = BuiltObjectSubRole.CapitalShip;
                                    break;
                            }
                            designSpecification4 = investigatingEmpire.ObtainDesignSpec(subRole);
                            if (designSpecification4 == null)
                            {
                                break;
                            }
                            Habitat habitat6 = FindLonelyColonyLocation(investigatingEmpire);
                            if (habitat6 == null)
                            {
                                break;
                            }
                            Empire empire = SelectRandomEmpire();
                            Design design4 = empire.GenerateDesignFromSpec(designSpecification4, 4.0);
                            if (design4 == null)
                            {
                                break;
                            }
                            design4.PictureRef = ShipImageHelper.ResolveMinorShipImageIndex(design4.SubRole, largeShips: true);
                            BuiltObject builtObject4 = GenerateAbandonedBuiltObject(habitat6, design4);
                            if (builtObject4 != null)
                            {
                                empty = TextResolver.GetText("Lost Ship Location Revealed");
                                Habitat habitat7 = DetermineHabitatSystemStar(habitat6);
                                empty2 = ResolveSectorDescription(habitat6.Xpos, habitat6.Ypos);
                                text += string.Format(TextResolver.GetText("Ruins Lost Ship Location"), ruin.Name, builtObject4.Name, ResolveDescription(habitat6.Category).ToLower(CultureInfo.InvariantCulture), habitat6.Name, habitat7.Name, empty2);
                                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.LostBuiltObjectCoordinates, empty, text, ruin, ruinsHabitat);
                                if (investigatingEmpire == PlayerEmpire)
                                {
                                    PlayerEmpire.AddLocationHint(new Point((int)habitat6.Xpos, (int)habitat6.Ypos));
                                }
                            }
                            break;
                        }
                    case RuinType.LostColony:
                        {
                            empty = TextResolver.GetText("Lost Colony Location Revealed");
                            Habitat habitat8 = FindLonelyColonyLocation(investigatingEmpire);
                            if (habitat8 != null)
                            {
                                if (habitat8.Quality < 0.65f)
                                {
                                    habitat8.BaseQuality = (float)(0.65 + Rnd.NextDouble() * 0.35);
                                }
                                Race race2 = investigatingEmpire.DominantRace;
                                if (race2 == null || !race2.Playable)
                                {
                                    race2 = SelectRandomRace(75);
                                }
                                investigatingEmpire.MakeHabitatIntoColony(habitat8, null, race2, 2000000000L);
                                Habitat habitat9 = DetermineHabitatSystemStar(habitat8);
                                empty2 = ResolveSectorDescription(habitat8.Xpos, habitat8.Ypos);
                                text += string.Format(TextResolver.GetText("Ruins Lost Colony Location Revealed"), ruin.Name, ResolveDescription(habitat8.Category).ToLower(CultureInfo.InvariantCulture), habitat8.Name, habitat9.Name, empty2);
                                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.LostColonyCoordinates, empty, text, habitat8, ruinsHabitat);
                                if (investigatingEmpire == PlayerEmpire)
                                {
                                    PlayerEmpire.AddLocationHint(new Point((int)habitat8.Xpos, (int)habitat8.Ypos));
                                }
                            }
                            break;
                        }
                    case RuinType.NewPopulation:
                        if (ruin.HabitatNewRace != null)
                        {
                            empty = TextResolver.GetText("Sleeping Alien Race Awoken");
                            Population population = new Population(ruin.HabitatNewRace, 200000000L);
                            if (ruinsHabitat.Population == null)
                            {
                                ruinsHabitat.Population = new PopulationList();
                            }
                            ruinsHabitat.Population.Add(population);
                            IndependentEmpire.TakeOwnershipOfColony(ruinsHabitat, IndependentEmpire);
                            text += string.Format(TextResolver.GetText("Ruins Sleeping Alien Race Awoken"), ruin.Name, ruin.HabitatNewRace.Name, ResolveDescription(ruinsHabitat.Category));
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.SleepersAwake, empty, text, ruin.HabitatNewRace, ruinsHabitat);
                        }
                        break;
                    case RuinType.Origins:
                        {
                            string empty3 = string.Empty;
                            if (ruin.OriginsRace == null)
                            {
                                break;
                            }
                            empty3 = ((ruin.OriginsApprovalRatingBonus < 0) ? (empty3 + string.Format(TextResolver.GetText("Ruins Origins Negative"), ruin.OriginsRace.Name)) : (empty3 + string.Format(TextResolver.GetText("Ruins Origins Positive"), ruin.OriginsRace.Name)));
                            switch (ruin.OriginsRace.Name)
                            {
                                case "Human":
                                    empty3 = TextResolver.GetText("Ruins Origins Human");
                                    break;
                                case "Boskara":
                                    empty3 = string.Format(TextResolver.GetText("Ruins Origins Negative"), ruin.OriginsRace.Name);
                                    break;
                                case "Kiadian":
                                    empty3 = TextResolver.GetText("Ruins Origins Kiadian");
                                    break;
                                case "Sluken":
                                    empty3 = string.Format(TextResolver.GetText("Ruins Origins Negative"), ruin.OriginsRace.Name);
                                    break;
                                case "Ackdarian":
                                    empty3 = TextResolver.GetText("Ruins Origins Ackdarian");
                                    break;
                                case "Gizurean":
                                    empty3 = string.Format(TextResolver.GetText("Ruins Origins Negative"), ruin.OriginsRace.Name);
                                    break;
                            }
                            ruin.OriginsRace.SatisfactionModifier += ruin.OriginsApprovalRatingBonus;
                            text += string.Format(TextResolver.GetText("Ruins Origins"), ruin.Name, ruin.OriginsRace.Name);
                            text += "\n\n";
                            text += empty3;
                            text = ((ruin.OriginsApprovalRatingBonus < 0) ? (text + "\n\n" + string.Format(TextResolver.GetText("Ruins Origins Negative Effect"), ruin.OriginsRace.Name)) : (text + "\n\n" + string.Format(TextResolver.GetText("Ruins Origins Positive Effect"), ruin.OriginsRace.Name)));
                            empty = string.Format(TextResolver.GetText("History of the RACE"), ruin.OriginsRace.Name);
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.OriginsDiscovery, empty, text, ruin.OriginsRace, ruinsHabitat);
                            for (int n = 0; n < Empires.Count; n++)
                            {
                                Empire empire3 = Empires[n];
                                if (empire3 != null && empire3 != investigatingEmpire && empire3.DominantRace != null && empire3.DominantRace == ruin.OriginsRace)
                                {
                                    string text5 = string.Format(TextResolver.GetText("Ruins Origins Discovery Other"), ruin.OriginsRace.Name);
                                    text5 += "\n\n";
                                    text5 += empty3;
                                    text5 = ((ruin.OriginsApprovalRatingBonus < 0) ? (text5 + "\n\n" + string.Format(TextResolver.GetText("Ruins Origins Negative Effect"), ruin.OriginsRace.Name)) : (text5 + "\n\n" + string.Format(TextResolver.GetText("Ruins Origins Positive Effect"), ruin.OriginsRace.Name)));
                                    empire3.SendEventMessageToEmpire(EventMessageType.OriginsDiscovery, empty, text5, ruin.OriginsRace, ruinsHabitat);
                                }
                            }
                            break;
                        }
                    case RuinType.Refugees:
                        {
                            Habitat habitat4 = null;
                            if (Systems[ruinsHabitat.SystemIndex].Habitats != null)
                            {
                                for (int k = 0; k < Systems[ruinsHabitat.SystemIndex].Habitats.Count; k++)
                                {
                                    Habitat habitat5 = Systems[ruinsHabitat.SystemIndex].Habitats[k];
                                    if (habitat5 != null)
                                    {
                                        double num3 = CalculateDistance(ruinsHabitat.Xpos, ruinsHabitat.Ypos, habitat5.Xpos, habitat5.Ypos);
                                        if (num3 > 400.0)
                                        {
                                            habitat4 = habitat5;
                                            break;
                                        }
                                    }
                                }
                            }
                            bool flag = true;
                            if (ruin.RefugeesGenerated || habitat4 == null)
                            {
                                flag = false;
                            }
                            if (flag)
                            {
                                DesignSpecification designSpecification = investigatingEmpire.ObtainDesignSpec(BuiltObjectSubRole.ColonyShip);
                                DesignSpecification designSpecification2 = investigatingEmpire.ObtainDesignSpec(BuiltObjectSubRole.Frigate);
                                DesignSpecification designSpecification3 = investigatingEmpire.ObtainDesignSpec(BuiltObjectSubRole.Cruiser);
                                if (designSpecification == null || designSpecification2 == null || designSpecification3 == null)
                                {
                                    break;
                                }
                                Design design = investigatingEmpire.GenerateDesignFromSpec(designSpecification, 3.0);
                                Design design2 = investigatingEmpire.GenerateDesignFromSpec(designSpecification2, 3.0);
                                Design design3 = investigatingEmpire.GenerateDesignFromSpec(designSpecification3, 3.0);
                                Race race = SelectRandomRace(75);
                                if (design != null && design2 != null && design3 != null)
                                {
                                    design.PictureRef = ShipImageHelper.ResolveNewShipImageIndex(BuiltObjectSubRole.ColonyShip, race, isPirates: false);
                                    design2.PictureRef = ShipImageHelper.ResolveNewShipImageIndex(BuiltObjectSubRole.Frigate, race, isPirates: false);
                                    design3.PictureRef = ShipImageHelper.ResolveNewShipImageIndex(BuiltObjectSubRole.Cruiser, race, isPirates: false);
                                    BuiltObject builtObject = GenerateAbandonedBuiltObject(habitat4, design, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Notify);
                                    if (builtObject != null)
                                    {
                                        builtObject.Name = string.Format(TextResolver.GetText("Refugee SHIPTYPE"), ResolveDescription(BuiltObjectSubRole.ColonyShip));
                                        builtObject.NativeRace = race;
                                    }
                                    BuiltObject builtObject2 = GenerateAbandonedBuiltObject(habitat4, design2, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Notify);
                                    if (builtObject2 != null)
                                    {
                                        builtObject2.Name = string.Format(TextResolver.GetText("Refugee SHIPTYPE"), ResolveDescription(BuiltObjectSubRole.Frigate));
                                    }
                                    BuiltObject builtObject3 = GenerateAbandonedBuiltObject(habitat4, design3, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Notify);
                                    if (builtObject3 != null)
                                    {
                                        builtObject3.Name = string.Format(TextResolver.GetText("Refugee SHIPTYPE"), ResolveDescription(BuiltObjectSubRole.Cruiser));
                                    }
                                    text += string.Format(TextResolver.GetText("Ruins Refugees"), ruin.Name, race.Name, ResolveDescription(habitat4.Category).ToLower(CultureInfo.InvariantCulture), habitat4.Name);
                                    empty = TextResolver.GetText("Galactic Refugees Encountered");
                                    investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GalacticRefugees, empty, text, ruin, ruinsHabitat);
                                }
                            }
                            else
                            {
                                text = text + " " + TextResolver.GetText("Our survey team found nothing of interest in the ruins.");
                                investigatingEmpire.SendMessageToEmpire(investigatingEmpire, EmpireMessageType.ExplorationRuins, this, text);
                            }
                            break;
                        }
                    case RuinType.StoryEvent:
                        lock (StoryLock)
                        {
                            if (ruin.StoryEventData > 0)
                            {
                                ruin.StoryEventData = 0;
                                empty = TextResolver.GetText("Strange transmission from beyond our galaxy");
                                text += string.Format(TextResolver.GetText("Shakturi Beacon Trigger"), ruin.Name);
                                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, empty, text, ruin, ruinsHabitat);
                                Habitat habitat3 = null;
                                if (ShakturiTriggerHabitat != null)
                                {
                                    double num = Rnd.NextDouble() * 3000000.0 - 1500000.0;
                                    double num2 = Rnd.NextDouble() * 3000000.0 - 1500000.0;
                                    if (Math.Abs(num) < 500000.0)
                                    {
                                        num = 600000.0 * (double)Math.Sign(num);
                                    }
                                    if (Math.Abs(num2) < 500000.0)
                                    {
                                        num2 = 600000.0 * (double)Math.Sign(num2);
                                    }
                                    habitat3 = FindLonelyHabitat(ShakturiTriggerHabitat.Xpos + num, ShakturiTriggerHabitat.Ypos + num2, HabitatType.BarrenRock);
                                }
                                if (habitat3 == null)
                                {
                                    habitat3 = FindLonelyHabitatGalacticEdge(RuinType.Undefined, HabitatType.Ice);
                                }
                                GenerateShakturi(habitat3);
                            }
                            else
                            {
                                text = text + " " + TextResolver.GetText("Our survey team found nothing of interest in the ruins.");
                                investigatingEmpire.SendMessageToEmpire(investigatingEmpire, EmpireMessageType.ExplorationRuins, this, text);
                            }
                        }
                        break;
                }
                ruin.ClearBonuses();
            }
            else if (investigatingEmpire.DominantRace != null && investigatingEmpire.DominantRace.RaceEvents != null && investigatingEmpire.DominantRace.RaceEvents.ContainsEventType(RaceEventType.HistoricalDiscoveryExploreRuinsForResearchBoost) && investigatingEmpire.RaceEventType == RaceEventType.Undefined && Rnd.Next(0, 2) == 1)
            {
                investigatingEmpire.RaceEventType = RaceEventType.HistoricalDiscoveryExploreRuinsForResearchBoost;
                investigatingEmpire.RaceEventEndDate = CurrentStarDate + RealSecondsInGalacticYear * 1000 / 2;
                text = string.Format(TextResolver.GetText("Our survey team made a discovery of galactic significance in the RUINNAME"), ruin.Name);
                if (string.IsNullOrEmpty(text2))
                {
                    text += text2;
                }
                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, TextResolver.GetText("Unusual Technology Discovered"), text, ruin, ruinsHabitat);
            }
            else if (string.IsNullOrEmpty(text2))
            {
                text = string.Format(TextResolver.GetText("Our survey team found nothing of interest in the RUINNAME"), ruin.Name);
                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, TextResolver.GetText("Ruins are Silent"), text, ruin, ruinsHabitat);
            }
            else
            {
                text = text2;
                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.GeneralRuinsDiscovery, TextResolver.GetText("Navigational Coordinates"), text, ruin, ruinsHabitat);
            }
        }

        public Point FindNearestGalaxyEdgeCoordsMinimumRange(double x, double y, double minimumRange, double minimumRangeToColony)
        {
            Point result = FindNearestGalaxyEdgeCoords(x, y);
            double num = CalculateDistance(x, y, result.X, result.Y);
            Habitat habitat = FindNearestColony(result.X, result.Y, null, 0, includeIndependentColonies: false);
            double num2 = double.MaxValue;
            if (habitat != null)
            {
                num2 = CalculateDistance(result.X, result.Y, habitat.Xpos, habitat.Ypos);
            }
            int num3 = 0;
            while ((num < minimumRange || num2 < minimumRangeToColony) && num3 < 200)
            {
                double num4 = DetermineAngle(x, y, SizeX / 2, SizeY / 2);
                double num5 = CalculateDistance(x, y, SizeX / 2, SizeY / 2);
                double num6 = num4 - Math.PI;
                _ = SizeX / 2;
                num6 += Rnd.NextDouble() * 3.0 - 1.5;
                double num7 = Math.Cos(num6) * num5;
                double num8 = Math.Sin(num6) * num5;
                double x2 = (double)(SizeX / 2) + num7;
                double y2 = (double)(SizeY / 2) + num8;
                result = FindNearestGalaxyEdgeCoords(x2, y2);
                num = CalculateDistance(x, y, result.X, result.Y);
                habitat = FindNearestColony(result.X, result.Y, null, 0, includeIndependentColonies: false);
                num2 = ((habitat == null) ? double.MaxValue : CalculateDistance(result.X, result.Y, habitat.Xpos, habitat.Ypos));
                num3++;
            }
            return result;
        }

        public Point FindNearestGalaxyEdgeCoords(double x, double y)
        {
            double num = DetermineAngle(x, y, SizeX / 2, SizeY / 2);
            double num2 = CalculateDistance(x, y, SizeX / 2, SizeY / 2);
            double num3 = (double)(SizeX / 2) - num2;
            double num4 = num - Math.PI;
            double num5 = x + Math.Cos(num4) * num3;
            double num6 = y + Math.Sin(num4) * num3;
            int val = (int)num5;
            int val2 = (int)num6;
            val = Math.Min(SizeX - 1, Math.Max(0, val));
            val2 = Math.Min(SizeY - 1, Math.Max(0, val2));
            return new Point(val, val2);
        }

        public Empire SelectRandomEmpire()
        {
            Empire empire = null;
            int num = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(empire == null, 200, ref iterationCount))
            {
                num = Rnd.Next(0, Empires.Count);
                empire = Empires[num];
                if (empire.PirateEmpireBaseHabitat != null || empire == IndependentEmpire || !empire.Active)
                {
                    empire = null;
                }
            }
            return empire;
        }

        public Habitat FindNearestUnknownIndependentColony(double x, double y, Empire empire)
        {
            Habitat result = null;
            double num = double.MaxValue;
            for (int i = 0; i < IndependentColonies.Count; i++)
            {
                Habitat habitat = IndependentColonies[i];
                if (habitat != null && habitat.Empire == IndependentEmpire && !empire.CheckSystemExplored(habitat.SystemIndex))
                {
                    double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                    if (num2 < num)
                    {
                        num = num2;
                        result = habitat;
                    }
                }
            }
            return result;
        }

        public Habitat FindNearestRuin(double x, double y, RuinType ruinType)
        {
            Habitat result = null;
            double num = double.MaxValue;
            for (int i = 0; i < RuinsHabitats.Count; i++)
            {
                Habitat habitat = RuinsHabitats[i];
                if (habitat.Ruin != null && habitat.Ruin.Type == ruinType)
                {
                    double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                    if (num2 < num)
                    {
                        num = num2;
                        result = habitat;
                    }
                }
            }
            return result;
        }

        public Habitat FindNearestRuin(double x, double y)
        {
            Habitat result = null;
            double num = double.MaxValue;
            for (int i = 0; i < RuinsHabitats.Count; i++)
            {
                Habitat habitat = RuinsHabitats[i];
                if (habitat.Ruin != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                    if (num2 < num)
                    {
                        num = num2;
                        result = habitat;
                    }
                }
            }
            return result;
        }

        public Habitat FindNearestUnknownRuin(double x, double y, Empire empire)
        {
            Habitat result = null;
            double num = double.MaxValue;
            for (int i = 0; i < RuinsHabitats.Count; i++)
            {
                Habitat habitat = RuinsHabitats[i];
                if (habitat != null && habitat.Ruin != null && (habitat.Empire == null || habitat.Empire == IndependentEmpire) && !empire.CheckSystemExplored(habitat.SystemIndex))
                {
                    double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                    if (num2 < num)
                    {
                        num = num2;
                        result = habitat;
                    }
                }
            }
            return result;
        }

        public BuiltObject FindUnownedBuiltObjectInSystem(Habitat systemStar)
        {
            for (int i = 0; i < AbandonedBuiltObjects.Count; i++)
            {
                BuiltObject builtObject = AbandonedBuiltObjects[i];
                if (builtObject != null && builtObject.NearestSystemStar == systemStar && builtObject.UnbuiltOrDamagedComponentCount <= 0 && builtObject.Empire == null && !builtObject.HasBeenDestroyed)
                {
                    return builtObject;
                }
            }
            return null;
        }

        public BuiltObject FindNearestUnownedBuiltObject(double x, double y)
        {
            BuiltObject result = null;
            double num = double.MaxValue;
            for (int i = 0; i < AbandonedBuiltObjects.Count; i++)
            {
                BuiltObject builtObject = AbandonedBuiltObjects[i];
                if (builtObject != null && builtObject.UnbuiltOrDamagedComponentCount <= 0)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        result = builtObject;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public string GenerateLocationDescription(double x, double y)
        {
            return GenerateLocationDescription(x, y, prefixWithA: false);
        }

        public string GenerateLocationDescription(double x, double y, bool prefixWithA)
        {
            string empty = string.Empty;
            Habitat habitat = FindNearestHabitat(x, y);
            double num = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            if (num < 500.0)
            {
                return GenerateLocationDescription(habitat);
            }
            string text = string.Empty;
            GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsAtPoint(x, y);
            if (galaxyLocationList != null && galaxyLocationList.Count > 0)
            {
                for (int i = 0; i < galaxyLocationList.Count; i++)
                {
                    if ((galaxyLocationList[i].Type == GalaxyLocationType.NebulaCloud || galaxyLocationList[i].Type == GalaxyLocationType.RestrictedArea || galaxyLocationList[i].Type == GalaxyLocationType.SuperNova) && !string.IsNullOrEmpty(galaxyLocationList[i].Name))
                    {
                        text = galaxyLocationList[i].Name;
                        break;
                    }
                }
            }
            string text2 = string.Empty;
            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
            num = CalculateDistance(x, y, habitat2.Xpos, habitat2.Ypos);
            if (num > (double)MaxSolarSystemSize * 2.1)
            {
                text2 = habitat2.Name;
            }
            if (!string.IsNullOrEmpty(text))
            {
                if (prefixWithA)
                {
                    return string.Format(TextResolver.GetText("A Location Description Nebula"), text, text2, ResolveSectorDescription(habitat2.Xpos, habitat2.Ypos));
                }
                return string.Format(TextResolver.GetText("Location Description Nebula"), text, text2, ResolveSectorDescription(habitat2.Xpos, habitat2.Ypos));
            }
            if (prefixWithA)
            {
                return string.Format(TextResolver.GetText("A Location Description"), text2, ResolveSectorDescription(habitat2.Xpos, habitat2.Ypos));
            }
            return string.Format(TextResolver.GetText("Location Description"), text2, ResolveSectorDescription(habitat2.Xpos, habitat2.Ypos));
        }

        public string GenerateLocationDescription(Habitat habitat)
        {
            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
            return string.Format(TextResolver.GetText("Location Planet"), ResolveDescription(habitat.Type).ToLower(CultureInfo.InvariantCulture), ResolveDescription(habitat.Category).ToLower(CultureInfo.InvariantCulture), habitat.Name, habitat2.Name, ResolveSectorDescription(habitat.Xpos, habitat.Ypos));
        }

        public string GenerateNavigationalBonusMessage(double x, double y, Empire empire)
        {
            string text = string.Empty;
            switch (Rnd.Next(0, 11))
            {
                case 0:
                case 1:
                case 2:
                    {
                        Habitat habitat = FindNearestUnknownRuin(x, y, empire);
                        if (habitat != null)
                        {
                            text += GenerateLocationDescription(habitat);
                            if (empire == PlayerEmpire)
                            {
                                PlayerEmpire.AddLocationHint(new Point((int)habitat.Xpos, (int)habitat.Ypos));
                            }
                        }
                        break;
                    }
                case 3:
                case 4:
                    {
                        BuiltObject builtObject = FindNearestUnownedBuiltObject(x, y);
                        if (builtObject != null)
                        {
                            text += GenerateLocationDescription(builtObject.Xpos, builtObject.Ypos);
                            if (empire == PlayerEmpire)
                            {
                                PlayerEmpire.AddLocationHint(new Point((int)builtObject.Xpos, (int)builtObject.Ypos));
                            }
                        }
                        break;
                    }
                case 5:
                case 6:
                    {
                        Habitat habitat2 = FindNearestUnknownIndependentColony(x, y, empire);
                        if (habitat2 != null)
                        {
                            text += GenerateLocationDescription(habitat2);
                            if (empire == PlayerEmpire)
                            {
                                PlayerEmpire.AddLocationHint(new Point((int)habitat2.Xpos, (int)habitat2.Ypos));
                            }
                        }
                        break;
                    }
                case 7:
                case 8:
                    {
                        Empire empire2 = FindNearestPirateFactionBaseUnknown(empire, x, y, null);
                        if (empire2 != null && empire2.PirateEmpireBaseHabitat != null)
                        {
                            text += GenerateLocationDescription(empire2.PirateEmpireBaseHabitat);
                            if (empire == PlayerEmpire)
                            {
                                PlayerEmpire.AddLocationHint(new Point((int)empire2.PirateEmpireBaseHabitat.Xpos, (int)empire2.PirateEmpireBaseHabitat.Ypos));
                            }
                        }
                        break;
                    }
                case 9:
                case 10:
                    {
                        GalaxyLocationList galaxyLocationList = new GalaxyLocationList();
                        for (int i = 0; i < GalaxyLocations.Count; i++)
                        {
                            GalaxyLocation galaxyLocation = GalaxyLocations[i];
                            if (galaxyLocation != null && (galaxyLocation.Type == GalaxyLocationType.DebrisField || galaxyLocation.Type == GalaxyLocationType.PlanetDestroyer || (galaxyLocation.Type == GalaxyLocationType.RestrictedArea && galaxyLocation.Name != string.Format(TextResolver.GetText("NAME Weapons Testing Range"), "Pozdac") && galaxyLocation.Name != TextResolver.GetText("Dead Zone"))))
                            {
                                galaxyLocationList.Add(galaxyLocation);
                            }
                        }
                        {
                            foreach (GalaxyLocation item in galaxyLocationList)
                            {
                                if (!empire.KnownGalaxyLocations.Contains(item))
                                {
                                    text += GenerateLocationDescription(item.Xpos, item.Ypos);
                                    if (empire == PlayerEmpire)
                                    {
                                        Point location = new Point((int)((double)item.Xpos + (double)item.Width / 2.0), (int)((double)item.Ypos + (double)item.Height / 2.0));
                                        PlayerEmpire.AddLocationHint(location);
                                        return text;
                                    }
                                    return text;
                                }
                            }
                            return text;
                        }
                    }
            }
            return text;
        }

        public void DoRaidBonuses(Empire attackingEmpire, StellarObject target, double lootFactor)
        {
            if (target == null || target.Empire == null || attackingEmpire == null)
            {
                return;
            }
            double num = 1.0;
            if (target.RaidCountdown > 0)
            {
                num = (double)(int)target.RaidCountdown / 60.0 * 0.75;
                if (target.RaidCountdown > 55)
                {
                    num = 0.0;
                }
            }
            if (num == 0.0)
            {
                string description = string.Format(TextResolver.GetText("We have raided TARGET of the EMPIRE but failed to obtain any loot"), target.Name, target.Empire.Name);
                attackingEmpire.SendMessageToEmpire(attackingEmpire, EmpireMessageType.RaidBonuses, target, description);
                string empty = string.Empty;
                empty = ((!(target is Habitat)) ? string.Format(TextResolver.GetText("The EMPIRE have raided our base TARGET but failed to obtain any loot"), target.Name, attackingEmpire.Name) : string.Format(TextResolver.GetText("The EMPIRE have raided our colony TARGET but failed to obtain any loot"), target.Name, attackingEmpire.Name));
                target.Empire.SendMessageToEmpire(target.Empire, EmpireMessageType.RaidVictim, target, empty);
                return;
            }
            CargoList cargoList = null;
            Empire empire = null;
            int num2 = 0;
            int num3 = 0;
            IndustryType industryType = IndustryType.Undefined;
            if (target is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)target;
                cargoList = builtObject.Cargo;
                empire = builtObject.Empire;
                num3 = builtObject.Size;
                switch (builtObject.SubRole)
                {
                    case BuiltObjectSubRole.EnergyResearchStation:
                    case BuiltObjectSubRole.WeaponsResearchStation:
                    case BuiltObjectSubRole.HighTechResearchStation:
                        num2 = 1;
                        industryType = builtObject.SubRole switch
                        {
                            BuiltObjectSubRole.EnergyResearchStation => IndustryType.Energy,
                            BuiltObjectSubRole.HighTechResearchStation => IndustryType.HighTech,
                            BuiltObjectSubRole.WeaponsResearchStation => IndustryType.Weapon,
                            _ => IndustryType.Undefined,
                        };
                        break;
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                        num2 = ((Rnd.Next(0, 3) != 1) ? ((builtObject.ResearchEnergy > 0 || builtObject.ResearchHighTech > 0 || builtObject.ResearchWeapons > 0) ? 1 : 2) : 0);
                        break;
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                        num2 = ((Rnd.Next(0, 2) != 1) ? 2 : 0);
                        break;
                    default:
                        num2 = 0;
                        break;
                }
            }
            else if (target is Habitat)
            {
                Habitat habitat = (Habitat)target;
                cargoList = habitat.Cargo;
                empire = habitat.Empire;
                if (habitat.Population != null && habitat.Population.Count > 0)
                {
                    num3 = (int)(habitat.Population.TotalAmount / 10000);
                }
                num2 = Rnd.Next(0, 3);
            }
            string text = string.Empty;
            double num4 = 0.0;
            switch (num2)
            {
                case 0:
                    num4 = Math.Sqrt(num3) * (30.0 + Rnd.NextDouble() * 20.0);
                    num4 *= attackingEmpire.ColonyIncomeFactor;
                    num4 *= num;
                    num4 *= lootFactor;
                    num4 = Math.Max(100.0, Math.Min(empire.StateMoney * 0.5, num4));
                    attackingEmpire.StateMoney += num4;
                    empire.StateMoney -= num4;
                    if (attackingEmpire.PirateEmpireBaseHabitat != null)
                    {
                        attackingEmpire.PirateEconomy.PerformIncome(num4, PirateIncomeType.Undefined, CurrentStarDate);
                    }
                    text = string.Format(TextResolver.GetText("X credits"), num4.ToString("0"));
                    break;
                case 1:
                    {
                        ResearchNodeList researchNodeList = attackingEmpire.Research.ResolveMoreAdvancedProjects(empire);
                        if (researchNodeList.Count > 0)
                        {
                            ResearchNodeList researchNodeList2 = researchNodeList;
                            researchNodeList2 = industryType switch
                            {
                                IndustryType.Energy => researchNodeList.GetProjectsByIndustry(IndustryType.Energy),
                                IndustryType.HighTech => researchNodeList.GetProjectsByIndustry(IndustryType.HighTech),
                                IndustryType.Weapon => researchNodeList.GetProjectsByIndustry(IndustryType.Weapon),
                                _ => researchNodeList,
                            };
                            if (researchNodeList2.Count > 0 && num > 0.7)
                            {
                                ResearchNode researchNode = researchNodeList2[Rnd.Next(0, researchNodeList2.Count)];
                                if (researchNode != null)
                                {
                                    ResearchNode researchNode2 = attackingEmpire.Research.TechTree.FindNodeById(researchNode.ResearchNodeId);
                                    if (researchNode2 != null && !researchNode2.IsResearched)
                                    {
                                        attackingEmpire.DoResearchBreakthrough(researchNode2, selfResearched: false);
                                        text = string.Format(TextResolver.GetText("Research breakthrough in PROJECT"), researchNode2.Name);
                                    }
                                }
                                break;
                            }
                            ResearchNode researchNode3 = null;
                            switch (Rnd.Next(0, 3))
                            {
                                case 0:
                                    if (attackingEmpire.Research.ResearchQueueEnergy.Count > 0)
                                    {
                                        researchNode3 = attackingEmpire.Research.ResearchQueueEnergy[0];
                                    }
                                    break;
                                case 1:
                                    if (attackingEmpire.Research.ResearchQueueHighTech.Count > 0)
                                    {
                                        researchNode3 = attackingEmpire.Research.ResearchQueueHighTech[0];
                                    }
                                    break;
                                case 2:
                                    if (attackingEmpire.Research.ResearchQueueWeapons.Count > 0)
                                    {
                                        researchNode3 = attackingEmpire.Research.ResearchQueueWeapons[0];
                                    }
                                    break;
                            }
                            if (researchNode3 != null)
                            {
                                double num7 = (double)BaseTechCost / 120000.0;
                                double num8 = (40000.0 + 30000.0 * Rnd.NextDouble()) * num7;
                                num8 *= num;
                                num8 *= lootFactor;
                                researchNode3.Progress += (float)num8;
                                researchNode3.Progress = Math.Min(researchNode3.Cost - 1000f, researchNode3.Progress);
                                text = string.Format(TextResolver.GetText("Improved our understanding of PROJECT"), researchNode3.Name);
                            }
                            break;
                        }
                        ResearchNode researchNode4 = null;
                        switch (Rnd.Next(0, 3))
                        {
                            case 0:
                                if (attackingEmpire.Research.ResearchQueueEnergy.Count > 0)
                                {
                                    researchNode4 = attackingEmpire.Research.ResearchQueueEnergy[0];
                                }
                                break;
                            case 1:
                                if (attackingEmpire.Research.ResearchQueueHighTech.Count > 0)
                                {
                                    researchNode4 = attackingEmpire.Research.ResearchQueueHighTech[0];
                                }
                                break;
                            case 2:
                                if (attackingEmpire.Research.ResearchQueueWeapons.Count > 0)
                                {
                                    researchNode4 = attackingEmpire.Research.ResearchQueueWeapons[0];
                                }
                                break;
                        }
                        if (researchNode4 != null)
                        {
                            double num9 = (double)BaseTechCost / 120000.0;
                            double num10 = (40000.0 + 30000.0 * Rnd.NextDouble()) * num9;
                            num10 *= num;
                            num10 *= lootFactor;
                            researchNode4.Progress += (float)num10;
                            researchNode4.Progress = Math.Min(researchNode4.Cost - 1000f, researchNode4.Progress);
                            text = string.Format(TextResolver.GetText("Improved our understanding of PROJECT"), researchNode4.Name);
                        }
                        break;
                    }
                case 2:
                    {
                        if (cargoList == null || cargoList.Count <= 0)
                        {
                            break;
                        }
                        CargoList cargoList2 = new CargoList();
                        for (int i = 0; i < cargoList.Count; i++)
                        {
                            Cargo cargo = cargoList[i];
                            int num5 = (int)((double)cargo.Available * num * lootFactor);
                            if (cargo != null && cargo.EmpireId == empire.EmpireId && cargo.CommodityIsResource && num5 > 10 && (cargoList2.Count <= 0 || Rnd.Next(0, 2) == 1))
                            {
                                int num6 = Rnd.Next(5, num5);
                                if (num6 > 0)
                                {
                                    cargoList2.Add(new Cargo(cargo.Resource, num6, attackingEmpire));
                                    cargo.Amount -= num6;
                                }
                            }
                        }
                        if (cargoList2.Count > 0)
                        {
                            if (attackingEmpire.PirateEmpireBaseHabitat != null)
                            {
                                BuiltObject builtObject2 = IdentifyPirateBase(attackingEmpire);
                                if (builtObject2 != null && builtObject2.Cargo != null)
                                {
                                    for (int j = 0; j < cargoList2.Count; j++)
                                    {
                                        builtObject2.Cargo.Add(cargoList2[j]);
                                    }
                                }
                            }
                            else if (attackingEmpire.SpacePorts != null && attackingEmpire.SpacePorts.Count > 0)
                            {
                                BuiltObject builtObject3 = attackingEmpire.SpacePorts[0];
                                if (builtObject3 != null && builtObject3.Cargo != null)
                                {
                                    for (int k = 0; k < cargoList2.Count; k++)
                                    {
                                        builtObject3.Cargo.Add(cargoList2[k]);
                                    }
                                }
                            }
                            for (int l = 0; l < cargoList2.Count; l++)
                            {
                                if (l > 0)
                                {
                                    text += ", ";
                                }
                                text = text + cargoList2[l].Amount.ToString("0") + " " + cargoList2[l].Resource.Name;
                            }
                        }
                        else
                        {
                            num4 = Math.Sqrt(num3) * (30.0 + Rnd.NextDouble() * 20.0);
                            num4 *= attackingEmpire.ColonyIncomeFactor;
                            num4 *= num;
                            num4 *= lootFactor;
                            num4 = Math.Max(100.0, Math.Min(empire.StateMoney * 0.5, num4));
                            attackingEmpire.StateMoney += num4;
                            empire.StateMoney -= num4;
                            if (attackingEmpire.PirateEmpireBaseHabitat != null)
                            {
                                attackingEmpire.PirateEconomy.PerformIncome(num4, PirateIncomeType.Undefined, CurrentStarDate);
                            }
                            text = string.Format(TextResolver.GetText("X credits"), num4.ToString("0"));
                        }
                        break;
                    }
            }
            if (string.IsNullOrEmpty(text))
            {
                string description2 = string.Format(TextResolver.GetText("We have raided TARGET of the EMPIRE but failed to obtain any loot"), target.Name, empire.Name);
                attackingEmpire.SendMessageToEmpire(attackingEmpire, EmpireMessageType.RaidBonuses, target, description2);
                string empty2 = string.Empty;
                empty2 = ((!(target is Habitat)) ? string.Format(TextResolver.GetText("The EMPIRE have raided our base TARGET but failed to obtain any loot"), target.Name, attackingEmpire.Name) : string.Format(TextResolver.GetText("The EMPIRE have raided our colony TARGET but failed to obtain any loot"), target.Name, attackingEmpire.Name));
                empire.SendMessageToEmpire(empire, EmpireMessageType.RaidVictim, target, empty2);
                return;
            }
            if (attackingEmpire.Counters != null)
            {
                attackingEmpire.Counters.RaidSuccessCount++;
            }
            string empty3 = string.Empty;
            empty3 = ((target is BuiltObject) ? ((!(lootFactor < 1.0)) ? string.Format(TextResolver.GetText("We have raided base TARGET of the EMPIRE and pillaged the following"), target.Name, empire.Name, text) : string.Format(TextResolver.GetText("We have raided base TARGET of the EMPIRE and pillaged the following FAIL"), target.Name, empire.Name, text)) : ((!(lootFactor < 1.0)) ? string.Format(TextResolver.GetText("We have raided colony TARGET of the EMPIRE and pillaged the following"), target.Name, empire.Name, text) : string.Format(TextResolver.GetText("We have raided colony TARGET of the EMPIRE and pillaged the following FAIL"), target.Name, empire.Name, text)));
            attackingEmpire.SendMessageToEmpire(attackingEmpire, EmpireMessageType.RaidBonuses, target, empty3);
            if (target is BuiltObject)
            {
                string description3 = string.Format(TextResolver.GetText("The EMPIRE have raided our base TARGET and stolen the following"), target.Name, attackingEmpire.Name, text);
                empire.SendMessageToEmpire(empire, EmpireMessageType.RaidVictim, target, description3);
            }
            else
            {
                string description4 = string.Format(TextResolver.GetText("The EMPIRE have raided our colony TARGET and stolen the following"), target.Name, attackingEmpire.Name, text);
                empire.SendMessageToEmpire(empire, EmpireMessageType.RaidVictim, target, description4);
            }
        }

        public void InvestigateAbandonedBuiltObject(Empire investigatingEmpire, BuiltObject abandonedBuiltObject)
        {
            if (investigatingEmpire == null)
            {
                return;
            }
            string empty = string.Empty;
            string text = TextResolver.GetText("Ship");
            if (abandonedBuiltObject.Role == BuiltObjectRole.Base)
            {
                text = TextResolver.GetText("Base");
            }
            switch (abandonedBuiltObject.EncounterEventType)
            {
                case BuiltObjectEncounterEventType.Explodes:
                    {
                        empty = string.Format(TextResolver.GetText("Abandoned Ship Explodes"), text.ToLower(CultureInfo.InvariantCulture));
                        abandonedBuiltObject.InflictDamage(abandonedBuiltObject, null, 100000.0, CurrentDateTime, this, 0f, allowRecursion: false, double.MinValue, allowArmorInvulnerability: false);
                        BuiltObject builtObject = FindNearestBuiltObject((int)abandonedBuiltObject.Xpos, (int)abandonedBuiltObject.Ypos, investigatingEmpire);
                        if (builtObject != null)
                        {
                            int num2 = 300;
                            string text8 = TextResolver.GetText("Abandoned Ship Explodes Shields");
                            if (builtObject.CurrentShields < (float)num2)
                            {
                                text8 = TextResolver.GetText("Abandoned Ship Explodes Damage");
                                builtObject.CurrentShields = 0f;
                                num2 = 40;
                            }
                            empty += text8;
                            builtObject.InflictDamage(builtObject, null, num2, CurrentDateTime, this, 0f, allowRecursion: false, double.MinValue, allowArmorInvulnerability: false);
                            investigatingEmpire.SendEventMessageToEmpire(EventMessageType.BuiltObjectExplodes, string.Format(TextResolver.GetText("SHIPBASE Explodes"), text), empty, abandonedBuiltObject, abandonedBuiltObject);
                        }
                        break;
                    }
                case BuiltObjectEncounterEventType.PirateAmbush:
                    {
                        Empire empire = FindNearestPirateFaction(abandonedBuiltObject.Xpos, abandonedBuiltObject.Ypos, null, includeSuperPirates: false);
                        if (empire != null)
                        {
                            empty = string.Format(TextResolver.GetText("Abandoned Ship Pirate Ambush"), text.ToLower(CultureInfo.InvariantCulture), empire.Name);
                            empire.TakeOwnershipOfBuiltObject(abandonedBuiltObject, empire);
                            abandonedBuiltObject.IsAutoControlled = true;
                            BuiltObject builtObject2 = FindNearestBuiltObject((int)abandonedBuiltObject.Xpos, (int)abandonedBuiltObject.Ypos, investigatingEmpire);
                            if (builtObject2 != null)
                            {
                                BuiltObjectMissionType missionType = BuiltObjectMissionType.Attack;
                                if (empire != null)
                                {
                                    missionType = empire.DetermineDestroyOrCaptureTarget(abandonedBuiltObject, builtObject2, attackingAsGroup: false);
                                }
                                abandonedBuiltObject.AssignMission(missionType, builtObject2, null, BuiltObjectMissionPriority.High);
                                investigatingEmpire.SendEventMessageToEmpire(EventMessageType.PirateAmbush, TextResolver.GetText("Pirate Ambush") + "!", empty, abandonedBuiltObject, abandonedBuiltObject);
                            }
                            break;
                        }
                        goto case BuiltObjectEncounterEventType.Explodes;
                    }
                case BuiltObjectEncounterEventType.Acquire:
                    {
                        bool flag = false;
                        if (abandonedBuiltObject.Name.ToLower(CultureInfo.InvariantCulture).Contains(TextResolver.GetText("Refugee").ToLower(CultureInfo.InvariantCulture)))
                        {
                            flag = true;
                        }
                        string text2 = string.Empty;
                        if (investigatingEmpire == PlayerEmpire && !flag && StoryDistantWorldsEnabled)
                        {
                            text2 = GenerateStoryClue(abandonedBuiltObject);
                        }
                        investigatingEmpire.TakeOwnershipOfBuiltObject(abandonedBuiltObject, investigatingEmpire, setDesignAsObsolete: true);
                        abandonedBuiltObject.SupportCostFactor = 0.5f;
                        abandonedBuiltObject.IsAutoControlled = true;
                        bool flag2 = false;
                        if (abandonedBuiltObject.GameEventId >= 0 && CheckTriggerEvent(abandonedBuiltObject.GameEventId, investigatingEmpire, EventTriggerType.Investigate, null))
                        {
                            abandonedBuiltObject.PlayerEmpireEncounterAction = BuiltObjectEncounterAction.None;
                            flag2 = true;
                        }
                        if (flag2)
                        {
                            break;
                        }
                        string text3 = GenerateLocationDescription(abandonedBuiltObject.Xpos, abandonedBuiltObject.Ypos);
                        empty = ((!flag) ? string.Format(TextResolver.GetText("Abandoned Ship Acquire Intro"), ResolveDescription(abandonedBuiltObject.SubRole), abandonedBuiltObject.Name, text3) : string.Format(TextResolver.GetText("Abandoned Ship Acquire Intro Refugee"), ResolveDescription(abandonedBuiltObject.SubRole), text3));
                        if (flag)
                        {
                            empty = empty + ". " + TextResolver.GetText("Abandoned Ship Acquire Transfer Refugee");
                        }
                        else if (!string.IsNullOrEmpty(text2))
                        {
                            empty += ".\n\n";
                            empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Message"), text.ToLower(CultureInfo.InvariantCulture));
                            empty = empty + text2 + "\n\n";
                            empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Transfer X"), text.ToLower(CultureInfo.InvariantCulture));
                        }
                        else
                        {
                            empty = empty + ". " + TextResolver.GetText("Abandoned Ship Acquire Transfer");
                        }
                        if (abandonedBuiltObject.Role == BuiltObjectRole.Military && investigatingEmpire == PlayerEmpire)
                        {
                            double num = ResolveTechBonusFactor(investigatingEmpire, this, abandonedBuiltObject);
                            if (num > 1.0)
                            {
                                empty = empty + "\n\n" + TextResolver.GetText("Abandoned Ship Acquire Tech Bonus");
                            }
                        }
                        if (abandonedBuiltObject.EncounterGovernmentTypeId < byte.MaxValue)
                        {
                            GovernmentAttributes governmentAttributes = Governments[abandonedBuiltObject.EncounterGovernmentTypeId];
                            if (investigatingEmpire.AllowableGovernmentTypes.Contains(abandonedBuiltObject.EncounterGovernmentTypeId))
                            {
                                empty += "\n\n";
                                empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Government Existing"), text.ToLower(CultureInfo.InvariantCulture), governmentAttributes.Name);
                                empty += "\n\n";
                                empty += TextResolver.GetText("Ruins Secret Form of Government Revealed Adoption");
                            }
                            else
                            {
                                empty += "\n\n";
                                empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Government"), text.ToLower(CultureInfo.InvariantCulture), governmentAttributes.Name);
                                string text4 = string.Empty;
                                switch (governmentAttributes.Availability)
                                {
                                    case 3:
                                        text4 = TextResolver.GetText("Government Description Way of Darkness");
                                        break;
                                    case 2:
                                        text4 = TextResolver.GetText("Government Description Way of the Ancients");
                                        break;
                                }
                                empty += text4;
                                empty += "\n\n";
                                empty += TextResolver.GetText("Ruins Secret Form of Government Revealed Adoption");
                                investigatingEmpire.AllowableGovernmentTypes.Add(abandonedBuiltObject.EncounterGovernmentTypeId);
                            }
                            abandonedBuiltObject.EncounterGovernmentTypeId = byte.MaxValue;
                        }
                        if (abandonedBuiltObject.EncounterExplorationBonus > 0)
                        {
                            int encounterExplorationBonus = abandonedBuiltObject.EncounterExplorationBonus;
                            abandonedBuiltObject.EncounterExplorationBonus = 0;
                            for (int i = 0; i < encounterExplorationBonus; i++)
                            {
                                Habitat habitat = FastFindNearestUnexploredHabitat(abandonedBuiltObject.Xpos, abandonedBuiltObject.Ypos, investigatingEmpire);
                                if (habitat == null)
                                {
                                    break;
                                }
                                investigatingEmpire.SystemVisibility[habitat.SystemIndex].TotallyExplored = true;
                                if (investigatingEmpire.ResourceMap != null)
                                {
                                    for (int j = 0; j < Systems[habitat.SystemIndex].Habitats.Count; j++)
                                    {
                                        Habitat habitat2 = Systems[habitat.SystemIndex].Habitats[j];
                                        investigatingEmpire.ResourceMap.SetResourcesKnown(habitat2, known: true);
                                    }
                                    if (Systems[habitat.SystemIndex].SystemStar != null)
                                    {
                                        investigatingEmpire.ResourceMap.SetResourcesKnown(Systems[habitat.SystemIndex].SystemStar, known: true);
                                    }
                                }
                                SystemVisibilityStatus status = investigatingEmpire.SystemVisibility[habitat.SystemIndex].Status;
                                if (status == SystemVisibilityStatus.Unexplored || status == SystemVisibilityStatus.Undefined)
                                {
                                    investigatingEmpire.SystemVisibility[habitat.SystemIndex].Status = SystemVisibilityStatus.Explored;
                                }
                            }
                            empty += "\n\n";
                            empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Maps"), text.ToLower(CultureInfo.InvariantCulture), encounterExplorationBonus.ToString());
                        }
                        if (abandonedBuiltObject.EncounterMoneyBonus > 0)
                        {
                            investigatingEmpire.StateMoney += abandonedBuiltObject.EncounterMoneyBonus;
                            investigatingEmpire.PirateEconomy.PerformIncome(abandonedBuiltObject.EncounterMoneyBonus, PirateIncomeType.Undefined, CurrentStarDate);
                            empty += "\n\n";
                            empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Money"), text.ToLower(CultureInfo.InvariantCulture), abandonedBuiltObject.EncounterMoneyBonus.ToString("###,###,##0"));
                            abandonedBuiltObject.EncounterMoneyBonus = 0;
                        }
                        if (abandonedBuiltObject.EncounterTechAdvanceCount > 0)
                        {
                            if (abandonedBuiltObject.EncounterTechAdvanceCount == 1)
                            {
                                ResearchNode researchNode = investigatingEmpire.Research.SelectRandomNextResearchProjectExcludeSuperWeapons(this);
                                if (researchNode != null)
                                {
                                    investigatingEmpire.DoResearchBreakthrough(researchNode, selfResearched: true, blockMessages: true, suppressUpdate: true);
                                    investigatingEmpire.Research.Update(investigatingEmpire.DominantRace);
                                    investigatingEmpire.ReviewDesignsBuiltObjectsImprovedComponents();
                                    investigatingEmpire.ReviewResearchAbilities();
                                    empty += "\n\n";
                                    empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Tech"), text.ToLower(CultureInfo.InvariantCulture), researchNode.Name);
                                }
                            }
                            else
                            {
                                empty += "\n\n";
                                empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Tech Multiple"), text.ToLower(CultureInfo.InvariantCulture));
                                for (int k = 0; k < abandonedBuiltObject.EncounterTechAdvanceCount; k++)
                                {
                                    ResearchNode researchNode2 = investigatingEmpire.Research.SelectRandomNextResearchProjectExcludeSuperWeapons(this);
                                    if (researchNode2 != null)
                                    {
                                        investigatingEmpire.DoResearchBreakthrough(researchNode2, selfResearched: true, blockMessages: true, suppressUpdate: false);
                                        empty = empty + researchNode2.Name + ", ";
                                    }
                                }
                                investigatingEmpire.Research.Update(investigatingEmpire.DominantRace);
                                investigatingEmpire.ReviewDesignsBuiltObjectsImprovedComponents();
                                investigatingEmpire.ReviewResearchAbilities();
                                empty = empty.Substring(0, empty.Length - 2);
                            }
                            abandonedBuiltObject.EncounterTechAdvanceCount = 0;
                        }
                        if (string.IsNullOrEmpty(text2) && investigatingEmpire == PlayerEmpire && !flag)
                        {
                            string text5 = CheckForStoryLocationHint();
                            if (!string.IsNullOrEmpty(text5))
                            {
                                empty += "\n\n";
                                empty += "*** ";
                                empty = empty + string.Format(TextResolver.GetText("Abandoned Ship Acquire NAVIGATIONAL DIRECTIONS"), text.ToLower(CultureInfo.InvariantCulture)) + " ";
                                empty += text5;
                                empty += ". ***\n\n";
                                empty += TextResolver.GetText("We should send a ship to investigate this location.");
                            }
                            else if (!flag && Rnd.Next(0, 2) == 1)
                            {
                                string text6 = GenerateNavigationalBonusMessage(abandonedBuiltObject.Xpos, abandonedBuiltObject.Ypos, investigatingEmpire);
                                if (!string.IsNullOrEmpty(text6))
                                {
                                    empty += "\n\n";
                                    empty += "*** ";
                                    empty = empty + string.Format(TextResolver.GetText("Abandoned Ship Acquire NAVIGATIONAL DIRECTIONS"), text.ToLower(CultureInfo.InvariantCulture)) + " ";
                                    empty += text6;
                                    empty += ". ***\n\n";
                                    empty += TextResolver.GetText("Maybe we should send a ship to investigate this location.");
                                }
                            }
                        }
                        if (abandonedBuiltObject.SubRole == BuiltObjectSubRole.ColonyShip && abandonedBuiltObject.NativeRace != null)
                        {
                            empty += "\n\n";
                            empty += string.Format(TextResolver.GetText("Abandoned Ship Acquire Colony Ship"), abandonedBuiltObject.NativeRace.Name);
                            empty += "\n\n";
                            empty += GenerateRaceReport(abandonedBuiltObject.NativeRace);
                        }
                        if (flag)
                        {
                            investigatingEmpire.SendMessageToEmpire(investigatingEmpire, EmpireMessageType.ExplorationBuiltObject, abandonedBuiltObject, empty);
                            break;
                        }
                        string text7 = TextResolver.GetText("Abandoned Ship Acquired");
                        if (abandonedBuiltObject.Role == BuiltObjectRole.Base)
                        {
                            text7 = TextResolver.GetText("Abandoned Base Acquired");
                        }
                        if (abandonedBuiltObject.PlayerEmpireEncounterAction == BuiltObjectEncounterAction.Notify)
                        {
                            investigatingEmpire.SendMessageToEmpire(investigatingEmpire, EmpireMessageType.ExplorationBuiltObject, abandonedBuiltObject, empty);
                        }
                        else
                        {
                            EventMessageType eventMessageType = EventMessageType.FreeSuperShip;
                            if (!string.IsNullOrEmpty(text2))
                            {
                                text7 = TextResolver.GetText("Galactic History Uncovered");
                                eventMessageType = EventMessageType.StoryClue;
                            }
                            investigatingEmpire.SendEventMessageToEmpire(eventMessageType, text7, empty, abandonedBuiltObject, abandonedBuiltObject);
                        }
                        abandonedBuiltObject.PlayerEmpireEncounterAction = BuiltObjectEncounterAction.None;
                        break;
                    }
            }
        }

        public void GenerateSpecialBonusRuins()
        {
            Habitat habitat = FindLonelyHabitat(RuinType.EmpireBonus, HabitatType.BarrenRock);
            if (habitat != null)
            {
                habitat.Ruin = GenerateRuin(habitat, TextResolver.GetText("Energy Engineering Facility"), 7, RuinType.EmpireBonus);
                habitat.Ruin.BonusResearchEnergy = 0.5;
                string text = "";
                text = text ?? "";
                text = text ?? "";
                text = text ?? "";
                habitat.Ruin.Description = text;
                if (!_RuinsHabitats.Contains(habitat))
                {
                    _RuinsHabitats.Add(habitat);
                }
            }
            habitat = FindLonelyHabitat(RuinType.EmpireBonus, HabitatType.BarrenRock);
            if (habitat != null)
            {
                habitat.Ruin = GenerateRuin(habitat, TextResolver.GetText("Techno Nexus"), 7, RuinType.EmpireBonus);
                habitat.Ruin.BonusResearchHighTech = 0.5;
                string text2 = "";
                text2 = text2 ?? "";
                text2 = text2 ?? "";
                text2 = text2 ?? "";
                habitat.Ruin.Description = text2;
                if (!_RuinsHabitats.Contains(habitat))
                {
                    _RuinsHabitats.Add(habitat);
                }
            }
            habitat = FindLonelyHabitat(RuinType.EmpireBonus, HabitatType.BarrenRock);
            if (habitat != null)
            {
                habitat.Ruin = GenerateRuin(habitat, TextResolver.GetText("Carida Armaments Installation"), 7, RuinType.EmpireBonus);
                habitat.Ruin.BonusResearchWeapons = 0.5;
                string text3 = "";
                text3 = text3 ?? "";
                text3 = text3 ?? "";
                text3 = text3 ?? "";
                habitat.Ruin.Description = text3;
                if (!_RuinsHabitats.Contains(habitat))
                {
                    _RuinsHabitats.Add(habitat);
                }
            }
            habitat = FindLonelyHabitat(RuinType.EmpireBonus, HabitatType.BarrenRock);
            if (habitat != null)
            {
                habitat.Ruin = GenerateRuin(habitat, TextResolver.GetText("Unity Forum"), 3, RuinType.EmpireBonus);
                habitat.Ruin.BonusDiplomacy = 0.2;
                string text4 = "";
                text4 = text4 ?? "";
                text4 = text4 ?? "";
                text4 = text4 ?? "";
                habitat.Ruin.Description = text4;
                if (!_RuinsHabitats.Contains(habitat))
                {
                    _RuinsHabitats.Add(habitat);
                }
            }
            habitat = FindLonelyHabitat(RuinType.EmpireBonus, HabitatType.BarrenRock);
            if (habitat != null)
            {
                habitat.Ruin = GenerateRuin(habitat, TextResolver.GetText("Garden of Arcadia"), 0, RuinType.EmpireBonus);
                habitat.Ruin.BonusHappiness = 0.1;
                string text5 = "";
                text5 = text5 ?? "";
                text5 = text5 ?? "";
                text5 = text5 ?? "";
                habitat.Ruin.Description = text5;
                if (!_RuinsHabitats.Contains(habitat))
                {
                    _RuinsHabitats.Add(habitat);
                }
            }
            habitat = FindLonelyHabitat(RuinType.EmpireBonus, HabitatType.BarrenRock);
            if (habitat != null)
            {
                habitat.Ruin = GenerateRuin(habitat, TextResolver.GetText("Great Mercantile Exchange"), 8, RuinType.EmpireBonus);
                habitat.Ruin.BonusWealth = 0.1;
                string text6 = "";
                text6 = text6 ?? "";
                text6 = text6 ?? "";
                text6 = text6 ?? "";
                habitat.Ruin.Description = text6;
                if (!_RuinsHabitats.Contains(habitat))
                {
                    _RuinsHabitats.Add(habitat);
                }
            }
            habitat = FindLonelyHabitat(RuinType.EmpireBonus, HabitatType.BarrenRock);
            if (habitat != null)
            {
                habitat.Ruin = GenerateRuin(habitat, TextResolver.GetText("Fortress of Torak"), 14, RuinType.EmpireBonus);
                habitat.Ruin.BonusDefensive = 1.0;
                string text7 = "";
                text7 = text7 ?? "";
                text7 = text7 ?? "";
                text7 = text7 ?? "";
                habitat.Ruin.Description = text7;
                if (!_RuinsHabitats.Contains(habitat))
                {
                    _RuinsHabitats.Add(habitat);
                }
            }
        }

        private Ruin GenerateRuin(Habitat habitat, string name, int pictureRef, RuinType type)
        {
            DetermineHabitatSystemStar(habitat);
            SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
            Ruin ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, 0, 0, 0);
            ruin.Type = type;
            return ruin;
        }

        public string GenerateRuinAbilitiesSummary(Ruin ruin)
        {
            string empty = string.Empty;
            bool flag = CheckRuinsHaveBenefit(ruin, PlayerEmpire);
            bool flag2 = false;
            if ((!ruin.PlayerEmpireEncountered || ruin.Type != RuinType.UnlockResearchProject) && (!ruin.PlayerEmpireEncountered || flag || 1 == 0))
            {
                empty = empty + "(" + TextResolver.GetText("Not Investigated - Details Unknown") + ")";
            }
            else
            {
                empty = empty + string.Format(TextResolver.GetText("X Development bonus for colony"), ruin.DevelopmentBonus.ToString("+#%")) + "\n\n";
                if (ruin.BonusDefensive > 0.0)
                {
                    empty += string.Format(TextResolver.GetText("Ruins Bonus Defensive"), TextResolver.GetText("Colony").ToLower(CultureInfo.InvariantCulture), ruin.BonusDefensive.ToString("#%"));
                    empty = empty.Substring(0, empty.Length - 2);
                }
                if (ruin.BonusDiplomacy > 0.0)
                {
                    empty += string.Format(TextResolver.GetText("Ruins Bonus Diplomacy"), ruin.BonusDiplomacy.ToString("+#%"));
                }
                if (ruin.BonusHappiness > 0.0)
                {
                    empty += string.Format(TextResolver.GetText("Ruins Bonus Happiness"), ruin.BonusHappiness.ToString("+#%"));
                }
                if (ruin.BonusResearchEnergy > 0.0)
                {
                    empty += string.Format(TextResolver.GetText("Ruins Bonus Energy Research"), ruin.BonusResearchEnergy.ToString("+#%"));
                }
                if (ruin.BonusResearchHighTech > 0.0)
                {
                    empty += string.Format(TextResolver.GetText("Ruins Bonus HighTech Research"), ruin.BonusResearchHighTech.ToString("+#%"));
                }
                if (ruin.BonusResearchWeapons > 0.0)
                {
                    empty += string.Format(TextResolver.GetText("Ruins Bonus Weapons Research"), ruin.BonusResearchWeapons.ToString("+#%"));
                }
                if (ruin.BonusWealth > 0.0)
                {
                    empty += string.Format(TextResolver.GetText("Ruins Bonus Colony Income"), ruin.BonusWealth.ToString("+#%"));
                }
            }
            return empty;
        }

        public bool SelectSpecialRuins(Habitat habitat, EventMessageType eventMessageType)
        {
            return SelectSpecialRuins(habitat, eventMessageType, null, 0, allowCreatures: true);
        }

        public bool SelectSpecialRuins(Habitat habitat, EventMessageType eventMessageType, bool allowCreatures)
        {
            return SelectSpecialRuins(habitat, eventMessageType, null, 0, allowCreatures);
        }

        public bool SelectSpecialRuins(Habitat habitat, EventMessageType eventMessageType, Race race, int specialValue)
        {
            return SelectSpecialRuins(habitat, eventMessageType, race, specialValue, allowCreatures: true);
        }

        public bool SelectSpecialRuins(Habitat habitat, EventMessageType eventMessageType, Race race, int specialValue, bool allowCreatures)
        {
            if (habitat == null)
            {
                return false;
            }
            if (habitat.Ruin != null)
            {
                return true;
            }
            if (eventMessageType == EventMessageType.AncientBattleDebrisField || eventMessageType == EventMessageType.CreatureOutbreak || eventMessageType == EventMessageType.FreeSuperShip || eventMessageType == EventMessageType.IndependentPopulation || eventMessageType == EventMessageType.LostColonyFound || eventMessageType == EventMessageType.NewEmpireEmerges || eventMessageType == EventMessageType.NewEmpireRaceAbility || eventMessageType == EventMessageType.PirateFactionJoinsYou || eventMessageType == EventMessageType.TreasureFound)
            {
                throw new ArgumentException("SelectSpecialRuins cannot support this eventMessageType");
            }
            string name = TextResolver.GetText("Ancient Ruins");
            int pictureRef = 0;
            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
            SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
            Ruin ruin = new Ruin(name, 0, 0.1 + Rnd.NextDouble() * 0.2, x, y, 0, 0, 0);
            int num = 0;
            switch (eventMessageType)
            {
                case EventMessageType.ExoticTechDiscovered:
                    {
                        int num3 = 0;
                        ResearchNodeDefinitionList researchNodeDefinitionList = ResearchNodeDefinitions.FindAllNodesBySpecialFunctionCode(3);
                        if (researchNodeDefinitionList.Count > 0)
                        {
                            int index = Rnd.Next(0, researchNodeDefinitionList.Count);
                            num3 = researchNodeDefinitionList[index].ResearchNodeId;
                            switch (Rnd.Next(0, 2))
                            {
                                case 0:
                                    name = string.Format(TextResolver.GetText("Hidden Fortress of X"), habitat2.Name);
                                    pictureRef = 14;
                                    break;
                                case 1:
                                    name = TextResolver.GetText("Nexus of the Red Claw");
                                    pictureRef = 7;
                                    break;
                            }
                            ruin.Type = RuinType.Component;
                            ruin.ResearchProjectId = num3;
                        }
                        else
                        {
                            name = GenerateRuinName(habitat, out pictureRef);
                        }
                        break;
                    }
                case EventMessageType.GalacticRefugees:
                    ruin.Type = RuinType.Refugees;
                    ruin.RefugeesGenerated = false;
                    name = string.Format(TextResolver.GetText("Great Beacon of X"), habitat2.Name);
                    pictureRef = 6;
                    break;
                case EventMessageType.LostBuiltObjectCoordinates:
                    ruin.Type = RuinType.LostBuiltObject;
                    ruin.LostBuiltObjectGenerated = false;
                    name = GenerateRuinName(habitat, out pictureRef);
                    break;
                case EventMessageType.LostColonyCoordinates:
                    ruin.Type = RuinType.LostColony;
                    ruin.LostColonyGenerated = false;
                    name = GenerateRuinName(habitat, out pictureRef);
                    break;
                case EventMessageType.OriginsDiscovery:
                    ruin.OriginsRace = race;
                    ruin.Type = RuinType.Origins;
                    ruin.OriginsApprovalRatingBonus = specialValue;
                    name = string.Format(TextResolver.GetText("Great Archives of X"), habitat2.Name);
                    pictureRef = 10;
                    break;
                case EventMessageType.SleepersAwake:
                    {
                        Race race2 = null;
                        int iterationCount = 0;
                        while (ConditionCheckLimit(race2 == null || RaceFamilies.GetIdsBySpecialFunctionCode(1).Contains(race2.FamilyId) || !race2.Playable, 100, ref iterationCount))
                        {
                            race2 = SelectRace(habitat.Type, RaceFamilies.GetIdsBySpecialFunctionCode(1));
                            if (race2 == null)
                            {
                                num = Rnd.Next(0, 20);
                                race2 = Races[num];
                            }
                        }
                        if (race2 == null)
                        {
                            race2 = Races[0];
                        }
                        ruin.Type = RuinType.NewPopulation;
                        ruin.HabitatNewRace = race2;
                        if (habitat.Quality < 0.5f)
                        {
                            habitat.BaseQuality = (float)(0.5 + Rnd.NextDouble() * 0.3);
                        }
                        if (race2 != null)
                        {
                            name = string.Format(TextResolver.GetText("Silent Chamber of the RACE"), race2.Name);
                        }
                        pictureRef = ((habitat.Type != HabitatType.Ice) ? 1 : 0);
                        break;
                    }
                case EventMessageType.SpecialGovernmentType:
                    {
                        int num2 = -1;
                        GovernmentAttributes firstByAvailability = Governments.GetFirstByAvailability(2);
                        GovernmentAttributes firstByAvailability2 = Governments.GetFirstByAvailability(3);
                        if (firstByAvailability != null && firstByAvailability2 != null)
                        {
                            if (_RuinsGovernmentWayOfAncients < _RuinsGovernmentWayOfDarkness)
                            {
                                num2 = firstByAvailability.GovernmentId;
                                _RuinsGovernmentWayOfAncients++;
                                name = string.Format(TextResolver.GetText("Imperial Archive X"), Rnd.Next(100, 1000).ToString());
                                pictureRef = 11;
                            }
                            else
                            {
                                num2 = firstByAvailability2.GovernmentId;
                                _RuinsGovernmentWayOfDarkness++;
                                name = TextResolver.GetText("Temple of Eternal Blackness");
                                pictureRef = 12;
                            }
                            ruin.Type = RuinType.Government;
                            ruin.SpecialGovernmentId = num2;
                        }
                        break;
                    }
            }
            ruin.Name = name;
            ruin.PictureRef = pictureRef;
            ruin.Description = SelectRuinDescription(habitat);
            RuinCount++;
            if (!_RuinsHabitats.Contains(habitat))
            {
                _RuinsHabitats.Add(habitat);
            }
            if (habitat.Owner == null && allowCreatures && Rnd.Next(0, 3) == 1 && _CreaturePrevalence > 0.0)
            {
                switch (Rnd.Next(0, 3))
                {
                    case 0:
                        GenerateCreatureAtHabitat(CreatureType.Ardilus, habitat, lockLocation: true);
                        break;
                    case 1:
                        if (AllowGiantKaltorGeneration)
                        {
                            GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat, lockLocation: true);
                        }
                        break;
                    case 2:
                        if (AllowGiantKaltorGeneration)
                        {
                            int num4 = Rnd.Next(2, 4);
                            for (int i = 0; i < num4; i++)
                            {
                                GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat, lockLocation: true);
                            }
                        }
                        break;
                }
            }
            habitat.Ruin = ruin;
            return true;
        }

        public bool SelectRuinsUnlockTech(Habitat habitat, int researchNodeId)
        {
            if (habitat == null || researchNodeId < 0)
            {
                return false;
            }
            if (habitat.Ruin != null)
            {
                return true;
            }
            int pictureRef = 0;
            string name = GenerateRuinName(habitat, out pictureRef);
            SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
            Ruin ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, 0, 0, 0);
            ruin.Type = RuinType.UnlockResearchProject;
            ruin.ResearchProjectId = researchNodeId;
            ruin.Description = SelectRuinDescription(habitat);
            RuinCount++;
            if (!_RuinsHabitats.Contains(habitat))
            {
                _RuinsHabitats.Add(habitat);
            }
            habitat.Ruin = ruin;
            return true;
        }

        public Habitat FindPlanetMoonBeyondRangeOrFurthestNoRuins(Habitat center, HabitatList habitats, double range, out double distance)
        {
            Habitat result = null;
            distance = 0.0;
            double num = 0.0;
            double num2 = range * range;
            if (center != null && habitats != null)
            {
                for (int i = 0; i < habitats.Count; i++)
                {
                    Habitat habitat = habitats[i];
                    if (habitat == null || habitat == center || (habitat.Category != HabitatCategoryType.Planet && habitat.Category != HabitatCategoryType.Moon) || habitat.Ruin != null)
                    {
                        continue;
                    }
                    bool flag = false;
                    switch (habitat.Type)
                    {
                        case HabitatType.Volcanic:
                        case HabitatType.Desert:
                        case HabitatType.MarshySwamp:
                        case HabitatType.Continental:
                        case HabitatType.Ocean:
                        case HabitatType.BarrenRock:
                        case HabitatType.Ice:
                            flag = true;
                            break;
                    }
                    if (flag)
                    {
                        double num3 = CalculateDistanceSquared(center.Xpos, center.Ypos, habitat.Xpos, habitat.Ypos);
                        if (num3 >= num2)
                        {
                            distance = Math.Sqrt(num3);
                            return habitat;
                        }
                        if (num3 > num)
                        {
                            result = habitat;
                            num = num3;
                        }
                    }
                }
            }
            distance = Math.Sqrt(num);
            return result;
        }

        private Race SelectRace(HabitatType nativeHabitatType)
        {
            return SelectRace(nativeHabitatType, byte.MaxValue);
        }

        private Race SelectRace(HabitatType nativeHabitatType, byte raceFamilyIdToExclude)
        {
            return SelectRace(nativeHabitatType, new List<byte> { raceFamilyIdToExclude });
        }

        private Race SelectRace(HabitatType nativeHabitatType, List<byte> raceFamilyIdsToExclude)
        {
            Race race = null;
            int num = 0;
            while ((race == null || race.NativeHabitatType != nativeHabitatType || raceFamilyIdsToExclude.Contains(race.FamilyId) || !race.Playable) && num < 100)
            {
                int index = Rnd.Next(0, 20);
                race = Races[index];
                num++;
            }
            return race;
        }

        public void GenerateSilverMistRuins()
        {
            if (!GameDisasterEventsEnabled || !(_CreaturePrevalence > 0.0))
            {
                return;
            }
            int num = Math.Max(1, Math.Min(3, StarCount / 450));
            for (int i = 0; i < num; i++)
            {
                Habitat habitat = FindLonelyHabitat(RuinType.CreatureSwarmSilverMist);
                if (habitat != null)
                {
                    GenerateSilverMistRuin(habitat);
                    SilverMistCreatureRuinsHabitat = habitat;
                }
            }
        }

        public void GenerateSilverMistRuin(Habitat habitat)
        {
            string description = SelectRuinDescription(habitat);
            int pictureRef = 0;
            string name = GenerateRuinName(habitat, out pictureRef);
            SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
            Ruin ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, 0, 0, 0);
            ruin.Type = RuinType.CreatureSwarmSilverMist;
            ruin.Description = description;
            habitat.Ruin = ruin;
            RuinCount++;
            if (!_RuinsHabitats.Contains(habitat))
            {
                _RuinsHabitats.Add(habitat);
            }
        }

        public void SelectRuins(Habitat habitat)
        {
            SelectRuins(habitat, definitePlacement: false, assignCreatures: true, allowNegativeEffects: true);
        }

        public void SelectRuins(Habitat habitat, bool definitePlacement, bool assignCreatures, bool allowNegativeEffects)
        {
            SelectRuins(habitat, definitePlacement, assignCreatures, allowNegativeEffects, allowMapReveal: true);
        }

        public void SelectRuins(Habitat habitat, bool definitePlacement, bool assignCreatures, bool allowNegativeEffects, bool allowMapReveal)
        {
            if (habitat.Ruin != null || (!definitePlacement && ((habitat.Empire != null && habitat.Empire != IndependentEmpire) || habitat.Category == HabitatCategoryType.Asteroid || habitat.Category == HabitatCategoryType.Star || habitat.Category == HabitatCategoryType.GasCloud || habitat.Diameter < 60 || (habitat.Type != HabitatType.Continental && habitat.Type != HabitatType.MarshySwamp && habitat.Type != HabitatType.Desert))))
            {
                return;
            }
            double num = 1.0;
            double num2 = Rnd.NextDouble();
            double num3 = 0.0;
            bool flag = false;
            int researchBonus = 0;
            int mapSystemReveal = 0;
            int moneyBonus = 0;
            if (habitat.Owner == null)
            {
                if (allowMapReveal)
                {
                    switch (Rnd.Next(0, 3))
                    {
                        case 0:
                            researchBonus = Rnd.Next(60000, 120000);
                            break;
                        case 1:
                            mapSystemReveal = Rnd.Next(7, 14);
                            break;
                        case 2:
                            moneyBonus = Rnd.Next(4000, 10000);
                            break;
                    }
                }
                else
                {
                    switch (Rnd.Next(0, 2))
                    {
                        case 0:
                            researchBonus = Rnd.Next(60000, 120000);
                            break;
                        case 1:
                            moneyBonus = Rnd.Next(4000, 10000);
                            break;
                    }
                }
            }
            RuinType type = RuinType.Standard;
            if (allowNegativeEffects && (_CreaturePrevalence > 0.0 || _PiratePrevalence > 0.0) && Rnd.Next(0, 4) == 1)
            {
                researchBonus = 0;
                mapSystemReveal = 0;
                moneyBonus = 0;
                int num4 = Rnd.Next(0, 2);
                if (_CreaturePrevalence <= 0.0 || !AllowGiantKaltorGeneration)
                {
                    num4 = 1;
                }
                else if (_PiratePrevalence <= 0.0)
                {
                    num4 = 0;
                }
                switch (num4)
                {
                    case 0:
                        type = RuinType.CreatureSwarm;
                        break;
                    case 1:
                        type = RuinType.PirateAmbush;
                        break;
                }
            }
            string description = SelectRuinDescription(habitat);
            int pictureRef = 0;
            string name = GenerateRuinName(habitat, out pictureRef);
            double x;
            double y;
            switch (habitat.Type)
            {
                case HabitatType.Continental:
                    num3 = num * 0.16;
                    if (definitePlacement || num2 <= num3)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                        Ruin ruin2 = (habitat.Ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, researchBonus, mapSystemReveal, moneyBonus));
                        flag = true;
                    }
                    break;
                case HabitatType.MarshySwamp:
                    num3 = num * 0.16;
                    if (definitePlacement || num2 <= num3)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                        Ruin ruin5 = (habitat.Ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, researchBonus, mapSystemReveal, moneyBonus));
                        flag = true;
                    }
                    break;
                case HabitatType.Desert:
                    num3 = num * 0.06;
                    if (definitePlacement || num2 <= num3)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                        Ruin ruin3 = (habitat.Ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, researchBonus, mapSystemReveal, moneyBonus));
                        flag = true;
                    }
                    break;
                case HabitatType.Ocean:
                    num3 = num * 0.06;
                    if (definitePlacement || num2 <= num3)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                        Ruin ruin6 = (habitat.Ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, researchBonus, mapSystemReveal, moneyBonus));
                        flag = true;
                    }
                    break;
                case HabitatType.Ice:
                    num3 = num * 0.06;
                    if (definitePlacement || num2 <= num3)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                        Ruin ruin7 = (habitat.Ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, researchBonus, mapSystemReveal, moneyBonus));
                        flag = true;
                    }
                    break;
                case HabitatType.Volcanic:
                    num3 = num * 0.06;
                    if (definitePlacement || num2 <= num3)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                        Ruin ruin4 = (habitat.Ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, researchBonus, mapSystemReveal, moneyBonus));
                        flag = true;
                    }
                    break;
                case HabitatType.BarrenRock:
                    num3 = num * 0.06;
                    if (definitePlacement || num2 <= num3)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                        Ruin ruin = (habitat.Ruin = new Ruin(name, pictureRef, 0.1 + Rnd.NextDouble() * 0.2, x, y, researchBonus, mapSystemReveal, moneyBonus));
                        flag = true;
                    }
                    break;
            }
            if (habitat.Ruin != null)
            {
                habitat.Ruin.Type = type;
                habitat.Ruin.Description = description;
            }
            if (!flag)
            {
                return;
            }
            RuinCount++;
            if (!_RuinsHabitats.Contains(habitat))
            {
                _RuinsHabitats.Add(habitat);
            }
            if (!assignCreatures || habitat.Owner != null || Rnd.Next(0, 3) != 1 || !(_CreaturePrevalence > 0.0))
            {
                return;
            }
            switch (Rnd.Next(0, 3))
            {
                case 0:
                    GenerateCreatureAtHabitat(CreatureType.Ardilus, habitat, lockLocation: true);
                    break;
                case 1:
                    if (AllowGiantKaltorGeneration)
                    {
                        GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat, lockLocation: true);
                    }
                    break;
                case 2:
                    if (AllowGiantKaltorGeneration)
                    {
                        int num5 = Rnd.Next(2, 4);
                        for (int i = 0; i < num5; i++)
                        {
                            GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat, lockLocation: true);
                        }
                    }
                    break;
            }
        }

        private string SelectRuinDescription(Habitat habitat)
        {
            string empty = string.Empty;
            string[] array = new string[6]
            {
            TextResolver.GetText("From our position in orbit we can see that"),
            TextResolver.GetText("Our orbital inspection reveals that"),
            TextResolver.GetText("Surveying from orbit indicates that"),
            TextResolver.GetText("Our scanners show that"),
            TextResolver.GetText("Our sensors indicate that"),
            TextResolver.GetText("From our orbital inspection we detect that")
            };
            string[] array2 = new string[5]
            {
            TextResolver.GetText("appear completely deserted"),
            TextResolver.GetText("have been vacated for a considerable time"),
            TextResolver.GetText("have lain undisturbed for centuries"),
            TextResolver.GetText("are in an advanced state of decay and disrepair"),
            TextResolver.GetText("date from an extremely distant past age")
            };
            string[] array3 = new string[5]
            {
            TextResolver.GetText("lie deep in a dense forest"),
            TextResolver.GetText("sit on a rocky mountain outcrop"),
            TextResolver.GetText("are located in the midst of a grassy plain"),
            TextResolver.GetText("sit at the bottom of a forest-covered valley"),
            TextResolver.GetText("are perched atop rocky coastal cliffs overlooking a vast ocean")
            };
            string[] array4 = new string[5]
            {
            TextResolver.GetText("are surrounded by lush jungle"),
            TextResolver.GetText("are situated on a reed-covered island in the middle of a marshy bog"),
            TextResolver.GetText("are located in a clearing in the heart of a swampy jungle"),
            TextResolver.GetText("sit in a grassy riverside clearing upstream from a large waterfall"),
            TextResolver.GetText("are half-buried in undergrowth near a huge swampy wasteland")
            };
            string[] array5 = new string[5]
            {
            TextResolver.GetText("lie half buried by deep sand drifts"),
            TextResolver.GetText("are nearly consumed by a vast sandbank"),
            TextResolver.GetText("are set into the wall of a rocky canyon"),
            TextResolver.GetText("are perched atop a precipice overlooking a vast dusty plain"),
            TextResolver.GetText("are situated atop a large mesa in a desert plain")
            };
            string[] array6 = new string[2]
            {
            TextResolver.GetText("sit on a rocky island lashed by giant storm waves from the surrounding sea"),
            TextResolver.GetText("sit half-submerged atop a vast reef in the midst of an endless ocean")
            };
            string[] array7 = new string[2]
            {
            TextResolver.GetText("lie deep in snow drifts at the peak of a windswept mountain pass"),
            TextResolver.GetText("are located near the edge of an icy tundra wasteland")
            };
            string[] array8 = new string[2]
            {
            TextResolver.GetText("sit on a stone ledge overlooking a fiery lake of lava"),
            TextResolver.GetText("lie in the midst of a vast rocky plain blanketed with thousands of geothermal steam vents")
            };
            string[] array9 = new string[2]
            {
            TextResolver.GetText("sit at the center of a shadowy, star-lit plain"),
            TextResolver.GetText("lie at the bottom of a desolate, rocky valley")
            };
            string empty2 = string.Empty;
            empty2 = habitat.Type switch
            {
                HabitatType.BarrenRock => array9[Rnd.Next(0, array9.Length)],
                HabitatType.Continental => array3[Rnd.Next(0, array3.Length)],
                HabitatType.Ice => array7[Rnd.Next(0, array7.Length)],
                HabitatType.MarshySwamp => array4[Rnd.Next(0, array4.Length)],
                HabitatType.Ocean => array6[Rnd.Next(0, array6.Length)],
                HabitatType.Desert => array5[Rnd.Next(0, array5.Length)],
                HabitatType.Volcanic => array8[Rnd.Next(0, array8.Length)],
                _ => array2[Rnd.Next(0, array2.Length)],
            };
            if (Rnd.Next(0, 4) == 1)
            {
                empty2 = array2[Rnd.Next(0, array2.Length)];
            }
            string text = array[Rnd.Next(0, array.Length)];
            return text + " " + TextResolver.GetText("the ruins") + " " + empty2 + ".";
        }

        public void SelectCreatures(Habitat habitat)
        {
            if (_CreaturePrevalence <= 0.0)
            {
                return;
            }
            double num = Rnd.NextDouble();
            if (habitat.Type == HabitatType.BarrenRock || habitat.Category == HabitatCategoryType.Asteroid)
            {
                double num2 = _CreaturePrevalence * 0.009;
                if (num <= num2)
                {
                    GenerateCreatureAtHabitat(CreatureType.RockSpaceSlug, habitat);
                }
            }
            else if (habitat.Type == HabitatType.Desert)
            {
                double num3 = _CreaturePrevalence * 0.32;
                bool flag = habitat.Resources.ContainsName("Korabbian Spice");
                if (num <= num3 || flag)
                {
                    GenerateCreatureAtHabitat(CreatureType.DesertSpaceSlug, habitat);
                    if (flag)
                    {
                        GenerateCreatureAtHabitat(CreatureType.DesertSpaceSlug, habitat);
                        GenerateCreatureAtHabitat(CreatureType.DesertSpaceSlug, habitat);
                    }
                }
            }
            else if (habitat.Type == HabitatType.FrozenGasGiant)
            {
                double num4 = _CreaturePrevalence * 0.15;
                if (AllowGiantKaltorGeneration && num <= num4)
                {
                    GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat);
                }
            }
            else if (habitat.Category == HabitatCategoryType.GasCloud)
            {
                double num5 = _CreaturePrevalence * 0.15;
                if (AllowGiantKaltorGeneration && num <= num5)
                {
                    int num6 = Rnd.Next(3, 10);
                    for (int i = 0; i < num6; i++)
                    {
                        GenerateCreatureAtHabitat(CreatureType.Kaltor, habitat);
                    }
                }
            }
            else if (habitat.Type == HabitatType.GasGiant)
            {
                double num7 = _CreaturePrevalence * 0.06;
                if (num <= num7)
                {
                    GenerateCreatureAtHabitat(CreatureType.Ardilus, habitat);
                }
            }
        }

        private Creature GenerateCreatureAtHabitat(CreatureType creatureType, Habitat habitat)
        {
            return GenerateCreatureAtHabitat(creatureType, habitat, lockLocation: false);
        }

        public Creature GenerateCreatureAtHabitat(CreatureType creatureType, Habitat habitat, bool lockLocation)
        {
            return GenerateCreatureAtHabitat(creatureType, habitat, lockLocation, -2000000001, -2000000001);
        }

        public Creature GenerateCreatureAtHabitat(CreatureType creatureType, Habitat habitat, bool lockLocation, int offsetX, int offsetY)
        {
            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
            switch (creatureType)
            {
                case CreatureType.SilverMist:
                    {
                        Creature creature2 = new Creature(this, CreatureType.SilverMist, habitat, offsetX, offsetY);
                        creature2.LocationLocked = false;
                        Creatures.Add(creature2);
                        creature2.NearestSystemStar = habitat2;
                        if (Systems != null && Systems.Count > habitat2.SystemIndex)
                        {
                            Systems[habitat2.SystemIndex].Creatures.Add(creature2);
                        }
                        return creature2;
                    }
                case CreatureType.Ardilus:
                    {
                        Creature creature3 = new Creature(this, CreatureType.Ardilus, habitat, offsetX, offsetY);
                        creature3.LocationLocked = lockLocation;
                        Creatures.Add(creature3);
                        creature3.NearestSystemStar = habitat2;
                        if (Systems != null && Systems.Count > habitat2.SystemIndex)
                        {
                            Systems[habitat2.SystemIndex].Creatures.Add(creature3);
                        }
                        return creature3;
                    }
                case CreatureType.DesertSpaceSlug:
                    {
                        Creature creature4 = new Creature(this, CreatureType.DesertSpaceSlug, habitat, offsetX, offsetY);
                        creature4.LocationLocked = lockLocation;
                        Creatures.Add(creature4);
                        creature4.NearestSystemStar = habitat2;
                        if (Systems != null && Systems.Count > habitat2.SystemIndex)
                        {
                            Systems[habitat2.SystemIndex].Creatures.Add(creature4);
                        }
                        return creature4;
                    }
                case CreatureType.RockSpaceSlug:
                    {
                        Creature creature5 = new Creature(this, CreatureType.RockSpaceSlug, habitat, offsetX, offsetY);
                        if (Rnd.Next(0, 30) == 1)
                        {
                            creature5.Size = Rnd.Next(300, 400);
                            creature5.MaxSize = 450;
                            creature5.AttackStrength = (int)((double)creature5.Size / 30.0);
                            creature5.DamageKillThreshhold = (int)((double)creature5.Size * 1.1);
                        }
                        creature5.LocationLocked = lockLocation;
                        Creatures.Add(creature5);
                        creature5.NearestSystemStar = habitat2;
                        if (Systems != null && Systems.Count > habitat2.SystemIndex)
                        {
                            Systems[habitat2.SystemIndex].Creatures.Add(creature5);
                        }
                        return creature5;
                    }
                case CreatureType.Kaltor:
                    {
                        Creature creature = new Creature(this, CreatureType.Kaltor, habitat, offsetX, offsetY);
                        creature.LocationLocked = lockLocation;
                        Creatures.Add(creature);
                        creature.NearestSystemStar = habitat2;
                        if (Systems != null && Systems.Count > habitat2.SystemIndex)
                        {
                            Systems[habitat2.SystemIndex].Creatures.Add(creature);
                        }
                        return creature;
                    }
                default:
                    return null;
            }
        }

        public CreatureList GenerateCreaturesAtLocation(CreatureType creatureType, int amount, double x, double y, int anchorRange, int offsetRange)
        {
            CreatureList creatureList = new CreatureList();
            Habitat habitat = FastFindNearestSystem(x, y);
            double num = double.MaxValue;
            if (habitat != null)
            {
                num = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            for (int i = 0; i < amount; i++)
            {
                int offsetX = offsetRange - Rnd.Next(0, offsetRange * 2);
                int offsetY = offsetRange - Rnd.Next(0, offsetRange * 2);
                Creature creature = null;
                switch (creatureType)
                {
                    case CreatureType.SilverMist:
                        creature = new Creature(this, CreatureType.SilverMist, null, offsetX, offsetY, new Point((int)x, (int)y), anchorRange);
                        break;
                    case CreatureType.Ardilus:
                        creature = new Creature(this, CreatureType.Ardilus, null, offsetX, offsetY, new Point((int)x, (int)y), anchorRange);
                        break;
                    case CreatureType.DesertSpaceSlug:
                        creature = new Creature(this, CreatureType.DesertSpaceSlug, null, offsetX, offsetY, new Point((int)x, (int)y), anchorRange);
                        break;
                    case CreatureType.RockSpaceSlug:
                        creature = new Creature(this, CreatureType.RockSpaceSlug, null, offsetX, offsetY, new Point((int)x, (int)y), anchorRange);
                        break;
                    case CreatureType.Kaltor:
                        creature = new Creature(this, CreatureType.Kaltor, null, offsetX, offsetY, new Point((int)x, (int)y), anchorRange);
                        break;
                }
                if (creature != null)
                {
                    creature.LocationLocked = true;
                    Creatures.Add(creature);
                    creature.NearestSystemStar = null;
                    creatureList.Add(creature);
                    if (num <= (double)MaxSolarSystemSize + 5000.0 && Systems != null && Systems.Count > habitat.SystemIndex)
                    {
                        creature.NearestSystemStar = habitat;
                        Systems[habitat.SystemIndex].Creatures.Add(creature);
                    }
                }
            }
            return creatureList;
        }

        public static double CalculateCrashResearchProgramCost(Empire empire, ResearchNode project)
        {
            double result = 0.0;
            if (project != null)
            {
                result = project.Cost - project.Progress;
                result /= 4.0;
            }
            return result;
        }

        public void ClearIndependentColoniesFromSystem(int systemIndex)
        {
            if (systemIndex < 0 || systemIndex >= Systems.Count)
            {
                return;
            }
            HabitatList habitats = Systems[systemIndex].Habitats;
            for (int i = 0; i < habitats.Count; i++)
            {
                Habitat habitat = habitats[i];
                if (habitat != null && habitat.Population != null && habitat.Population.Count > 0 && habitat.Empire == IndependentEmpire)
                {
                    habitat.ClearColony(null);
                    if (IndependentColonies.Contains(habitat))
                    {
                        IndependentColonies.Remove(habitat);
                    }
                }
            }
        }

        public void SetEmpireForAllIndependentHabitats()
        {
            if (IndependentEmpire == null)
            {
                return;
            }
            foreach (Habitat habitat in Habitats)
            {
                if (habitat.Population.Count > 0 && habitat.Population.TotalAmount > 0 && habitat.Empire == null)
                {
                    habitat.Owner = IndependentEmpire;
                    habitat.Empire = IndependentEmpire;
                }
            }
        }

        public void SetNativeResourceCargoAndStartingStrategicCargoForAllIndependentHabitats()
        {
            if (IndependentEmpire == null)
            {
                return;
            }
            foreach (Habitat habitat in Habitats)
            {
                SetNativeResourceCargo(habitat);
                SetColonyStartingStrategicResources(habitat);
            }
        }

        private void SetNativeResourceCargo(Habitat habitat)
        {
            if (habitat.Population.Count <= 0 || habitat.Population.TotalAmount <= 0)
            {
                return;
            }
            if (habitat.Cargo == null)
            {
                habitat.Cargo = new CargoList();
            }
            if (habitat.Cargo == null)
            {
                return;
            }
            if (habitat.Resources.Count > 0)
            {
                foreach (HabitatResource resource2 in habitat.Resources)
                {
                    Resource resource = new Resource(resource2.ResourceID);
                    int amount = 500 + (int)(2000.0 * Rnd.NextDouble());
                    Cargo cargo = new Cargo(resource, amount, IndependentEmpire);
                    habitat.Cargo.Add(cargo);
                }
            }
            for (int i = 0; i < ResourceSystem.FuelResources.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystem.FuelResources[i];
                if (resourceDefinition != null && resourceDefinition.IsFuel)
                {
                    habitat.Cargo.Add(new Cargo(new Resource(resourceDefinition.ResourceID), 3000, IndependentEmpire));
                }
            }
            habitat.IsRefuellingDepot = true;
        }

        private void SetColonyStartingStrategicResources(Habitat habitat)
        {
            if (habitat == null || habitat.Population == null || habitat.Population.Count <= 0 || habitat.Population.TotalAmount <= 0)
            {
                return;
            }
            if (habitat.Cargo == null)
            {
                habitat.Cargo = new CargoList();
            }
            for (int i = 0; i < ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null && resourceDefinition.ColonyGrowthResourceLevel > 0f)
                {
                    habitat.Cargo.Add(new Cargo(new Resource(resourceDefinition.ResourceID), habitat.CalculateStrategicResourceConsumptionPerYear(resourceDefinition.ResourceID), IndependentEmpire));
                }
            }
        }

        private RaceList SelectHabitatTypeRaces(HabitatType type)
        {
            RaceList raceList = new RaceList();
            for (int i = 0; i < Races.Count; i++)
            {
                if (Races[i].NativeHabitatType == type)
                {
                    raceList.Add(Races[i]);
                }
            }
            return raceList.ResolvePlayableRaces();
        }

        private bool CheckLocationOverlap(GalaxyLocation location, GalaxyLocationType type)
        {
            double num = 10000.0;
            Rectangle rectangle = new Rectangle((int)((double)location.Xpos / num), (int)((double)location.Ypos / num), (int)((double)location.Width / num), (int)((double)location.Height / num));
            for (int i = 0; i < GalaxyLocations.Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocations[i];
                if (galaxyLocation.Type == type)
                {
                    Rectangle rect = new Rectangle((int)((double)galaxyLocation.Xpos / num), (int)((double)galaxyLocation.Ypos / num), (int)((double)galaxyLocation.Width / num), (int)((double)galaxyLocation.Height / num));
                    if (rectangle.IntersectsWith(rect))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool CheckLocationProximity(GalaxyLocation location, double acceptableDistance, GalaxyLocationType type)
        {
            CalculateGalaxyLocationMidPoint(location, out var x, out var y);
            for (int i = 0; i < GalaxyLocations.Count; i++)
            {
                GalaxyLocation galaxyLocation = GalaxyLocations[i];
                if (galaxyLocation.Type == type && galaxyLocation != location)
                {
                    CalculateGalaxyLocationMidPoint(galaxyLocation, out var x2, out var y2);
                    double num = CalculateDistance(x, y, x2, y2);
                    if (num < acceptableDistance)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public void CalculateGalaxyLocationMidPoint(GalaxyLocation location, out double x, out double y)
        {
            x = (double)location.Xpos + (double)location.Width / 2.0;
            y = (double)location.Ypos + (double)location.Height / 2.0;
        }

        private RaceList DetermineAggressiveRaces(RaceList races, int aggressionLevel, int intelligenceLevel)
        {
            RaceList raceList = new RaceList();
            List<int> list = new List<int>();
            RaceList raceList2 = races.ResolvePlayableRaces();
            for (int i = 0; i < raceList2.Count; i++)
            {
                list.Add(raceList2[i].AggressionLevel);
            }
            Race[] array = raceList2.ToArray();
            int[] keys = list.ToArray();
            Array.Sort(keys, array);
            Array.Reverse(array);
            for (int j = 0; j < array.Length; j++)
            {
                if (array[j].AggressionLevel >= aggressionLevel && array[j].IntelligenceLevel >= intelligenceLevel)
                {
                    raceList.Add(array[j]);
                }
            }
            return raceList;
        }

        private double CheckDistanceBetweenLocations(GalaxyLocation location, GalaxyLocation otherLocation)
        {
            double num = CalculateDistance((double)location.Xpos + (double)location.Width / 2.0, (double)location.Ypos + (double)location.Height / 2.0, (double)otherLocation.Xpos + (double)otherLocation.Width / 2.0, (double)otherLocation.Ypos + (double)otherLocation.Height / 2.0);
            return num - ((double)location.Width / 2.0 + (double)otherLocation.Width / 2.0);
        }

        private double CheckDistanceFromLocation(GalaxyLocation location, double x, double y)
        {
            return CalculateDistance(x, y, (double)location.Xpos + (double)location.Width / 2.0, (double)location.Ypos + (double)location.Height / 2.0);
        }

        public void SetupAlienRacePopulations(EmpireStartList empireStarts, int aggressiveRacesRequired)
        {
            _WidespreadRaces = new RaceList();
            RaceList raceList = DetermineAggressiveRaces(Races, 115, 85);
            int num = 0;
            double num2 = (double)SectorSize * 2.0;
            bool flag = false;
            double val = Math.Sqrt(1400.0) / Math.Sqrt(StarCount);
            val = Math.Max(1.0, Math.Min(val, 3.0));
            double num3 = 0.85 * ((double)SizeX / Math.Sqrt(empireStarts.Count));
            double radiusFromCenterMaximum = 1.0;
            GalaxyLocation location = null;
            int totalColonyAmount = empireStarts.TotalColonyAmount;
            double num4 = (double)totalColonyAmount / (double)empireStarts.Count;
            double val2 = (double)SectorSize * (20.0 / (double)empireStarts.Count) * val;
            double num5 = (double)SectorSize * 1.0;
            val2 = Math.Min(val2, (double)SectorSize * 4.5);
            for (int i = 0; i < empireStarts.Count; i++)
            {
                Race resolvedRace = empireStarts[i].ResolvedRace;
                GalaxyLocation galaxyLocation = DetermineRaceRegion(resolvedRace);
                if (galaxyLocation != null)
                {
                    continue;
                }
                double d = (double)empireStarts.TotalColoniesForRace(resolvedRace) / num4;
                double num6 = (double)empireStarts[i].ProjectedColonyAmount / num4;
                double val3 = num5 + val2 * num6;
                val3 = Math.Min(val3, (double)SectorSize * 6.5);
                double num7 = num3 * Math.Sqrt(Math.Sqrt(d));
                ObtainRandomGalaxyCoordinates(0.0, radiusFromCenterMaximum, out var x, out var y);
                x -= num7 / 2.0;
                y -= num7 / 2.0;
                if (i > 0 && raceList.Count > 1 && empireStarts.Count > 4 && aggressiveRacesRequired > 0 && num < aggressiveRacesRequired && raceList.Contains(resolvedRace))
                {
                    double num8 = CheckDistanceFromLocation(location, x, y);
                    int num9 = 0;
                    flag = true;
                    while (num8 > num2 && num9 < 50)
                    {
                        ObtainRandomGalaxyCoordinates(0.0, radiusFromCenterMaximum, out x, out y);
                        x -= num7 / 2.0;
                        y -= num7 / 2.0;
                        num8 = CheckDistanceFromLocation(location, x, y);
                        num9++;
                    }
                    if (num9 >= 50)
                    {
                        flag = false;
                    }
                }
                GalaxyLocation galaxyLocation2 = new GalaxyLocation(resolvedRace.Name + " Region", GalaxyLocationType.RaceRegion, x, y, num7, num7, -1);
                int num10 = 0;
                int num11 = 0;
                while (CheckLocationOverlap(galaxyLocation2, GalaxyLocationType.RaceRegion) && num11 < 20)
                {
                    ObtainRandomGalaxyCoordinates(0.0, radiusFromCenterMaximum, out x, out y);
                    x -= num7 / 2.0;
                    y -= num7 / 2.0;
                    if (i > 0 && raceList.Count > 1 && empireStarts.Count > 4 && aggressiveRacesRequired > 0 && num < aggressiveRacesRequired && raceList.Contains(resolvedRace))
                    {
                        double num12 = CheckDistanceFromLocation(location, x, y);
                        int num13 = 0;
                        flag = true;
                        while (num12 > num2 && num13 < 50)
                        {
                            ObtainRandomGalaxyCoordinates(0.0, radiusFromCenterMaximum, out x, out y);
                            x -= num7 / 2.0;
                            y -= num7 / 2.0;
                            num12 = CheckDistanceFromLocation(location, x, y);
                            num13++;
                        }
                        if (num13 >= 50)
                        {
                            flag = false;
                        }
                    }
                    galaxyLocation2 = new GalaxyLocation(resolvedRace.Name + " Region", GalaxyLocationType.RaceRegion, x, y, num7, num7, -1);
                    num10++;
                    if (num10 > 50)
                    {
                        num11++;
                        num7 *= 0.9;
                        num7 = Math.Max(num7, 300000.0);
                        num10 = 0;
                    }
                }
                galaxyLocation2.ShowName = false;
                galaxyLocation2.RelatedRace = resolvedRace;
                _GalaxyLocations.Add(galaxyLocation2);
                AddGalaxyLocationIndex(galaxyLocation2);
                if (flag)
                {
                    num++;
                    flag = false;
                }
                if (i == 0)
                {
                    location = galaxyLocation2;
                }
            }
            _ContinentalRaces = new RaceList();
            _ContinentalRaces.Add(Races[0]);
            _ContinentalRaces.Add(Races[1]);
            _ContinentalRaces.Add(Races[3]);
            _ContinentalRaces.Add(Races[4]);
            _ContinentalRaces.Add(Races[6]);
            _ContinentalRaces.Add(Races[8]);
            _ContinentalRaces.Add(Races[9]);
            _ContinentalRaces.Add(Races[19]);
            _ContinentalRaces.Add(Races[10]);
            _ContinentalRaces.Add(Races[16]);
            _ContinentalRaces.Add(Races[17]);
            _MarshySwampRaces = new RaceList();
            _MarshySwampRaces.Add(Races[0]);
            _MarshySwampRaces.Add(Races[1]);
            _MarshySwampRaces.Add(Races[3]);
            _MarshySwampRaces.Add(Races[4]);
            _MarshySwampRaces.Add(Races[6]);
            _MarshySwampRaces.Add(Races[8]);
            _MarshySwampRaces.Add(Races[10]);
            _MarshySwampRaces.Add(Races[16]);
            _MarshySwampRaces.Add(Races[17]);
            _DesertRaces = new RaceList();
            _DesertRaces.Add(Races[2]);
            _DesertRaces.Add(Races[3]);
            _DesertRaces.Add(Races[4]);
            _DesertRaces.Add(Races[6]);
            _DesertRaces.Add(Races[11]);
            _DesertRaces.Add(Races[13]);
            _DesertRaces.Add(Races[18]);
            _OceanRaces = new RaceList();
            _OceanRaces.Add(Races[5]);
            _OceanRaces.Add(Races[7]);
            _OceanRaces.Add(Races[12]);
            _IceRaces = new RaceList();
            _IceRaces.Add(Races[15]);
            _IceRaces.Add(Races[9]);
            _VolcanicRaces = new RaceList();
            _VolcanicRaces.Add(Races[2]);
            _VolcanicRaces.Add(Races[13]);
            _VolcanicRaces.Add(Races[14]);
            _BarrenRockRaces = new RaceList();
        }

        public GalaxyLocation DetermineRaceRegion(Race race)
        {
            for (int i = 0; i < _GalaxyLocations.Count; i++)
            {
                if (_GalaxyLocations[i].Type == GalaxyLocationType.RaceRegion && _GalaxyLocations[i].RelatedRace == race)
                {
                    return _GalaxyLocations[i];
                }
            }
            return null;
        }

        public void DetermineRandomCoordinatesInLocation(GalaxyLocation location, out double x, out double y)
        {
            x = (double)location.Xpos + (double)location.Width * Rnd.NextDouble();
            y = (double)location.Ypos + (double)location.Height * Rnd.NextDouble();
        }

        public void SelectPopulation(Habitat habitat, Habitat sun)
        {
            if (habitat.Diameter < 75)
            {
                return;
            }
            if (_RaceUsed == null)
            {
                _RaceUsed = new bool[Races.Count];
            }
            Race race = null;
            GalaxyLocation galaxyLocation = DetermineNearestRaceRegion(habitat.Xpos, habitat.Ypos);
            if (galaxyLocation != null)
            {
                race = galaxyLocation.RelatedRace;
            }
            if (race != null && race.NativeHabitatType == habitat.Type && !CheckIndependentColonyLimitForRace(race))
            {
                if (habitat.Quality < 0.6f)
                {
                    habitat.BaseQuality = 0.5f + (float)(Rnd.NextDouble() * 0.4);
                }
                int num = 1;
                for (int i = 0; i < num; i++)
                {
                    IndependentCount++;
                    long amount = CalculatePopulationAmount(habitat, race);
                    Population population = new Population(race, amount);
                    population.GrowthRate = 1f + ((float)race.ReproductiveRate - 1f) / 3f;
                    _RaceIndependentColonyCount[race.PictureRef]++;
                    habitat.Population.Add(population);
                    RenameSystemIfHome(sun, race);
                }
                habitat.Population.RecalculateTotalAmount();
            }
        }

        public bool CheckNearIndependentColony(double x, double y, double range)
        {
            double num = range * range;
            for (int i = 0; i < IndependentColonies.Count; i++)
            {
                Habitat habitat = IndependentColonies[i];
                if (habitat != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                    if (num2 < num)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool CheckIndependentColonyLimitForRace(Race race)
        {
            double num = (double)_LifePrevalence / 1000.0;
            int num2 = (int)(Math.Sqrt(StarCount) / 3.5 * num);
            if (_RaceIndependentColonyCount == null || _RaceIndependentColonyCount.Count == 0)
            {
                _RaceIndependentColonyCount = new List<int>();
                for (int i = 0; i < Races.Count; i++)
                {
                    _RaceIndependentColonyCount.Add(0);
                }
            }
            int num3 = _RaceIndependentColonyCount[race.PictureRef];
            if (num3 >= num2)
            {
                return true;
            }
            return false;
        }

        private void FilterRacesByColonyLimits(ref RaceList filteredRaces)
        {
            double num = (double)_LifePrevalence / 1300.0;
            int num2 = (int)(Math.Sqrt(StarCount) / 4.0 * num);
            if (_RaceIndependentColonyCount == null || _RaceIndependentColonyCount.Count == 0)
            {
                _RaceIndependentColonyCount = new List<int>();
                for (int i = 0; i < Races.Count; i++)
                {
                    _RaceIndependentColonyCount.Add(0);
                }
            }
            RaceList raceList = new RaceList();
            foreach (Race filteredRace in filteredRaces)
            {
                int num3 = _RaceIndependentColonyCount[filteredRace.PictureRef];
                if (num3 >= num2)
                {
                    raceList.Add(filteredRace);
                }
            }
            foreach (Race item in raceList)
            {
                filteredRaces.Remove(item);
            }
        }

        private void RenameSystemIfHome(Habitat sun, Race race)
        {
            int pictureRef = race.PictureRef;
            if (!_RaceUsed[pictureRef])
            {
                sun.Name = race.HomeSystemName;
                _RaceUsed[pictureRef] = true;
            }
        }

        private long CalculatePopulationAmount(Habitat habitat, Race race)
        {
            double num = habitat.Quality * 1000f;
            if (habitat.Type == race.NativeHabitatType)
            {
                num *= 1.5;
            }
            long num2 = 0L;
            int num3 = Rnd.Next(0, 30);
            num2 = ((num3 < 0 || num3 > 6) ? (Rnd.Next(100000, 300000) * (long)num) : (Rnd.Next(300000, 600000) * (long)num));
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.2, _Age));
            }
            return num2;
        }

        private void SelectPopulationOLD(Habitat habitat)
        {
            double num = 0.0;
            if (habitat.Diameter < 75)
            {
                return;
            }
            num = habitat.Type switch
            {
                HabitatType.Continental => 33.0 / (double)Races.Count,
                HabitatType.Ice => 4.0 / (double)Races.Count,
                HabitatType.MarshySwamp => 28.0 / (double)Races.Count,
                HabitatType.Ocean => 10.0 / (double)Races.Count,
                HabitatType.Desert => 18.0 / (double)Races.Count,
                HabitatType.Volcanic => 5.0 / (double)Races.Count,
                HabitatType.BarrenRock => 0.2 / (double)Races.Count,
                _ => 0.0,
            };
            int num2 = -1;
            if (Rnd.Next(0, 1000) < (int)((double)_LifePrevalence * num))
            {
                switch (habitat.Type)
                {
                    case HabitatType.Continental:
                        while (num2 < 0)
                        {
                            num2 = habitat.Population.Add(SelectContinentalPopulation(habitat));
                        }
                        break;
                    case HabitatType.Ice:
                        while (num2 < 0)
                        {
                            num2 = habitat.Population.Add(SelectIcePopulation(habitat));
                        }
                        break;
                    case HabitatType.MarshySwamp:
                        while (num2 < 0)
                        {
                            num2 = habitat.Population.Add(SelectMarshySwampPopulation(habitat));
                        }
                        break;
                    case HabitatType.Ocean:
                        while (num2 < 0)
                        {
                            num2 = habitat.Population.Add(SelectOceanPopulation(habitat));
                        }
                        break;
                    case HabitatType.Desert:
                        while (num2 < 0)
                        {
                            num2 = habitat.Population.Add(SelectDesertPopulation(habitat));
                        }
                        break;
                    case HabitatType.Volcanic:
                        while (num2 < 0)
                        {
                            num2 = habitat.Population.Add(SelectVolcanicPopulation(habitat));
                        }
                        break;
                    case HabitatType.BarrenRock:
                        while (num2 < 0)
                        {
                            num2 = habitat.Population.Add(SelectBarrenRockPopulation(habitat));
                        }
                        break;
                }
            }
            habitat.Population.RecalculateTotalAmount();
        }

        private Population SelectBarrenRockPopulation(Habitat habitat)
        {
            int num = Rnd.Next(0, 15);
            Population result = null;
            long num2 = (long)Rnd.Next(5000, 30000) * 1000L;
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, _Age));
            }
            if (num >= 0 && num <= 15)
            {
                result = new Population(Races[18], num2);
            }
            return result;
        }

        private Population SelectIcePopulation(Habitat habitat)
        {
            int num = Rnd.Next(0, 18);
            Population result = null;
            long num2 = 0L;
            int num3 = Rnd.Next(0, 30);
            num2 = ((num3 >= 0 && num3 <= 1) ? ((long)Rnd.Next(1000000, 2500000) * 1000L) : ((num3 < 2 || num3 > 4) ? ((long)Rnd.Next(20000, 300000) * 1000L) : ((long)Rnd.Next(300000, 1000000) * 1000L)));
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, _Age));
            }
            if (num >= 0 && num <= 6)
            {
                result = new Population(Races[32], num2);
            }
            if (num >= 7 && num <= 14)
            {
                result = new Population(Races[15], num2);
            }
            if (num >= 15 && num <= 18)
            {
                result = new Population(Races[23], num2);
            }
            return result;
        }

        private Population SelectVolcanicPopulation(Habitat habitat)
        {
            int num = Rnd.Next(0, 22);
            Population result = null;
            long num2 = 0L;
            int num3 = Rnd.Next(0, 30);
            num2 = ((num3 >= 0 && num3 <= 1) ? ((long)Rnd.Next(1000000, 2500000) * 1000L) : ((num3 < 2 || num3 > 4) ? ((long)Rnd.Next(20000, 300000) * 1000L) : ((long)Rnd.Next(300000, 1000000) * 1000L)));
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, _Age));
            }
            if (num >= 0 && num <= 5)
            {
                result = new Population(Races[17], num2);
            }
            if (num >= 6 && num <= 8)
            {
                result = new Population(Races[3], num2);
            }
            if (num >= 9 && num <= 17)
            {
                result = new Population(Races[29], num2);
            }
            if (num >= 18 && num <= 22)
            {
                result = new Population(Races[30], num2);
            }
            return result;
        }

        private Population SelectOceanPopulation(Habitat habitat)
        {
            int num = Rnd.Next(0, 27);
            Population result = null;
            long num2 = 0L;
            int num3 = Rnd.Next(0, 30);
            num2 = ((num3 >= 0 && num3 <= 1) ? ((long)Rnd.Next(1000000, 2500000) * 1000L) : ((num3 < 2 || num3 > 4) ? ((long)Rnd.Next(20000, 300000) * 1000L) : ((long)Rnd.Next(300000, 1000000) * 1000L)));
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, _Age));
            }
            if (num >= 0 && num <= 7)
            {
                result = new Population(Races[8], num2);
            }
            if (num >= 8 && num <= 16)
            {
                result = new Population(Races[11], num2);
            }
            if (num >= 17 && num <= 21)
            {
                result = new Population(Races[26], num2);
            }
            if (num >= 22 && num <= 27)
            {
                result = new Population(Races[27], num2);
            }
            return result;
        }

        public Population SelectDesertPopulation(Habitat habitat)
        {
            int num = Rnd.Next(0, 66);
            Population result = null;
            long num2 = 0L;
            int num3 = Rnd.Next(0, 30);
            num2 = ((num3 >= 0 && num3 <= 1) ? ((long)Rnd.Next(1000000, 2500000) * 1000L) : ((num3 < 2 || num3 > 4) ? ((long)Rnd.Next(20000, 300000) * 1000L) : ((long)Rnd.Next(300000, 1000000) * 1000L)));
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, _Age));
            }
            if (num >= 0 && num <= 6)
            {
                result = new Population(Races[3], num2);
            }
            if (num >= 7 && num <= 10)
            {
                result = new Population(Races[4], num2);
            }
            if (num >= 11 && num <= 17)
            {
                result = new Population(Races[6], num2);
            }
            if (num >= 18 && num <= 20)
            {
                result = new Population(Races[7], num2);
            }
            if (num >= 21 && num <= 24)
            {
                result = new Population(Races[9], num2);
            }
            if (num >= 25 && num <= 31)
            {
                result = new Population(Races[10], num2);
            }
            if (num >= 32 && num <= 37)
            {
                result = new Population(Races[16], num2);
            }
            if (num >= 38 && num <= 43)
            {
                result = new Population(Races[24], num2);
            }
            if (num >= 44 && num <= 51)
            {
                result = new Population(Races[29], num2);
            }
            if (num >= 52 && num <= 55)
            {
                result = new Population(Races[33], num2);
            }
            if (num >= 56 && num <= 59)
            {
                result = new Population(Races[36], num2);
            }
            if (num >= 60 && num <= 66)
            {
                result = new Population(Races[37], num2);
            }
            return result;
        }

        public Population SelectMarshySwampPopulation(Habitat habitat)
        {
            int num = Rnd.Next(0, 114);
            Population result = null;
            long num2 = 0L;
            int num3 = Rnd.Next(0, 30);
            num2 = ((num3 >= 0 && num3 <= 1) ? ((long)Rnd.Next(1000000, 2500000) * 1000L) : ((num3 < 2 || num3 > 4) ? ((long)Rnd.Next(20000, 300000) * 1000L) : ((long)Rnd.Next(300000, 1000000) * 1000L)));
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, _Age));
            }
            if (num >= 0 && num <= 6)
            {
                result = new Population(Races[0], num2);
            }
            if (num >= 7 && num <= 12)
            {
                result = new Population(Races[1], num2);
            }
            if (num >= 13 && num <= 18)
            {
                result = new Population(Races[2], num2);
            }
            if (num >= 19 && num <= 21)
            {
                result = new Population(Races[4], num2);
            }
            if (num >= 22 && num <= 26)
            {
                result = new Population(Races[5], num2);
            }
            if (num >= 27 && num <= 31)
            {
                result = new Population(Races[6], num2);
            }
            if (num >= 32 && num <= 37)
            {
                result = new Population(Races[7], num2);
            }
            if (num >= 38 && num <= 44)
            {
                result = new Population(Races[10], num2);
            }
            if (num >= 45 && num <= 51)
            {
                result = new Population(Races[12], num2);
            }
            if (num >= 52 && num <= 55)
            {
                result = new Population(Races[13], num2);
            }
            if (num >= 56 && num <= 63)
            {
                result = new Population(Races[14], num2);
            }
            if (num >= 64 && num <= 68)
            {
                result = new Population(Races[19], num2);
            }
            if (num >= 69 && num <= 72)
            {
                result = new Population(Races[26], num2);
            }
            if (num >= 73 && num <= 77)
            {
                result = new Population(Races[31], num2);
            }
            if (num >= 78 && num <= 81)
            {
                result = new Population(Races[21], num2);
            }
            if (num >= 82 && num <= 86)
            {
                result = new Population(Races[22], num2);
            }
            if (num >= 87 && num <= 88)
            {
                result = new Population(Races[23], num2);
            }
            if (num >= 89 && num <= 95)
            {
                result = new Population(Races[25], num2);
            }
            if (num >= 96 && num <= 101)
            {
                result = new Population(Races[28], num2);
            }
            if (num >= 102 && num <= 109)
            {
                result = new Population(Races[34], num2);
            }
            if (num >= 110 && num <= 114)
            {
                result = new Population(Races[35], num2);
            }
            return result;
        }

        public Population SelectContinentalPopulation(Habitat habitat)
        {
            int num = Rnd.Next(0, 111);
            Population result = null;
            long num2 = 0L;
            int num3 = Rnd.Next(0, 30);
            num2 = ((num3 >= 0 && num3 <= 1) ? ((long)Rnd.Next(1000000, 2500000) * 1000L) : ((num3 < 2 || num3 > 4) ? ((long)Rnd.Next(20000, 300000) * 1000L) : ((long)Rnd.Next(300000, 1000000) * 1000L)));
            if (_Age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, _Age));
            }
            if (num >= 0 && num <= 5)
            {
                result = new Population(Races[0], num2);
            }
            if (num >= 6 && num <= 10)
            {
                result = new Population(Races[1], num2);
            }
            if (num >= 11 && num <= 15)
            {
                result = new Population(Races[2], num2);
            }
            if (num >= 16 && num <= 19)
            {
                result = new Population(Races[4], num2);
            }
            if (num >= 20 && num <= 24)
            {
                result = new Population(Races[5], num2);
            }
            if (num >= 25 && num <= 29)
            {
                result = new Population(Races[6], num2);
            }
            if (num >= 30 && num <= 37)
            {
                result = new Population(Races[7], num2);
            }
            if (num >= 38 && num <= 44)
            {
                result = new Population(Races[10], num2);
            }
            if (num >= 45 && num <= 50)
            {
                result = new Population(Races[12], num2);
            }
            if (num >= 51 && num <= 53)
            {
                result = new Population(Races[13], num2);
            }
            if (num >= 54 && num <= 60)
            {
                result = new Population(Races[14], num2);
            }
            if (num >= 61 && num <= 67)
            {
                result = new Population(Races[15], num2);
            }
            if (num >= 68 && num <= 73)
            {
                result = new Population(Races[38], num2);
            }
            if (num >= 74 && num <= 77)
            {
                result = new Population(Races[20], num2);
            }
            if (num >= 78 && num <= 81)
            {
                result = new Population(Races[21], num2);
            }
            if (num >= 82 && num <= 85)
            {
                result = new Population(Races[22], num2);
            }
            if (num >= 86 && num <= 87)
            {
                result = new Population(Races[23], num2);
            }
            if (num >= 88 && num <= 94)
            {
                result = new Population(Races[25], num2);
            }
            if (num >= 95 && num <= 100)
            {
                result = new Population(Races[28], num2);
            }
            if (num >= 101 && num <= 107)
            {
                result = new Population(Races[34], num2);
            }
            if (num >= 108 && num <= 111)
            {
                result = new Population(Races[35], num2);
            }
            return result;
        }

        private double CalculateLifePrevalenceMultiplierForMoonType(HabitatType type, Habitat star)
        {
            double result = 1.0;
            List<double> prevalenceThresholds = new List<double>();
            CalculateMoonTypePrevalenceByPlanetType(star, out prevalenceThresholds);
            switch (type)
            {
                case HabitatType.Continental:
                    result = 1.0 / prevalenceThresholds[1];
                    break;
                case HabitatType.MarshySwamp:
                    result = 1.0 / prevalenceThresholds[2];
                    break;
                case HabitatType.Ocean:
                    result = 1.0 / prevalenceThresholds[3];
                    break;
                case HabitatType.Desert:
                    result = 1.0 / prevalenceThresholds[4];
                    break;
                case HabitatType.Ice:
                    result = 1.0 / prevalenceThresholds[0];
                    break;
                case HabitatType.Volcanic:
                    result = 1.0 / prevalenceThresholds[5];
                    break;
                case HabitatType.BarrenRock:
                    result = 0.0;
                    break;
            }
            return result;
        }

        private void CalculateMoonTypePrevalenceByPlanetType(Habitat planet, out List<double> prevalenceThresholds)
        {
            prevalenceThresholds = new List<double>();
            if (planet.Diameter >= 430)
            {
                if (planet.Type == HabitatType.FrozenGasGiant)
                {
                    prevalenceThresholds.Add(0.15);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.85);
                }
                else
                {
                    prevalenceThresholds.Add(0.08);
                    prevalenceThresholds.Add(0.024);
                    prevalenceThresholds.Add(0.024);
                    prevalenceThresholds.Add(0.062);
                    prevalenceThresholds.Add(0.062);
                    prevalenceThresholds.Add(0.086);
                    prevalenceThresholds.Add(0.662);
                }
            }
            else if (planet.Diameter >= 340)
            {
                if (planet.Type == HabitatType.FrozenGasGiant)
                {
                    prevalenceThresholds.Add(0.15);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.85);
                }
                else
                {
                    prevalenceThresholds.Add(0.093);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.093);
                    prevalenceThresholds.Add(0.093);
                    prevalenceThresholds.Add(0.093);
                    prevalenceThresholds.Add(0.628);
                }
            }
            else
            {
                prevalenceThresholds.Add(0.0);
                prevalenceThresholds.Add(0.0);
                prevalenceThresholds.Add(0.0);
                prevalenceThresholds.Add(0.0);
                prevalenceThresholds.Add(0.0);
                prevalenceThresholds.Add(0.0);
                prevalenceThresholds.Add(1.0);
            }
            _ = (1.0 - _ColonyPrevalence) / 2.0;
            prevalenceThresholds[1] *= _ColonyPrevalence;
            prevalenceThresholds[2] *= _ColonyPrevalence;
        }

        private void SelectMoonType(Habitat parentHabitat, out int diameter, out HabitatType type, out HabitatAtmosphereType atmosphereType, out int atmosphereDensity, out int pictureRef, out int landscapePictureRef)
        {
            type = HabitatType.BarrenRock;
            atmosphereType = HabitatAtmosphereType.None;
            atmosphereDensity = 0;
            pictureRef = 0;
            diameter = 0;
            landscapePictureRef = 0;
            List<double> prevalenceThresholds = new List<double>();
            CalculateMoonTypePrevalenceByPlanetType(parentHabitat, out prevalenceThresholds);
            double num = Rnd.NextDouble();
            double num2 = 0.0;
            double num3 = 0.0;
            int minOrbitDistance;
            int maxOrbitDistance;
            for (int i = 0; i < prevalenceThresholds.Count; i++)
            {
                num2 = num3;
                num3 += prevalenceThresholds[i];
                if (num >= num2 && num < num3)
                {
                    switch (i)
                    {
                        case 0:
                            SelectIcePlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 1:
                            SelectContinentalPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 2:
                            SelectMarshySwampPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 3:
                            SelectOceanPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 4:
                            SelectDesertPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 5:
                            SelectVolcanicPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 6:
                            SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        default:
                            SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                    }
                    break;
                }
            }
            if (diameter <= 0)
            {
                SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            }
            if ((double)diameter > (double)parentHabitat.Diameter * 0.33)
            {
                diameter = (int)((double)parentHabitat.Diameter * ((double)Rnd.Next(28, 33) * 0.01));
            }
            switch (type)
            {
                case HabitatType.Continental:
                    _MoonCountContinental++;
                    break;
                case HabitatType.MarshySwamp:
                    _MoonCountMarshySwamp++;
                    break;
                case HabitatType.Desert:
                    _MoonCountDesert++;
                    break;
                case HabitatType.Ocean:
                    _MoonCountOcean++;
                    break;
                case HabitatType.Ice:
                    _MoonCountIce++;
                    break;
                case HabitatType.Volcanic:
                    _MoonCountVolcanic++;
                    break;
                case HabitatType.BarrenRock:
                    break;
            }
        }

        public void SelectBarrenRockPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.BarrenRock;
            diameter = Rnd.Next(80, 340);
            minOrbitDistance = 2500;
            maxOrbitDistance = 11500;
            SelectBarrenRockPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectBarrenRockPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            pictureRef = GalaxyImages.HabitatImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.HabitatImageCountBarrenRock);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.LandscapeImageCountBarrenRock);
        }

        public void SelectContinentalPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.Continental;
            diameter = Rnd.Next(200, 320);
            minOrbitDistance = 5000;
            maxOrbitDistance = 10000;
            SelectContinentalPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectContinentalPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            pictureRef = GalaxyImages.HabitatImageOffsetContinental + Rnd.Next(0, GalaxyImages.HabitatImageCountContinental);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetContinental + Rnd.Next(0, GalaxyImages.LandscapeImageCountContinental);
        }

        public void SelectIcePlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.Ice;
            diameter = Rnd.Next(180, 320);
            minOrbitDistance = 18000;
            maxOrbitDistance = 23000;
            SelectIcePlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectIcePlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            pictureRef = GalaxyImages.HabitatImageOffsetIce + Rnd.Next(0, GalaxyImages.HabitatImageCountIce);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetIce + Rnd.Next(0, GalaxyImages.LandscapeImageCountIce);
        }

        public void SelectMarshySwampPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.MarshySwamp;
            diameter = Rnd.Next(200, 320);
            minOrbitDistance = 5000;
            maxOrbitDistance = 9500;
            SelectMarshySwampPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectMarshySwampPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            pictureRef = GalaxyImages.HabitatImageOffsetMarshySwamp + Rnd.Next(0, GalaxyImages.HabitatImageCountMarshySwamp);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetMarshySwamp + Rnd.Next(0, GalaxyImages.LandscapeImageCountMarshySwamp);
        }

        public void SelectOceanPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.Ocean;
            diameter = Rnd.Next(200, 320);
            minOrbitDistance = 5000;
            maxOrbitDistance = 10000;
            SelectOceanPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectOceanPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            pictureRef = GalaxyImages.HabitatImageOffsetOcean + Rnd.Next(0, GalaxyImages.HabitatImageCountOcean);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetOcean + Rnd.Next(0, GalaxyImages.LandscapeImageCountOcean);
        }

        public void SelectDesertPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.Desert;
            diameter = Rnd.Next(180, 330);
            minOrbitDistance = 3000;
            maxOrbitDistance = 10300;
            SelectDesertPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectDesertPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            pictureRef = GalaxyImages.HabitatImageOffsetDesert + Rnd.Next(0, GalaxyImages.HabitatImageCountDesert);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetDesert + Rnd.Next(0, GalaxyImages.LandscapeImageCountDesert);
        }

        public void SelectVolcanicPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.Volcanic;
            diameter = Rnd.Next(160, 330);
            minOrbitDistance = 1250;
            maxOrbitDistance = 3500;
            SelectVolcanicPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectVolcanicPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            pictureRef = GalaxyImages.HabitatImageOffsetVolcanic + Rnd.Next(0, GalaxyImages.HabitatImageCountVolcanic);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetVolcanic + Rnd.Next(0, GalaxyImages.LandscapeImageCountVolcanic);
        }

        public void SelectHabitatPictures(Habitat habitat)
        {
            if (habitat.Category == HabitatCategoryType.Asteroid)
            {
                switch (habitat.Type)
                {
                    case HabitatType.BarrenRock:
                        habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsNormal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsNormal));
                        habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.LandscapeImageCountBarrenRock));
                        break;
                    case HabitatType.Ice:
                        habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsIce + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsIce));
                        habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.LandscapeImageCountBarrenRock));
                        break;
                    case HabitatType.Metal:
                        habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsMetal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsMetal));
                        habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.LandscapeImageCountBarrenRock));
                        break;
                    default:
                        habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsNormal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsNormal));
                        habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.LandscapeImageCountBarrenRock));
                        break;
                }
                return;
            }
            switch (habitat.Type)
            {
                case HabitatType.BarrenRock:
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.HabitatImageCountBarrenRock));
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.LandscapeImageCountBarrenRock));
                    break;
                case HabitatType.Continental:
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetContinental + Rnd.Next(0, GalaxyImages.HabitatImageCountContinental + GalaxyImages.HabitatImageCountForest));
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetContinental + Rnd.Next(0, GalaxyImages.LandscapeImageCountContinental + GalaxyImages.LandscapeImageCountForest));
                    break;
                case HabitatType.FrozenGasGiant:
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetFrozenGasGiant + Rnd.Next(0, GalaxyImages.LandscapeImageCountFrozenGasGiant));
                    if (habitat.Resources != null && habitat.Resources.Count > 0)
                    {
                        if (Rnd.Next(0, 5) == 1)
                        {
                            habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetFrozenGasGiantAny + Rnd.Next(0, GalaxyImages.HabitatImageCountFrozenGasGiantAny));
                            break;
                        }
                        string text2 = "Tyderios";
                        int num2 = 0;
                        foreach (HabitatResource resource in habitat.Resources)
                        {
                            if (resource.Abundance > num2)
                            {
                                text2 = resource.Name;
                                num2 = resource.Abundance;
                            }
                        }
                        switch (text2.ToLower(CultureInfo.InvariantCulture))
                        {
                            case "argon":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetFrozenGasGiantArgon + Rnd.Next(0, GalaxyImages.HabitatImageCountFrozenGasGiantArgon));
                                break;
                            case "helium":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetFrozenGasGiantHelium + Rnd.Next(0, GalaxyImages.HabitatImageCountFrozenGasGiantHelium));
                                break;
                            case "krypton":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetFrozenGasGiantKrypton + Rnd.Next(0, GalaxyImages.HabitatImageCountFrozenGasGiantKrypton));
                                break;
                            case "tyderios":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetFrozenGasGiantTyderios + Rnd.Next(0, GalaxyImages.HabitatImageCountFrozenGasGiantTyderios));
                                break;
                            default:
                                {
                                    int maxValue3 = GalaxyImages.HabitatImageCountFrozenGasGiantArgon + GalaxyImages.HabitatImageCountFrozenGasGiantHelium + GalaxyImages.HabitatImageCountFrozenGasGiantKrypton + GalaxyImages.HabitatImageCountFrozenGasGiantTyderios + GalaxyImages.HabitatImageCountFrozenGasGiantAny;
                                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetFrozenGasGiantArgon + Rnd.Next(0, maxValue3));
                                    break;
                                }
                        }
                    }
                    else
                    {
                        int maxValue4 = GalaxyImages.HabitatImageCountFrozenGasGiantAny + GalaxyImages.HabitatImageCountFrozenGasGiantArgon + GalaxyImages.HabitatImageCountFrozenGasGiantHelium + GalaxyImages.HabitatImageCountFrozenGasGiantKrypton + GalaxyImages.HabitatImageCountFrozenGasGiantTyderios;
                        habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetFrozenGasGiantArgon + Rnd.Next(0, maxValue4));
                    }
                    break;
                case HabitatType.GasGiant:
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetGasGiant + Rnd.Next(0, GalaxyImages.LandscapeImageCountGasGiant));
                    if (habitat.Resources != null && habitat.Resources.Count > 0)
                    {
                        if (Rnd.Next(0, 5) == 1)
                        {
                            habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantAny + Rnd.Next(0, GalaxyImages.HabitatImageCountGasGiantAny));
                            break;
                        }
                        string text = "Hydrogen";
                        int num = 0;
                        foreach (HabitatResource resource2 in habitat.Resources)
                        {
                            if (resource2.Abundance > num)
                            {
                                text = resource2.Name;
                                num = resource2.Abundance;
                            }
                        }
                        switch (text.ToLower(CultureInfo.InvariantCulture))
                        {
                            case "argon":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantArgon + Rnd.Next(0, GalaxyImages.HabitatImageCountGasGiantArgon));
                                break;
                            case "helium":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantHelium + Rnd.Next(0, GalaxyImages.HabitatImageCountGasGiantHelium));
                                break;
                            case "krypton":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantKrypton + Rnd.Next(0, GalaxyImages.HabitatImageCountGasGiantKrypton));
                                break;
                            case "caslon":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantCaslon + Rnd.Next(0, GalaxyImages.HabitatImageCountGasGiantCaslon));
                                break;
                            case "hydrogen":
                                habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantHydrogen + Rnd.Next(0, GalaxyImages.HabitatImageCountGasGiantHydrogen));
                                break;
                            default:
                                {
                                    int maxValue = GalaxyImages.HabitatImageCountGasGiantAny + GalaxyImages.HabitatImageCountGasGiantArgon + GalaxyImages.HabitatImageCountGasGiantCaslon + GalaxyImages.HabitatImageCountGasGiantHelium + GalaxyImages.HabitatImageCountGasGiantHydrogen + GalaxyImages.HabitatImageCountGasGiantKrypton;
                                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantArgon + Rnd.Next(0, maxValue));
                                    break;
                                }
                        }
                    }
                    else
                    {
                        int maxValue2 = GalaxyImages.HabitatImageCountGasGiantAny + GalaxyImages.HabitatImageCountGasGiantArgon + GalaxyImages.HabitatImageCountGasGiantCaslon + GalaxyImages.HabitatImageCountGasGiantHelium + GalaxyImages.HabitatImageCountGasGiantHydrogen + GalaxyImages.HabitatImageCountGasGiantKrypton;
                        habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetGasGiantArgon + Rnd.Next(0, maxValue2));
                    }
                    break;
                case HabitatType.Ice:
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetIce + Rnd.Next(0, GalaxyImages.HabitatImageCountIce));
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetIce + Rnd.Next(0, GalaxyImages.LandscapeImageCountIce));
                    break;
                case HabitatType.MarshySwamp:
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetMarshySwamp + Rnd.Next(0, GalaxyImages.HabitatImageCountMarshySwamp));
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetMarshySwamp + Rnd.Next(0, GalaxyImages.LandscapeImageCountMarshySwamp));
                    break;
                case HabitatType.Ocean:
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetOcean + Rnd.Next(0, GalaxyImages.HabitatImageCountOcean));
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetOcean + Rnd.Next(0, GalaxyImages.LandscapeImageCountOcean));
                    break;
                case HabitatType.Desert:
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetDesert + Rnd.Next(0, GalaxyImages.HabitatImageCountDesert));
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetDesert + Rnd.Next(0, GalaxyImages.LandscapeImageCountDesert));
                    break;
                case HabitatType.Volcanic:
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetVolcanic + Rnd.Next(0, GalaxyImages.HabitatImageCountVolcanic));
                    habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetVolcanic + Rnd.Next(0, GalaxyImages.LandscapeImageCountVolcanic));
                    break;
                case HabitatType.MainSequence:
                    habitat.PictureRef = (short)(GalaxyImages.MapStarImageOffsetMainSequence + Rnd.Next(0, GalaxyImages.MapStarImageCountMainSequence));
                    habitat.MapPictureRef = (byte)(GalaxyImages.MapStarImageOffsetMainSequence + Rnd.Next(0, GalaxyImages.MapStarImageCountMainSequence));
                    break;
                case HabitatType.RedGiant:
                    habitat.PictureRef = (short)(GalaxyImages.MapStarImageOffsetRedGiant + Rnd.Next(0, GalaxyImages.MapStarImageCountRedGiant));
                    habitat.MapPictureRef = (byte)(GalaxyImages.MapStarImageOffsetRedGiant + Rnd.Next(0, GalaxyImages.MapStarImageCountRedGiant));
                    break;
                case HabitatType.SuperGiant:
                    habitat.PictureRef = (short)(GalaxyImages.MapStarImageOffsetSuperGiant + Rnd.Next(0, GalaxyImages.MapStarImageCountSuperGiant));
                    habitat.MapPictureRef = (byte)(GalaxyImages.MapStarImageOffsetSuperGiant + Rnd.Next(0, GalaxyImages.MapStarImageCountSuperGiant));
                    break;
                case HabitatType.WhiteDwarf:
                    habitat.PictureRef = (short)(GalaxyImages.MapStarImageOffsetWhiteDwarf + Rnd.Next(0, GalaxyImages.MapStarImageCountWhiteDwarf));
                    habitat.MapPictureRef = (byte)(GalaxyImages.MapStarImageOffsetWhiteDwarf + Rnd.Next(0, GalaxyImages.MapStarImageCountWhiteDwarf));
                    break;
                case HabitatType.Neutron:
                    habitat.PictureRef = (short)(GalaxyImages.MapStarImageOffsetNeutron + Rnd.Next(0, GalaxyImages.MapStarImageCountNeutron));
                    habitat.MapPictureRef = (byte)(GalaxyImages.MapStarImageOffsetNeutron + Rnd.Next(0, GalaxyImages.MapStarImageCountNeutron));
                    break;
                case HabitatType.BlackHole:
                    habitat.PictureRef = (short)(GalaxyImages.MapStarImageOffsetBlackHole + Rnd.Next(0, GalaxyImages.MapStarImageCountBlackHole));
                    habitat.MapPictureRef = (byte)(GalaxyImages.MapStarImageOffsetBlackHole + Rnd.Next(0, GalaxyImages.MapStarImageCountBlackHole));
                    break;
                case HabitatType.SuperNova:
                    break;
            }
        }

        public void SelectGasGiantPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.GasGiant;
            diameter = Rnd.Next(550, 970);
            minOrbitDistance = 12000;
            maxOrbitDistance = 17000;
            SelectGasGiantPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectGasGiantPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            int maxValue = GalaxyImages.HabitatImageCountGasGiantAny + GalaxyImages.HabitatImageCountGasGiantArgon + GalaxyImages.HabitatImageCountGasGiantCaslon + GalaxyImages.HabitatImageCountGasGiantHelium + GalaxyImages.HabitatImageCountGasGiantHydrogen + GalaxyImages.HabitatImageCountGasGiantKrypton;
            pictureRef = GalaxyImages.HabitatImageOffsetGasGiantArgon + Rnd.Next(0, maxValue);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetGasGiant + Rnd.Next(0, GalaxyImages.LandscapeImageCountGasGiant);
        }

        public void SelectFrozenGasGiantPlanet(out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.FrozenGasGiant;
            diameter = Rnd.Next(480, 680);
            minOrbitDistance = 17500;
            maxOrbitDistance = 22000;
            SelectFrozenGasGiantPlanet(diameter, out pictureRef, out landscapePictureRef);
        }

        public void SelectFrozenGasGiantPlanet(int diameter, out int pictureRef, out int landscapePictureRef)
        {
            int maxValue = GalaxyImages.HabitatImageCountFrozenGasGiantAny + GalaxyImages.HabitatImageCountFrozenGasGiantArgon + GalaxyImages.HabitatImageCountFrozenGasGiantHelium + GalaxyImages.HabitatImageCountFrozenGasGiantKrypton + GalaxyImages.HabitatImageCountFrozenGasGiantTyderios;
            pictureRef = GalaxyImages.HabitatImageOffsetFrozenGasGiantArgon + Rnd.Next(0, maxValue);
            landscapePictureRef = GalaxyImages.LandscapeImageOffsetFrozenGasGiant + Rnd.Next(0, GalaxyImages.LandscapeImageCountFrozenGasGiant);
        }

        private double CalculateLifePrevalenceMultiplierForPlanetType(HabitatType type, Habitat star)
        {
            double result = 1.0;
            List<double> prevalenceThresholds = new List<double>();
            CalculatePlanetTypePrevalenceByStarType(star, out prevalenceThresholds);
            switch (type)
            {
                case HabitatType.Continental:
                    result = 1.0 / prevalenceThresholds[1];
                    break;
                case HabitatType.MarshySwamp:
                    result = 1.0 / prevalenceThresholds[2];
                    break;
                case HabitatType.Ocean:
                    result = 1.0 / prevalenceThresholds[3];
                    break;
                case HabitatType.Desert:
                    result = 1.0 / prevalenceThresholds[4];
                    break;
                case HabitatType.Ice:
                    result = 1.0 / prevalenceThresholds[5];
                    break;
                case HabitatType.Volcanic:
                    result = 1.0 / prevalenceThresholds[6];
                    break;
                case HabitatType.BarrenRock:
                    result = 0.0;
                    break;
            }
            return result;
        }

        private void CalculatePlanetTypePrevalenceByStarType(Habitat star, out List<double> prevalenceThresholds)
        {
            prevalenceThresholds = new List<double>();
            switch (star.Type)
            {
                case HabitatType.MainSequence:
                case HabitatType.RedGiant:
                case HabitatType.SuperGiant:
                    prevalenceThresholds.Add(0.213);
                    prevalenceThresholds.Add(0.015);
                    prevalenceThresholds.Add(0.019);
                    prevalenceThresholds.Add(0.029);
                    prevalenceThresholds.Add(0.036);
                    prevalenceThresholds.Add(0.058);
                    prevalenceThresholds.Add(0.062);
                    prevalenceThresholds.Add(0.281);
                    prevalenceThresholds.Add(0.287);
                    break;
                case HabitatType.WhiteDwarf:
                    prevalenceThresholds.Add(0.216);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.176);
                    prevalenceThresholds.Add(0.098);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.51);
                    break;
                case HabitatType.Neutron:
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.333);
                    prevalenceThresholds.Add(0.118);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.549);
                    break;
                default:
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    prevalenceThresholds.Add(0.0);
                    break;
            }
            double num = 1.0 - (1.0 - _ColonyPrevalence) / 2.0;
            prevalenceThresholds[1] *= _ColonyPrevalence;
            prevalenceThresholds[2] *= _ColonyPrevalence;
            prevalenceThresholds[7] *= num;
        }

        private void SelectPlanetType(Habitat parentHabitat, out HabitatType type, out int pictureRef, out int diameter, out int minOrbitDistance, out int maxOrbitDistance, out int landscapePictureRef)
        {
            type = HabitatType.BarrenRock;
            pictureRef = 0;
            landscapePictureRef = 0;
            diameter = 0;
            minOrbitDistance = 0;
            maxOrbitDistance = 0;
            List<double> prevalenceThresholds = new List<double>();
            CalculatePlanetTypePrevalenceByStarType(parentHabitat, out prevalenceThresholds);
            double num = Rnd.NextDouble();
            double num2 = 0.0;
            double num3 = 0.0;
            for (int i = 0; i < prevalenceThresholds.Count; i++)
            {
                num2 = num3;
                num3 += prevalenceThresholds[i];
                if (num >= num2 && num < num3)
                {
                    switch (i)
                    {
                        case 0:
                            SelectFrozenGasGiantPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 1:
                            SelectContinentalPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 2:
                            SelectMarshySwampPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 3:
                            SelectOceanPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 4:
                            SelectDesertPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 5:
                            SelectIcePlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 6:
                            SelectVolcanicPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 7:
                            SelectGasGiantPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        case 8:
                            SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                        default:
                            SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            break;
                    }
                    break;
                }
            }
            if (diameter <= 0)
            {
                SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            }
            switch (type)
            {
                case HabitatType.Continental:
                    _PlanetCountContinental++;
                    break;
                case HabitatType.MarshySwamp:
                    _PlanetCountMarshySwamp++;
                    break;
                case HabitatType.Desert:
                    _PlanetCountDesert++;
                    break;
                case HabitatType.Ocean:
                    _PlanetCountOcean++;
                    break;
                case HabitatType.Ice:
                    _PlanetCountIce++;
                    break;
                case HabitatType.Volcanic:
                    _PlanetCountVolcanic++;
                    break;
                case HabitatType.BarrenRock:
                    break;
            }
        }

        public Habitat SelectStar(HabitatType type, double x, double y)
        {
            Habitat habitat = null;
            int num = 83;
            int num2 = 800;
            short num3 = 0;
            short num4 = 0;
            short num5 = 0;
            int num6 = 0;
            switch (type)
            {
                case HabitatType.MainSequence:
                    num2 = Rnd.Next(950, 1400);
                    num = ((num2 > 1200) ? 84 : 83);
                    num6 = Rnd.Next(0, 4);
                    num3 = (short)Rnd.Next(40, 60);
                    num4 = (short)Rnd.Next(5, 20);
                    num5 = (short)Rnd.Next(5, 12);
                    break;
                case HabitatType.RedGiant:
                    num2 = Rnd.Next(1520, 1720);
                    num = 85;
                    num6 = Rnd.Next(0, 3);
                    num3 = (short)Rnd.Next(70, 95);
                    num4 = (short)Rnd.Next(5, 20);
                    num5 = (short)Rnd.Next(5, 12);
                    break;
                case HabitatType.SuperGiant:
                    num2 = Rnd.Next(1720, 2150);
                    num = 86;
                    num6 = Rnd.Next(0, 3);
                    num3 = (short)Rnd.Next(80, 100);
                    num4 = (short)Rnd.Next(5, 20);
                    num5 = (short)Rnd.Next(5, 12);
                    break;
                case HabitatType.WhiteDwarf:
                    num2 = Rnd.Next(260, 350);
                    num = 87;
                    num6 = Rnd.Next(0, 3);
                    num3 = (short)Rnd.Next(10, 30);
                    num4 = (short)Rnd.Next(20, 40);
                    num5 = (short)Rnd.Next(40, 60);
                    break;
                case HabitatType.Neutron:
                    num2 = Rnd.Next(180, 230);
                    num = 88;
                    num3 = (short)Rnd.Next(1, 5);
                    num4 = (short)Rnd.Next(60, 90);
                    num5 = (short)Rnd.Next(120, 200);
                    break;
                case HabitatType.BlackHole:
                    num2 = Rnd.Next(4500, 6500);
                    num = 95;
                    num3 = (short)Rnd.Next(10, 15);
                    num4 = (short)Rnd.Next(60, 80);
                    num5 = (short)Rnd.Next(90, 130);
                    break;
            }
            double num7 = (double)MaxSolarSystemSize + 500.0;
            x = Math.Max(num7, Math.Min(x, (double)SizeX - num7));
            y = Math.Max(num7, Math.Min(y, (double)SizeY - num7));
            habitat = new Habitat(this, HabitatCategoryType.Star, type, GenerateCodeName(), x, y);
            if (habitat.Type == HabitatType.BlackHole)
            {
                habitat.Name = GenerateBlackHoleName();
            }
            habitat.Diameter = (short)num2;
            habitat.PictureRef = (short)num;
            habitat.LandscapePictureRef = -1;
            habitat.SolarRadiation = (byte)num3;
            habitat.MicrowaveRadiation = (byte)num4;
            habitat.XrayRadiation = (byte)num5;
            SelectHabitatPictures(habitat);
            return habitat;
        }

        public void SelectStar(out HabitatType type, out int diameter, out int pictureRef, out int mapPictureRef, out short solarRadiation, out short microwaveRadiation, out short xrayRadiation)
        {
            int num = Rnd.Next(0, 77);
            type = HabitatType.BarrenRock;
            diameter = 0;
            pictureRef = 0;
            mapPictureRef = 1;
            solarRadiation = 0;
            microwaveRadiation = 0;
            xrayRadiation = 0;
            int num2 = 0;
            if (num >= 0 && num <= 61)
            {
                type = HabitatType.MainSequence;
                diameter = Rnd.Next(950, 1400);
                if (diameter <= 1200)
                {
                    pictureRef = 83;
                }
                else
                {
                    pictureRef = 84;
                }
                num2 = Rnd.Next(0, 4);
                mapPictureRef = num2 + 1;
                solarRadiation = (short)Rnd.Next(40, 60);
                microwaveRadiation = (short)Rnd.Next(5, 20);
                xrayRadiation = (short)Rnd.Next(5, 12);
            }
            else if (num >= 62 && num <= 66)
            {
                type = HabitatType.RedGiant;
                diameter = Rnd.Next(1450, 1620);
                pictureRef = 85;
                num2 = Rnd.Next(0, 3);
                mapPictureRef = num2 + 7;
                solarRadiation = (short)Rnd.Next(70, 95);
                microwaveRadiation = (short)Rnd.Next(5, 20);
                xrayRadiation = (short)Rnd.Next(5, 12);
            }
            else if (num >= 67 && num <= 69)
            {
                type = HabitatType.SuperGiant;
                diameter = Rnd.Next(1620, 1950);
                pictureRef = 86;
                num2 = Rnd.Next(0, 3);
                mapPictureRef = num2 + 7;
                solarRadiation = (short)Rnd.Next(80, 100);
                microwaveRadiation = (short)Rnd.Next(5, 20);
                xrayRadiation = (short)Rnd.Next(5, 12);
            }
            else if (num >= 70 && num <= 72)
            {
                type = HabitatType.WhiteDwarf;
                diameter = Rnd.Next(260, 350);
                pictureRef = 87;
                num2 = Rnd.Next(0, 3);
                mapPictureRef = num2 + 13;
                solarRadiation = (short)Rnd.Next(10, 30);
                microwaveRadiation = (short)Rnd.Next(20, 40);
                xrayRadiation = (short)Rnd.Next(40, 60);
            }
            else if (num >= 73 && num <= 74)
            {
                type = HabitatType.Neutron;
                diameter = Rnd.Next(180, 230);
                pictureRef = 88;
                mapPictureRef = 6;
                solarRadiation = (short)Rnd.Next(1, 5);
                microwaveRadiation = (short)Rnd.Next(60, 90);
                xrayRadiation = (short)Rnd.Next(120, 200);
            }
            else if (num >= 75 && num <= 75)
            {
                type = HabitatType.BlackHole;
                diameter = Rnd.Next(4500, 6500);
                pictureRef = 95;
                mapPictureRef = 0;
                solarRadiation = (short)Rnd.Next(10, 15);
                microwaveRadiation = (short)Rnd.Next(60, 80);
                xrayRadiation = (short)Rnd.Next(90, 130);
            }
            else
            {
                type = HabitatType.SuperNova;
                diameter = Rnd.Next(300, 900);
                pictureRef = 0;
                mapPictureRef = 0;
                solarRadiation = (short)Rnd.Next(60, 80);
                microwaveRadiation = (short)Rnd.Next(70, 110);
                xrayRadiation = (short)Rnd.Next(160, 220);
            }
        }

        private HabitatAtmosphereType SelectAtmosphere(HabitatType habitatType, int habitatSize, out int atmosphereDensity)
        {
            HabitatAtmosphereType result = HabitatAtmosphereType.None;
            atmosphereDensity = 0;
            int num = 0;
            num = Rnd.Next(0, 10);
            switch (habitatType)
            {
                case HabitatType.BarrenRock:
                    result = ((num == 10 && habitatSize > 40) ? HabitatAtmosphereType.CarbonDioxide : HabitatAtmosphereType.None);
                    atmosphereDensity = Rnd.Next(10, 50);
                    break;
                case HabitatType.Continental:
                    if (num >= 0 && num <= 5)
                    {
                        result = HabitatAtmosphereType.NitrogenOxygen;
                    }
                    if (num >= 6 && num <= 8)
                    {
                        result = HabitatAtmosphereType.Oxygen;
                    }
                    if (num >= 9 && num <= 10)
                    {
                        result = HabitatAtmosphereType.CarbonDioxide;
                    }
                    atmosphereDensity = Rnd.Next(60, 100);
                    break;
                case HabitatType.FrozenGasGiant:
                    result = ((num > 6) ? HabitatAtmosphereType.NitrogenArgonMethane : HabitatAtmosphereType.HydrogenHelium);
                    atmosphereDensity = Rnd.Next(60, 100);
                    break;
                case HabitatType.GasGiant:
                    result = ((num > 9) ? HabitatAtmosphereType.NitrogenArgonMethane : HabitatAtmosphereType.HydrogenHelium);
                    atmosphereDensity = Rnd.Next(60, 100);
                    break;
                case HabitatType.Ice:
                    if (num >= 0 && num <= 5)
                    {
                        result = HabitatAtmosphereType.NitrogenOxygen;
                    }
                    if (num >= 6 && num <= 7)
                    {
                        result = HabitatAtmosphereType.CarbonDioxide;
                    }
                    if (num >= 8 && num <= 8)
                    {
                        result = HabitatAtmosphereType.SulphurDioxide;
                    }
                    if (num >= 9 && num <= 10)
                    {
                        result = HabitatAtmosphereType.Oxygen;
                    }
                    atmosphereDensity = Rnd.Next(40, 90);
                    break;
                case HabitatType.MarshySwamp:
                    if (num >= 0 && num <= 5)
                    {
                        result = HabitatAtmosphereType.CarbonDioxide;
                    }
                    if (num >= 6 && num <= 8)
                    {
                        result = HabitatAtmosphereType.NitrogenOxygen;
                    }
                    if (num >= 9 && num <= 10)
                    {
                        result = HabitatAtmosphereType.NitrogenArgonMethane;
                    }
                    atmosphereDensity = Rnd.Next(60, 100);
                    break;
                case HabitatType.Ocean:
                    if (num >= 0 && num <= 5)
                    {
                        result = HabitatAtmosphereType.CarbonDioxide;
                    }
                    if (num >= 6 && num <= 9)
                    {
                        result = HabitatAtmosphereType.NitrogenOxygen;
                    }
                    if (num >= 10 && num <= 10)
                    {
                        result = HabitatAtmosphereType.SulphurDioxide;
                    }
                    atmosphereDensity = Rnd.Next(50, 100);
                    break;
                case HabitatType.Desert:
                    if (num >= 0 && num <= 5)
                    {
                        result = HabitatAtmosphereType.NitrogenOxygen;
                    }
                    if (num >= 6 && num <= 8)
                    {
                        result = HabitatAtmosphereType.Oxygen;
                    }
                    if (num >= 9 && num <= 10)
                    {
                        result = HabitatAtmosphereType.None;
                    }
                    atmosphereDensity = Rnd.Next(30, 80);
                    break;
                case HabitatType.Volcanic:
                    if (num >= 0 && num <= 6)
                    {
                        result = HabitatAtmosphereType.SulphurDioxide;
                    }
                    if (num >= 7 && num <= 8)
                    {
                        result = HabitatAtmosphereType.CarbonDioxide;
                    }
                    if (num >= 9 && num <= 10)
                    {
                        result = HabitatAtmosphereType.NitrogenArgonMethane;
                    }
                    atmosphereDensity = Rnd.Next(30, 90);
                    break;
            }
            return result;
        }

        public double CalculateAngleFromCoords(double x, double y, double centerX, double centerY, double distance)
        {
            double num = 0.0;
            double num2 = Math.PI / 2.0;
            double num3 = num2 * -1.0;
            if (x < centerX)
            {
                if (y < centerY)
                {
                    return num3 - (num2 + Math.Asin((y - centerY) / distance));
                }
                return num2 + (num2 - Math.Asin((y - centerY) / distance));
            }
            if (y < centerY)
            {
                return Math.Asin((y - centerY) / distance);
            }
            return Math.Asin((y - centerY) / distance);
        }

        public static double CalculateDistanceStatic(double x1, double y1, double x2, double y2)
        {
            double num = x1 - x2;
            double num2 = y1 - y2;
            return Math.Sqrt(num2 * num2 + num * num);
        }

        public static double CalculateDistanceSquaredStatic(double x1, double y1, double x2, double y2)
        {
            double num = x1 - x2;
            double num2 = y1 - y2;
            return num2 * num2 + num * num;
        }

        public double CalculateDistance(double x1, double y1, double x2, double y2)
        {
            double num = x1 - x2;
            double num2 = y1 - y2;
            return Math.Sqrt(num2 * num2 + num * num);
        }

        public Habitat IdentifyWonderHabitat(Empire empire, PlanetaryFacility wonder)
        {
            if (wonder != null && empire != null && empire.Colonies != null)
            {
                for (int i = 0; i < empire.Colonies.Count; i++)
                {
                    Habitat habitat = empire.Colonies[i];
                    if (habitat == null || habitat.HasBeenDestroyed || habitat.Facilities == null)
                    {
                        continue;
                    }
                    for (int j = 0; j < habitat.Facilities.Count; j++)
                    {
                        PlanetaryFacility planetaryFacility = habitat.Facilities[j];
                        if (planetaryFacility != null && planetaryFacility.ConstructionProgress >= 1f && planetaryFacility.Type == PlanetaryFacilityType.Wonder && planetaryFacility.WonderType == wonder.WonderType)
                        {
                            return habitat;
                        }
                    }
                }
            }
            return null;
        }

        public Habitat IdentifyRuinHabitat(Ruin ruin)
        {
            for (int i = 0; i < RuinsHabitats.Count; i++)
            {
                if (RuinsHabitats[i].Ruin != null && RuinsHabitats[i].Ruin == ruin)
                {
                    return RuinsHabitats[i];
                }
            }
            return null;
        }

        private Habitat FindNearestSystemGasCloudAsteroidInIndex(int x, int y, GalaxyIndex index, out double distance)
        {
            Habitat habitat = null;
            distance = double.MaxValue;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (habitatList[i].Parent == null)
                {
                    double num = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                    if (num < distance)
                    {
                        habitat = habitatList[i];
                        distance = num;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public BuiltObject FastFindNearestShipInSystem(double x, double y, Habitat systemStar)
        {
            BuiltObject result = null;
            double num = double.MaxValue;
            BuiltObjectList builtObjectsAtLocation = GetBuiltObjectsAtLocation(x, y, MaxSolarSystemSize * 2);
            for (int i = 0; i < builtObjectsAtLocation.Count; i++)
            {
                BuiltObject builtObject = builtObjectsAtLocation[i];
                if (builtObject != null && builtObject.NearestSystemStar == systemStar)
                {
                    double num2 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    if (num2 < num)
                    {
                        num = num2;
                        result = builtObjectsAtLocation[i];
                    }
                }
            }
            return result;
        }

        public Habitat FastFindNearestPlanetMoonOfTypesUnoccupiedSystem(double x, double y, Empire empire, List<HabitatType> types)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                foreach (GalaxyIndex item in galaxyIndexList)
                {
                    double distance;
                    Habitat habitat = FastFindNearestPlanetMoonOfTypedUnoccupiedSystemInIndex((int)x, (int)y, item, out distance, empire, types);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FastFindNearestPlanetMoonOfTypedUnoccupiedSystemInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire, List<HabitatType> types)
        {
            Habitat habitat = null;
            SystemInfoList systemInfoList = SystemsIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < systemInfoList.Count; i++)
            {
                if (systemInfoList[i].PlanetCount <= 0)
                {
                    continue;
                }
                EmpireSystemSummary dominantEmpire = systemInfoList[i].DominantEmpire;
                if (dominantEmpire != null && dominantEmpire.Empire != null && dominantEmpire.Empire != empire)
                {
                    continue;
                }
                if (systemInfoList[i].SystemStar != null)
                {
                    int num = CheckEmpireTerritoryIdAtLocation(systemInfoList[i].SystemStar.Xpos, systemInfoList[i].SystemStar.Ypos);
                    if (num >= 0 && num != empire.EmpireId)
                    {
                        continue;
                    }
                }
                int num2 = Rnd.Next(0, systemInfoList[i].Habitats.Count);
                for (int j = num2; j < systemInfoList[i].Habitats.Count; j++)
                {
                    if ((systemInfoList[i].Habitats[j].Category == HabitatCategoryType.Moon || systemInfoList[i].Habitats[j].Category == HabitatCategoryType.Planet) && (types == null || types.Count == 0 || types.Contains(systemInfoList[i].Habitats[j].Type)) && (systemInfoList[i].Habitats[j].Empire == null || systemInfoList[i].Habitats[j].Empire == IndependentEmpire))
                    {
                        double num3 = CalculateDistanceSquared(x, y, systemInfoList[i].Habitats[j].Xpos, systemInfoList[i].Habitats[j].Ypos);
                        if (num3 < distance)
                        {
                            habitat = systemInfoList[i].Habitats[j];
                            distance = num3;
                        }
                    }
                }
                for (int k = 0; k < num2; k++)
                {
                    if ((systemInfoList[i].Habitats[k].Category == HabitatCategoryType.Moon || systemInfoList[i].Habitats[k].Category == HabitatCategoryType.Planet) && (types == null || types.Count == 0 || types.Contains(systemInfoList[i].Habitats[k].Type)) && (systemInfoList[i].Habitats[k].Empire == null || systemInfoList[i].Habitats[k].Empire == IndependentEmpire))
                    {
                        double num4 = CalculateDistanceSquared(x, y, systemInfoList[i].Habitats[k].Xpos, systemInfoList[i].Habitats[k].Ypos);
                        if (num4 < distance)
                        {
                            habitat = systemInfoList[i].Habitats[k];
                            distance = num4;
                        }
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FastFindNearestSystemWithPlanets(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    SystemInfo systemInfo = FastFindNearestSystemWithPlanetsInIndex((int)x, (int)y, index, out distance);
                    if (distance < num)
                    {
                        result = systemInfo.SystemStar;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private SystemInfo FastFindNearestSystemWithPlanetsInIndex(int x, int y, GalaxyIndex index, out double distance)
        {
            SystemInfo systemInfo = null;
            SystemInfoList systemInfoList = SystemsIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < systemInfoList.Count; i++)
            {
                if (systemInfoList[i].PlanetCount > 0)
                {
                    double num = CalculateDistanceSquared(x, y, systemInfoList[i].SystemStar.Xpos, systemInfoList[i].SystemStar.Ypos);
                    if (num < distance)
                    {
                        systemInfo = systemInfoList[i];
                        distance = num;
                    }
                }
            }
            if (systemInfo != null)
            {
                distance = CalculateDistance(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
            }
            return systemInfo;
        }

        public SystemInfoDistanceList GenerateDistanceOrderedSystemList(double x, double y)
        {
            SystemInfoDistanceList systemInfoDistanceList = new SystemInfoDistanceList();
            for (int i = 0; i < Systems.Count; i++)
            {
                SystemInfo systemInfo = Systems[i];
                double distance = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                SystemInfoDistance systemInfoDistance = new SystemInfoDistance();
                systemInfoDistance.SystemInfo = systemInfo;
                systemInfoDistance.Distance = distance;
                systemInfoDistanceList.Add(systemInfoDistance);
            }
            systemInfoDistanceList.Sort();
            return systemInfoDistanceList;
        }

        public bool CheckEmpireCanRefuelAtEmpire(BuiltObject shipToRefuel, Empire empire, Empire refuelingEmpire)
        {
            if (shipToRefuel == null)
            {
                return false;
            }
            if (shipToRefuel.Role == BuiltObjectRole.Military)
            {
                if (empire == null || refuelingEmpire == null)
                {
                    return true;
                }
                if (empire == refuelingEmpire)
                {
                    return true;
                }
                if (empire == IndependentEmpire)
                {
                    return true;
                }
                if (refuelingEmpire == IndependentEmpire)
                {
                    return true;
                }
                if (empire.PirateEmpireBaseHabitat != null)
                {
                    if (refuelingEmpire == empire || refuelingEmpire == IndependentEmpire)
                    {
                        return true;
                    }
                    return false;
                }
                if (refuelingEmpire.PirateEmpireBaseHabitat != null)
                {
                    if (empire == refuelingEmpire)
                    {
                        return true;
                    }
                    return false;
                }
                if (refuelingEmpire.Policy != null)
                {
                    return refuelingEmpire.ObtainDiplomaticRelation(empire)?.MilitaryRefuelingToOther ?? false;
                }
            }
            return true;
        }

        public StellarObject FastFindNearestRefuellingPoint(double x, double y, ResourceList fuelTypes, Empire empire, BuiltObject shipToRefuel)
        {
            return FastFindNearestRefuellingPoint(x, y, fuelTypes, empire, shipToRefuel, includeResupplyShips: false, null);
        }

        public StellarObject FastFindNearestRefuellingPoint(double x, double y, ResourceList fuelTypes, Empire empire, BuiltObject shipToRefuel, bool includeResupplyShips, Empire empireToExclude)
        {
            return FastFindNearestRefuellingPoint(x, y, fuelTypes, empire, shipToRefuel, includeResupplyShips, empireToExclude, 1);
        }

        public StellarObject FastFindNearestRefuellingPoint(double x, double y, ResourceList fuelTypes, Empire empire, BuiltObject shipToRefuel, bool includeResupplyShips, Empire empireToExclude, int shipsToRefuel)
        {
            double num = double.MaxValue;
            StellarObject stellarObject = null;
            if (includeResupplyShips && empire != null)
            {
                double num2 = double.MaxValue;
                for (int i = 0; i < empire.ResupplyShips.Count; i++)
                {
                    BuiltObject builtObject = empire.ResupplyShips[i];
                    if (builtObject.IsFunctional && builtObject.IsDeployed)
                    {
                        double num3 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        if (num3 < num2 && CheckSufficientFuelAvailable(empire, fuelTypes, builtObject, builtObject.ActualEmpire))
                        {
                            num2 = num3;
                            stellarObject = builtObject;
                        }
                    }
                }
                for (int j = 0; j < empire.RefuellingDepots.Count; j++)
                {
                    BuiltObject builtObject2 = empire.RefuellingDepots[j];
                    if ((builtObject2.SubRole != BuiltObjectSubRole.ResupplyShip || builtObject2.IsDeployed) && builtObject2.ParentHabitat == null && builtObject2.IsFunctional)
                    {
                        double num4 = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                        if (num4 < num2 && CheckSufficientFuelAvailable(empire, fuelTypes, builtObject2, builtObject2.ActualEmpire))
                        {
                            num2 = num4;
                            stellarObject = builtObject2;
                        }
                    }
                }
                if (stellarObject != null)
                {
                    num = Math.Sqrt(num2);
                }
            }
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num5 = 0;
            int num6 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num6, 10000, ref iterationCount))
            {
                num6 = DetermineSectorBoundaries(num5, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int k = 0; k < galaxyIndexList.Count; k++)
                {
                    GalaxyIndex index = galaxyIndexList[k];
                    double distance;
                    StellarObject stellarObject2 = FastFindNearestRefuellingPointInIndex((int)x, (int)y, index, out distance, fuelTypes, empire, shipToRefuel, includeResupplyShips, empireToExclude, shipsToRefuel, num);
                    if (!(distance < num))
                    {
                        continue;
                    }
                    if (shipsToRefuel <= 1)
                    {
                        stellarObject = stellarObject2;
                        num = distance;
                    }
                    else if (stellarObject != null && stellarObject.DockingBays != null && stellarObject.DockingBays.Count >= 4)
                    {
                        if (stellarObject2.DockingBays != null && stellarObject2.DockingBays.Count >= 4)
                        {
                            stellarObject = stellarObject2;
                            num = distance;
                        }
                    }
                    else
                    {
                        stellarObject = stellarObject2;
                        num = distance;
                    }
                }
                num5++;
                if (num5 > IndexMaxX)
                {
                    break;
                }
            }
            return stellarObject;
        }

        public bool IdentifyWhetherSystemIsRefuellingPointForEmpire(Habitat systemStar, Empire empire, Resource fuelType, BuiltObject testMilitaryShip)
        {
            SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Visible;
            if (empire != null && empire != IndependentEmpire)
            {
                systemVisibilityStatus = empire.CheckSystemVisibilityStatus(systemStar.SystemIndex);
            }
            if (systemVisibilityStatus == SystemVisibilityStatus.Explored || systemVisibilityStatus == SystemVisibilityStatus.Visible)
            {
                if (systemStar.Category == HabitatCategoryType.GasCloud && systemStar.BasesAtHabitat.Count > 0)
                {
                    foreach (BuiltObject item in systemStar.BasesAtHabitat)
                    {
                        if (!item.IsRefuellingDepot || item.Empire == null)
                        {
                            continue;
                        }
                        bool flag = true;
                        if (empire != null && empire != IndependentEmpire)
                        {
                            flag = empire.IsObjectVisibleToThisEmpire(item, includeLongRangeScanners: true, includeShipsOutsideSystems: false);
                        }
                        if (!flag || !IsStellarObjectDockable(item, empire) || !CheckEmpireCanRefuelAtEmpire(testMilitaryShip, empire, item.Empire))
                        {
                            continue;
                        }
                        int num = -1;
                        if (item.Cargo != null)
                        {
                            num = item.Cargo.IndexOf(fuelType, item.Empire);
                        }
                        if (num >= 0)
                        {
                            int num2 = item.Cargo[num].Available;
                            if (empire != item.Empire)
                            {
                                int num3 = CalculateResourceLevel(fuelType, item);
                                num2 -= num3;
                            }
                            if (num2 >= MinimumLevelForRefuellingPoint)
                            {
                                return true;
                            }
                        }
                    }
                }
                SystemInfo systemInfo = Systems[systemStar.SystemIndex];
                for (int i = 0; i < systemInfo.Habitats.Count; i++)
                {
                    Habitat habitat = systemInfo.Habitats[i];
                    if (habitat.BasesAtHabitat.Count > 0)
                    {
                        foreach (BuiltObject item2 in habitat.BasesAtHabitat)
                        {
                            if (!item2.IsRefuellingDepot || item2.Empire == null || !IsStellarObjectDockable(item2, empire))
                            {
                                continue;
                            }
                            bool flag2 = true;
                            if (empire != null && empire != IndependentEmpire && item2.SubRole != BuiltObjectSubRole.SmallSpacePort && item2.SubRole != BuiltObjectSubRole.MediumSpacePort && item2.SubRole != BuiltObjectSubRole.LargeSpacePort)
                            {
                                flag2 = empire.IsObjectVisibleToThisEmpire(item2, includeLongRangeScanners: true, includeShipsOutsideSystems: false);
                            }
                            if (!flag2 || !CheckEmpireCanRefuelAtEmpire(testMilitaryShip, empire, item2.Empire))
                            {
                                continue;
                            }
                            int num4 = -1;
                            if (item2.Cargo != null)
                            {
                                num4 = item2.Cargo.IndexOf(fuelType, item2.Empire);
                            }
                            if (num4 >= 0)
                            {
                                int num5 = item2.Cargo[num4].Available;
                                if (empire != item2.Empire)
                                {
                                    int num6 = CalculateResourceLevel(fuelType, item2);
                                    num5 -= num6;
                                }
                                if (num5 >= MinimumLevelForRefuellingPoint)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (habitat.Population.Count <= 0 || habitat.Empire == null || !IsStellarObjectDockable(habitat, empire) || !CheckEmpireCanRefuelAtEmpire(testMilitaryShip, empire, habitat.Empire))
                        {
                            continue;
                        }
                        int num7 = -1;
                        if (habitat.Cargo != null)
                        {
                            num7 = habitat.Cargo.IndexOf(fuelType, habitat.Empire);
                        }
                        if (num7 >= 0)
                        {
                            int num8 = habitat.Cargo[num7].Available;
                            if (empire != habitat.Empire)
                            {
                                int num9 = CalculateResourceLevel(fuelType, habitat);
                                num8 -= num9;
                            }
                            if (num8 >= MinimumLevelForRefuellingPoint)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        public StellarObject DetermineNearestHabitatIfPossible(StellarObject target)
        {
            StellarObject result = target;
            if (target is Habitat)
            {
                result = target;
            }
            else if (target is BuiltObject)
            {
                BuiltObject builtObject = (BuiltObject)target;
                result = ((builtObject.ParentHabitat != null) ? builtObject.ParentHabitat : ((builtObject.NearestSystemStar == null) ? ((StellarObject)builtObject) : ((StellarObject)builtObject.NearestSystemStar)));
            }
            else if (target is Creature)
            {
                Creature creature = (Creature)target;
                result = ((creature.ParentHabitat != null) ? creature.ParentHabitat : ((creature.NearestSystemStar == null) ? ((StellarObject)creature) : ((StellarObject)creature.NearestSystemStar)));
            }
            return result;
        }

        private StellarObject FastFindNearestRefuellingPointInIndex(double x, double y, GalaxyIndex index, out double distance, ResourceList fuelTypes, Empire empire, BuiltObject shipToRefuel, bool includeResupplyShips, Empire empireToExclude, int shipsToRefuel, double nearestDistance)
        {
            StellarObject stellarObject = null;
            distance = double.MaxValue;
            double num = Math.Min(double.MaxValue, nearestDistance * nearestDistance);
            SystemInfoList systemInfoList = SystemsIndex[index.X][index.Y];
            for (int i = 0; i < systemInfoList.Count; i++)
            {
                SystemInfo systemInfo = systemInfoList[i];
                SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Visible;
                if (empire != null && empire != IndependentEmpire)
                {
                    systemVisibilityStatus = empire.CheckSystemVisibilityStatus(systemInfo.SystemStar.SystemIndex);
                }
                if (systemVisibilityStatus != SystemVisibilityStatus.Explored && systemVisibilityStatus != SystemVisibilityStatus.Visible)
                {
                    continue;
                }
                double num2 = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                if (!(num2 < num) && !(num2 < 2500000000.0))
                {
                    continue;
                }
                if (systemInfo.SystemStar.Category == HabitatCategoryType.GasCloud && systemInfo.SystemStar.BasesAtHabitat.Count > 0)
                {
                    for (int j = 0; j < systemInfo.SystemStar.BasesAtHabitat.Count; j++)
                    {
                        BuiltObject builtObject = systemInfo.SystemStar.BasesAtHabitat[j];
                        if (!builtObject.IsRefuellingDepot || builtObject.Empire == null || (empireToExclude != null && builtObject.Empire == empireToExclude))
                        {
                            continue;
                        }
                        bool flag = true;
                        if (empire != null && empire.PirateEmpireBaseHabitat == null && empire != IndependentEmpire)
                        {
                            flag = empire.IsObjectVisibleToThisEmpire(builtObject, includeLongRangeScanners: true, includeShipsOutsideSystems: false);
                        }
                        if (!flag || !IsStellarObjectDockable(builtObject, empire) || !CheckEmpireCanRefuelAtEmpire(shipToRefuel, empire, builtObject.Empire))
                        {
                            continue;
                        }
                        double num3 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        if (!(num3 < distance) || !CheckSufficientFuelAvailable(empire, fuelTypes, builtObject, builtObject.ActualEmpire))
                        {
                            continue;
                        }
                        bool flag2 = false;
                        if (shipsToRefuel <= 1)
                        {
                            if ((builtObject.DockingBays != null && builtObject.DockingBays.Count >= 4) || (builtObject.DockingBayWaitQueue != null && builtObject.DockingBayWaitQueue.Count <= 3))
                            {
                                flag2 = true;
                            }
                        }
                        else if (builtObject.DockingBays != null && builtObject.DockingBays.Count >= 4)
                        {
                            flag2 = true;
                        }
                        if (flag2)
                        {
                            distance = num3;
                            num = num3;
                            stellarObject = builtObject;
                        }
                    }
                }
                for (int k = 0; k < systemInfo.Habitats.Count; k++)
                {
                    Habitat habitat = systemInfo.Habitats[k];
                    double num4 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                    if (!(num4 < num))
                    {
                        continue;
                    }
                    bool flag3 = false;
                    if (habitat.BasesAtHabitat.Count > 0)
                    {
                        for (int l = 0; l < habitat.BasesAtHabitat.Count; l++)
                        {
                            BuiltObject builtObject2 = habitat.BasesAtHabitat[l];
                            if (!builtObject2.IsRefuellingDepot || builtObject2.Empire == null || (empireToExclude != null && builtObject2.Empire == empireToExclude) || !IsStellarObjectDockable(builtObject2, empire))
                            {
                                continue;
                            }
                            bool flag4 = true;
                            if (empire != null && empire != IndependentEmpire && builtObject2.SubRole != BuiltObjectSubRole.SmallSpacePort && builtObject2.SubRole != BuiltObjectSubRole.MediumSpacePort && builtObject2.SubRole != BuiltObjectSubRole.LargeSpacePort)
                            {
                                flag4 = empire.IsObjectVisibleToThisEmpire(builtObject2, includeLongRangeScanners: true, includeShipsOutsideSystems: false);
                            }
                            if (!flag4 || !CheckEmpireCanRefuelAtEmpire(shipToRefuel, empire, builtObject2.Empire))
                            {
                                continue;
                            }
                            double num5 = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                            if (!(num5 < distance) || !CheckSufficientFuelAvailable(empire, fuelTypes, builtObject2, builtObject2.ActualEmpire))
                            {
                                continue;
                            }
                            bool flag5 = false;
                            if (shipsToRefuel <= 1)
                            {
                                if ((builtObject2.DockingBays != null && builtObject2.DockingBays.Count >= 4) || (builtObject2.DockingBayWaitQueue != null && builtObject2.DockingBayWaitQueue.Count <= 0))
                                {
                                    flag5 = true;
                                }
                            }
                            else if (builtObject2.DockingBays != null && builtObject2.DockingBays.Count >= 4)
                            {
                                flag5 = true;
                            }
                            if (flag5)
                            {
                                distance = num5;
                                stellarObject = builtObject2;
                                num = num5;
                                flag3 = true;
                            }
                        }
                    }
                    if (!flag3 && habitat.Population.Count > 0 && habitat.IsRefuellingDepot && habitat.Empire != null && (empireToExclude == null || habitat.Empire != empireToExclude) && IsStellarObjectDockable(habitat, empire) && CheckEmpireCanRefuelAtEmpire(shipToRefuel, empire, habitat.Empire))
                    {
                        double num6 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                        if (num6 < distance && CheckSufficientFuelAvailable(empire, fuelTypes, habitat, habitat.Empire))
                        {
                            distance = num6;
                            stellarObject = habitat;
                            num = num6;
                        }
                    }
                }
            }
            if (stellarObject != null)
            {
                distance = CalculateDistance(x, y, stellarObject.Xpos, stellarObject.Ypos);
            }
            return stellarObject;
        }

        public bool CheckFuelSuppliedAtLocation(ResourceList fuelTypes, BuiltObject builtObject, Empire refuellingEmpire, bool mustHaveActualSupply)
        {
            bool result = true;
            if (mustHaveActualSupply)
            {
                result = CheckSufficientFuelAvailable(refuellingEmpire, fuelTypes, builtObject, builtObject.ActualEmpire);
            }
            else if (builtObject.SubRole == BuiltObjectSubRole.GasMiningStation && builtObject.IsResourceExtractor)
            {
                if (builtObject.ParentHabitat != null && builtObject.ParentHabitat.Resources != null)
                {
                    for (int i = 0; i < fuelTypes.Count; i++)
                    {
                        if (!builtObject.ParentHabitat.Resources.ContainsId(fuelTypes[i].ResourceID))
                        {
                            result = false;
                            break;
                        }
                    }
                }
            }
            else if (refuellingEmpire.PirateEmpireBaseHabitat != null && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort) && builtObject.IsResourceExtractor && builtObject.ParentHabitat != null && builtObject.ParentHabitat.Resources != null)
            {
                bool flag = true;
                for (int j = 0; j < fuelTypes.Count; j++)
                {
                    if (!builtObject.ParentHabitat.Resources.ContainsId(fuelTypes[j].ResourceID))
                    {
                        flag = false;
                        break;
                    }
                }
                result = flag || CheckSufficientFuelAvailable(refuellingEmpire, fuelTypes, builtObject, builtObject.ActualEmpire);
            }
            else
            {
                result = CheckSufficientFuelAvailable(refuellingEmpire, fuelTypes, builtObject, builtObject.ActualEmpire);
            }
            return result;
        }

        public bool CheckSufficientFuelAvailable(Empire fuellingEmpire, ResourceList fuelTypes, StellarObject fuelLocation, Empire locationEmpire)
        {
            bool result = true;
            if (fuelTypes != null && fuelTypes.Count > 0 && fuelLocation != null && locationEmpire != null)
            {
                result = false;
                for (int i = 0; i < fuelTypes.Count; i++)
                {
                    Resource resource = fuelTypes[i];
                    if (resource == null)
                    {
                        continue;
                    }
                    int num = -1;
                    if (fuelLocation.Cargo != null)
                    {
                        num = fuelLocation.Cargo.IndexOf(resource, locationEmpire);
                    }
                    if (num < 0)
                    {
                        continue;
                    }
                    int num2 = fuelLocation.Cargo[num].Available;
                    if (fuellingEmpire != fuelLocation.Empire)
                    {
                        int num3 = 0;
                        if (fuelLocation is BuiltObject)
                        {
                            num3 = CalculateResourceLevel(resource, (BuiltObject)fuelLocation);
                        }
                        else if (fuelLocation is Habitat)
                        {
                            num3 = CalculateResourceLevel(resource, (Habitat)fuelLocation);
                        }
                        num2 -= num3;
                    }
                    if (num2 >= (int)resource.SortTag)
                    {
                        result = true;
                        continue;
                    }
                    result = false;
                    break;
                }
            }
            return result;
        }

        public Habitat FastFindNearestUncolonizedOwnedSystem(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    SystemInfo systemInfo = FindNearestOwnedUncolonizedSystemInIndex((int)x, (int)y, index, out distance);
                    if (distance < num)
                    {
                        result = systemInfo.SystemStar;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private SystemInfo FindNearestOwnedUncolonizedSystemInIndex(int x, int y, GalaxyIndex index, out double distance)
        {
            SystemInfo systemInfo = null;
            SystemInfoList systemInfoList = SystemsIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < systemInfoList.Count; i++)
            {
                bool disputed = false;
                int num = EmpireTerritory.CheckSystemOwnership(this, systemInfoList[i].SystemStar, out disputed);
                if (num < 0)
                {
                    continue;
                }
                SystemInfo systemInfo2 = Systems[systemInfoList[i].SystemStar];
                if (systemInfo2 == null || (systemInfo2.DominantEmpire != null && systemInfo2.DominantEmpire.Empire != null))
                {
                    continue;
                }
                bool flag = true;
                Empire byEmpireId = Empires.GetByEmpireId(num);
                if (byEmpireId != null && byEmpireId.Reclusive)
                {
                    flag = false;
                }
                if (flag)
                {
                    double num2 = CalculateDistanceSquared(x, y, systemInfoList[i].SystemStar.Xpos, systemInfoList[i].SystemStar.Ypos);
                    if (num2 < distance)
                    {
                        systemInfo = systemInfoList[i];
                        distance = num2;
                    }
                }
            }
            if (systemInfo != null)
            {
                distance = CalculateDistance(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
            }
            return systemInfo;
        }

        public Habitat FindNearestHabitatInSystem(SystemInfo system, double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            if (system != null)
            {
                if (system.SystemStar != null)
                {
                    double num2 = CalculateDistanceSquared(x, y, system.SystemStar.Xpos, system.SystemStar.Ypos);
                    if (num2 < num)
                    {
                        num = num2;
                        result = system.SystemStar;
                    }
                }
                if (system.Habitats != null)
                {
                    for (int i = 0; i < system.Habitats.Count; i++)
                    {
                        Habitat habitat = system.Habitats[i];
                        if (habitat != null)
                        {
                            double num3 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                            if (num3 < num)
                            {
                                result = habitat;
                                num = num3;
                            }
                        }
                    }
                }
            }
            return result;
        }

        public Habitat FastFindNearestSystem(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    SystemInfo systemInfo = FindNearestSystemInIndex((int)x, (int)y, index, out distance);
                    if (distance < num)
                    {
                        result = systemInfo.SystemStar;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private SystemInfo FindNearestSystemInIndex(int x, int y, GalaxyIndex index, out double distance)
        {
            SystemInfo systemInfo = null;
            SystemInfoList systemInfoList = SystemsIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < systemInfoList.Count; i++)
            {
                SystemInfo systemInfo2 = systemInfoList[i];
                if (systemInfo2 != null && systemInfo2.SystemStar != null)
                {
                    double num = CalculateDistanceSquared(x, y, systemInfo2.SystemStar.Xpos, systemInfo2.SystemStar.Ypos);
                    if (num < distance)
                    {
                        systemInfo = systemInfo2;
                        distance = num;
                    }
                }
            }
            if (systemInfo != null)
            {
                distance = CalculateDistance(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
            }
            return systemInfo;
        }

        public Habitat FindNearestSystemGasCloudAsteroid(int x, int y)
        {
            return FindNearestSystemGasCloudAsteroid((double)x, (double)y);
        }

        public Habitat FindNearestSystemGasCloudAsteroid(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestSystemGasCloudAsteroidInIndex((int)x, (int)y, index, out distance);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public void SelectHyperJumpExitPoint(out double x, out double y, double minimumExitDistance)
        {
            double num = Rnd.NextDouble() * Math.PI;
            if (Rnd.Next(0, 2) == 1)
            {
                num *= -1.0;
            }
            double num2 = minimumExitDistance + Rnd.NextDouble() * minimumExitDistance * 0.4;
            x = Math.Cos(num) * num2;
            y = Math.Sin(num) * num2;
        }

        public void SelectRelativePoint(double range, out double x, out double y)
        {
            double num = range * Rnd.NextDouble();
            double num2 = SelectRandomHeading();
            x = Math.Cos(num2) * num;
            y = Math.Sin(num2) * num;
        }

        public void SelectRelativeHabitatSurfacePoint(Habitat habitat, out double x, out double y)
        {
            double range = 50.0;
            if (habitat != null)
            {
                double num = (double)habitat.Diameter - 10.0;
                if (num < 1.0)
                {
                    num = 1.0;
                }
                range = num / 2.0;
            }
            SelectRelativePoint(range, out x, out y);
        }

        public void SelectRelativeParkingPoint(double minimumDistance, out double x, out double y)
        {
            double num = Rnd.NextDouble() * Math.PI;
            if (Rnd.Next(0, 2) == 1)
            {
                num *= -1.0;
            }
            double num2 = minimumDistance + Rnd.NextDouble() * (double)MovementDecelerationRange;
            x = Math.Cos(num) * num2;
            y = Math.Sin(num) * num2;
        }

        public void SelectRelativeParkingPoint(out double x, out double y)
        {
            SelectRelativeParkingPoint(MovementDecelerationRange, out x, out y);
        }

        public static void CorrectIndexCoords(ref int x, ref int y)
        {
            if (x < 0)
            {
                x = 0;
            }
            else if (x >= IndexMaxX)
            {
                x = IndexMaxX - 1;
            }
            if (y < 0)
            {
                y = 0;
            }
            else if (y >= IndexMaxY)
            {
                y = IndexMaxY - 1;
            }
        }

        public static void CorrectSectorCoords(ref int x, ref int y)
        {
            if (x < 0)
            {
                x = 0;
            }
            else if (x >= SectorMaxX)
            {
                x = SectorMaxX - 1;
            }
            if (y < 0)
            {
                y = 0;
            }
            else if (y >= SectorMaxY)
            {
                y = SectorMaxY - 1;
            }
        }

        public Habitat FindNearestSystemGasCloudAsteroidInIndex(double x, double y, GalaxyIndex index)
        {
            double distance = double.MaxValue;
            return FindNearestSystemGasCloudAsteroidInIndex((int)x, (int)y, index, out distance);
        }

        private Habitat FindNearestUnexploredHabitatInSystem(double x, double y, Habitat systemStar, Empire empire, double asteroidRangeFactor)
        {
            double num = double.MaxValue;
            Habitat result = null;
            double num2 = asteroidRangeFactor * asteroidRangeFactor;
            if (systemStar != null && empire.ResourceMap != null)
            {
                for (int i = 0; i < Systems[systemStar.SystemIndex].Habitats.Count; i++)
                {
                    Habitat habitat = Systems[systemStar.SystemIndex].Habitats[i];
                    bool flag = false;
                    if (!empire.ResourceMap.CheckResourcesKnown(habitat))
                    {
                        flag = true;
                    }
                    else if (!empire.Reclusive && habitat.Ruin != null)
                    {
                        if (habitat.Ruin.Type == RuinType.UnlockResearchProject)
                        {
                            if (habitat.Ruin.ResearchProjectId >= 0 && empire.Research != null && empire.Research.TechTree != null && empire.Research.TechTree.Count > habitat.Ruin.ResearchProjectId && empire.Research.TechTree[habitat.Ruin.ResearchProjectId] != null && !empire.Research.TechTree[habitat.Ruin.ResearchProjectId].IsEnabled)
                            {
                                flag = true;
                            }
                        }
                        else if (CheckRuinsHaveBenefit(habitat.Ruin, empire) && (habitat.Ruin.StoryClueLevel < 0 || (habitat.Ruin.StoryClueLevel >= 0 && empire == PlayerEmpire)))
                        {
                            flag = true;
                        }
                    }
                    if (flag)
                    {
                        double num3 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                        if (habitat.Category == HabitatCategoryType.Asteroid)
                        {
                            num3 *= num2;
                        }
                        if (num3 < num)
                        {
                            result = habitat;
                            num = num3;
                        }
                    }
                }
            }
            return result;
        }

        private SystemInfo FastFindNearestUnexploredSystemInfo(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            SystemInfo result = null;
            for (int i = 0; i < Systems.Count; i++)
            {
                SystemInfo systemInfo = Systems[i];
                SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Unexplored;
                if (systemInfo.SystemStar != null)
                {
                    systemVisibilityStatus = empire.CheckSystemVisibilityStatus(systemInfo.SystemStar.SystemIndex);
                }
                if (systemVisibilityStatus == SystemVisibilityStatus.Unexplored || systemVisibilityStatus == SystemVisibilityStatus.Undefined)
                {
                    double num2 = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                    if (num2 < num)
                    {
                        result = systemInfo;
                        num = num2;
                    }
                }
            }
            return result;
        }

        private SystemInfoDistanceList GenerateDistanceOrderedSystemListUnexplored(double x, double y, Empire empire)
        {
            SystemInfoDistanceList systemInfoDistanceList = new SystemInfoDistanceList();
            for (int i = 0; i < Systems.Count; i++)
            {
                SystemInfo systemInfo = Systems[i];
                SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Unexplored;
                if (systemInfo.SystemStar != null)
                {
                    systemVisibilityStatus = empire.CheckSystemVisibilityStatus(systemInfo.SystemStar.SystemIndex);
                }
                if (systemVisibilityStatus == SystemVisibilityStatus.Unexplored || systemVisibilityStatus == SystemVisibilityStatus.Undefined)
                {
                    double distance = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                    SystemInfoDistance systemInfoDistance = new SystemInfoDistance();
                    systemInfoDistance.SystemInfo = systemInfo;
                    systemInfoDistance.Distance = distance;
                    systemInfoDistanceList.Add(systemInfoDistance);
                }
            }
            systemInfoDistanceList.Sort();
            return systemInfoDistanceList;
        }

        public Habitat FastFindNearestUnexploredSystem(double x, double y, Empire empire)
        {
            SystemInfoDistanceList systemInfoDistanceList = GenerateDistanceOrderedSystemListUnexplored(x, y, empire);
            if (systemInfoDistanceList != null && systemInfoDistanceList.Count > 0 && systemInfoDistanceList[0].SystemInfo != null && systemInfoDistanceList[0].SystemInfo.SystemStar != null)
            {
                return systemInfoDistanceList[0].SystemInfo.SystemStar;
            }
            return null;
        }

        public Habitat UltraFastFindNearestUnexploredSystem(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    SystemInfo systemInfo = UltraFastFindNearestUnexploredSystemInIndex(x, y, index, out distance, empire);
                    if (distance < num)
                    {
                        result = systemInfo.SystemStar;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private SystemInfo UltraFastFindNearestUnexploredSystemInIndex(double x, double y, GalaxyIndex index, out double distance, Empire empire)
        {
            SystemInfo systemInfo = null;
            SystemInfoList systemInfoList = SystemsIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < systemInfoList.Count; i++)
            {
                SystemVisibilityStatus systemVisibilityStatus = SystemVisibilityStatus.Unexplored;
                if (systemInfoList[i].SystemStar != null)
                {
                    systemVisibilityStatus = empire.CheckSystemVisibilityStatus(systemInfoList[i].SystemStar.SystemIndex);
                }
                if (systemVisibilityStatus == SystemVisibilityStatus.Unexplored || systemVisibilityStatus == SystemVisibilityStatus.Undefined)
                {
                    double num = CalculateDistanceSquared(x, y, systemInfoList[i].SystemStar.Xpos, systemInfoList[i].SystemStar.Ypos);
                    if (num < distance)
                    {
                        systemInfo = systemInfoList[i];
                        distance = num;
                    }
                }
            }
            if (systemInfo != null)
            {
                distance = CalculateDistance(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
            }
            return systemInfo;
        }

        public Habitat FindNextSystemToScout(Empire empire, BuiltObject explorationShip, out Point location)
        {
            location = Point.Empty;
            if (explorationShip.NearestSystemStar != null)
            {
                SystemInfo systemInfo = Systems[explorationShip.NearestSystemStar.SystemIndex];
                if (systemInfo.HasRuins)
                {
                    for (int i = 0; i < systemInfo.Habitats.Count; i++)
                    {
                        Habitat habitat = systemInfo.Habitats[i];
                        if (habitat.Ruin == null || empire.Reclusive)
                        {
                            continue;
                        }
                        bool flag = false;
                        if (habitat.Ruin.Type == RuinType.UnlockResearchProject)
                        {
                            if (!empire.ResourceMap.CheckResourcesKnown(habitat))
                            {
                                flag = true;
                            }
                        }
                        else if (CheckRuinsHaveBenefit(habitat.Ruin, empire))
                        {
                            flag = true;
                        }
                        if (flag)
                        {
                            return habitat;
                        }
                    }
                }
                GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsInRangeAtPoint(explorationShip.NearestSystemStar.Xpos, explorationShip.NearestSystemStar.Ypos, (double)MaxSolarSystemSize * 2.1, GalaxyLocationType.Undefined);
                for (int j = 0; j < galaxyLocationList.Count; j++)
                {
                    GalaxyLocation galaxyLocation = galaxyLocationList[j];
                    if ((galaxyLocation.Type == GalaxyLocationType.DebrisField || galaxyLocation.Type == GalaxyLocationType.PlanetDestroyer || galaxyLocation.Type == GalaxyLocationType.RestrictedArea) && !empire.KnownGalaxyLocations.Contains(galaxyLocation))
                    {
                        location = new Point((int)((double)galaxyLocation.Xpos + (double)galaxyLocation.Width / 2.0), (int)((double)galaxyLocation.Ypos + (double)galaxyLocation.Height / 2.0));
                        return null;
                    }
                }
                if (!empire.Reclusive)
                {
                    BuiltObject builtObject = FindUnownedBuiltObjectInSystem(explorationShip.NearestSystemStar);
                    if (builtObject != null)
                    {
                        location = new Point((int)builtObject.Xpos, (int)builtObject.Ypos);
                        return null;
                    }
                }
            }
            Habitat habitat2 = UltraFastFindNearestUnexploredSystem(explorationShip.Xpos, explorationShip.Ypos, empire);
            bool flag2 = false;
            if (habitat2 != null)
            {
                double num = CalculateDistance(habitat2.Xpos, habitat2.Ypos, explorationShip.Xpos, explorationShip.Ypos);
                if (num > (double)SectorSize * 0.6 || Rnd.Next(0, 20) == 1)
                {
                    flag2 = true;
                }
            }
            if (flag2)
            {
                habitat2 = UltraFastFindNearestUnexploredSystem(empire.Capital.Xpos, empire.Capital.Ypos, empire);
            }
            return habitat2;
        }

        public Habitat FindUnexploredRuinsOrLocations(double x, double y, Empire empire, out GalaxyLocation location)
        {
            location = null;
            Habitat habitat = null;
            double num = double.MaxValue;
            if (!empire.Reclusive)
            {
                for (int i = 0; i < RuinsHabitats.Count; i++)
                {
                    Habitat habitat2 = RuinsHabitats[i];
                    if (habitat2 == null || habitat2.Ruin == null)
                    {
                        continue;
                    }
                    bool flag = false;
                    if (habitat2.Ruin.Type == RuinType.UnlockResearchProject)
                    {
                        if (habitat2.Ruin.ResearchProjectId >= 0 && empire.Research != null && empire.Research.TechTree != null && empire.Research.TechTree.Count > habitat2.Ruin.ResearchProjectId && empire.Research.TechTree[habitat2.Ruin.ResearchProjectId] != null && !empire.Research.TechTree[habitat2.Ruin.ResearchProjectId].IsEnabled)
                        {
                            flag = true;
                        }
                    }
                    else if (CheckRuinsHaveBenefit(habitat2.Ruin, empire) && (habitat2.Ruin.StoryClueLevel < 0 || (habitat2.Ruin.StoryClueLevel >= 0 && empire == PlayerEmpire)))
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        double num2 = CalculateDistanceSquared(x, y, habitat2.Xpos, habitat2.Ypos);
                        if (num2 < num)
                        {
                            habitat = habitat2;
                            num = num2;
                        }
                    }
                }
                if (habitat != null)
                {
                    return habitat;
                }
            }
            for (int j = 0; j < _GalaxyLocations.Count; j++)
            {
                GalaxyLocation galaxyLocation = _GalaxyLocations[j];
                if ((galaxyLocation.Type != GalaxyLocationType.DebrisField && galaxyLocation.Type != GalaxyLocationType.PlanetDestroyer && galaxyLocation.Type != GalaxyLocationType.RestrictedArea) || empire.KnownGalaxyLocations.Contains(galaxyLocation))
                {
                    continue;
                }
                galaxyLocation.ResolveLocationCenter(out var x2, out var y2);
                Habitat habitat3 = FastFindNearestSystem(x, y);
                if (habitat3 != null)
                {
                    double num3 = CalculateDistance(habitat3.Xpos, habitat3.Ypos, x2, y2);
                    if (num3 < 25000.0)
                    {
                        location = galaxyLocation;
                        return null;
                    }
                }
            }
            return null;
        }

        public Habitat FindNextHabitatToExplore(double x, double y, Empire empire, BuiltObject explorationShip, out Point location)
        {
            location = Point.Empty;
            double num = 0.0;
            if (empire == null || explorationShip == null)
            {
                return null;
            }
            Habitat habitat = null;
            if (explorationShip.NearestSystemStar != null)
            {
                habitat = FindNearestUnexploredHabitatInSystem(x, y, explorationShip.NearestSystemStar, empire, 3.0);
            }
            if (habitat == null && explorationShip.NearestSystemStar != null)
            {
                GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsInRangeAtPoint(explorationShip.NearestSystemStar.Xpos, explorationShip.NearestSystemStar.Ypos, (double)MaxSolarSystemSize * 2.1, GalaxyLocationType.Undefined);
                for (int i = 0; i < galaxyLocationList.Count; i++)
                {
                    GalaxyLocation galaxyLocation = galaxyLocationList[i];
                    if ((galaxyLocation.Type == GalaxyLocationType.DebrisField || galaxyLocation.Type == GalaxyLocationType.PlanetDestroyer || galaxyLocation.Type == GalaxyLocationType.RestrictedArea) && !empire.KnownGalaxyLocations.Contains(galaxyLocation))
                    {
                        location = new Point((int)((double)galaxyLocation.Xpos + (double)galaxyLocation.Width / 2.0), (int)((double)galaxyLocation.Ypos + (double)galaxyLocation.Height / 2.0));
                        return null;
                    }
                }
                if (!empire.Reclusive)
                {
                    BuiltObject builtObject = FindUnownedBuiltObjectInSystem(explorationShip.NearestSystemStar);
                    if (builtObject != null)
                    {
                        location = new Point((int)builtObject.Xpos, (int)builtObject.Ypos);
                        return null;
                    }
                }
            }
            if (habitat == null)
            {
                habitat = FastFindNearestUnexploredHabitat(x, y, empire);
            }
            if (habitat == null)
            {
                return null;
            }
            double num2 = CalculateDistance(explorationShip.Xpos, explorationShip.Ypos, habitat.Xpos, habitat.Ypos);
            if (num2 > (double)MaxSolarSystemSize * 2.1)
            {
                x += Rnd.NextDouble() * 400000.0 - 200000.0;
                y += Rnd.NextDouble() * 400000.0 - 200000.0;
                habitat = FastFindNearestUnexploredHabitat(x, y, empire);
            }
            if (habitat != null && empire.BuiltObjects != null)
            {
                double range = (double)MaxSolarSystemSize * 2.1 * 2.0;
                if (explorationShip.WarpSpeed <= 0)
                {
                    range = 2000.0;
                }
                HabitatList habitatList = new HabitatList();
                for (int j = 0; j < empire.BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = empire.BuiltObjects[j];
                    if (builtObject2 != explorationShip && builtObject2 != null && builtObject2.Role == BuiltObjectRole.Exploration && builtObject2.Mission != null && (builtObject2.Mission.Type == BuiltObjectMissionType.Explore || builtObject2.Mission.Type == BuiltObjectMissionType.Move) && builtObject2.Mission.TargetHabitat != null && !habitatList.Contains(builtObject2.Mission.TargetHabitat))
                    {
                        habitatList.Add(builtObject2.Mission.TargetHabitat);
                    }
                }
                int num3 = 0;
                Habitat firstHabitatWithinRange = habitatList.GetFirstHabitatWithinRange(habitat.Xpos, habitat.Ypos, range);
                while (firstHabitatWithinRange != null && num3 < 30)
                {
                    double num4 = DetermineAngle(firstHabitatWithinRange.Xpos, firstHabitatWithinRange.Ypos, habitat.Xpos, habitat.Ypos);
                    double num5 = Math.PI * 2.0 / 5.0;
                    if (Rnd.Next(0, 2) == 1)
                    {
                        num5 *= -1.0;
                    }
                    double num6 = num4 + num5 + (0.5 - Rnd.NextDouble() * 1.0);
                    if (explorationShip.WarpSpeed <= 0)
                    {
                        num = ((!(num <= 0.0)) ? (num + 5000.0) : 5000.0);
                        num = Math.Min(num, 50000.0);
                    }
                    else
                    {
                        num += 1000000.0;
                    }
                    x += Math.Cos(num6) * num;
                    y += Math.Sin(num6) * num;
                    habitat = FastFindNearestUnexploredHabitat(x, y, empire);
                    if (habitat == null)
                    {
                        break;
                    }
                    firstHabitatWithinRange = habitatList.GetFirstHabitatWithinRange(habitat.Xpos, habitat.Ypos, range);
                    num3++;
                }
                if (firstHabitatWithinRange != null)
                {
                    return null;
                }
            }
            return habitat;
        }

        public Habitat FastFindNearestUnexploredHabitatInSector(double x, double y, Empire empire, Sector sector)
        {
            HabitatList habitatList = new HabitatList();
            List<double> list = new List<double>();
            double num = double.MaxValue;
            for (int i = 0; i < Systems.Count; i++)
            {
                SystemInfo systemInfo = Systems[i];
                Sector sector2 = ResolveSector(systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                if (sector.X != sector2.X || sector.Y != sector2.Y)
                {
                    continue;
                }
                SystemVisibility systemVisibility = empire.SystemVisibility[systemInfo.SystemStar.SystemIndex];
                if (systemVisibility.Status == SystemVisibilityStatus.Unexplored || systemVisibility.Status == SystemVisibilityStatus.Undefined)
                {
                    double num2 = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                    if (num2 < num)
                    {
                        num = num2;
                        list.Add(num2);
                        habitatList.Add(systemInfo.SystemStar);
                    }
                }
                else if (!systemVisibility.TotallyExplored)
                {
                    double item = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                    list.Add(item);
                    habitatList.Add(systemInfo.SystemStar);
                }
            }
            Habitat[] array = habitatList.ToArray();
            double[] keys = list.ToArray();
            Array.Sort(keys, array);
            for (int j = 0; j < array.Length; j++)
            {
                Habitat habitat = null;
                double num3 = double.MaxValue;
                if (Systems[array[j].SystemIndex].SystemStar.Category == HabitatCategoryType.Star && Systems[array[j].SystemIndex].Habitats.Count == 0)
                {
                    SystemVisibilityStatus status = empire.SystemVisibility[array[j].SystemIndex].Status;
                    if (status == SystemVisibilityStatus.Unexplored || status == SystemVisibilityStatus.Undefined)
                    {
                        Habitat systemStar = Systems[array[j].SystemIndex].SystemStar;
                        double num4 = CalculateDistanceSquared(x, y, systemStar.Xpos, systemStar.Ypos);
                        if (num4 < num3)
                        {
                            habitat = systemStar;
                            num3 = num4;
                        }
                    }
                    else
                    {
                        empire.SystemVisibility[array[j].SystemIndex].TotallyExplored = true;
                    }
                }
                else if (Systems[array[j].SystemIndex].SystemStar.Category == HabitatCategoryType.GasCloud)
                {
                    SystemVisibilityStatus status2 = empire.SystemVisibility[array[j].SystemIndex].Status;
                    if (status2 == SystemVisibilityStatus.Unexplored || status2 == SystemVisibilityStatus.Undefined)
                    {
                        Habitat systemStar2 = Systems[array[j].SystemIndex].SystemStar;
                        double num5 = CalculateDistanceSquared(x, y, systemStar2.Xpos, systemStar2.Ypos);
                        if (num5 < num3)
                        {
                            habitat = systemStar2;
                            num3 = num5;
                        }
                    }
                    else
                    {
                        empire.SystemVisibility[array[j].SystemIndex].TotallyExplored = true;
                    }
                }
                else
                {
                    bool flag = false;
                    for (int k = 0; k < Systems[array[j].SystemIndex].Habitats.Count; k++)
                    {
                        if ((empire.ResourceMap != null && !empire.ResourceMap.CheckResourcesKnown(Systems[array[j].SystemIndex].Habitats[k])) || CheckRuinsHaveBenefit(Systems[array[j].SystemIndex].Habitats[k].Ruin, empire))
                        {
                            flag = true;
                            Habitat habitat2 = Systems[array[j].SystemIndex].Habitats[k];
                            double num6 = CalculateDistanceSquared(x, y, habitat2.Xpos, habitat2.Ypos);
                            if (num6 < num3)
                            {
                                habitat = habitat2;
                                num3 = num6;
                            }
                        }
                    }
                    if (!flag)
                    {
                        empire.SystemVisibility[array[j].SystemIndex].TotallyExplored = true;
                    }
                }
                if (habitat != null)
                {
                    return habitat;
                }
            }
            return null;
        }

        public Habitat FastFindNearestUnexploredHabitat(double x, double y, Empire empire)
        {
            if (empire != null)
            {
                HabitatList habitatList = new HabitatList();
                List<double> list = new List<double>();
                double num = double.MaxValue;
                for (int i = 0; i < Systems.Count; i++)
                {
                    SystemInfo systemInfo = Systems[i];
                    if (systemInfo == null || systemInfo.SystemStar == null)
                    {
                        continue;
                    }
                    SystemVisibility systemVisibility = empire.SystemVisibility[systemInfo.SystemStar.SystemIndex];
                    if (systemVisibility == null)
                    {
                        continue;
                    }
                    if (systemVisibility.Status == SystemVisibilityStatus.Unexplored || systemVisibility.Status == SystemVisibilityStatus.Undefined)
                    {
                        double num2 = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                        if (num2 < num)
                        {
                            num = num2;
                            list.Add(num2);
                            habitatList.Add(systemInfo.SystemStar);
                        }
                    }
                    else if (!systemVisibility.TotallyExplored)
                    {
                        double item = CalculateDistanceSquared(x, y, systemInfo.SystemStar.Xpos, systemInfo.SystemStar.Ypos);
                        list.Add(item);
                        habitatList.Add(systemInfo.SystemStar);
                    }
                }
                Habitat[] array = habitatList.ToArray();
                double[] keys = list.ToArray();
                Array.Sort(keys, array);
                for (int j = 0; j < array.Length; j++)
                {
                    Habitat habitat = null;
                    double num3 = double.MaxValue;
                    Habitat habitat2 = array[j];
                    if (habitat2 == null)
                    {
                        continue;
                    }
                    SystemInfo systemInfo2 = Systems[habitat2.SystemIndex];
                    if (systemInfo2 == null || systemInfo2.SystemStar == null || systemInfo2.Habitats == null)
                    {
                        continue;
                    }
                    if (systemInfo2.SystemStar.Category == HabitatCategoryType.Star && systemInfo2.Habitats.Count == 0)
                    {
                        SystemVisibilityStatus status = empire.SystemVisibility[habitat2.SystemIndex].Status;
                        if (status == SystemVisibilityStatus.Unexplored || status == SystemVisibilityStatus.Undefined)
                        {
                            Habitat systemStar = systemInfo2.SystemStar;
                            double num4 = CalculateDistanceSquared(x, y, systemStar.Xpos, systemStar.Ypos);
                            if (num4 < num3)
                            {
                                habitat = systemStar;
                                num3 = num4;
                            }
                        }
                        else
                        {
                            empire.SystemVisibility[habitat2.SystemIndex].TotallyExplored = true;
                        }
                    }
                    else if (systemInfo2.SystemStar.Category == HabitatCategoryType.GasCloud)
                    {
                        SystemVisibilityStatus status2 = empire.SystemVisibility[habitat2.SystemIndex].Status;
                        if (status2 == SystemVisibilityStatus.Unexplored || status2 == SystemVisibilityStatus.Undefined)
                        {
                            Habitat systemStar2 = systemInfo2.SystemStar;
                            double num5 = CalculateDistanceSquared(x, y, systemStar2.Xpos, systemStar2.Ypos);
                            if (num5 < num3)
                            {
                                habitat = systemStar2;
                                num3 = num5;
                            }
                        }
                        else
                        {
                            empire.SystemVisibility[habitat2.SystemIndex].TotallyExplored = true;
                        }
                    }
                    else
                    {
                        bool flag = false;
                        for (int k = 0; k < systemInfo2.Habitats.Count; k++)
                        {
                            Habitat habitat3 = systemInfo2.Habitats[k];
                            if (habitat3 != null && ((empire.ResourceMap != null && !empire.ResourceMap.CheckResourcesKnown(habitat3) && habitat3.Ruin == null) || (!empire.Reclusive && habitat3.Ruin != null && ((habitat3.Ruin.Type == RuinType.UnlockResearchProject && !empire.ResourceMap.CheckResourcesKnown(habitat3)) || (habitat3.Ruin.Type != RuinType.UnlockResearchProject && CheckRuinsHaveBenefit(habitat3.Ruin, empire))))))
                            {
                                flag = true;
                                Habitat habitat4 = habitat3;
                                double num6 = CalculateDistanceSquared(x, y, habitat4.Xpos, habitat4.Ypos);
                                if (num6 < num3)
                                {
                                    habitat = habitat4;
                                    num3 = num6;
                                }
                            }
                        }
                        if (!flag)
                        {
                            empire.SystemVisibility[habitat2.SystemIndex].TotallyExplored = true;
                        }
                    }
                    if (habitat != null)
                    {
                        return habitat;
                    }
                }
            }
            return null;
        }

        public Habitat FindNearestUnexploredSystem(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            Habitat result = null;
            for (int i = 0; i < empire.SystemVisibility.Count; i++)
            {
                SystemVisibility systemVisibility = empire.SystemVisibility[i];
                if (!empire.CheckSystemExplored(systemVisibility.SystemStar.SystemIndex))
                {
                    double num2 = CalculateDistanceSquared(x, y, systemVisibility.SystemStar.Xpos, systemVisibility.SystemStar.Ypos);
                    if (num2 < num)
                    {
                        result = systemVisibility.SystemStar;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public Habitat FindNearestUnexploredHabitat(double x, double y, Empire empire, bool includeAsteroids)
        {
            return FindNearestUnexploredHabitat((int)x, (int)y, empire, includeAsteroids);
        }

        public Habitat FindNearestUnexploredHabitat(int x, int y, Empire empire, bool includeAsteroids)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex(x, y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, x, y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestUnexploredHabitatInIndex(x, y, index, out distance, empire, includeAsteroids);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestUnexploredHabitatInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire, bool includeAsteroids)
        {
            Habitat habitat = null;
            distance = double.MaxValue;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            for (int i = 0; i < habitatList.Count; i++)
            {
                Habitat habitat2 = habitatList[i];
                if (includeAsteroids || habitat2.Category != HabitatCategoryType.Asteroid)
                {
                    double num = CalculateDistanceSquared(x, y, habitat2.Xpos, habitat2.Ypos);
                    if (num < distance && empire.ResourceMap != null && !empire.ResourceMap.CheckResourcesKnown(habitat2))
                    {
                        habitat = habitat2;
                        distance = num;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FindNearestUnexploredHabitatInSystem(int x, int y, Habitat sun, Empire empire, bool includeAsteroids)
        {
            Habitat habitat = null;
            int x2 = (int)(sun.Xpos / (double)IndexSize);
            int y2 = (int)(sun.Ypos / (double)IndexSize);
            CorrectIndexCoords(ref x2, ref y2);
            HabitatList habitatList = HabitatIndex[x2][y2];
            int num = habitatList.IndexOf(sun);
            num++;
            Habitat habitat2 = null;
            if (num < habitatList.Count)
            {
                habitat2 = habitatList[num];
            }
            int iterationCount = 0;
            while (ConditionCheckLimit(habitat2 != null && habitat2.Parent != null, 2000, ref iterationCount))
            {
                bool flag = true;
                if (!includeAsteroids && habitat2.Category == HabitatCategoryType.Asteroid)
                {
                    flag = false;
                }
                if (flag)
                {
                    if (habitat != null)
                    {
                        int num2 = (int)CalculateDistance(x, y, habitat2.Xpos, habitat2.Ypos);
                        int num3 = (int)CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
                        if (num2 < num3 && empire.ResourceMap != null && !empire.ResourceMap.CheckResourcesKnown(habitat2))
                        {
                            habitat = habitat2;
                        }
                    }
                    else if (empire.ResourceMap != null && !empire.ResourceMap.CheckResourcesKnown(habitat2))
                    {
                        habitat = habitat2;
                    }
                }
                num++;
                habitat2 = ((num >= habitatList.Count) ? null : habitatList[num]);
            }
            return habitat;
        }

        public HabitatList DetermineHabitatsInSystem(Habitat systemStar)
        {
            HabitatList habitatList = new HabitatList();
            int num = Habitats.IndexOf(systemStar);
            int count = Habitats.Count;
            if (num >= 0 && num < Habitats.Count + 1)
            {
                for (int i = num + 1; i < count && Habitats[i].Parent != null; i++)
                {
                    habitatList.Add(Habitats[i]);
                }
            }
            return habitatList;
        }

        public StellarObject[] SortStellarObjectsByDistanceThreadsafe(double x, double y, StellarObjectList stellarObjects)
        {
            StellarObject[] array = ListHelper.ToArrayThreadSafe(stellarObjects);
            int num = array.Length;
            double[] array2 = new double[num];
            for (int i = 0; i < num; i++)
            {
                array2[i] = CalculateDistanceSquared(x, y, array[i].Xpos, array[i].Ypos);
            }
            Array.Sort(array2, array);
            return array;
        }

        public BuiltObject[] SortBuiltObjectsByDistanceThreadsafe(double x, double y, BuiltObjectList builtObjects)
        {
            BuiltObject[] array = ListHelper.ToArrayThreadSafe(builtObjects);
            double[] array2 = new double[array.Length];
            for (int i = 0; i < array.Length; i++)
            {
                array2[i] = CalculateDistanceSquared(x, y, array[i].Xpos, array[i].Ypos);
            }
            Array.Sort(array2, array);
            return array;
        }

        public Habitat[] SortHabitatsByDistanceThreadsafe(double x, double y, HabitatList habitats)
        {
            Habitat[] array = habitats.ToArray();
            double[] array2 = new double[array.Length];
            for (int i = 0; i < array.Length; i++)
            {
                array2[i] = CalculateDistanceSquared(x, y, array[i].Xpos, array[i].Ypos);
            }
            Array.Sort(array2, array);
            return array;
        }

        public int DetermineDefendingStrength(ShipGroup fleet, Empire empire)
        {
            int num = 0;
            if (fleet != null && fleet.LeadShip != null && fleet.LeadShip.NearestSystemStar != null)
            {
                BuiltObjectList ships = null;
                num += DetermineShipStrengthInSystem(fleet.LeadShip.NearestSystemStar, empire, out ships);
            }
            return num;
        }

        public int DetermineDefendingStrength(BuiltObject builtObject, Empire empire)
        {
            int num = 0;
            if (builtObject != null)
            {
                if (builtObject.NearestSystemStar != null)
                {
                    BuiltObjectList ships = null;
                    num += DetermineShipStrengthInSystem(builtObject.NearestSystemStar, builtObject.Xpos, builtObject.Ypos, empire, out ships);
                }
                if (builtObject.ParentHabitat != null)
                {
                    num += DetermineBaseStrengthAtHabitat(builtObject.ParentHabitat, empire);
                }
                else if (builtObject.Role == BuiltObjectRole.Base)
                {
                    num += builtObject.CalculateOverallStrengthFactor();
                }
            }
            return num;
        }

        public int DetermineDefendingFirepower(Habitat habitat, Empire empire)
        {
            int num = 0;
            if (habitat != null)
            {
                BuiltObjectList ships = null;
                num += DetermineShipFirepowerNearHabitat(habitat, empire, out ships);
                num += DetermineBaseFirepowerAtHabitat(habitat, empire);
            }
            return num;
        }

        public int DetermineBaseFirepowerAtHabitat(Habitat habitat, Empire empire)
        {
            int num = 0;
            if (habitat.BasesAtHabitat != null && habitat.BasesAtHabitat.Count > 0)
            {
                for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
                {
                    num += habitat.BasesAtHabitat[i].FirepowerRaw;
                }
            }
            return num;
        }

        private int DetermineShipFirepowerNearHabitat(Habitat habitat, Empire empire, out BuiltObjectList ships)
        {
            int num = 0;
            ships = new BuiltObjectList();
            float num2 = 4000000f;
            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
            if (empire != null && empire.BuiltObjects != null)
            {
                for (int i = 0; i < empire.BuiltObjects.Count; i++)
                {
                    if (empire.BuiltObjects[i].NearestSystemStar == habitat2 && empire.BuiltObjects[i].Role != BuiltObjectRole.Base && empire.BuiltObjects[i].BuiltAt == null)
                    {
                        BuiltObject builtObject = empire.BuiltObjects[i];
                        if (builtObject.ParentHabitat == habitat || builtObject.AttackRangeSquared > num2)
                        {
                            num += builtObject.FirepowerRaw;
                            ships.Add(builtObject);
                        }
                    }
                }
            }
            return num;
        }

        public int DetermineDefendingStrength(Habitat habitat, Empire empire)
        {
            int num = 0;
            if (habitat != null)
            {
                BuiltObjectList ships = null;
                num += DetermineShipStrengthNearHabitat(habitat, empire, out ships);
                num += DetermineBaseStrengthAtHabitat(habitat, empire);
            }
            return num;
        }

        public int DetermineBaseStrengthAtHabitat(Habitat habitat, Empire empire)
        {
            int num = 0;
            if (habitat != null && habitat.BasesAtHabitat != null && habitat.BasesAtHabitat.Count > 0)
            {
                for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
                {
                    BuiltObject builtObject = habitat.BasesAtHabitat[i];
                    if (builtObject != null)
                    {
                        num += builtObject.CalculateOverallStrengthFactor();
                    }
                }
            }
            return num;
        }

        private int DetermineShipStrengthNearHabitat(Habitat habitat, Empire empire, out BuiltObjectList ships)
        {
            int num = 0;
            ships = new BuiltObjectList();
            if (empire != null && empire.BuiltObjects != null && habitat != null)
            {
                float num2 = 4000000f;
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                if (empire.BuiltObjects != null)
                {
                    for (int i = 0; i < empire.BuiltObjects.Count; i++)
                    {
                        BuiltObject builtObject = empire.BuiltObjects[i];
                        if (builtObject != null && builtObject.NearestSystemStar == habitat2 && builtObject.Role == BuiltObjectRole.Military && builtObject.BuiltAt == null)
                        {
                            double num3 = 0.0;
                            if (builtObject.WarpSpeed <= 0)
                            {
                                num3 = CalculateDistanceSquared(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                            }
                            if (num3 < (double)num2)
                            {
                                num += builtObject.CalculateOverallStrengthFactor();
                                ships.Add(builtObject);
                            }
                        }
                    }
                }
            }
            return num;
        }

        private int DetermineShipStrengthInSystem(Habitat systemStar, Empire empire, out BuiltObjectList ships)
        {
            int num = 0;
            ships = new BuiltObjectList();
            if (empire != null && empire.BuiltObjects != null && systemStar != null)
            {
                for (int i = 0; i < empire.BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = empire.BuiltObjects[i];
                    if (builtObject != null && builtObject.NearestSystemStar == systemStar && builtObject.Role == BuiltObjectRole.Military && builtObject.BuiltAt == null && builtObject.WarpSpeed > 0)
                    {
                        num += builtObject.CalculateOverallStrengthFactor();
                        ships.Add(builtObject);
                    }
                }
            }
            return num;
        }

        private int DetermineShipStrengthInSystem(Habitat systemStar, double x, double y, Empire empire, out BuiltObjectList ships)
        {
            int num = 0;
            ships = new BuiltObjectList();
            if (empire != null && empire.BuiltObjects != null && systemStar != null)
            {
                float num2 = 4000000f;
                for (int i = 0; i < empire.BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = empire.BuiltObjects[i];
                    if (builtObject != null && builtObject.NearestSystemStar == systemStar && builtObject.Role == BuiltObjectRole.Military && builtObject.BuiltAt == null)
                    {
                        double num3 = 0.0;
                        if (builtObject.WarpSpeed <= 0)
                        {
                            num3 = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                        }
                        if (num3 < (double)num2)
                        {
                            num += builtObject.CalculateOverallStrengthFactor();
                            ships.Add(builtObject);
                        }
                    }
                }
            }
            return num;
        }

        public int DetermineBuiltObjectStrengthInSystem(Habitat systemStar, Empire empire, int unarmedStrength, bool includeAllies, out BuiltObjectList ships)
        {
            ships = new BuiltObjectList();
            int num = DetermineBuiltObjectStrengthInSystem(systemStar, empire, unarmedStrength, ref ships);
            if (includeAllies && empire != null && empire.DiplomaticRelations != null)
            {
                for (int i = 0; i < empire.DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = empire.DiplomaticRelations[i];
                    if (diplomaticRelation != null && (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation.Type == DiplomaticRelationType.Protectorate && diplomaticRelation.Initiator != empire)))
                    {
                        num += DetermineBuiltObjectStrengthInSystem(systemStar, diplomaticRelation.OtherEmpire, unarmedStrength, ref ships);
                    }
                }
            }
            return num;
        }

        public int DetermineBuiltObjectStrengthAtLocation(int x, int y, Empire empire, int unarmedStrength, bool includeAllies, out BuiltObjectList ships)
        {
            ships = new BuiltObjectList();
            int num = DetermineBuiltObjectStrengthAtLocation(x, y, empire, unarmedStrength, ref ships);
            if (includeAllies && empire != null && empire.DiplomaticRelations != null)
            {
                for (int i = 0; i < empire.DiplomaticRelations.Count; i++)
                {
                    DiplomaticRelation diplomaticRelation = empire.DiplomaticRelations[i];
                    if (diplomaticRelation != null && (diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact || (diplomaticRelation.Type == DiplomaticRelationType.Protectorate && diplomaticRelation.Initiator != empire)))
                    {
                        num += DetermineBuiltObjectStrengthAtLocation(x, y, diplomaticRelation.OtherEmpire, unarmedStrength, ref ships);
                    }
                }
            }
            return num;
        }

        public int DetermineShipStrengthInSystemExcludeLowEngagementRange(Habitat systemStar, Empire empire, out BuiltObjectList ships)
        {
            int num = 0;
            ships = new BuiltObjectList();
            float num2 = 4000000f;
            if (empire != null && empire.BuiltObjects != null && systemStar != null)
            {
                for (int i = 0; i < empire.BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = empire.BuiltObjects[i];
                    if (builtObject != null && builtObject.NearestSystemStar == systemStar && builtObject.AttackRangeSquared > num2)
                    {
                        int num3 = builtObject.CalculateOverallStrengthFactor();
                        num += num3;
                        if (num3 > 0)
                        {
                            ships.Add(builtObject);
                        }
                    }
                }
            }
            return num;
        }

        private int DetermineBuiltObjectStrengthInSystem(Habitat systemStar, Empire empire, int unarmedStrength, ref BuiltObjectList ships)
        {
            int num = 0;
            if (empire != null && empire.BuiltObjects != null && systemStar != null)
            {
                for (int i = 0; i < empire.BuiltObjects.Count; i++)
                {
                    BuiltObject builtObject = empire.BuiltObjects[i];
                    if (builtObject != null && builtObject.NearestSystemStar == systemStar)
                    {
                        int firepowerRaw = builtObject.FirepowerRaw;
                        num += Math.Max(unarmedStrength, firepowerRaw);
                        if (firepowerRaw > unarmedStrength)
                        {
                            ships.Add(builtObject);
                        }
                    }
                }
            }
            if (unarmedStrength > 0 && empire != null && empire.PrivateBuiltObjects != null && systemStar != null)
            {
                for (int j = 0; j < empire.PrivateBuiltObjects.Count; j++)
                {
                    BuiltObject builtObject2 = empire.PrivateBuiltObjects[j];
                    if (builtObject2 != null && builtObject2.NearestSystemStar == systemStar)
                    {
                        int firepowerRaw2 = builtObject2.FirepowerRaw;
                        num += Math.Max(unarmedStrength, firepowerRaw2);
                        if (firepowerRaw2 > unarmedStrength)
                        {
                            ships.Add(builtObject2);
                        }
                    }
                }
            }
            return num;
        }

        private int DetermineBuiltObjectStrengthAtLocation(int x, int y, Empire empire, int unarmedStrength, ref BuiltObjectList ships)
        {
            int num = 0;
            if (empire != null)
            {
                int threatRange = ThreatRange;
                double num2 = (double)threatRange * (double)threatRange;
                if (empire.BuiltObjects != null)
                {
                    for (int i = 0; i < empire.BuiltObjects.Count; i++)
                    {
                        BuiltObject builtObject = empire.BuiltObjects[i];
                        if (builtObject != null && CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos) <= num2)
                        {
                            int firepowerRaw = builtObject.FirepowerRaw;
                            num += Math.Max(unarmedStrength, firepowerRaw);
                            if (firepowerRaw > unarmedStrength)
                            {
                                ships.Add(builtObject);
                            }
                        }
                    }
                }
                if (unarmedStrength > 0 && empire.PrivateBuiltObjects != null)
                {
                    for (int j = 0; j < empire.PrivateBuiltObjects.Count; j++)
                    {
                        BuiltObject builtObject2 = empire.PrivateBuiltObjects[j];
                        if (builtObject2 != null && CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos) <= num2)
                        {
                            int firepowerRaw2 = builtObject2.FirepowerRaw;
                            num += Math.Max(unarmedStrength, firepowerRaw2);
                            if (firepowerRaw2 > unarmedStrength)
                            {
                                ships.Add(builtObject2);
                            }
                        }
                    }
                }
            }
            return num;
        }

        public int DetermineDefendingBaseStrengthAtColony(Habitat colony)
        {
            int num = 0;
            if (colony != null && colony.Empire != null && colony.Empire != IndependentEmpire && colony.BasesAtHabitat != null)
            {
                for (int i = 0; i < colony.BasesAtHabitat.Count; i++)
                {
                    BuiltObject builtObject = colony.BasesAtHabitat[i];
                    if (builtObject != null)
                    {
                        num += builtObject.CalculateOverallStrengthFactor();
                    }
                }
            }
            return num;
        }

        public void DetermineColonyBaseInfo(Habitat colony, out bool hasSpacePort, out double happinessModifier)
        {
            hasSpacePort = false;
            happinessModifier = 0.0;
            if (colony.BasesAtHabitat == null || colony.BasesAtHabitat.Count <= 0)
            {
                return;
            }
            for (int i = 0; i < colony.BasesAtHabitat.Count; i++)
            {
                BuiltObject builtObject = colony.BasesAtHabitat[i];
                if (builtObject != null)
                {
                    happinessModifier = Math.Max(happinessModifier, (double)(builtObject.MedicalCapacity + builtObject.RecreationCapacity) / 30.0);
                    if (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort)
                    {
                        hasSpacePort = true;
                    }
                }
            }
        }

        public BuiltObject DetermineSpacePortAtColonyIncludingUnderConstruction(Habitat colony)
        {
            if (colony.BasesAtHabitat != null && colony.BasesAtHabitat.Count > 0)
            {
                for (int i = 0; i < colony.BasesAtHabitat.Count; i++)
                {
                    BuiltObject builtObject = colony.BasesAtHabitat[i];
                    if (builtObject != null && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
                    {
                        return builtObject;
                    }
                }
            }
            return null;
        }

        public BuiltObject DetermineSpacePortAtColony(Habitat colony)
        {
            if (colony.Empire != null && colony.Empire != IndependentEmpire)
            {
                for (int i = 0; i < colony.Empire.SpacePorts.Count; i++)
                {
                    BuiltObject builtObject = colony.Empire.SpacePorts[i];
                    if (builtObject != null && builtObject.ParentHabitat == colony)
                    {
                        return builtObject;
                    }
                }
            }
            return null;
        }

        public BuiltObject DetermineSpacePortAtHabitat(Habitat habitat)
        {
            if (habitat != null && habitat.BasesAtHabitat != null)
            {
                for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
                {
                    BuiltObject builtObject = habitat.BasesAtHabitat[i];
                    if (builtObject != null && builtObject.ParentHabitat == habitat && (builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
                    {
                        return builtObject;
                    }
                }
            }
            return null;
        }

        public BuiltObject DetermineNonMiningBaseAtHabitat(Habitat habitat)
        {
            for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
            {
                BuiltObject builtObject = habitat.BasesAtHabitat[i];
                if (builtObject != null && (builtObject.SubRole == BuiltObjectSubRole.GenericBase || builtObject.SubRole == BuiltObjectSubRole.EnergyResearchStation || builtObject.SubRole == BuiltObjectSubRole.WeaponsResearchStation || builtObject.SubRole == BuiltObjectSubRole.HighTechResearchStation || builtObject.SubRole == BuiltObjectSubRole.ResortBase || builtObject.SubRole == BuiltObjectSubRole.MonitoringStation || builtObject.SubRole == BuiltObjectSubRole.DefensiveBase))
                {
                    return builtObject;
                }
            }
            return null;
        }

        public BuiltObject DetermineMiningStationAtHabitatForEmpire(Habitat habitat, Empire empire)
        {
            for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
            {
                BuiltObject builtObject = habitat.BasesAtHabitat[i];
                if (builtObject == null || builtObject.Empire != empire)
                {
                    continue;
                }
                switch (builtObject.SubRole)
                {
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                        return builtObject;
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                        if (builtObject.ExtractionGas > 0 || builtObject.ExtractionMine > 0)
                        {
                            return builtObject;
                        }
                        break;
                }
            }
            return null;
        }

        public bool CheckForeignBaseAtHabitat(Habitat habitat, Empire empire)
        {
            if (habitat != null && habitat.BasesAtHabitat != null && empire != null)
            {
                for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
                {
                    BuiltObject builtObject = habitat.BasesAtHabitat[i];
                    if (builtObject != null && builtObject.Empire != null && builtObject.Empire != empire)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public bool CheckAlreadyHaveMiningStationAtHabitat(Habitat habitat, Empire empire)
        {
            if (habitat != null)
            {
                if (habitat.Category == HabitatCategoryType.GasCloud)
                {
                    if (DetermineMiningStationAtHabitatForEmpire(habitat, empire) == null)
                    {
                        return false;
                    }
                    return true;
                }
                if (DetermineMiningStationAtHabitat(habitat) == null)
                {
                    return false;
                }
                return true;
            }
            return false;
        }

        public BuiltObject DetermineResortBaseAtHabitat(Habitat habitat)
        {
            for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
            {
                BuiltObject builtObject = habitat.BasesAtHabitat[i];
                if (builtObject.SubRole == BuiltObjectSubRole.ResortBase)
                {
                    return builtObject;
                }
            }
            return null;
        }

        public BuiltObject DetermineMiningStationAtHabitat(Habitat habitat)
        {
            for (int i = 0; i < habitat.BasesAtHabitat.Count; i++)
            {
                BuiltObject builtObject = habitat.BasesAtHabitat[i];
                switch (builtObject.SubRole)
                {
                    case BuiltObjectSubRole.GasMiningStation:
                    case BuiltObjectSubRole.MiningStation:
                        return builtObject;
                    case BuiltObjectSubRole.SmallSpacePort:
                    case BuiltObjectSubRole.MediumSpacePort:
                    case BuiltObjectSubRole.LargeSpacePort:
                        if (builtObject.ExtractionGas > 0 || builtObject.ExtractionMine > 0)
                        {
                            return builtObject;
                        }
                        break;
                }
            }
            return null;
        }

        public int CountResourceSourcesForEmpire(Empire empire, byte resourceId)
        {
            return CountResourceSourcesForEmpire(empire, resourceId, includeConstructionShipsBuildingMiningStations: false);
        }

        public int CountResourceSourcesForEmpire(Empire empire, byte resourceId, bool includeConstructionShipsBuildingMiningStations)
        {
            int num = 0;
            HabitatList habitatList = new HabitatList();
            if (empire != null)
            {
                if (empire.Colonies != null)
                {
                    for (int i = 0; i < empire.Colonies.Count; i++)
                    {
                        Habitat habitat = empire.Colonies[i];
                        if (habitat != null && habitat.Resources != null)
                        {
                            int num2 = habitat.Resources.IndexOf(resourceId, 0);
                            if (num2 >= 0)
                            {
                                habitatList.Add(habitat);
                                num++;
                            }
                        }
                    }
                }
                if (empire.MiningStations != null)
                {
                    for (int j = 0; j < empire.MiningStations.Count; j++)
                    {
                        BuiltObject builtObject = empire.MiningStations[j];
                        if (builtObject == null)
                        {
                            continue;
                        }
                        Habitat parentHabitat = builtObject.ParentHabitat;
                        if (parentHabitat != null && parentHabitat.Resources != null)
                        {
                            int num3 = parentHabitat.Resources.IndexOf(resourceId, 0);
                            if (num3 >= 0)
                            {
                                habitatList.Add(parentHabitat);
                                num++;
                            }
                        }
                    }
                }
                if (includeConstructionShipsBuildingMiningStations && empire.ConstructionShips != null)
                {
                    for (int k = 0; k < empire.ConstructionShips.Count; k++)
                    {
                        BuiltObject builtObject2 = empire.ConstructionShips[k];
                        if (builtObject2 == null)
                        {
                            continue;
                        }
                        BuiltObjectMission mission = builtObject2.Mission;
                        if (mission != null && mission.Type == BuiltObjectMissionType.Build && mission.TargetHabitat != null)
                        {
                            Habitat targetHabitat = mission.TargetHabitat;
                            if (targetHabitat != null && !habitatList.Contains(targetHabitat) && targetHabitat.Resources != null && targetHabitat.Resources.ContainsId(resourceId))
                            {
                                num++;
                            }
                        }
                    }
                }
            }
            return num;
        }

        public double CountResourceSupplyForGalaxy(byte resourceId)
        {
            double num = 0.0;
            EmpireList empireList = new EmpireList();
            empireList.AddRange(Empires);
            empireList.AddRange(PirateEmpires);
            for (int i = 0; i < empireList.Count; i++)
            {
                Empire empire = empireList[i];
                num += CountResourceSupplyForEmpire(empire, resourceId);
            }
            return num;
        }

        public double CountResourceSupplyForEmpire(Empire empire, byte resourceId)
        {
            double num = 0.0;
            Resource resource = new Resource(resourceId);
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                Habitat habitat = empire.Colonies[i];
                if (habitat.Cargo != null && habitat.Empire == empire && habitat.Cargo.GetExists(resource))
                {
                    int num2 = habitat.Cargo.IndexOf(resource, empire);
                    if (num2 >= 0)
                    {
                        num += (double)habitat.Cargo[num2].Available;
                    }
                }
            }
            for (int j = 0; j < empire.SpacePorts.Count; j++)
            {
                BuiltObject builtObject = empire.SpacePorts[j];
                if (builtObject.Cargo != null && (builtObject.ParentHabitat == null || builtObject.ParentHabitat.Empire != empire) && builtObject.Cargo.GetExists(resource))
                {
                    int num3 = builtObject.Cargo.IndexOf(resource, empire);
                    if (num3 >= 0)
                    {
                        num += (double)builtObject.Cargo[num3].Available;
                    }
                }
            }
            for (int k = 0; k < empire.MiningStations.Count; k++)
            {
                BuiltObject builtObject2 = empire.MiningStations[k];
                if (builtObject2.Cargo != null && builtObject2.Cargo.GetExists(resource))
                {
                    int num4 = builtObject2.Cargo.IndexOf(resource, empire);
                    if (num4 >= 0)
                    {
                        num += (double)builtObject2.Cargo[num4].Available;
                    }
                }
            }
            return num;
        }

        public static bool ConditionCheckLimit(bool condition, int maximumIterations, ref int iterationCount)
        {
            if (iterationCount >= maximumIterations)
            {
                return false;
            }
            iterationCount++;
            return condition;
        }

        public static StellarObjectList EnsureSingleStellarObjectPerSystem(StellarObjectList stellarObjects)
        {
            HabitatList habitatList = DetermineSystemsForStellarObjects(stellarObjects);
            for (int i = 0; i < habitatList.Count; i++)
            {
                Habitat systemStar = habitatList[i];
                StellarObjectList stellarObjectList = ExtractStellarObjectsForSystem(stellarObjects, systemStar);
                if (stellarObjectList.Count <= 1)
                {
                    continue;
                }
                for (int j = 0; j < stellarObjectList.Count; j++)
                {
                    StellarObject stellarObject = stellarObjectList[j];
                    if (stellarObject is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)stellarObject;
                        stellarObject.SortTag = builtObject.Size;
                    }
                    else if (stellarObject is Habitat)
                    {
                        Habitat habitat = (Habitat)stellarObject;
                        stellarObject.SortTag = Math.Max((double)habitat.StrategicValue / 10.0, habitat.Size);
                    }
                    else
                    {
                        stellarObject.SortTag = 1.0;
                    }
                }
                StellarObject.SortStellarObject comparer = new StellarObject.SortStellarObject();
                stellarObjectList.Sort(comparer);
                stellarObjectList.Reverse();
                if (stellarObjectList.Count > 1)
                {
                    for (int k = 1; k < stellarObjectList.Count; k++)
                    {
                        stellarObjects.Remove(stellarObjectList[k]);
                    }
                }
            }
            return stellarObjects;
        }

        public static StellarObjectList ExtractStellarObjectsForSystem(StellarObjectList stellarObjects, Habitat systemStar)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            for (int i = 0; i < stellarObjects.Count; i++)
            {
                StellarObject stellarObject = stellarObjects[i];
                Habitat habitat = DetermineHabitatSystemStarForStellarObject(stellarObject);
                if (habitat == systemStar)
                {
                    stellarObjectList.Add(stellarObject);
                }
            }
            return stellarObjectList;
        }

        public static StellarObjectList RemoveObjectsWithSystemStar(StellarObjectList stellarObjects, Habitat systemStar)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            for (int i = 0; i < stellarObjects.Count; i++)
            {
                Habitat habitat = DetermineHabitatSystemStarForStellarObject(stellarObjects[i]);
                if (habitat != systemStar)
                {
                    stellarObjectList.Add(stellarObjects[i]);
                }
            }
            return stellarObjectList;
        }

        public static HabitatList DetermineSystemsForStellarObjects(StellarObjectList stellarObjects)
        {
            HabitatList habitatList = new HabitatList();
            for (int i = 0; i < stellarObjects.Count; i++)
            {
                Habitat habitat = DetermineHabitatSystemStarForStellarObject(stellarObjects[i]);
                if (habitat != null && !habitatList.Contains(habitat))
                {
                    habitatList.Add(habitat);
                }
            }
            return habitatList;
        }

        public static Habitat DetermineHabitatSystemStarForStellarObject(StellarObject stellarObject)
        {
            Habitat result = null;
            if (stellarObject is Habitat)
            {
                result = DetermineHabitatSystemStar((Habitat)stellarObject);
            }
            else if (stellarObject is BuiltObject)
            {
                result = ((BuiltObject)stellarObject).NearestSystemStar;
            }
            return result;
        }

        public static Habitat DetermineHabitatSystemStar(Habitat habitat)
        {
            Habitat result = null;
            if (habitat != null)
            {
                switch (habitat.Category)
                {
                    case HabitatCategoryType.Planet:
                    case HabitatCategoryType.Asteroid:
                        result = habitat.Parent;
                        break;
                    case HabitatCategoryType.Moon:
                        result = habitat.Parent.Parent;
                        break;
                    case HabitatCategoryType.Star:
                    case HabitatCategoryType.GasCloud:
                        result = habitat;
                        break;
                    default:
                        result = null;
                        break;
                }
            }
            return result;
        }

        public BuiltObject FastFindBestConstructionShip(double x, double y, Empire empire)
        {
            BuiltObject result = null;
            double num = double.MaxValue;
            if (empire != null)
            {
                for (int i = 0; i < empire.ConstructionShips.Count; i++)
                {
                    BuiltObject builtObject = empire.ConstructionShips[i];
                    if (builtObject == null || !builtObject.IsShipYard)
                    {
                        continue;
                    }
                    double num2 = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
                    double num3 = 1000.0;
                    if (builtObject.ConstructionQueue != null && builtObject.ConstructionQueue.ConstructionWaitQueue != null)
                    {
                        num3 = 100.0;
                        if (builtObject.Mission != null && builtObject.Mission.Type != 0)
                        {
                            num3 += 500.0;
                            if (builtObject.SubsequentMissions != null && builtObject.SubsequentMissions.Count > 0)
                            {
                                num3 += (double)builtObject.SubsequentMissions.Count * 500.0;
                            }
                            if (builtObject.ConstructionQueue.ConstructionWaitQueue.Count > 0)
                            {
                                num3 += (double)builtObject.ConstructionQueue.ConstructionWaitQueue.Count * 500.0;
                            }
                        }
                    }
                    double num4 = num3 * num2;
                    if (num4 < num)
                    {
                        result = builtObject;
                        num = num4;
                    }
                }
            }
            return result;
        }

        public bool CheckWithinDistancePotential(double distance, double x1, double y1, double x2, double y2)
        {
            distance += distance;
            if (Math.Abs(x1 - x2) < distance || Math.Abs(y1 - y2) < distance)
            {
                return true;
            }
            return false;
        }

        public bool CheckWithinDistancePotentialUnmodified(double distance, double x1, double y1, double x2, double y2)
        {
            if (Math.Abs(x1 - x2) < distance || Math.Abs(y1 - y2) < distance)
            {
                return true;
            }
            return false;
        }

        public BuiltObject FindBuiltObjectWithScanRange(double x, double y, Empire empire)
        {
            for (int i = 0; i < empire.BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = empire.BuiltObjects[i];
                if (builtObject != null && builtObject.CurrentSpeed <= (float)builtObject.TopSpeed && CheckWithinDistancePotentialUnmodified(Math.Max(ThreatRange, builtObject.SensorProximityArrayRange), x, y, builtObject.Xpos, builtObject.Ypos))
                {
                    double num = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
                    if ((int)num <= Math.Max(ThreatRange, builtObject.SensorProximityArrayRange))
                    {
                        return builtObject;
                    }
                }
            }
            for (int j = 0; j < empire.PrivateBuiltObjects.Count; j++)
            {
                BuiltObject builtObject2 = empire.PrivateBuiltObjects[j];
                if (builtObject2 != null && builtObject2.CurrentSpeed <= (float)builtObject2.TopSpeed && CheckWithinDistancePotentialUnmodified(Math.Max(ThreatRange, builtObject2.SensorProximityArrayRange), x, y, builtObject2.Xpos, builtObject2.Ypos))
                {
                    double num2 = CalculateDistance(x, y, builtObject2.Xpos, builtObject2.Ypos);
                    if ((int)num2 <= Math.Max(ThreatRange, builtObject2.SensorProximityArrayRange))
                    {
                        return builtObject2;
                    }
                }
            }
            return null;
        }

        public BuiltObject FindNearestBuiltObject(int x, int y, Empire empire)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            GalaxyIndex galaxyIndex = ResolveIndex(x, y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, x, y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    BuiltObject builtObject = FindNearestBuiltObjectInIndex(x, y, index, out distance, empire);
                    if (distance < num)
                    {
                        result = builtObject;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public double CalculateDistanceSquared(double x1, double y1, double x2, double y2)
        {
            double num = x1 - x2;
            double num2 = y1 - y2;
            return num2 * num2 + num * num;
        }

        private BuiltObject FindNearestBuiltObjectInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire)
        {
            BuiltObject builtObject = null;
            BuiltObjectList builtObjectList = BuiltObjectIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject2 = builtObjectList[i];
                if (builtObject2 == null)
                {
                    continue;
                }
                double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                if (!(num < distance))
                {
                    continue;
                }
                if (empire != null)
                {
                    if (builtObject2.Empire == empire)
                    {
                        builtObject = builtObject2;
                        distance = num;
                    }
                }
                else
                {
                    builtObject = builtObject2;
                    distance = num;
                }
            }
            if (builtObject != null)
            {
                distance = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
            }
            return builtObject;
        }

        public BuiltObject FindNearestBuiltObject(int x, int y, BuiltObjectRole role)
        {
            return FindNearestBuiltObject(x, y, role, includeIndependentBuiltObjects: true);
        }

        public BuiltObject FindNearestBuiltObject(int x, int y, BuiltObjectRole role, bool includeIndependentBuiltObjects)
        {
            return FindNearestBuiltObject(x, y, role, includeIndependentBuiltObjects, null);
        }

        public BuiltObject FindNearestBuiltObject(int x, int y, BuiltObjectRole role, bool includeIndependentBuiltObjects, Empire empireToExclude)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            GalaxyIndex galaxyIndex = ResolveIndex(x, y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, x, y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    BuiltObject builtObject = FindNearestBuiltObjectInIndex(x, y, index, out distance, role, includeIndependentBuiltObjects, empireToExclude);
                    if (distance < num)
                    {
                        result = builtObject;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private BuiltObject FindNearestBuiltObjectInIndex(int x, int y, GalaxyIndex index, out double distance, BuiltObjectRole role, bool includeIndependentBuiltObjects, Empire empireToExclude)
        {
            BuiltObject builtObject = null;
            BuiltObjectList builtObjectList = BuiltObjectIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject2 = builtObjectList[i];
                if (builtObject2 == null || (!includeIndependentBuiltObjects && builtObject2.Empire == IndependentEmpire) || (empireToExclude != null && builtObject2.Empire == empireToExclude))
                {
                    continue;
                }
                double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                if (!(num < distance))
                {
                    continue;
                }
                if (role != 0)
                {
                    if (builtObject2.Role == role)
                    {
                        builtObject = builtObject2;
                        distance = num;
                    }
                }
                else
                {
                    builtObject = builtObject2;
                    distance = num;
                }
            }
            if (builtObject != null)
            {
                distance = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
            }
            return builtObject;
        }

        public BuiltObject FindNearestKnownBase(Empire requester, double x, double y, Empire targetEmpire, int maximumOverallStrength)
        {
            BuiltObject result = null;
            if (requester != null && targetEmpire != null)
            {
                BuiltObject builtObject = null;
                BuiltObject builtObject2 = null;
                BuiltObject builtObject3 = null;
                BuiltObject builtObject4 = null;
                double nearestDistanceSquared = double.MaxValue;
                double nearestDistanceSquared2 = double.MaxValue;
                double nearestDistanceSquared3 = double.MaxValue;
                double nearestDistanceSquared4 = double.MaxValue;
                if (targetEmpire.SpacePorts != null)
                {
                    builtObject = FindNearestKnownBaseInSet(requester, x, y, targetEmpire.SpacePorts, out nearestDistanceSquared, maximumOverallStrength);
                }
                if (targetEmpire.MiningStations != null)
                {
                    builtObject2 = FindNearestKnownBaseInSet(requester, x, y, targetEmpire.MiningStations, out nearestDistanceSquared2, maximumOverallStrength);
                }
                if (targetEmpire.ResortBases != null)
                {
                    builtObject3 = FindNearestKnownBaseInSet(requester, x, y, targetEmpire.ResortBases, out nearestDistanceSquared3, maximumOverallStrength);
                }
                if (targetEmpire.ResearchFacilities != null)
                {
                    builtObject4 = FindNearestKnownBaseInSet(requester, x, y, targetEmpire.ResearchFacilities, out nearestDistanceSquared4, maximumOverallStrength);
                }
                if (builtObject != null && nearestDistanceSquared < nearestDistanceSquared2 && nearestDistanceSquared < nearestDistanceSquared3 && nearestDistanceSquared < nearestDistanceSquared4)
                {
                    result = builtObject;
                }
                else if (builtObject2 != null && nearestDistanceSquared2 < nearestDistanceSquared && nearestDistanceSquared2 < nearestDistanceSquared3 && nearestDistanceSquared2 < nearestDistanceSquared4)
                {
                    result = builtObject2;
                }
                else if (builtObject3 != null && nearestDistanceSquared3 < nearestDistanceSquared && nearestDistanceSquared3 < nearestDistanceSquared2 && nearestDistanceSquared3 < nearestDistanceSquared4)
                {
                    result = builtObject3;
                }
                else if (builtObject4 != null && nearestDistanceSquared4 < nearestDistanceSquared && nearestDistanceSquared4 < nearestDistanceSquared2 && nearestDistanceSquared4 < nearestDistanceSquared3)
                {
                    result = builtObject4;
                }
            }
            return result;
        }

        public BuiltObject FindNearestKnownBaseInSet(Empire requester, double x, double y, BuiltObjectList builtObjects, int maximumOverallStrength)
        {
            double nearestDistanceSquared = 0.0;
            return FindNearestKnownBaseInSet(requester, x, y, builtObjects, out nearestDistanceSquared, maximumOverallStrength);
        }

        public BuiltObject FindNearestKnownBaseInSet(Empire requester, double x, double y, BuiltObjectList builtObjects, out double nearestDistanceSquared, int maximumOverallStrength)
        {
            BuiltObject builtObject = null;
            nearestDistanceSquared = double.MaxValue;
            if (requester != null && builtObjects != null)
            {
                for (int i = 0; i < builtObjects.Count; i++)
                {
                    BuiltObject builtObject2 = builtObjects[i];
                    if (builtObject2 == null || builtObject2.HasBeenDestroyed || builtObject2.CalculateOverallStrengthFactor() > maximumOverallStrength)
                    {
                        continue;
                    }
                    double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                    if (builtObject != null && !(num < nearestDistanceSquared))
                    {
                        continue;
                    }
                    if (builtObject2.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject2.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject2.SubRole == BuiltObjectSubRole.LargeSpacePort)
                    {
                        if (requester.IsObjectAreaKnownToThisEmpire(builtObject2))
                        {
                            builtObject = builtObject2;
                            nearestDistanceSquared = num;
                        }
                    }
                    else if (requester.IsObjectVisibleToThisEmpire(builtObject2, includeLongRangeScanners: true, includeShipsOutsideSystems: false))
                    {
                        builtObject = builtObject2;
                        nearestDistanceSquared = num;
                    }
                }
            }
            return builtObject;
        }

        public BuiltObject FindNearestKnownBaseOfEmpireForPirateAttack(Empire attackingPirateEmpire, double x, double y, Empire targetEmpire)
        {
            return FindNearestKnownBaseOfEmpireForPirateAttack(attackingPirateEmpire, x, y, targetEmpire, int.MaxValue);
        }

        public BuiltObject FindNearestKnownBaseOfEmpireForPirateAttack(Empire attackingPirateEmpire, double x, double y, Empire targetEmpire, int attackStrength)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    BuiltObject builtObject = FindNearestKnownBaseOfEmpireForPirateAttackInIndex(x, y, index, out distance, attackingPirateEmpire, targetEmpire, attackStrength);
                    if (distance < num)
                    {
                        result = builtObject;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private BuiltObject FindNearestKnownBaseOfEmpireForPirateAttackInIndex(double x, double y, GalaxyIndex index, out double distance, Empire attackingEmpire, Empire targetEmpire, int attackStrength)
        {
            BuiltObject builtObject = null;
            BuiltObjectList builtObjectList = BuiltObjectIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject2 = builtObjectList[i];
                if (builtObject2 == null || builtObject2.HasBeenDestroyed || builtObject2.Role != BuiltObjectRole.Base || builtObject2.Empire != targetEmpire)
                {
                    continue;
                }
                double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                if (num < distance && attackingEmpire.IsObjectVisibleToThisEmpire(builtObject2, includeLongRangeScanners: true, includeShipsOutsideSystems: false))
                {
                    int num2 = 0;
                    if (attackStrength < int.MaxValue)
                    {
                        num2 = attackingEmpire.CalculateDefendingStrength(builtObject2);
                    }
                    if (attackStrength >= num2)
                    {
                        builtObject = builtObject2;
                        distance = num;
                    }
                }
            }
            if (builtObject != null)
            {
                distance = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
            }
            return builtObject;
        }

        public BuiltObject FindNearestKnownBaseForPirateAttack(Empire attackingPirateEmpire, double x, double y)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            EmpireList empireList = attackingPirateEmpire.PirateRelations.ResolveEmpiresWithProtection();
            if (!empireList.Contains(attackingPirateEmpire))
            {
                empireList.Add(attackingPirateEmpire);
            }
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    BuiltObject builtObject = FindNearestKnownBaseForPirateAttackInIndex(x, y, index, out distance, attackingPirateEmpire, empireList);
                    if (distance < num)
                    {
                        result = builtObject;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private BuiltObject FindNearestKnownBaseForPirateAttackInIndex(double x, double y, GalaxyIndex index, out double distance, Empire attackingEmpire, EmpireList empiresToExclude)
        {
            BuiltObject builtObject = null;
            BuiltObject[] array = ListHelper.ToArrayThreadSafe(BuiltObjectIndex[index.X][index.Y]);
            distance = double.MaxValue;
            foreach (BuiltObject builtObject2 in array)
            {
                if (builtObject2 == null || builtObject2.HasBeenDestroyed || builtObject2.Role != BuiltObjectRole.Base || empiresToExclude.Contains(builtObject2.Empire) || builtObject2.Empire == IndependentEmpire || builtObject2.Empire == null)
                {
                    continue;
                }
                double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                if (!(num < distance) || !attackingEmpire.IsObjectVisibleToThisEmpire(builtObject2, includeLongRangeScanners: true, includeShipsOutsideSystems: false))
                {
                    continue;
                }
                EmpireActivity firstByTargetAndType = attackingEmpire.PirateMissions.GetFirstByTargetAndType(builtObject2, EmpireActivityType.Defend);
                if (firstByTargetAndType != null)
                {
                    continue;
                }
                bool flag = true;
                if (builtObject2.Empire != null && builtObject2.Empire != attackingEmpire && attackingEmpire.PirateEmpireBaseHabitat != null)
                {
                    PirateRelation pirateRelation = attackingEmpire.ObtainPirateRelation(builtObject2.Empire);
                    if (pirateRelation.Type == PirateRelationType.Protection)
                    {
                        flag = false;
                    }
                }
                if (flag)
                {
                    builtObject = builtObject2;
                    distance = num;
                }
            }
            if (builtObject != null)
            {
                distance = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
            }
            return builtObject;
        }

        public BuiltObject FindNearestBaseForPirateAttack(double x, double y, Empire empireToExclude)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    BuiltObject builtObject = FindNearestBaseForPirateAttackInIndex(x, y, index, out distance, empireToExclude);
                    if (distance < num)
                    {
                        result = builtObject;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private BuiltObject FindNearestBaseForPirateAttackInIndex(double x, double y, GalaxyIndex index, out double distance, Empire empireToExclude)
        {
            BuiltObject builtObject = null;
            BuiltObjectList builtObjectList = BuiltObjectIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject2 = builtObjectList[i];
                if (builtObject2 != null && builtObject2.Role == BuiltObjectRole.Base && builtObject2.Empire != empireToExclude && builtObject2.Empire != IndependentEmpire && builtObject2.Empire != null)
                {
                    double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                    if (num < distance)
                    {
                        builtObject = builtObject2;
                        distance = num;
                    }
                }
            }
            if (builtObject != null)
            {
                distance = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
            }
            return builtObject;
        }

        public StellarObject FindNearestStationaryStellarObject(double x, double y, Empire empire)
        {
            if (empire != null)
            {
                double num = double.MaxValue;
                double num2 = double.MaxValue;
                double num3 = double.MaxValue;
                BuiltObject builtObject = null;
                BuiltObject builtObject2 = null;
                Habitat habitat = FindNearestColony(x, y, empire, 0, includeIndependentColonies: false);
                if (habitat != null)
                {
                    num3 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                }
                if (empire.BuiltObjects != null && empire.PrivateBuiltObjects != null)
                {
                    List<BuiltObjectRole> list = new List<BuiltObjectRole>();
                    list.Add(BuiltObjectRole.Base);
                    List<BuiltObjectRole> roles = list;
                    BuiltObjectList builtObjectsByRole = empire.BuiltObjects.GetBuiltObjectsByRole(roles);
                    BuiltObjectList builtObjectsByRole2 = empire.PrivateBuiltObjects.GetBuiltObjectsByRole(roles);
                    builtObject = FindNearestBuiltObjectInSet(x, y, builtObjectsByRole);
                    if (builtObject != null)
                    {
                        num = CalculateDistanceSquared(x, y, builtObject.Xpos, builtObject.Ypos);
                    }
                    builtObject2 = FindNearestBuiltObjectInSet(x, y, builtObjectsByRole2);
                    if (builtObject2 != null)
                    {
                        num2 = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                    }
                }
                if (num3 < num2 && num3 < num)
                {
                    return habitat;
                }
                if (num2 < num3 && num2 < num)
                {
                    return builtObject2;
                }
                if (num < num3 && num < num2)
                {
                    return builtObject;
                }
            }
            return null;
        }

        public BuiltObject FindNearestBuiltObject(int x, int y, Empire empire, BuiltObjectSubRole subRole, bool fullyFunctional)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            GalaxyIndex galaxyIndex = ResolveIndex(x, y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, x, y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    BuiltObject builtObject = FindNearestBuiltObjectInIndex(x, y, index, out distance, empire, subRole, fullyFunctional);
                    if (distance < num)
                    {
                        result = builtObject;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private BuiltObject FindNearestBuiltObjectInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire, BuiltObjectSubRole subRole, bool fullyFunctional)
        {
            BuiltObject builtObject = null;
            BuiltObjectList builtObjectList = BuiltObjectIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < builtObjectList.Count; i++)
            {
                BuiltObject builtObject2 = builtObjectList[i];
                if (builtObject2 == null)
                {
                    continue;
                }
                double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                if (!(num < distance))
                {
                    continue;
                }
                bool flag = true;
                if (fullyFunctional && (builtObject2.BuiltAt != null || builtObject2.UnbuiltOrDamagedComponentCount > 0))
                {
                    flag = false;
                }
                if (!flag)
                {
                    continue;
                }
                bool flag2 = true;
                if (empire != null && builtObject2.Empire != empire)
                {
                    flag2 = false;
                }
                if (!flag2)
                {
                    continue;
                }
                if (subRole != 0)
                {
                    if (builtObject2.SubRole == subRole)
                    {
                        builtObject = builtObject2;
                        distance = num;
                    }
                }
                else
                {
                    builtObject = builtObject2;
                    distance = num;
                }
            }
            if (builtObject != null)
            {
                distance = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
            }
            return builtObject;
        }

        public BuiltObject FindNearestBuiltObject(int x, int y, BuiltObjectSubRole subRole, bool includeSecondaryEmpires)
        {
            double num = double.MaxValue;
            BuiltObject result = null;
            GalaxyIndex galaxyIndex = ResolveIndex(x, y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, x, y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    BuiltObject builtObject = FindNearestBuiltObjectInIndex(x, y, index, out distance, subRole, includeSecondaryEmpires);
                    if (distance < num)
                    {
                        result = builtObject;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private BuiltObject FindNearestBuiltObjectInIndex(int x, int y, GalaxyIndex index, out double distance, BuiltObjectSubRole subRole, bool includeSecondaryEmpires)
        {
            BuiltObject builtObject = null;
            BuiltObject[] array = ListHelper.ToArrayThreadSafe(BuiltObjectIndex[index.X][index.Y]);
            distance = double.MaxValue;
            if (array != null)
            {
                foreach (BuiltObject builtObject2 in array)
                {
                    if (builtObject2 == null)
                    {
                        continue;
                    }
                    double num = CalculateDistanceSquared(x, y, builtObject2.Xpos, builtObject2.Ypos);
                    if (!(num < distance))
                    {
                        continue;
                    }
                    bool flag = true;
                    if (!includeSecondaryEmpires && (builtObject2.Empire == null || builtObject2.Empire == IndependentEmpire || builtObject2.Empire.PirateEmpireBaseHabitat != null))
                    {
                        flag = false;
                    }
                    if (!flag)
                    {
                        continue;
                    }
                    if (subRole != 0)
                    {
                        if (builtObject2.SubRole == subRole)
                        {
                            builtObject = builtObject2;
                            distance = num;
                        }
                    }
                    else
                    {
                        builtObject = builtObject2;
                        distance = num;
                    }
                }
            }
            if (builtObject != null)
            {
                distance = CalculateDistance(x, y, builtObject.Xpos, builtObject.Ypos);
            }
            return builtObject;
        }

        public string ResolveSectorDescription(double x, double y)
        {
            Sector sector = ResolveSector(x, y);
            return ResolveSectorDescription(sector);
        }

        public static string ResolveSectorDescriptionStatic(double x, double y)
        {
            Sector sector = ResolveSectorStatic((int)x, (int)y);
            return ResolveSectorDescription(sector);
        }

        public static string ResolveSectorDescription(Sector sector)
        {
            string text = ((char)(sector.X + 65)).ToString();
            return text + (sector.Y + 1);
        }

        public GalaxyIndex ResolveIndex(double x, double y)
        {
            return ResolveIndex((int)x, (int)y);
        }

        public GalaxyIndex ResolveIndex(int x, int y)
        {
            int x2 = x / IndexSize;
            int y2 = y / IndexSize;
            CorrectIndexCoords(ref x2, ref y2);
            return new GalaxyIndex(x2, y2);
        }

        public Sector ResolveSector(double x, double y)
        {
            return ResolveSector((int)x, (int)y);
        }

        public Sector ResolveSector(int x, int y)
        {
            int x2 = x / SectorSize;
            int y2 = y / SectorSize;
            CorrectSectorCoords(ref x2, ref y2);
            return new Sector(x2, y2);
        }

        public static Sector ResolveSectorStatic(int x, int y)
        {
            int x2 = x / SectorSize;
            int y2 = y / SectorSize;
            CorrectSectorCoords(ref x2, ref y2);
            return new Sector(x2, y2);
        }

        public Habitat FindNearestUncolonizedExploredSystem(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            Habitat result = null;
            for (int i = 0; i < empire.SystemVisibility.Count; i++)
            {
                SystemVisibility systemVisibility = empire.SystemVisibility[i];
                if (empire.CheckSystemVisibilityStatus(systemVisibility.SystemStar.SystemIndex) == SystemVisibilityStatus.Explored && Systems[systemVisibility.SystemStar.SystemIndex].DominantEmpire == null)
                {
                    double num2 = CalculateDistanceSquared(x, y, systemVisibility.SystemStar.Xpos, systemVisibility.SystemStar.Ypos);
                    if (num2 < num)
                    {
                        result = systemVisibility.SystemStar;
                        num = num2;
                    }
                }
            }
            return result;
        }

        public Habitat FindNearestLonelyHabitat(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestLonelyHabitatInIndex((int)x, (int)y, empire, index, out distance);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestLonelyHabitatInIndex(int x, int y, Empire empire, GalaxyIndex index, out double distance)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            int num = -1;
            bool flag = false;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (habitatList[i].Category != 0 && habitatList[i].Category != HabitatCategoryType.Planet && habitatList[i].Category != HabitatCategoryType.Moon)
                {
                    continue;
                }
                if (num != habitatList[i].SystemIndex)
                {
                    EmpireSystemSummary dominantEmpire = Systems[habitatList[i].SystemIndex].DominantEmpire;
                    flag = ((dominantEmpire != null && dominantEmpire.Empire != null) ? true : false);
                    num = habitatList[i].SystemIndex;
                }
                if (flag)
                {
                    continue;
                }
                int num2 = CheckEmpireTerritoryIdAtLocation(x, y);
                if ((num2 >= 0 && num2 != empire.EmpireId) || (habitatList[i].Empire != null && habitatList[i].Empire != IndependentEmpire && habitatList[i].Empire != empire))
                {
                    continue;
                }
                double num3 = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                if (!(num3 < distance))
                {
                    continue;
                }
                BuiltObject builtObject = FindNearestBuiltObject((int)Systems[habitatList[i].SystemIndex].SystemStar.Xpos, (int)Systems[habitatList[i].SystemIndex].SystemStar.Ypos, null);
                if (builtObject != null && builtObject.Empire != null)
                {
                    double num4 = CalculateDistance(Systems[habitatList[i].SystemIndex].SystemStar.Xpos, Systems[habitatList[i].SystemIndex].SystemStar.Ypos, builtObject.Xpos, builtObject.Ypos);
                    if (num4 < (double)MaxSolarSystemSize * 2.1)
                    {
                        continue;
                    }
                }
                habitat = habitatList[i];
                distance = num3;
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FindNearestHabitatEmptySystem(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestHabitatEmptySystemInIndex((int)x, (int)y, index, out distance);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public Habitat FindNearestHabitatEmptySystem(double x, double y, HabitatType type)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestHabitatEmptySystemInIndex((int)x, (int)y, type, index, out distance);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestHabitatEmptySystemInIndex(int x, int y, HabitatType type, GalaxyIndex index, out double distance)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            int num = -1;
            bool flag = false;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (habitatList[i].Category != HabitatCategoryType.Planet && habitatList[i].Category != HabitatCategoryType.Moon)
                {
                    continue;
                }
                if (num != habitatList[i].SystemIndex)
                {
                    EmpireSystemSummary dominantEmpire = Systems[habitatList[i].SystemIndex].DominantEmpire;
                    flag = ((dominantEmpire != null && dominantEmpire.Empire != null) ? true : false);
                    num = habitatList[i].SystemIndex;
                }
                if (flag || (habitatList[i].Empire != null && habitatList[i].Empire != IndependentEmpire))
                {
                    continue;
                }
                double num2 = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                if (!(num2 < distance))
                {
                    continue;
                }
                BuiltObject builtObject = FindNearestBuiltObject((int)Systems[habitatList[i].SystemIndex].SystemStar.Xpos, (int)Systems[habitatList[i].SystemIndex].SystemStar.Ypos, null);
                if (builtObject != null && builtObject.Empire != null)
                {
                    double num3 = CalculateDistance(Systems[habitatList[i].SystemIndex].SystemStar.Xpos, Systems[habitatList[i].SystemIndex].SystemStar.Ypos, builtObject.Xpos, builtObject.Ypos);
                    if (num3 < (double)MaxSolarSystemSize * 2.1)
                    {
                        continue;
                    }
                }
                habitat = habitatList[i];
                distance = num2;
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FindNearestHabitatUnoccupiedSystemWithResourceNotVisibleToPlayer(double x, double y, byte resourceId)
        {
            SystemInfoDistanceList systemInfoDistanceList = GenerateDistanceOrderedSystemList(x, y);
            for (int i = 0; i < systemInfoDistanceList.Count; i++)
            {
                if ((systemInfoDistanceList[i].SystemInfo.DominantEmpire != null && systemInfoDistanceList[i].SystemInfo.DominantEmpire.Empire != null) || systemInfoDistanceList[i].SystemInfo.SystemStar == null)
                {
                    continue;
                }
                Empire empire = CheckSystemOwnership(systemInfoDistanceList[i].SystemInfo.SystemStar);
                if (empire != null || PlayerEmpire.CheckSystemVisible(systemInfoDistanceList[i].SystemInfo.SystemStar.SystemIndex))
                {
                    continue;
                }
                for (int j = 0; j < systemInfoDistanceList[i].SystemInfo.Habitats.Count; j++)
                {
                    if (systemInfoDistanceList[i].SystemInfo.Habitats[j].Resources != null && systemInfoDistanceList[i].SystemInfo.Habitats[j].Resources.IndexOf(resourceId, 0) >= 0)
                    {
                        return systemInfoDistanceList[i].SystemInfo.Habitats[j];
                    }
                }
            }
            return null;
        }

        public Habitat FindNearestHabitatUnoccupiedSystem(double x, double y, HabitatType type)
        {
            SystemInfoDistanceList systemInfoDistanceList = GenerateDistanceOrderedSystemList(x, y);
            for (int i = 0; i < systemInfoDistanceList.Count; i++)
            {
                if (systemInfoDistanceList[i].SystemInfo.DominantEmpire != null && systemInfoDistanceList[i].SystemInfo.DominantEmpire.Empire != null)
                {
                    continue;
                }
                for (int j = 0; j < systemInfoDistanceList[i].SystemInfo.Habitats.Count; j++)
                {
                    if (systemInfoDistanceList[i].SystemInfo.Habitats[j].Type == type)
                    {
                        return systemInfoDistanceList[i].SystemInfo.Habitats[j];
                    }
                }
            }
            return null;
        }

        public Habitat FindNearestColonizableHabitatEmptySystem(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            Design design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
            if (design == null)
            {
                return null;
            }
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestColonizableHabitatEmptySystemInIndex((int)x, (int)y, index, out distance, empire, design);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public Habitat FindNearestColonizableHabitatUnoccupiedSystem(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            Design design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
            List<HabitatType> colonizableHabitatTypes = empire.ColonizableHabitatTypesForEmpire(empire);
            if (design == null)
            {
                return null;
            }
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestColonizableHabitatUnoccupiedSystemInIndex((int)x, (int)y, index, out distance, empire, design, colonizableHabitatTypes);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public Habitat FindNearestColonizableHabitat(double x, double y, Empire empire)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            Design design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
            if (design == null)
            {
                return null;
            }
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestColonizableHabitatInIndex((int)x, (int)y, index, out distance, empire, design);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public Habitat FastFindNearestIndependentHabitat(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            for (int i = 0; i < IndependentColonies.Count; i++)
            {
                Habitat habitat = IndependentColonies[i];
                double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                if (num2 < num)
                {
                    result = habitat;
                    num = num2;
                }
            }
            return result;
        }

        public Habitat FindNearestIndependentHabitat(double x, double y)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestIndependentHabitatInIndex((int)x, (int)y, index, out distance);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestIndependentHabitatInIndex(int x, int y, GalaxyIndex index, out double distance)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (habitatList[i].Population.Count > 0 && (habitatList[i].Empire == null || habitatList[i].Empire == IndependentEmpire))
                {
                    double num = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                    if (num < distance)
                    {
                        habitat = habitatList[i];
                        distance = num;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FindNearestPlanetMoonOfTypeUnoccupiedSystem(double x, double y, Empire empire, HabitatType type)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestPlanetMoonOfTypeUnoccupiedSystemInIndex((int)x, (int)y, index, out distance, empire, type);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestPlanetMoonOfTypeUnoccupiedSystemInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire, HabitatType type)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            int num = -1;
            bool flag = false;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if ((habitatList[i].Category != HabitatCategoryType.Moon && habitatList[i].Category != HabitatCategoryType.Planet) || (type != 0 && habitatList[i].Type != type))
                {
                    continue;
                }
                if (num != habitatList[i].SystemIndex)
                {
                    EmpireSystemSummary dominantEmpire = Systems[habitatList[i].SystemIndex].DominantEmpire;
                    flag = ((dominantEmpire != null && dominantEmpire.Empire != null && dominantEmpire.Empire != empire) ? true : false);
                    num = habitatList[i].SystemIndex;
                }
                if (!flag && (habitatList[i].Empire == null || habitatList[i].Empire == IndependentEmpire))
                {
                    double num2 = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                    if (num2 < distance)
                    {
                        habitat = habitatList[i];
                        distance = num2;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        private Habitat FindNearestColonizableHabitatUnoccupiedSystemInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire, Design latestColonyShip, List<HabitatType> colonizableHabitatTypes)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            int num = -1;
            bool flag = false;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (num != habitatList[i].SystemIndex)
                {
                    EmpireSystemSummary dominantEmpire = Systems[habitatList[i].SystemIndex].DominantEmpire;
                    flag = ((dominantEmpire != null && dominantEmpire.Empire != null && dominantEmpire.Empire != empire) ? true : false);
                    num = habitatList[i].SystemIndex;
                }
                if (!flag && (habitatList[i].Empire == null || habitatList[i].Empire == IndependentEmpire) && CheckEmpireTerritoryCanColonizeHabitat(empire, habitatList[i]))
                {
                    double num2 = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                    if (num2 < distance && empire.CanDesignColonizeHabitat(latestColonyShip, habitatList[i]) && empire.DetermineColonizeLowQualityHabitat(habitatList[i]))
                    {
                        habitat = habitatList[i];
                        distance = num2;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        private Habitat FindNearestHabitatEmptySystemInIndex(int x, int y, GalaxyIndex index, out double distance)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            int num = -1;
            bool flag = false;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if ((habitatList[i].Category != HabitatCategoryType.Planet && habitatList[i].Category != HabitatCategoryType.Moon) || habitatList[i].Type == HabitatType.FrozenGasGiant || habitatList[i].Type == HabitatType.GasGiant || habitatList[i].Diameter < 60)
                {
                    continue;
                }
                if (num != habitatList[i].SystemIndex)
                {
                    EmpireSystemSummary dominantEmpire = Systems[habitatList[i].SystemIndex].DominantEmpire;
                    flag = ((dominantEmpire != null && dominantEmpire.Empire != null) ? true : false);
                    num = habitatList[i].SystemIndex;
                }
                if (flag || (habitatList[i].Empire != null && habitatList[i].Empire != IndependentEmpire))
                {
                    continue;
                }
                double num2 = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                if (!(num2 < distance))
                {
                    continue;
                }
                BuiltObject builtObject = FindNearestBuiltObject((int)Systems[habitatList[i].SystemIndex].SystemStar.Xpos, (int)Systems[habitatList[i].SystemIndex].SystemStar.Ypos, null);
                if (builtObject != null && builtObject.Empire != null && builtObject.Empire != IndependentEmpire)
                {
                    double num3 = CalculateDistance(Systems[habitatList[i].SystemIndex].SystemStar.Xpos, Systems[habitatList[i].SystemIndex].SystemStar.Ypos, builtObject.Xpos, builtObject.Ypos);
                    if (num3 < (double)MaxSolarSystemSize * 2.1)
                    {
                        continue;
                    }
                }
                habitat = habitatList[i];
                distance = num2;
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        private Habitat FindNearestColonizableHabitatEmptySystemInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire, Design latestColonyShip)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            int num = -1;
            bool flag = false;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (num != habitatList[i].SystemIndex)
                {
                    EmpireSystemSummary dominantEmpire = Systems[habitatList[i].SystemIndex].DominantEmpire;
                    flag = ((dominantEmpire != null && dominantEmpire.Empire != null && dominantEmpire.Empire != empire) ? true : false);
                    num = habitatList[i].SystemIndex;
                }
                if (flag || (habitatList[i].Empire != null && habitatList[i].Empire != IndependentEmpire))
                {
                    continue;
                }
                double num2 = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                if (!(num2 < distance) || !empire.CanDesignColonizeHabitat(latestColonyShip, habitatList[i]))
                {
                    continue;
                }
                BuiltObject builtObject = FindNearestBuiltObject((int)Systems[habitatList[i].SystemIndex].SystemStar.Xpos, (int)Systems[habitatList[i].SystemIndex].SystemStar.Ypos, null);
                if (builtObject != null)
                {
                    double num3 = CalculateDistance(Systems[habitatList[i].SystemIndex].SystemStar.Xpos, Systems[habitatList[i].SystemIndex].SystemStar.Ypos, builtObject.Xpos, builtObject.Ypos);
                    if (num3 < (double)MaxSolarSystemSize * 2.1)
                    {
                        continue;
                    }
                }
                habitat = habitatList[i];
                distance = num2;
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        private Habitat FindNearestColonizableHabitatInIndex(int x, int y, GalaxyIndex index, out double distance, Empire empire, Design latestColonyShip)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if ((habitatList[i].Empire == null || habitatList[i].Empire == IndependentEmpire) && CheckEmpireTerritoryCanColonizeHabitat(empire, habitatList[i]))
                {
                    double num = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                    if (num < distance && empire.CanDesignColonizeHabitat(latestColonyShip, habitatList[i]) && empire.DetermineColonizeLowQualityHabitat(habitatList[i]))
                    {
                        habitat = habitatList[i];
                        distance = num;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FindNearestUncolonizedHabitat(double x, double y, HabitatType habitatType)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestUncolonizedHabitatInIndex((int)x, (int)y, index, out distance, habitatType);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private Habitat FindNearestUncolonizedHabitatInIndex(int x, int y, GalaxyIndex index, out double distance, HabitatType habitatType)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (habitatList[i].Empire != null && habitatList[i].Empire != IndependentEmpire)
                {
                    continue;
                }
                double num = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                if (!(num < distance) || (habitatList[i].Category != HabitatCategoryType.Planet && habitatList[i].Category != HabitatCategoryType.Moon))
                {
                    continue;
                }
                if (habitatType != 0)
                {
                    if (habitatList[i].Type == habitatType)
                    {
                        habitat = habitatList[i];
                        distance = num;
                    }
                }
                else
                {
                    habitat = habitatList[i];
                    distance = num;
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public Habitat FindNearestHabitat(int x, int y)
        {
            return FindNearestHabitat((double)x, (double)y, HabitatType.Undefined);
        }

        public Habitat FindNearestHabitat(double x, double y)
        {
            return FindNearestHabitat(x, y, HabitatType.Undefined);
        }

        public Habitat FindNearestHabitat(int x, int y, HabitatType habitatType)
        {
            return FindNearestHabitat((double)x, (double)y, habitatType);
        }

        public Habitat FindNearestHabitat(double x, double y, HabitatType habitatType)
        {
            return FindNearestHabitat(x, y, habitatType, null);
        }

        public Habitat FindNearestHabitat(double x, double y, HabitatType habitatType, Habitat habitatToExclude)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestHabitatInIndex((int)x, (int)y, index, out distance, habitatType, habitatToExclude);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public Habitat FindNearestHabitat(double x, double y, HabitatCategoryType habitatCategoryType)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestHabitatInIndex((int)x, (int)y, index, out distance, habitatCategoryType);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        public Habitat FastFindNearestFuelHabitatAlternate(double x, double y, byte resourceId, Habitat habitatToExclude, Empire empire)
        {
            return FastFindNearestFuelHabitatAlternate(x, y, resourceId, habitatToExclude, empire, null, allowBases: true);
        }

        public Habitat FastFindNearestFuelHabitatAlternate(double x, double y, byte resourceId, Habitat habitatToExclude, Empire empire, Habitat systemToExclude, bool allowBases)
        {
            Habitat result = null;
            double num = double.MaxValue;
            if (empire != null && empire.FuelSystemsSources != null)
            {
                FuelSourceSystemList fuelSourceSystemList = null;
                for (int i = 0; i < empire.FuelSystemsSources.Count; i++)
                {
                    FuelSourceSystemList fuelSourceSystemList2 = empire.FuelSystemsSources[i];
                    if (fuelSourceSystemList2 != null && fuelSourceSystemList2.ResourceId == resourceId)
                    {
                        fuelSourceSystemList = fuelSourceSystemList2;
                        break;
                    }
                }
                if (fuelSourceSystemList != null)
                {
                    for (int j = 0; j < fuelSourceSystemList.Count; j++)
                    {
                        FuelSourceSystem fuelSourceSystem = fuelSourceSystemList[j];
                        if (fuelSourceSystem == null)
                        {
                            continue;
                        }
                        for (int k = 0; k < fuelSourceSystem.KnownFuelSources.Count; k++)
                        {
                            Habitat habitat = fuelSourceSystem.KnownFuelSources[k];
                            if (habitat == habitatToExclude || (!allowBases && habitat.BasesAtHabitat != null && habitat.BasesAtHabitat.Count > 0))
                            {
                                continue;
                            }
                            double num2 = CalculateDistanceSquared(x, y, habitat.Xpos, habitat.Ypos);
                            if (num2 < num)
                            {
                                bool flag = true;
                                if (systemToExclude != null && habitat.SystemIndex == systemToExclude.SystemIndex)
                                {
                                    flag = false;
                                }
                                if (flag)
                                {
                                    result = habitat;
                                    num = num2;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        public Habitat FindNearestHabitatWithResource(double x, double y, byte resourceId)
        {
            return FindNearestHabitatWithResource(x, y, resourceId, null, null);
        }

        public Habitat FindNearestHabitatWithResource(double x, double y, byte resourceId, Habitat habitatToExclude, Empire empire)
        {
            return FindNearestHabitatWithResource(x, y, resourceId, habitatToExclude, empire, null);
        }

        public Habitat FindNearestHabitatWithResource(double x, double y, byte resourceId, Habitat habitatToExclude, Empire empire, Habitat systemToExclude)
        {
            return FindNearestHabitatWithResource(x, y, resourceId, habitatToExclude, empire, systemToExclude, allowBases: true);
        }

        public Habitat FindNearestHabitatWithResource(double x, double y, byte resourceId, Habitat habitatToExclude, Empire empire, Habitat systemToExclude, bool allowBases)
        {
            double num = double.MaxValue;
            Habitat result = null;
            GalaxyIndex galaxyIndex = ResolveIndex((int)x, (int)y);
            int sectorBoundLeft = galaxyIndex.X;
            int sectorBoundRight = galaxyIndex.X;
            int sectorBoundTop = galaxyIndex.Y;
            int sectorBoundBottom = galaxyIndex.Y;
            int num2 = 0;
            int num3 = 0;
            int iterationCount = 0;
            while (ConditionCheckLimit(num > (double)num3, 10000, ref iterationCount))
            {
                num3 = DetermineSectorBoundaries(num2, (int)x, (int)y, galaxyIndex.X, galaxyIndex.Y, ref sectorBoundLeft, ref sectorBoundRight, ref sectorBoundTop, ref sectorBoundBottom, out var sectorColumn, out var sectorRow);
                GalaxyIndexList galaxyIndexList = BuildIndexListForSearching(sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, sectorColumn, sectorRow);
                for (int i = 0; i < galaxyIndexList.Count; i++)
                {
                    GalaxyIndex index = galaxyIndexList[i];
                    double distance;
                    Habitat habitat = FindNearestHabitatWithResourceInIndex(x, y, index, out distance, resourceId, habitatToExclude, empire, systemToExclude, allowBases);
                    if (distance < num)
                    {
                        result = habitat;
                        num = distance;
                    }
                }
                num2++;
                if (num2 > IndexMaxX)
                {
                    break;
                }
            }
            return result;
        }

        private int DetermineSectorBoundaries(int stepCount, int x, int y, int startSectorX, int startSectorY, ref int sectorBoundLeft, ref int sectorBoundRight, ref int sectorBoundTop, ref int sectorBoundBottom, out int sectorColumn, out int sectorRow)
        {
            int nearestX;
            int nearestY;
            int result = DetermineClosestIndexEdges(x, y, sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, out nearestX, out nearestY);
            sectorRow = -1;
            sectorColumn = -1;
            if (stepCount == 0)
            {
                sectorRow = sectorBoundTop;
                sectorColumn = sectorBoundLeft;
                return result;
            }
            switch (nearestX)
            {
                case -1:
                    sectorBoundLeft--;
                    if (sectorBoundLeft < 0)
                    {
                        sectorBoundRight++;
                        sectorBoundLeft = 0;
                        if (sectorBoundRight > IndexMaxX - 1)
                        {
                            sectorBoundRight = IndexMaxX - 1;
                        }
                        sectorColumn = sectorBoundRight;
                    }
                    else
                    {
                        sectorColumn = sectorBoundLeft;
                    }
                    break;
                case 1:
                    sectorBoundRight++;
                    if (sectorBoundRight > IndexMaxX - 1)
                    {
                        sectorBoundLeft--;
                        sectorBoundRight = IndexMaxX - 1;
                        if (sectorBoundLeft < 0)
                        {
                            sectorBoundLeft = 0;
                        }
                        sectorColumn = sectorBoundLeft;
                    }
                    else
                    {
                        sectorColumn = sectorBoundRight;
                    }
                    break;
            }
            switch (nearestY)
            {
                case -1:
                    sectorBoundTop--;
                    if (sectorBoundTop < 0)
                    {
                        sectorBoundBottom++;
                        sectorBoundTop = 0;
                        if (sectorBoundBottom > IndexMaxY - 1)
                        {
                            sectorBoundBottom = IndexMaxY - 1;
                        }
                        sectorRow = sectorBoundBottom;
                    }
                    else
                    {
                        sectorRow = sectorBoundTop;
                    }
                    break;
                case 1:
                    sectorBoundBottom++;
                    if (sectorBoundBottom > IndexMaxY - 1)
                    {
                        sectorBoundTop--;
                        sectorBoundBottom = IndexMaxY - 1;
                        if (sectorBoundTop < 0)
                        {
                            sectorBoundTop = 0;
                        }
                        sectorRow = sectorBoundTop;
                    }
                    else
                    {
                        sectorRow = sectorBoundBottom;
                    }
                    break;
            }
            return DetermineClosestIndexEdges(x, y, sectorBoundLeft, sectorBoundRight, sectorBoundTop, sectorBoundBottom, out nearestX, out nearestY);
        }

        private GalaxyIndexList BuildIndexListForSearching(int indexBoundLeft, int indexBoundRight, int indexBoundTop, int indexBoundBottom, int indexColumn, int indexRow)
        {
            GalaxyIndexList galaxyIndexList = new GalaxyIndexList();
            for (int i = indexBoundLeft; i <= indexBoundRight; i++)
            {
                galaxyIndexList.Add(new GalaxyIndex(i, indexRow));
            }
            for (int j = indexBoundTop; j <= indexBoundBottom; j++)
            {
                if (j != indexRow)
                {
                    galaxyIndexList.Add(new GalaxyIndex(indexColumn, j));
                }
            }
            return galaxyIndexList;
        }

        public int DetermineClosestIndexEdges(int x, int y, int indexBoundLeft, int indexBoundRight, int indexBoundTop, int indexBoundBottom, out int nearestX, out int nearestY)
        {
            int num = x - IndexSize * indexBoundLeft;
            if (num < 0)
            {
                num = 536870911;
            }
            int num2 = IndexSize * (indexBoundRight + 1) - x;
            if (num2 > IndexMaxX * IndexSize)
            {
                num2 = 536870911;
            }
            int num3 = y - IndexSize * indexBoundTop;
            if (num3 < 0)
            {
                num3 = 536870911;
            }
            int num4 = IndexSize * (indexBoundBottom + 1) - y;
            if (num4 > IndexMaxY * IndexSize)
            {
                num4 = 536870911;
            }
            int val;
            if (num < num2)
            {
                val = num;
                nearestX = -1;
            }
            else
            {
                val = num2;
                nearestX = 1;
            }
            int val2;
            if (num3 < num4)
            {
                val2 = num3;
                nearestY = -1;
            }
            else
            {
                val2 = num4;
                nearestY = 1;
            }
            return Math.Min(val, val2);
        }

        public int DetermineClosestIndexEdgesCustom(int x, int y, int indexBoundLeft, int indexBoundRight, int indexBoundTop, int indexBoundBottom, out int nearestX, out int nearestY)
        {
            int num = x - IndexSize * indexBoundLeft;
            if (num < 1 || IndexSize * indexBoundLeft <= 0)
            {
                num = 536870911;
            }
            int num2 = IndexSize * (indexBoundRight + 1) - x;
            if (num2 > IndexMaxX * IndexSize || IndexSize * (indexBoundRight + 1) >= IndexMaxX * IndexSize)
            {
                num2 = 536870911;
            }
            int num3 = y - IndexSize * indexBoundTop;
            if (num3 < 1 || IndexSize * indexBoundTop <= 0)
            {
                num3 = 536870911;
            }
            int num4 = IndexSize * (indexBoundBottom + 1) - y;
            if (num4 > IndexMaxY * IndexSize || IndexSize * (indexBoundBottom + 1) >= IndexMaxY * IndexSize)
            {
                num4 = 536870911;
            }
            int val;
            if (num < num2)
            {
                val = num;
                nearestX = -1;
            }
            else
            {
                val = num2;
                nearestX = 1;
            }
            int val2;
            if (num3 < num4)
            {
                val2 = num3;
                nearestY = -1;
            }
            else
            {
                val2 = num4;
                nearestY = 1;
            }
            if (indexBoundLeft <= 0 && nearestX == -1)
            {
                nearestX = 1;
            }
            if (indexBoundLeft >= IndexMaxX && nearestX == 1)
            {
                nearestX = -1;
            }
            if (indexBoundBottom <= 0 && nearestY == -1)
            {
                nearestY = 1;
            }
            if (indexBoundBottom >= IndexMaxY && nearestY == 1)
            {
                nearestY = 1;
            }
            return Math.Min(val, val2);
        }

        private Habitat FindNearestHabitatInIndex(int x, int y, GalaxyIndex index, out double distance, HabitatType habitatType, Habitat habitatToExclude)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (habitatList[i] == habitatToExclude)
                {
                    continue;
                }
                double num = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                if (!(num < distance))
                {
                    continue;
                }
                if (habitatType != 0)
                {
                    if (habitatList[i].Type == habitatType)
                    {
                        habitat = habitatList[i];
                        distance = num;
                    }
                }
                else
                {
                    habitat = habitatList[i];
                    distance = num;
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        private Habitat FindNearestHabitatInIndex(int x, int y, GalaxyIndex index, out double distance, HabitatCategoryType habitatCategoryType)
        {
            Habitat habitat = null;
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                double num = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                if (num < distance && habitatList[i].Category == habitatCategoryType)
                {
                    habitat = habitatList[i];
                    distance = num;
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        private Habitat FindNearestHabitatWithResourceInIndex(double x, double y, GalaxyIndex index, out double distance, byte resourceId, Habitat habitatToExclude, Empire empire, Habitat systemToExclude, bool allowBases)
        {
            Habitat habitat = null;
            GalaxyResourceMap galaxyResourceMap = null;
            if (empire != null)
            {
                galaxyResourceMap = empire.ResourceMap;
            }
            HabitatList habitatList = HabitatIndex[index.X][index.Y];
            distance = double.MaxValue;
            for (int i = 0; i < habitatList.Count; i++)
            {
                if (habitatList[i].Resources.Count <= 0)
                {
                    continue;
                }
                int num = -1;
                if (systemToExclude != null)
                {
                    num = habitatList[i].SystemIndex;
                }
                if ((systemToExclude != null && num == systemToExclude.SystemIndex) || (habitatToExclude != null && habitatToExclude == habitatList[i]))
                {
                    continue;
                }
                bool flag = true;
                if (galaxyResourceMap != null && !galaxyResourceMap.CheckResourcesKnown(habitatList[i]))
                {
                    flag = false;
                }
                if (flag && habitatList[i].Resources.IndexOf(resourceId, 0) >= 0 && (allowBases || habitatList[i].BasesAtHabitat == null || habitatList[i].BasesAtHabitat.Count <= 0))
                {
                    double num2 = CalculateDistanceSquared(x, y, habitatList[i].Xpos, habitatList[i].Ypos);
                    if (num2 < distance)
                    {
                        habitat = habitatList[i];
                        distance = num2;
                    }
                }
            }
            if (habitat != null)
            {
                distance = CalculateDistance(x, y, habitat.Xpos, habitat.Ypos);
            }
            return habitat;
        }

        public bool DetermineScrapDamagedShip(BuiltObject builtObject)
        {
            if (builtObject.Role != BuiltObjectRole.Base && builtObject.IsAutoControlled && builtObject.DamageRepair <= 0 && builtObject.WarpSpeed <= 0 && (builtObject.Characters == null || builtObject.Characters.Count <= 0) && (builtObject.Troops == null || builtObject.Troops.Count <= 0) && builtObject.Empire != PlayerEmpire && builtObject.PirateEmpireId != PlayerEmpire.EmpireId)
            {
                double num = ResolveTechBonusFactor(builtObject.Empire, this, builtObject);
                if (num <= 1.0)
                {
                    int num2 = builtObject.Components.CountNormalComponentsByCategory(ComponentCategoryType.HyperDrive);
                    if (num2 <= 0)
                    {
                        bool flag = true;
                        if (builtObject.TopSpeed <= 0)
                        {
                            int num3 = builtObject.Components.CountNormalComponentsByType(ComponentType.EngineMainThrust);
                            int num4 = builtObject.Components.CountNormalComponentsByCategory(ComponentCategoryType.Reactor);
                            if (num3 <= 0 || num4 <= 0)
                            {
                                flag = false;
                            }
                        }
                        if (flag)
                        {
                            StellarObject stellarObject = builtObject.Empire.FindNearestShipYard(builtObject, canRepairOrBuild: false, includeVerySmallYards: true);
                            if (stellarObject != null)
                            {
                                double num5 = CalculateDistance(builtObject.Xpos, builtObject.Ypos, stellarObject.Xpos, stellarObject.Ypos);
                                if (num5 < (double)MaxSolarSystemSize)
                                {
                                    return false;
                                }
                            }
                            return true;
                        }
                        if (builtObject.NearestSystemStar != null)
                        {
                            Habitat systemStar = DetermineHabitatSystemStar(builtObject.NearestSystemStar);
                            SystemInfo systemInfo = Systems[systemStar];
                            Empire actualEmpire = builtObject.ActualEmpire;
                            if (actualEmpire != null && systemInfo != null && systemInfo.DominantEmpire != null && systemInfo.DominantEmpire.Empire != null && systemInfo.DominantEmpire.Empire == actualEmpire)
                            {
                                BuiltObject builtObject2 = actualEmpire.FindNearestAvailableConstructionShip(builtObject.Xpos, builtObject.Ypos);
                                if (builtObject2 != null)
                                {
                                    double num6 = CalculateDistance(builtObject.Xpos, builtObject.Ypos, builtObject2.Xpos, builtObject2.Ypos);
                                    double num7 = (double)SectorSize * 3.0;
                                    if (builtObject2.WarpSpeed <= 0)
                                    {
                                        num7 = 2000.0;
                                    }
                                    else if (builtObject2.WarpSpeed < 3000)
                                    {
                                        num7 = (double)SectorSize * 0.5;
                                    }
                                    if (num6 < num7)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                        return true;
                    }
                }
            }
            return false;
        }

        private DistressSignal CheckForMatchingSignal(Empire targetEmpire, Empire attacker, double x, double y)
        {
            return CheckForMatchingSignal(targetEmpire, attacker, x, y, DistressSignalType.UnderAttack);
        }

        private DistressSignal CheckForMatchingSignal(Empire targetEmpire, Empire attacker, double x, double y, DistressSignalType type)
        {
            long currentStarDate = CurrentStarDate;
            if (targetEmpire != null && targetEmpire.DistressSignals != null)
            {
                for (int i = 0; i < targetEmpire.DistressSignals.Count; i++)
                {
                    DistressSignal distressSignal = targetEmpire.DistressSignals[i];
                    if (distressSignal != null && distressSignal.Type == type && distressSignal.Attacker == attacker && distressSignal.Date > currentStarDate - DistressSignalDateRange)
                    {
                        double x2 = 0.0;
                        double y2 = 0.0;
                        if (distressSignal.Source is BuiltObject)
                        {
                            BuiltObject builtObject = (BuiltObject)distressSignal.Source;
                            x2 = builtObject.Xpos;
                            y2 = builtObject.Ypos;
                        }
                        else if (distressSignal.Source is Habitat)
                        {
                            Habitat habitat = (Habitat)distressSignal.Source;
                            x2 = habitat.Xpos;
                            y2 = habitat.Ypos;
                        }
                        double num = CalculateDistanceSquared(x, y, x2, y2);
                        if (num < DistressSignalLocationOverlapRangeSquared)
                        {
                            return distressSignal;
                        }
                    }
                }
            }
            return null;
        }

        private DistressSignal CheckForMatchingSignalSameTargetType(Empire targetEmpire, Empire attacker, StellarObject target, DistressSignalType type)
        {
            long currentStarDate = CurrentStarDate;
            if (target != null && targetEmpire != null && targetEmpire.DistressSignals != null)
            {
                for (int i = 0; i < targetEmpire.DistressSignals.Count; i++)
                {
                    DistressSignal distressSignal = targetEmpire.DistressSignals[i];
                    if (distressSignal == null || distressSignal.Type != type || distressSignal.Attacker != attacker || distressSignal.Date <= currentStarDate - DistressSignalDateRange)
                    {
                        continue;
                    }
                    bool flag = false;
                    double x = 0.0;
                    double y = 0.0;
                    if (target is BuiltObject)
                    {
                        if (distressSignal.Source is BuiltObject)
                        {
                            BuiltObject builtObject = (BuiltObject)distressSignal.Source;
                            x = builtObject.Xpos;
                            y = builtObject.Ypos;
                            flag = true;
                        }
                    }
                    else if (target is Habitat && distressSignal.Source is Habitat)
                    {
                        Habitat habitat = (Habitat)distressSignal.Source;
                        x = habitat.Xpos;
                        y = habitat.Ypos;
                        flag = true;
                    }
                    if (flag)
                    {
                        double num = CalculateDistanceSquared(target.Xpos, target.Ypos, x, y);
                        if (num < DistressSignalLocationOverlapRangeSquared)
                        {
                            return distressSignal;
                        }
                    }
                }
            }
            return null;
        }

        public void NotifyOfAttack(StellarObject attacker, Empire attackingEmpire, BuiltObject builtObjectUnderAttack, bool isNewAttack)
        {
            if (builtObjectUnderAttack == null || builtObjectUnderAttack.Empire == null || attacker == null)
            {
                return;
            }
            DistressSignal distressSignal = CheckForMatchingSignalSameTargetType(builtObjectUnderAttack.Empire, attackingEmpire, builtObjectUnderAttack, DistressSignalType.UnderAttack);
            if (distressSignal == null)
            {
                DistressSignal distressSignal2 = new DistressSignal(builtObjectUnderAttack, DistressSignalType.UnderAttack, CurrentStarDate);
                distressSignal2.Attacker = attackingEmpire;
                if (attacker is BuiltObject)
                {
                    BuiltObject builtObject = (BuiltObject)attacker;
                    distressSignal2.AttackStrength = builtObject.CalculateOverallStrengthFactor();
                }
                else if (attacker is Creature)
                {
                    Creature creature = (Creature)attacker;
                    distressSignal2.AttackStrength = creature.AttackStrength * 5;
                }
                else
                {
                    distressSignal2.AttackStrength = attacker.FirepowerRaw;
                }
                builtObjectUnderAttack.Empire.DistressSignals.Add(distressSignal2);
                string text = string.Empty;
                if (attacker is BuiltObject)
                {
                    BuiltObject builtObject2 = (BuiltObject)attacker;
                    if (builtObject2.Empire.PirateEmpireBaseHabitat != null)
                    {
                        text = text + TextResolver.GetText("Pirate").ToLower(CultureInfo.InvariantCulture) + " ";
                    }
                    text += ResolveDescription(builtObject2.SubRole).ToLower(CultureInfo.InvariantCulture);
                    text = text + " (" + builtObject2.Name + ")";
                }
                else if (attacker is Creature)
                {
                    Creature creature2 = (Creature)attacker;
                    distressSignal2.AttackStrength = creature2.AttackStrength * 5;
                    string text2 = ResolveDescription(creature2.Type);
                    text += text2;
                    if (creature2.Type == CreatureType.Kaltor)
                    {
                        builtObjectUnderAttack.Empire.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.EncounterFirstKaltor, creature2);
                    }
                }
                string empty = string.Empty;
                empty = ((builtObjectUnderAttack.Role != BuiltObjectRole.Base) ? string.Format(TextResolver.GetText("X Y is under attack from ATTACKER"), ResolveDescription(builtObjectUnderAttack.SubRole), builtObjectUnderAttack.Name, text) : string.Format(TextResolver.GetText("X is under attack from ATTACKER"), builtObjectUnderAttack.Name, text));
                builtObjectUnderAttack.Empire.SendMessageToEmpire(builtObjectUnderAttack.Empire, EmpireMessageType.BattleUnderAttack, builtObjectUnderAttack, empty);
            }
            else if (isNewAttack)
            {
                if (attacker is BuiltObject)
                {
                    BuiltObject builtObject3 = (BuiltObject)attacker;
                    distressSignal.AttackStrength += builtObject3.CalculateOverallStrengthFactor();
                }
                else if (attacker is Creature)
                {
                    Creature creature3 = (Creature)attacker;
                    distressSignal.AttackStrength += creature3.AttackStrength * 5;
                }
                else
                {
                    distressSignal.AttackStrength += attacker.FirepowerRaw;
                }
            }
        }

        public void NotifyOfAttack(StellarObject attacker, Empire attackingEmpire, Habitat habitatUnderAttack, bool bombarded, bool isNewAttack, bool notifyIndependent)
        {
            if (habitatUnderAttack != null && habitatUnderAttack.Empire != null && habitatUnderAttack.Empire != IndependentEmpire && attackingEmpire != null && attackingEmpire.DominantRace != null && attacker != null)
            {
                DistressSignalType distressSignalType = DistressSignalType.UnderAttack;
                if (bombarded)
                {
                    distressSignalType = DistressSignalType.ColonyBombarded;
                }
                DistressSignal distressSignal = CheckForMatchingSignalSameTargetType(habitatUnderAttack.Empire, attackingEmpire, habitatUnderAttack, distressSignalType);
                if (distressSignal == null || distressSignal.Source is BuiltObject)
                {
                    DistressSignal distressSignal2 = new DistressSignal(habitatUnderAttack, distressSignalType, CurrentStarDate);
                    distressSignal2.Attacker = attackingEmpire;
                    if (attacker is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)attacker;
                        distressSignal2.AttackStrength = builtObject.CalculateOverallStrengthFactor();
                    }
                    else if (attacker is Creature)
                    {
                        Creature creature = (Creature)attacker;
                        distressSignal2.AttackStrength = creature.AttackStrength * 5;
                    }
                    else
                    {
                        distressSignal2.AttackStrength = attacker.FirepowerRaw;
                    }
                    habitatUnderAttack.Empire.DistressSignals.Add(distressSignal2);
                    string empty = string.Empty;
                    if (distressSignalType == DistressSignalType.ColonyBombarded)
                    {
                        empty = string.Format(TextResolver.GetText("Colony Bombardment"), attackingEmpire.DominantRace.Name, attackingEmpire.Name, habitatUnderAttack.Name);
                    }
                    else
                    {
                        string text = string.Empty;
                        if (attacker is BuiltObject)
                        {
                            BuiltObject builtObject2 = (BuiltObject)attacker;
                            if (builtObject2.Empire.PirateEmpireBaseHabitat != null)
                            {
                                text = text + TextResolver.GetText("Pirate") + " ";
                            }
                            text += ResolveDescription(builtObject2.SubRole).ToLower(CultureInfo.InvariantCulture);
                            text = text + " (" + builtObject2.Name + ")";
                        }
                        else if (attacker is Creature)
                        {
                            Creature creature2 = (Creature)attacker;
                            text += ResolveDescription(creature2.Type);
                            if (creature2.Type == CreatureType.Kaltor)
                            {
                                habitatUnderAttack.Empire.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.EncounterFirstKaltor, creature2);
                            }
                        }
                        empty = string.Format(TextResolver.GetText("X is under attack from ATTACKER"), habitatUnderAttack.Name, text);
                    }
                    habitatUnderAttack.Empire.SendMessageToEmpire(habitatUnderAttack.Empire, EmpireMessageType.BattleUnderAttack, habitatUnderAttack, empty);
                    string empty2 = string.Empty;
                    empty2 = ((distressSignalType != DistressSignalType.ColonyBombarded) ? string.Format(TextResolver.GetText("Our forces are invading COLONY of EMPIRE"), habitatUnderAttack.Name, habitatUnderAttack.Empire.Name) : string.Format(TextResolver.GetText("Our forces are bombarding COLONY of EMPIRE"), habitatUnderAttack.Name, habitatUnderAttack.Empire.Name));
                    attackingEmpire.SendMessageToEmpire(attackingEmpire, EmpireMessageType.BattleUnderAttack, habitatUnderAttack, empty2);
                }
                else if (distressSignalType == DistressSignalType.UnderAttack && isNewAttack)
                {
                    if (attacker is BuiltObject)
                    {
                        BuiltObject builtObject3 = (BuiltObject)attacker;
                        distressSignal.AttackStrength += builtObject3.CalculateOverallStrengthFactor();
                    }
                    else if (attacker is Creature)
                    {
                        Creature creature3 = (Creature)attacker;
                        distressSignal.AttackStrength += creature3.AttackStrength * 5;
                    }
                    else
                    {
                        distressSignal.AttackStrength += attacker.FirepowerRaw;
                    }
                }
            }
            else
            {
                if (habitatUnderAttack.Empire != IndependentEmpire || !notifyIndependent)
                {
                    return;
                }
                DistressSignal distressSignal3 = CheckForMatchingSignal(habitatUnderAttack.Empire, attackingEmpire, habitatUnderAttack.Xpos, habitatUnderAttack.Ypos);
                if (distressSignal3 == null)
                {
                    DistressSignal distressSignal4 = new DistressSignal(habitatUnderAttack, DistressSignalType.UnderAttack, CurrentStarDate);
                    distressSignal4.Attacker = attackingEmpire;
                    if (attacker is BuiltObject)
                    {
                        BuiltObject builtObject4 = (BuiltObject)attacker;
                        distressSignal4.AttackStrength = builtObject4.CalculateOverallStrengthFactor();
                    }
                    else if (attacker is Creature)
                    {
                        Creature creature4 = (Creature)attacker;
                        distressSignal4.AttackStrength = creature4.AttackStrength * 5;
                    }
                    else
                    {
                        distressSignal4.AttackStrength = attacker.FirepowerRaw;
                    }
                    habitatUnderAttack.Empire.DistressSignals.Add(distressSignal4);
                    if (attackingEmpire == null)
                    {
                        return;
                    }
                    if (!bombarded)
                    {
                        attackingEmpire.CivilityRating -= IndependentColonyInvadeReputationImpact;
                    }
                    int num = _EmpireTerritory.CheckLocationOwnership(habitatUnderAttack.Xpos, habitatUnderAttack.Ypos);
                    if (num >= 0 && num != attackingEmpire.EmpireId)
                    {
                        Empire byEmpireId = Empires.GetByEmpireId(num);
                        if (byEmpireId != null)
                        {
                            byEmpireId.ObtainEmpireEvaluation(attackingEmpire).IncidentEvaluation -= 50.0;
                        }
                    }
                }
                else if (isNewAttack)
                {
                    if (attacker is BuiltObject)
                    {
                        BuiltObject builtObject5 = (BuiltObject)attacker;
                        distressSignal3.AttackStrength += builtObject5.CalculateOverallStrengthFactor();
                    }
                    else if (attacker is Creature)
                    {
                        Creature creature5 = (Creature)attacker;
                        distressSignal3.AttackStrength += creature5.AttackStrength * 5;
                    }
                    else
                    {
                        distressSignal3.AttackStrength += attacker.FirepowerRaw;
                    }
                }
            }
        }

        public bool CheckWithinCreatureAttackRange(double x, double y, Creature creature)
        {
            if (creature != null)
            {
                double val = double.MaxValue;
                if (creature.ParentHabitat != null)
                {
                    val = CalculateDistance(x, y, creature.ParentHabitat.Xpos, creature.ParentHabitat.Ypos);
                }
                double val2 = CalculateDistance(x, y, creature.Xpos, creature.Ypos);
                double num = Math.Min(val, val2);
                double num2 = Math.Min(1000.0, creature.AttackRange);
                if (num < num2)
                {
                    return true;
                }
            }
            return false;
        }

        public BuiltObjectList EvaluateSystemThreats(Habitat systemStar, Empire targetEmpire, out List<int> threatLevels)
        {
            BuiltObjectList builtObjectList = new BuiltObjectList();
            threatLevels = new List<int>();
            List<BuiltObject[]> builtObjectsAtLocationByArrays = GetBuiltObjectsAtLocationByArrays(systemStar.Xpos, systemStar.Ypos, MaxSolarSystemSize * 2);
            _ = targetEmpire.PirateEmpireBaseHabitat;
            for (int i = 0; i < builtObjectsAtLocationByArrays.Count; i++)
            {
                int num = builtObjectsAtLocationByArrays[i].Length;
                for (int j = 0; j < num; j++)
                {
                    BuiltObject builtObject = builtObjectsAtLocationByArrays[i][j];
                    if (builtObject != null && builtObject.NearestSystemStar == systemStar && builtObject.Empire != targetEmpire)
                    {
                        int num2 = DetermineRawThreatLevel(builtObject, targetEmpire);
                        if (num2 > 10 && !builtObjectList.Contains(builtObject))
                        {
                            builtObjectList.Add(builtObject);
                            threatLevels.Add(num2);
                        }
                    }
                }
            }
            return builtObjectList;
        }

        public StellarObject[] EvaluateThreats(object target, out int[] threatLevel)
        {
            return EvaluateThreats(target, out threatLevel, 20);
        }

        public StellarObject[] EvaluateThreats(object target, out int[] threatLevel, int maximumThreatCount)
        {
            StellarObjectList stellarObjectList = new StellarObjectList();
            List<int> list = new List<int>();
            double num = -1.0;
            double num2 = -1.0;
            double num3 = ThreatRange;
            SystemInfo systemInfo = null;
            Empire empire;
            if (target is Habitat)
            {
                Habitat habitat = (Habitat)target;
                num = habitat.Xpos;
                num2 = habitat.Ypos;
                empire = habitat.Owner;
                num3 = MaxSolarSystemSize;
                systemInfo = Systems[habitat.SystemIndex];
            }
            else if (target is ShipGroup)
            {
                double num4 = 0.0;
                double num5 = 0.0;
                double num6 = 0.0;
                double num7 = 0.0;
                ShipGroup shipGroup = (ShipGroup)target;
                for (int i = 0; i < shipGroup.Ships.Count; i++)
                {
                    BuiltObject builtObject = shipGroup.Ships[i];
                    if (builtObject != null)
                    {
                        if ((double)builtObject.SensorProximityArrayRange > num3)
                        {
                            num3 = builtObject.SensorProximityArrayRange;
                        }
                        if (builtObject.Xpos < num4)
                        {
                            num4 = builtObject.Xpos;
                        }
                        if (builtObject.Xpos > num5)
                        {
                            num5 = builtObject.Xpos;
                        }
                        if (builtObject.Ypos < num6)
                        {
                            num6 = builtObject.Ypos;
                        }
                        if (builtObject.Ypos > num7)
                        {
                            num7 = builtObject.Ypos;
                        }
                    }
                }
                num = num4 + (num5 - num4) / 2.0;
                num2 = num6 + (num7 - num6) / 2.0;
                empire = shipGroup.Empire;
                if (shipGroup.LeadShip != null && shipGroup.LeadShip.NearestSystemStar != null)
                {
                    systemInfo = Systems[shipGroup.LeadShip.NearestSystemStar.SystemIndex];
                }
            }
            else
            {
                if (!(target is BuiltObject))
                {
                    throw new ApplicationException("Target is of wrong type");
                }
                BuiltObject builtObject2 = (BuiltObject)target;
                if ((double)builtObject2.SensorProximityArrayRange > num3)
                {
                    num3 = builtObject2.SensorProximityArrayRange;
                }
                num = builtObject2.Xpos;
                num2 = builtObject2.Ypos;
                empire = builtObject2.Empire;
                if (builtObject2.NearestSystemStar != null)
                {
                    systemInfo = Systems[builtObject2.NearestSystemStar.SystemIndex];
                }
            }
            int left = (int)num - (int)num3;
            int right = (int)num + (int)num3;
            int top = (int)num2 - (int)num3;
            int bottom = (int)num2 + (int)num3;
            int x = (int)num / IndexSize;
            int y = (int)num2 / IndexSize;
            CorrectIndexCoords(ref x, ref y);
            num3 += (double)(MaxSolarSystemSize * 2);
            List<BuiltObject[]> builtObjectsAtLocationByArrays = GetBuiltObjectsAtLocationByArrays(num, num2, (int)num3);
            num3 *= num3;
            int num8 = 10;
            if (empire == null)
            {
                num8 = 0;
            }
            for (int j = 0; j < builtObjectsAtLocationByArrays.Count; j++)
            {
                for (int k = 0; k < builtObjectsAtLocationByArrays[j].Length; k++)
                {
                    BuiltObject builtObject3 = builtObjectsAtLocationByArrays[j][k];
                    if (builtObject3 != null)
                    {
                        int num9 = DetermineThreatLevel(builtObject3, target, empire, (int)num, (int)num2, num3, left, right, top, bottom);
                        if (num9 > num8 && !stellarObjectList.Contains(builtObject3))
                        {
                            stellarObjectList.Add(builtObject3);
                            list.Add(num9);
                        }
                    }
                }
            }
            if (systemInfo != null)
            {
                for (int l = 0; l < systemInfo.Creatures.Count; l++)
                {
                    Creature creature = systemInfo.Creatures[l];
                    if (creature != null)
                    {
                        int num10 = DetermineThreatLevel(creature, target, empire, (int)num, (int)num2, num3, left, right, top, bottom);
                        if (num10 > 10)
                        {
                            stellarObjectList.Add(creature);
                            list.Add(num10);
                        }
                    }
                }
            }
            else
            {
                GalaxyLocationList galaxyLocationList = DetermineGalaxyLocationsInRangeAtPoint(num, num2, num3, GalaxyLocationType.RestrictedArea);
                if (galaxyLocationList != null && galaxyLocationList.Count > 0)
                {
                    for (int m = 0; m < galaxyLocationList.Count; m++)
                    {
                        GalaxyLocation galaxyLocation = galaxyLocationList[m];
                        if (galaxyLocation == null || galaxyLocation.RelatedCreatures == null || galaxyLocation.RelatedCreatures.Count <= 0)
                        {
                            continue;
                        }
                        for (int n = 0; n < galaxyLocation.RelatedCreatures.Count; n++)
                        {
                            Creature creature2 = galaxyLocation.RelatedCreatures[n];
                            if (creature2 != null)
                            {
                                int num11 = DetermineThreatLevel(creature2, target, empire, (int)num, (int)num2, num3, left, right, top, bottom);
                                if (num11 > 10)
                                {
                                    stellarObjectList.Add(creature2);
                                    list.Add(num11);
                                }
                            }
                        }
                    }
                }
            }
            StellarObject[] array = stellarObjectList.ToArray();
            int[] array2 = list.ToArray();
            Array.Sort(array2, array);
            Array.Reverse(array);
            Array.Reverse(array2);
            if (array.Length < maximumThreatCount)
            {
                maximumThreatCount = array.Length;
            }
            StellarObject[] array3 = new StellarObject[maximumThreatCount];
            Array.Copy(array, 0, array3, 0, maximumThreatCount);
            int[] array4 = new int[maximumThreatCount];
            Array.Copy(array2, 0, array4, 0, maximumThreatCount);
            threatLevel = array4;
            return array3;
        }

        public int DetermineThreatLevel(StellarObject threat, object target)
        {
            double num = -1.0;
            double num2 = -1.0;
            int num3 = ThreatRange;
            Empire empire;
            if (target is Habitat)
            {
                num = ((Habitat)target).Xpos;
                num2 = ((Habitat)target).Ypos;
                empire = ((Habitat)target).Owner;
                num3 = MaxSolarSystemSize;
            }
            else if (target is ShipGroup)
            {
                double num4 = 0.0;
                double num5 = 0.0;
                double num6 = 0.0;
                double num7 = 0.0;
                ShipGroup shipGroup = (ShipGroup)target;
                for (int i = 0; i < shipGroup.Ships.Count; i++)
                {
                    if (shipGroup.Ships[i].SensorProximityArrayRange > num3)
                    {
                        num3 = shipGroup.Ships[i].SensorProximityArrayRange;
                    }
                    if (shipGroup.Ships[i].Xpos < num4)
                    {
                        num4 = shipGroup.Ships[i].Xpos;
                    }
                    if (shipGroup.Ships[i].Xpos > num5)
                    {
                        num5 = shipGroup.Ships[i].Xpos;
                    }
                    if (shipGroup.Ships[i].Ypos < num6)
                    {
                        num6 = shipGroup.Ships[i].Ypos;
                    }
                    if (shipGroup.Ships[i].Ypos > num7)
                    {
                        num7 = shipGroup.Ships[i].Ypos;
                    }
                }
                num = num4 + (num5 - num4) / 2.0;
                num2 = num6 + (num7 - num6) / 2.0;
                empire = shipGroup.Empire;
            }
            else
            {
                if (!(target is BuiltObject))
                {
                    throw new ApplicationException("Target is of wrong type");
                }
                if (((BuiltObject)target).SensorProximityArrayRange > num3)
                {
                    num3 = ((BuiltObject)target).SensorProximityArrayRange;
                }
                num = ((BuiltObject)target).Xpos;
                num2 = ((BuiltObject)target).Ypos;
                empire = ((BuiltObject)target).Empire;
            }
            int left = (int)num - num3;
            int right = (int)num + num3;
            int top = (int)num2 - num3;
            int bottom = (int)num2 + num3;
            double scanRangeSquared = (double)num3 * (double)num3;
            if (threat is BuiltObject)
            {
                return DetermineThreatLevel((BuiltObject)threat, target, empire, (int)num, (int)num2, scanRangeSquared, left, right, top, bottom);
            }
            if (threat is Fighter)
            {
                return DetermineThreatLevel((Fighter)threat, target, empire, (int)num, (int)num2, scanRangeSquared, left, right, top, bottom);
            }
            if (threat is Creature)
            {
                return DetermineThreatLevel((Creature)threat, target, empire, (int)num, (int)num2, scanRangeSquared, left, right, top, bottom);
            }
            return 0;
        }

        private int DetermineThreatLevel(Fighter fighter, object target, Empire empire, int targetX, int targetY, double scanRangeSquared, int left, int right, int top, int bottom)
        {
            if (empire != fighter.Empire)
            {
                double num = CalculateDistanceSquared(fighter.Xpos, fighter.Ypos, targetX, targetY);
                if (num <= scanRangeSquared)
                {
                    double num2 = Math.Sqrt(num);
                    double num3 = (double)ThreatRange / 2.0;
                    double num4 = Math.Max(1.0, num3 - num2);
                    num4 *= num4;
                    num4 /= 1000000.0;
                    int num5 = 1;
                    int num6 = 0;
                    if (fighter.Empire == null)
                    {
                        num5 = 0;
                    }
                    else if (fighter.Empire == IndependentEmpire)
                    {
                        num5 = 1;
                    }
                    else if (empire == null)
                    {
                        num5 = 1;
                    }
                    else if (empire.PirateEmpireBaseHabitat != null && fighter.Empire != empire && fighter.Empire != null)
                    {
                        num5 = 50;
                        num6 = 1;
                        PirateRelation pirateRelation = empire.ObtainPirateRelation(fighter.Empire);
                        switch (pirateRelation.Type)
                        {
                            case PirateRelationType.NotMet:
                                DoEmpireEncounter(empire, fighter.Empire, fighter);
                                break;
                            case PirateRelationType.Protection:
                                num5 = 0;
                                break;
                        }
                    }
                    else if (fighter.Empire.PirateEmpireBaseHabitat != null)
                    {
                        num5 = 50;
                        if (!empire.KnownPirateEmpires.Contains(fighter.Empire))
                        {
                            DoSuperPirateEmpireEncounter(empire, fighter.Empire, targetX, targetY);
                            empire.KnownPirateEmpires.Add(fighter.Empire);
                        }
                        if (fighter.Empire != null)
                        {
                            PirateRelation pirateRelation2 = empire.ObtainPirateRelation(fighter.Empire);
                            switch (pirateRelation2.Type)
                            {
                                case PirateRelationType.NotMet:
                                    DoEmpireEncounter(empire, fighter.Empire, fighter);
                                    break;
                                case PirateRelationType.Protection:
                                    num5 = 0;
                                    break;
                            }
                        }
                        if (empire == IndependentEmpire)
                        {
                            num5 = 0;
                        }
                    }
                    else
                    {
                        DiplomaticRelation diplomaticRelation = empire.DiplomaticRelations[fighter.Empire];
                        num5 = 1;
                        if (diplomaticRelation != null)
                        {
                            switch (diplomaticRelation.Type)
                            {
                                case DiplomaticRelationType.FreeTradeAgreement:
                                case DiplomaticRelationType.MutualDefensePact:
                                case DiplomaticRelationType.SubjugatedDominion:
                                case DiplomaticRelationType.Protectorate:
                                    num5 = 0;
                                    break;
                                case DiplomaticRelationType.None:
                                    num5 = 1;
                                    break;
                                case DiplomaticRelationType.TradeSanctions:
                                    num5 = 5;
                                    break;
                                case DiplomaticRelationType.Truce:
                                    num5 = 10;
                                    break;
                                case DiplomaticRelationType.War:
                                    num5 = 100;
                                    break;
                                case DiplomaticRelationType.NotMet:
                                    num5 = 1;
                                    diplomaticRelation.Type = DiplomaticRelationType.None;
                                    DoEmpireEncounter(empire, fighter.Empire, fighter);
                                    break;
                            }
                        }
                        else
                        {
                            if (fighter.Empire != IndependentEmpire)
                            {
                                num5 = 1;
                            }
                            DoEmpireEncounter(empire, fighter.Empire, fighter);
                        }
                    }
                    num6 = 1;
                    if (fighter.FirepowerRaw > 0)
                    {
                        num6 = Math.Max(5, fighter.Size / 10);
                    }
                    int num7 = (int)(num4 * (double)num5 * (double)num6);
                    if (num6 > 0)
                    {
                        num7 = Math.Max(1, num7);
                    }
                    return num7;
                }
            }
            return 0;
        }

        private int DetermineThreatLevel(Creature creature, object target, Empire empire, int targetX, int targetY, double scanRangeSquared, int left, int right, int top, int bottom)
        {
            double num = CalculateDistanceSquared(creature.Xpos, creature.Ypos, targetX, targetY);
            if (num <= scanRangeSquared)
            {
                double num2 = Math.Sqrt(num);
                double num3 = (double)ThreatRange / 2.0;
                double num4 = Math.Max(1.0, num3 - num2);
                num4 *= num4;
                num4 /= 1000000.0;
                int num5 = 100;
                int num6 = 0;
                switch (creature.Type)
                {
                    case CreatureType.RockSpaceSlug:
                    case CreatureType.DesertSpaceSlug:
                        num6 = 10;
                        break;
                    case CreatureType.Kaltor:
                        num6 = 20;
                        break;
                    case CreatureType.Ardilus:
                        num6 = 15;
                        break;
                    case CreatureType.SilverMist:
                        num6 = 100;
                        if (empire != null && empire != IndependentEmpire && !empire.EncounteredSilverMistCreature)
                        {
                            empire.EncounteredSilverMistCreature = true;
                            Habitat habitat = FastFindNearestSystem(targetX, targetY);
                            if (habitat != null)
                            {
                                string arg = ResolveSectorDescription(targetX, targetY);
                                string text = TextResolver.GetText("SilverMist Encountered");
                                string message = string.Format(TextResolver.GetText("SilverMist Encountered Detail"), habitat.Name, arg);
                                empire.SendEventMessageToEmpire(EventMessageType.CreatureOutbreak, text, message, creature, target);
                            }
                        }
                        break;
                }
                int num7 = (int)(num4 * (double)num5 * (double)num6);
                if (num6 > 0)
                {
                    num7 = Math.Max(1, num7);
                }
                return num7;
            }
            return 0;
        }

        private int DetermineThreatLevel(BuiltObject builtObject, object target, Empire empire, int targetX, int targetY, double scanRangeSquared, int left, int right, int top, int bottom)
        {
            if (empire != builtObject.Empire)
            {
                double num = CalculateDistanceSquared(builtObject.Xpos, builtObject.Ypos, targetX, targetY);
                if (num <= scanRangeSquared)
                {
                    double num2 = Math.Sqrt(num);
                    double num3 = (double)ThreatRange / 2.0;
                    double num4 = Math.Max(1.0, num3 - num2);
                    num4 *= num4;
                    num4 /= 1000000.0;
                    int num5 = 1;
                    int num6 = 0;
                    if (builtObject.Empire == null)
                    {
                        num5 = 0;
                    }
                    else if (builtObject.Empire == IndependentEmpire)
                    {
                        num5 = 1;
                        empire?.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.FirstContactPirateOrIndependent, builtObject, builtObject.Empire);
                    }
                    else if (empire == null)
                    {
                        num5 = 1;
                    }
                    else if (empire.PirateEmpireBaseHabitat != null && builtObject.Empire != empire && builtObject.Empire != null)
                    {
                        num5 = 50;
                        num6 = 1;
                        PirateRelation pirateRelation = empire.ObtainPirateRelation(builtObject.Empire);
                        switch (pirateRelation.Type)
                        {
                            case PirateRelationType.NotMet:
                                DoEmpireEncounter(empire, builtObject.Empire, builtObject);
                                break;
                            case PirateRelationType.Protection:
                                num5 = 0;
                                break;
                        }
                    }
                    else if (builtObject.Empire.PirateEmpireBaseHabitat != null)
                    {
                        num5 = 50;
                        if (!empire.KnownPirateEmpires.Contains(builtObject.Empire))
                        {
                            DoSuperPirateEmpireEncounter(empire, builtObject.Empire, targetX, targetY);
                            empire.KnownPirateEmpires.Add(builtObject.Empire);
                        }
                        if (builtObject.Empire != null)
                        {
                            PirateRelation pirateRelation2 = empire.ObtainPirateRelation(builtObject.Empire);
                            switch (pirateRelation2.Type)
                            {
                                case PirateRelationType.NotMet:
                                    DoEmpireEncounter(empire, builtObject.Empire, builtObject);
                                    break;
                                case PirateRelationType.Protection:
                                    num5 = 0;
                                    break;
                            }
                        }
                        if (empire == IndependentEmpire)
                        {
                            num5 = 0;
                        }
                    }
                    else
                    {
                        DiplomaticRelation diplomaticRelation = empire.DiplomaticRelations[builtObject.Empire];
                        num5 = 1;
                        if (diplomaticRelation != null)
                        {
                            switch (diplomaticRelation.Type)
                            {
                                case DiplomaticRelationType.FreeTradeAgreement:
                                case DiplomaticRelationType.MutualDefensePact:
                                case DiplomaticRelationType.SubjugatedDominion:
                                case DiplomaticRelationType.Protectorate:
                                    num5 = 0;
                                    break;
                                case DiplomaticRelationType.None:
                                    num5 = 1;
                                    break;
                                case DiplomaticRelationType.TradeSanctions:
                                    num5 = 5;
                                    break;
                                case DiplomaticRelationType.Truce:
                                    num5 = 10;
                                    break;
                                case DiplomaticRelationType.War:
                                    num5 = 100;
                                    break;
                                case DiplomaticRelationType.NotMet:
                                    num5 = 1;
                                    diplomaticRelation.Type = DiplomaticRelationType.None;
                                    DoEmpireEncounter(empire, builtObject.Empire, builtObject);
                                    break;
                            }
                        }
                        else
                        {
                            if (builtObject.Empire != IndependentEmpire)
                            {
                                num5 = 1;
                            }
                            DoEmpireEncounter(empire, builtObject.Empire, builtObject);
                        }
                        if (empire.Outlaws.Contains(builtObject))
                        {
                            num5 = 100;
                        }
                    }
                    num6 = 1;
                    if (builtObject.FirepowerRaw > 0)
                    {
                        num6 = Math.Max(10, builtObject.Size / 10);
                    }
                    if (builtObject.Fighters != null && builtObject.Fighters.Count > 0)
                    {
                        num6 = Math.Max(num6, builtObject.Fighters.Count * 10);
                    }
                    int num7 = (int)(num4 * (double)num5 * (double)num6);
                    if (num6 > 0)
                    {
                        num7 = Math.Max(1, num7);
                    }
                    return num7;
                }
            }
            return 0;
        }

        public int DetermineRawThreatLevel(BuiltObject threat, Empire targetEmpire)
        {
            if (threat.Empire != null && threat.Empire != targetEmpire)
            {
                int num = 1;
                int num2 = 0;
                if (threat.Empire == IndependentEmpire)
                {
                    num = 1;
                    targetEmpire?.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.FirstContactPirateOrIndependent, threat, threat.Empire);
                }
                else if (targetEmpire.PirateEmpireBaseHabitat != null && threat.Empire != targetEmpire && threat.Empire != null)
                {
                    PirateRelation pirateRelation = targetEmpire.ObtainPirateRelation(threat.Empire);
                    switch (pirateRelation.Type)
                    {
                        case PirateRelationType.NotMet:
                            DoEmpireEncounter(targetEmpire, threat.Empire, threat);
                            num = 50;
                            num2 = 1;
                            break;
                        case PirateRelationType.Protection:
                            num = 0;
                            num2 = 1;
                            break;
                        case PirateRelationType.None:
                            num = 50;
                            num2 = 1;
                            break;
                    }
                }
                else if (threat.Empire.PirateEmpireBaseHabitat != null)
                {
                    num = 50;
                    if (!targetEmpire.KnownPirateEmpires.Contains(threat.Empire))
                    {
                        DoSuperPirateEmpireEncounter(targetEmpire, threat.Empire, threat.Xpos, threat.Ypos);
                        targetEmpire.KnownPirateEmpires.Add(threat.Empire);
                    }
                    if (threat.Empire != null)
                    {
                        PirateRelation pirateRelation2 = targetEmpire.ObtainPirateRelation(threat.Empire);
                        switch (pirateRelation2.Type)
                        {
                            case PirateRelationType.NotMet:
                                DoEmpireEncounter(targetEmpire, threat.Empire, threat);
                                num = 50;
                                num2 = 1;
                                break;
                            case PirateRelationType.Protection:
                                num = 0;
                                num2 = 1;
                                break;
                            case PirateRelationType.None:
                                num = 50;
                                num2 = 1;
                                break;
                        }
                    }
                    if (targetEmpire == IndependentEmpire)
                    {
                        num = 0;
                    }
                }
                else
                {
                    DiplomaticRelation diplomaticRelation = targetEmpire.ObtainDiplomaticRelation(threat.Empire);
                    if (diplomaticRelation != null)
                    {
                        switch (diplomaticRelation.Type)
                        {
                            case DiplomaticRelationType.FreeTradeAgreement:
                            case DiplomaticRelationType.MutualDefensePact:
                            case DiplomaticRelationType.SubjugatedDominion:
                            case DiplomaticRelationType.Protectorate:
                                num = 0;
                                break;
                            case DiplomaticRelationType.None:
                                num = 1;
                                break;
                            case DiplomaticRelationType.TradeSanctions:
                                num = 1;
                                break;
                            case DiplomaticRelationType.Truce:
                                num = 10;
                                break;
                            case DiplomaticRelationType.War:
                                num = 100;
                                break;
                            case DiplomaticRelationType.NotMet:
                                num = 1;
                                DoEmpireEncounter(targetEmpire, threat.Empire, threat);
                                break;
                        }
                    }
                    else
                    {
                        if (threat.Empire != IndependentEmpire)
                        {
                            num = 1;
                        }
                        DoEmpireEncounter(targetEmpire, threat.Empire, threat);
                    }
                    if (targetEmpire.Outlaws.Contains(threat))
                    {
                        num = 100;
                    }
                }
                if (num >= 50)
                {
                    num2 = 1;
                }
                if (threat.FirepowerRaw > 0)
                {
                    num2 = Math.Max(10, threat.Size / 10);
                }
                return (int)((double)num * (double)num2);
            }
            return 0;
        }

        public void DoSuperPirateEmpireEncounter(Empire discoverer, Empire pirateEmpire, double x, double y)
        {
            if (discoverer == null || pirateEmpire == null || pirateEmpire.PirateEmpireBaseHabitat == null || !pirateEmpire.PirateEmpireSuperPirates || discoverer.KnownPirateEmpires.Contains(pirateEmpire))
            {
                return;
            }
            Habitat habitat = null;
            habitat = FastFindNearestSystem(x, y);
            if (habitat != null)
            {
                double num = CalculateDistance(habitat.Xpos, habitat.Ypos, x, y);
                if (num > (double)MaxSolarSystemSize * 2.1)
                {
                    habitat = null;
                }
            }
            string empty = string.Empty;
            discoverer.SendEventMessageToEmpire(message: (habitat == null) ? string.Format(TextResolver.GetText("Encounter Message Phantom Pirates"), pirateEmpire.Name, string.Empty) : string.Format(TextResolver.GetText("Encounter Message Phantom Pirates"), pirateEmpire.Name, habitat.Name), eventMessageType: EventMessageType.PhantomPirates, title: TextResolver.GetText("Phantom Pirates Encountered") + "!", additionalData: pirateEmpire, location: habitat);
            discoverer.SendNewsBroadcast(EventMessageType.PhantomPirates, pirateEmpire);
        }

        public void DoEmpireEncounter(Empire discoverer, Empire otherEmpire, StellarObject discoveryLocation)
        {
            if (otherEmpire == IndependentEmpire)
            {
                discoverer?.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.FirstContactPirateOrIndependent, discoveryLocation, otherEmpire);
            }
            else if (discoverer == IndependentEmpire)
            {
                otherEmpire?.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.FirstContactPirateOrIndependent, discoveryLocation, discoverer);
            }
            else if (discoverer != IndependentEmpire && otherEmpire != IndependentEmpire)
            {
                DoSingleEmpireEncounter(discoverer, otherEmpire, discoveryLocation);
                DoSingleEmpireEncounter(otherEmpire, discoverer, discoveryLocation);
                if (otherEmpire.PirateEmpireBaseHabitat != null)
                {
                    discoverer?.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.FirstContactPirateOrIndependent, discoveryLocation, otherEmpire);
                }
                if (discoverer.PirateEmpireBaseHabitat != null)
                {
                    otherEmpire?.CheckSendPreWarpProgressEventMessage(PreWarpProgressEventType.FirstContactPirateOrIndependent, discoveryLocation, discoverer);
                }
            }
        }

        private void DoSingleEmpireEncounter(Empire discoverer, Empire otherEmpire, StellarObject discoveryLocation)
        {
            if (discoverer == null || otherEmpire == null)
            {
                return;
            }
            if (discoverer.PirateEmpireBaseHabitat == null && otherEmpire.PirateEmpireBaseHabitat == null)
            {
                if (discoverer.DiplomaticRelations == null)
                {
                    return;
                }
                DiplomaticRelation diplomaticRelation = discoverer.DiplomaticRelations[otherEmpire];
                if (diplomaticRelation == null)
                {
                    diplomaticRelation = new DiplomaticRelation(DiplomaticRelationType.NotMet, discoverer, discoverer, otherEmpire, tradeRestrictedResources: false);
                    discoverer.DiplomaticRelations.Add(diplomaticRelation);
                }
                if (diplomaticRelation.Type != 0 || PirateEmpires.Contains(otherEmpire) || otherEmpire == IndependentEmpire)
                {
                    return;
                }
                Habitat habitat = null;
                if (discoveryLocation != null)
                {
                    habitat = FastFindNearestSystem(discoveryLocation.Xpos, discoveryLocation.Ypos);
                    if (habitat != null)
                    {
                        double num = CalculateDistance(habitat.Xpos, habitat.Ypos, discoveryLocation.Xpos, discoveryLocation.Ypos);
                        if (num > (double)MaxSolarSystemSize * 2.1)
                        {
                            habitat = null;
                        }
                    }
                }
                bool flag = true;
                if (StoryReturnOfTheShakturiEnabled)
                {
                    if (discoverer.DominantRace != null && discoverer.DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
                    {
                        flag = false;
                    }
                    if (discoverer == PlayerEmpire && otherEmpire.DominantRace != null && otherEmpire.DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
                    {
                        string empty = string.Empty;
                        string arg = string.Empty;
                        if (habitat != null)
                        {
                            arg = habitat.Name;
                        }
                        empty += string.Format(TextResolver.GetText("MechanoidEncounter"), arg);
                        empty += "\n\n";
                        Habitat habitat2 = null;
                        if (otherEmpire.Capital != null)
                        {
                            habitat2 = DetermineHabitatSystemStar(otherEmpire.Capital);
                        }
                        string arg2 = string.Empty;
                        if (habitat2 != null)
                        {
                            arg2 = habitat2.Name;
                        }
                        empty += string.Format(TextResolver.GetText("MechanoidEncounterDetail"), arg2);
                        if (otherEmpire.Capital != null && discoverer.CheckSystemExplored(otherEmpire.Capital.SystemIndex))
                        {
                            discoverer.SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, TextResolver.GetText("Ancient Guardians Encountered"), empty, otherEmpire.DominantRace, otherEmpire.Capital);
                        }
                        else if (discoveryLocation != null)
                        {
                            discoverer.SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, TextResolver.GetText("Ancient Guardians Encountered"), empty, otherEmpire.DominantRace, new Point((int)discoveryLocation.Xpos, (int)discoveryLocation.Ypos));
                        }
                        else
                        {
                            discoverer.SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, TextResolver.GetText("Ancient Guardians Encountered"), empty, otherEmpire.DominantRace, null);
                        }
                    }
                    else if (discoverer == PlayerEmpire && otherEmpire.DominantRace != null && otherEmpire.DominantRace == ShakturiActualRace)
                    {
                        string empty2 = string.Empty;
                        string arg3 = string.Empty;
                        if (habitat != null)
                        {
                            arg3 = habitat.Name;
                        }
                        empty2 += string.Format(TextResolver.GetText("ErutkahEncounter"), arg3);
                        if (discoveryLocation != null)
                        {
                            discoverer.SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, TextResolver.GetText("Erutkah Refugees Encountered"), empty2, otherEmpire.DominantRace, new Point((int)discoveryLocation.Xpos, (int)discoveryLocation.Ypos));
                        }
                        else
                        {
                            discoverer.SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, TextResolver.GetText("Erutkah Refugees Encountered"), empty2, otherEmpire.DominantRace, null);
                        }
                        PlayerEmpire.StateMoney += 10000.0;
                        PlayerEmpire.PirateEconomy.PerformIncome(10000.0, PirateIncomeType.Undefined, CurrentStarDate);
                    }
                    if (StoryShakturiEnraged)
                    {
                        if (discoverer.DominantRace != null && discoverer.DominantRace == ShakturiActualRace)
                        {
                            EmpireEvaluation empireEvaluation = discoverer.ObtainEmpireEvaluation(otherEmpire);
                            if (otherEmpire.DominantRace != null && empireEvaluation != null)
                            {
                                if (RaceFamilies.GetIdsBySpecialFunctionCode(1).Contains(otherEmpire.DominantRace.FamilyId))
                                {
                                    empireEvaluation.Bias += 30.0;
                                }
                                else if (RaceFamilies.GetIdsBySpecialFunctionCode(2).Contains(otherEmpire.DominantRace.FamilyId))
                                {
                                    empireEvaluation.Bias -= 30.0;
                                }
                            }
                        }
                        else if (otherEmpire.DominantRace != null && otherEmpire.DominantRace == ShakturiActualRace)
                        {
                            EmpireEvaluation empireEvaluation2 = discoverer.ObtainEmpireEvaluation(otherEmpire);
                            if (discoverer.DominantRace != null && empireEvaluation2 != null)
                            {
                                if (RaceFamilies.GetIdsBySpecialFunctionCode(1).Contains(discoverer.DominantRace.FamilyId))
                                {
                                    empireEvaluation2.Bias += 30.0;
                                }
                                else if (RaceFamilies.GetIdsBySpecialFunctionCode(2).Contains(discoverer.DominantRace.FamilyId))
                                {
                                    empireEvaluation2.Bias -= 30.0;
                                }
                            }
                        }
                    }
                    else if (discoverer.DominantRace != null && discoverer.DominantRace == ShakturiActualRace)
                    {
                        EmpireEvaluation empireEvaluation3 = discoverer.ObtainEmpireEvaluation(otherEmpire);
                        if (otherEmpire.DominantRace != null && empireEvaluation3 != null)
                        {
                            if (RaceFamilies.GetIdsBySpecialFunctionCode(2).Contains(otherEmpire.DominantRace.FamilyId))
                            {
                                empireEvaluation3.Bias = Math.Min(empireEvaluation3.Bias, 0.0);
                            }
                            else if (RaceFamilies.GetIdsBySpecialFunctionCode(1).Contains(otherEmpire.DominantRace.FamilyId))
                            {
                                empireEvaluation3.Bias = Math.Max(empireEvaluation3.Bias, 30.0);
                            }
                        }
                    }
                    else if (otherEmpire.DominantRace != null && otherEmpire.DominantRace == ShakturiActualRace)
                    {
                        EmpireEvaluation empireEvaluation4 = discoverer.ObtainEmpireEvaluation(otherEmpire);
                        if (discoverer.DominantRace != null && empireEvaluation4 != null)
                        {
                            if (RaceFamilies.GetIdsBySpecialFunctionCode(2).Contains(discoverer.DominantRace.FamilyId))
                            {
                                empireEvaluation4.Bias = Math.Min(empireEvaluation4.Bias, 0.0);
                            }
                            else if (RaceFamilies.GetIdsBySpecialFunctionCode(1).Contains(discoverer.DominantRace.FamilyId))
                            {
                                empireEvaluation4.Bias = Math.Max(empireEvaluation4.Bias, 30.0);
                            }
                        }
                    }
                }
                diplomaticRelation.Type = DiplomaticRelationType.None;
                short matchingGameEventIdEmpireEncounter = GetMatchingGameEventIdEmpireEncounter(discoverer, otherEmpire);
                CheckTriggerEvent(matchingGameEventIdEmpireEncounter, discoverer, EventTriggerType.EmpireEncounter, null);
                if (flag)
                {
                    if (discoverer.DominantRace != otherEmpire.DominantRace)
                    {
                        EmpireEvaluation empireEvaluation5 = discoverer.ObtainEmpireEvaluation(otherEmpire);
                        empireEvaluation5.FirstContactPenalty = EmpireEvaluation.FirstContactPenaltyStartAmount * AggressionLevel;
                    }
                }
                else
                {
                    EmpireEvaluation empireEvaluation6 = discoverer.ObtainEmpireEvaluation(otherEmpire);
                    empireEvaluation6.FirstContactPenalty = 0.0;
                }
                string arg4 = string.Empty;
                if (habitat != null)
                {
                    arg4 = habitat.Name;
                }
                string text = string.Format(TextResolver.GetText("We have encountered a new empire"), arg4, otherEmpire.Name);
                if (otherEmpire.DominantRace != null && discoverer.DominantRace != null && otherEmpire.DominantRace == discoverer.DominantRace)
                {
                    text += ". ";
                    text += string.Format(TextResolver.GetText("This empire is predominantly composed of SAME RACE"), otherEmpire.DominantRace.Name);
                }
                else if (otherEmpire.DominantRace != null && discoverer.DominantRace != null && otherEmpire.DominantRace.FamilyId == discoverer.DominantRace.FamilyId)
                {
                    text += ". ";
                    text += string.Format(TextResolver.GetText("This empire is predominantly composed of SAME RACE FAMILY"), otherEmpire.DominantRace.Name);
                }
                if (discoveryLocation != null)
                {
                    discoverer.SendMessageToEmpire(discoverer, EmpireMessageType.EmpireDiscovered, otherEmpire, text, new Point((int)discoveryLocation.Xpos, (int)discoveryLocation.Ypos), string.Empty);
                }
                else
                {
                    discoverer.SendMessageToEmpire(discoverer, EmpireMessageType.EmpireDiscovered, otherEmpire, text);
                }
            }
            else
            {
                if (discoverer.PirateRelations == null)
                {
                    return;
                }
                PirateRelation pirateRelation = discoverer.ObtainPirateRelation(otherEmpire);
                if (pirateRelation.Type != 0)
                {
                    return;
                }
                if (discoverer.PirateEmpireBaseHabitat != null && otherEmpire.PirateEmpireBaseHabitat != null && !discoverer.PirateEmpireSuperPirates && !otherEmpire.PirateEmpireSuperPirates)
                {
                    discoverer.ChangePirateRelationThisSideOnly(otherEmpire, PirateRelationType.None, CurrentStarDate);
                }
                else
                {
                    discoverer.ChangePirateRelationThisSideOnly(otherEmpire, PirateRelationType.None, CurrentStarDate);
                }
                if (otherEmpire.PirateEmpireBaseHabitat != null && discoverer.KnownPirateEmpires != null && !discoverer.KnownPirateEmpires.Contains(otherEmpire))
                {
                    discoverer.KnownPirateEmpires.Add(otherEmpire);
                }
                if (discoverer.PirateEmpireBaseHabitat != null && otherEmpire.KnownPirateEmpires != null && !otherEmpire.KnownPirateEmpires.Contains(discoverer))
                {
                    otherEmpire.KnownPirateEmpires.Add(discoverer);
                }
                Habitat habitat3 = null;
                if (discoveryLocation != null)
                {
                    habitat3 = FastFindNearestSystem(discoveryLocation.Xpos, discoveryLocation.Ypos);
                    if (habitat3 != null)
                    {
                        double num2 = CalculateDistance(habitat3.Xpos, habitat3.Ypos, discoveryLocation.Xpos, discoveryLocation.Ypos);
                        if (num2 > (double)MaxSolarSystemSize * 2.1)
                        {
                            habitat3 = null;
                        }
                    }
                }
                string arg5 = string.Empty;
                if (habitat3 != null)
                {
                    arg5 = habitat3.Name;
                }
                string description = string.Format(TextResolver.GetText("We have encountered a new empire"), arg5, otherEmpire.Name);
                if (discoveryLocation != null)
                {
                    discoverer.SendMessageToEmpire(discoverer, EmpireMessageType.EmpireDiscovered, otherEmpire, description, new Point((int)discoveryLocation.Xpos, (int)discoveryLocation.Ypos), string.Empty);
                }
                else
                {
                    discoverer.SendMessageToEmpire(discoverer, EmpireMessageType.EmpireDiscovered, otherEmpire, description);
                }
            }
        }

        public static string ResolveDifficultyDescription(double difficultyLevel)
        {
            string empty = string.Empty;
            if (difficultyLevel <= 0.7)
            {
                return TextResolver.GetText("Easy");
            }
            if (difficultyLevel <= 1.0)
            {
                return TextResolver.GetText("Normal");
            }
            if (difficultyLevel <= 1.25)
            {
                return TextResolver.GetText("Hard");
            }
            if (difficultyLevel <= 1.6)
            {
                return TextResolver.GetText("Very Hard");
            }
            return TextResolver.GetText("Extreme");
        }

        public void ClearFleetHomeBases(StellarObject currentBase)
        {
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active && empire.ShipGroups != null)
                {
                    empire.ClearFleetHomeBases(currentBase);
                }
            }
        }

        public void ReevaluateMissionsAgainstHabitat(Habitat habitat, Empire newEmpire)
        {
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                DiplomaticRelationType diplomaticRelationType = DiplomaticRelationType.None;
                if (newEmpire != null && newEmpire != IndependentEmpire)
                {
                    DiplomaticRelation diplomaticRelation = empire.ObtainDiplomaticRelation(newEmpire);
                    diplomaticRelationType = diplomaticRelation.Type;
                }
                if (diplomaticRelationType == DiplomaticRelationType.War || diplomaticRelationType == DiplomaticRelationType.TradeSanctions)
                {
                    continue;
                }
                for (int j = 0; j < empire.ShipGroups.Count; j++)
                {
                    ShipGroup shipGroup = empire.ShipGroups[j];
                    if (shipGroup.Mission != null && shipGroup.Mission.Type != 0 && shipGroup.Mission.TargetHabitat == habitat && (shipGroup.Mission.Type == BuiltObjectMissionType.WaitAndAttack || shipGroup.Mission.Type == BuiltObjectMissionType.Attack || shipGroup.Mission.Type == BuiltObjectMissionType.Blockade || shipGroup.Mission.Type == BuiltObjectMissionType.Bombard || shipGroup.Mission.Type == BuiltObjectMissionType.WaitAndBombard))
                    {
                        shipGroup.CompleteMission();
                    }
                }
            }
        }

        public string DisplayBuiltObjectSubRole(BuiltObjectRole role, BuiltObjectSubRole subRole)
        {
            role.ToString();
            subRole.ToString();
            string empty = string.Empty;
            return empty + ResolveDescription(subRole);
        }

        public static double DetermineAngle(double x1, double y1, double x2, double y2)
        {
            double num = Math.Atan2(y2 - y1, x2 - x1);
            if (double.IsNaN(num))
            {
                num = 0.0;
            }
            return num;
        }

        public Color SelectDiplomaticRelationColor(DiplomaticRelationType diplomaticRelationType)
        {
            Color result = Color.White;
            switch (diplomaticRelationType)
            {
                case DiplomaticRelationType.FreeTradeAgreement:
                    result = Color.FromArgb(0, 255, 0);
                    break;
                case DiplomaticRelationType.MutualDefensePact:
                    result = Color.FromArgb(48, 48, 216);
                    break;
                case DiplomaticRelationType.None:
                    result = Color.FromArgb(128, 128, 128);
                    break;
                case DiplomaticRelationType.Protectorate:
                    result = Color.FromArgb(96, 96, 255);
                    break;
                case DiplomaticRelationType.SubjugatedDominion:
                    result = Color.LightPink;
                    break;
                case DiplomaticRelationType.TradeSanctions:
                    result = Color.Orange;
                    break;
                case DiplomaticRelationType.Truce:
                    result = Color.Yellow;
                    break;
                case DiplomaticRelationType.War:
                    result = Color.FromArgb(255, 0, 0);
                    break;
                case DiplomaticRelationType.NotMet:
                    result = Color.Tan;
                    break;
            }
            return result;
        }

        public void GenerateIndependentTraders()
        {
            long num = 0L;
            for (int i = 0; i < IndependentColonies.Count; i++)
            {
                Habitat habitat = IndependentColonies[i];
                if (habitat.Population.Count > 0)
                {
                    num += habitat.Population.TotalAmount;
                }
            }
            long val = num / 20000000;
            val = Math.Min(val, IndependentColonies.Count * 15);
            int num2 = (int)val - IndependentEmpire.PrivateBuiltObjects.CountNonPirates();
            if (num2 < 0)
            {
                return;
            }
            DesignList designList = new DesignList();
            DesignList designList2 = new DesignList();
            for (int j = 0; j < PopularDesigns.Count; j++)
            {
                Design design = PopularDesigns[j];
                if (design.WarpSpeed > 5000)
                {
                    if (design.SubRole == BuiltObjectSubRole.SmallFreighter)
                    {
                        designList.Add(design);
                    }
                    else if (design.SubRole == BuiltObjectSubRole.MediumFreighter)
                    {
                        designList2.Add(design);
                    }
                }
            }
            if (designList.Count <= 0)
            {
                DesignList designList3 = new DesignList();
                if (IndependentEmpire.Designs != null)
                {
                    designList3 = IndependentEmpire.Designs.GetDesignsBySubRoles(new List<BuiltObjectSubRole> { BuiltObjectSubRole.SmallFreighter });
                }
                if (designList3.Count > 0)
                {
                    designList.AddRange(designList3);
                }
                else
                {
                    DesignSpecification bySubRole = IndependentEmpire.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.SmallFreighter);
                    if (bySubRole != null)
                    {
                        RaceList raceList = new RaceList();
                        raceList.AddRange(Races.ResolvePlayableRaces());
                        raceList.Remove(PlayerEmpire.DominantRace);
                        for (int k = 0; k < raceList.Count; k++)
                        {
                            Design design2 = IndependentEmpire.GenerateDesignFromSpec(bySubRole, 0.0);
                            if (design2 == null)
                            {
                                continue;
                            }
                            int num3 = 0;
                            Race race = raceList[k];
                            if (PlayerEmpire == null || PlayerEmpire.DominantRace == null || race == null || race.DesignPictureFamilyIndex != PlayerEmpire.DominantRace.DesignPictureFamilyIndex)
                            {
                                if (race != null)
                                {
                                    num3 = race.DesignPictureFamilyIndex;
                                }
                                design2.PictureRef = ShipImageHelper.StandardShipImageStartIndex + num3 * ShipImageHelper.ShipSetImageCount + (int)(ResolveLegacySubRole(design2.SubRole) - 1);
                                IndependentEmpire.Designs.Add(design2);
                                designList.Add(design2);
                            }
                        }
                    }
                }
            }
            if (designList2.Count <= 0)
            {
                DesignList designList4 = new DesignList();
                if (IndependentEmpire.Designs != null)
                {
                    designList4 = IndependentEmpire.Designs.GetDesignsBySubRoles(new List<BuiltObjectSubRole> { BuiltObjectSubRole.MediumFreighter });
                }
                if (designList4.Count > 0)
                {
                    designList2.AddRange(designList4);
                }
                else
                {
                    DesignSpecification bySubRole2 = IndependentEmpire.DesignSpecifications.GetBySubRole(BuiltObjectSubRole.MediumFreighter);
                    if (bySubRole2 != null)
                    {
                        RaceList raceList2 = new RaceList();
                        raceList2.AddRange(Races.ResolvePlayableRaces());
                        raceList2.Remove(PlayerEmpire.DominantRace);
                        for (int l = 0; l < raceList2.Count; l++)
                        {
                            Design design3 = IndependentEmpire.GenerateDesignFromSpec(bySubRole2, 0.0);
                            if (design3 == null)
                            {
                                continue;
                            }
                            int num4 = 0;
                            Race race2 = raceList2[l];
                            if (PlayerEmpire == null || PlayerEmpire.DominantRace == null || race2 == null || race2.DesignPictureFamilyIndex != PlayerEmpire.DominantRace.DesignPictureFamilyIndex)
                            {
                                if (race2 != null)
                                {
                                    num4 = race2.DesignPictureFamilyIndex;
                                }
                                design3.PictureRef = ShipImageHelper.StandardShipImageStartIndex + num4 * ShipImageHelper.ShipSetImageCount + (int)(ResolveLegacySubRole(design3.SubRole) - 1);
                                IndependentEmpire.Designs.Add(design3);
                                designList2.Add(design3);
                            }
                        }
                    }
                }
            }
            for (int m = 0; m < num2; m++)
            {
                Design design4 = null;
                if (Rnd.Next(0, 3) == 1)
                {
                    if (designList2.Count > 0)
                    {
                        int index = Rnd.Next(0, designList2.Count);
                        design4 = designList2[index];
                    }
                }
                else if (designList.Count > 0)
                {
                    int index2 = Rnd.Next(0, designList.Count);
                    design4 = designList[index2];
                }
                if (design4 == null)
                {
                    continue;
                }
                bool flag = false;
                int num5 = Rnd.Next(0, IndependentColonies.Count);
                for (int n = num5; n < IndependentColonies.Count; n++)
                {
                    if (!PlayerEmpire.IsObjectVisibleToThisEmpire(IndependentColonies[n]))
                    {
                        design4.BuildCount++;
                        string text = design4.Name + " " + design4.BuildCount.ToString("000");
                        text = SelectRandomUniqueStandardShipName(IndependentColonies[n]);
                        BuiltObject builtObject = new BuiltObject(design4, text, this, fullyBuilt: true);
                        builtObject.Empire = IndependentEmpire;
                        builtObject.Heading = SelectRandomHeading();
                        builtObject.TargetHeading = builtObject.Heading;
                        builtObject.ReDefine();
                        builtObject.CurrentFuel = builtObject.FuelCapacity;
                        IndependentEmpire.AddBuiltObjectToGalaxy(builtObject, IndependentColonies[n], offsetLocationFromParent: false, isStateOwned: false);
                        SelectRelativeParkingPoint(out var x, out var y);
                        builtObject.ParentOffsetX = x;
                        builtObject.ParentOffsetY = y;
                        builtObject.Xpos = IndependentColonies[n].Xpos + x;
                        builtObject.Ypos = IndependentColonies[n].Ypos + y;
                        flag = true;
                        break;
                    }
                }
                if (flag)
                {
                    continue;
                }
                for (int num6 = 0; num6 < num5; num6++)
                {
                    if (!PlayerEmpire.IsObjectVisibleToThisEmpire(IndependentColonies[num6]))
                    {
                        design4.BuildCount++;
                        string text2 = design4.Name + " " + design4.BuildCount.ToString("000");
                        text2 = SelectRandomUniqueStandardShipName(IndependentColonies[num6]);
                        BuiltObject builtObject2 = new BuiltObject(design4, text2, this, fullyBuilt: true);
                        builtObject2.Empire = IndependentEmpire;
                        builtObject2.Heading = SelectRandomHeading();
                        builtObject2.TargetHeading = builtObject2.Heading;
                        builtObject2.ReDefine();
                        builtObject2.CurrentFuel = builtObject2.FuelCapacity;
                        IndependentEmpire.AddBuiltObjectToGalaxy(builtObject2, IndependentColonies[num6], offsetLocationFromParent: false, isStateOwned: false);
                        SelectRelativeParkingPoint(out var x2, out var y2);
                        builtObject2.ParentOffsetX = x2;
                        builtObject2.ParentOffsetY = y2;
                        builtObject2.Xpos = IndependentColonies[num6].Xpos + x2;
                        builtObject2.Ypos = IndependentColonies[num6].Ypos + y2;
                        flag = true;
                        break;
                    }
                }
            }
        }

        public void AssignIndependentTraderMissions()
        {
            long num = CurrentStarDate - (long)RetirementYears * (long)RealSecondsInGalacticYear * 1000;
            BuiltObjectList builtObjectList = new BuiltObjectList();
            for (int i = 0; i < IndependentEmpire.PrivateBuiltObjects.Count; i++)
            {
                BuiltObject builtObject = IndependentEmpire.PrivateBuiltObjects[i];
                if (builtObject.PirateEmpireId > 0 || builtObject.Role != BuiltObjectRole.Freight || (builtObject.Mission != null && builtObject.Mission.Type != 0))
                {
                    continue;
                }
                if (builtObject.RetireForNextMission || builtObject.DateBuilt <= num)
                {
                    if (!PlayerEmpire.IsObjectVisibleToThisEmpire(builtObject))
                    {
                        builtObjectList.Add(builtObject);
                    }
                }
                else
                {
                    if (!builtObject.RefuelForNextMission)
                    {
                        continue;
                    }
                    ResourceList fuelTypes = builtObject.DetermineFuelRequired();
                    StellarObject stellarObject = FastFindNearestRefuellingPoint(builtObject.Xpos, builtObject.Ypos, fuelTypes, builtObject.ActualEmpire, builtObject);
                    if (stellarObject != null)
                    {
                        if (stellarObject is BuiltObject)
                        {
                            BuiltObject target = (BuiltObject)stellarObject;
                            builtObject.AssignMission(BuiltObjectMissionType.Refuel, target, null, BuiltObjectMissionPriority.Normal);
                            builtObject.RefuelForNextMission = false;
                        }
                        else if (stellarObject is Habitat)
                        {
                            Habitat target2 = (Habitat)stellarObject;
                            builtObject.AssignMission(BuiltObjectMissionType.Refuel, target2, null, BuiltObjectMissionPriority.Normal);
                            builtObject.RefuelForNextMission = false;
                        }
                    }
                }
            }
            foreach (BuiltObject item in builtObjectList)
            {
                item.CompleteTeardown(this);
            }
        }

        public bool AssignFleetWaypointMission(BuiltObject builtObject, bool allowMissionOverride, StellarObject waypoint)
        {
            if (builtObject != null && builtObject.ShipGroup != null && builtObject.TopSpeed > 0 && builtObject.Role != BuiltObjectRole.Base && (allowMissionOverride || builtObject.Mission == null || (builtObject.Mission != null && builtObject.Mission.Type == BuiltObjectMissionType.Undefined)))
            {
                object obj = waypoint;
                Point point = Point.Empty;
                if (obj == null)
                {
                    if (builtObject.ShipGroup.LeadShip != null && builtObject.ShipGroup.LeadShip != builtObject)
                    {
                        BuiltObject leadShip = builtObject.ShipGroup.LeadShip;
                        if (leadShip != null)
                        {
                            if (leadShip.Mission != null && (leadShip.Mission.Type == BuiltObjectMissionType.Blockade || leadShip.Mission.Type == BuiltObjectMissionType.Move || leadShip.Mission.Type == BuiltObjectMissionType.MoveAndWait || leadShip.Mission.Type == BuiltObjectMissionType.Hold || leadShip.Mission.Type == BuiltObjectMissionType.Retrofit || leadShip.Mission.Type == BuiltObjectMissionType.Patrol || leadShip.Mission.Type == BuiltObjectMissionType.Refuel || leadShip.Mission.Type == BuiltObjectMissionType.Repair || leadShip.Mission.Type == BuiltObjectMissionType.Waypoint))
                            {
                                if (leadShip.Mission.Target != null)
                                {
                                    obj = leadShip.Mission.Target;
                                }
                                else
                                {
                                    point = new Point((int)leadShip.Xpos, (int)leadShip.Ypos);
                                }
                            }
                            else if (leadShip.ParentHabitat != null)
                            {
                                obj = leadShip.ParentHabitat;
                            }
                            else if (leadShip.ParentBuiltObject != null)
                            {
                                obj = leadShip.ParentBuiltObject;
                            }
                            else if ((leadShip.Mission == null || leadShip.Mission.Type == BuiltObjectMissionType.Undefined) && leadShip.CurrentSpeed <= 0f)
                            {
                                point = new Point((int)leadShip.Xpos, (int)leadShip.Ypos);
                            }
                            else
                            {
                                obj = builtObject.ShipGroup.GatherPoint;
                            }
                        }
                        else
                        {
                            obj = builtObject.ShipGroup.GatherPoint;
                        }
                    }
                    else
                    {
                        obj = builtObject.ShipGroup.GatherPoint;
                    }
                }
                SelectRelativeParkingPoint(out var x, out var y);
                builtObject.ClearPreviousMissionRequirements();
                if (obj != null)
                {
                    builtObject.AssignMission(BuiltObjectMissionType.Move, obj, null, x, y, BuiltObjectMissionPriority.Low, manuallyAssigned: false);
                }
                else if (!point.IsEmpty)
                {
                    builtObject.AssignMission(BuiltObjectMissionType.Move, null, null, (double)point.X + x, (double)point.Y + y, BuiltObjectMissionPriority.Low, manuallyAssigned: false);
                }
                return true;
            }
            return false;
        }

        private DesignList FindPopularDesigns(DesignList designs, Empire empire, BuiltObjectSubRole subRole, ref int lowestDesignIndex, ref int lowestDesignAmount)
        {
            if (empire.DominantRace != null && (empire.DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid" || empire.DominantRace == ShakturiActualRace))
            {
                return designs;
            }
            for (int i = 0; i < empire.Designs.Count; i++)
            {
                Design design = empire.Designs[i];
                if (design.IsObsolete || design.SubRole != subRole || (design.BuildCount <= lowestDesignAmount && (designs.Count >= 3 || design.BuildCount < lowestDesignAmount || design.OptimizedDesign != 0)))
                {
                    continue;
                }
                if (designs.Count < 3)
                {
                    designs.Add(design);
                    lowestDesignAmount = 0;
                }
                else
                {
                    designs[lowestDesignIndex] = design;
                    lowestDesignAmount = 536870911;
                }
                for (int j = 0; j < designs.Count; j++)
                {
                    if (designs[j].BuildCount < lowestDesignAmount)
                    {
                        lowestDesignAmount = designs[j].BuildCount;
                        lowestDesignIndex = j;
                    }
                }
            }
            return designs;
        }

        public void SelectPopularDesignCandidates()
        {
            int lowestDesignIndex = 0;
            int lowestDesignAmount = 0;
            DesignList designList = new DesignList();
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                designList = FindPopularDesigns(designList, empire, BuiltObjectSubRole.SmallFreighter, ref lowestDesignIndex, ref lowestDesignAmount);
            }
            lowestDesignIndex = 0;
            lowestDesignAmount = 0;
            DesignList designList2 = new DesignList();
            for (int j = 0; j < Empires.Count; j++)
            {
                Empire empire2 = Empires[j];
                designList2 = FindPopularDesigns(designList2, empire2, BuiltObjectSubRole.MediumFreighter, ref lowestDesignIndex, ref lowestDesignAmount);
            }
            lowestDesignIndex = 0;
            lowestDesignAmount = 0;
            DesignList designList3 = new DesignList();
            for (int k = 0; k < Empires.Count; k++)
            {
                Empire empire3 = Empires[k];
                designList3 = FindPopularDesigns(designList3, empire3, BuiltObjectSubRole.Escort, ref lowestDesignIndex, ref lowestDesignAmount);
            }
            lowestDesignIndex = 0;
            lowestDesignAmount = 0;
            DesignList designList4 = new DesignList();
            for (int l = 0; l < Empires.Count; l++)
            {
                Empire empire4 = Empires[l];
                designList4 = FindPopularDesigns(designList4, empire4, BuiltObjectSubRole.Frigate, ref lowestDesignIndex, ref lowestDesignAmount);
            }
            lowestDesignIndex = 0;
            lowestDesignAmount = 0;
            DesignList designList5 = new DesignList();
            for (int m = 0; m < Empires.Count; m++)
            {
                Empire empire5 = Empires[m];
                designList5 = FindPopularDesigns(designList5, empire5, BuiltObjectSubRole.Destroyer, ref lowestDesignIndex, ref lowestDesignAmount);
            }
            lowestDesignIndex = 0;
            lowestDesignAmount = 0;
            DesignList designList6 = new DesignList();
            for (int n = 0; n < Empires.Count; n++)
            {
                Empire empire6 = Empires[n];
                designList6 = FindPopularDesigns(designList6, empire6, BuiltObjectSubRole.Cruiser, ref lowestDesignIndex, ref lowestDesignAmount);
            }
            PopularDesigns.Clear();
            PopularDesigns = AppendNonNullDesigns(PopularDesigns, designList);
            PopularDesigns = AppendNonNullDesigns(PopularDesigns, designList2);
            PopularDesigns = AppendNonNullDesigns(PopularDesigns, designList3);
            PopularDesigns = AppendNonNullDesigns(PopularDesigns, designList4);
            PopularDesigns = AppendNonNullDesigns(PopularDesigns, designList5);
            PopularDesigns = AppendNonNullDesigns(PopularDesigns, designList6);
        }

        private bool AddNewDesignToPirateEmpire(Empire empire, Design newDesign)
        {
            List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
            list.Add(newDesign.SubRole);
            DesignList designsBySubRoles = empire.Designs.GetDesignsBySubRoles(list);
            if (designsBySubRoles == null || designsBySubRoles.Count == 0)
            {
                Design design = newDesign.Clone();
                design.IsObsolete = false;
                design.Empire = empire;
                if (design.Role == BuiltObjectRole.Military)
                {
                    design.FleeWhen = BuiltObjectFleeWhen.Shields50;
                }
                empire.Designs.Add(design);
                return true;
            }
            foreach (Design item in designsBySubRoles)
            {
                if (!item.IsEquivalent(newDesign))
                {
                    item.IsObsolete = true;
                    Design design2 = newDesign.Clone();
                    design2.IsObsolete = false;
                    if (design2.Role == BuiltObjectRole.Military)
                    {
                        design2.FleeWhen = BuiltObjectFleeWhen.Shields50;
                    }
                    design2.Empire = empire;
                    empire.Designs.Add(design2);
                    return true;
                }
            }
            return false;
        }

        private DesignList AppendNonNullDesigns(DesignList masterDesigns, DesignList childDesigns)
        {
            foreach (Design childDesign in childDesigns)
            {
                if (childDesign != null)
                {
                    Design design = childDesign.Clone();
                    design.Empire = IndependentEmpire;
                    if (design.Role == BuiltObjectRole.Military)
                    {
                        design.Stance = BuiltObjectStance.AttackUnallied;
                    }
                    design.BuildCount = 0;
                    design.DateCreated = CurrentStarDate;
                    design.ReDefine();
                    masterDesigns.Add(design);
                }
            }
            return masterDesigns;
        }

        public void DamageBuiltObjectComponents(BuiltObject builtObject, double damagePortion)
        {
            damagePortion = Math.Min(1.0, Math.Max(damagePortion, 0.0));
            int num = (int)((double)builtObject.Components.Count * damagePortion);
            if (num >= builtObject.Components.Count)
            {
                num = builtObject.Components.Count - 1;
            }
            int num2 = 0;
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                builtObject.Components[i].Status = ComponentStatus.Damaged;
                num2++;
                if (num2 >= num)
                {
                    break;
                }
            }
            builtObject.ReDefine();
        }

        public BuiltObject GenerateIncompletePlanetDestroyer(string name, Habitat parentHabitat)
        {
            Design design = GeneratePlanetDestroyerDesign();
            SelectRelativeParkingPoint(out var x, out var y);
            BuiltObject builtObject = GenerateUnownedBuiltObjectFromDesign(design, name, null, parentHabitat.Xpos + x, parentHabitat.Ypos + y);
            builtObject.PlayerEmpireEncounterAction = BuiltObjectEncounterAction.Notify;
            for (int i = 0; i < builtObject.Components.Count; i++)
            {
                if (Rnd.Next(0, 3) < 2)
                {
                    builtObject.Components[i].Status = ComponentStatus.Unbuilt;
                }
            }
            builtObject.ReDefine();
            return builtObject;
        }

        public Design GeneratePlanetDestroyerDesign()
        {
            return GeneratePlanetDestroyerDesign(1.0);
        }

        public Design GeneratePlanetDestroyerDesign(double overpowerFactor)
        {
            return GeneratePlanetDestroyerDesign(overpowerFactor, null);
        }

        public Design GeneratePlanetDestroyerDesign(double overpowerFactor, Empire empire)
        {
            ComponentList planetDestroyerComponents = GetPlanetDestroyerComponents(overpowerFactor, empire);
            string text = TextResolver.GetText("World Destroyer");
            Design design = new Design(text);
            design.Role = BuiltObjectRole.Military;
            design.SubRole = BuiltObjectSubRole.CapitalShip;
            design = AddComponentsToDesign(design, planetDestroyerComponents, null);
            design.Stance = BuiltObjectStance.AttackEnemies;
            design.FleeWhen = BuiltObjectFleeWhen.Shields20;
            design.TacticsStrongerShips = BattleTactics.Standoff;
            design.TacticsWeakerShips = BattleTactics.AllWeapons;
            design.TacticsInvasion = InvasionTactics.DoNotInvade;
            design.Name = text;
            design.DateCreated = CurrentStarDate;
            design.Empire = empire;
            design.PictureRef = ShipImageHelper.PlanetDestroyer;
            design.ReDefine();
            return design;
        }

        public void SetEmpireKnownGalacticHistoryLocations(Empire empire, int amount, double x, double y, GalaxyLocationList locationsToExclude)
        {
            if (amount <= 0)
            {
                return;
            }
            GalaxyLocationList galaxyLocationList = GalaxyLocations.FindLocations(GalaxyLocationType.RestrictedArea);
            if (galaxyLocationList.Count <= 0)
            {
                return;
            }
            for (int i = 0; i < amount; i++)
            {
                GalaxyLocation galaxyLocation = null;
                double num = double.MaxValue;
                for (int j = 0; j < galaxyLocationList.Count; j++)
                {
                    GalaxyLocation galaxyLocation2 = galaxyLocationList[j];
                    if (galaxyLocation2 != null && !locationsToExclude.Contains(galaxyLocation2) && !empire.KnownGalaxyLocations.Contains(galaxyLocation2))
                    {
                        double num2 = CalculateDistance(x, y, galaxyLocation2.Xpos, galaxyLocation2.Ypos);
                        if (num2 < num)
                        {
                            galaxyLocation = galaxyLocation2;
                            num = num2;
                        }
                    }
                }
                if (galaxyLocation != null)
                {
                    if (!empire.KnownGalaxyLocations.Contains(galaxyLocation))
                    {
                        empire.KnownGalaxyLocations.Add(galaxyLocation);
                    }
                    galaxyLocationList.Remove(galaxyLocation);
                }
            }
        }

        public void SetEmpireExplorationAmount(Empire empire, int systemAmount)
        {
            if (empire.ResourceMap != null)
            {
                for (int i = 0; i < Habitats.Count; i++)
                {
                    if (Habitats[i].Parent == null)
                    {
                        empire.ResourceMap.SetResourcesKnown(Habitats[i], known: false);
                    }
                }
            }
            int val = systemAmount;
            val = Math.Min(val, StarCount);
            for (int j = 0; j < val; j++)
            {
                Habitat habitat = FindNearestUnexploredHabitat(empire.Capital.Xpos, empire.Capital.Ypos, empire, includeAsteroids: true);
                if (habitat == null)
                {
                    continue;
                }
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                int num = Habitats.IndexOf(habitat2);
                if (num < 0)
                {
                    continue;
                }
                if (empire.ResourceMap != null)
                {
                    empire.ResourceMap.SetResourcesKnown(Habitats[num], known: true);
                }
                SystemVisibilityStatus systemVisibilityStatus = empire.CheckSystemVisibilityStatus(habitat2);
                if (habitat2.Category == HabitatCategoryType.GasCloud)
                {
                    if (systemVisibilityStatus == SystemVisibilityStatus.Unexplored)
                    {
                        empire.SetSystemVisibility(habitat2, SystemVisibilityStatus.Explored);
                    }
                    j--;
                    continue;
                }
                if (habitat2.Category == HabitatCategoryType.Asteroid)
                {
                    if (systemVisibilityStatus == SystemVisibilityStatus.Unexplored)
                    {
                        empire.SetSystemVisibility(habitat2, SystemVisibilityStatus.Explored);
                    }
                    j--;
                    continue;
                }
                int num2 = num + 1;
                if (num2 < Habitats.Count)
                {
                    while (Habitats[num2].Parent != null && num2 < Habitats.Count)
                    {
                        if (empire.ResourceMap != null)
                        {
                            empire.ResourceMap.SetResourcesKnown(Habitats[num2], known: true);
                        }
                        num2++;
                        if (num2 >= Habitats.Count)
                        {
                            break;
                        }
                    }
                }
                if (systemVisibilityStatus == SystemVisibilityStatus.Unexplored)
                {
                    empire.SetSystemVisibility(habitat2, SystemVisibilityStatus.Explored);
                }
            }
            if (empire.ResourceMap == null)
            {
                return;
            }
            for (int k = 0; k < Habitats.Count; k++)
            {
                if (Habitats[k].Parent == null && Habitats[k].Category != HabitatCategoryType.GasCloud)
                {
                    empire.ResourceMap.SetResourcesKnown(Habitats[k], known: true);
                }
            }
        }

        public static void ApplyDesignUpgradePoliciesToGameOptions(GameOptions gameOptions, EmpirePolicy policy)
        {
            if (gameOptions != null && policy != null)
            {
                gameOptions.DesignUpgradeCapitalShip = policy.DesignUpgradeCapitalShip;
                gameOptions.DesignUpgradeCarrier = policy.DesignUpgradeCarrier;
                gameOptions.DesignUpgradeColonyShip = policy.DesignUpgradeColonyShip;
                gameOptions.DesignUpgradeConstructionShip = policy.DesignUpgradeConstructionShip;
                gameOptions.DesignUpgradeCruiser = policy.DesignUpgradeCruiser;
                gameOptions.DesignUpgradeDefensiveBase = policy.DesignUpgradeDefensiveBase;
                gameOptions.DesignUpgradeDestroyer = policy.DesignUpgradeDestroyer;
                gameOptions.DesignUpgradeEnergyResearchStation = policy.DesignUpgradeEnergyResearchStation;
                gameOptions.DesignUpgradeEscort = policy.DesignUpgradeEscort;
                gameOptions.DesignUpgradeExplorationShip = policy.DesignUpgradeExplorationShip;
                gameOptions.DesignUpgradeFrigate = policy.DesignUpgradeFrigate;
                gameOptions.DesignUpgradeGasMiningShip = policy.DesignUpgradeGasMiningShip;
                gameOptions.DesignUpgradeGasMiningStation = policy.DesignUpgradeGasMiningStation;
                gameOptions.DesignUpgradeGenericBase = policy.DesignUpgradeGenericBase;
                gameOptions.DesignUpgradeHighTechResearchStation = policy.DesignUpgradeHighTechResearchStation;
                gameOptions.DesignUpgradeLargeFreighter = policy.DesignUpgradeLargeFreighter;
                gameOptions.DesignUpgradeLargeSpacePort = policy.DesignUpgradeLargeSpacePort;
                gameOptions.DesignUpgradeMediumFreighter = policy.DesignUpgradeMediumFreighter;
                gameOptions.DesignUpgradeMediumSpacePort = policy.DesignUpgradeMediumSpacePort;
                gameOptions.DesignUpgradeMiningShip = policy.DesignUpgradeMiningShip;
                gameOptions.DesignUpgradeMiningStation = policy.DesignUpgradeMiningStation;
                gameOptions.DesignUpgradeMonitoringStation = policy.DesignUpgradeMonitoringStation;
                gameOptions.DesignUpgradePassengerShip = policy.DesignUpgradePassengerShip;
                gameOptions.DesignUpgradeResortBase = policy.DesignUpgradeResortBase;
                gameOptions.DesignUpgradeResupplyShip = policy.DesignUpgradeResupplyShip;
                gameOptions.DesignUpgradeSmallFreighter = policy.DesignUpgradeSmallFreighter;
                gameOptions.DesignUpgradeSmallSpacePort = policy.DesignUpgradeSmallSpacePort;
                gameOptions.DesignUpgradeTroopTransport = policy.DesignUpgradeTroopTransport;
                gameOptions.DesignUpgradeWeaponsResearchStation = policy.DesignUpgradeWeaponsResearchStation;
            }
        }

        public static void ApplyDesignUpgradeGameOptionsToPolicies(GameOptions gameOptions, EmpirePolicy policy)
        {
            if (gameOptions != null && policy != null)
            {
                policy.DesignUpgradeCapitalShip = gameOptions.DesignUpgradeCapitalShip;
                policy.DesignUpgradeCarrier = gameOptions.DesignUpgradeCarrier;
                policy.DesignUpgradeColonyShip = gameOptions.DesignUpgradeColonyShip;
                policy.DesignUpgradeConstructionShip = gameOptions.DesignUpgradeConstructionShip;
                policy.DesignUpgradeCruiser = gameOptions.DesignUpgradeCruiser;
                policy.DesignUpgradeDefensiveBase = gameOptions.DesignUpgradeDefensiveBase;
                policy.DesignUpgradeDestroyer = gameOptions.DesignUpgradeDestroyer;
                policy.DesignUpgradeEnergyResearchStation = gameOptions.DesignUpgradeEnergyResearchStation;
                policy.DesignUpgradeEscort = gameOptions.DesignUpgradeEscort;
                policy.DesignUpgradeExplorationShip = gameOptions.DesignUpgradeExplorationShip;
                policy.DesignUpgradeFrigate = gameOptions.DesignUpgradeFrigate;
                policy.DesignUpgradeGasMiningShip = gameOptions.DesignUpgradeGasMiningShip;
                policy.DesignUpgradeGasMiningStation = gameOptions.DesignUpgradeGasMiningStation;
                policy.DesignUpgradeGenericBase = gameOptions.DesignUpgradeGenericBase;
                policy.DesignUpgradeHighTechResearchStation = gameOptions.DesignUpgradeHighTechResearchStation;
                policy.DesignUpgradeLargeFreighter = gameOptions.DesignUpgradeLargeFreighter;
                policy.DesignUpgradeLargeSpacePort = gameOptions.DesignUpgradeLargeSpacePort;
                policy.DesignUpgradeMediumFreighter = gameOptions.DesignUpgradeMediumFreighter;
                policy.DesignUpgradeMediumSpacePort = gameOptions.DesignUpgradeMediumSpacePort;
                policy.DesignUpgradeMiningShip = gameOptions.DesignUpgradeMiningShip;
                policy.DesignUpgradeMiningStation = gameOptions.DesignUpgradeMiningStation;
                policy.DesignUpgradeMonitoringStation = gameOptions.DesignUpgradeMonitoringStation;
                policy.DesignUpgradePassengerShip = gameOptions.DesignUpgradePassengerShip;
                policy.DesignUpgradeResortBase = gameOptions.DesignUpgradeResortBase;
                policy.DesignUpgradeResupplyShip = gameOptions.DesignUpgradeResupplyShip;
                policy.DesignUpgradeSmallFreighter = gameOptions.DesignUpgradeSmallFreighter;
                policy.DesignUpgradeSmallSpacePort = gameOptions.DesignUpgradeSmallSpacePort;
                policy.DesignUpgradeTroopTransport = gameOptions.DesignUpgradeTroopTransport;
                policy.DesignUpgradeWeaponsResearchStation = gameOptions.DesignUpgradeWeaponsResearchStation;
            }
        }

        public Empire GenerateEmpire(Galaxy galaxy, bool isPlayerEmpire, string empireName, Habitat capital, Race race, int designPictureFamilyIndex, int governmentId, double homeSystemFactor, string homeSystemDescription, int age, double techLevel, double corruptionMultiplier, out double expansion, GameOptions gameOptions, VictoryConditions globalVictoryConditions)
        {
            double actualTechLevel = 1.0;
            string raceNameOverride = string.Empty;
            if (race != null)
            {
                raceNameOverride = race.Name;
            }
            return GenerateEmpire(galaxy, isPlayerEmpire, empireName, capital, race, designPictureFamilyIndex, governmentId, homeSystemFactor, homeSystemDescription, age, techLevel, corruptionMultiplier, out expansion, gameOptions, globalVictoryConditions, out actualTechLevel, raceNameOverride);
        }

        public Empire GenerateEmpire(Galaxy galaxy, bool isPlayerEmpire, string empireName, Habitat capital, Race race, int designPictureFamilyIndex, int governmentId, double homeSystemFactor, string homeSystemDescription, int age, double techLevel, double corruptionMultiplier, out double expansion, GameOptions gameOptions, VictoryConditions globalVictoryConditions, out double actualTechLevel, string raceNameOverride)
        {
            actualTechLevel = 1.0;
            EmpirePolicy empirePolicy = LoadEmpirePolicy(race, isPirate: false);
            if (isPlayerEmpire)
            {
                empirePolicy.ImplementEnslavementWithPenalColonies = false;
            }
            Empire empire = new Empire(galaxy, empireName, capital, race, governmentId, corruptionMultiplier, empirePolicy, isPlayerEmpire);
            if (techLevel < 0.0)
            {
                double num = 0.5;
                double num2 = 5.99;
                switch (galaxy.Age)
                {
                    case 0:
                        num = 0.0;
                        num2 = 0.0;
                        break;
                    case 1:
                        num = 0.5;
                        num2 = 0.99;
                        break;
                    case 2:
                        num = 0.5;
                        num2 = 1.99;
                        break;
                    case 3:
                        num = 1.0;
                        num2 = 2.99;
                        break;
                    case 4:
                        num = 2.0;
                        num2 = 3.99;
                        break;
                    case 5:
                        num = 3.0;
                        num2 = 4.99;
                        break;
                    case 6:
                        num = 4.0;
                        num2 = 5.99;
                        break;
                }
                techLevel = num + Rnd.NextDouble() * (num2 - num);
            }
            actualTechLevel = techLevel;
            if (age < 0)
            {
                int minValue = 0;
                int num3 = 6;
                switch (galaxy.Age)
                {
                    case 0:
                        minValue = 0;
                        num3 = 0;
                        break;
                    case 1:
                        minValue = 1;
                        num3 = 2;
                        break;
                    case 2:
                        minValue = 1;
                        num3 = 2;
                        break;
                    case 3:
                        minValue = 2;
                        num3 = 3;
                        break;
                    case 4:
                        minValue = 3;
                        num3 = 4;
                        break;
                    case 5:
                        minValue = 3;
                        num3 = 5;
                        break;
                    case 6:
                        minValue = 4;
                        num3 = 6;
                        break;
                }
                age = Rnd.Next(minValue, num3 + 1);
                age = Math.Max(0, Math.Min(6, age));
            }
            if (designPictureFamilyIndex >= 0)
            {
                empire.DesignPictureFamilyIndex = designPictureFamilyIndex;
            }
            if (capital.Ruin != null && (capital.Ruin.Type == RuinType.Standard || capital.Ruin.Type == RuinType.CreatureSwarm || capital.Ruin.Type == RuinType.PirateAmbush))
            {
                capital.Ruin = null;
                if (galaxy.RuinsHabitats.Contains(capital))
                {
                    galaxy.RuinsHabitats.Remove(capital);
                }
            }
            empire.TakeOwnershipOfColony(capital, empire);
            if (techLevel > 0.0 || (globalVictoryConditions != null && !globalVictoryConditions.EnableStoryEventsShadows))
            {
                empire.PreWarpProgressEventOccurredSendPirateRaid = true;
                empire.PreWarpProgressEventOccurredExperienceFirstPirateRaid = true;
                empire.PreWarpProgressEventOccurredFirstContactPirateOrIndependent = true;
                empire.PreWarpProgressEventOccurredFirstContactNormalEmpire = true;
                empire.PreWarpProgressEventOccurredBuildFirstShip = true;
                empire.PreWarpProgressEventOccurredBuildFirstSpaceport = true;
                empire.PreWarpProgressEventOccurredBuildFirstMiningStation = true;
                empire.PreWarpProgressEventOccurredBuildFirstResearchStation = true;
                empire.PreWarpProgressEventOccurredDiscoverHyperspaceTech = true;
                empire.PreWarpProgressEventOccurredDiscoverColonizationTech = true;
                empire.PreWarpProgressEventOccurredFirstHyperjump = true;
                empire.PreWarpProgressEventOccurredEncounterFirstKaltor = true;
                empire.PreWarpProgressEventOccurredBuildFirstMilitaryShip = true;
            }
            int minimumResourceCount = 5;
            int minimumCriticalResourceCount = 3;
            int num4 = Rnd.Next(0, 8);
            if (homeSystemDescription == TextResolver.GetText("Harsh"))
            {
                minimumResourceCount = 3;
                minimumCriticalResourceCount = 1;
                capital.Diameter = (short)(260 + num4);
                capital.BaseQuality = (float)(0.65 + Rnd.NextDouble() * 0.06);
            }
            else if (homeSystemDescription == TextResolver.GetText("Trying"))
            {
                minimumResourceCount = 4;
                minimumCriticalResourceCount = 2;
                capital.Diameter = (short)(275 + num4);
                capital.BaseQuality = (float)(0.73 + Rnd.NextDouble() * 0.06);
            }
            else if (homeSystemDescription == TextResolver.GetText("Normal"))
            {
                minimumResourceCount = 5;
                minimumCriticalResourceCount = 3;
                capital.Diameter = (short)(290 + num4);
                capital.BaseQuality = (float)(0.82 + Rnd.NextDouble() * 0.06);
            }
            else if (homeSystemDescription == TextResolver.GetText("Agreeable"))
            {
                minimumResourceCount = 5;
                minimumCriticalResourceCount = 3;
                capital.Diameter = (short)(305 + num4);
                capital.BaseQuality = (float)(0.9 + Rnd.NextDouble() * 0.05);
            }
            else if (homeSystemDescription == TextResolver.GetText("Excellent"))
            {
                minimumResourceCount = 5;
                minimumCriticalResourceCount = 3;
                capital.Diameter = (short)(320 + num4);
                capital.BaseQuality = (float)(0.97 + Rnd.NextDouble() * 0.03);
            }
            capital.IsRefuellingDepot = true;
            _ = capital.Population.Count;
            _ = 0;
            long num5 = (long)(homeSystemFactor * 2200000000.0 + homeSystemFactor * Rnd.NextDouble() * 500000000.0);
            if (age > 0)
            {
                num5 = (long)((double)num5 * Math.Pow(1.7, age));
            }
            long val = (long)(homeSystemFactor * 10000000000.0 + homeSystemFactor * Rnd.NextDouble() * 1000000000.0);
            if (age == 0)
            {
                val = (long)(homeSystemFactor * 2200000000.0 + homeSystemFactor * Rnd.NextDouble() * 500000000.0);
            }
            num5 = Math.Max(num5, val);
            Population population = new Population(race, num5);
            capital.Population.Add(population);
            capital.Population.TotalAmount = num5;
            capital.GrowPopulation(new TimeSpan(0L));
            empire.ControlColonization = AutomationLevel.FullyAutomated;
            empire.ControlColonyDevelopment = true;
            empire.ControlColonyStockLevels = true;
            empire.ControlColonyTaxRates = true;
            empire.ControlDesigns = true;
            empire.ControlDiplomacyGifts = AutomationLevel.FullyAutomated;
            empire.ControlDiplomacyOffense = AutomationLevel.FullyAutomated;
            empire.ControlDiplomacyTreaties = AutomationLevel.FullyAutomated;
            empire.ControlMilitaryAttacks = AutomationLevel.FullyAutomated;
            empire.ControlMilitaryFleets = true;
            empire.ControlStateConstruction = AutomationLevel.FullyAutomated;
            empire.ControlTroopGeneration = true;
            empire.ControlAgentAssignment = AutomationLevel.FullyAutomated;
            empire.ControlResearch = true;
            empire.ControlPopulationPolicy = true;
            empire.ControlColonyFacilities = AutomationLevel.FullyAutomated;
            empire.ControlCharacterLocations = true;
            empire.ControlOfferPirateMissions = AutomationLevel.FullyAutomated;
            galaxy.Empires.Add(empire);
            empire.ResolveSystemVisibility(capital.Xpos, capital.Ypos, null, null);
            expansion = DetermineEmpireExpansion(Rnd, age);
            empire.PrivateMoney = 40000.0 + (expansion + 2.0) * 3000.0;
            empire.StateMoney = 15000.0 + (expansion + 2.0) * 1500.0;
            empire.GenerateDesignSpecifications(galaxy, race, isPirate: false, raceNameOverride);
            empire.Research.TechTree = ResearchNodeDefinitionsStatic.SetTechTreeLevel(galaxy, empire.Research.TechTree, race, techLevel, isPirate: false);
            empire.Research.Update(race);
            empire.ReviewResearchAbilities();
            LoadOptimizedDesignsForEmpire(empire, galaxy.ApplicationStartupPath, galaxy.CustomizationSetPath, galaxy.CurrentStarDate);
            empire.ReviewDesignsBuiltObjectsImprovedComponents();
            empire.ReviewTroopTypes();
            empire.SetStartupColonyResourceCargo(capital);
            capital.SetDevelopmentLevel(10);
            capital.DoTasks(galaxy.CurrentDateTime);
            int num6 = capital.EstimatedDefensiveForceRequired(atWar: false) * 2;
            if (num6 > ColonyMaximumTroopStrength / 100)
            {
                num6 = ColonyMaximumTroopStrength / 100;
            }
            int num7 = (int)((double)num6 * Rnd.NextDouble());
            int num8 = num7 / 100;
            if (techLevel == 0.0)
            {
                num8 = Math.Min(1, num8);
            }
            int troopStrength = race.TroopStrength;
            if (empire.TroopCanRecruitInfantry)
            {
                for (int i = 0; i < num8; i++)
                {
                    Troop troop = GenerateNewTroop(empire.GenerateTroopDescription(), TroopType.Infantry, troopStrength, empire, capital.Population.DominantRace);
                    troop.Colony = capital;
                    capital.Troops.Add(troop);
                    empire.Troops.Add(troop);
                }
            }
            else
            {
                empire.Troops.Clear();
                capital.Troops.Clear();
            }
            if (empire.ResourceMap != null)
            {
                for (int j = 0; j < galaxy.Habitats.Count; j++)
                {
                    if (galaxy.Habitats[j].Parent == null)
                    {
                        empire.ResourceMap.SetResourcesKnown(galaxy.Habitats[j], known: false);
                    }
                }
            }
            int val2 = (int)(expansion * 3.5);
            val2 = Math.Min(val2, (int)((double)galaxy.StarCount * 0.85));
            if (val2 > galaxy.StarCount)
            {
                val2 = galaxy.StarCount;
            }
            if (age == 0)
            {
                val2 = 0;
                for (int k = 0; k < galaxy.Systems[capital.SystemIndex].Habitats.Count; k++)
                {
                    empire.ResourceMap.SetResourcesKnown(galaxy.Systems[capital.SystemIndex].Habitats[k], known: false);
                }
            }
            SetEmpireExplorationAmount(empire, val2);
            empire.ResourceMap.SetResourcesKnown(capital, known: true);
            empire.InitiateConstruction = false;
            empire.DoTasks();
            empire.InitiateConstruction = true;
            Habitat systemStar = DetermineHabitatSystemStar(capital);
            if (homeSystemDescription == TextResolver.GetText("Harsh"))
            {
                SetColonizableHabitatsInSystem(galaxy, systemStar, race, 0);
                SetResourceLevelsInSystem(galaxy, systemStar, 0, 1);
            }
            else if (homeSystemDescription == TextResolver.GetText("Trying"))
            {
                SetColonizableHabitatsInSystem(galaxy, systemStar, race, 0);
                SetResourceLevelsInSystem(galaxy, systemStar, 0, 2);
            }
            else if (homeSystemDescription == TextResolver.GetText("Normal"))
            {
                SetColonizableHabitatsInSystem(galaxy, systemStar, race, 0);
                SetResourceLevelsInSystem(galaxy, systemStar, 1, 4);
            }
            else if (homeSystemDescription == TextResolver.GetText("Agreeable"))
            {
                SetColonizableHabitatsInSystem(galaxy, systemStar, race, 1);
                SetResourceLevelsInSystem(galaxy, systemStar, 1, 5);
            }
            else if (homeSystemDescription == TextResolver.GetText("Excellent"))
            {
                SetColonizableHabitatsInSystem(galaxy, systemStar, race, 2);
                SetResourceLevelsInSystem(galaxy, systemStar, 2, 5);
            }
            capital.Resources.Clear();
            galaxy.SelectResources(capital, minimumResourceCount, race, minimumCriticalResourceCount);
            return empire;
        }

        public void UpdateEmpireResearch()
        {
            if (Empires != null)
            {
                for (int i = 0; i < Empires.Count; i++)
                {
                    Empire empire = Empires[i];
                    if (empire != null && empire.Research != null)
                    {
                        empire.Research.Update(empire.DominantRace);
                    }
                }
            }
            if (PirateEmpires == null)
            {
                return;
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                if (empire2 != null && empire2.Research != null)
                {
                    empire2.Research.Update(empire2.DominantRace);
                }
            }
        }

        public static string ResolveDescription(TroopType troopType)
        {
            string result = string.Empty;
            switch (troopType)
            {
                case TroopType.Infantry:
                    result = TextResolver.GetText("TroopType Infantry");
                    break;
                case TroopType.Armored:
                    result = TextResolver.GetText("TroopType Armored");
                    break;
                case TroopType.Artillery:
                    result = TextResolver.GetText("TroopType Artillery");
                    break;
                case TroopType.SpecialForces:
                    result = TextResolver.GetText("TroopType SpecialForces");
                    break;
                case TroopType.PirateRaider:
                    result = TextResolver.GetText("TroopType PirateRaider");
                    break;
            }
            return result;
        }

        public static string ResolveTroopStrengthDescription(Troop troop)
        {
            string result = string.Empty;
            if (troop != null && troop.Race != null)
            {
                double num = (double)troop.Race.TroopStrength * 1.0;
                double num2 = (double)troop.Race.TroopStrength * 1.5;
                double num3 = (double)troop.Race.TroopStrength * 2.5;
                _ = troop.Race.TroopStrength;
                double num4 = 0.0;
                double num5 = 1.0;
                switch (troop.Type)
                {
                    case TroopType.Infantry:
                        num4 = troop.DefendStrength;
                        break;
                    case TroopType.Artillery:
                        num4 = troop.DefendStrength;
                        num5 = 0.75;
                        break;
                    case TroopType.PirateRaider:
                        num4 = troop.AttackStrength;
                        break;
                    case TroopType.Armored:
                        num4 = troop.AttackStrength;
                        num5 = 3.0;
                        break;
                    case TroopType.SpecialForces:
                        num4 = troop.AttackStrength;
                        num5 = 2.0;
                        break;
                }
                result = ((num4 <= num * num5) ? TextResolver.GetText("Troop Strength Level Green") : ((num4 <= num2 * num5) ? TextResolver.GetText("Troop Strength Level Experienced") : ((!(num4 <= num3 * num5)) ? TextResolver.GetText("Troop Strength Level Elite") : TextResolver.GetText("Troop Strength Level Veteran"))));
            }
            return result;
        }

        public static string ResolveTroopCompositionDescription(int infantryCount, int artilleryCount, int armoredCount, int specialForcesCount)
        {
            string text = string.Empty;
            if (infantryCount > 0)
            {
                if (!string.IsNullOrEmpty(text))
                {
                    text += ", ";
                }
                text = text + infantryCount + " " + TextResolver.GetText("TroopType Infantry Abbreviation");
            }
            if (artilleryCount > 0)
            {
                if (!string.IsNullOrEmpty(text))
                {
                    text += ", ";
                }
                text = text + artilleryCount + " " + TextResolver.GetText("TroopType Artillery Abbreviation");
            }
            if (armoredCount > 0)
            {
                if (!string.IsNullOrEmpty(text))
                {
                    text += ", ";
                }
                text = text + armoredCount + " " + TextResolver.GetText("TroopType Armored Abbreviation");
            }
            if (specialForcesCount > 0)
            {
                if (!string.IsNullOrEmpty(text))
                {
                    text += ", ";
                }
                text = text + specialForcesCount + " " + TextResolver.GetText("TroopType SpecialForces Abbreviation");
            }
            return text;
        }

        public static double CalculateDefaultTroopMaintenanceMultiplier(TroopType troopType)
        {
            double result = 1.0;
            switch (troopType)
            {
                case TroopType.Infantry:
                    result = 1.0;
                    break;
                case TroopType.PirateRaider:
                    result = 0.0;
                    break;
                case TroopType.Armored:
                    result = 2.0;
                    break;
                case TroopType.Artillery:
                    result = 4.0;
                    break;
                case TroopType.SpecialForces:
                    result = 2.0;
                    break;
            }
            return result;
        }

        public static TroopList GenerateDefaultTroops(Galaxy galaxy)
        {
            TroopList troopList = new TroopList();
            if (galaxy != null)
            {
                for (int i = 0; i < galaxy.Races.Count; i++)
                {
                    Race race = galaxy.Races[i];
                    if (race != null)
                    {
                        double num = race.TroopStrength;
                        Troop item = GenerateNewTroop(race.TroopName, TroopType.Infantry, (int)num, null, race);
                        troopList.Add(item);
                        Troop item2 = GenerateNewTroop(race.TroopNameArmored, TroopType.Armored, (int)num, null, race);
                        troopList.Add(item2);
                        Troop item3 = GenerateNewTroop(race.TroopNameArtillery, TroopType.Artillery, (int)num, null, race);
                        troopList.Add(item3);
                        Troop item4 = GenerateNewTroop(race.TroopNameSpecialForces, TroopType.SpecialForces, (int)num, null, race);
                        troopList.Add(item4);
                        double num2 = (double)race.TroopStrength / 100.0;
                        int naturalStrength = (int)(60.0 * num2);
                        string name = string.Format(TextResolver.GetText("RACE Pirate Raider"), race.Name);
                        Troop item5 = GenerateNewTroop(name, TroopType.PirateRaider, naturalStrength, null, race);
                        troopList.Add(item5);
                    }
                }
            }
            return troopList;
        }

        public static Troop GenerateNewTroop(string name, TroopType troopType, int naturalStrength, Empire empire, Race race)
        {
            return GenerateNewTroop(name, troopType, naturalStrength, empire, race, applyBonusFactors: true);
        }

        public static Troop GenerateNewTroop(string name, TroopType troopType, int naturalStrength, Empire empire, Race race, bool applyBonusFactors)
        {
            int attackStrength = 100;
            int defendStrength = 100;
            int size = 100;
            float num = 1f;
            switch (troopType)
            {
                case TroopType.Infantry:
                    if (applyBonusFactors && empire != null)
                    {
                        attackStrength = (int)((float)naturalStrength * empire.TroopAttackStrengthBonusFactorInfantry);
                        defendStrength = (int)((float)naturalStrength * empire.TroopDefendStrengthBonusFactorInfantry);
                    }
                    else
                    {
                        attackStrength = naturalStrength;
                        defendStrength = naturalStrength;
                    }
                    size = 100;
                    num = 1f;
                    break;
                case TroopType.Armored:
                    if (applyBonusFactors && empire != null)
                    {
                        attackStrength = (int)((float)naturalStrength * empire.TroopAttackStrengthBonusFactorArmored * 3f);
                        defendStrength = (int)((float)naturalStrength * empire.TroopDefendStrengthBonusFactorArmored * 1.5f);
                    }
                    else
                    {
                        attackStrength = (int)((float)naturalStrength * 3f);
                        defendStrength = (int)((float)naturalStrength * 1.5f);
                    }
                    size = 200;
                    num = 2f;
                    break;
                case TroopType.Artillery:
                    if (applyBonusFactors && empire != null)
                    {
                        attackStrength = (int)((float)naturalStrength * empire.TroopAttackStrengthBonusFactorArtillery * 0.5f);
                        defendStrength = (int)((double)(float)naturalStrength * 1.0 * 0.75);
                    }
                    else
                    {
                        attackStrength = (int)((float)naturalStrength * 0.5f);
                        defendStrength = (int)((float)naturalStrength * 0.75f);
                    }
                    size = 400;
                    num = 4f;
                    break;
                case TroopType.SpecialForces:
                    if (applyBonusFactors && empire != null)
                    {
                        attackStrength = (int)((float)naturalStrength * empire.TroopAttackStrengthBonusFactorSpecialForces * 2f);
                        defendStrength = (int)((float)naturalStrength * empire.TroopDefendStrengthBonusFactorSpecialForces);
                    }
                    else
                    {
                        attackStrength = (int)((float)naturalStrength * 2f);
                        defendStrength = naturalStrength;
                    }
                    size = 100;
                    num = 2f;
                    break;
            }
            Troop troop = new Troop(name, troopType, attackStrength, defendStrength, size, 100f, empire, race);
            float num2 = CalculateTroopMaintenanceMultiplier(race);
            troop.MaintenanceMultiplier = num2 * num;
            if (race != null)
            {
                troop.PictureRef = race.PictureRef;
            }
            return troop;
        }

        public void SetColonizableHabitatsInSystem(Galaxy galaxy, Habitat systemStar, Race race, int colonyCount)
        {
            HabitatList habitats = galaxy.Systems[systemStar].Habitats;
            HabitatList habitatList = new HabitatList();
            HabitatList habitatList2 = new HabitatList();
            foreach (Habitat item in habitats)
            {
                if ((item.Owner == null || item.Owner == galaxy.IndependentEmpire) && (item.Population.TotalAmount > 0 || item.Type == race.NativeHabitatType) && item.Category != HabitatCategoryType.Asteroid)
                {
                    habitatList.Add(item);
                }
                else if (item.Owner == null || item.Owner == galaxy.IndependentEmpire)
                {
                    if ((item.Category == HabitatCategoryType.Moon || item.Category == HabitatCategoryType.Planet) && (item.Type == HabitatType.MarshySwamp || item.Type == HabitatType.Ocean || item.Type == HabitatType.Desert))
                    {
                        habitatList2.Add(item);
                    }
                    if (item.Category == HabitatCategoryType.Planet && item.Type == HabitatType.BarrenRock)
                    {
                        habitatList2.Add(item);
                    }
                }
            }
            if (habitatList.Count > colonyCount)
            {
                int num = habitatList.Count - colonyCount;
                for (int i = 0; i < num; i++)
                {
                    if (habitatList[i].Population.TotalAmount <= 0)
                    {
                        HabitatType type = HabitatType.Undefined;
                        int pictureRef = 0;
                        int landscapePictureRef = 0;
                        int diameter = 0;
                        int minOrbitDistance = 0;
                        int maxOrbitDistance = 0;
                        galaxy.SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                        habitatList[i].Type = HabitatType.BarrenRock;
                        habitatList[i].Diameter = (short)diameter;
                        habitatList[i].PictureRef = (short)pictureRef;
                        habitatList[i].LandscapePictureRef = (short)landscapePictureRef;
                        habitatList[i].BaseQuality = galaxy.SelectHabitatQuality(habitatList[i], (float)galaxy.ColonyPrevalence);
                        habitatList[i].Resources.Clear();
                        galaxy.SelectResources(habitatList[i]);
                    }
                }
            }
            else
            {
                if (habitatList.Count >= colonyCount)
                {
                    return;
                }
                int num2 = colonyCount - habitatList.Count;
                for (int j = 0; j < num2; j++)
                {
                    if (habitatList2.Count > j)
                    {
                        HabitatType type2 = HabitatType.Undefined;
                        int pictureRef2 = 0;
                        int landscapePictureRef2 = 0;
                        int diameter2 = 0;
                        int minOrbitDistance2 = 0;
                        int maxOrbitDistance2 = 0;
                        switch (race.NativeHabitatType)
                        {
                            case HabitatType.Continental:
                                galaxy.SelectContinentalPlanet(out type2, out pictureRef2, out diameter2, out minOrbitDistance2, out maxOrbitDistance2, out landscapePictureRef2);
                                break;
                            case HabitatType.MarshySwamp:
                                galaxy.SelectMarshySwampPlanet(out type2, out pictureRef2, out diameter2, out minOrbitDistance2, out maxOrbitDistance2, out landscapePictureRef2);
                                break;
                            case HabitatType.Ocean:
                                galaxy.SelectOceanPlanet(out type2, out pictureRef2, out diameter2, out minOrbitDistance2, out maxOrbitDistance2, out landscapePictureRef2);
                                break;
                            case HabitatType.Desert:
                                galaxy.SelectDesertPlanet(out type2, out pictureRef2, out diameter2, out minOrbitDistance2, out maxOrbitDistance2, out landscapePictureRef2);
                                break;
                            case HabitatType.Ice:
                                galaxy.SelectIcePlanet(out type2, out pictureRef2, out diameter2, out minOrbitDistance2, out maxOrbitDistance2, out landscapePictureRef2);
                                break;
                            case HabitatType.Volcanic:
                                galaxy.SelectVolcanicPlanet(out type2, out pictureRef2, out diameter2, out minOrbitDistance2, out maxOrbitDistance2, out landscapePictureRef2);
                                break;
                        }
                        habitatList2[j].Type = race.NativeHabitatType;
                        habitatList2[j].Diameter = (short)diameter2;
                        habitatList2[j].PictureRef = (short)pictureRef2;
                        habitatList2[j].LandscapePictureRef = (short)landscapePictureRef2;
                        habitatList2[j].BaseQuality = (float)(0.7 + Rnd.NextDouble() * 0.25);
                        habitatList2[j].Resources.Clear();
                        galaxy.SelectResources(habitatList2[j]);
                    }
                    else
                    {
                        Habitat habitat = GenerateContinentalPlanet(galaxy, systemStar);
                        lock (_LockObject)
                        {
                            galaxy.AddHabitat(habitat, systemStar);
                        }
                    }
                }
            }
        }

        public Habitat GenerateGasGiantPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectGasGiantPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            return habitat;
        }

        public Habitat GenerateFrozenGasGiantPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectFrozenGasGiantPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            return habitat;
        }

        public Habitat GenerateDesertPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectDesertPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            habitat.Troops = new TroopList();
            habitat.TroopsToRecruit = new TroopList();
            habitat.InvadingTroops = new TroopList();
            habitat.ConstructionQueue = new ConstructionQueue(habitat, galaxy);
            habitat.ManufacturingQueue = new ManufacturingQueue(habitat, galaxy);
            habitat.DockingBays = new DockingBayList();
            int num = 20;
            for (int i = 0; i < num; i++)
            {
                BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, 100);
                habitat.DockingBays.Add(item);
            }
            habitat.DockingBayWaitQueue = new BuiltObjectList();
            return habitat;
        }

        public Habitat GenerateOceanPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectOceanPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            habitat.Troops = new TroopList();
            habitat.TroopsToRecruit = new TroopList();
            habitat.InvadingTroops = new TroopList();
            habitat.ConstructionQueue = new ConstructionQueue(habitat, galaxy);
            habitat.ManufacturingQueue = new ManufacturingQueue(habitat, galaxy);
            habitat.DockingBays = new DockingBayList();
            int num = 20;
            for (int i = 0; i < num; i++)
            {
                BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, 100);
                habitat.DockingBays.Add(item);
            }
            habitat.DockingBayWaitQueue = new BuiltObjectList();
            return habitat;
        }

        public Habitat GenerateSwampPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectMarshySwampPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            habitat.Troops = new TroopList();
            habitat.TroopsToRecruit = new TroopList();
            habitat.InvadingTroops = new TroopList();
            habitat.ConstructionQueue = new ConstructionQueue(habitat, galaxy);
            habitat.ManufacturingQueue = new ManufacturingQueue(habitat, galaxy);
            habitat.DockingBays = new DockingBayList();
            int num = 20;
            for (int i = 0; i < num; i++)
            {
                BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, 100);
                habitat.DockingBays.Add(item);
            }
            habitat.DockingBayWaitQueue = new BuiltObjectList();
            return habitat;
        }

        private bool CheckPlanetaryOrbitalOverlap(Habitat systemStar, int orbitDistance)
        {
            int num = 150;
            SystemInfo systemInfo = Systems[systemStar];
            if (systemInfo != null && systemInfo.Habitats != null)
            {
                for (int i = 0; i < systemInfo.Habitats.Count; i++)
                {
                    Habitat habitat = systemInfo.Habitats[i];
                    if (habitat != null)
                    {
                        int num2 = habitat.OrbitDistance - num;
                        int num3 = habitat.OrbitDistance + num;
                        if (orbitDistance >= num2 && orbitDistance <= num3)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private int GeneratePlanetaryOrbitDistance(Habitat systemStar, int minOrbitDistance, int maxOrbitDistance)
        {
            int num = Rnd.Next(minOrbitDistance, maxOrbitDistance);
            int num2 = 0;
            while (CheckPlanetaryOrbitalOverlap(systemStar, num) && num2 < 20)
            {
                num = Rnd.Next(minOrbitDistance, maxOrbitDistance);
                num2++;
            }
            return num;
        }

        public Habitat GenerateBarrenRockPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            return habitat;
        }

        public Habitat GenerateAsteroid(Galaxy galaxy, Habitat sun, HabitatType type)
        {
            int num = Rnd.Next(20, 35);
            int num2 = GalaxyImages.HabitatImageOffsetAsteroidsNormal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsNormal);
            Rnd.Next(9500, 11500);
            switch (type)
            {
                case HabitatType.Ice:
                    Rnd.Next(17200, 22200);
                    break;
                case HabitatType.Metal:
                    Rnd.Next(10500, 11500);
                    break;
            }
            double orbitangle = Rnd.NextDouble() * Math.PI * 2.0;
            string name = GenerateCodeName();
            Habitat habitat = new Habitat(this, HabitatCategoryType.Asteroid, type, name, sun, orbitangle, orbitdirection: true, Rnd.Next(10500, 11500), Rnd.Next(2, 8));
            habitat.Diameter = (short)num;
            habitat.PictureRef = (short)num2;
            habitat.LandscapePictureRef = -1;
            int minimumResourceCount = 0;
            if (type == HabitatType.Metal && Rnd.Next(0, 3) > 0)
            {
                minimumResourceCount = 1;
            }
            habitat = SelectResources(habitat, minimumResourceCount);
            habitat.Type = type;
            SelectHabitatPictures(habitat);
            return habitat;
        }

        public Habitat GenerateContinentalPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectContinentalPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            habitat.Troops = new TroopList();
            habitat.TroopsToRecruit = new TroopList();
            habitat.InvadingTroops = new TroopList();
            habitat.ConstructionQueue = new ConstructionQueue(habitat, galaxy);
            habitat.ManufacturingQueue = new ManufacturingQueue(habitat, galaxy);
            habitat.DockingBays = new DockingBayList();
            int num = 20;
            for (int i = 0; i < num; i++)
            {
                BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, 100);
                habitat.DockingBays.Add(item);
            }
            habitat.DockingBayWaitQueue = new BuiltObjectList();
            return habitat;
        }

        public Habitat GenerateVolcanicPlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectVolcanicPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            habitat.Troops = new TroopList();
            habitat.TroopsToRecruit = new TroopList();
            habitat.InvadingTroops = new TroopList();
            habitat.ConstructionQueue = new ConstructionQueue(habitat, galaxy);
            habitat.ManufacturingQueue = new ManufacturingQueue(habitat, galaxy);
            habitat.DockingBays = new DockingBayList();
            int num = 20;
            for (int i = 0; i < num; i++)
            {
                BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, 100);
                habitat.DockingBays.Add(item);
            }
            habitat.DockingBayWaitQueue = new BuiltObjectList();
            return habitat;
        }

        public Habitat GenerateIcePlanet(Galaxy galaxy, Habitat sun)
        {
            HabitatType type = HabitatType.Undefined;
            int pictureRef = 0;
            int landscapePictureRef = 0;
            int diameter = 0;
            int minOrbitDistance = 0;
            int maxOrbitDistance = 0;
            galaxy.SelectIcePlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
            int orbitdistance = GeneratePlanetaryOrbitDistance(sun, minOrbitDistance, maxOrbitDistance);
            Habitat habitat = new Habitat(galaxy, HabitatCategoryType.Planet, type, galaxy.GenerateRandomName(), sun, Rnd.NextDouble() * Math.PI * 2.0, orbitdirection: true, orbitdistance, Rnd.Next(2, 5));
            habitat.Diameter = (short)diameter;
            habitat.PictureRef = (short)pictureRef;
            habitat.LandscapePictureRef = (short)landscapePictureRef;
            habitat.BaseQuality = galaxy.SelectHabitatQuality(habitat, (float)galaxy.ColonyPrevalence);
            habitat.DoTasks(galaxy.CurrentDateTime);
            habitat = galaxy.SelectResources(habitat);
            if (Rnd.Next(0, 5) == 2)
            {
                habitat.OrbitDirection = false;
            }
            habitat.Cargo = new CargoList();
            habitat.Troops = new TroopList();
            habitat.TroopsToRecruit = new TroopList();
            habitat.InvadingTroops = new TroopList();
            habitat.ConstructionQueue = new ConstructionQueue(habitat, galaxy);
            habitat.ManufacturingQueue = new ManufacturingQueue(habitat, galaxy);
            habitat.DockingBays = new DockingBayList();
            int num = 20;
            for (int i = 0; i < num; i++)
            {
                BuiltObjectComponent builtObjectComponent = new BuiltObjectComponent(74, ComponentStatus.Normal);
                DockingBay item = new DockingBay(builtObjectComponent.ComponentID, builtObjectComponent.BuiltObjectComponentId, 100);
                habitat.DockingBays.Add(item);
            }
            habitat.DockingBayWaitQueue = new BuiltObjectList();
            return habitat;
        }

        private void SetResourceLevelsInSystem(Galaxy galaxy, Habitat systemStar, int resourceLevelMinimum, int resourceLevelMaximum)
        {
            HabitatList habitats = galaxy.Systems[systemStar].Habitats;
            foreach (Habitat item in habitats)
            {
                if (item.Category == HabitatCategoryType.Planet || item.Category == HabitatCategoryType.Moon)
                {
                    if (item.Resources.Count > resourceLevelMaximum)
                    {
                        item.Resources.Clear();
                    }
                    else if (item.Resources.Count < resourceLevelMinimum)
                    {
                        item.Resources.Clear();
                        galaxy.SelectResources(item, resourceLevelMinimum);
                    }
                }
            }
        }

        public static void ResolveHomeSystem(string homeSystemDescription, out HabitatType capitalHabitatType, out double homeSystemFactor)
        {
            capitalHabitatType = HabitatType.Undefined;
            homeSystemFactor = 0.0;
            if (homeSystemDescription == TextResolver.GetText("Harsh"))
            {
                capitalHabitatType = HabitatType.Desert;
                homeSystemFactor = 0.4;
            }
            else if (homeSystemDescription == TextResolver.GetText("Trying"))
            {
                capitalHabitatType = HabitatType.MarshySwamp;
                homeSystemFactor = 0.7;
            }
            else if (homeSystemDescription == TextResolver.GetText("Normal"))
            {
                capitalHabitatType = HabitatType.MarshySwamp;
                homeSystemFactor = 1.0;
            }
            else if (homeSystemDescription == TextResolver.GetText("Agreeable"))
            {
                capitalHabitatType = HabitatType.Continental;
                homeSystemFactor = 1.4;
            }
            else if (homeSystemDescription == TextResolver.GetText("Excellent"))
            {
                capitalHabitatType = HabitatType.Continental;
                homeSystemFactor = 2.0;
            }
        }

        public static double DetermineEmpireExpansion(Random rnd, int age)
        {
            double num = 1.0;
            double num2 = EmpireAgeExpansionRateMaximum - EmpireAgeExpansionRateMinimum;
            age--;
            for (int i = 0; i < age; i++)
            {
                double num3 = EmpireAgeExpansionRateMinimum + rnd.NextDouble() * num2;
                num *= num3;
            }
            return num;
        }

        public void MakeHabitatIntoColony(Galaxy galaxy, Habitat habitat, Empire empire, int age, Race race, double homeSystemFactor, bool hasSpacePort)
        {
            if (habitat.Ruin != null && (habitat.Ruin.Type == RuinType.Standard || habitat.Ruin.Type == RuinType.CreatureSwarm || habitat.Ruin.Type == RuinType.PirateAmbush))
            {
                habitat.Ruin = null;
                if (galaxy.RuinsHabitats.Contains(habitat))
                {
                    galaxy.RuinsHabitats.Remove(habitat);
                }
            }
            empire.TakeOwnershipOfColony(habitat, empire);
            if (habitat.Quality < 0.5f)
            {
                habitat.BaseQuality = 0.5f + (float)(Rnd.NextDouble() * 0.1);
            }
            habitat.IsRefuellingDepot = true;
            if (galaxy != null && galaxy.ColonyNames != null && empire != galaxy.IndependentEmpire && empire == galaxy.PlayerEmpire && galaxy.ColonyNames.Count > galaxy.ColonyNameIndex)
            {
                string name = galaxy.ColonyNames[galaxy.ColonyNameIndex];
                galaxy.ColonyNameIndex++;
                habitat.Name = name;
            }
            double num = habitat.Quality;
            if (habitat.Type == race.NativeHabitatType)
            {
                num *= 2.0;
            }
            long num2 = (long)(homeSystemFactor * num * 300000000.0 + homeSystemFactor * num * Rnd.NextDouble() * 400000000.0);
            if (age > 0)
            {
                num2 = (long)((double)num2 * Math.Pow(1.7, age));
            }
            Population population = new Population(race, num2);
            habitat.Population.Add(population);
            habitat.Population.TotalAmount += num2;
            habitat.GrowPopulation(new TimeSpan(0L));
            int num3 = SetColonyResources(galaxy, habitat, empire, hasSpacePort);
            habitat.SetDevelopmentLevel(Math.Min(50, Math.Max(0, num3 * 5 + Rnd.Next(0, 5))));
            habitat.RecalculateCriticalResourceSupplyBonuses();
            habitat.RecalculateDevelopmentLevelBaseline();
            habitat.RecalculateAnnualTaxRevenue();
            habitat.DoTasks(galaxy.CurrentDateTime);
            if (habitat.ConstructionQueue != null)
            {
                habitat.ConstructionQueue.ReviewConstructionSpeed();
            }
            int troopLevelRequired = habitat.TroopLevelRequired;
            int num4 = (int)((double)troopLevelRequired * (0.5 + Rnd.NextDouble()));
            int num5 = num4 / 100;
            int troopStrength = race.TroopStrength;
            for (int i = 0; i < num5; i++)
            {
                Troop troop = GenerateNewTroop(empire.GenerateTroopDescription(), TroopType.Infantry, troopStrength, empire, race);
                troop.Colony = habitat;
                habitat.Troops.Add(troop);
                empire.Troops.Add(troop);
            }
            empire.ResolveSystemVisibility(habitat.Xpos, habitat.Ypos, null, null);
        }

        public int SetColonyResources(Galaxy galaxy, Habitat habitat, Empire empire, bool hasSpacePort)
        {
            int val = 1 + (int)(habitat.Population.TotalAmount / 250000000);
            val = Math.Min(10, val);
            double num = 500.0;
            double num2 = ColonyAnnualResourceConsumptionRate * ((double)habitat.Population.TotalAmount / 20.0) * (double)(habitat.Population.DominantRace.CautionLevel / 100);
            if (num2 < 1.0)
            {
                num2 = 1.0;
            }
            else if (num2 > 4.0)
            {
                num2 = 4.0;
            }
            if (habitat.Cargo != null)
            {
                habitat.Cargo.Clear();
                for (int i = 0; i < ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
                {
                    ResourceDefinition resourceDefinition = ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                    if (resourceDefinition != null && resourceDefinition.ColonyGrowthResourceLevel > 0f)
                    {
                        Cargo cargo = new Cargo(new Resource(resourceDefinition.ResourceID), (int)((double)(resourceDefinition.RelativeImportance * 6000f) * num2), empire);
                        habitat.Cargo.Add(cargo);
                    }
                }
                if (hasSpacePort)
                {
                    for (int j = 0; j < ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; j++)
                    {
                        ResourceDefinition resourceDefinition2 = ResourceSystem.StrategicResourcesOrderedByRelativeImportance[j];
                        if (resourceDefinition2 != null && resourceDefinition2.ColonyGrowthResourceLevel <= 0f)
                        {
                            Cargo cargo2 = new Cargo(new Resource(resourceDefinition2.ResourceID), (int)((double)(resourceDefinition2.RelativeImportance * 1500f) * num2), empire);
                            habitat.Cargo.Add(cargo2);
                        }
                    }
                }
                long num3 = Math.Max(500000000L, habitat.Population.TotalAmount);
                int num4 = (int)(ColonyAnnualLuxuryResourceConsumptionRate * (double)num3 * ((double)habitat.Population.DominantRace.CautionLevel / 100.0) * 5.0);
                num4 = Math.Max(num4 * 3, MinimumLuxuryResourceReorderAmount);
                num4 = Math.Max(400, num4);
                num4 = (int)((double)num4 * 1.5);
                for (int k = 0; k < 4; k++)
                {
                    int index = Rnd.Next(0, ResourceSystem.StrategicResources.Count);
                    byte resourceID = ResourceSystem.StrategicResources[index].ResourceID;
                    Cargo cargo3 = new Cargo(new Resource(resourceID), 400, empire);
                    habitat.Cargo.Add(cargo3);
                }
                if (empire != null && empire.DominantRace != null && empire.DominantRace.CriticalResources != null)
                {
                    ResourceList resourceList = empire.DominantRace.CriticalResources.ResolveResources();
                    for (int l = 0; l < resourceList.Count; l++)
                    {
                        Resource resource = resourceList[l];
                        if (resource != null)
                        {
                            int amount = Rnd.Next(300, 500);
                            Cargo cargo4 = new Cargo(resource, amount, empire);
                            habitat.Cargo.Add(cargo4);
                        }
                    }
                }
                for (int m = 0; m < habitat.Resources.Count; m++)
                {
                    HabitatResource habitatResource = habitat.Resources[m];
                    if (habitatResource != null)
                    {
                        Cargo cargo5 = new Cargo(new Resource(habitatResource.ResourceID), (int)(num * num2), empire);
                        habitat.Cargo.Add(cargo5);
                    }
                }
            }
            return val;
        }

        public void CreatePirateMiningStations(Galaxy galaxy, Empire empire, int count, bool allowEmpiresToStartInSameSystem)
        {
            int num = 0;
            empire.ResourceTargets = empire.IdentifyResourceCentres(galaxy);
            int num2 = 0;
            for (int i = 0; i < ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                ResourceDefinition resourceDefinition = ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i];
                if (resourceDefinition != null)
                {
                    num2 = 0;
                    while (num < count && CreateMiningStation(galaxy, empire.CheckResourceSupplyMeetsExpected(new Resource(resourceDefinition.ResourceID)), empire, allowEmpiresToStartInSameSystem) && num2 < 50)
                    {
                        num++;
                        num2++;
                    }
                }
            }
            num2 = 0;
            while (ConditionCheckLimit(empire.ResourceTargets.Count > 0 && num < count, 50, ref num2))
            {
                if (CreateMiningStation(galaxy, empire.ResourceTargets[0].Habitat, empire, allowEmpiresToStartInSameSystem))
                {
                    num++;
                }
            }
        }

        public void CreateMiningStations(Galaxy galaxy, Empire empire, bool allowEmpiresToStartInSameSystem)
        {
            int val = (int)((double)empire.Colonies.Count * 1.5);
            int num = 0;
            if (galaxy.StartingAge == 0 && empire.Colonies.Count == 1)
            {
                val = 6;
            }
            val = Math.Max(6, val);
            empire.ResourceTargets = empire.IdentifyResourceCentres(galaxy);
            int num2 = 0;
            for (int i = 0; i < galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; i++)
            {
                num2 = 0;
                Resource resource = new Resource(galaxy.ResourceSystem.StrategicResourcesOrderedByRelativeImportance[i].ResourceID);
                while (num < val && CreateMiningStation(galaxy, empire.CheckResourceSupplyMeetsExpected(resource), empire, allowEmpiresToStartInSameSystem) && num2 < 50)
                {
                    num++;
                    num2++;
                }
            }
            num2 = 0;
            while (ConditionCheckLimit(empire.ResourceTargets.Count > 0 && num < val, 50, ref num2))
            {
                if (CreateMiningStation(galaxy, empire.ResourceTargets[0].Habitat, empire, allowEmpiresToStartInSameSystem))
                {
                    num++;
                }
            }
        }

        private bool CreateMiningStation(Galaxy galaxy, Habitat habitat, Empire empire, bool allowEmpiresToStartInSameSystem)
        {
            if (habitat != null)
            {
                Habitat systemStar = DetermineHabitatSystemStar(habitat);
                bool disputed = false;
                Empire empire2 = galaxy.CheckSystemOwnership(systemStar, out disputed);
                if ((allowEmpiresToStartInSameSystem || empire2 == null || empire2 == empire || disputed) && galaxy.CheckEmpireTerritoryCanBuildAtHabitat(empire, habitat) && galaxy.DetermineMiningStationAtHabitatForEmpire(habitat, empire) == null && habitat.Empire == null)
                {
                    Design design = null;
                    if (habitat.Resources.ContainsGroup(ResourceGroup.Gas))
                    {
                        design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.GasMiningStation);
                    }
                    if (habitat.Resources.ContainsGroup(ResourceGroup.Mineral))
                    {
                        design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningStation);
                    }
                    if (design != null)
                    {
                        galaxy.SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
                        bool flag = false;
                        if (habitat.BasesAtHabitat != null && habitat.BasesAtHabitat.Count > 0)
                        {
                            flag = true;
                        }
                        if (!flag)
                        {
                            design.BuildCount++;
                            double purchasePrice = design.CalculateCurrentPurchasePrice(galaxy);
                            string name = galaxy.GenerateBuiltObjectName(design, habitat);
                            BuiltObject builtObject = new BuiltObject(design, name, galaxy, fullyBuilt: true);
                            builtObject.PurchasePrice = purchasePrice;
                            builtObject.ParentHabitat = habitat;
                            builtObject.ParentOffsetX = x;
                            builtObject.ParentOffsetY = y;
                            builtObject.Heading = galaxy.SelectRandomHeading();
                            builtObject.TargetHeading = builtObject.Heading;
                            builtObject.ReDefine();
                            builtObject.CurrentFuel = builtObject.FuelCapacity;
                            builtObject.CurrentShields = builtObject.ShieldsCapacity;
                            builtObject.NearestSystemStar = DetermineHabitatSystemStar(habitat);
                            empire.AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: false, isStateOwned: false, (int)builtObject.ParentOffsetX, (int)builtObject.ParentOffsetY);
                            if ((habitat == null || habitat.Empire != empire) && builtObject.Cargo != null)
                            {
                                CargoList cargoList = ResolveRetrofitResourcesForBase(empire);
                                for (int i = 0; i < cargoList.Count; i++)
                                {
                                    builtObject.Cargo.Add(cargoList[i]);
                                }
                            }
                            return true;
                        }
                    }
                }
                int num = empire.ResourceTargets.IndexOf(habitat);
                if (num >= 0)
                {
                    empire.ResourceTargets.RemoveAt(num);
                }
            }
            return false;
        }

        public void SetLuxuryResourcesAtColonies(Galaxy galaxy, Empire empire)
        {
            empire.IdentifyUnavailableLuxuryResources();
            ResourceList selfSuppliedLuxuryResources = empire.SelfSuppliedLuxuryResources;
            for (int i = 0; i < empire.Colonies.Count; i++)
            {
                Habitat habitat = empire.Colonies[i];
                long num = Math.Max(500000000L, habitat.Population.TotalAmount);
                int num2 = (int)(ColonyAnnualLuxuryResourceConsumptionRate * (double)num * ((double)habitat.Population.DominantRace.CautionLevel / 100.0) * 5.0);
                num2 = Math.Max(num2 * 3, MinimumLuxuryResourceReorderAmount);
                num2 = Math.Max(400, num2);
                int val = 3 + (int)Math.Sqrt(habitat.Population.TotalAmount / 100000000);
                val = Math.Min(val, Math.Min(10, selfSuppliedLuxuryResources.Count));
                for (int j = 0; j < val; j++)
                {
                    Resource resource = selfSuppliedLuxuryResources[j];
                    Cargo cargo = new Cargo(new Resource(resource.ResourceID), num2, empire);
                    habitat.Cargo.Add(cargo);
                }
                habitat.RecalculateDevelopmentLevelBaseline();
                habitat.SetDevelopmentLevel(val * 5);
            }
        }

        public void CreateStateShips(Galaxy galaxy, Empire empire)
        {
            foreach (ForceStructureProjection stateForceStructureProjection in empire.StateForceStructureProjections)
            {
                Design design = empire.Designs.FindNewestCanBuildFullEvaluate(stateForceStructureProjection.SubRole);
                if (design != null && stateForceStructureProjection.Amount > 0)
                {
                    int num = stateForceStructureProjection.Amount;
                    if (galaxy.StartingAge == 0 && empire.Colonies.Count == 1 && stateForceStructureProjection.SubRole != BuiltObjectSubRole.ConstructionShip)
                    {
                        num = Math.Max(1, num / 3);
                        empire.StateMoney += 1000.0;
                    }
                    for (int i = 0; i < num; i++)
                    {
                        double purchasePrice = design.CalculateCurrentPurchasePrice(galaxy);
                        design.BuildCount++;
                        BuiltObject builtObject = new BuiltObject(design, galaxy.GenerateBuiltObjectName(design), galaxy, fullyBuilt: true);
                        builtObject.PurchasePrice = purchasePrice;
                        builtObject.ReDefine();
                        builtObject.CurrentFuel = builtObject.FuelCapacity;
                        builtObject.CurrentShields = builtObject.ShieldsCapacity;
                        builtObject.Heading = galaxy.SelectRandomHeading();
                        builtObject.TargetHeading = builtObject.Heading;
                        galaxy.SelectRelativeParkingPoint(out var x, out var y);
                        Habitat habitat = empire.SelectRandomColony();
                        builtObject.Name = galaxy.GenerateBuiltObjectName(design, habitat);
                        builtObject.NearestSystemStar = DetermineHabitatSystemStar(habitat);
                        empire.AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: false, isStateOwned: true, (int)x, (int)y);
                    }
                }
            }
            empire.StateForceStructureProjections.Clear();
        }

        public void CreatePrivateShips(Galaxy galaxy, Empire empire)
        {
            foreach (ForceStructureProjection privateForceStructureProjection in empire.PrivateForceStructureProjections)
            {
                Design design = empire.Designs.FindNewestCanBuildFullEvaluate(privateForceStructureProjection.SubRole);
                if (design == null)
                {
                    continue;
                }
                switch (privateForceStructureProjection.SubRole)
                {
                    case BuiltObjectSubRole.SmallFreighter:
                    case BuiltObjectSubRole.MediumFreighter:
                    case BuiltObjectSubRole.LargeFreighter:
                        privateForceStructureProjection.Amount = (int)((double)privateForceStructureProjection.Amount * 0.6);
                        break;
                }
                if (privateForceStructureProjection.Amount > 0)
                {
                    for (int i = 0; i < privateForceStructureProjection.Amount; i++)
                    {
                        double purchasePrice = design.CalculateCurrentPurchasePrice(galaxy);
                        design.BuildCount++;
                        BuiltObject builtObject = new BuiltObject(design, galaxy.GenerateBuiltObjectName(design), galaxy, fullyBuilt: true);
                        builtObject.PurchasePrice = purchasePrice;
                        builtObject.ReDefine();
                        builtObject.CurrentFuel = builtObject.FuelCapacity;
                        builtObject.CurrentShields = builtObject.ShieldsCapacity;
                        builtObject.Heading = galaxy.SelectRandomHeading();
                        builtObject.TargetHeading = builtObject.Heading;
                        galaxy.SelectRelativeParkingPoint(out var x, out var y);
                        Habitat habitat = empire.SelectRandomColony();
                        builtObject.Name = galaxy.GenerateBuiltObjectName(design, habitat);
                        builtObject.NearestSystemStar = DetermineHabitatSystemStar(habitat);
                        empire.AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: false, isStateOwned: false, (int)x, (int)y);
                    }
                }
            }
            empire.PrivateForceStructureProjections.Clear();
        }

        public void FillShipsWithTroops(Galaxy galaxy, Empire empire)
        {
            int troopStrength = empire.DominantRace.TroopStrength;
            foreach (BuiltObject builtObject in empire.BuiltObjects)
            {
                if (builtObject.SubRole == BuiltObjectSubRole.TroopTransport)
                {
                    int num = Rnd.Next(1, 9) * 100;
                    int iterationCount = 0;
                    while (ConditionCheckLimit(builtObject.Troops != null && builtObject.TroopCapacityRemaining >= num, 50, ref iterationCount))
                    {
                        Troop troop = GenerateNewTroop(empire.GenerateTroopDescription(), TroopType.Infantry, troopStrength, empire, empire.DominantRace);
                        troop.MaintenanceMultiplier = CalculateTroopMaintenanceMultiplier(empire.DominantRace);
                        troop.PictureRef = empire.DominantRace.PictureRef;
                        troop.BuiltObject = builtObject;
                        builtObject.Troops.Add(troop);
                        empire.Troops.Add(troop);
                    }
                }
                else if (Rnd.Next(0, 2) == 1)
                {
                    int num2 = Rnd.Next(1, 4) * 100;
                    int iterationCount2 = 0;
                    while (ConditionCheckLimit(builtObject.Troops != null && builtObject.TroopCapacityRemaining >= num2, 50, ref iterationCount2))
                    {
                        Troop troop2 = GenerateNewTroop(empire.GenerateTroopDescription(), TroopType.Infantry, troopStrength, empire, empire.DominantRace);
                        troop2.MaintenanceMultiplier = CalculateTroopMaintenanceMultiplier(empire.DominantRace);
                        troop2.PictureRef = empire.DominantRace.PictureRef;
                        troop2.BuiltObject = builtObject;
                        builtObject.Troops.Add(troop2);
                        empire.Troops.Add(troop2);
                    }
                }
            }
        }

        public void CreateResearchStations(Galaxy galaxy, Empire empire, bool allowEmpiresToStartInSameSystem)
        {
            int num = 1 + (int)((double)empire.Colonies.Count * 0.35);
            int num2 = 0;
            if (empire.ResearchHabitats.Count > 0 && num > 0)
            {
                int num3 = 0;
                Design design = null;
                int num4 = empire.ResearchHabitats.Count / num;
                int num5 = 0;
                while (design == null && num5 < empire.ResearchHabitats.Count && num5 < 200)
                {
                    num5++;
                    int num6 = 0;
                    while (num3 >= empire.ResearchHabitats.Count && num6 < 10)
                    {
                        num3 -= empire.ResearchHabitats.Count;
                    }
                    Habitat habitat = empire.ResearchHabitats[num3];
                    bool disputed = false;
                    Empire empire2 = galaxy.CheckSystemOwnership(galaxy.Systems[habitat.SystemIndex].SystemStar, out disputed);
                    if ((allowEmpiresToStartInSameSystem || empire2 == null || empire2 == empire || disputed) && galaxy.CheckEmpireTerritoryCanBuildAtHabitat(empire, habitat) && galaxy.DetermineMiningStationAtHabitatForEmpire(habitat, empire) == null && galaxy.DetermineNonMiningBaseAtHabitat(habitat) == null && (habitat.Empire == null || habitat.Empire == galaxy.IndependentEmpire))
                    {
                        _ = string.Empty;
                        design = empire.AnalyzeNewResearchFacilities(out var weaponsResearchStation, out var energyResearchStation, out var highTechResearchStation);
                        switch (habitat.ResearchBonusIndustry)
                        {
                            case IndustryType.Weapon:
                                design = weaponsResearchStation;
                                break;
                            case IndustryType.Energy:
                                design = energyResearchStation;
                                break;
                            case IndustryType.HighTech:
                                design = highTechResearchStation;
                                break;
                        }
                        if (design != null)
                        {
                            if (design == empire.EnergyResearchStation)
                            {
                                TextResolver.GetText("Energy Research Station");
                            }
                            else if (design == empire.HighTechResearchStation)
                            {
                                TextResolver.GetText("High Tech Research Station");
                            }
                            else if (design == empire.WeaponsResearchStation)
                            {
                                TextResolver.GetText("Weapons Research Station");
                            }
                        }
                        if (design != null)
                        {
                            double x;
                            double y;
                            if (habitat.Category == HabitatCategoryType.Star)
                            {
                                double num7 = 0.0;
                                Habitat habitat2 = null;
                                foreach (HabitatList asteroidField in galaxy.AsteroidFields)
                                {
                                    if (asteroidField.Count <= 0 || asteroidField[0].Parent != habitat)
                                    {
                                        continue;
                                    }
                                    int num8 = 0;
                                    while (habitat2 == null && num8 < 20)
                                    {
                                        habitat2 = asteroidField[Rnd.Next(0, asteroidField.Count)];
                                        BuiltObject builtObject = galaxy.FindNearestBuiltObject((int)habitat2.Xpos, (int)habitat2.Ypos, BuiltObjectRole.Base);
                                        if (builtObject != null)
                                        {
                                            double num9 = galaxy.CalculateDistance(habitat2.Xpos, habitat2.Ypos, builtObject.Xpos, builtObject.Ypos);
                                            if (num9 < 200.0)
                                            {
                                                habitat2 = null;
                                            }
                                        }
                                        num8++;
                                    }
                                }
                                if (habitat2 != null)
                                {
                                    habitat = habitat2;
                                    galaxy.SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                                }
                                else
                                {
                                    num7 = habitat.Diameter;
                                    if (habitat.Type == HabitatType.BlackHole)
                                    {
                                        num7 = (double)habitat.Diameter * 0.7;
                                    }
                                    else if (habitat.Type == HabitatType.SuperNova)
                                    {
                                        num7 = (double)habitat.Diameter * 0.1;
                                    }
                                    else if (habitat.Type == HabitatType.Neutron)
                                    {
                                        num7 = (double)habitat.Diameter * 2.0;
                                    }
                                    galaxy.SelectRelativeParkingPoint(num7, out x, out y);
                                }
                            }
                            else
                            {
                                galaxy.SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                            }
                            BuiltObject builtObject2 = galaxy.FindNearestBuiltObject((int)(habitat.Xpos + x), (int)(habitat.Ypos + y), BuiltObjectRole.Base);
                            double num10 = double.MaxValue;
                            if (builtObject2 != null)
                            {
                                num10 = galaxy.CalculateDistance(habitat.Xpos + x, habitat.Ypos + y, builtObject2.Xpos, builtObject2.Ypos);
                            }
                            int num11 = 0;
                            int iterationCount = 0;
                            while (ConditionCheckLimit(num10 < (double)MinimumDistanceBetweenBases, 50, ref iterationCount))
                            {
                                galaxy.SelectRelativeHabitatSurfacePoint(habitat, out x, out y);
                                builtObject2 = galaxy.FindNearestBuiltObject((int)(habitat.Xpos + x), (int)(habitat.Ypos + y), BuiltObjectRole.Base);
                                if (builtObject2 != null)
                                {
                                    num10 = galaxy.CalculateDistance(habitat.Xpos + x, habitat.Ypos + y, builtObject2.Xpos, builtObject2.Ypos);
                                    num11++;
                                    if (num11 > 5)
                                    {
                                        break;
                                    }
                                }
                                else
                                {
                                    num10 = double.MaxValue;
                                }
                            }
                            if (num10 >= (double)MinimumDistanceBetweenBases)
                            {
                                design.BuildCount++;
                                double purchasePrice = design.CalculateCurrentPurchasePrice(galaxy);
                                string name = galaxy.GenerateBuiltObjectName(design, habitat);
                                BuiltObject builtObject3 = new BuiltObject(design, name, galaxy, fullyBuilt: true);
                                builtObject3.PurchasePrice = purchasePrice;
                                builtObject3.ParentHabitat = habitat;
                                builtObject3.ParentOffsetX = x;
                                builtObject3.ParentOffsetY = y;
                                builtObject3.Heading = galaxy.SelectRandomHeading();
                                builtObject3.TargetHeading = builtObject3.Heading;
                                builtObject3.ReDefine();
                                builtObject3.CurrentFuel = builtObject3.FuelCapacity;
                                builtObject3.CurrentShields = builtObject3.ShieldsCapacity;
                                builtObject3.NearestSystemStar = DetermineHabitatSystemStar(habitat);
                                empire.AddBuiltObjectToGalaxy(builtObject3, habitat, offsetLocationFromParent: false, isStateOwned: true, (int)builtObject3.ParentOffsetX, (int)builtObject3.ParentOffsetY);
                                if ((habitat == null || habitat.Empire != empire) && builtObject3.Cargo != null)
                                {
                                    CargoList cargoList = ResolveRetrofitResourcesForBase(empire);
                                    for (int i = 0; i < cargoList.Count; i++)
                                    {
                                        builtObject3.Cargo.Add(cargoList[i]);
                                    }
                                }
                                num2++;
                                num3 += num4;
                                int num12 = 0;
                                while (num3 >= empire.ResearchHabitats.Count && num12 < 10)
                                {
                                    num3 -= empire.ResearchHabitats.Count;
                                }
                                if (num2 >= num)
                                {
                                    break;
                                }
                            }
                            design = null;
                        }
                    }
                    num3++;
                }
            }
            empire.DetermineResearchStationLocation(allowOccupiedSystems: false, mustHaveBuildableResearchStationDesign: true);
        }

        public void CreateSpacePorts(Galaxy galaxy, Empire empire, HabitatList spacePortColonies)
        {
            foreach (Habitat spacePortColony in spacePortColonies)
            {
                BuildSpacePortAtColony(galaxy, empire, spacePortColony);
            }
        }

        private void BuildSpacePortAtColony(Galaxy galaxy, Empire empire, Habitat colony)
        {
            Design design = null;
            long num = HabitatLargeSpacePortPopulationRequirement;
            long num2 = HabitatMediumSpacePortPopulationRequirement;
            long num3 = HabitatSmallSpacePortPopulationRequirement;
            if (empire != null && empire.Policy != null)
            {
                num = (long)empire.Policy.ConstructionSpaceportLargeColonyPopulationThreshold * 1000000L;
                num2 = (long)empire.Policy.ConstructionSpaceportMediumColonyPopulationThreshold * 1000000L;
                num3 = (long)empire.Policy.ConstructionSpaceportSmallColonyPopulationThreshold * 1000000L;
            }
            if (colony.Population.TotalAmount > num)
            {
                design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.LargeSpacePort);
            }
            else if (colony.Population.TotalAmount > num2)
            {
                design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
            }
            else if (colony.Population.TotalAmount > num3)
            {
                design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.SmallSpacePort);
            }
            if (empire.Colonies.Count == 1 && design != null && design.SubRole == BuiltObjectSubRole.LargeSpacePort)
            {
                design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.MediumSpacePort);
            }
            if (design != null)
            {
                design.BuildCount++;
                double purchasePrice = design.CalculateCurrentPurchasePrice(galaxy);
                string name = galaxy.GenerateBuiltObjectName(design, colony);
                BuiltObject builtObject = new BuiltObject(design, name, galaxy, fullyBuilt: true);
                builtObject.PurchasePrice = purchasePrice;
                builtObject.ParentHabitat = colony;
                double range = (double)(colony.Diameter / 6) + 15.0;
                galaxy.SelectRelativePoint(range, out var x, out var y);
                builtObject.ParentOffsetX = x;
                builtObject.ParentOffsetY = y;
                builtObject.Heading = galaxy.SelectRandomHeading();
                builtObject.TargetHeading = builtObject.Heading;
                builtObject.ReDefine();
                builtObject.CurrentFuel = builtObject.FuelCapacity;
                builtObject.CurrentShields = builtObject.ShieldsCapacity;
                builtObject.NearestSystemStar = DetermineHabitatSystemStar(colony);
                empire.AddBuiltObjectToGalaxy(builtObject, colony, offsetLocationFromParent: false, isStateOwned: true, (int)builtObject.ParentOffsetX, (int)builtObject.ParentOffsetY);
            }
        }

        public EmpireList ResolveEmpiresOfRaceFamily(byte raceFamilyId)
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < Empires.Count; i++)
            {
                if (Empires[i].Active && Empires[i].PirateEmpireBaseHabitat == null && Empires[i].DominantRace != null && Empires[i].DominantRace.FamilyId == raceFamilyId)
                {
                    empireList.Add(Empires[i]);
                }
            }
            return empireList;
        }

        public Empire FindNearestEmpireCapital(double x, double y, EmpireList empiresToExclude)
        {
            Empire result = null;
            double num = double.MaxValue;
            for (int i = 0; i < Empires.Count; i++)
            {
                if (Empires[i].Active && Empires[i].PirateEmpireBaseHabitat == null && (empiresToExclude == null || !empiresToExclude.Contains(Empires[i])) && Empires[i].Capital != null)
                {
                    double num2 = CalculateDistance(x, y, Empires[i].Capital.Xpos, Empires[i].Capital.Ypos);
                    if (num2 < num)
                    {
                        result = Empires[i];
                        num = num2;
                    }
                }
            }
            return result;
        }

        public void CheckAndFixGameFromStaticThemeDefinitions()
        {
            CheckAndFixEmpireFromStaticThemeDefinitions(IndependentEmpire);
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                CheckAndFixEmpireFromStaticThemeDefinitions(empire);
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                CheckAndFixEmpireFromStaticThemeDefinitions(empire2);
            }
        }

        private void CheckAndFixEmpireFromStaticThemeDefinitions(Empire empire)
        {
            if (empire != null)
            {
                if (empire.Research != null)
                {
                    empire.Research.MergeNewDefinitions(ResearchNodeDefinitionsStatic, empire.DominantRace);
                }
                if (empire.Designs != null)
                {
                    empire.Designs.StripInvalidComponents();
                }
                if (empire.BuiltObjects != null)
                {
                    empire.BuiltObjects.StripInvalidComponents();
                }
                if (empire.PrivateBuiltObjects != null)
                {
                    empire.PrivateBuiltObjects.StripInvalidComponents();
                }
                if (empire.Colonies != null)
                {
                    empire.Colonies.StripInvalidFacilities();
                }
            }
        }

        public void GenerateShakturi(Habitat startingColony)
        {
            if (NextEmpireID >= MaximumEmpireCount)
            {
                return;
            }
            Race race = Races["Shakturi"];
            if (race == null)
            {
                return;
            }
            int age = 2;
            Race race2 = (ShakturiOriginalRace = new Race(race.Name, race.PictureRef, race.ReproductiveRate, race.IntelligenceLevel, race.AggressionLevel, race.CautionLevel, race.FriendlinessLevel, race.LoyaltyLevel, race.DesignPictureFamilyIndex, race.DesignNameIndex, race.TroopName));
            ShakturiActualRace = race;
            race.AggressionLevel = 75;
            race.CautionLevel = 105;
            race.FriendlinessLevel = 125;
            race.IntelligenceLevel = 128;
            race.LoyaltyLevel = 100;
            race.Name = "Erutkah";
            race.TroopName = "Erutkah Defender";
            StoryShakturiEnrageTimer = CurrentStarDate + Rnd.Next(7000, 10000) * RealSecondsInGalacticYear;
            string text = TextResolver.GetText("Normal");
            HabitatType capitalHabitatType = HabitatType.Undefined;
            double homeSystemFactor = 0.0;
            ResolveHomeSystem(text, out capitalHabitatType, out homeSystemFactor);
            double expansion = 0.0;
            string empireName = "Erutkah Refugees";
            int governmentId = 0;
            GovernmentAttributes firstByAvailability = Governments.GetFirstByAvailability(3);
            if (firstByAvailability != null)
            {
                governmentId = firstByAvailability.GovernmentId;
            }
            double actualTechLevel = 0.0;
            Empire empire = GenerateEmpire(this, isPlayerEmpire: false, empireName, startingColony, race, race.DesignPictureFamilyIndex, governmentId, homeSystemFactor, text, age, 7.0, 1.0, out expansion, null, null, out actualTechLevel, "Shakturi");
            startingColony.BaseQuality = 1f;
            Ruin ruin = new Ruin("Palace of Eternal Darkness", 12, 0.5, 0.0, 0.0, 0, 0, 0);
            ruin.BonusWealth = 2.0;
            ruin.PlayerEmpireEncountered = true;
            startingColony.Ruin = ruin;
            Habitat habitat = DetermineHabitatSystemStar(ShakturiTriggerHabitat);
            SystemVisibilityStatus status = empire.SystemVisibility[habitat.SystemIndex].Status;
            if (status == SystemVisibilityStatus.Explored)
            {
                empire.SystemVisibility[habitat.SystemIndex].Status = SystemVisibilityStatus.Unexplored;
            }
            if (empire.Policy != null)
            {
                empire.Policy.ConstructionMilitary = 2;
            }
            empire.RecalculateEmpirePopulation();
            empire.CheckColoniesForBaseFacilities();
            empire.RecalculateEmpireCorruption();
            empire.LastLongTouch = CurrentDateTime.Subtract(new TimeSpan(0, 0, (int)empire.LongProcessingInterval + 1));
            empire.LastIntermediateTouch = empire.LastLongTouch;
            empire.LastPeriodicTouch = empire.LastLongTouch;
            empire.LastRegularTouch = empire.LastLongTouch;
            empire.LastShortTouch = empire.LastLongTouch;
            empire.LastHugeTouch = empire.LastLongTouch;
            int newSpacePortAmount = 1 + (int)((double)empire.Colonies.Count / 3.5);
            HabitatList habitatList = empire.DetermineNewSpacePortLocations(empire.Colonies, newSpacePortAmount, excludeColoniesWithEnemiesPresent: false);
            CreateSpacePorts(this, empire, habitatList);
            foreach (Habitat item in habitatList)
            {
                SetColonyResources(this, item, empire, hasSpacePort: true);
            }
            empire.CheckColoniesForBaseFacilities();
            CreateMiningStations(this, empire, allowEmpiresToStartInSameSystem: true);
            SetLuxuryResourcesAtColonies(this, empire);
            for (int i = 0; i < 1; i++)
            {
                empire.ReviewTaxes();
            }
            empire.RecalculateEmpirePopulation();
            foreach (Habitat colony in empire.Colonies)
            {
                empire.ProcessColonyTroops(colony, null, 0.0, 100.0, 100.0);
                empire.ProcessColonyTroops(colony, null, 0.0, 300.0, 300.0);
                empire.ProcessColonyTroops(colony, null, 0.0, 300.0, 300.0);
                colony.RecalculateAnnualTaxRevenue();
            }
            empire.ReviewTaxes();
            foreach (Habitat colony2 in empire.Colonies)
            {
                colony2.RecalculateAnnualTaxRevenue();
            }
            empire.DetermineResearchStationLocation(allowOccupiedSystems: false, mustHaveBuildableResearchStationDesign: true);
            CreateResearchStations(this, empire, allowEmpiresToStartInSameSystem: true);
            CreateStateShips(this, empire);
            CreatePrivateShips(this, empire);
            FillShipsWithTroops(this, empire);
            empire.AssignMissionsToBuiltObjectList(empire.BuiltObjects, atWar: false, null);
            empire.AssignMissionsToBuiltObjectList(empire.PrivateBuiltObjects, atWar: false, null);
            DoTasks(gameFinished: false, PlayerEmpire, null, null, null);
            for (int j = 0; j < Empires.Count; j++)
            {
                Empire empire2 = Empires[j];
                if (empire2 != empire)
                {
                    EmpireEvaluation empireEvaluation = empire.ObtainEmpireEvaluation(empire2);
                    if (empireEvaluation != null)
                    {
                        empireEvaluation.Bias = Math.Max(0.0, empireEvaluation.Bias);
                    }
                }
            }
            for (int k = 0; k < Empires.Count; k++)
            {
                Empire empire3 = Empires[k];
                if (empire3 != empire)
                {
                    EmpireEvaluation empireEvaluation2 = empire3.ObtainEmpireEvaluation(empire);
                    if (empireEvaluation2 != null)
                    {
                        empireEvaluation2.Bias = Math.Max(0.0, empireEvaluation2.Bias);
                    }
                }
            }
        }

        public void GenerateShakturiMilitaryConvoy(Empire shakturiEmpire)
        {
            GenerateMilitaryConvoy(shakturiEmpire, 10, 0.2f);
        }

        public void GenerateMilitaryConvoy(Empire empire, int size, float supportCostFactor)
        {
            Habitat habitat = empire.Capital;
            if (empire.PirateEmpireBaseHabitat != null)
            {
                habitat = empire.PirateEmpireBaseHabitat;
            }
            if (habitat == null)
            {
                return;
            }
            Point point = FindNearestGalaxyEdgeCoords(habitat.Xpos, habitat.Ypos);
            double num = point.X;
            double num2 = point.Y;
            for (int i = 0; i < size; i++)
            {
                Design design = null;
                int num3 = Rnd.Next(0, 10);
                int num4 = 0;
                while (design == null && num4 < 50)
                {
                    switch (num3)
                    {
                        case 0:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Escort);
                            break;
                        case 1:
                        case 2:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Frigate);
                            break;
                        case 3:
                        case 4:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Destroyer);
                            break;
                        case 5:
                        case 6:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Cruiser);
                            break;
                        case 7:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.CapitalShip);
                            break;
                        case 8:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.TroopTransport);
                            break;
                        case 9:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Carrier);
                            break;
                    }
                    num4++;
                }
                if (design != null)
                {
                    SelectRelativeParkingPoint(out var x, out var y);
                    BuiltObject builtObject = empire.GenerateNewBuiltObject(design, null, num + x, num2 + y);
                    if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip)
                    {
                        builtObject.Name = "Shakturi World Ship";
                        builtObject.NativeRace = empire.DominantRace;
                    }
                    empire.TakeOwnershipOfBuiltObject(builtObject, empire, setDesignAsObsolete: false);
                    builtObject.SupportCostFactor = supportCostFactor;
                    builtObject.IsAutoControlled = true;
                    builtObject.AssignMission(BuiltObjectMissionType.Move, habitat, null, BuiltObjectMissionPriority.Normal);
                }
            }
        }

        public void GenerateShakturiColonyConvoy(Empire shakturiEmpire)
        {
            GenerateCivilianConvoy(shakturiEmpire, 10, 0.2f, "Erutkah World Ship");
        }

        public void GenerateCivilianConvoy(Empire empire, int size, float supportCostFactor, string colonyShipNameOverride)
        {
            Habitat habitat = empire.Capital;
            if (empire.PirateEmpireBaseHabitat != null)
            {
                habitat = empire.PirateEmpireBaseHabitat;
            }
            if (habitat == null)
            {
                return;
            }
            Point point = FindNearestGalaxyEdgeCoords(habitat.Xpos, habitat.Ypos);
            double num = point.X;
            double num2 = point.Y;
            for (int i = 0; i < size; i++)
            {
                Design design = null;
                int num3 = Rnd.Next(0, 10);
                int num4 = 0;
                while (design == null && num4 < 50)
                {
                    switch (num3)
                    {
                        case 0:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ExplorationShip);
                            break;
                        case 1:
                        case 2:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
                            break;
                        case 3:
                        case 4:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.PassengerShip);
                            break;
                        case 5:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ConstructionShip);
                            break;
                        case 6:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.GasMiningShip);
                            break;
                        case 7:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.MiningShip);
                            break;
                        case 8:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Escort);
                            break;
                        case 9:
                            design = empire.Designs.FindNewestCanBuild(BuiltObjectSubRole.SmallFreighter);
                            break;
                    }
                    num4++;
                }
                if (design == null)
                {
                    continue;
                }
                SelectRelativeParkingPoint(out var x, out var y);
                BuiltObject builtObject = empire.GenerateNewBuiltObject(design, null, num + x, num2 + y);
                if (builtObject.SubRole == BuiltObjectSubRole.ColonyShip)
                {
                    if (!string.IsNullOrEmpty(colonyShipNameOverride))
                    {
                        builtObject.Name = colonyShipNameOverride;
                    }
                    builtObject.NativeRace = empire.DominantRace;
                }
                empire.TakeOwnershipOfBuiltObject(builtObject, empire, setDesignAsObsolete: false);
                builtObject.SupportCostFactor = supportCostFactor;
                builtObject.IsAutoControlled = true;
                builtObject.AssignMission(BuiltObjectMissionType.Move, habitat, null, BuiltObjectMissionPriority.Normal);
            }
        }

        public Empire IdentifyMechanoidEmpire()
        {
            Empire result = null;
            for (int i = 0; i < Empires.Count; i++)
            {
                if (Empires[i].PirateEmpireBaseHabitat == null && Empires[i].DominantRace != null && Empires[i].DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
                {
                    result = Empires[i];
                    break;
                }
            }
            return result;
        }

        public Empire IdentifyShakturiEmpire()
        {
            Empire result = null;
            if (ShakturiActualRace != null)
            {
                for (int i = 0; i < Empires.Count; i++)
                {
                    if (Empires[i].PirateEmpireBaseHabitat == null && Empires[i].DominantRace != null && Empires[i].DominantRace == ShakturiActualRace)
                    {
                        result = Empires[i];
                        break;
                    }
                }
            }
            return result;
        }

        public void GenerateShakturiAggression(Empire shakturiEmpire)
        {
            if (shakturiEmpire == null || ShakturiOriginalRace == null)
            {
                return;
            }
            if (shakturiEmpire.DominantRace != null)
            {
                shakturiEmpire.DominantRace.AggressionLevel = ShakturiOriginalRace.AggressionLevel;
                shakturiEmpire.DominantRace.CautionLevel = ShakturiOriginalRace.CautionLevel;
                shakturiEmpire.DominantRace.FriendlinessLevel = ShakturiOriginalRace.FriendlinessLevel;
                shakturiEmpire.DominantRace.IntelligenceLevel = ShakturiOriginalRace.IntelligenceLevel;
                shakturiEmpire.DominantRace.LoyaltyLevel = ShakturiOriginalRace.LoyaltyLevel;
            }
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire == shakturiEmpire)
                {
                    continue;
                }
                EmpireEvaluation empireEvaluation = shakturiEmpire.ObtainEmpireEvaluation(empire);
                if (empire.DominantRace != null)
                {
                    if (RaceFamilies.GetIdsBySpecialFunctionCode(1).Contains(empire.DominantRace.FamilyId))
                    {
                        empireEvaluation.Bias = Math.Max(empireEvaluation.Bias, 40.0);
                    }
                    else if (RaceFamilies.GetIdsBySpecialFunctionCode(2).Contains(empire.DominantRace.FamilyId))
                    {
                        empireEvaluation.Bias = Math.Min(empireEvaluation.Bias, -30.0);
                    }
                }
            }
            for (int j = 0; j < Empires.Count; j++)
            {
                Empire empire2 = Empires[j];
                if (empire2 == shakturiEmpire)
                {
                    continue;
                }
                EmpireEvaluation empireEvaluation2 = empire2.ObtainEmpireEvaluation(shakturiEmpire);
                if (empire2.DominantRace != null)
                {
                    if (RaceFamilies.GetIdsBySpecialFunctionCode(1).Contains(empire2.DominantRace.FamilyId))
                    {
                        empireEvaluation2.Bias = Math.Max(empireEvaluation2.Bias, 40.0);
                    }
                    else if (RaceFamilies.GetIdsBySpecialFunctionCode(2).Contains(empire2.DominantRace.FamilyId))
                    {
                        empireEvaluation2.Bias = Math.Min(empireEvaluation2.Bias, -30.0);
                    }
                }
            }
            EmpirePolicy empirePolicy = (shakturiEmpire.Policy = LoadEmpirePolicy(ShakturiOriginalRace, isPirate: false));
            StoryShakturiEnraged = true;
        }

        public void GenerateShakturiInvasion(Empire shakturiEmpire, Empire mechanoidEmpire)
        {
            if (shakturiEmpire == null || mechanoidEmpire == null)
            {
                return;
            }
            Habitat parentHabitat = null;
            if (shakturiEmpire.Capital != null)
            {
                parentHabitat = shakturiEmpire.Capital;
            }
            else if (shakturiEmpire.Colonies.Count > 0)
            {
                parentHabitat = shakturiEmpire.Colonies[0];
            }
            if (shakturiEmpire.DominantRace != null)
            {
                shakturiEmpire.DominantRace.Name = ShakturiOriginalRace.Name;
                shakturiEmpire.DominantRace.TroopName = ShakturiOriginalRace.TroopName;
                shakturiEmpire.DominantRace.TroopNameArmored = ShakturiOriginalRace.TroopNameArmored;
                shakturiEmpire.DominantRace.TroopNameArtillery = ShakturiOriginalRace.TroopNameArtillery;
                shakturiEmpire.DominantRace.TroopNameSpecialForces = ShakturiOriginalRace.TroopNameSpecialForces;
            }
            shakturiEmpire.Name = "Shaktur Supremacy";
            int num = 1;
            num = ((StarCount >= 1000) ? 3 : ((StarCount < 700) ? 1 : 2));
            int num2 = num;
            Design design = GeneratePlanetDestroyerDesign();
            shakturiEmpire.Designs.Add(design);
            design.Empire = shakturiEmpire;
            string[] array = new string[4] { "Revenge of Shaktur", "Death of Worlds", "Dark Reaper", "Desolation of Utopia" };
            for (int i = 0; i < num2; i++)
            {
                BuiltObject builtObject = shakturiEmpire.GenerateNewBuiltObject(design, parentHabitat);
                builtObject.Name = array[i];
                builtObject.SupportCostFactor = 0.1f;
            }
            for (int j = 0; j < 10; j++)
            {
                Design design2 = null;
                int num3 = 0;
                switch (j)
                {
                    case 0:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Escort);
                        num3 = 5 * num;
                        break;
                    case 1:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Frigate);
                        num3 = 6 * num;
                        break;
                    case 2:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Destroyer);
                        num3 = 4 * num;
                        break;
                    case 3:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Cruiser);
                        num3 = 3 * num;
                        break;
                    case 4:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.CapitalShip);
                        num3 = 2 * num;
                        break;
                    case 5:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.TroopTransport);
                        num3 = 2 * num;
                        break;
                    case 6:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.Carrier);
                        num3 = 2 * num;
                        break;
                    case 7:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ResupplyShip);
                        num3 = num;
                        break;
                    case 8:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ExplorationShip);
                        num3 = 2 * num;
                        break;
                    case 9:
                        design2 = shakturiEmpire.Designs.FindNewestCanBuild(BuiltObjectSubRole.ColonyShip);
                        num3 = 2 * num;
                        break;
                }
                if (design2 == null || num3 <= 0)
                {
                    continue;
                }
                for (int k = 0; k < num3; k++)
                {
                    BuiltObject builtObject2 = shakturiEmpire.GenerateNewBuiltObject(design2, parentHabitat);
                    if (builtObject2.SubRole == BuiltObjectSubRole.ColonyShip)
                    {
                        builtObject2.Name = "Shakturi World Ship";
                        builtObject2.NativeRace = shakturiEmpire.DominantRace;
                    }
                    shakturiEmpire.TakeOwnershipOfBuiltObject(builtObject2, shakturiEmpire, setDesignAsObsolete: false);
                    builtObject2.SupportCostFactor = 0.2f;
                    builtObject2.IsAutoControlled = true;
                }
            }
            shakturiEmpire.TargetHabitat = mechanoidEmpire.Capital;
        }

        public BuiltObject GenerateDeliverancePlanetDestroyer()
        {
            Design design = GeneratePlanetDestroyerDesign(1.6);
            PlayerEmpire.Designs.Add(design);
            design.Empire = PlayerEmpire;
            BuiltObject builtObject = PlayerEmpire.GenerateNewBuiltObject(design, PlayerEmpire.Capital);
            builtObject.Name = "Deliverance";
            PlayerEmpire.TakeOwnershipOfBuiltObject(builtObject, PlayerEmpire, setDesignAsObsolete: false);
            builtObject.SupportCostFactor = 0.1f;
            builtObject.IsAutoControlled = false;
            return builtObject;
        }

        public void GenerateShakturiReturnTriggerRuins()
        {
            if (ShakturiTriggerHabitat != null)
            {
                return;
            }
            Ruin ruin = new Ruin("Beacon of Shaktur", 5, 0.05, 0.0, 0.0, 0, 0, 0);
            ruin.Type = RuinType.StoryEvent;
            ruin.StoryEventData = 1;
            Empire empire = null;
            for (int i = 0; i < Empires.Count; i++)
            {
                if (Empires[i].DominantRace != null && Empires[i].DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
                {
                    empire = Empires[i];
                }
            }
            double num = 0.0;
            double num2 = 0.0;
            if (PlayerEmpire != null && PlayerEmpire.Capital != null)
            {
                num = PlayerEmpire.Capital.Xpos;
                num2 = PlayerEmpire.Capital.Ypos;
            }
            else if (PlayerEmpire != null && PlayerEmpire.PirateEmpireBaseHabitat != null)
            {
                num = PlayerEmpire.PirateEmpireBaseHabitat.Xpos;
                num2 = PlayerEmpire.PirateEmpireBaseHabitat.Ypos;
            }
            Point point = Point.Empty;
            double num3 = 0.0;
            int num4 = 0;
            while (num3 < (double)SectorSize * 3.0 && num4 < 50)
            {
                point = FindNearestGalaxyEdgeCoordsMinimumRange(num, num2, (double)SectorSize * 2.0, (double)SectorSize * 2.0);
                num3 = CalculateDistance(point.X, point.Y, num, num2);
                if (num4 > 0 && empire != null && empire.Capital != null)
                {
                    num = empire.Capital.Xpos;
                    num2 = empire.Capital.Ypos;
                    num3 = CalculateDistance(point.X, point.Y, num, num2);
                }
                num4++;
            }
            Habitat habitat = FindLonelyHabitat(point.X, point.Y, HabitatType.Ice);
            if (habitat == null)
            {
                habitat = FindLonelyHabitatGalacticEdge(RuinType.Government);
            }
            if (habitat == null)
            {
                habitat = FindLonelyHabitat();
            }
            if (habitat == null)
            {
                habitat = FindNearestHabitat(0.0, 0.0, HabitatCategoryType.Moon);
            }
            if (habitat != null)
            {
                habitat.Ruin = ruin;
                ShakturiTriggerHabitat = habitat;
            }
        }

        public void CheckGenerateAncientHelpers()
        {
            if (!StoryReturnOfTheShakturiEnabled)
            {
                return;
            }
            Empire empire = IdentifyMechanoidEmpire();
            if (empire == null)
            {
                double startX = 0.0;
                double startY = 0.0;
                if (PlayerEmpire.Capital != null)
                {
                    startX = PlayerEmpire.Capital.Xpos;
                    startY = PlayerEmpire.Capital.Ypos;
                }
                else if (PlayerEmpire.PirateEmpireBaseHabitat != null)
                {
                    startX = PlayerEmpire.PirateEmpireBaseHabitat.Xpos;
                    startY = PlayerEmpire.PirateEmpireBaseHabitat.Ypos;
                }
                double x = 0.0;
                double y = 0.0;
                ObtainRandomGalaxyCoordinatesFromPoint(startX, startY, (double)SectorSize * 2.0, out x, out y);
                Habitat habitat = FindNearestHabitatUnoccupiedSystem(x, y, HabitatType.Continental);
                if (habitat == null)
                {
                    habitat = FindNearestHabitatUnoccupiedSystem(x, y, HabitatType.MarshySwamp);
                }
                if (habitat == null)
                {
                    habitat = FindNearestHabitatUnoccupiedSystem(x, y, HabitatType.Desert);
                }
                if (habitat == null)
                {
                    habitat = FindNearestHabitatUnoccupiedSystem(x, y, HabitatType.Ocean);
                }
                if (habitat == null)
                {
                    habitat = FindNearestHabitatUnoccupiedSystem(x, y, HabitatType.Ice);
                }
                if (habitat == null)
                {
                    habitat = FindNearestHabitatUnoccupiedSystem(x, y, HabitatType.Volcanic);
                }
                if (habitat == null)
                {
                    habitat = FindNearestHabitatUnoccupiedSystem(x, y, HabitatType.BarrenRock);
                }
                if (habitat.Population != null && habitat.Population.Count > 0)
                {
                    habitat.Population.Clear();
                    habitat.Population.RecalculateTotalAmount();
                }
                habitat.Name = "Utopia";
                GenerateAncientHelpers(habitat);
            }
        }

        public void GenerateAncientHelpers(Habitat homeColony)
        {
            if (NextEmpireID >= MaximumEmpireCount)
            {
                return;
            }
            Race race = Races["Mechanoid"];
            if (race == null)
            {
                return;
            }
            string text = TextResolver.GetText("Normal");
            HabitatType capitalHabitatType = HabitatType.Undefined;
            double homeSystemFactor = 0.0;
            ResolveHomeSystem(text, out capitalHabitatType, out homeSystemFactor);
            double expansion = 0.0;
            int governmentId = 0;
            GovernmentAttributes firstByAvailability = Governments.GetFirstByAvailability(2);
            if (firstByAvailability != null)
            {
                governmentId = firstByAvailability.GovernmentId;
            }
            Empire empire = GenerateEmpire(this, isPlayerEmpire: false, "Ancient Guardians", homeColony, race, race.DesignPictureFamilyIndex, governmentId, homeSystemFactor, text, 1, 7.0, 1.0, out expansion, null, null);
            if (empire.Policy != null)
            {
                empire.Policy.ColonyAllowFacilityCloningFacility = false;
                empire.Policy.ColonyAllowFacilityTroopTrainingCenter = false;
                empire.Policy.ConstructionMilitary = 1;
                empire.Policy.DiplomacyTradeSanctionsUseBlockades = false;
                empire.Policy.WarAttacksHarassEnemies = false;
            }
            homeColony.BaseQuality = 1f;
            for (int i = 0; i < Systems[homeColony.SystemIndex].Habitats.Count; i++)
            {
                Habitat habitat = Systems[homeColony.SystemIndex].Habitats[i];
                if (habitat == homeColony)
                {
                    continue;
                }
                if (habitat.Population != null && habitat.Population.TotalAmount > 0)
                {
                    habitat.ClearColony(null);
                }
                switch (habitat.Type)
                {
                    case HabitatType.Volcanic:
                    case HabitatType.Desert:
                    case HabitatType.MarshySwamp:
                    case HabitatType.Continental:
                    case HabitatType.Ocean:
                    case HabitatType.Ice:
                        if (habitat.Category == HabitatCategoryType.Planet || habitat.Category == HabitatCategoryType.Moon)
                        {
                            if (habitat.Ruin != null)
                            {
                                habitat.Ruin = null;
                            }
                            HabitatType type = HabitatType.BarrenRock;
                            int pictureRef = 0;
                            int landscapePictureRef = 0;
                            int diameter = 0;
                            int minOrbitDistance = 0;
                            int maxOrbitDistance = 0;
                            SelectBarrenRockPlanet(out type, out pictureRef, out diameter, out minOrbitDistance, out maxOrbitDistance, out landscapePictureRef);
                            habitat.Type = type;
                            habitat.Diameter = (short)diameter;
                            habitat.PictureRef = (short)pictureRef;
                            habitat.LandscapePictureRef = (short)landscapePictureRef;
                            habitat.BaseQuality = SelectHabitatQuality(habitat, (float)ColonyPrevalence);
                            if (habitat.Resources != null)
                            {
                                habitat.Resources.Clear();
                            }
                            SelectResources(habitat);
                        }
                        break;
                }
            }
            Ruin ruin = new Ruin("Ancient Galactic Archives", 11, 0.5, -30.0, -30.0, 0, 0, 0);
            ruin.BonusWealth = 1.0;
            ruin.PlayerEmpireEncountered = true;
            homeColony.Ruin = ruin;
            if (homeColony.Resources == null)
            {
                homeColony.Resources = new HabitatResourceList();
            }
            ResourceDefinition byName = ResourceSystem.Resources.GetByName("Loros Fruit");
            if (byName != null)
            {
                if (homeColony.Resources.Count < 5)
                {
                    homeColony.Resources.Add(new HabitatResource(byName.ResourceID, Rnd.Next(500, 600)));
                }
                else
                {
                    homeColony.Resources[4] = new HabitatResource(byName.ResourceID, Rnd.Next(500, 600));
                }
            }
            empire.DefendHabitat = homeColony;
            SetEmpireExplorationAmount(empire, (int)((double)StarCount * 0.05));
            CreateSpacePorts(this, empire, empire.Colonies);
            CreateMiningStations(this, empire, allowEmpiresToStartInSameSystem: false);
            CreateStateShips(this, empire);
            CreatePrivateShips(this, empire);
            FillShipsWithTroops(this, empire);
            empire.AssignMissionsToBuiltObjectList(empire.BuiltObjects, atWar: false, null);
            empire.AssignMissionsToBuiltObjectList(empire.PrivateBuiltObjects, atWar: false, null);
            DoTasks(gameFinished: false, PlayerEmpire, null, null, null);
        }

        public ShipGroup GenerateFreedomAlliance(bool includePlayer, ref Game game)
        {
            ShipGroup shipGroup = null;
            Empire empire = null;
            Empire empire2 = null;
            EmpireList empireList = new EmpireList();
            if (includePlayer)
            {
                empireList.Add(PlayerEmpire);
            }
            Empire empire3 = null;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire4 = Empires[i];
                if (empire4 == PlayerEmpire)
                {
                    continue;
                }
                string text = ResolveRaceFamilyDescription(empire4.DominantRace.FamilyId);
                if ((empire4.DominantRace != null && text.ToLower(CultureInfo.InvariantCulture) == "humanoid") || (empire4.DominantRace != null && empire4.DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "ackdarian"))
                {
                    if (empire3 == null || empire3.MilitaryPotency < empire4.MilitaryPotency)
                    {
                        empire3 = empire4;
                    }
                    empireList.Add(empire4);
                }
                else if (empire4.DominantRace != null && empire4.DominantRace.Name.ToLower(CultureInfo.InvariantCulture) == "mechanoid")
                {
                    empire2 = empire4;
                    empireList.Add(empire4);
                }
                if (empire4.DominantRace != null && empire4.DominantRace == ShakturiActualRace)
                {
                    empire = empire4;
                    if (empireList.Contains(empire))
                    {
                        empireList.Remove(empire);
                    }
                }
            }
            if (includePlayer)
            {
                empire3 = PlayerEmpire;
            }
            if (empire3 == null)
            {
                empire3 = empire2;
            }
            if (empire2 != null)
            {
                for (int j = 0; j < empireList.Count; j++)
                {
                    Empire empire5 = empireList[j];
                    for (int k = 0; k < empireList.Count; k++)
                    {
                        if (empire5 != empireList[k])
                        {
                            DiplomaticRelation diplomaticRelation = empire5.ObtainDiplomaticRelation(empireList[k]);
                            if (diplomaticRelation.Type == DiplomaticRelationType.War)
                            {
                                empire5.ResetAttitudeLevelsAtEndOfWar(diplomaticRelation);
                                diplomaticRelation.Type = DiplomaticRelationType.None;
                                diplomaticRelation.LastDiplomacyTradeOfferDate = CurrentStarDate;
                                DiplomaticRelation diplomaticRelation2 = empireList[k].ObtainDiplomaticRelation(empire5);
                                diplomaticRelation2.Type = DiplomaticRelationType.None;
                                diplomaticRelation2.LastDiplomacyTradeOfferDate = CurrentStarDate;
                                empire5.ProcessEndOfWarWithEmpire(empireList[k]);
                                empireList[k].ProcessEndOfWarWithEmpire(empire5);
                                empire5.ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                                empire5.SendNewsBroadcastWarStartEnd(diplomaticRelation);
                            }
                            if (diplomaticRelation.Type != DiplomaticRelationType.MutualDefensePact)
                            {
                                empire5.ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.MutualDefensePact, blockFlowonEffects: true);
                                EmpireEvaluation empireEvaluation = empire5.ObtainEmpireEvaluation(empireList[k]);
                                empireEvaluation.IncidentEvaluation = Math.Max(10.0, empireEvaluation.IncidentEvaluation);
                                empireEvaluation.Bias += 30.0;
                                EmpireEvaluation empireEvaluation2 = empireList[k].ObtainEmpireEvaluation(empire5);
                                empireEvaluation2.IncidentEvaluation = Math.Max(10.0, empireEvaluation2.IncidentEvaluation);
                                empireEvaluation2.Bias += 30.0;
                            }
                        }
                    }
                    empire5.ObtainDiplomaticRelation(empire);
                    empire5.DeclareWar(empire, null, lockedWar: true);
                    empire5.ObtainEmpireEvaluation(empire).Bias -= 30.0;
                }
                int num = 1;
                num = ((StarCount < 700) ? 1 : 2);
                if (empire3 != null)
                {
                    shipGroup = new ShipGroup(this);
                    shipGroup.Name = "Guardian Fleet";
                    shipGroup.Empire = empire3;
                    empire3.ShipGroups.Add(shipGroup);
                    empire3.ShipGroups.Sort();
                    for (int l = 0; l < 8; l++)
                    {
                        Design design = null;
                        int num2 = 0;
                        switch (l)
                        {
                            case 0:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.Escort);
                                num2 = 3 * num;
                                break;
                            case 1:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.Frigate);
                                num2 = 4 * num;
                                break;
                            case 2:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.Destroyer);
                                num2 = 3 * num;
                                break;
                            case 3:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.Cruiser);
                                num2 = 2 * num;
                                break;
                            case 4:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.CapitalShip);
                                num2 = num;
                                break;
                            case 5:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.TroopTransport);
                                num2 = 2 * num;
                                break;
                            case 6:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.Carrier);
                                num2 = 2 * num;
                                break;
                            case 7:
                                design = empire2.Designs.FindNewestCanBuild(BuiltObjectSubRole.ResupplyShip);
                                num2 = num;
                                break;
                        }
                        if (design == null || num2 <= 0)
                        {
                            continue;
                        }
                        for (int m = 0; m < num2; m++)
                        {
                            BuiltObject builtObject = empire2.GenerateNewBuiltObject(design, empire2.Capital);
                            builtObject.MaintenanceSavings = 0.2f;
                            empire3.TakeOwnershipOfBuiltObject(builtObject, empire3, setDesignAsObsolete: false);
                            if (builtObject.SubRole != BuiltObjectSubRole.ResupplyShip)
                            {
                                shipGroup.AddShipToFleet(builtObject);
                            }
                            builtObject.IsAutoControlled = false;
                        }
                    }
                    if (empire2 != null && empire2.Capital != null)
                    {
                        shipGroup.GatherPoint = empire2.Capital;
                    }
                    else
                    {
                        shipGroup.GatherPoint = empire3.Capital;
                    }
                    shipGroup.Update();
                }
                empire2.Reclusive = false;
                if (includePlayer)
                {
                    game.GlobalVictoryConditions.DefendHabitat = empire2.Capital;
                    game.GlobalVictoryConditions.DefendHabitatEmpire = empire2;
                    game.GlobalVictoryConditions.TargetHabitat = empire.Capital;
                    game.GlobalVictoryConditions.TargetHabitatEmpire = empire;
                }
            }
            return shipGroup;
        }

        public static BuiltObjectSubRole ResolveLegacySubRole(BuiltObjectSubRole subRole)
        {
            BuiltObjectSubRole result = subRole;
            switch (subRole)
            {
                case BuiltObjectSubRole.EnergyResearchStation:
                case BuiltObjectSubRole.WeaponsResearchStation:
                case BuiltObjectSubRole.HighTechResearchStation:
                case BuiltObjectSubRole.MonitoringStation:
                    result = BuiltObjectSubRole.GenericBase;
                    break;
                case BuiltObjectSubRole.DefensiveBase:
                    result = BuiltObjectSubRole.MediumSpacePort;
                    break;
            }
            return result;
        }

        public int DetermineLifeSupportRequired(ComponentImprovement lifeSupportComponent, Design design)
        {
            int designSize = design.QuickCalculateSize();
            bool designIsBase = false;
            if (design.Role == BuiltObjectRole.Base)
            {
                designIsBase = true;
            }
            return DetermineLifeSupportRequired(lifeSupportComponent, designSize, designIsBase);
        }

        public int DetermineLifeSupportRequired(ComponentImprovement lifeSupportComponent, int designSize, bool designIsBase)
        {
            int num = 0;
            int num2 = 0;
            if (lifeSupportComponent != null)
            {
                if (designIsBase)
                {
                    num = designSize / 2 / lifeSupportComponent.Value1 + 1;
                    num2 = designSize / 2 % lifeSupportComponent.Value1;
                }
                else
                {
                    num = designSize / lifeSupportComponent.Value1 + 1;
                    num2 = designSize % lifeSupportComponent.Value1;
                }
                if (num2 == 0)
                {
                    num--;
                }
            }
            return num;
        }

        public int DetermineHabModulesRequired(ComponentImprovement habModuleComponent, Design design)
        {
            int designSize = design.QuickCalculateSize();
            bool designIsBase = false;
            if (design.Role == BuiltObjectRole.Base)
            {
                designIsBase = true;
            }
            return DetermineHabModulesRequired(habModuleComponent, designSize, designIsBase);
        }

        public int DetermineHabModulesRequired(ComponentImprovement habModuleComponent, int designSize, bool designIsBase)
        {
            int num = 0;
            int num2 = 0;
            if (habModuleComponent != null)
            {
                if (designIsBase)
                {
                    num = designSize / 2 / habModuleComponent.Value1 + 1;
                    num2 = designSize / 2 % habModuleComponent.Value1;
                }
                else
                {
                    num = designSize / habModuleComponent.Value1 + 1;
                    num2 = designSize % habModuleComponent.Value1;
                }
                if (num2 == 0)
                {
                    num--;
                }
            }
            return num;
        }

        private Design AddComponentsToDesign(Design design, ComponentList components, ResearchSystem research)
        {
            foreach (Component component3 in components)
            {
                if (component3 != null)
                {
                    design.Components.Add(component3);
                }
            }
            Component component = Component.EvaluateLatest(ComponentType.HabitationHabModule, 1000000.0);
            ComponentImprovement componentImprovement = new ComponentImprovement(component);
            Component component2 = Component.EvaluateLatest(ComponentType.HabitationLifeSupport, 1000000.0);
            ComponentImprovement componentImprovement2 = new ComponentImprovement(component2);
            if (research != null)
            {
                if (component != null)
                {
                    componentImprovement = research.ResolveImprovedComponentValues(component);
                }
                if (component2 != null)
                {
                    componentImprovement2 = research.ResolveImprovedComponentValues(component2);
                }
            }
            int num = DetermineHabModulesRequired(componentImprovement, design);
            int num2 = DetermineLifeSupportRequired(componentImprovement2, design);
            for (int i = 0; i < num; i++)
            {
                design.Components.Add(componentImprovement.ImprovedComponent);
            }
            for (int j = 0; j < num2; j++)
            {
                design.Components.Add(componentImprovement2.ImprovedComponent);
            }
            return design;
        }

        public ComponentList GetPlanetDestroyerComponents(double overpowerFactor)
        {
            return GetPlanetDestroyerComponents(overpowerFactor, null);
        }

        public ComponentList GetPlanetDestroyerComponents(double overpowerFactor, Empire empire)
        {
            ComponentList componentList = new ComponentList();
            int num = (int)(30.0 * overpowerFactor);
            int num2 = (int)(18.0 * overpowerFactor);
            int num3 = (int)(12.0 * overpowerFactor);
            int num4 = (int)(8.0 * overpowerFactor);
            int num5 = (int)(16.0 * overpowerFactor);
            int num6 = (int)(12.0 * overpowerFactor);
            int num7 = (int)(5.0 * overpowerFactor);
            int num8 = (int)(6.0 * overpowerFactor);
            int num9 = (int)(14.0 * overpowerFactor);
            if (empire != null && empire.Research != null)
            {
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.ComputerCommandCenter));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.ComputerCommandCenter));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.DamageControl));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.DamageControl));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.DamageControl));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.DamageControl));
                for (int i = 0; i < num8; i++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.Reactor));
                }
                for (int j = 0; j < 60; j++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.StorageFuel));
                }
                for (int k = 0; k < 60; k++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.StorageCargo));
                }
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.StorageDockingBay));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.StorageDockingBay));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.StorageDockingBay));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.StorageDockingBay));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.ComputerCommerceCenter));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.HabitationMedicalCenter));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.HabitationRecreationCenter));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.SensorProximityArray));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.ComputerTargetting));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.ComputerCountermeasures));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.ComputerTargettingFleet));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.ComputerCountermeasuresFleet));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.SensorLongRange));
                for (int l = 0; l < num; l++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.Armor));
                }
                for (int m = 0; m < num2; m++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentCategoryType.Shields));
                }
                for (int n = 0; n < num9; n++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.EnergyCollector));
                }
                for (int num10 = 0; num10 < num5; num10++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.EngineMainThrust));
                }
                for (int num11 = 0; num11 < 1; num11++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.EngineVectoring));
                }
                for (int num12 = 0; num12 < num3; num12++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentCategoryType.WeaponBeam));
                }
                for (int num13 = 0; num13 < num6; num13++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentCategoryType.WeaponPointDefense));
                }
                for (int num14 = 0; num14 < num4; num14++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentCategoryType.WeaponTorpedo));
                }
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.WeaponTractorBeam));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.WeaponTractorBeam));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.WeaponTractorBeam));
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.WeaponTractorBeam));
                for (int num15 = 0; num15 < num7; num15++)
                {
                    componentList.Add(empire.Research.GetLatestComponent(ComponentType.FighterBay));
                }
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.WeaponAreaDestruction));
                ComponentDefinition highestTechByType = ComponentDefinition.GetHighestTechByType(ComponentType.WeaponSuperBeam, ComponentDefinitionsStatic);
                if (highestTechByType != null)
                {
                    componentList.Add(new Component(highestTechByType.ComponentID));
                }
                componentList.Add(empire.Research.GetLatestComponent(ComponentType.WeaponIonDefense));
                componentList.Add(empire.Research.GetLatestComponent(ComponentCategoryType.HyperDrive));
            }
            else
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommandCenter, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommandCenter, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, 1000000.0));
                for (int num16 = 0; num16 < num8; num16++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.Reactor, 1000000.0));
                }
                for (int num17 = 0; num17 < 60; num17++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.StorageFuel, 1000000.0));
                }
                for (int num18 = 0; num18 < 60; num18++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.StorageCargo, 1000000.0));
                }
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommerceCenter, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.HabitationMedicalCenter, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.HabitationRecreationCenter, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.SensorProximityArray, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.ComputerTargetting, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCountermeasures, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.ComputerTargettingFleet, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCountermeasuresFleet, 1000000.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.SensorLongRange, 1000000.0));
                for (int num19 = 0; num19 < num; num19++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.Armor, 1000000.0));
                }
                for (int num20 = 0; num20 < num2; num20++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentCategoryType.Shields, 6.0));
                }
                for (int num21 = 0; num21 < num9; num21++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, 1000000.0));
                }
                for (int num22 = 0; num22 < num5; num22++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.EngineMainThrust, 6.0));
                }
                for (int num23 = 0; num23 < 1; num23++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.EngineVectoring, 6.0));
                }
                for (int num24 = 0; num24 < num3; num24++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponBeam, 6.0));
                }
                for (int num25 = 0; num25 < num6; num25++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponPointDefense, 6.0));
                }
                for (int num26 = 0; num26 < num4; num26++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponTorpedo, 6.0));
                }
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponTractorBeam, 6.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponTractorBeam, 6.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponTractorBeam, 6.0));
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponTractorBeam, 6.0));
                for (int num27 = 0; num27 < num7; num27++)
                {
                    componentList.Add(Component.EvaluateLatest(ComponentType.FighterBay, 6.0));
                }
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponAreaDestruction, 6.0));
                ComponentDefinition highestTechByType2 = ComponentDefinition.GetHighestTechByType(ComponentType.WeaponSuperBeam, ComponentDefinitionsStatic);
                if (highestTechByType2 != null)
                {
                    componentList.Add(new Component(highestTechByType2.ComponentID));
                }
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponIonDefense, 6.0));
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.HyperDrive, 6.0));
            }
            return componentList;
        }

        public DesignSpecification GetPlanetDestroyerDesignSpec()
        {
            DesignSpecification designSpecification = new DesignSpecification(BuiltObjectSubRole.CapitalShip, mobile: true);
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommandCenter, 2));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Reactor, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageFuel, 30));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageDockingBay, 3));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageCargo, 30));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.EnergyCollector, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCommerceCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationMedicalCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HabitationRecreationCenter, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorProximityArray, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerTargetting, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.ComputerCountermeasures, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.SensorLongRange, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.Armor, 30));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.Shields, 40));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineMainThrust, 16));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.EngineVectoring, 6));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponBeam, 30));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.WeaponTorpedo, 20));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponAreaDestruction, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponTractorBeam, 4));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.HyperDeny, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.WeaponSuperBeam, 1));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentType.StorageTroop, 8));
            designSpecification.ComponentRules.Add(new DesignSpecificationComponentRule(DesignSpecificationComponentRuleType.MustHave, ComponentCategoryType.HyperDrive, 1));
            return designSpecification;
        }

        public bool CanDestroyHabitat(BuiltObject builtObject, Habitat habitat)
        {
            switch (habitat.Category)
            {
                case HabitatCategoryType.Star:
                case HabitatCategoryType.GasCloud:
                    return false;
                case HabitatCategoryType.Planet:
                case HabitatCategoryType.Moon:
                case HabitatCategoryType.Asteroid:
                    if (builtObject.IsPlanetDestroyer && habitat.Diameter <= 400)
                    {
                        return true;
                    }
                    break;
            }
            return false;
        }

        public Design DesignPirateBase(Design design)
        {
            return DesignPirateBase(design, 0.0);
        }

        public Design DesignPirateBase(Design design, double techLevel)
        {
            Design design2 = design.Clone();
            Component component;
            Component component2;
            Component component3;
            Component component4;
            Component component5;
            Component component6;
            Component component7;
            Component component8;
            Component component9;
            Component component10;
            Component component11;
            Component component12;
            Component component13;
            Component component14;
            Component component15;
            Component component16;
            if (techLevel > 0.0)
            {
                component = Component.EvaluateLatest(ComponentCategoryType.WeaponBeam, techLevel);
                component2 = Component.EvaluateLatest(ComponentCategoryType.WeaponTorpedo, techLevel);
                component3 = Component.EvaluateLatest(ComponentCategoryType.Armor, techLevel);
                component4 = Component.EvaluateLatest(ComponentCategoryType.Shields, techLevel);
                component5 = Component.EvaluateLatest(ComponentType.ConstructionBuild, techLevel);
                component6 = Component.EvaluateLatest(ComponentType.ManufacturerEnergyPlant, techLevel);
                component7 = Component.EvaluateLatest(ComponentType.ManufacturerWeaponsPlant, techLevel);
                component8 = Component.EvaluateLatest(ComponentType.ManufacturerHighTechPlant, techLevel);
                component9 = Component.EvaluateLatest(ComponentType.DamageControl, techLevel);
                component10 = Component.EvaluateLatest(ComponentType.HabitationLifeSupport, techLevel);
                component11 = Component.EvaluateLatest(ComponentType.HabitationHabModule, techLevel);
                component12 = Component.EvaluateLatest(ComponentType.FighterBay, techLevel);
                component13 = Component.EvaluateLatest(ComponentType.WeaponPointDefense, techLevel);
                component14 = Component.EvaluateLatest(ComponentType.WeaponIonDefense, techLevel);
                component15 = Component.EvaluateLatest(ComponentType.WeaponTractorBeam, techLevel);
                component16 = Component.EvaluateLatest(ComponentType.AssaultPod, techLevel);
            }
            else
            {
                component = design.Empire.Research.EvaluateDesiredComponent(ComponentCategoryType.WeaponBeam, ShipDesignFocus.Balanced);
                component2 = design.Empire.Research.EvaluateDesiredComponent(ComponentCategoryType.WeaponTorpedo, ShipDesignFocus.Balanced);
                component3 = design.Empire.Research.EvaluateDesiredComponent(ComponentCategoryType.Armor, ShipDesignFocus.Balanced);
                component4 = design.Empire.Research.EvaluateDesiredComponent(ComponentCategoryType.Shields, ShipDesignFocus.Balanced);
                component5 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.ConstructionBuild, ShipDesignFocus.Balanced);
                component6 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.ManufacturerEnergyPlant, ShipDesignFocus.Balanced);
                component7 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.ManufacturerWeaponsPlant, ShipDesignFocus.Balanced);
                component8 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.ManufacturerHighTechPlant, ShipDesignFocus.Balanced);
                component9 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.DamageControl, ShipDesignFocus.Balanced);
                component10 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.HabitationLifeSupport, ShipDesignFocus.Balanced);
                component11 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.HabitationHabModule, ShipDesignFocus.Balanced);
                component12 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.FighterBay, ShipDesignFocus.Balanced);
                component13 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.WeaponPointDefense, ShipDesignFocus.Balanced);
                component14 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.WeaponIonDefense, ShipDesignFocus.Balanced);
                component15 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.WeaponTractorBeam, ShipDesignFocus.Balanced);
                component16 = design.Empire.Research.EvaluateDesiredComponent(ComponentType.AssaultPod, ShipDesignFocus.Balanced);
            }
            if (component != null)
            {
                design2.Components.Add(component);
                design2.Components.Add(component);
                design2.Components.Add(component);
                design2.Components.Add(component);
            }
            if (component2 != null)
            {
                design2.Components.Add(component2);
                design2.Components.Add(component2);
            }
            if (component4 != null)
            {
                design2.Components.Add(component4);
                design2.Components.Add(component4);
                design2.Components.Add(component4);
                design2.Components.Add(component4);
            }
            if (component3 != null)
            {
                design2.Components.Add(component3);
                design2.Components.Add(component3);
                design2.Components.Add(component3);
                design2.Components.Add(component3);
            }
            if (component12 != null)
            {
                design2.Components.Add(component12);
                design2.Components.Add(component12);
            }
            if (component13 != null)
            {
                design2.Components.Add(component13);
                design2.Components.Add(component13);
                design2.Components.Add(component13);
                design2.Components.Add(component13);
            }
            if (component14 != null)
            {
                design2.Components.Add(component14);
            }
            if (component15 != null)
            {
                design2.Components.Add(component15);
                design2.Components.Add(component15);
            }
            if (component16 != null)
            {
                design2.Components.Add(component16);
                design2.Components.Add(component16);
            }
            if (component5 != null)
            {
                design2.Components.Add(component5);
            }
            if (component6 != null)
            {
                design2.Components.Add(component6);
            }
            if (component7 != null)
            {
                design2.Components.Add(component7);
            }
            if (component8 != null)
            {
                design2.Components.Add(component8);
            }
            if (component9 != null)
            {
                design2.Components.Add(component9);
            }
            if (component10 != null)
            {
                design2.Components.Add(component10);
                design2.Components.Add(component10);
            }
            if (component11 != null)
            {
                design2.Components.Add(component11);
                design2.Components.Add(component11);
            }
            design2.SubRole = BuiltObjectSubRole.GenericBase;
            design2.Empire = null;
            design2.Stance = BuiltObjectStance.AttackEnemies;
            design2.Name += " XT";
            design2.BuildCount = 0;
            design2.DateCreated = CurrentStarDate;
            design2.ReDefine();
            return design2;
        }

        public BuiltObject GeneratePirateShip(Empire pirateEmpire, BuiltObjectSubRole subRole, Habitat habitat)
        {
            Design design = null;
            for (int i = 0; i < pirateEmpire.Designs.Count; i++)
            {
                Design design2 = pirateEmpire.Designs[i];
                if (design2.SubRole == subRole)
                {
                    design = design2;
                    break;
                }
            }
            if (design != null)
            {
                design.BuildCount++;
                string name = SelectRandomUniqueMilitaryShipName();
                BuiltObject builtObject = new BuiltObject(design, name, this, fullyBuilt: true);
                builtObject.Empire = pirateEmpire;
                builtObject.Heading = SelectRandomHeading();
                builtObject.TargetHeading = builtObject.Heading;
                builtObject.ReDefine();
                builtObject.CurrentFuel = builtObject.FuelCapacity;
                builtObject.CurrentShields = builtObject.ShieldsCapacity;
                pirateEmpire.AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: true, isStateOwned: true);
                return builtObject;
            }
            return null;
        }

        private void GenerateNewPirateShips()
        {
        }

        private Habitat RelocatePirateBase(Resource fuelType, Empire pirateFaction, Habitat existingPirateBaseHabitat)
        {
            double num = 0.0;
            double num2 = 0.0;
            bool flag = false;
            Habitat habitat = null;
            int num3 = 0;
            double num4 = 500000.0;
            while (!flag && num3 < 50)
            {
                double num5 = Rnd.NextDouble() * num4;
                double num6 = Rnd.NextDouble() * Math.PI * 2.0;
                num = existingPirateBaseHabitat.Xpos + Math.Cos(num6) * num5;
                num2 = existingPirateBaseHabitat.Ypos + Math.Sin(num6) * num5;
                habitat = FindNearestHabitatWithResource(num, num2, fuelType.ResourceID, existingPirateBaseHabitat, null);
                if (habitat != null && !PlayerEmpire.IsObjectVisibleToThisEmpire(habitat, includeLongRangeScanners: true, includeShipsOutsideSystems: false))
                {
                    Empire empire = FindNearestPirateFaction(num, num2, pirateFaction, includeSuperPirates: true);
                    if (empire != null)
                    {
                        double num7 = CalculateDistance(habitat.Xpos, habitat.Ypos, empire.PirateEmpireBaseHabitat.Xpos, empire.PirateEmpireBaseHabitat.Ypos);
                        if (num7 > (double)(MaxSolarSystemSize * 2))
                        {
                            BuiltObject builtObject = FindNearestBuiltObject((int)habitat.Xpos, (int)habitat.Ypos, BuiltObjectRole.Undefined, includeIndependentBuiltObjects: false);
                            double num8 = double.MaxValue;
                            if (builtObject != null)
                            {
                                num8 = CalculateDistance(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                            }
                            if (num8 > (double)(MaxSolarSystemSize * 2))
                            {
                                Habitat habitat2 = FindNearestColony(habitat.Xpos, habitat.Ypos, null, 0, includeIndependentColonies: false);
                                double num9 = double.MaxValue;
                                if (habitat2 != null)
                                {
                                    num9 = CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                                }
                                if (num9 > (double)(MaxSolarSystemSize * 2))
                                {
                                    flag = true;
                                }
                            }
                        }
                    }
                }
                num3++;
            }
            return habitat;
        }

        public Empire FindNearestPirateFactionBaseUnknown(Empire empire, double x, double y, Empire pirateFactionToExclude)
        {
            double num = double.MaxValue;
            Empire result = null;
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < empire.KnownPirateBases.Count; i++)
            {
                BuiltObject builtObject = empire.KnownPirateBases[i];
                if (!empireList.Contains(builtObject.Empire))
                {
                    empireList.Add(builtObject.Empire);
                }
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                if (empire2 == null || empire2.PirateEmpireBaseHabitat == null || empire2.BuiltObjects == null || empireList.Contains(empire2) || (pirateFactionToExclude != null && empire2 == pirateFactionToExclude))
                {
                    continue;
                }
                double num2 = CalculateDistanceSquared(x, y, empire2.PirateEmpireBaseHabitat.Xpos, empire2.PirateEmpireBaseHabitat.Ypos);
                if (!(num2 < num))
                {
                    continue;
                }
                bool flag = false;
                for (int k = 0; k < empire2.BuiltObjects.Count; k++)
                {
                    BuiltObject builtObject2 = empire2.BuiltObjects[k];
                    if (builtObject2 != null && (builtObject2.SubRole == BuiltObjectSubRole.GenericBase || builtObject2.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject2.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject2.SubRole == BuiltObjectSubRole.LargeSpacePort))
                    {
                        flag = true;
                        break;
                    }
                }
                if (flag)
                {
                    result = empire2;
                    num = num2;
                }
            }
            return result;
        }

        public Empire FindNearestPirateFaction(double x, double y, Empire pirateFactionToExclude, bool includeSuperPirates)
        {
            double num = double.MaxValue;
            Empire result = null;
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire == null || empire.PirateEmpireBaseHabitat == null || empire.BuiltObjects == null || !empire.Active || (pirateFactionToExclude != null && empire == pirateFactionToExclude) || (!includeSuperPirates && empire.PirateEmpireSuperPirates))
                {
                    continue;
                }
                double num2 = CalculateDistanceSquared(x, y, empire.PirateEmpireBaseHabitat.Xpos, empire.PirateEmpireBaseHabitat.Ypos);
                if (!(num2 < num))
                {
                    continue;
                }
                bool flag = false;
                for (int j = 0; j < empire.BuiltObjects.Count; j++)
                {
                    BuiltObject builtObject = empire.BuiltObjects[j];
                    if (builtObject != null && (builtObject.SubRole == BuiltObjectSubRole.GenericBase || builtObject.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject.SubRole == BuiltObjectSubRole.LargeSpacePort))
                    {
                        flag = true;
                        break;
                    }
                }
                if (flag)
                {
                    result = empire;
                    num = num2;
                }
            }
            return result;
        }

        public void CheckMergePirateFactions()
        {
            EmpireList empireList = new EmpireList();
            EmpireList empireList2 = new EmpireList();
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire != null && empire.Active)
                {
                    if (CheckPirateFactionShouldBeMerged(empire))
                    {
                        empireList.Add(empire);
                    }
                    else if (CheckPirateFactionCanAcceptMerge(empire))
                    {
                        empireList2.Add(empire);
                    }
                }
            }
            if (empireList.Count <= 0 || empireList2.Count <= 0)
            {
                return;
            }
            for (int j = 0; j < empireList.Count; j++)
            {
                Empire empire2 = empireList[j];
                if (empire2 != null && empire2 != PlayerEmpire && empire2.PirateEmpireBaseHabitat != null)
                {
                    double nearestDistanceSquared = double.MaxValue;
                    Empire empire3 = FindNearestPirateFactionKnownToFaction(empire2.PirateEmpireBaseHabitat.Xpos, empire2.PirateEmpireBaseHabitat.Ypos, empire2, empireList2, out nearestDistanceSquared);
                    if (empire3 != null && nearestDistanceSquared < 64000000000000.0)
                    {
                        Habitat habitat = DetermineHabitatSystemStar(empire2.PirateEmpireBaseHabitat);
                        string message = string.Format(TextResolver.GetText("Weak Pirate Faction Joins"), empire2.Name, habitat.Name);
                        EliminatePirateFaction(empire2, empire3);
                        string text = TextResolver.GetText("Pirate Faction Joins Your Empire");
                        empire3.SendEventMessageToEmpire(EventMessageType.PirateFactionJoinsYou, text, message, empire2, habitat);
                    }
                }
            }
        }

        public Empire FindNearestPirateFactionKnownToFaction(double x, double y, Empire pirateFaction, EmpireList pirateFactionsToCheck, out double nearestDistanceSquared)
        {
            Empire empire = null;
            nearestDistanceSquared = double.MaxValue;
            if (pirateFactionsToCheck != null)
            {
                for (int i = 0; i < pirateFactionsToCheck.Count; i++)
                {
                    Empire empire2 = pirateFactionsToCheck[i];
                    if (empire2 == null || empire2.PirateEmpireBaseHabitat == null)
                    {
                        continue;
                    }
                    PirateRelation pirateRelation = pirateFaction.ObtainPirateRelation(empire2);
                    if (pirateRelation.Type != 0)
                    {
                        double num = CalculateDistanceSquared(x, y, empire2.PirateEmpireBaseHabitat.Xpos, empire2.PirateEmpireBaseHabitat.Ypos);
                        if (empire == null || num < nearestDistanceSquared)
                        {
                            empire = empire2;
                            nearestDistanceSquared = num;
                        }
                    }
                }
            }
            return empire;
        }

        public bool CheckPirateFactionCanAcceptMerge(Empire pirateFaction)
        {
            if (pirateFaction != null && pirateFaction.BuiltObjects != null)
            {
                int num = pirateFaction.BuiltObjects.TotalMobileMilitaryFirepower();
                int num2 = pirateFaction.BuiltObjects.CountSpaceports();
                double num3 = pirateFaction.CalculateAnnualCashflow();
                if (num > 200 && num2 >= 1 && pirateFaction.StateMoney > 0.0 && num3 > 0.0)
                {
                    return true;
                }
            }
            return false;
        }

        public bool CheckPirateFactionShouldBeMerged(Empire pirateFaction)
        {
            if (pirateFaction != null && pirateFaction.BuiltObjects != null)
            {
                int num = pirateFaction.BuiltObjects.TotalMobileMilitaryFirepower();
                int num2 = pirateFaction.BuiltObjects.CountSpaceports();
                double num3 = pirateFaction.CalculateAnnualCashflow();
                if (num < 200 && num2 <= 0 && pirateFaction.StateMoney < 0.0 && num3 < 0.0)
                {
                    return true;
                }
            }
            return false;
        }

        public bool CheckPirateEmpireTerminated(Empire pirateFaction)
        {
            if (pirateFaction != null)
            {
                BuiltObject builtObject = IdentifyPirateBase(pirateFaction);
                if (builtObject == null && (pirateFaction.Colonies == null || pirateFaction.Colonies.Count <= 0) && pirateFaction.BuiltObjects.GetBuiltObjectsBySubRole(BuiltObjectSubRole.ConstructionShip).Count <= 0 && pirateFaction.BuiltObjects.GetBuiltObjectsBySubRole(BuiltObjectSubRole.ResupplyShip).Count <= 0)
                {
                    return true;
                }
            }
            return false;
        }

        public void EliminatePirateFaction(Empire pirateFaction)
        {
            Empire conqueror = FindNearestPirateFaction(pirateFaction.PirateEmpireBaseHabitat.Xpos, pirateFaction.PirateEmpireBaseHabitat.Ypos, pirateFaction, includeSuperPirates: true);
            EliminatePirateFaction(pirateFaction, conqueror);
        }

        public void EliminatePirateFaction(Empire pirateFaction, Empire conqueror)
        {
            if (pirateFaction == PlayerEmpire)
            {
                string description = TextResolver.GetText("Your pirate empire has been eliminated") + "!";
                OnGameEnd(new GameEndEventArgs(null, GameEndOutcome.Defeat, description, 0));
            }
            double num = 0.0;
            double num2 = 0.0;
            if (conqueror != null)
            {
                num = conqueror.CalculateAccurateAnnualCashflow();
                num2 = conqueror.GetPrivateAnnualCashflow();
            }
            bool flag = true;
            if (conqueror != null && conqueror.PirateEmpireBaseHabitat == null)
            {
                flag = false;
            }
            double num3 = 0.0;
            double num4 = 0.0;
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(pirateFaction.BuiltObjects);
            builtObjectList.AddRange(pirateFaction.PrivateBuiltObjects);
            foreach (BuiltObject item in builtObjectList)
            {
                bool flag2 = true;
                if (DetermineBuiltObjectIsState(item.SubRole) || flag)
                {
                    if (num3 + (double)item.AnnualSupportCost > num)
                    {
                        flag2 = false;
                    }
                    else
                    {
                        num3 += (double)item.AnnualSupportCost;
                    }
                }
                else if (num4 + (double)item.AnnualSupportCost > num2)
                {
                    flag2 = false;
                }
                else
                {
                    num4 += (double)item.AnnualSupportCost;
                }
                if (!flag2)
                {
                    item.CompleteTeardown(this);
                }
                else if (conqueror != null)
                {
                    if (!flag)
                    {
                        if (item.Role == BuiltObjectRole.Military)
                        {
                            item.Stance = BuiltObjectStance.AttackEnemies;
                            item.FleeWhen = BuiltObjectFleeWhen.Shields20;
                            item.Design.Stance = BuiltObjectStance.AttackEnemies;
                            item.Design.FleeWhen = BuiltObjectFleeWhen.Shields20;
                        }
                        else
                        {
                            item.Stance = BuiltObjectStance.AttackIfAttacked;
                            item.FleeWhen = BuiltObjectFleeWhen.Shields20;
                            item.Design.Stance = BuiltObjectStance.AttackIfAttacked;
                            item.Design.FleeWhen = BuiltObjectFleeWhen.Shields20;
                        }
                    }
                    switch (item.SubRole)
                    {
                        case BuiltObjectSubRole.SmallFreighter:
                        case BuiltObjectSubRole.MediumFreighter:
                        case BuiltObjectSubRole.LargeFreighter:
                            item.ClearPreviousMissionRequirements();
                            IndependentEmpire.TakeOwnershipOfBuiltObject(item, IndependentEmpire);
                            break;
                        case BuiltObjectSubRole.Escort:
                        case BuiltObjectSubRole.Frigate:
                        case BuiltObjectSubRole.Destroyer:
                        case BuiltObjectSubRole.Cruiser:
                        case BuiltObjectSubRole.CapitalShip:
                        case BuiltObjectSubRole.TroopTransport:
                        case BuiltObjectSubRole.Carrier:
                        case BuiltObjectSubRole.ResupplyShip:
                            if (conqueror != null)
                            {
                                item.ClearPreviousMissionRequirements();
                                string description3 = string.Format(TextResolver.GetText("Pirate Ship Joins Us"), item.Name, item.Empire.Name);
                                conqueror.TakeOwnershipOfBuiltObject(item, conqueror, setDesignAsObsolete: true);
                                conqueror.SendMessageToEmpire(conqueror, EmpireMessageType.Informational, item, description3);
                            }
                            else
                            {
                                item.CompleteTeardown(this);
                            }
                            break;
                        case BuiltObjectSubRole.ConstructionShip:
                        case BuiltObjectSubRole.GasMiningShip:
                        case BuiltObjectSubRole.MiningShip:
                        case BuiltObjectSubRole.GasMiningStation:
                        case BuiltObjectSubRole.MiningStation:
                        case BuiltObjectSubRole.ResortBase:
                        case BuiltObjectSubRole.EnergyResearchStation:
                        case BuiltObjectSubRole.WeaponsResearchStation:
                        case BuiltObjectSubRole.HighTechResearchStation:
                            IndependentEmpire.TakeOwnershipOfBuiltObject(item, null);
                            break;
                        case BuiltObjectSubRole.SmallSpacePort:
                        case BuiltObjectSubRole.MediumSpacePort:
                        case BuiltObjectSubRole.LargeSpacePort:
                        case BuiltObjectSubRole.DefensiveBase:
                            if (conqueror != null)
                            {
                                if (item.ParentHabitat != null && conqueror.ResourceMap != null)
                                {
                                    conqueror.ResourceMap.SetResourcesKnown(item.ParentHabitat, known: true);
                                }
                                string description2 = string.Format(TextResolver.GetText("Pirate Ship Joins Us"), item.Name, item.Empire.Name);
                                conqueror.TakeOwnershipOfBuiltObject(item, conqueror, setDesignAsObsolete: true);
                                conqueror.SendMessageToEmpire(conqueror, EmpireMessageType.Informational, item, description2);
                            }
                            else
                            {
                                item.CompleteTeardown(this);
                            }
                            break;
                        default:
                            item.CompleteTeardown(this);
                            break;
                    }
                }
                else
                {
                    item.CompleteTeardown(this);
                }
            }
            ClearPirateColonyFacilities(pirateFaction, conqueror);
            if (conqueror != null && conqueror.PirateEmpireBaseHabitat != null)
            {
                MergeGalaxyMap(pirateFaction, conqueror);
            }
            ClearFromKnownPirateBases(pirateFaction);
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                empire.KnownPirateEmpires.Remove(pirateFaction);
            }
            PirateEmpires.Remove(pirateFaction);
            if (conqueror != null)
            {
                conqueror.SendMessageToEmpire(pirateFaction, EmpireMessageType.EmpireDefeated, pirateFaction, TextResolver.GetText("You have been defeated!"));
            }
            else
            {
                pirateFaction.SendMessageToEmpire(pirateFaction, EmpireMessageType.EmpireDefeated, pirateFaction, TextResolver.GetText("You have been defeated!"));
            }
            pirateFaction.CompleteTeardown(conqueror, removeFromGalaxy: true, sendMessages: false);
        }

        public void ClearPirateColonyFacilities(Empire pirateFaction, Empire conqueror)
        {
            pirateFaction.PirateReviewColoniesToControl();
            if (conqueror == null || conqueror.PirateEmpireBaseHabitat == null)
            {
                for (int i = 0; i < pirateFaction.Colonies.Count; i++)
                {
                    Habitat habitat = pirateFaction.Colonies[i];
                    if (habitat == null || habitat.HasBeenDestroyed)
                    {
                        continue;
                    }
                    PirateColonyControl byFaction = habitat.GetPirateControl().GetByFaction(pirateFaction);
                    if (byFaction == null)
                    {
                        continue;
                    }
                    if (byFaction.HasFacilityControl)
                    {
                        PlanetaryFacilityList planetaryFacilityList = new PlanetaryFacilityList();
                        for (int j = 0; j < habitat.Facilities.Count; j++)
                        {
                            PlanetaryFacility planetaryFacility = habitat.Facilities[j];
                            if (planetaryFacility != null)
                            {
                                switch (planetaryFacility.Type)
                                {
                                    case PlanetaryFacilityType.PirateBase:
                                    case PlanetaryFacilityType.PirateFortress:
                                    case PlanetaryFacilityType.PirateCriminalNetwork:
                                        planetaryFacilityList.Add(planetaryFacility);
                                        break;
                                }
                            }
                        }
                        for (int k = 0; k < planetaryFacilityList.Count; k++)
                        {
                            habitat.Facilities.Remove(planetaryFacilityList[k]);
                            habitat.CheckRemoveFacilityTracking(planetaryFacilityList[k]);
                        }
                        byFaction.HasFacilityControl = false;
                    }
                    habitat.GetPirateControl().Remove(byFaction);
                }
                pirateFaction.Colonies.Clear();
                return;
            }
            for (int l = 0; l < pirateFaction.Colonies.Count; l++)
            {
                Habitat habitat2 = pirateFaction.Colonies[l];
                if (habitat2 == null || habitat2.HasBeenDestroyed)
                {
                    continue;
                }
                PirateColonyControl byFaction2 = habitat2.GetPirateControl().GetByFaction(pirateFaction);
                PirateColonyControl byFaction3 = habitat2.GetPirateControl().GetByFaction(conqueror);
                if (byFaction2 == null)
                {
                    continue;
                }
                if (byFaction3 == null)
                {
                    byFaction2.EmpireId = (byte)conqueror.EmpireId;
                }
                else
                {
                    byFaction3.ControlLevel = Math.Max(byFaction3.ControlLevel, byFaction2.ControlLevel);
                    if (byFaction2.HasFacilityControl)
                    {
                        byFaction2.HasFacilityControl = false;
                        byFaction3.HasFacilityControl = true;
                    }
                    habitat2.GetPirateControl().Remove(byFaction2);
                }
                if (!conqueror.Colonies.Contains(habitat2))
                {
                    conqueror.Colonies.Add(habitat2);
                }
            }
            pirateFaction.Colonies.Clear();
        }

        private void CheckForTerminatedPirateEmpires()
        {
            EmpireList empireList = new EmpireList();
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (!CheckPirateEmpireTerminated(empire))
                {
                    continue;
                }
                if (empire == PlayerEmpire)
                {
                    string description = TextResolver.GetText("Your pirate empire has been eliminated") + "!";
                    OnGameEnd(new GameEndEventArgs(null, GameEndOutcome.Defeat, description, 0));
                }
                Empire empire2 = FindNearestPirateFaction(empire.PirateEmpireBaseHabitat.Xpos, empire.PirateEmpireBaseHabitat.Ypos, empire, includeSuperPirates: true);
                BuiltObjectList builtObjectList = new BuiltObjectList();
                builtObjectList.AddRange(empire.BuiltObjects);
                builtObjectList.AddRange(empire.PrivateBuiltObjects);
                for (int j = 0; j < builtObjectList.Count; j++)
                {
                    BuiltObject builtObject = builtObjectList[j];
                    switch (builtObject.SubRole)
                    {
                        case BuiltObjectSubRole.SmallFreighter:
                        case BuiltObjectSubRole.MediumFreighter:
                        case BuiltObjectSubRole.LargeFreighter:
                            IndependentEmpire.TakeOwnershipOfBuiltObject(builtObject, IndependentEmpire);
                            break;
                        case BuiltObjectSubRole.Escort:
                        case BuiltObjectSubRole.Frigate:
                        case BuiltObjectSubRole.Destroyer:
                        case BuiltObjectSubRole.Cruiser:
                        case BuiltObjectSubRole.CapitalShip:
                        case BuiltObjectSubRole.TroopTransport:
                        case BuiltObjectSubRole.Carrier:
                        case BuiltObjectSubRole.ResupplyShip:
                            if (empire2 != null)
                            {
                                if (Rnd.Next(0, 2) == 1)
                                {
                                    string description2 = string.Format(TextResolver.GetText("Pirate Ship Joins Us"), builtObject.Name, builtObject.Empire.Name);
                                    empire2.TakeOwnershipOfBuiltObject(builtObject, empire2);
                                    empire2.SendMessageToEmpire(empire2, EmpireMessageType.Informational, builtObject, description2);
                                }
                                else
                                {
                                    builtObject.CompleteTeardown(this);
                                }
                            }
                            else
                            {
                                builtObject.CompleteTeardown(this);
                            }
                            break;
                        case BuiltObjectSubRole.ConstructionShip:
                        case BuiltObjectSubRole.GasMiningShip:
                        case BuiltObjectSubRole.MiningShip:
                        case BuiltObjectSubRole.GasMiningStation:
                        case BuiltObjectSubRole.MiningStation:
                        case BuiltObjectSubRole.ResortBase:
                        case BuiltObjectSubRole.EnergyResearchStation:
                        case BuiltObjectSubRole.WeaponsResearchStation:
                        case BuiltObjectSubRole.HighTechResearchStation:
                            IndependentEmpire.TakeOwnershipOfBuiltObject(builtObject, null);
                            break;
                        default:
                            builtObject.CompleteTeardown(this);
                            break;
                    }
                }
                ClearFromKnownPirateBases(empire);
                empireList.Add(empire);
            }
            foreach (Empire item in empireList)
            {
                for (int k = 0; k < Empires.Count; k++)
                {
                    Empire empire3 = Empires[k];
                    empire3.KnownPirateEmpires.Remove(item);
                }
                PirateEmpires.Remove(item);
                item.CompleteTeardown(null, removeFromGalaxy: true, sendMessages: false);
            }
        }

        public void ClearFromKnownPirateBases(BuiltObject pirateBase)
        {
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                BuiltObject builtObject = null;
                for (int j = 0; j < empire.KnownPirateBases.Count; j++)
                {
                    BuiltObject builtObject2 = empire.KnownPirateBases[j];
                    if (builtObject2 == pirateBase)
                    {
                        builtObject = builtObject2;
                        break;
                    }
                }
                if (builtObject != null)
                {
                    empire.KnownPirateBases.Remove(builtObject);
                }
            }
        }

        public void ClearFromKnownPirateBases(Empire pirateEmpire)
        {
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                BuiltObject builtObject = null;
                for (int j = 0; j < empire.KnownPirateBases.Count; j++)
                {
                    BuiltObject builtObject2 = empire.KnownPirateBases[j];
                    if (builtObject2.Empire == pirateEmpire)
                    {
                        builtObject = builtObject2;
                        break;
                    }
                }
                if (builtObject != null)
                {
                    empire.KnownPirateBases.Remove(builtObject);
                }
            }
        }

        private void ReviewPirateEmpireActivities()
        {
            long currentStarDate = CurrentStarDate;
            EmpireActivityList empireActivityList = new EmpireActivityList();
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire == null || empire.PirateEmpireSuperPirates)
                {
                    continue;
                }
                EmpireList empireList = new EmpireList();
                EmpireActivityList empireActivityList2 = new EmpireActivityList();
                new EmpireList();
                for (int j = 0; j < empire.PirateMissions.Count; j++)
                {
                    EmpireActivity empireActivity = empire.PirateMissions[j];
                    if (empireActivity == null || empireActivity.ExpiryDate > currentStarDate)
                    {
                        continue;
                    }
                    if (empireActivity.RequestingEmpire != null && !empireList.Contains(empireActivity.RequestingEmpire))
                    {
                        empireList.Add(empireActivity.RequestingEmpire);
                    }
                    switch (empireActivity.Type)
                    {
                        case EmpireActivityType.Attack:
                            if (empireActivity.Target != null && !empireActivity.Target.HasBeenDestroyed && empireActivity.Target.Empire != empireActivity.AssignedEmpire)
                            {
                                PirateRelation pirateRelation = empireActivity.RequestingEmpire.ObtainPirateRelation(empire);
                                pirateRelation.EvaluationPirateMissionsFail -= 15f;
                                if (empireActivity.AssignedEmpire != null)
                                {
                                    string description2 = string.Format(TextResolver.GetText("Pirate Attack Mission Failed Pirate"), empireActivity.RequestingEmpire.Name, empireActivity.Target.Name, empireActivity.Price.ToString("0"));
                                    empireActivity.AssignedEmpire.SendMessageToEmpire(empireActivity.AssignedEmpire, EmpireMessageType.PirateAttackMissionFailed, empireActivity.Target, description2);
                                    description2 = string.Format(TextResolver.GetText("Pirate Attack Mission Failed Other"), empireActivity.AssignedEmpire.Name, empireActivity.Target.Name, empireActivity.Price.ToString("0"));
                                    empireActivity.RequestingEmpire.SendMessageToEmpire(empireActivity.RequestingEmpire, EmpireMessageType.PirateAttackMissionFailed, empireActivity.Target, description2);
                                }
                            }
                            break;
                        case EmpireActivityType.Smuggle:
                            {
                                string empty = string.Empty;
                                if (empireActivity.Target != null)
                                {
                                    empire.SendMessageToEmpire(description: (empireActivity.RequestingEmpire == IndependentEmpire) ? ((empireActivity.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate Independent"), empireActivity.Target.Name, new Resource(empireActivity.ResourceId).Name) : string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate Independent All Resources"), empireActivity.Target.Name)) : ((empireActivity.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate"), empireActivity.Target.Name, new Resource(empireActivity.ResourceId).Name, empireActivity.RequestingEmpire.Name) : string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate All Resources"), empireActivity.Target.Name, empireActivity.RequestingEmpire.Name)), recipientEmpire: empire, messageType: EmpireMessageType.PirateSmugglingMissionCompleted, subject: empireActivity.Target);
                                }
                                if (!empireActivityList.Contains(empireActivity))
                                {
                                    empireActivityList.Add(empireActivity);
                                }
                                break;
                            }
                    }
                    if (empireActivity.Type == EmpireActivityType.Attack || empireActivity.Type == EmpireActivityType.Smuggle)
                    {
                        empireActivityList2.Add(empireActivity);
                    }
                }
                for (int k = 0; k < empireActivityList2.Count; k++)
                {
                    EmpireActivity empireActivity2 = empireActivityList2[k];
                    if (empireActivity2 != null)
                    {
                        if (empireActivity2.Type == EmpireActivityType.Smuggle && empireActivity2.RelatedOrder != null)
                        {
                            empireActivity2.RelatedOrder.ExpiryDate = CurrentStarDate;
                        }
                        empire.PirateMissions.Remove(empireActivity2);
                        if (empireActivity2.RequestingEmpire != null && empireActivity2.RequestingEmpire.PirateMissions != null)
                        {
                            empireActivity2.RequestingEmpire.PirateMissions.RemoveEquivalent(empireActivity2);
                        }
                        PirateMissions.RemoveEquivalent(empireActivity2);
                    }
                }
            }
            for (int l = 0; l < empireActivityList.Count; l++)
            {
                EmpireActivity empireActivity3 = empireActivityList[l];
                if (empireActivity3 != null && empireActivity3.Target != null && empireActivity3.RequestingEmpire != null && empireActivity3.RequestingEmpire != IndependentEmpire)
                {
                    string empty2 = string.Empty;
                    empty2 = ((empireActivity3.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Other"), empireActivity3.Target.Name, new Resource(empireActivity3.ResourceId).Name) : string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Other All Resources"), empireActivity3.Target.Name));
                    empireActivity3.RequestingEmpire.SendMessageToEmpire(empireActivity3.RequestingEmpire, EmpireMessageType.PirateSmugglingMissionCompleted, empireActivity3.Target, empty2);
                }
            }
        }

        public void CancelPirateMissionsForTarget(StellarObject target, EmpireActivityType type)
        {
            if (IndependentEmpire != null && IndependentEmpire.PirateMissions != null)
            {
                EmpireActivityList empireActivityList = IndependentEmpire.PirateMissions.ResolveByTypeAndTarget(type, target);
                for (int i = 0; i < empireActivityList.Count; i++)
                {
                    EmpireActivity empireActivity = empireActivityList[i];
                    if (empireActivity != null)
                    {
                        IndependentEmpire.PirateMissions.Remove(empireActivity);
                        if (empireActivity.Type == EmpireActivityType.Smuggle && empireActivity.RelatedOrder != null)
                        {
                            empireActivity.RelatedOrder.ExpiryDate = CurrentStarDate;
                        }
                    }
                }
            }
            for (int j = 0; j < Empires.Count; j++)
            {
                Empire empire = Empires[j];
                if (empire == null || empire.PirateMissions == null)
                {
                    continue;
                }
                EmpireActivityList empireActivityList2 = empire.PirateMissions.ResolveByTypeAndTarget(type, target);
                for (int k = 0; k < empireActivityList2.Count; k++)
                {
                    EmpireActivity empireActivity2 = empireActivityList2[k];
                    if (empireActivity2 != null)
                    {
                        empire.PirateMissions.Remove(empireActivity2);
                        if (empireActivity2.Type == EmpireActivityType.Smuggle && empireActivity2.RelatedOrder != null)
                        {
                            empireActivity2.RelatedOrder.ExpiryDate = CurrentStarDate;
                        }
                    }
                }
            }
            for (int l = 0; l < PirateEmpires.Count; l++)
            {
                Empire empire2 = PirateEmpires[l];
                if (empire2 == null || empire2.PirateMissions == null)
                {
                    continue;
                }
                EmpireActivityList empireActivityList3 = empire2.PirateMissions.ResolveByTypeAndTarget(type, target);
                for (int m = 0; m < empireActivityList3.Count; m++)
                {
                    EmpireActivity empireActivity3 = empireActivityList3[m];
                    if (empireActivity3 != null)
                    {
                        empire2.PirateMissions.Remove(empireActivity3);
                        if (empireActivity3.Type == EmpireActivityType.Smuggle && empireActivity3.RelatedOrder != null)
                        {
                            empireActivity3.RelatedOrder.ExpiryDate = CurrentStarDate;
                        }
                    }
                }
            }
            EmpireActivityList empireActivityList4 = PirateMissions.ResolveByTypeAndTarget(type, target);
            for (int n = 0; n < empireActivityList4.Count; n++)
            {
                EmpireActivity empireActivity4 = empireActivityList4[n];
                if (empireActivity4 != null)
                {
                    PirateMissions.Remove(empireActivity4);
                    if (empireActivity4.Type == EmpireActivityType.Smuggle && empireActivity4.RelatedOrder != null)
                    {
                        empireActivity4.RelatedOrder.ExpiryDate = CurrentStarDate;
                    }
                }
            }
        }

        public void CheckCancelIntelligenceMissionsWithTarget(StellarObject target)
        {
            if (target == null)
            {
                return;
            }
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire == null || empire.Characters == null)
                {
                    continue;
                }
                for (int j = 0; j < empire.Characters.Count; j++)
                {
                    Character character = empire.Characters[j];
                    if (character == null || character.Role != CharacterRole.IntelligenceAgent)
                    {
                        continue;
                    }
                    IntelligenceMission mission = character.Mission;
                    if (mission == null || mission.Target == null)
                    {
                        continue;
                    }
                    if (mission.Target is Habitat)
                    {
                        Habitat habitat = (Habitat)mission.Target;
                        if (habitat == target)
                        {
                            empire.CancelIntelligenceMission(mission);
                            character.Mission = null;
                        }
                    }
                    else if (mission.Target is BuiltObject)
                    {
                        BuiltObject builtObject = (BuiltObject)mission.Target;
                        if (builtObject == target)
                        {
                            empire.CancelIntelligenceMission(mission);
                            character.Mission = null;
                        }
                    }
                }
            }
            for (int k = 0; k < PirateEmpires.Count; k++)
            {
                Empire empire2 = PirateEmpires[k];
                if (empire2 == null || empire2.Characters == null)
                {
                    continue;
                }
                for (int l = 0; l < empire2.Characters.Count; l++)
                {
                    Character character2 = empire2.Characters[l];
                    if (character2 == null || character2.Role != CharacterRole.IntelligenceAgent)
                    {
                        continue;
                    }
                    IntelligenceMission mission2 = character2.Mission;
                    if (mission2 == null || mission2.Target == null)
                    {
                        continue;
                    }
                    if (mission2.Target is Habitat)
                    {
                        Habitat habitat2 = (Habitat)mission2.Target;
                        if (habitat2 == target)
                        {
                            empire2.CancelIntelligenceMission(mission2);
                            character2.Mission = null;
                        }
                    }
                    else if (mission2.Target is BuiltObject)
                    {
                        BuiltObject builtObject2 = (BuiltObject)mission2.Target;
                        if (builtObject2 == target)
                        {
                            empire2.CancelIntelligenceMission(mission2);
                            character2.Mission = null;
                        }
                    }
                }
            }
        }

        public void SetupPirateAlliance(Empire empire, Empire pirateFaction, double monthlyFee, long startDate)
        {
        }

        public void CancelPirateAlliance(Empire pirateFaction, EmpireActivity alliance)
        {
        }

        public Race SelectRandomRacePreferHospitableHabitats(int intelligenceThreshhold, bool allowUnplayableRaces)
        {
            RaceList raceList = new RaceList();
            foreach (Race race in Races)
            {
                if ((allowUnplayableRaces || race.Playable) && race.IntelligenceLevel >= intelligenceThreshhold)
                {
                    int num = 1;
                    switch (race.NativeHabitatType)
                    {
                        case HabitatType.Continental:
                            num = 5;
                            break;
                        case HabitatType.MarshySwamp:
                            num = 4;
                            break;
                        case HabitatType.Desert:
                            num = 3;
                            break;
                        case HabitatType.Ocean:
                            num = 2;
                            break;
                        case HabitatType.Ice:
                            num = 1;
                            break;
                        case HabitatType.Volcanic:
                            num = 1;
                            break;
                        case HabitatType.BarrenRock:
                            num = 0;
                            break;
                    }
                    for (int i = 0; i < num; i++)
                    {
                        raceList.Add(race);
                    }
                }
            }
            Race result = null;
            if (raceList.Count > 0)
            {
                result = raceList[Rnd.Next(0, raceList.Count)];
            }
            return result;
        }

        public Race SelectRandomRace(int intelligenceThreshhold)
        {
            RaceList raceList = new RaceList();
            for (int i = 0; i < Races.Count; i++)
            {
                Race race = Races[i];
                if (race.IntelligenceLevel >= intelligenceThreshhold && race.Playable)
                {
                    raceList.Add(race);
                }
            }
            Race result = null;
            if (raceList.Count > 0)
            {
                result = raceList[Rnd.Next(0, raceList.Count)];
            }
            return result;
        }

        private Race SelectRandomPirateRace()
        {
            RaceList raceList = new RaceList();
            for (int i = 0; i < Races.Count; i++)
            {
                Race race = Races[i];
                if (race.CanBePirate)
                {
                    raceList.Add(race);
                }
            }
            Race result = null;
            if (raceList.Count > 0)
            {
                result = raceList[Rnd.Next(0, raceList.Count)];
            }
            return result;
        }

        private Race SelectRandomAggressiveRace(int aggressionThreshhold)
        {
            RaceList raceList = new RaceList();
            for (int i = 0; i < Races.Count; i++)
            {
                Race race = Races[i];
                if (race.AggressionLevel >= aggressionThreshhold && race.Playable)
                {
                    raceList.Add(race);
                }
            }
            Race result = null;
            if (raceList.Count > 0)
            {
                result = raceList[Rnd.Next(0, raceList.Count)];
            }
            return result;
        }

        public ComponentList GetSuperPirateBaseComponents(double overpowerFactor, double techLevel)
        {
            ComponentList componentList = new ComponentList();
            int num = (int)(30.0 * overpowerFactor);
            int num2 = (int)(18.0 * overpowerFactor);
            int num3 = (int)(18.0 * overpowerFactor);
            int num4 = (int)(12.0 * overpowerFactor);
            int num5 = (int)(10.0 * overpowerFactor);
            int num6 = (int)(5.0 * overpowerFactor);
            int num7 = (int)(6.0 * overpowerFactor);
            int num8 = (int)(4.0 * overpowerFactor);
            int num9 = (int)(4.0 * overpowerFactor);
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommandCenter, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommandCenter, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, techLevel));
            for (int i = 0; i < num7; i++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.Reactor, techLevel));
            }
            for (int j = 0; j < 20; j++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageFuel, techLevel));
            }
            for (int k = 0; k < 30; k++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageCargo, techLevel));
            }
            componentList.Add(Component.EvaluateLatest(ComponentType.ExtractorGasExtractor, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommerceCenter, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.HabitationMedicalCenter, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.HabitationRecreationCenter, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.SensorProximityArray, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerTargetting, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCountermeasures, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.SensorLongRange, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ConstructionBuild, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ConstructionBuild, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.WeaponIonCannon, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.WeaponIonCannon, techLevel));
            for (int l = 0; l < num; l++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.Armor, techLevel));
            }
            for (int m = 0; m < num2; m++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.Shields, techLevel));
            }
            for (int n = 0; n < num3; n++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponBeam, techLevel));
            }
            for (int num10 = 0; num10 < num5; num10++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponPointDefense, techLevel));
            }
            for (int num11 = 0; num11 < num4; num11++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponTorpedo, techLevel));
            }
            for (int num12 = 0; num12 < num8; num12++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponTractorBeam, techLevel));
            }
            for (int num13 = 0; num13 < num9; num13++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.AssaultPod, techLevel));
            }
            for (int num14 = 0; num14 < num6; num14++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.FighterBay, techLevel));
            }
            componentList.Add(Component.EvaluateLatest(ComponentType.WeaponAreaDestruction, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.WeaponIonDefense, techLevel));
            return componentList;
        }

        public ComponentList GetSuperPirateDefensiveBaseComponents(double overpowerFactor, double techLevel)
        {
            ComponentList componentList = new ComponentList();
            int num = (int)(15.0 * overpowerFactor);
            int num2 = (int)(12.0 * overpowerFactor);
            int num3 = (int)(12.0 * overpowerFactor);
            int num4 = (int)(8.0 * overpowerFactor);
            int num5 = (int)(8.0 * overpowerFactor);
            int num6 = (int)(2.0 * overpowerFactor);
            int num7 = (int)(3.0 * overpowerFactor);
            int num8 = (int)(2.0 * overpowerFactor);
            int num9 = (int)(2.0 * overpowerFactor);
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommandCenter, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.DamageControl, techLevel));
            for (int i = 0; i < num7; i++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.Reactor, techLevel));
            }
            for (int j = 0; j < 10; j++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageFuel, techLevel));
            }
            for (int k = 0; k < 15; k++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.StorageCargo, techLevel));
            }
            componentList.Add(Component.EvaluateLatest(ComponentType.ExtractorGasExtractor, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.StorageDockingBay, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.EnergyCollector, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCommerceCenter, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.SensorProximityArray, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ConstructionBuild, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerTargetting, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.ComputerCountermeasures, techLevel));
            for (int l = 0; l < num; l++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.Armor, techLevel));
            }
            for (int m = 0; m < num2; m++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.Shields, techLevel));
            }
            for (int n = 0; n < num3; n++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponBeam, techLevel));
            }
            for (int num10 = 0; num10 < num5; num10++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponPointDefense, techLevel));
            }
            for (int num11 = 0; num11 < num4; num11++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.WeaponTorpedo, techLevel));
            }
            for (int num12 = 0; num12 < num8; num12++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.WeaponTractorBeam, techLevel));
            }
            for (int num13 = 0; num13 < num9; num13++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentCategoryType.AssaultPod, techLevel));
            }
            for (int num14 = 0; num14 < num6; num14++)
            {
                componentList.Add(Component.EvaluateLatest(ComponentType.FighterBay, techLevel));
            }
            componentList.Add(Component.EvaluateLatest(ComponentType.WeaponIonCannon, techLevel));
            componentList.Add(Component.EvaluateLatest(ComponentType.WeaponIonDefense, techLevel));
            return componentList;
        }

        public Design GenerateSuperPirateBaseDesign(double techLevel)
        {
            return GenerateSuperPirateBaseDesign(1.0, techLevel);
        }

        public Design GenerateSuperPirateBaseDesign(double overpowerFactor, double techLevel)
        {
            ComponentList superPirateBaseComponents = GetSuperPirateBaseComponents(overpowerFactor, techLevel);
            string text = TextResolver.GetText("Phantom Pirate Base");
            Design design = new Design(text);
            design.Role = BuiltObjectRole.Base;
            design.SubRole = BuiltObjectSubRole.GenericBase;
            design = AddComponentsToDesign(design, superPirateBaseComponents, null);
            design.Stance = BuiltObjectStance.AttackEnemies;
            design.FleeWhen = BuiltObjectFleeWhen.Never;
            design.TacticsStrongerShips = BattleTactics.PointBlank;
            design.TacticsWeakerShips = BattleTactics.PointBlank;
            design.TacticsInvasion = InvasionTactics.DoNotInvade;
            design.Name = text;
            design.DateCreated = CurrentStarDate;
            design.Empire = null;
            design.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.GenericBase);
            design.ReDefine();
            return design;
        }

        public Design GenerateSuperPirateDefensiveBaseDesign(double techLevel)
        {
            return GenerateSuperPirateDefensiveBaseDesign(1.0, techLevel);
        }

        public Design GenerateSuperPirateDefensiveBaseDesign(double overpowerFactor, double techLevel)
        {
            ComponentList superPirateDefensiveBaseComponents = GetSuperPirateDefensiveBaseComponents(overpowerFactor, techLevel);
            string text = TextResolver.GetText("Phantom Pirate Defensive Base");
            Design design = new Design(text);
            design.Role = BuiltObjectRole.Base;
            design.SubRole = BuiltObjectSubRole.DefensiveBase;
            design = AddComponentsToDesign(design, superPirateDefensiveBaseComponents, null);
            design.Stance = BuiltObjectStance.AttackEnemies;
            design.FleeWhen = BuiltObjectFleeWhen.Never;
            design.TacticsStrongerShips = BattleTactics.PointBlank;
            design.TacticsWeakerShips = BattleTactics.PointBlank;
            design.TacticsInvasion = InvasionTactics.DoNotInvade;
            design.Name = text;
            design.DateCreated = CurrentStarDate;
            design.Empire = null;
            design.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.DefensiveBase);
            design.ReDefine();
            return design;
        }

        public Empire GenerateSuperPirateFaction(Habitat habitat, string name, Race race, double techLevel)
        {
            if (string.IsNullOrEmpty(name))
            {
                name = GeneratePirateEmpireName(habitat, PiratePlayStyle.Pirate);
            }
            if (race == null)
            {
                race = SelectRandomPirateRace();
                if (race == null)
                {
                    race = SelectRandomAggressiveRace(115);
                }
                if (race == null)
                {
                    race = SelectRandomRace(0);
                }
            }
            SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
            Empire empire = GeneratePirateEmpire(habitat, (int)x, (int)y, race, -1, techLevel, PiratePlayStyle.Pirate, isPlayerEmpire: false, isSuperPirates: true);
            empire.PirateEmpireSuperPirates = true;
            Design design = empire.GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Escort), techLevel);
            Design design2 = empire.GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Frigate), techLevel);
            Design design3 = empire.GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Destroyer), techLevel);
            Design design4 = empire.GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Cruiser), techLevel);
            Design design5 = empire.GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.CapitalShip), techLevel);
            Design design6 = empire.GenerateDesignFromSpec(DesignSpecifications.GetBySubRole(BuiltObjectSubRole.Carrier), techLevel);
            Design design7 = GenerateSuperPirateDefensiveBaseDesign(techLevel);
            Design design8 = GenerateSuperPirateBaseDesign(techLevel);
            design = UpgradeMilitaryShipDesignMoreEngines(design);
            design2 = UpgradeMilitaryShipDesignMoreEngines(design2);
            design3 = UpgradeMilitaryShipDesignMoreEngines(design3);
            design4 = UpgradeMilitaryShipDesignMoreEngines(design4);
            design5 = UpgradeMilitaryShipDesignMoreEngines(design5);
            design6 = UpgradeMilitaryShipDesignMoreEngines(design6);
            design = UpgradeMilitaryShipDesignMoreWeapons(design);
            design2 = UpgradeMilitaryShipDesignMoreWeapons(design2);
            design3 = UpgradeMilitaryShipDesignMoreWeapons(design3);
            design4 = UpgradeMilitaryShipDesignMoreWeapons(design4);
            design5 = UpgradeMilitaryShipDesignMoreWeapons(design5);
            design6 = UpgradeMilitaryShipDesignMoreWeapons(design6);
            design.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.Escort);
            design2.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.Frigate);
            design3.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.Destroyer);
            design4.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.Cruiser);
            design5.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.CapitalShip);
            design6.PictureRef = ShipImageHelper.ResolveSuperPirateShipImageIndex(BuiltObjectSubRole.Carrier);
            empire.Designs.Add(design);
            empire.Designs.Add(design2);
            empire.Designs.Add(design3);
            empire.Designs.Add(design4);
            empire.Designs.Add(design5);
            empire.Designs.Add(design6);
            empire.Designs.Add(design7);
            empire.Designs.Add(design8);
            string name2 = GeneratePirateBaseName(habitat);
            design8.BuildCount++;
            BuiltObject builtObject = new BuiltObject(design8, name2, this, fullyBuilt: true);
            builtObject.Empire = empire;
            builtObject.Heading = SelectRandomHeading();
            builtObject.TargetHeading = builtObject.Heading;
            builtObject.ReDefine();
            builtObject.CurrentFuel = builtObject.FuelCapacity;
            builtObject.CurrentShields = builtObject.ShieldsCapacity;
            empire.AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: false, isStateOwned: true, 0, 0, sendMessage: false);
            for (int i = 0; i < 3; i++)
            {
                string name3 = GenerateBuiltObjectName(design7, habitat);
                design7.BuildCount++;
                BuiltObject builtObject2 = new BuiltObject(design7, name3, this, fullyBuilt: true);
                builtObject2.Empire = empire;
                builtObject2.Heading = SelectRandomHeading();
                builtObject2.TargetHeading = builtObject2.Heading;
                builtObject2.ReDefine();
                builtObject2.CurrentFuel = builtObject2.FuelCapacity;
                builtObject2.CurrentShields = builtObject2.ShieldsCapacity;
                empire.DetermineOrbitalBaseLocation(habitat, out x, out y);
                empire.AddBuiltObjectToGalaxy(builtObject2, habitat, offsetLocationFromParent: false, isStateOwned: true, (int)x, (int)y, sendMessage: false);
            }
            int num = Rnd.Next(20, 30);
            for (int j = 0; j < num; j++)
            {
                Design design9 = null;
                switch (Rnd.Next(0, 25))
                {
                    case 0:
                    case 1:
                    case 2:
                        design9 = design;
                        break;
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        design9 = design2;
                        break;
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                        design9 = design3;
                        break;
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                        design9 = design4;
                        break;
                    case 21:
                    case 22:
                        design9 = design5;
                        break;
                    case 23:
                    case 24:
                        design9 = design6;
                        break;
                }
                design9.BuildCount++;
                string name4 = SelectRandomUniqueMilitaryShipName();
                BuiltObject builtObject3 = new BuiltObject(design9, name4, this, fullyBuilt: true);
                builtObject3.Empire = empire;
                builtObject3.Heading = SelectRandomHeading();
                builtObject3.TargetHeading = builtObject3.Heading;
                builtObject3.ReDefine();
                builtObject3.CurrentFuel = builtObject3.FuelCapacity;
                builtObject3.CurrentShields = builtObject3.ShieldsCapacity;
                empire.AddBuiltObjectToGalaxy(builtObject3, habitat, offsetLocationFromParent: true, isStateOwned: true, sendMessage: false);
            }
            return empire;
        }

        public Design UpgradeMilitaryShipDesignMoreWeapons(Design design)
        {
            if (design != null)
            {
                int num = design.Components.CountByCategory(ComponentCategoryType.WeaponBeam);
                int num2 = design.Components.CountByCategory(ComponentCategoryType.WeaponTorpedo);
                int num3 = design.Components.CountByCategory(ComponentCategoryType.WeaponPointDefense);
                int num4 = 3;
                int num5 = 0;
                int num6 = 0;
                switch (design.SubRole)
                {
                    case BuiltObjectSubRole.Escort:
                        num4 = 3;
                        num5 = 0;
                        num6 = 0;
                        break;
                    case BuiltObjectSubRole.Frigate:
                        num4 = 5;
                        num5 = 0;
                        num6 = 1;
                        break;
                    case BuiltObjectSubRole.Destroyer:
                        num4 = 6;
                        num5 = 1;
                        num6 = 2;
                        break;
                    case BuiltObjectSubRole.Cruiser:
                        num4 = 10;
                        num5 = 4;
                        num6 = 4;
                        break;
                    case BuiltObjectSubRole.CapitalShip:
                        num4 = 16;
                        num5 = 8;
                        num6 = 8;
                        break;
                    case BuiltObjectSubRole.Carrier:
                        num4 = 4;
                        num5 = 0;
                        num6 = 4;
                        break;
                    case BuiltObjectSubRole.TroopTransport:
                        num4 = 2;
                        num5 = 0;
                        num6 = 1;
                        break;
                }
                if (num < num4)
                {
                    Component firstByCategory = design.Components.GetFirstByCategory(ComponentCategoryType.WeaponBeam);
                    if (firstByCategory != null)
                    {
                        for (int i = 0; i < num4 - num; i++)
                        {
                            design.Components.Add(new Component(firstByCategory.ComponentID));
                        }
                    }
                }
                if (num2 < num5)
                {
                    Component firstByCategory2 = design.Components.GetFirstByCategory(ComponentCategoryType.WeaponTorpedo);
                    if (firstByCategory2 != null)
                    {
                        for (int j = 0; j < num5 - num2; j++)
                        {
                            design.Components.Add(new Component(firstByCategory2.ComponentID));
                        }
                    }
                }
                if (num3 < num6)
                {
                    Component firstByCategory3 = design.Components.GetFirstByCategory(ComponentCategoryType.WeaponPointDefense);
                    if (firstByCategory3 != null)
                    {
                        for (int k = 0; k < num6 - num3; k++)
                        {
                            design.Components.Add(new Component(firstByCategory3.ComponentID));
                        }
                    }
                }
            }
            return design;
        }

        public Design UpgradeMilitaryShipDesignMoreEngines(Design design)
        {
            if (design != null)
            {
                int num = design.Components.CountByType(ComponentType.EngineMainThrust);
                int num2 = design.Components.CountByType(ComponentType.EngineVectoring);
                int num3 = 5;
                int num4 = 2;
                switch (design.SubRole)
                {
                    case BuiltObjectSubRole.Escort:
                        num3 = 5;
                        num4 = 2;
                        break;
                    case BuiltObjectSubRole.Frigate:
                        num3 = 7;
                        num4 = 2;
                        break;
                    case BuiltObjectSubRole.Destroyer:
                        num3 = 7;
                        num4 = 2;
                        break;
                    case BuiltObjectSubRole.Cruiser:
                        num3 = 10;
                        num4 = 3;
                        break;
                    case BuiltObjectSubRole.CapitalShip:
                        num3 = 12;
                        num4 = 4;
                        break;
                    case BuiltObjectSubRole.Carrier:
                        num3 = 10;
                        num4 = 3;
                        break;
                    case BuiltObjectSubRole.TroopTransport:
                        num3 = 6;
                        num4 = 2;
                        break;
                }
                if (num < num3)
                {
                    Component firstByType = design.Components.GetFirstByType(ComponentType.EngineMainThrust);
                    if (firstByType != null)
                    {
                        design.Components.Add(new Component(firstByType.ComponentID));
                    }
                }
                if (num2 < num4)
                {
                    Component firstByType2 = design.Components.GetFirstByType(ComponentType.EngineVectoring);
                    if (firstByType2 != null)
                    {
                        design.Components.Add(new Component(firstByType2.ComponentID));
                    }
                }
            }
            return design;
        }

        public static double CalculatePlanetaryFacilityBuildTimeFactor(PlanetaryFacility planetaryFacility, Empire empire)
        {
            double num = 1.0;
            if (planetaryFacility != null && empire != null)
            {
                PlanetaryFacilityType type = planetaryFacility.Type;
                num = ((type != PlanetaryFacilityType.Wonder && type != PlanetaryFacilityType.PirateCriminalNetwork) ? (num * empire.PlanetaryFacilityBuildFactor) : (num * empire.PlanetaryWonderBuildFactor));
            }
            return num;
        }

        public static double CalculatePlanetaryFacilityCost(PlanetaryFacilityDefinition planetaryFacility, Empire empire)
        {
            double num = 0.0;
            if (planetaryFacility != null)
            {
                num = planetaryFacility.Cost;
                if (empire != null)
                {
                    PlanetaryFacilityType type = planetaryFacility.Type;
                    num = ((type != PlanetaryFacilityType.Wonder && type != PlanetaryFacilityType.PirateCriminalNetwork) ? (num * empire.PlanetaryFacilityBuildFactor) : (num * empire.PlanetaryWonderBuildFactor));
                }
            }
            return num;
        }

        public PiratePlayStyle SelectRandomPiratePlaystyle()
        {
            return Rnd.Next(0, 4) switch
            {
                0 => PiratePlayStyle.Balanced,
                1 => PiratePlayStyle.Pirate,
                2 => PiratePlayStyle.Mercenary,
                3 => PiratePlayStyle.Smuggler,
                _ => PiratePlayStyle.Balanced,
            };
        }

        public static List<string> ResolvePirateFactionModifierDescriptions(PiratePlayStyle piratePlayStyle, out List<double> factorValues, out List<bool> modifiersAreBonuses)
        {
            double smugglingIncomeFactor = 1.0;
            double raidStrengthFactor = 1.0;
            double raidBonusFactor = 1.0;
            double shipMaintenancePrivateFactor = 1.0;
            double shipMaintenanceStateFactor = 1.0;
            double researchWeaponsFactor = 1.0;
            double researchEnergyFactor = 1.0;
            double researchHighTechFactor = 1.0;
            double planetaryFacilityEliminationFactor = 1.0;
            double lootingFactor = 1.0;
            double planetaryFacilityBuildFactor = 1.0;
            double planetaryWonderBuildFactor = 1.0;
            SetPirateFactionModifiers(piratePlayStyle, out smugglingIncomeFactor, out raidStrengthFactor, out raidBonusFactor, out shipMaintenancePrivateFactor, out shipMaintenanceStateFactor, out researchWeaponsFactor, out researchEnergyFactor, out researchHighTechFactor, out planetaryFacilityEliminationFactor, out lootingFactor, out planetaryFacilityBuildFactor, out planetaryWonderBuildFactor);
            List<string> list = new List<string>();
            factorValues = new List<double>();
            modifiersAreBonuses = new List<bool>();
            if (smugglingIncomeFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Smuggling Income") + ": " + (smugglingIncomeFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(smugglingIncomeFactor);
                modifiersAreBonuses.Add(item: true);
            }
            if (raidStrengthFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Raid Strength") + ": " + (raidStrengthFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(raidStrengthFactor);
                modifiersAreBonuses.Add(item: true);
            }
            if (raidBonusFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Raid Bonuses") + ": " + (raidBonusFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(raidBonusFactor);
                modifiersAreBonuses.Add(item: true);
            }
            if (lootingFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Looting Bonuses") + ": " + (lootingFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(lootingFactor);
                modifiersAreBonuses.Add(item: true);
            }
            if (shipMaintenanceStateFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Ship Maintenance State") + ": " + (shipMaintenanceStateFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(shipMaintenanceStateFactor);
                modifiersAreBonuses.Add(item: false);
            }
            if (shipMaintenancePrivateFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Ship Maintenance Private") + ": " + (shipMaintenancePrivateFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(shipMaintenancePrivateFactor);
                modifiersAreBonuses.Add(item: false);
            }
            if (researchWeaponsFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Research Weapons") + ": " + (researchWeaponsFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(researchWeaponsFactor);
                modifiersAreBonuses.Add(item: true);
            }
            if (researchEnergyFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Research Energy") + ": " + (researchEnergyFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(researchEnergyFactor);
                modifiersAreBonuses.Add(item: true);
            }
            if (researchHighTechFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Research HighTech") + ": " + (researchHighTechFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(researchHighTechFactor);
                modifiersAreBonuses.Add(item: true);
            }
            if (planetaryFacilityBuildFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Facility Build") + ": " + (planetaryFacilityBuildFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(planetaryFacilityBuildFactor);
                modifiersAreBonuses.Add(item: false);
            }
            if (planetaryWonderBuildFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Wonder Build") + ": " + (planetaryWonderBuildFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(planetaryWonderBuildFactor);
                modifiersAreBonuses.Add(item: false);
            }
            if (planetaryFacilityEliminationFactor != 1.0)
            {
                list.Add(TextResolver.GetText("Pirate Bonus Modifier Facility Elimination") + ": " + (planetaryFacilityEliminationFactor - 1.0).ToString("+0%;-0%"));
                factorValues.Add(planetaryFacilityEliminationFactor);
                modifiersAreBonuses.Add(item: true);
            }
            return list;
        }

        public static void SetPirateFactionModifiers(PiratePlayStyle piratePlayStyle, out double smugglingIncomeFactor, out double raidStrengthFactor, out double raidBonusFactor, out double shipMaintenancePrivateFactor, out double shipMaintenanceStateFactor, out double researchWeaponsFactor, out double researchEnergyFactor, out double researchHighTechFactor, out double planetaryFacilityEliminationFactor, out double lootingFactor, out double planetaryFacilityBuildFactor, out double planetaryWonderBuildFactor)
        {
            smugglingIncomeFactor = 1.0;
            raidStrengthFactor = 1.0;
            raidBonusFactor = 1.0;
            shipMaintenancePrivateFactor = 1.0;
            shipMaintenanceStateFactor = 1.0;
            researchWeaponsFactor = 1.0;
            researchEnergyFactor = 1.0;
            researchHighTechFactor = 1.0;
            planetaryFacilityEliminationFactor = 1.0;
            lootingFactor = 1.0;
            planetaryFacilityBuildFactor = 1.0;
            planetaryWonderBuildFactor = 1.0;
            switch (piratePlayStyle)
            {
                case PiratePlayStyle.Balanced:
                    smugglingIncomeFactor = 1.0;
                    raidStrengthFactor = 1.0;
                    raidBonusFactor = 1.0;
                    shipMaintenancePrivateFactor = 1.0;
                    shipMaintenanceStateFactor = 1.0;
                    researchWeaponsFactor = 1.0;
                    researchEnergyFactor = 1.0;
                    researchHighTechFactor = 1.0;
                    planetaryFacilityEliminationFactor = 1.0;
                    lootingFactor = 1.0;
                    planetaryFacilityBuildFactor = 1.0;
                    planetaryWonderBuildFactor = 1.0;
                    break;
                case PiratePlayStyle.Pirate:
                    smugglingIncomeFactor = 0.7;
                    raidStrengthFactor = 1.25;
                    raidBonusFactor = 1.4;
                    shipMaintenancePrivateFactor = 1.1;
                    shipMaintenanceStateFactor = 1.1;
                    researchWeaponsFactor = 1.2;
                    researchEnergyFactor = 1.0;
                    researchHighTechFactor = 0.8;
                    planetaryFacilityEliminationFactor = 0.8;
                    lootingFactor = 1.0;
                    planetaryFacilityBuildFactor = 1.5;
                    planetaryWonderBuildFactor = 1.5;
                    break;
                case PiratePlayStyle.Mercenary:
                    smugglingIncomeFactor = 0.75;
                    raidStrengthFactor = 1.25;
                    raidBonusFactor = 0.75;
                    shipMaintenancePrivateFactor = 1.25;
                    shipMaintenanceStateFactor = 0.75;
                    researchWeaponsFactor = 1.1;
                    researchEnergyFactor = 1.1;
                    researchHighTechFactor = 0.8;
                    planetaryFacilityEliminationFactor = 1.33;
                    lootingFactor = 1.33;
                    planetaryFacilityBuildFactor = 0.75;
                    planetaryWonderBuildFactor = 1.25;
                    break;
                case PiratePlayStyle.Smuggler:
                    smugglingIncomeFactor = 1.5;
                    raidStrengthFactor = 0.75;
                    raidBonusFactor = 0.75;
                    shipMaintenancePrivateFactor = 0.75;
                    shipMaintenanceStateFactor = 1.25;
                    researchWeaponsFactor = 0.8;
                    researchEnergyFactor = 1.1;
                    researchHighTechFactor = 1.1;
                    planetaryFacilityEliminationFactor = 1.7;
                    lootingFactor = 0.75;
                    planetaryFacilityBuildFactor = 1.0;
                    planetaryWonderBuildFactor = 0.75;
                    break;
            }
        }

        public Empire GeneratePirateEmpire(Habitat habitat, int offsetX, int offsetY, bool useRace)
        {
            Race race = null;
            PiratePlayStyle piratePlaystyle = SelectRandomPiratePlaystyle();
            if (useRace)
            {
                race = SelectRandomPirateRace();
                if (race == null)
                {
                    race = SelectRandomAggressiveRace(115);
                }
                if (race == null)
                {
                    race = SelectRandomRace(0);
                }
                piratePlaystyle = race.DefaultPiratePlaystyle;
            }
            return GeneratePirateEmpire(habitat, offsetX, offsetY, race, piratePlaystyle);
        }

        public Empire GeneratePirateEmpire(Habitat habitat, int offsetX, int offsetY, Race race, PiratePlayStyle piratePlaystyle)
        {
            return GeneratePirateEmpire(habitat, offsetX, offsetY, race, -1, 0.5, piratePlaystyle, isPlayerEmpire: false, isSuperPirates: false);
        }

        public Empire GeneratePirateEmpire(Habitat habitat, int offsetX, int offsetY, Race race, int designPictureFamilyIndex, double techLevel, PiratePlayStyle piratePlaystyle, bool isPlayerEmpire, bool isSuperPirates)
        {
            if (Empires != null && Empires.Count > 0)
            {
                int index = Rnd.Next(0, Empires.Count);
                _ = Empires[index];
            }
            EmpirePolicy empirePolicy = LoadEmpirePolicy(race, isPirate: true);
            if (isPlayerEmpire)
            {
                empirePolicy.ImplementEnslavementWithPenalColonies = false;
                empirePolicy.AcceptPirateSmugglingMissions = false;
                empirePolicy.BidOnPirateAttackMissions = false;
                empirePolicy.BidOnPirateDefendMissions = false;
                empirePolicy.OfferSmugglingPirateMissions = 0;
                empirePolicy.OfferDefensivePirateMissionsSituation = 0;
                empirePolicy.OfferPirateAttackMissions = 0;
            }
            string name = GeneratePirateEmpireName(habitat, piratePlaystyle);
            Empire empire = new Empire(this, name, isIndependentEmpire: false, habitat, race, empirePolicy);
            empire.PiratePlayStyle = piratePlaystyle;
            bool flag = false;
            if (StartingAge == 0)
            {
                long num = CurrentStarDate - _StartStarDate;
                if (num <= 120000)
                {
                    flag = true;
                }
            }
            if (!flag && !isSuperPirates)
            {
                empire.DifficultyLevelModifier = 0.5;
            }
            SetEmpireDifficultyFactors(empire);
            empire.SetPirateFactionModifiers(empire.PiratePlayStyle);
            empire.PreWarpProgressEventOccurredSendPirateRaid = true;
            empire.PreWarpProgressEventOccurredExperienceFirstPirateRaid = true;
            empire.PreWarpProgressEventOccurredFirstContactPirateOrIndependent = true;
            empire.PreWarpProgressEventOccurredFirstContactNormalEmpire = true;
            empire.PreWarpProgressEventOccurredBuildFirstShip = true;
            empire.PreWarpProgressEventOccurredBuildFirstSpaceport = true;
            empire.PreWarpProgressEventOccurredBuildFirstMiningStation = true;
            empire.PreWarpProgressEventOccurredBuildFirstResearchStation = true;
            empire.PreWarpProgressEventOccurredDiscoverHyperspaceTech = true;
            empire.PreWarpProgressEventOccurredDiscoverColonizationTech = true;
            empire.PreWarpProgressEventOccurredFirstHyperjump = true;
            empire.PreWarpProgressEventOccurredEncounterFirstKaltor = true;
            empire.PreWarpProgressEventOccurredBuildFirstMilitaryShip = true;
            Habitat habitat2 = FastFindNearestIndependentHabitat(habitat.Xpos, habitat.Ypos);
            if (habitat2 != null && !empire.CheckSystemExplored(habitat2.SystemIndex))
            {
                Habitat systemStar = DetermineHabitatSystemStar(habitat2);
                empire.SetSystemVisibility(systemStar, SystemVisibilityStatus.Explored);
                empire.ResourceMap.SetResourcesKnown(Systems[systemStar].SystemStar, known: true);
                for (int i = 0; i < Systems[systemStar].Habitats.Count; i++)
                {
                    empire.ResourceMap.SetResourcesKnown(Systems[systemStar].Habitats[i], known: true);
                }
            }
            PirateEmpires.Add(empire);
            empire.LargeFlagPicture = _PirateFlagLarge;
            empire.SmallFlagPicture = _PirateFlagSmall;
            empire.MainColor = Color.FromArgb(1, 1, 1);
            empire.SecondaryColor = Color.FromArgb(254, 254, 254);
            Bitmap smallFlagPicture = null;
            Bitmap largeFlagPicture = null;
            if (!isSuperPirates)
            {
                Color mainColor = Color.FromArgb(1, 1, 1);
                Color secondaryColor = Color.FromArgb(254, 254, 254);
                empire.SelectEmpireColors(isPirateFaction: true, out mainColor, out secondaryColor);
                empire.MainColor = mainColor;
                empire.SecondaryColor = secondaryColor;
                if (FlagShapesPirates.Count >= 30 && piratePlaystyle != 0)
                {
                    List<Bitmap> range = FlagShapesPirates.GetRange(0, 18);
                    List<Bitmap> range2 = FlagShapesPirates.GetRange(18, FlagShapesPirates.Count - 18);
                    switch (piratePlaystyle)
                    {
                        case PiratePlayStyle.Balanced:
                            empire.FlagShape = GenerateEmpireFlag(mainColor, secondaryColor, -1, range2, ref smallFlagPicture, ref largeFlagPicture);
                            break;
                        case PiratePlayStyle.Mercenary:
                            empire.FlagShape = GenerateEmpireFlag(mainColor, secondaryColor, -1, range, ref smallFlagPicture, ref largeFlagPicture);
                            break;
                        case PiratePlayStyle.Pirate:
                            empire.FlagShape = GenerateEmpireFlag(mainColor, secondaryColor, -1, range, ref smallFlagPicture, ref largeFlagPicture);
                            break;
                        case PiratePlayStyle.Smuggler:
                            empire.FlagShape = GenerateEmpireFlag(mainColor, secondaryColor, -1, range2, ref smallFlagPicture, ref largeFlagPicture);
                            break;
                    }
                }
                else
                {
                    empire.FlagShape = GenerateEmpireFlag(mainColor, secondaryColor, -1, FlagShapesPirates, ref smallFlagPicture, ref largeFlagPicture);
                }
                empire.LargeFlagPicture = largeFlagPicture;
                empire.SmallFlagPicture = smallFlagPicture;
            }
            Bitmap bitmap = (empire.MediumFlagPicture = GraphicsHelper.ScaleImage(empire.LargeFlagPicture, 35, 21, 1f, lowQuality: false));
            if (!isSuperPirates)
            {
                using Graphics graphics = Graphics.FromImage(largeFlagPicture);
                GraphicsHelper.SetGraphicsQualityToHigh(graphics);
                graphics.DrawImage(srcRect: new Rectangle(0, 0, PirateFlagLarge.Width, PirateFlagLarge.Height), destRect: new Rectangle(2, 2, 35, 22), image: PirateFlagLarge, srcUnit: GraphicsUnit.Pixel);
            }
            empire.Policy = empirePolicy;
            if (designPictureFamilyIndex >= 0)
            {
                empire.DesignPictureFamilyIndex = designPictureFamilyIndex;
            }
            if (techLevel != 0.5)
            {
                empire.Research.TechTree = ResearchNodeDefinitionsStatic.SetTechTreeLevel(this, empire.Research.TechTree, race, techLevel, isPirate: true);
            }
            else
            {
                empire.Research.TechTree = ResearchNodeDefinitionsStatic.SetTechTreeStartingDefaultsPirates(empire.Research.TechTree, race, empire.Policy);
            }
            empire.Research.Update(race);
            empire.ReviewResearchAbilities();
            empire.ReviewDesignsBuiltObjectsImprovedComponents();
            empire.PirateEmpireBaseHabitat = habitat;
            empire.GenerateDesignSpecifications(this, empire.DominantRace, isPirate: true, empire.DominantRace.Name);
            empire.CreateNewDesigns(CurrentStarDate);
            if (!isSuperPirates)
            {
                BuiltObject builtObject = null;
                Design design = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.SmallSpacePort, empire);
                if (design != null)
                {
                    string name2 = GeneratePirateBaseName(habitat);
                    design.BuildCount++;
                    builtObject = new BuiltObject(design, name2, this, fullyBuilt: true);
                    builtObject.Empire = empire;
                    builtObject.Heading = SelectRandomHeading();
                    builtObject.TargetHeading = builtObject.Heading;
                    builtObject.SupportCostFactor = 0f;
                    builtObject.ReDefine();
                    builtObject.CurrentFuel = builtObject.FuelCapacity;
                    builtObject.CurrentShields = builtObject.ShieldsCapacity;
                    empire.AddBuiltObjectToGalaxy(builtObject, habitat, offsetLocationFromParent: false, isStateOwned: true, offsetX, offsetY, sendMessage: false);
                    int num2 = 6000;
                    int num3 = 4000;
                    int num4 = 2000;
                    int num5 = 800;
                    for (int j = 0; j < ResourceSystem.StrategicResourcesOrderedByRelativeImportance.Count; j++)
                    {
                        ResourceDefinition resourceDefinition = ResourceSystem.StrategicResourcesOrderedByRelativeImportance[j];
                        if (resourceDefinition != null)
                        {
                            int num6 = num2;
                            num6 = ((resourceDefinition.RelativeImportance > 0.4f || resourceDefinition.IsFuel) ? num2 : ((resourceDefinition.RelativeImportance > 0.25f) ? num3 : ((!(resourceDefinition.RelativeImportance > 0.1f)) ? num5 : num4)));
                            builtObject.Cargo.Add(new Cargo(new Resource(resourceDefinition.ResourceID), num6, empire));
                        }
                    }
                    int num7 = 2;
                    int num8 = 2;
                    int num9 = 2;
                    int num10 = 1;
                    int num11 = 1;
                    int num12 = 1;
                    int count = 2;
                    switch (empire.PiratePlayStyle)
                    {
                        case PiratePlayStyle.Pirate:
                            num7 = 3;
                            num9 = 1;
                            num12 = 1;
                            break;
                        case PiratePlayStyle.Mercenary:
                            num7 = 4;
                            num8 = 1;
                            num9 = 1;
                            num12 = 0;
                            count = 1;
                            break;
                        case PiratePlayStyle.Smuggler:
                            num7 = 1;
                            num9 = 4;
                            num12 = 1;
                            count = 3;
                            break;
                    }
                    if (!flag)
                    {
                        num7 /= 2;
                        num8 /= 2;
                        num11 = 0;
                    }
                    int num13 = 1;
                    for (int k = 0; k < num7; k++)
                    {
                        Design design2 = null;
                        if (num13 == 1)
                        {
                            if (design2 == null)
                            {
                                design2 = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Escort, empire);
                            }
                        }
                        else
                        {
                            design2 = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Escort, empire);
                        }
                        num13 = Rnd.Next(0, 3);
                        if (design2 != null)
                        {
                            design2.BuildCount++;
                            string name3 = SelectRandomUniqueMilitaryShipName();
                            BuiltObject builtObject2 = new BuiltObject(design2, name3, this, fullyBuilt: true);
                            builtObject2.Empire = empire;
                            builtObject2.Heading = SelectRandomHeading();
                            builtObject2.TargetHeading = builtObject2.Heading;
                            builtObject2.ReDefine();
                            builtObject2.CurrentFuel = builtObject2.FuelCapacity;
                            builtObject2.CurrentShields = builtObject2.ShieldsCapacity;
                            empire.AddBuiltObjectToGalaxy(builtObject2, habitat, offsetLocationFromParent: true, isStateOwned: true, sendMessage: false);
                        }
                    }
                    Design design3 = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.ExplorationShip, empire);
                    if (design3 != null)
                    {
                        for (int l = 0; l < num8; l++)
                        {
                            design3.BuildCount++;
                            string name4 = SelectRandomUniqueStandardShipName(habitat);
                            BuiltObject builtObject3 = new BuiltObject(design3, name4, this, fullyBuilt: true);
                            builtObject3.Empire = empire;
                            builtObject3.Heading = SelectRandomHeading();
                            builtObject3.TargetHeading = builtObject3.Heading;
                            builtObject3.ReDefine();
                            builtObject3.CurrentFuel = builtObject3.FuelCapacity;
                            builtObject3.CurrentShields = builtObject3.ShieldsCapacity;
                            empire.AddBuiltObjectToGalaxy(builtObject3, habitat, offsetLocationFromParent: true, isStateOwned: true, sendMessage: false);
                        }
                    }
                    Design design4 = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.SmallFreighter, empire);
                    if (design4 != null)
                    {
                        for (int m = 0; m < num9; m++)
                        {
                            design4.BuildCount++;
                            string name5 = SelectUniqueBuiltObjectName(design4, habitat);
                            BuiltObject builtObject4 = new BuiltObject(design4, name5, this, fullyBuilt: true);
                            builtObject4.Empire = empire;
                            builtObject4.Heading = SelectRandomHeading();
                            builtObject4.TargetHeading = builtObject4.Heading;
                            builtObject4.ReDefine();
                            builtObject4.CurrentFuel = builtObject4.FuelCapacity;
                            builtObject4.CurrentShields = builtObject4.ShieldsCapacity;
                            empire.AddBuiltObjectToGalaxy(builtObject4, habitat, offsetLocationFromParent: true, isStateOwned: false, sendMessage: false);
                        }
                    }
                    Design design5 = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.MiningShip, empire);
                    if (design5 != null)
                    {
                        for (int n = 0; n < num12; n++)
                        {
                            design5.BuildCount++;
                            string name6 = SelectUniqueBuiltObjectName(design5, habitat);
                            BuiltObject builtObject5 = new BuiltObject(design5, name6, this, fullyBuilt: true);
                            builtObject5.Empire = empire;
                            builtObject5.Heading = SelectRandomHeading();
                            builtObject5.TargetHeading = builtObject5.Heading;
                            builtObject5.ReDefine();
                            builtObject5.CurrentFuel = builtObject5.FuelCapacity;
                            builtObject5.CurrentShields = builtObject5.ShieldsCapacity;
                            empire.AddBuiltObjectToGalaxy(builtObject5, habitat, offsetLocationFromParent: true, isStateOwned: false, sendMessage: false);
                        }
                    }
                    Design design6 = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.GasMiningShip, empire);
                    if (design6 != null)
                    {
                        for (int num14 = 0; num14 < num12; num14++)
                        {
                            design6.BuildCount++;
                            string name7 = SelectUniqueBuiltObjectName(design6, habitat);
                            BuiltObject builtObject6 = new BuiltObject(design6, name7, this, fullyBuilt: true);
                            builtObject6.Empire = empire;
                            builtObject6.Heading = SelectRandomHeading();
                            builtObject6.TargetHeading = builtObject6.Heading;
                            builtObject6.ReDefine();
                            builtObject6.CurrentFuel = builtObject6.FuelCapacity;
                            builtObject6.CurrentShields = builtObject6.ShieldsCapacity;
                            empire.AddBuiltObjectToGalaxy(builtObject6, habitat, offsetLocationFromParent: true, isStateOwned: false, sendMessage: false);
                        }
                    }
                    Design design7 = empire.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.ConstructionShip, empire);
                    if (design7 != null)
                    {
                        for (int num15 = 0; num15 < num10; num15++)
                        {
                            design7.BuildCount++;
                            string name8 = SelectRandomUniqueStandardShipName(habitat);
                            BuiltObject builtObject7 = new BuiltObject(design7, name8, this, fullyBuilt: true);
                            builtObject7.Empire = empire;
                            builtObject7.Heading = SelectRandomHeading();
                            builtObject7.TargetHeading = builtObject7.Heading;
                            builtObject7.ReDefine();
                            builtObject7.CurrentFuel = builtObject7.FuelCapacity;
                            builtObject7.CurrentShields = builtObject7.ShieldsCapacity;
                            empire.AddBuiltObjectToGalaxy(builtObject7, habitat, offsetLocationFromParent: true, isStateOwned: true, sendMessage: false);
                        }
                    }
                    Design design8 = empire.Designs.FindNewest(BuiltObjectSubRole.ResupplyShip);
                    if (design8 != null)
                    {
                        for (int num16 = 0; num16 < num11; num16++)
                        {
                            design8.BuildCount++;
                            string name9 = SelectUniqueBuiltObjectName(design4, habitat);
                            BuiltObject builtObject8 = new BuiltObject(design8, name9, this, fullyBuilt: true);
                            builtObject8.Empire = empire;
                            builtObject8.Heading = SelectRandomHeading();
                            builtObject8.TargetHeading = builtObject8.Heading;
                            builtObject8.ReDefine();
                            builtObject8.CurrentFuel = builtObject8.FuelCapacity;
                            builtObject8.CurrentShields = builtObject8.ShieldsCapacity;
                            empire.AddBuiltObjectToGalaxy(builtObject8, habitat, offsetLocationFromParent: true, isStateOwned: true, sendMessage: false);
                        }
                    }
                    CreatePirateMiningStations(this, empire, count, allowEmpiresToStartInSameSystem: false);
                }
                empire.GenerateStartingCharacters(builtObject);
            }
            empire.ColonizationTargets = empire.PirateReviewColoniesToControl();
            empire.StateMoney = 20000.0;
            return empire;
        }

        private void GenerateNewPirateEmpires()
        {
            int num = (int)(2.0 * PiratePrevalence * (double)MaximumEmpireAmount);
            if (DestroyedPiratesDoNotRespawn)
            {
                long num2 = CurrentStarDate - _StartStarDate;
                if (num2 > 300000)
                {
                    num = PirateEmpires.Count;
                }
            }
            if (PirateEmpires.Count >= num)
            {
                return;
            }
            int num3 = num - PirateEmpires.Count;
            double num4 = (double)MaxSolarSystemSize * 2.1;
            double num5 = (double)SizeX / 50.0;
            switch (PirateProximity)
            {
                case 0:
                    num4 *= 1.0;
                    num5 *= 1.0;
                    break;
                case 1:
                    num4 *= 4.0;
                    num5 *= 4.0;
                    break;
                case 2:
                    num4 *= 8.0;
                    num5 *= 8.0;
                    break;
            }
            int num6 = (int)((double)StarCount * 0.7);
            double val = ((double)num6 - (double)ColonyCount) / (double)num6;
            val = Math.Max(val, 0.1);
            num3 = (int)((double)num3 * val);
            for (int i = 0; i < num3; i++)
            {
                double x = 0.0;
                double y = 0.0;
                bool flag = false;
                Habitat habitat = null;
                int num7 = 0;
                while (!flag && num7 < 100)
                {
                    ObtainRandomGalaxyCoordinates(out x, out y);
                    ResourceDefinition resourceDefinition = ResourceSystem.FuelResources[0];
                    habitat = FindNearestHabitatWithResource(x, y, resourceDefinition.ResourceID);
                    if (habitat != null)
                    {
                        for (int j = 0; j < IndependentColonies.Count; j++)
                        {
                            Habitat habitat2 = IndependentColonies[j];
                            if (habitat2 != null && habitat2.Empire == IndependentEmpire && habitat2.SystemIndex == habitat.SystemIndex)
                            {
                                habitat = null;
                                break;
                            }
                        }
                    }
                    if (habitat != null)
                    {
                        BuiltObject builtObject = FindNearestBuiltObject((int)habitat.Xpos, (int)habitat.Ypos, BuiltObjectRole.Undefined, includeIndependentBuiltObjects: false);
                        double num8 = double.MaxValue;
                        if (builtObject != null)
                        {
                            num8 = CalculateDistance(habitat.Xpos, habitat.Ypos, builtObject.Xpos, builtObject.Ypos);
                        }
                        if (num8 > num4)
                        {
                            Habitat habitat3 = FindNearestColony(habitat.Xpos, habitat.Ypos, null, 0, includeIndependentColonies: false);
                            double num9 = double.MaxValue;
                            if (habitat3 != null)
                            {
                                num9 = CalculateDistance(habitat.Xpos, habitat.Ypos, habitat3.Xpos, habitat3.Ypos);
                            }
                            if (num9 > num5)
                            {
                                bool flag2 = false;
                                Empire empire = FindNearestPirateFaction(habitat.Xpos, habitat.Ypos, null, includeSuperPirates: true);
                                if (empire != null && empire.PirateEmpireBaseHabitat != null)
                                {
                                    double num10 = CalculateDistance(habitat.Xpos, habitat.Ypos, empire.PirateEmpireBaseHabitat.Xpos, empire.PirateEmpireBaseHabitat.Ypos);
                                    if (num10 < 1000000.0)
                                    {
                                        flag2 = true;
                                    }
                                }
                                if (!flag2)
                                {
                                    flag = true;
                                }
                            }
                        }
                    }
                    num7++;
                }
                if (flag && NextEmpireID < MaximumEmpireCount)
                {
                    SelectRelativeHabitatSurfacePoint(habitat, out var x2, out var y2);
                    GeneratePirateEmpire(habitat, (int)x2, (int)y2, useRace: true);
                }
            }
        }

        public Habitat IdentifyPirateNewHomeLocation(Empire pirateFaction)
        {
            Habitat habitat = null;
            if (pirateFaction != null)
            {
                double num = SizeX / 2;
                double num2 = SizeY / 2;
                Habitat systemToExclude = null;
                if (pirateFaction.PirateEmpireBaseHabitat != null)
                {
                    num = pirateFaction.PirateEmpireBaseHabitat.Xpos;
                    num2 = pirateFaction.PirateEmpireBaseHabitat.Ypos;
                    systemToExclude = DetermineHabitatSystemStar(pirateFaction.PirateEmpireBaseHabitat);
                }
                List<BuiltObjectSubRole> list = new List<BuiltObjectSubRole>();
                list.Add(BuiltObjectSubRole.SmallSpacePort);
                list.Add(BuiltObjectSubRole.MediumSpacePort);
                list.Add(BuiltObjectSubRole.LargeSpacePort);
                list.Add(BuiltObjectSubRole.MiningStation);
                list.Add(BuiltObjectSubRole.GasMiningStation);
                list.Add(BuiltObjectSubRole.EnergyResearchStation);
                list.Add(BuiltObjectSubRole.HighTechResearchStation);
                list.Add(BuiltObjectSubRole.WeaponsResearchStation);
                list.Add(BuiltObjectSubRole.ResortBase);
                list.Add(BuiltObjectSubRole.MonitoringStation);
                list.Add(BuiltObjectSubRole.DefensiveBase);
                List<BuiltObjectSubRole> subRoles = list;
                HabitatList habitatList = pirateFaction.DetermineHabitatsWithBasesIncludingBuilding(subRoles);
                byte resourceID = ResourceSystem.FuelResources[0].ResourceID;
                Design design = pirateFaction.LatestDesigns.FindNewestCanBuild(BuiltObjectSubRole.Frigate, pirateFaction);
                if (design != null && design.FuelType != null)
                {
                    resourceID = design.FuelType.ResourceID;
                }
                int num3 = 0;
                bool flag = false;
                double num4 = num;
                double num5 = num2;
                while (!flag && num3 < 50)
                {
                    double num6 = 400000.0 + Rnd.NextDouble() * 400000.0;
                    double num7 = Rnd.NextDouble() * Math.PI * 2.0;
                    num4 += Math.Sin(num7) * num6;
                    num5 += Math.Cos(num7) * num6;
                    habitat = FastFindNearestFuelHabitatAlternate(num4, num5, resourceID, pirateFaction.PirateEmpireBaseHabitat, pirateFaction, systemToExclude, allowBases: false);
                    if (habitat != null)
                    {
                        Habitat habitat2 = FindNearestColony(habitat.Xpos, habitat.Ypos, null, 0, includeIndependentColonies: false);
                        double num8 = double.MaxValue;
                        if (habitat2 != null)
                        {
                            num8 = CalculateDistance(habitat.Xpos, habitat.Ypos, habitat2.Xpos, habitat2.Ypos);
                        }
                        if (num8 > 500000.0)
                        {
                            bool flag2 = false;
                            Empire empire = FindNearestPirateFaction(habitat.Xpos, habitat.Ypos, pirateFaction, includeSuperPirates: true);
                            if (empire != null && empire.PirateEmpireBaseHabitat != null)
                            {
                                double num9 = CalculateDistance(habitat.Xpos, habitat.Ypos, empire.PirateEmpireBaseHabitat.Xpos, empire.PirateEmpireBaseHabitat.Ypos);
                                if (num9 < 1000000.0)
                                {
                                    flag2 = true;
                                }
                            }
                            if (!flag2 && (habitat.BasesAtHabitat == null || habitat.BasesAtHabitat.Count <= 0) && !habitatList.Contains(habitat))
                            {
                                flag = true;
                            }
                        }
                    }
                    num3++;
                }
            }
            return habitat;
        }

        public static Component GetLatestEmpireComponent(ComponentType componentType, ComponentList latestEmpireComponents)
        {
            return latestEmpireComponents[(int)componentType];
        }

        private void DoSuperPirateTasks()
        {
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire.PirateEmpireSuperPirates)
                {
                    DoSuperPirateTasks(empire);
                }
            }
        }

        public BuiltObject IdentifyPirateBase(Empire pirateFaction)
        {
            if (pirateFaction != null && pirateFaction.BuiltObjects != null && pirateFaction.PirateEmpireBaseHabitat != null)
            {
                BuiltObject builtObject = null;
                if (pirateFaction.PirateEmpireBaseHabitat.BasesAtHabitat != null)
                {
                    for (int i = 0; i < pirateFaction.PirateEmpireBaseHabitat.BasesAtHabitat.Count; i++)
                    {
                        BuiltObject builtObject2 = pirateFaction.PirateEmpireBaseHabitat.BasesAtHabitat[i];
                        if (builtObject2.Role == BuiltObjectRole.Base && builtObject2.ActualEmpire == pirateFaction && builtObject2.ParentHabitat != null && builtObject2.ParentHabitat == pirateFaction.PirateEmpireBaseHabitat && builtObject2.ExtractionGas > 0 && (builtObject == null || builtObject.Size < builtObject2.Size))
                        {
                            builtObject = builtObject2;
                        }
                    }
                }
                if (builtObject == null)
                {
                    for (int j = 0; j < pirateFaction.BuiltObjects.Count; j++)
                    {
                        BuiltObject builtObject3 = pirateFaction.BuiltObjects[j];
                        if (builtObject3.Role == BuiltObjectRole.Base && builtObject3.ExtractionGas > 0 && (builtObject == null || builtObject.Size < builtObject3.Size))
                        {
                            builtObject = builtObject3;
                        }
                    }
                }
                return builtObject;
            }
            return null;
        }

        public BuiltObject IdentifyPirateSpaceport(Empire pirateFaction)
        {
            if (pirateFaction != null && pirateFaction.BuiltObjects != null && pirateFaction.PirateEmpireBaseHabitat != null)
            {
                BuiltObject builtObject = null;
                if (pirateFaction.PirateEmpireBaseHabitat.BasesAtHabitat != null)
                {
                    for (int i = 0; i < pirateFaction.PirateEmpireBaseHabitat.BasesAtHabitat.Count; i++)
                    {
                        BuiltObject builtObject2 = pirateFaction.PirateEmpireBaseHabitat.BasesAtHabitat[i];
                        if (builtObject2.Role == BuiltObjectRole.Base && builtObject2.ActualEmpire == pirateFaction && (builtObject2.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject2.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject2.SubRole == BuiltObjectSubRole.LargeSpacePort) && builtObject2.ParentHabitat != null && builtObject2.ParentHabitat == pirateFaction.PirateEmpireBaseHabitat && builtObject2.ExtractionGas > 0 && (builtObject == null || builtObject.Size < builtObject2.Size))
                        {
                            builtObject = builtObject2;
                        }
                    }
                }
                if (builtObject == null)
                {
                    for (int j = 0; j < pirateFaction.BuiltObjects.Count; j++)
                    {
                        BuiltObject builtObject3 = pirateFaction.BuiltObjects[j];
                        if (builtObject3.Role == BuiltObjectRole.Base && (builtObject3.SubRole == BuiltObjectSubRole.SmallSpacePort || builtObject3.SubRole == BuiltObjectSubRole.MediumSpacePort || builtObject3.SubRole == BuiltObjectSubRole.LargeSpacePort) && builtObject3.ExtractionGas > 0 && (builtObject == null || builtObject.Size < builtObject3.Size))
                        {
                            builtObject = builtObject3;
                        }
                    }
                }
                return builtObject;
            }
            return null;
        }

        private void DoSuperPirateTasks(Empire superPirateFaction)
        {
            if (superPirateFaction.ShipGroups == null)
            {
                superPirateFaction.ShipGroups = new ShipGroupList();
            }
            BuiltObjectList builtObjectList = new BuiltObjectList();
            for (int i = 0; i < superPirateFaction.BuiltObjects.Count; i++)
            {
                BuiltObject builtObject = superPirateFaction.BuiltObjects[i];
                if (builtObject.Role == BuiltObjectRole.Military && builtObject.BuiltAt == null && builtObject.ShipGroup == null && builtObject.TopSpeed > 0 && builtObject.DamagedComponentCount == 0 && builtObject.SubRole != BuiltObjectSubRole.Escort)
                {
                    builtObjectList.Add(builtObject);
                }
            }
            BuiltObject builtObject2 = IdentifyPirateBase(superPirateFaction);
            if (superPirateFaction.ShipGroups.Count == 0 && builtObjectList.Count > 0)
            {
                ShipGroup shipGroup = new ShipGroup(this);
                shipGroup.Empire = superPirateFaction;
                shipGroup.ShipTargetAmount = int.MaxValue;
                shipGroup.TroopTargetStrength = 0;
                shipGroup.GatherPoint = builtObject2;
                superPirateFaction.AddShipsToShipGroup(shipGroup, builtObjectList, int.MaxValue, isNew: true, builtObject2);
                if (shipGroup.Ships.Count > 0)
                {
                    shipGroup.Name = TextResolver.GetText("Phantom Fleet");
                    superPirateFaction.ShipGroups.Add(shipGroup);
                    superPirateFaction.ShipGroups.Sort();
                }
            }
            if (superPirateFaction.ShipGroups.Count <= 0)
            {
                return;
            }
            ShipGroup shipGroup2 = superPirateFaction.ShipGroups[0];
            if (shipGroup2 == null)
            {
                return;
            }
            shipGroup2.Posture = FleetPosture.Attack;
            shipGroup2.PostureRangeSquared = double.MaxValue;
            if (builtObjectList.Count > 0)
            {
                superPirateFaction.AddShipsToShipGroup(shipGroup2, builtObjectList, int.MaxValue, isNew: true, builtObject2);
            }
            if ((shipGroup2.Mission == null || shipGroup2.Mission.Type == BuiltObjectMissionType.Undefined) && builtObject2 != null)
            {
                BuiltObject builtObject3 = FindNearestBaseForPirateAttack(builtObject2.Xpos, builtObject2.Ypos, superPirateFaction);
                if (builtObject3 != null)
                {
                    shipGroup2.AssignMission(BuiltObjectMissionType.Attack, builtObject3, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                }
            }
        }

        public void ChanceAttackedPirateFactionJoinsPhantomPirates(Empire attackingPhantomPirateFaction, BuiltObject attackedPirateBase)
        {
            if (attackingPhantomPirateFaction == null || !attackingPhantomPirateFaction.PirateEmpireSuperPirates || attackingPhantomPirateFaction.PirateEmpireBaseHabitat == null || attackedPirateBase == null || attackedPirateBase.Role != BuiltObjectRole.Base || attackedPirateBase.Empire == null || attackedPirateBase.Empire == PlayerEmpire || attackedPirateBase.Empire.PirateEmpireBaseHabitat == null || attackedPirateBase.Empire.PirateEmpireSuperPirates || !((double)attackedPirateBase.CurrentShields < (double)attackedPirateBase.ShieldsCapacity * 0.5) || Rnd.Next(0, 50) != 1)
            {
                return;
            }
            int num = 1;
            if (attackedPirateBase.Empire.BuiltObjects != null)
            {
                num = attackedPirateBase.Empire.BuiltObjects.TotalMobileMilitaryFirepower();
            }
            if (num >= 600)
            {
                return;
            }
            int num2 = 1;
            if (attackingPhantomPirateFaction.BuiltObjects != null)
            {
                num2 = attackingPhantomPirateFaction.BuiltObjects.TotalMobileMilitaryFirepower();
            }
            double num3 = (double)num2 / (double)num;
            if (!(num3 > 2.0))
            {
                return;
            }
            Empire empire = attackedPirateBase.Empire;
            BuiltObjectList builtObjectList = new BuiltObjectList();
            builtObjectList.AddRange(empire.BuiltObjects);
            foreach (BuiltObject item in builtObjectList)
            {
                attackingPhantomPirateFaction.TakeOwnershipOfBuiltObject(item, attackingPhantomPirateFaction, setDesignAsObsolete: true);
                item.Stance = BuiltObjectStance.AttackEnemies;
                item.FleeWhen = BuiltObjectFleeWhen.Shields20;
                item.Design.Stance = BuiltObjectStance.AttackEnemies;
                item.Design.FleeWhen = BuiltObjectFleeWhen.Shields20;
            }
            bool flag = false;
            switch (attackedPirateBase.SubRole)
            {
                case BuiltObjectSubRole.SmallSpacePort:
                case BuiltObjectSubRole.MediumSpacePort:
                case BuiltObjectSubRole.LargeSpacePort:
                    flag = true;
                    break;
            }
            if (flag && Rnd.Next(0, 4) == 1)
            {
                FearfulPirateFactionJoinsPlayer(attackingPhantomPirateFaction, empire);
            }
        }

        public static double CalculateBuiltObjectLootingValue(BuiltObject builtObject)
        {
            return BaconGalaxy.CalculateBuiltObjectLootingValue(builtObject);
        }

        public void PirateFactionJoinsEmpire(Empire empire, Empire pirateFaction)
        {
            if (empire != null && pirateFaction != null)
            {
                EliminatePirateFaction(pirateFaction, empire);
            }
        }

        public void FearfulPirateFactionJoinsPlayer(Empire phantomPirateFaction, Empire pirateFactionToExclude)
        {
            if (PlayerEmpire == null)
            {
                return;
            }
            Empire empire = null;
            if (PlayerEmpire.PirateEmpireBaseHabitat != null)
            {
                empire = FindNearestPirateFaction(PlayerEmpire.PirateEmpireBaseHabitat.Xpos, PlayerEmpire.PirateEmpireBaseHabitat.Ypos, pirateFactionToExclude, includeSuperPirates: false);
            }
            else if (PlayerEmpire.Capital != null)
            {
                empire = FindNearestPirateFaction(PlayerEmpire.Capital.Xpos, PlayerEmpire.Capital.Ypos, pirateFactionToExclude, includeSuperPirates: false);
            }
            if (empire == null || empire.PirateEmpireSuperPirates || empire == PlayerEmpire)
            {
                return;
            }
            int num = 1;
            if (empire.BuiltObjects != null)
            {
                num = empire.BuiltObjects.TotalMobileMilitaryFirepower();
            }
            if (num >= 600)
            {
                return;
            }
            int num2 = 1;
            if (phantomPirateFaction.BuiltObjects != null)
            {
                num2 = phantomPirateFaction.BuiltObjects.TotalMobileMilitaryFirepower();
            }
            double num3 = (double)num2 / (double)num;
            if (num3 > 2.0)
            {
                BuiltObject builtObject = IdentifyPirateSpaceport(empire);
                string message = string.Format(TextResolver.GetText("Pirate Faction Joins Your Empire Fearful Phantom Pirates"), empire.Name, phantomPirateFaction.Name);
                PirateFactionJoinsEmpire(PlayerEmpire, empire);
                string text = TextResolver.GetText("Pirate Faction Joins Your Empire");
                if (builtObject != null)
                {
                    PlayerEmpire.SendEventMessageToEmpire(EventMessageType.PirateFactionJoinsYou, text, message, builtObject, builtObject.ParentHabitat);
                }
                else
                {
                    PlayerEmpire.SendEventMessageToEmpire(EventMessageType.PirateFactionJoinsYou, text, message, null, null);
                }
            }
        }

        public int CountPirateFactionsAcceptedSmugglingMission(StellarObject target)
        {
            int num = 0;
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire != null && empire.Active && empire.PirateMissions != null && empire.PirateMissions.GetFirstByTargetAndType(target, EmpireActivityType.Smuggle) != null)
                {
                    num++;
                }
            }
            return num;
        }

        public void RemovePirateSmugglingMissionFromAllEmpires(EmpireActivity smugglingMission)
        {
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire != null && empire.Active && empire.PirateMissions != null && empire.PirateMissions.ContainsEquivalent(smugglingMission.Target, smugglingMission.Type))
                {
                    string empty = string.Empty;
                    empire.SendMessageToEmpire(description: (smugglingMission.RequestingEmpire == IndependentEmpire) ? ((smugglingMission.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate Independent"), smugglingMission.Target.Name, new Resource(smugglingMission.ResourceId).Name) : string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate Independent All Resources"), smugglingMission.Target.Name)) : ((smugglingMission.ResourceId != byte.MaxValue) ? string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate"), smugglingMission.Target.Name, new Resource(smugglingMission.ResourceId).Name, smugglingMission.RequestingEmpire.Name) : string.Format(TextResolver.GetText("Pirate Smuggle Mission Completed Pirate All Resources"), smugglingMission.Target.Name, smugglingMission.RequestingEmpire.Name)), recipientEmpire: empire, messageType: EmpireMessageType.PirateSmugglingMissionCompleted, subject: smugglingMission.Target);
                    empire.PirateMissions.RemoveEquivalent(smugglingMission);
                }
            }
        }

        public int CountPirateEmpiresConsideringMission(EmpireActivity mission, Empire pirateEmpireToExclude)
        {
            int num = 0;
            if (mission != null)
            {
                for (int i = 0; i < PirateEmpires.Count; i++)
                {
                    Empire empire = PirateEmpires[i];
                    if (empire == null || !empire.Active || empire == pirateEmpireToExclude)
                    {
                        continue;
                    }
                    switch (mission.Type)
                    {
                        case EmpireActivityType.Attack:
                            {
                                int pirateEmpireStrength2 = empire.BuiltObjects.TotalMobileMilitaryFirepower();
                                if (empire.PirateCheckAcceptAttackMission(mission, pirateEmpireStrength2))
                                {
                                    num++;
                                }
                                break;
                            }
                        case EmpireActivityType.Defend:
                            {
                                int pirateEmpireStrength = empire.BuiltObjects.TotalMobileMilitaryFirepower();
                                if (empire.PirateCheckAcceptDefendMission(mission, pirateEmpireStrength))
                                {
                                    num++;
                                }
                                break;
                            }
                        case EmpireActivityType.Smuggle:
                            if (empire.Policy.AcceptPirateSmugglingMissions && empire.IsObjectAreaKnownToThisEmpire(mission.Target) && empire.Freighters != null && empire.Freighters.Count > 0)
                            {
                                num++;
                            }
                            break;
                    }
                }
            }
            return num;
        }

        private void ReviewPirateMissionsAndAssign(long starDate, double timePassed)
        {
            EmpireActivityList empireActivityList = new EmpireActivityList();
            EmpireActivityList empireActivityList2 = new EmpireActivityList();
            for (int i = 0; i < PirateMissions.Count; i++)
            {
                EmpireActivity empireActivity = PirateMissions[i];
                if (empireActivity == null || (empireActivity.Type != EmpireActivityType.Attack && empireActivity.Type != EmpireActivityType.Defend))
                {
                    continue;
                }
                if (empireActivity.AssignedEmpire != null)
                {
                    long num = (long)(timePassed * 1000.0);
                    empireActivity.BidTimeRemaining -= num;
                    if (empireActivity.BidTimeRemaining <= 0)
                    {
                        empireActivity.BidTimeRemaining = 0L;
                        empireActivity.ExpiryDate = starDate + (long)(2.0 * (double)RealSecondsInGalacticYear * 1000.0);
                        empireActivity.AssignedEmpire.PirateMissions.Add(empireActivity);
                        empireActivityList.Add(empireActivity);
                    }
                }
                else if (empireActivity.ExpiryDate < starDate)
                {
                    empireActivityList2.Add(empireActivity);
                }
            }
            for (int j = 0; j < empireActivityList.Count; j++)
            {
                PirateMissions.Remove(empireActivityList[j]);
            }
            for (int k = 0; k < empireActivityList2.Count; k++)
            {
                EmpireActivity empireActivity2 = empireActivityList2[k];
                if (empireActivity2 != null)
                {
                    if (empireActivity2.AssignedEmpire != null)
                    {
                        empireActivity2.AssignedEmpire.CompletePirateMission(empireActivity2);
                    }
                    if (empireActivity2.RequestingEmpire != null && empireActivity2.RequestingEmpire.PirateMissions != null)
                    {
                        empireActivity2.RequestingEmpire.PirateMissions.Remove(empireActivity2);
                    }
                    PirateMissions.Remove(empireActivity2);
                }
            }
        }

        public bool CheckCancelAttackMissionsForBuiltObject(BuiltObject builtObject, Empire empireToExclude)
        {
            bool result = false;
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire empire = PirateEmpires[i];
                if (empire == null || !empire.Active || empire.PirateMissions == null || (empireToExclude != null && empire == empireToExclude))
                {
                    continue;
                }
                EmpireActivity byAttackTarget = empire.PirateMissions.GetByAttackTarget(builtObject, empire);
                if (byAttackTarget != null)
                {
                    empire.PirateMissions.Remove(byAttackTarget);
                    if (byAttackTarget.RequestingEmpire != null && byAttackTarget.RequestingEmpire.PirateMissions != null)
                    {
                        byAttackTarget.RequestingEmpire.PirateMissions.Remove(byAttackTarget);
                    }
                    if (byAttackTarget.AssignedEmpire != null && byAttackTarget.AssignedEmpire.PirateMissions != null)
                    {
                        byAttackTarget.AssignedEmpire.PirateMissions.Remove(byAttackTarget);
                    }
                    if (byAttackTarget.RequestingEmpire != null)
                    {
                        string description = string.Format(TextResolver.GetText("Pirate Attack Mission Cancelled Pirate"), byAttackTarget.Target.Name, byAttackTarget.RequestingEmpire.Name);
                        empire.SendMessageToEmpire(empire, EmpireMessageType.PirateAttackMissionCompleted, byAttackTarget.Target, description);
                        description = string.Format(TextResolver.GetText("Pirate Attack Mission Cancelled Other"), byAttackTarget.Target.Name, empire.Name);
                        byAttackTarget.RequestingEmpire.SendMessageToEmpire(byAttackTarget.RequestingEmpire, EmpireMessageType.PirateAttackMissionCompleted, byAttackTarget.Target, description);
                    }
                    result = true;
                }
            }
            return result;
        }

        private void AssignPirateShipMissions()
        {
            for (int i = 0; i < PirateEmpires.Count; i++)
            {
                Empire pirateEmpire = PirateEmpires[i];
                AssignPirateShipMissions(pirateEmpire);
            }
        }

        private void AssignPirateShipMissions(Empire pirateEmpire)
        {
            if (DeferEventsForGameStart || pirateEmpire == null || pirateEmpire.BuiltObjects == null || pirateEmpire.PirateMissions == null)
            {
                return;
            }
            BuiltObject builtObject = null;
            for (int i = 0; i < pirateEmpire.BuiltObjects.Count; i++)
            {
                BuiltObject builtObject2 = pirateEmpire.BuiltObjects[i];
                if (builtObject2 != null && builtObject2.Role == BuiltObjectRole.Base)
                {
                    builtObject = builtObject2;
                }
            }
            if (builtObject == null)
            {
                return;
            }
            double num = (double)SectorSize * Math.Max(1.0, _LifePrevalenceMultiplier);
            for (int j = 0; j < pirateEmpire.BuiltObjects.Count; j++)
            {
                BuiltObject builtObject3 = pirateEmpire.BuiltObjects[j];
                if (builtObject3 == null || builtObject3.Role != BuiltObjectRole.Military || builtObject3.ShipGroup != null || (builtObject3.Mission != null && builtObject3.Mission.Type != 0))
                {
                    continue;
                }
                if (builtObject3.DamagedComponentCount > 0 || builtObject3.RepairForNextMission)
                {
                    if (builtObject != null)
                    {
                        builtObject3.AssignMission(BuiltObjectMissionType.Repair, builtObject, null, BuiltObjectMissionPriority.Normal);
                        builtObject3.RepairForNextMission = false;
                    }
                    continue;
                }
                if (builtObject3.RefuelForNextMission)
                {
                    if (builtObject != null)
                    {
                        builtObject3.AssignMission(BuiltObjectMissionType.Refuel, builtObject, null, BuiltObjectMissionPriority.Normal);
                        builtObject3.RefuelForNextMission = false;
                    }
                    continue;
                }
                if (pirateEmpire.PirateMissions.ResolveActivitiesByType(EmpireActivityType.Attack).Count > 0)
                {
                    EmpireActivityList empireActivityList = pirateEmpire.PirateMissions.ResolveActivitiesByType(EmpireActivityType.Attack);
                    int index = Rnd.Next(0, empireActivityList.Count);
                    Empire targetEmpire = empireActivityList[index].TargetEmpire;
                    BuiltObject builtObject4 = FastFindNearestMiningStation((int)builtObject.Xpos, (int)builtObject.Ypos, targetEmpire);
                    if (builtObject4 == null)
                    {
                        builtObject4 = FastFindNearestResearchFacility((int)builtObject.Xpos, (int)builtObject.Ypos, targetEmpire);
                    }
                    if (builtObject4 == null)
                    {
                        builtObject4 = FastFindNearestLongRangeScanner((int)builtObject.Xpos, (int)builtObject.Ypos, targetEmpire);
                    }
                    if (builtObject4 != null && builtObject3.WithinFuelRangeAndRefuel(builtObject4.Xpos, builtObject4.Ypos, 0.0))
                    {
                        builtObject3.AssignMission(BuiltObjectMissionType.Attack, builtObject4, null, BuiltObjectMissionPriority.Normal);
                    }
                    continue;
                }
                if (Rnd.Next(0, 3) == 1)
                {
                    BuiltObject builtObject5 = null;
                    builtObject5 = ((Rnd.Next(0, 2) != 1) ? FindNearestBuiltObject((int)builtObject.Xpos, (int)builtObject.Ypos, BuiltObjectSubRole.GasMiningStation, includeSecondaryEmpires: false) : FindNearestBuiltObject((int)builtObject.Xpos, (int)builtObject.Ypos, BuiltObjectSubRole.MiningStation, includeSecondaryEmpires: false));
                    if (builtObject5 != null && builtObject5.Empire != pirateEmpire && builtObject5.Empire != null && pirateEmpire.ObtainPirateRelation(builtObject5.Empire).Type != PirateRelationType.Protection)
                    {
                        double num2 = CalculateDistance(builtObject5.Xpos, builtObject5.Ypos, builtObject3.Xpos, builtObject3.Ypos);
                        if (num2 < num && builtObject3.WithinFuelRangeAndRefuel(builtObject5.Xpos, builtObject5.Ypos, 0.0))
                        {
                            builtObject3.AssignMission(BuiltObjectMissionType.Attack, builtObject5, null, BuiltObjectMissionPriority.Normal);
                        }
                    }
                    continue;
                }
                Habitat habitat = FastFindNearestIndependentHabitat(builtObject3.Xpos, builtObject3.Ypos);
                if (habitat != null)
                {
                    double num3 = CalculateDistance(habitat.Xpos, habitat.Ypos, builtObject3.Xpos, builtObject3.Ypos);
                    if (num3 < num && builtObject3.WithinFuelRangeAndRefuel(habitat.Xpos, habitat.Ypos, 0.0))
                    {
                        long starDate = CurrentStarDate + (long)(0.5 * (double)(RealSecondsInGalacticYear * 1000));
                        builtObject3.AssignMission(BuiltObjectMissionType.MoveAndWait, habitat, null, 0.0, 0.0, starDate, BuiltObjectMissionPriority.Normal, allowReprocessing: true);
                    }
                }
            }
        }

        public string GeneratePirateBaseName(Habitat habitat)
        {
            string[] array = new string[13]
            {
            "Secret", "Eagles", "Villainous", "Brigands", "Outlaws", "Fugitives", "Desperado", "Secluded", "Bounty Hunters", "Lonely",
            "Gamblers", "Bandits", "Smugglers"
            };
            string[] array2 = new string[20]
            {
            "Lair", "Base", "Hideout", "Retreat", "Fortress", "Cave", "Cove", "Outpost", "Den", "Haunt",
            "Hideaway", "Nest", "Sanctuary", "Refuge", "Shelter", "Haven", "End", "Rest", "Station", "Stronghold"
            };
            int num = Rnd.Next(0, array.Length);
            string text = array[num];
            num = Rnd.Next(0, array2.Length);
            string text2 = array2[num];
            string result = text + " " + text2;
            if (habitat != null && habitat.Category != HabitatCategoryType.GasCloud && Rnd.Next(0, 4) == 1)
            {
                Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                result = habitat2.Name + " " + array2[Rnd.Next(0, array2.Length)];
            }
            return result;
        }

        private string GeneratePirateEmpireName(Habitat habitat, PiratePlayStyle playStyle)
        {
            string[] array = new string[21]
            {
            "Bloody", "Dread", "Black", "Dirty", "Evil", "Iron", "Red", "Fierce", "Cruel", "Sinister",
            "Vicious", "Lone", "Savage", "Fearsome", "Deadly", "Venomous", "Murderous", "Dark", "Grim", "Haunted",
            "Menacing"
            };
            string[] array2 = new string[8] { "Sun", "Star", "Rock", "Moon", "Storm", "Fang", "Claw", "Dagger" };
            string[] array3 = new string[16]
            {
            "Pirates", "Marauders", "Bandits", "Raiders", "Buccaneers", "Outlaws", "Corsairs", "Pillagers", "Gangsters", "Ravagers",
            "Prowlers", "Intruders", "Invaders", "Skyjackers", "Gang", "Mercenaries"
            };
            switch (playStyle)
            {
                case PiratePlayStyle.Balanced:
                    array = new string[13]
                    {
                "Black", "Iron", "Red", "Fierce", "Sinister", "Lone", "Savage", "Fearsome", "Venomous", "Dark",
                "Grim", "Menacing", "Dread"
                    };
                    array3 = new string[9] { "Council", "Network", "League", "Force", "Clan", "Authority", "Confederacy", "Confederation", "Security" };
                    break;
                case PiratePlayStyle.Mercenary:
                    array = new string[24]
                    {
                "Bloody", "Black", "Dirty", "Evil", "Iron", "Red", "Fierce", "Cruel", "Sinister", "Vicious",
                "Lone", "Savage", "Fearsome", "Deadly", "Venomous", "Murderous", "Dark", "Grim", "Haunted", "Menacing",
                "Dread", "Blood", "Burning", "Hidden"
                    };
                    array3 = new string[18]
                    {
                "Pirates", "Marauders", "Bandits", "Raiders", "Buccaneers", "Outlaws", "Corsairs", "Pillagers", "Gangsters", "Ravagers",
                "Prowlers", "Intruders", "Invaders", "Skyjackers", "Gang", "Mercenaries", "Warriors", "Army"
                    };
                    break;
                case PiratePlayStyle.Pirate:
                    array = new string[24]
                    {
                "Bloody", "Black", "Dirty", "Evil", "Iron", "Red", "Fierce", "Cruel", "Sinister", "Vicious",
                "Lone", "Savage", "Fearsome", "Deadly", "Venomous", "Murderous", "Dark", "Grim", "Haunted", "Menacing",
                "Dread", "Burning", "Fire", "Lost"
                    };
                    array3 = new string[16]
                    {
                "Pirates", "Marauders", "Bandits", "Raiders", "Buccaneers", "Outlaws", "Corsairs", "Pillagers", "Gangsters", "Ravagers",
                "Prowlers", "Intruders", "Invaders", "Skyjackers", "Gang", "Horde"
                    };
                    break;
                case PiratePlayStyle.Smuggler:
                    array = new string[13]
                    {
                "Black", "Iron", "Red", "Fierce", "Sinister", "Lone", "Savage", "Fearsome", "Hidden", "Dark",
                "Grim", "Menacing", "Dread"
                    };
                    array2 = new string[10] { "Sun", "Star", "Rock", "Moon", "Storm", "Fang", "Claw", "Market", "Trade", "Merchant" };
                    array3 = new string[19]
                    {
                "Corporation", "Consortium", "Syndicate", "Cartel", "Guild", "Gang", "Company", "Interstellar", "Shipping", "Spaceways",
                "Freightways", "Industries", "Mining", "Transport", "Exports", "Ventures", "Starfreight", "Minerals", "Salvage"
                    };
                    break;
            }
            int num = Rnd.Next(0, array.Length);
            string text = array[num];
            num = Rnd.Next(0, array2.Length);
            string text2 = array2[num];
            num = Rnd.Next(0, array3.Length);
            string text3 = array3[num];
            string result = string.Empty;
            switch (Rnd.Next(0, 3))
            {
                case 0:
                    result = text + " " + text3;
                    break;
                case 1:
                    result = text + " " + text2 + " " + text3;
                    break;
                case 2:
                    {
                        Habitat habitat2 = FindNearestColony(habitat.Xpos, habitat.Ypos, null, 0, includeIndependentColonies: true);
                        Habitat habitat3 = DetermineHabitatSystemStar(habitat2);
                        result = habitat3.Name + " " + text3;
                        break;
                    }
            }
            return result;
        }

        public static string RemoveSpecialCharacters(string text)
        {
            return Regex.Replace(text, "[^a-zA-Z0-9-]+", "", RegexOptions.Compiled);
        }

        public static EncyclopediaItemList AddRaceTopics(EncyclopediaItemList encyclopediaItems, RaceList races, string applicationStartupPath, string customizationSetName)
        {
            string text = applicationStartupPath + "\\help\\";
            string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\help\\";
            for (int i = 0; i < races.Count; i++)
            {
                Race race = races[i];
                if (race == null)
                {
                    continue;
                }
                string text3 = "Race_" + RemoveSpecialCharacters(race.Name) + ".mht";
                if (File.Exists(text2 + text3) || File.Exists(text + text3))
                {
                    encyclopediaItems.Add(new EncyclopediaItem(race.Name, text3, EncyclopediaCategory.Races, isCategoryRoot: false));
                    switch (race.NativeHabitatType)
                    {
                        case HabitatType.Continental:
                            encyclopediaItems[race.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Continental Planets")]);
                            encyclopediaItems[TextResolver.GetText("Continental Planets")].RelatedItems.Add(encyclopediaItems[race.Name]);
                            break;
                        case HabitatType.MarshySwamp:
                            encyclopediaItems[race.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Marshy Swamp Planets")]);
                            encyclopediaItems[TextResolver.GetText("Marshy Swamp Planets")].RelatedItems.Add(encyclopediaItems[race.Name]);
                            break;
                        case HabitatType.Ocean:
                            encyclopediaItems[race.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Ocean Planets")]);
                            encyclopediaItems[TextResolver.GetText("Ocean Planets")].RelatedItems.Add(encyclopediaItems[race.Name]);
                            break;
                        case HabitatType.Desert:
                            encyclopediaItems[race.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Desert Planets")]);
                            encyclopediaItems[TextResolver.GetText("Desert Planets")].RelatedItems.Add(encyclopediaItems[race.Name]);
                            break;
                        case HabitatType.Ice:
                            encyclopediaItems[race.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Ice Planets")]);
                            encyclopediaItems[TextResolver.GetText("Ice Planets")].RelatedItems.Add(encyclopediaItems[race.Name]);
                            break;
                        case HabitatType.Volcanic:
                            encyclopediaItems[race.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Volcanic Planets")]);
                            encyclopediaItems[TextResolver.GetText("Volcanic Planets")].RelatedItems.Add(encyclopediaItems[race.Name]);
                            break;
                    }
                }
            }
            return encyclopediaItems;
        }

        public static EncyclopediaItemList AddGameInfoTopics(EncyclopediaItemList encyclopediaItems, string applicationStartupPath, string customizationSetName)
        {
            string text = applicationStartupPath + "\\help\\";
            string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\help\\";
            string text3 = "GameInfo_";
            List<FileInfo> list = new List<FileInfo>();
            if (!string.IsNullOrEmpty(customizationSetName) && Directory.Exists(text2))
            {
                DirectoryInfo directoryInfo = new DirectoryInfo(text2);
                list.AddRange(directoryInfo.GetFiles(text3 + "*.mht"));
            }
            if (Directory.Exists(text))
            {
                DirectoryInfo directoryInfo2 = new DirectoryInfo(text);
                list.AddRange(directoryInfo2.GetFiles(text3 + "*.mht"));
            }
            string text4 = text3 + "Default.mht";
            if (!File.Exists(text2 + text4) && !File.Exists(text + text4))
            {
                text4 = string.Empty;
            }
            if (list.Count > 0)
            {
                EncyclopediaItem encyclopediaItem = null;
                EncyclopediaItem encyclopediaItem2 = null;
                if (!string.IsNullOrEmpty(text4))
                {
                    encyclopediaItem = new EncyclopediaItem(TextResolver.GetText("Game Info"), text4, EncyclopediaCategory.GameInfo, isCategoryRoot: true);
                    encyclopediaItems.Add(encyclopediaItem);
                    encyclopediaItem2 = new EncyclopediaItem(TextResolver.GetText("Game Info"), text4, EncyclopediaCategory.GameInfo);
                    encyclopediaItems.Add(encyclopediaItem2);
                }
                else
                {
                    string name = list[0].Name;
                    int length = text3.Length;
                    string text5 = name.Substring(length, name.Length - length);
                    text5 = text5.Substring(0, text5.Length - 4);
                    text5 = SplitString(text5);
                    encyclopediaItem = new EncyclopediaItem(TextResolver.GetText("Game Info"), name, EncyclopediaCategory.GameInfo, isCategoryRoot: true);
                    encyclopediaItems.Add(encyclopediaItem);
                    encyclopediaItem2 = new EncyclopediaItem(text5, name, EncyclopediaCategory.GameInfo);
                    encyclopediaItems.Add(encyclopediaItem2);
                }
                for (int i = 0; i < list.Count; i++)
                {
                    string name2 = list[i].Name;
                    if (name2 != encyclopediaItem.Filename)
                    {
                        int length2 = text3.Length;
                        string text6 = name2.Substring(length2, name2.Length - length2);
                        text6 = text6.Substring(0, text6.Length - 4);
                        text6 = SplitString(text6);
                        EncyclopediaItem encyclopediaItem3 = new EncyclopediaItem(text6, name2, EncyclopediaCategory.GameInfo, isCategoryRoot: false);
                        encyclopediaItems.Add(encyclopediaItem3);
                        encyclopediaItem3.RelatedItems.Add(encyclopediaItem2);
                        encyclopediaItem.RelatedItems.Add(encyclopediaItem3);
                        encyclopediaItem2.RelatedItems.Add(encyclopediaItem3);
                    }
                }
            }
            return encyclopediaItems;
        }

        public static EncyclopediaItemList AddThemeTopics(EncyclopediaItemList encyclopediaItems, string applicationStartupPath, string customizationSetName)
        {
            _ = applicationStartupPath + "\\help\\";
            string text = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\help\\";
            if (!string.IsNullOrEmpty(customizationSetName) && Directory.Exists(text))
            {
                DirectoryInfo directoryInfo = new DirectoryInfo(text);
                FileInfo[] files = directoryInfo.GetFiles(customizationSetName + "_*.mht");
                string text2 = customizationSetName + ".mht";
                if (!File.Exists(text + text2))
                {
                    text2 = string.Empty;
                    if (files.Length > 0)
                    {
                        text2 = files[0].Name;
                    }
                }
                if (!string.IsNullOrEmpty(text2))
                {
                    EncyclopediaItem encyclopediaItem = new EncyclopediaItem(string.Format(TextResolver.GetText("THEMENAME Theme"), customizationSetName), text2, EncyclopediaCategory.Theme, isCategoryRoot: true);
                    encyclopediaItems.Add(encyclopediaItem);
                    EncyclopediaItem encyclopediaItem2 = new EncyclopediaItem(string.Format(TextResolver.GetText("THEMENAME Theme"), customizationSetName), text2, EncyclopediaCategory.Theme);
                    encyclopediaItems.Add(encyclopediaItem2);
                    for (int i = 0; i < files.Length; i++)
                    {
                        string name = files[i].Name;
                        int num = customizationSetName.Length + 1;
                        string text3 = name.Substring(num, name.Length - num);
                        text3 = text3.Substring(0, text3.Length - 4);
                        text3 = SplitString(text3);
                        EncyclopediaItem encyclopediaItem3 = new EncyclopediaItem(text3, name, EncyclopediaCategory.Theme, isCategoryRoot: false);
                        encyclopediaItems.Add(encyclopediaItem3);
                        encyclopediaItem3.RelatedItems.Add(encyclopediaItem2);
                        encyclopediaItem.RelatedItems.Add(encyclopediaItem3);
                        encyclopediaItem2.RelatedItems.Add(encyclopediaItem3);
                    }
                }
            }
            return encyclopediaItems;
        }

        public static EncyclopediaItemList AddGovernmentTopics(EncyclopediaItemList encyclopediaItems, GovernmentAttributesList governments, string applicationStartupPath, string customizationSetName)
        {
            string text = applicationStartupPath + "\\help\\";
            string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\help\\";
            for (int i = 0; i < governments.Count; i++)
            {
                GovernmentAttributes governmentAttributes = governments[i];
                if (governmentAttributes != null)
                {
                    string text3 = "GameConcepts_GovernmentTypes_" + RemoveSpecialCharacters(governmentAttributes.Name) + ".mht";
                    if (File.Exists(text2 + text3) || File.Exists(text + text3))
                    {
                        encyclopediaItems.Add(new EncyclopediaItem(governmentAttributes.Name, text3, EncyclopediaCategory.GovernmentTypes, isCategoryRoot: false));
                        encyclopediaItems[TextResolver.GetText("Government Types")].RelatedItems.Add(encyclopediaItems[governmentAttributes.Name]);
                    }
                }
            }
            return encyclopediaItems;
        }

        public static EncyclopediaItemList AddResourceTopics(EncyclopediaItemList encyclopediaItems, ResourceSystem resourceSystem, string applicationStartupPath, string customizationSetName)
        {
            string text = applicationStartupPath + "\\help\\";
            string text2 = applicationStartupPath + "\\Customization\\" + customizationSetName + "\\help\\";
            for (int i = 0; i < resourceSystem.Resources.Count; i++)
            {
                ResourceDefinition resourceDefinition = resourceSystem.Resources[i];
                if (resourceDefinition == null)
                {
                    continue;
                }
                string text3 = "Resource_" + RemoveSpecialCharacters(resourceDefinition.Name) + ".mht";
                if (File.Exists(text2 + text3) || File.Exists(text + text3))
                {
                    encyclopediaItems.Add(new EncyclopediaItem(resourceDefinition.Name, text3, EncyclopediaCategory.Resources, isCategoryRoot: false));
                    encyclopediaItems[resourceDefinition.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Resources")]);
                    if (resourceDefinition.IsFuel)
                    {
                        encyclopediaItems[resourceDefinition.Name].RelatedItems.Add(encyclopediaItems[TextResolver.GetText("Fuel")]);
                        encyclopediaItems[TextResolver.GetText("Fuel")].RelatedItems.Add(encyclopediaItems[resourceDefinition.Name]);
                    }
                }
            }
            return encyclopediaItems;
        }

        public GalaxySummary GenerateSummary()
        {
            GalaxySummary galaxySummary = new GalaxySummary();
            galaxySummary.StarCount = StarCount;
            galaxySummary.SectorWidth = SectorWidth;
            galaxySummary.SectorHeight = SectorHeight;
            galaxySummary.Shape = GalaxyShape;
            galaxySummary.Title = Title;
            galaxySummary.Description = Description;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.Active && empire.PlayableInScenario)
                {
                    galaxySummary.EmpireSummaries.Add(EmpireSummary.GenerateSummaryFromEmpire(empire));
                }
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                if (empire2 != null && empire2.Active && empire2.PlayableInScenario)
                {
                    galaxySummary.EmpireSummaries.Add(EmpireSummary.GenerateSummaryFromEmpire(empire2));
                }
            }
            return galaxySummary;
        }

        public ComponentCategoryType SelectRandomComponentCategory(IndustryType industry)
        {
            int num = 0;
            switch (industry)
            {
                case IndustryType.Energy:
                    switch (Rnd.Next(0, 6))
                    {
                        case 0:
                            return ComponentCategoryType.Shields;
                        case 1:
                            return ComponentCategoryType.Engine;
                        case 2:
                            return ComponentCategoryType.HyperDrive;
                        case 3:
                            return ComponentCategoryType.Reactor;
                        case 4:
                            return ComponentCategoryType.EnergyCollector;
                        case 5:
                            return ComponentCategoryType.Extractor;
                    }
                    break;
                case IndustryType.HighTech:
                    switch (Rnd.Next(0, 7))
                    {
                        case 0:
                            return ComponentCategoryType.Sensor;
                        case 1:
                            return ComponentCategoryType.Computer;
                        case 2:
                            return ComponentCategoryType.Labs;
                        case 3:
                            return ComponentCategoryType.Habitation;
                        case 4:
                            return ComponentCategoryType.Manufacturer;
                        case 5:
                            return ComponentCategoryType.Storage;
                        case 6:
                            return ComponentCategoryType.Construction;
                    }
                    break;
                case IndustryType.Weapon:
                    switch (Rnd.Next(0, 5))
                    {
                        case 0:
                            return ComponentCategoryType.Armor;
                        case 1:
                            return ComponentCategoryType.WeaponArea;
                        case 2:
                            return ComponentCategoryType.WeaponBeam;
                        case 3:
                            return ComponentCategoryType.WeaponTorpedo;
                        case 4:
                            return ComponentCategoryType.Fighter;
                    }
                    break;
            }
            return ComponentCategoryType.WeaponBeam;
        }

        public ComponentCategoryType SelectRandomComponentCategory()
        {
            ComponentCategoryType result = ComponentCategoryType.Undefined;
            switch (Rnd.Next(0, 17))
            {
                case 0:
                    result = ComponentCategoryType.WeaponBeam;
                    break;
                case 1:
                    result = ComponentCategoryType.WeaponArea;
                    break;
                case 2:
                    result = ComponentCategoryType.WeaponTorpedo;
                    break;
                case 3:
                    result = ComponentCategoryType.Armor;
                    break;
                case 4:
                    result = ComponentCategoryType.Shields;
                    break;
                case 5:
                    result = ComponentCategoryType.Engine;
                    break;
                case 6:
                    result = ComponentCategoryType.HyperDrive;
                    break;
                case 7:
                    result = ComponentCategoryType.Reactor;
                    break;
                case 8:
                    result = ComponentCategoryType.EnergyCollector;
                    break;
                case 9:
                    result = ComponentCategoryType.Extractor;
                    break;
                case 10:
                    result = ComponentCategoryType.Manufacturer;
                    break;
                case 11:
                    result = ComponentCategoryType.Storage;
                    break;
                case 12:
                    result = ComponentCategoryType.Sensor;
                    break;
                case 13:
                    result = ComponentCategoryType.Computer;
                    break;
                case 14:
                    result = ComponentCategoryType.Labs;
                    break;
                case 15:
                    result = ComponentCategoryType.Construction;
                    break;
                case 16:
                    result = ComponentCategoryType.Habitation;
                    break;
            }
            return result;
        }

        public short GetMatchingGameEventIdDiplomaticRelationChange(Empire empire1, Empire empire2, DiplomaticRelationType relationType)
        {
            for (int i = 0; i < GameEvents.Count; i++)
            {
                GameEvent gameEvent = GameEvents[i];
                if (gameEvent != null && !gameEvent.HasBeenTriggered && gameEvent.TriggerType == EventTriggerType.DiplomaticRelationChange && gameEvent.Empire == empire1 && gameEvent.EmpireOther == empire2 && gameEvent.DiplomaticRelationType == relationType)
                {
                    return gameEvent.GameEventId;
                }
            }
            return -1;
        }

        public short GetMatchingGameEventIdEmpireEncounter(Empire empire1, Empire empire2)
        {
            for (int i = 0; i < GameEvents.Count; i++)
            {
                GameEvent gameEvent = GameEvents[i];
                if (gameEvent != null && !gameEvent.HasBeenTriggered && gameEvent.TriggerType == EventTriggerType.EmpireEncounter && gameEvent.Empire == empire1 && gameEvent.EmpireOther == empire2)
                {
                    return gameEvent.GameEventId;
                }
            }
            return -1;
        }

        public short GetMatchingGameEventIdResearchBreakthrough(Empire empire1, int researchProjectId)
        {
            for (int i = 0; i < GameEvents.Count; i++)
            {
                GameEvent gameEvent = GameEvents[i];
                if (gameEvent != null && !gameEvent.HasBeenTriggered && gameEvent.TriggerType == EventTriggerType.ResearchBreakthrough && gameEvent.Empire == empire1 && gameEvent.ResearchProjectId == researchProjectId)
                {
                    return gameEvent.GameEventId;
                }
            }
            return -1;
        }

        public short GetMatchingGameEventIdPlanetDestroyerConstructionCompleted(Empire empire1)
        {
            for (int i = 0; i < GameEvents.Count; i++)
            {
                GameEvent gameEvent = GameEvents[i];
                if (gameEvent != null && !gameEvent.HasBeenTriggered && gameEvent.TriggerType == EventTriggerType.PlanetDestroyerConstructionCompleted && gameEvent.Empire == empire1)
                {
                    return gameEvent.GameEventId;
                }
            }
            return -1;
        }

        public short GetMatchingGameEventIdEmpireEliminated(Empire empire, Empire eliminatingEmpire)
        {
            for (int i = 0; i < GameEvents.Count; i++)
            {
                GameEvent gameEvent = GameEvents[i];
                if (gameEvent != null && !gameEvent.HasBeenTriggered && gameEvent.TriggerType == EventTriggerType.EmpireEliminated && gameEvent.Empire == empire && (gameEvent.EmpireOther == null || gameEvent.EmpireOther == eliminatingEmpire))
                {
                    return gameEvent.GameEventId;
                }
            }
            return -1;
        }

        public short GetMatchingGameEventIdCharacterAppears(Character character)
        {
            for (int i = 0; i < GameEvents.Count; i++)
            {
                GameEvent gameEvent = GameEvents[i];
                if (gameEvent != null && !gameEvent.HasBeenTriggered && gameEvent.TriggerType == EventTriggerType.CharacterAppears && gameEvent.Character == character)
                {
                    return gameEvent.GameEventId;
                }
            }
            return -1;
        }

        public short GetMatchingGameEventIdCharacterKilled(Character character)
        {
            for (int i = 0; i < GameEvents.Count; i++)
            {
                GameEvent gameEvent = GameEvents[i];
                if (gameEvent != null && !gameEvent.HasBeenTriggered && gameEvent.TriggerType == EventTriggerType.CharacterKilled && gameEvent.Character == character)
                {
                    return gameEvent.GameEventId;
                }
            }
            return -1;
        }

        public bool CheckTriggerEvent(short gameEventId, Empire triggerEmpire, EventTriggerType triggerType, object additionalData)
        {
            if (gameEventId >= 0)
            {
                GameEvent byId = GameEvents.GetById(gameEventId);
                if (byId != null && !byId.HasBeenTriggered && byId.TriggerType == triggerType)
                {
                    switch (triggerType)
                    {
                        case EventTriggerType.Investigate:
                            {
                                if (byId.TriggerRuin != null)
                                {
                                    byId.TriggerRuin.GameEventId *= -1;
                                    DoGameEvent(byId, triggerEmpire);
                                    if (byId.HasBeenTriggered)
                                    {
                                        return true;
                                    }
                                    byId.TriggerRuin.GameEventId = Math.Abs(byId.TriggerRuin.GameEventId);
                                    return false;
                                }
                                if (byId.TriggerObject == null || !(byId.TriggerObject is BuiltObject))
                                {
                                    break;
                                }
                                BuiltObject builtObject2 = (BuiltObject)byId.TriggerObject;
                                if (builtObject2.Owner == null)
                                {
                                    byId.TriggerObject.GameEventId *= -1;
                                    DoGameEvent(byId, triggerEmpire);
                                    if (byId.HasBeenTriggered)
                                    {
                                        return true;
                                    }
                                    byId.TriggerObject.GameEventId = Math.Abs(byId.TriggerObject.GameEventId);
                                    return false;
                                }
                                break;
                            }
                        case EventTriggerType.DiplomaticRelationChange:
                        case EventTriggerType.EmpireEncounter:
                        case EventTriggerType.ResearchBreakthrough:
                        case EventTriggerType.PlanetDestroyerConstructionCompleted:
                        case EventTriggerType.EmpireEliminated:
                        case EventTriggerType.CharacterAppears:
                        case EventTriggerType.CharacterKilled:
                            DoGameEvent(byId, triggerEmpire);
                            if (byId.HasBeenTriggered)
                            {
                                return true;
                            }
                            break;
                        case EventTriggerType.Destroy:
                            if (byId.TriggerObject != null)
                            {
                                byId.TriggerObject.GameEventId *= -1;
                                DoGameEvent(byId, triggerEmpire);
                                if (byId.HasBeenTriggered)
                                {
                                    return true;
                                }
                                byId.TriggerObject.GameEventId = Math.Abs(byId.TriggerObject.GameEventId);
                                return false;
                            }
                            break;
                        case EventTriggerType.Capture:
                            if (byId.TriggerObject != null)
                            {
                                byId.TriggerObject.GameEventId *= -1;
                                DoGameEvent(byId, triggerEmpire);
                                if (byId.HasBeenTriggered)
                                {
                                    return true;
                                }
                                byId.TriggerObject.GameEventId = Math.Abs(byId.TriggerObject.GameEventId);
                                return false;
                            }
                            break;
                        case EventTriggerType.Build:
                            if (byId.TriggerObject == null || !(byId.TriggerObject is Habitat))
                            {
                                break;
                            }
                            if (byId.TriggerFacility != null)
                            {
                                if (additionalData == null || !(additionalData is PlanetaryFacility))
                                {
                                    break;
                                }
                                PlanetaryFacility planetaryFacility = (PlanetaryFacility)additionalData;
                                if (planetaryFacility.PlanetaryFacilityDefinitionId == byId.TriggerFacility.PlanetaryFacilityDefinitionId)
                                {
                                    byId.TriggerObject.GameEventId *= -1;
                                    DoGameEvent(byId, triggerEmpire);
                                    if (byId.HasBeenTriggered)
                                    {
                                        return true;
                                    }
                                    byId.TriggerObject.GameEventId = Math.Abs(byId.TriggerObject.GameEventId);
                                    return false;
                                }
                            }
                            else
                            {
                                if (byId.TriggerBuiltObjectSubRole == BuiltObjectSubRole.Undefined || additionalData == null || !(additionalData is BuiltObject))
                                {
                                    break;
                                }
                                BuiltObject builtObject = (BuiltObject)additionalData;
                                if (builtObject.SubRole == byId.TriggerBuiltObjectSubRole)
                                {
                                    byId.TriggerObject.GameEventId *= -1;
                                    DoGameEvent(byId, triggerEmpire);
                                    if (byId.HasBeenTriggered)
                                    {
                                        return true;
                                    }
                                    byId.TriggerObject.GameEventId = Math.Abs(byId.TriggerObject.GameEventId);
                                    return false;
                                }
                            }
                            break;
                    }
                }
            }
            return false;
        }

        private void DoGameEvent(short gameEventId, Empire triggerEmpire)
        {
            if (gameEventId >= 0 && gameEventId < GameEvents.Count)
            {
                GameEvent byId = GameEvents.GetById(gameEventId);
                DoGameEvent(byId, triggerEmpire);
            }
        }

        private void DoGameEvent(GameEvent gameEvent, Empire triggerEmpire)
        {
            if (gameEvent == null || gameEvent.HasBeenTriggered || (gameEvent.CanOnlyBeTriggeredByPlayer && triggerEmpire != PlayerEmpire))
            {
                return;
            }
            gameEvent.HasBeenTriggered = true;
            if (gameEvent.Actions == null || gameEvent.Actions.Count <= 0)
            {
                return;
            }
            long currentStarDate = CurrentStarDate;
            if (gameEvent.Actions.Count > 1)
            {
                if (gameEvent.Actions.ExecutionType == MultipleEventActionType.ExecuteSingleRandomAction)
                {
                    int index = Rnd.Next(0, gameEvent.Actions.Count);
                    ExecuteOrDelayEventAction(gameEvent.Actions[index], triggerEmpire, gameEvent, currentStarDate);
                    return;
                }
                for (int i = 0; i < gameEvent.Actions.Count; i++)
                {
                    ExecuteOrDelayEventAction(gameEvent.Actions[i], triggerEmpire, gameEvent, currentStarDate);
                }
            }
            else
            {
                ExecuteOrDelayEventAction(gameEvent.Actions[0], triggerEmpire, gameEvent, currentStarDate);
            }
        }

        public void ExecuteOrDelayEventAction(EventAction eventAction, Empire triggerEmpire, GameEvent gameEvent, long starDate)
        {
            if (eventAction != null)
            {
                long num = RealSecondsInGalacticYear * 1000 / 360;
                switch (eventAction.ExecutionType)
                {
                    case EventActionExecutionType.Immediately:
                        ExecuteEventAction(eventAction, triggerEmpire, gameEvent);
                        break;
                    case EventActionExecutionType.Delay:
                        {
                            long num4 = (eventAction.ExecutionDate = starDate + eventAction.DelayDaysMinimum * num);
                            AddDelayedEventAction(eventAction, triggerEmpire, gameEvent);
                            break;
                        }
                    case EventActionExecutionType.RandomDelay:
                        {
                            long num2 = Rnd.Next(0, Math.Max(0, eventAction.DelayDaysMaximum - eventAction.DelayDaysMinimum));
                            long num3 = (eventAction.ExecutionDate = starDate + (eventAction.DelayDaysMinimum + num2) * num);
                            AddDelayedEventAction(eventAction, triggerEmpire, gameEvent);
                            break;
                        }
                }
            }
        }

        private void AddDelayedEventAction(EventAction eventAction, Empire triggerEmpire, GameEvent gameEvent)
        {
            lock (_DelayedActionLockObject)
            {
                DelayedActions.Add(new EventActionExecutionPackage(eventAction, gameEvent, triggerEmpire));
            }
        }

        private void ProcessDelayedEventActions(long starDate)
        {
            if (DelayedActions.Count <= 0)
            {
                return;
            }
            EventActionExecutionPackageList eventActionExecutionPackageList = new EventActionExecutionPackageList();
            EventActionExecutionPackage[] array = new EventActionExecutionPackage[0];
            lock (_DelayedActionLockObject)
            {
                array = ListHelper.ToArrayThreadSafe(DelayedActions);
            }
            foreach (EventActionExecutionPackage eventActionExecutionPackage in array)
            {
                if (eventActionExecutionPackage != null && eventActionExecutionPackage.Action != null && eventActionExecutionPackage.Action.ExecutionDate <= starDate)
                {
                    ExecuteEventAction(eventActionExecutionPackage.Action, eventActionExecutionPackage.TriggerEmpire, eventActionExecutionPackage.GameEvent);
                    eventActionExecutionPackageList.Add(eventActionExecutionPackage);
                }
            }
            lock (_DelayedActionLockObject)
            {
                for (int j = 0; j < eventActionExecutionPackageList.Count; j++)
                {
                    DelayedActions.Remove(eventActionExecutionPackageList[j]);
                }
            }
        }

        private void ExecuteEventAction(EventAction eventAction, Empire triggerEmpire, GameEvent gameEvent)
        {
            Empire empire = null;
            bool flag = false;
            string title = string.Empty;
            string text = string.Empty;
            object additionalData = null;
            object location = null;
            BuiltObject builtObject = null;
            Habitat habitat = null;
            Creature creature = null;
            switch (eventAction.Type)
            {
                case EventActionType.AcquireBuiltObject:
                    if (eventAction.Target == null || !(eventAction.Target is BuiltObject))
                    {
                        break;
                    }
                    builtObject = (BuiltObject)eventAction.Target;
                    if (!builtObject.HasBeenDestroyed && builtObject.ActualEmpire != triggerEmpire && triggerEmpire != null)
                    {
                        triggerEmpire.TakeOwnershipOfBuiltObject(builtObject, triggerEmpire, setDesignAsObsolete: true, removeFromFleet: true);
                        string text3 = string.Empty;
                        if (builtObject.NearestSystemStar != null)
                        {
                            text3 = builtObject.NearestSystemStar.Name;
                        }
                        if (builtObject.Role == BuiltObjectRole.Base)
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description AcquireBuiltObject Base"), builtObject.Name, text3);
                            title = TextResolver.GetText("GameEventAction Title AcquireBuiltObject Base");
                        }
                        else
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description AcquireBuiltObject Ship"), ResolveDescription(builtObject.SubRole).ToLower(CultureInfo.InvariantCulture), builtObject.Name, text3);
                            title = TextResolver.GetText("GameEventAction Title AcquireBuiltObject Ship");
                        }
                        additionalData = builtObject;
                        location = builtObject;
                        flag = true;
                    }
                    break;
                case EventActionType.AcquireHabitat:
                    if (eventAction.Target != null && eventAction.Target is Habitat)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (!habitat.HasBeenDestroyed && habitat.Empire != triggerEmpire && habitat.Population != null && habitat.Population.TotalAmount > 0 && triggerEmpire != null)
                        {
                            triggerEmpire.TakeOwnershipOfColony(habitat, triggerEmpire, destroyBases: false, destroyTroops: false);
                            Habitat habitat23 = DetermineHabitatSystemStar(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description AcquireHabitat"), ResolveDescription(habitat.Type).ToLower(CultureInfo.InvariantCulture), habitat.Name, habitat23.Name);
                            title = TextResolver.GetText("GameEventAction Title AcquireHabitat");
                            additionalData = habitat;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.BuildPlanetaryFacility:
                    if (eventAction.Target != null && eventAction.Target is Habitat && ((Habitat)eventAction.Target).Population != null && ((Habitat)eventAction.Target).Population.TotalAmount > 0)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (eventAction.Value >= 0 && eventAction.Value < PlanetaryFacilityDefinitions.Count)
                        {
                            Habitat habitat13 = DetermineHabitatSystemStar(habitat);
                            PlanetaryFacilityDefinition planetaryFacilityDefinition = PlanetaryFacilityDefinitions[eventAction.Value];
                            if (planetaryFacilityDefinition.Type == PlanetaryFacilityType.Wonder)
                            {
                                habitat.QueueWonderConstruction(planetaryFacilityDefinition, fullyConstructed: true);
                            }
                            else
                            {
                                habitat.QueueFacilityConstruction(planetaryFacilityDefinition.Type, fullyConstructed: true);
                            }
                            text = string.Format(TextResolver.GetText("GameEventAction Description BuildPlanetaryFacility"), planetaryFacilityDefinition.Name, habitat.Name, habitat13.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title BuildPlanetaryFacility"), planetaryFacilityDefinition.Name);
                            additionalData = planetaryFacilityDefinition;
                            location = habitat;
                            flag = true;
                        }
                    }
                    else
                    {
                        if (triggerEmpire == null)
                        {
                            break;
                        }
                        if (triggerEmpire.Capital != null)
                        {
                            habitat = triggerEmpire.Capital;
                        }
                        else
                        {
                            HabitatList ownedColonies = triggerEmpire.Colonies.GetOwnedColonies(triggerEmpire);
                            if (ownedColonies.Count > 0)
                            {
                                ownedColonies.Sort();
                                habitat = ownedColonies[0];
                            }
                        }
                        if (habitat != null && eventAction.Value >= 0 && eventAction.Value < PlanetaryFacilityDefinitions.Count)
                        {
                            Habitat habitat14 = DetermineHabitatSystemStar(habitat);
                            PlanetaryFacilityDefinition planetaryFacilityDefinition2 = PlanetaryFacilityDefinitions[eventAction.Value];
                            habitat.QueueFacilityConstruction(planetaryFacilityDefinition2.Type, fullyConstructed: true);
                            text = string.Format(TextResolver.GetText("GameEventAction Description BuildPlanetaryFacility"), planetaryFacilityDefinition2.Name, habitat.Name, habitat14.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title BuildPlanetaryFacility"), planetaryFacilityDefinition2.Name);
                            additionalData = planetaryFacilityDefinition2;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.DestroyPlanetaryFacility:
                    if (eventAction.Target != null && eventAction.Target is Habitat && ((Habitat)eventAction.Target).Population != null && ((Habitat)eventAction.Target).Population.TotalAmount > 0)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (eventAction.Value >= 0 && eventAction.Value < PlanetaryFacilityDefinitions.Count)
                        {
                            PlanetaryFacility byId = habitat.Facilities.GetById(PlanetaryFacilityDefinitions[eventAction.Value].PlanetaryFacilityDefinitionId);
                            if (byId != null)
                            {
                                Habitat habitat24 = DetermineHabitatSystemStar(habitat);
                                habitat.Facilities.Remove(byId);
                                habitat.CheckRemoveFacilityTracking(byId);
                                habitat.ReviewPlanetaryFacilities(habitat.Empire);
                                text = string.Format(TextResolver.GetText("GameEventAction Description DestroyPlanetaryFacility"), byId.Name, habitat.Name, habitat24.Name);
                                title = string.Format(TextResolver.GetText("GameEventAction Title DestroyPlanetaryFacility"), byId.Name);
                                additionalData = byId;
                                location = habitat;
                                flag = true;
                            }
                        }
                    }
                    else
                    {
                        if (triggerEmpire == null || eventAction.Value < 0 || eventAction.Value >= PlanetaryFacilityDefinitions.Count)
                        {
                            break;
                        }
                        HabitatList ownedColonies2 = triggerEmpire.Colonies.GetOwnedColonies(triggerEmpire);
                        if (ownedColonies2.Count > 0)
                        {
                            habitat = ownedColonies2.FindColonyWithFacilityId(PlanetaryFacilityDefinitions[eventAction.Value].PlanetaryFacilityDefinitionId);
                        }
                        if (habitat != null)
                        {
                            PlanetaryFacility byId2 = habitat.Facilities.GetById(PlanetaryFacilityDefinitions[eventAction.Value].PlanetaryFacilityDefinitionId);
                            if (byId2 != null)
                            {
                                Habitat habitat25 = DetermineHabitatSystemStar(habitat);
                                habitat.Facilities.Remove(byId2);
                                habitat.CheckRemoveFacilityTracking(byId2);
                                habitat.ReviewPlanetaryFacilities(habitat.Empire);
                                text = string.Format(TextResolver.GetText("GameEventAction Description DestroyPlanetaryFacility"), byId2.Name, habitat.Name, habitat25.Name);
                                title = string.Format(TextResolver.GetText("GameEventAction Title DestroyPlanetaryFacility"), byId2.Name);
                                additionalData = byId2;
                                location = habitat;
                                flag = true;
                            }
                        }
                    }
                    break;
                case EventActionType.ChangeEmpireGovernment:
                    if (eventAction.Empire != null && eventAction.Value >= 0 && eventAction.Value < Governments.Count)
                    {
                        GovernmentAttributes governmentAttributes2 = Governments[eventAction.Value];
                        eventAction.Empire.ChangeGovernment(governmentAttributes2.GovernmentId);
                        text = string.Format(TextResolver.GetText("GameEventAction Description ChangeEmpireGovernment"), eventAction.Empire.Name, governmentAttributes2.Name);
                        title = TextResolver.GetText("GameEventAction Title ChangeEmpireGovernment");
                        additionalData = eventAction.Empire;
                        location = eventAction.Empire.Capital;
                        flag = true;
                    }
                    break;
                case EventActionType.ChangeRaceBias:
                    {
                        if (eventAction.Race == null || eventAction.RaceOther == null || eventAction.Race == eventAction.RaceOther)
                        {
                            break;
                        }
                        int bias = eventAction.Race.Biases.GetBias(eventAction.RaceOther);
                        bias += eventAction.Value;
                        eventAction.Race.Biases.SetBias(eventAction.RaceOther.Name, bias);
                        for (int n = 0; n < Empires.Count; n++)
                        {
                            Empire empire7 = Empires[n];
                            if (empire7 == null || !empire7.Active || empire7.EmpireEvaluations == null || empire7.DominantRace == null || empire7.DominantRace != eventAction.Race)
                            {
                                continue;
                            }
                            for (int num8 = 0; num8 < empire7.EmpireEvaluations.Count; num8++)
                            {
                                EmpireEvaluation empireEvaluation2 = empire7.EmpireEvaluations[num8];
                                if (empireEvaluation2 != null && empireEvaluation2.Empire != null && empireEvaluation2.Empire.DominantRace != null && empireEvaluation2.Empire.DominantRace == eventAction.RaceOther)
                                {
                                    empireEvaluation2.Bias = empireEvaluation2.BiasRaw + (double)eventAction.Value;
                                }
                            }
                        }
                        text = string.Format(TextResolver.GetText("GameEventAction Description ChangeRaceBias"), eventAction.Race.Name, eventAction.RaceOther.Name, eventAction.Value.ToString("0"));
                        title = TextResolver.GetText("GameEventAction Title ChangeRaceBias");
                        additionalData = eventAction.Race;
                        location = null;
                        flag = true;
                        break;
                    }
                case EventActionType.RevealObject:
                    if (eventAction.Target == null || triggerEmpire == null)
                    {
                        break;
                    }
                    if (eventAction.Target is BuiltObject)
                    {
                        builtObject = (BuiltObject)eventAction.Target;
                        if (triggerEmpire == PlayerEmpire && this.LocationPinged != null)
                        {
                            this.LocationPinged(builtObject, new EventArgs());
                        }
                        string text2 = string.Empty;
                        if (builtObject.NearestSystemStar != null)
                        {
                            text2 = builtObject.NearestSystemStar.Name;
                        }
                        if (builtObject.Role == BuiltObjectRole.Base)
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description RevealObject Base"), builtObject.Name, text2);
                            title = TextResolver.GetText("GameEventAction Title RevealObject Base");
                        }
                        else
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description RevealObject Ship"), ResolveDescription(builtObject.SubRole), builtObject.Name, text2);
                            title = TextResolver.GetText("GameEventAction Title RevealObject Ship");
                        }
                        additionalData = builtObject;
                        location = builtObject;
                        flag = true;
                    }
                    else if (eventAction.Target is Habitat)
                    {
                        habitat = (Habitat)eventAction.Target;
                        Habitat habitat6 = DetermineHabitatSystemStar(habitat);
                        SystemVisibilityStatus systemVisibilityStatus = triggerEmpire.CheckSystemVisibilityStatus(habitat6);
                        if (systemVisibilityStatus == SystemVisibilityStatus.Unexplored || systemVisibilityStatus == SystemVisibilityStatus.Undefined)
                        {
                            triggerEmpire.SetSystemVisibility(habitat6, SystemVisibilityStatus.Explored);
                        }
                        if (triggerEmpire == PlayerEmpire && this.LocationPinged != null)
                        {
                            this.LocationPinged(habitat, new EventArgs());
                        }
                        text = string.Format(TextResolver.GetText("GameEventAction Description RevealObject Planet"), ResolveDescription(habitat.Category), habitat.Name, habitat6.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title RevealObject Planet"), ResolveDescription(habitat.Category));
                        additionalData = habitat;
                        location = habitat;
                        flag = true;
                    }
                    break;
                case EventActionType.DestroyBuiltObject:
                    if (eventAction.Target == null || !(eventAction.Target is BuiltObject))
                    {
                        break;
                    }
                    builtObject = (BuiltObject)eventAction.Target;
                    if (!builtObject.HasBeenDestroyed)
                    {
                        builtObject.InflictDamage(builtObject, null, 1000000.0, CurrentDateTime, this, 0f, allowRecursion: false, 0.0, allowArmorInvulnerability: false);
                        string text4 = string.Empty;
                        if (builtObject.NearestSystemStar != null)
                        {
                            text4 = builtObject.NearestSystemStar.Name;
                        }
                        if (builtObject.Role == BuiltObjectRole.Base)
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description DestroyBuiltObject Base"), builtObject.Name, text4);
                            title = TextResolver.GetText("GameEventAction Title DestroyBuiltObject Base");
                        }
                        else
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description DestroyBuiltObject Ship"), ResolveDescription(builtObject.SubRole).ToLower(CultureInfo.InvariantCulture), builtObject.Name, text4);
                            title = TextResolver.GetText("GameEventAction Title DestroyBuiltObject Ship");
                        }
                        additionalData = builtObject;
                        location = builtObject;
                        flag = true;
                    }
                    break;
                case EventActionType.DisasterAtColony:
                    if (eventAction.Target != null && eventAction.Target is Habitat)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (!habitat.HasBeenDestroyed && habitat.Population != null && habitat.Population.TotalAmount > 0 && habitat.Empire != null)
                        {
                            Habitat habitat2 = DetermineHabitatSystemStar(habitat);
                            habitat.Empire.EmpireEventColonyNaturalDisaster(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description DisasterAtColony"), habitat.Name, habitat2.Name);
                            title = TextResolver.GetText("GameEventAction Title DisasterAtColony");
                            additionalData = habitat;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.EmpireDeclaresWarOnTriggerEmpire:
                    if (eventAction.Empire != null && eventAction.Empire.PirateEmpireBaseHabitat == null && triggerEmpire != null && triggerEmpire.PirateEmpireBaseHabitat == null && eventAction.Empire != triggerEmpire)
                    {
                        eventAction.Empire.DeclareWar(triggerEmpire);
                        text = string.Format(TextResolver.GetText("GameEventAction Description EmpireDeclaresWarOnTriggerEmpire"), eventAction.Empire.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title EmpireDeclaresWarOnTriggerEmpire"), eventAction.Empire.Name);
                        additionalData = eventAction.Empire;
                        location = null;
                        flag = true;
                    }
                    break;
                case EventActionType.PirateFactionJoinsTriggerEmpire:
                    if (eventAction.Empire != null && triggerEmpire != null && eventAction.Empire != triggerEmpire && eventAction.Empire.PirateEmpireBaseHabitat != null)
                    {
                        PirateFactionJoinsEmpire(triggerEmpire, eventAction.Empire);
                        text = string.Format(TextResolver.GetText("GameEventAction Description PirateFactionJoinsTriggerEmpire"), eventAction.Empire.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title PirateFactionJoinsTriggerEmpire"), eventAction.Empire.Name);
                        additionalData = eventAction.Empire;
                        location = null;
                        flag = true;
                    }
                    break;
                case EventActionType.StartPlague:
                    if (eventAction.Target != null && eventAction.Target is Habitat)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (habitat.Population != null && habitat.Population.TotalAmount > 0 && habitat.Owner != null)
                        {
                            Habitat habitat10 = DetermineHabitatSystemStar(habitat);
                            habitat.Owner.EmpireEventPlague(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description StartPlague"), habitat.Name, habitat10.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title StartPlague"), habitat.Name);
                            additionalData = habitat;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.EndPlague:
                    if (eventAction.Target != null && eventAction.Target is Habitat)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (habitat.Population != null && habitat.Population.TotalAmount > 0 && habitat.Owner != null && habitat.PlagueTimeRemaining > 0f && habitat.PlagueId >= 0)
                        {
                            Plague plague = Plagues[habitat.PlagueId];
                            if (plague != null)
                            {
                                Habitat habitat15 = DetermineHabitatSystemStar(habitat);
                                text = string.Format(TextResolver.GetText("GameEventAction Description EndPlague"), plague.Name, habitat.Name, habitat15.Name);
                                habitat.PlagueId = -1;
                                habitat.PlagueTimeRemaining = 0f;
                                title = string.Format(TextResolver.GetText("GameEventAction Title EndPlague"), habitat.Name);
                                additionalData = habitat;
                                location = habitat;
                                flag = true;
                            }
                        }
                    }
                    else
                    {
                        if (triggerEmpire == null || triggerEmpire.Colonies == null)
                        {
                            break;
                        }
                        for (int j = 0; j < triggerEmpire.Colonies.Count; j++)
                        {
                            Habitat habitat16 = triggerEmpire.Colonies[j];
                            if (habitat16 != null && !habitat16.HasBeenDestroyed && habitat16.PlagueTimeRemaining > 0f && habitat16.PlagueId >= 0)
                            {
                                Plague plague2 = Plagues[habitat.PlagueId];
                                if (plague2 != null)
                                {
                                    Habitat habitat17 = DetermineHabitatSystemStar(habitat);
                                    text = string.Format(TextResolver.GetText("GameEventAction Description EndPlague"), plague2.Name, habitat.Name, habitat17.Name);
                                    habitat16.PlagueId = -1;
                                    habitat16.PlagueTimeRemaining = 0f;
                                    title = string.Format(TextResolver.GetText("GameEventAction Title EndPlague"), habitat.Name);
                                    additionalData = habitat;
                                    location = habitat;
                                    flag = true;
                                }
                            }
                        }
                    }
                    break;
                case EventActionType.EnemyFleetDefectsToTriggerEmpire:
                    {
                        if (triggerEmpire == null)
                        {
                            break;
                        }
                        if (triggerEmpire.PirateEmpireBaseHabitat == null)
                        {
                            EmpireEvaluation lowestEvaluationKnownEmpire = triggerEmpire.EmpireEvaluations.GetLowestEvaluationKnownEmpire(triggerEmpire, new EmpireList());
                            if (lowestEvaluationKnownEmpire != null && lowestEvaluationKnownEmpire.Empire != triggerEmpire)
                            {
                                ShipGroup shipGroup2 = lowestEvaluationKnownEmpire.Empire.EmpireEventRogueFleetDefects(triggerEmpire);
                                if (shipGroup2 != null)
                                {
                                    text = string.Format(TextResolver.GetText("GameEventAction Description EnemyFleetDefectsToTriggerEmpire"), shipGroup2.Name, lowestEvaluationKnownEmpire.Empire.Name);
                                    title = TextResolver.GetText("GameEventAction Title EnemyFleetDefectsToTriggerEmpire");
                                    additionalData = shipGroup2;
                                    location = null;
                                    flag = true;
                                }
                            }
                            break;
                        }
                        PirateRelation relationWithLowestEvaluation = triggerEmpire.PirateRelations.GetRelationWithLowestEvaluation();
                        if (relationWithLowestEvaluation != null && relationWithLowestEvaluation.OtherEmpire != triggerEmpire)
                        {
                            ShipGroup shipGroup3 = relationWithLowestEvaluation.OtherEmpire.EmpireEventRogueFleetDefects(triggerEmpire);
                            if (shipGroup3 != null)
                            {
                                text = string.Format(TextResolver.GetText("GameEventAction Description EnemyFleetDefectsToTriggerEmpire"), shipGroup3.Name, relationWithLowestEvaluation.OtherEmpire.Name);
                                title = TextResolver.GetText("GameEventAction Title EnemyFleetDefectsToTriggerEmpire");
                                additionalData = shipGroup3;
                                location = null;
                                flag = true;
                            }
                        }
                        break;
                    }
                case EventActionType.FindMoneyTreasure:
                    if (eventAction.MoneyAmount > 0.0 && triggerEmpire != null)
                    {
                        triggerEmpire.StateMoney += eventAction.MoneyAmount;
                        triggerEmpire.PirateEconomy.PerformIncome(eventAction.MoneyAmount, PirateIncomeType.Undefined, CurrentStarDate);
                        text = string.Format(TextResolver.GetText("GameEventAction Description FindMoneyTreasure"), eventAction.MoneyAmount.ToString("###,###,##0"));
                        title = TextResolver.GetText("GameEventAction Title FindMoneyTreasure");
                        additionalData = null;
                        location = null;
                        flag = true;
                    }
                    break;
                case EventActionType.GenerateBuiltObject:
                    {
                        if (eventAction.Target == null || !(eventAction.Target is Habitat))
                        {
                            break;
                        }
                        habitat = (Habitat)eventAction.Target;
                        if (eventAction.BuiltObjectSubRole == BuiltObjectSubRole.Undefined)
                        {
                            break;
                        }
                        Empire empire3 = triggerEmpire;
                        if (empire3 == null && Empires.Count > 0)
                        {
                            empire3 = Empires[0];
                        }
                        if (empire3 != null)
                        {
                            Design design = empire3.GenerateDesignFromSpec(empire3.DesignSpecifications.GetBySubRole(eventAction.BuiltObjectSubRole), eventAction.TechLevel);
                            if (design != null)
                            {
                                design.PictureRef = ShipImageHelper.ResolveMinorShipImageIndex(design.SubRole, largeShips: true);
                                Habitat habitat7 = DetermineHabitatSystemStar(habitat);
                                builtObject = GenerateAbandonedBuiltObject(habitat, design, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Notify);
                                text = string.Format(TextResolver.GetText("GameEventAction Description GenerateBuiltObject"), ResolveDescription(builtObject.SubRole).ToLower(CultureInfo.InvariantCulture), builtObject.Name, habitat.Name, habitat7.Name);
                                title = string.Format(TextResolver.GetText("GameEventAction Title GenerateBuiltObject"), ResolveDescription(builtObject.SubRole));
                                additionalData = builtObject;
                                location = habitat;
                                flag = true;
                            }
                        }
                        break;
                    }
                case EventActionType.GenerateCreatureSwarm:
                    if (eventAction.Target != null && eventAction.Target is Habitat && eventAction.CreatureType != 0 && eventAction.Value > 0)
                    {
                        habitat = (Habitat)eventAction.Target;
                        int num7 = Math.Min(50, eventAction.Value);
                        for (int m = 0; m < num7; m++)
                        {
                            Habitat habitat21 = DetermineHabitatSystemStar(habitat);
                            creature = GenerateCreatureAtHabitat(eventAction.CreatureType, habitat, lockLocation: false);
                            text = string.Format(TextResolver.GetText("GameEventAction Description GenerateCreatureSwarm"), ResolveDescription(eventAction.CreatureType), habitat.Name, habitat21.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title GenerateCreatureSwarm"), ResolveDescription(eventAction.CreatureType));
                            additionalData = creature;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.GenerateNewEmpire:
                    {
                        if (eventAction.Race == null || eventAction.Target == null || !(eventAction.Target is Habitat))
                        {
                            break;
                        }
                        habitat = (Habitat)eventAction.Target;
                        if (habitat == null || habitat.HasBeenDestroyed || (habitat.Empire != null && habitat.Empire != IndependentEmpire))
                        {
                            break;
                        }
                        GovernmentAttributes governmentAttributes3 = null;
                        List<int> list = Empire.ResolveDefaultAllowableGovernmentTypes(eventAction.Race);
                        GovernmentAttributesList governmentAttributesList2 = Empire.DetermineMostSuitableGovermentTypes(eventAction.Race, list);
                        if (governmentAttributesList2 != null && governmentAttributesList2.Count > 0)
                        {
                            int index = Rnd.Next(0, governmentAttributesList2.Count);
                            governmentAttributes3 = governmentAttributesList2[index];
                            if (eventAction.Race.PreferredStartingGovernmentId >= 0 && list.Contains(eventAction.Race.PreferredStartingGovernmentId))
                            {
                                governmentAttributes3 = Governments[eventAction.Race.PreferredStartingGovernmentId];
                            }
                        }
                        double expansion = 0.0;
                        Empire empire6 = GenerateEmpire(this, isPlayerEmpire: false, string.Empty, habitat, eventAction.Race, eventAction.Race.DesignPictureFamilyIndex, governmentAttributes3.GovernmentId, 1.0, TextResolver.GetText("Normal"), 1, 0.5, 1.0, out expansion, null, null);
                        if (empire6 != null)
                        {
                            Habitat habitat26 = DetermineHabitatSystemStar(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description GenerateNewEmpire"), eventAction.Race.Name, empire6.Name, habitat.Name, habitat26.Name);
                            title = TextResolver.GetText("GameEventAction Title GenerateNewEmpire");
                            additionalData = empire6;
                            location = habitat;
                            flag = true;
                        }
                        break;
                    }
                case EventActionType.GenerateNewPirateFaction:
                    if (eventAction.Race == null || eventAction.Target == null || !(eventAction.Target is Habitat))
                    {
                        break;
                    }
                    habitat = (Habitat)eventAction.Target;
                    if (habitat != null && !habitat.HasBeenDestroyed && (habitat.Empire == null || habitat.Empire == IndependentEmpire) && NextEmpireID < MaximumEmpireCount)
                    {
                        SelectRelativeHabitatSurfacePoint(habitat, out var x, out var y);
                        PiratePlayStyle piratePlaystyle = SelectRandomPiratePlaystyle();
                        Empire empire4 = GeneratePirateEmpire(habitat, (int)x, (int)y, eventAction.Race, eventAction.Race.DesignPictureFamilyIndexPirates, 0.5, piratePlaystyle, isPlayerEmpire: false, isSuperPirates: false);
                        if (empire4 != null)
                        {
                            Habitat habitat12 = DetermineHabitatSystemStar(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description GenerateNewPirateFaction"), eventAction.Race.Name, empire4.Name, habitat.Name, habitat12.Name);
                            title = TextResolver.GetText("GameEventAction Title GenerateNewPirateFaction");
                            additionalData = empire4;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.GeneratePirateAmbush:
                    {
                        if (eventAction.Target == null || !(eventAction.Target is Habitat))
                        {
                            break;
                        }
                        habitat = (Habitat)eventAction.Target;
                        Empire empire2 = FindNearestPirateFaction(habitat.Xpos, habitat.Ypos, triggerEmpire, includeSuperPirates: false);
                        if (empire2 != null)
                        {
                            int num = Math.Min(50, eventAction.Value);
                            Habitat habitat3 = habitat;
                            double num2 = habitat.Xpos;
                            double num3 = habitat.Ypos;
                            int num4 = 0;
                            Habitat habitat4 = DetermineHabitatSystemStar(habitat);
                            while (habitat3 == habitat4 && num4 < 20)
                            {
                                num2 += Rnd.NextDouble() * 200000.0 - 100000.0;
                                num3 += Rnd.NextDouble() * 200000.0 - 100000.0;
                                habitat3 = FindNearestSystemGasCloudAsteroid(num2, num3);
                                num4++;
                            }
                            for (int i = 0; i < num; i++)
                            {
                                BuiltObject builtObject2 = GeneratePirateShip(empire2, BuiltObjectSubRole.Frigate, habitat3);
                                builtObject2.AssignMission(BuiltObjectMissionType.Move, habitat, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                                text = string.Format(TextResolver.GetText("GameEventAction Description GeneratePirateAmbush"), empire2.Name, habitat3.Name);
                                title = TextResolver.GetText("GameEventAction Title GeneratePirateAmbush");
                                additionalData = empire2;
                                location = habitat3;
                                flag = true;
                            }
                        }
                        break;
                    }
                case EventActionType.GenerateRefugeeFleet:
                    if (eventAction.Target != null && eventAction.Target is Habitat)
                    {
                        habitat = (Habitat)eventAction.Target;
                        Race race = null;
                        race = ((eventAction.Race == null) ? SelectRandomRace(75) : eventAction.Race);
                        Empire empire5 = triggerEmpire;
                        if (empire5 == null && Empires.Count > 0)
                        {
                            empire5 = Empires[0];
                        }
                        if (empire5 != null)
                        {
                            Design design2 = empire5.GenerateDesignFromSpec(empire5.ObtainDesignSpec(BuiltObjectSubRole.ColonyShip), 3.0);
                            Design design3 = empire5.GenerateDesignFromSpec(empire5.ObtainDesignSpec(BuiltObjectSubRole.Frigate), 3.0);
                            Design design4 = empire5.GenerateDesignFromSpec(empire5.ObtainDesignSpec(BuiltObjectSubRole.Cruiser), 3.0);
                            design2.PictureRef = ShipImageHelper.ResolveNewShipImageIndex(BuiltObjectSubRole.ColonyShip, race, isPirates: false);
                            design3.PictureRef = ShipImageHelper.ResolveNewShipImageIndex(BuiltObjectSubRole.Frigate, race, isPirates: false);
                            design4.PictureRef = ShipImageHelper.ResolveNewShipImageIndex(BuiltObjectSubRole.Cruiser, race, isPirates: false);
                            BuiltObject builtObject5 = GenerateAbandonedBuiltObject(habitat, design2, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Notify);
                            builtObject5.Name = string.Format(TextResolver.GetText("Refugee SHIPTYPE"), ResolveDescription(BuiltObjectSubRole.ColonyShip));
                            builtObject5.NativeRace = race;
                            BuiltObject builtObject6 = GenerateAbandonedBuiltObject(habitat, design3, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Notify);
                            builtObject6.Name = string.Format(TextResolver.GetText("Refugee SHIPTYPE"), ResolveDescription(BuiltObjectSubRole.Frigate));
                            BuiltObject builtObject7 = GenerateAbandonedBuiltObject(habitat, design4, allowCreatures: false, allowNegativeEffects: false, BuiltObjectEncounterAction.Notify);
                            builtObject7.Name = string.Format(TextResolver.GetText("Refugee SHIPTYPE"), ResolveDescription(BuiltObjectSubRole.Cruiser));
                            Habitat habitat22 = DetermineHabitatSystemStar(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description GenerateRefugeeFleet"), race.Name, habitat22.Name);
                            title = TextResolver.GetText("GameEventAction Title GenerateRefugeeFleet");
                            additionalData = race;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.GenerateResourceAtHabitat:
                    if (eventAction.Target != null && eventAction.Target is Habitat && eventAction.Value >= 0 && eventAction.Value < ResourceSystem.Resources.Count)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (!habitat.HasBeenDestroyed)
                        {
                            Resource resource2 = new Resource(ResourceSystem.Resources[eventAction.Value].ResourceID);
                            Empire.EmpireEventColonyResourceAppearance(habitat, resource2, triggerEmpire);
                            Habitat habitat11 = DetermineHabitatSystemStar(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description GenerateResourceAtHabitat"), resource2.Name, habitat.Name, habitat11.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title GenerateResourceAtHabitat"), resource2.Name);
                            additionalData = resource2;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.RemoveResourceAtHabitat:
                    if (eventAction.Target != null && eventAction.Target is Habitat && eventAction.Value >= 0 && eventAction.Value < ResourceSystem.Resources.Count)
                    {
                        habitat = (Habitat)eventAction.Target;
                        if (!habitat.HasBeenDestroyed)
                        {
                            Resource resource = new Resource(ResourceSystem.Resources[eventAction.Value].ResourceID);
                            Empire.EmpireEventColonyResourceDepletion(habitat, resource, triggerEmpire, this);
                            Habitat habitat5 = DetermineHabitatSystemStar(habitat);
                            text = string.Format(TextResolver.GetText("GameEventAction Description RemoveResourceAtHabitat"), resource.Name, habitat.Name, habitat5.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title RemoveResourceAtHabitat"), resource.Name);
                            additionalData = resource;
                            location = habitat;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.InterceptResource:
                    if (triggerEmpire != null && eventAction.Value >= 0 && eventAction.Value < ResourceSystem.Resources.Count)
                    {
                        Resource resource3 = new Resource(ResourceSystem.Resources[eventAction.Value].ResourceID);
                        double x2 = 0.0;
                        double y2 = 0.0;
                        if (triggerEmpire.Capital != null)
                        {
                            x2 = triggerEmpire.Capital.Xpos;
                            y2 = triggerEmpire.Capital.Ypos;
                        }
                        else if (triggerEmpire.PirateEmpireBaseHabitat != null)
                        {
                            x2 = triggerEmpire.PirateEmpireBaseHabitat.Xpos;
                            y2 = triggerEmpire.PirateEmpireBaseHabitat.Ypos;
                        }
                        if (gameEvent != null && gameEvent.TriggerObject != null)
                        {
                            x2 = gameEvent.TriggerObject.Xpos;
                            y2 = gameEvent.TriggerObject.Ypos;
                        }
                        BuiltObject builtObject4 = FastFindNearestSpacePort(x2, y2, triggerEmpire);
                        triggerEmpire.RandomEventRareResourceIntercepted(resource3, builtObject4, null);
                        string arg2 = string.Empty;
                        if (builtObject4.NearestSystemStar != null)
                        {
                            arg2 = builtObject4.NearestSystemStar.Name;
                        }
                        text = string.Format(TextResolver.GetText("GameEventAction Description InterceptResource"), resource3.Name, arg2, builtObject4.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title InterceptResource"), resource3.Name);
                        additionalData = resource3;
                        location = builtObject4;
                        flag = true;
                    }
                    break;
                case EventActionType.LearnAboutLostColony:
                    if (eventAction.Target == null || !(eventAction.Target is Habitat) || eventAction.Race == null || eventAction.Value <= 0 || triggerEmpire == null)
                    {
                        break;
                    }
                    habitat = (Habitat)eventAction.Target;
                    if (habitat.Owner == null)
                    {
                        switch (habitat.Type)
                        {
                            case HabitatType.Volcanic:
                            case HabitatType.Desert:
                            case HabitatType.MarshySwamp:
                            case HabitatType.Continental:
                            case HabitatType.Ocean:
                            case HabitatType.Ice:
                                {
                                    Habitat habitat9 = DetermineHabitatSystemStar(habitat);
                                    long newPopulationAmount = Math.Min(20000000000L, eventAction.Value * 1000000);
                                    triggerEmpire.MakeHabitatIntoColony(habitat, null, eventAction.Race, newPopulationAmount);
                                    text = string.Format(TextResolver.GetText("GameEventAction Description LearnAboutLostColony"), eventAction.Race.Name, habitat.Name, habitat9.Name);
                                    title = TextResolver.GetText("GameEventAction Title LearnAboutLostColony");
                                    additionalData = eventAction.Race;
                                    location = habitat;
                                    flag = true;
                                    break;
                                }
                        }
                    }
                    break;
                case EventActionType.LearnAboutSpecialLocation:
                    if (eventAction.Location != null && triggerEmpire != null && !triggerEmpire.KnownGalaxyLocations.Contains(eventAction.Location))
                    {
                        string arg = ResolveSectorDescriptionStatic(eventAction.Location.Xpos, eventAction.Location.Ypos);
                        triggerEmpire.KnownGalaxyLocations.Add(eventAction.Location);
                        if (triggerEmpire == PlayerEmpire)
                        {
                            triggerEmpire.AddLocationHint(new Point((int)eventAction.Location.Xpos + (int)eventAction.Location.Width / 2, (int)eventAction.Location.Ypos + (int)eventAction.Location.Height / 2));
                        }
                        text = string.Format(TextResolver.GetText("GameEventAction Description LearnAboutSpecialLocation"), eventAction.Location.Name, arg);
                        title = TextResolver.GetText("GameEventAction Title LearnAboutSpecialLocation");
                        additionalData = eventAction.Location;
                        location = eventAction.Location;
                        flag = true;
                    }
                    break;
                case EventActionType.LearnExplorationInfo:
                    {
                        if (eventAction.Value <= 0 || triggerEmpire == null || gameEvent == null || (gameEvent.TriggerObject == null && gameEvent.TriggerRuin == null))
                        {
                            break;
                        }
                        double x3 = 0.0;
                        double y3 = 0.0;
                        if (gameEvent.TriggerObject != null)
                        {
                            x3 = gameEvent.TriggerObject.Xpos;
                            y3 = gameEvent.TriggerObject.Ypos;
                        }
                        else if (gameEvent.TriggerRuin != null)
                        {
                            habitat = RuinsHabitats.FindHabitatWithRuin(gameEvent.TriggerRuin);
                            if (habitat != null)
                            {
                                x3 = habitat.Xpos;
                                y3 = habitat.Xpos;
                            }
                        }
                        Habitat habitat18 = FindNearestSystemGasCloudAsteroid(x3, y3);
                        int num6 = Math.Min(50, eventAction.Value);
                        for (int k = 0; k < num6; k++)
                        {
                            Habitat habitat19 = FastFindNearestUnexploredHabitat(x3, y3, triggerEmpire);
                            if (habitat19 == null)
                            {
                                break;
                            }
                            triggerEmpire.SystemVisibility[habitat19.SystemIndex].TotallyExplored = true;
                            if (triggerEmpire.ResourceMap != null)
                            {
                                for (int l = 0; l < Systems[habitat19.SystemIndex].Habitats.Count; l++)
                                {
                                    Habitat habitat20 = Systems[habitat19.SystemIndex].Habitats[l];
                                    triggerEmpire.ResourceMap.SetResourcesKnown(habitat20, known: true);
                                }
                                if (Systems[habitat19.SystemIndex].SystemStar != null)
                                {
                                    triggerEmpire.ResourceMap.SetResourcesKnown(Systems[habitat19.SystemIndex].SystemStar, known: true);
                                }
                            }
                            SystemVisibilityStatus status = triggerEmpire.SystemVisibility[habitat19.SystemIndex].Status;
                            if (status == SystemVisibilityStatus.Unexplored || status == SystemVisibilityStatus.Undefined)
                            {
                                triggerEmpire.SystemVisibility[habitat19.SystemIndex].Status = SystemVisibilityStatus.Explored;
                            }
                        }
                        text = string.Format(TextResolver.GetText("GameEventAction Description LearnExplorationInfo"), num6.ToString("0"), habitat18.Name);
                        title = TextResolver.GetText("GameEventAction Title LearnExplorationInfo");
                        additionalData = null;
                        location = habitat18;
                        flag = true;
                        break;
                    }
                case EventActionType.LearnGovernmentType:
                    {
                        if (triggerEmpire == null || triggerEmpire.PirateEmpireBaseHabitat != null || eventAction.Value < 0 || eventAction.Value >= Governments.Count)
                        {
                            break;
                        }
                        GovernmentAttributes governmentAttributes = Governments[eventAction.Value];
                        if (governmentAttributes == null)
                        {
                            break;
                        }
                        if (!triggerEmpire.AllowableGovernmentTypes.Contains(governmentAttributes.GovernmentId))
                        {
                            triggerEmpire.AllowableGovernmentTypes.Add(governmentAttributes.GovernmentId);
                        }
                        if (triggerEmpire != PlayerEmpire)
                        {
                            GovernmentAttributesList governmentAttributesList = Empire.DetermineMostSuitableGovermentTypes(triggerEmpire.DominantRace, triggerEmpire.AllowableGovernmentTypes);
                            int governmentId = governmentAttributesList[0].GovernmentId;
                            if (governmentId == governmentAttributes.GovernmentId)
                            {
                                triggerEmpire.HaveRevolution(triggerEmpire.DominantRace, governmentId);
                            }
                        }
                        text = string.Format(TextResolver.GetText("GameEventAction Description LearnGovernmentType"), governmentAttributes.Name);
                        title = TextResolver.GetText("GameEventAction Title LearnGovernmentType");
                        additionalData = governmentAttributes;
                        location = null;
                        flag = true;
                        break;
                    }
                case EventActionType.LearnTech:
                    if (triggerEmpire != null && eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitions.Count)
                    {
                        ResearchNode researchNode = triggerEmpire.Research.TechTree.FindNodeById(eventAction.Value);
                        if (researchNode != null && !researchNode.IsResearched)
                        {
                            triggerEmpire.DoResearchBreakthrough(researchNode, selfResearched: true, blockMessages: true, suppressUpdate: true);
                            triggerEmpire.Research.Update(triggerEmpire.DominantRace);
                            triggerEmpire.ReviewDesignsBuiltObjectsImprovedComponents();
                            triggerEmpire.ReviewResearchAbilities();
                            text = string.Format(TextResolver.GetText("GameEventAction Description LearnTech"), researchNode.Name);
                            title = TextResolver.GetText("GameEventAction Title LearnTech");
                            additionalData = researchNode;
                            location = null;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.UnlockTech:
                    if (triggerEmpire != null && eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitions.Count)
                    {
                        ResearchNode researchNode4 = triggerEmpire.Research.TechTree.FindNodeById(eventAction.Value);
                        if (researchNode4 != null && !researchNode4.IsEnabled)
                        {
                            researchNode4.IsEnabled = true;
                            text = string.Format(TextResolver.GetText("GameEventAction Description UnlockTech"), researchNode4.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title UnlockTech"), researchNode4.Name);
                            additionalData = researchNode4;
                            location = null;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.MakeEmpireContact:
                    if (eventAction.Empire == null || triggerEmpire == null || eventAction.Empire == triggerEmpire)
                    {
                        break;
                    }
                    if (eventAction.Empire.PirateEmpireBaseHabitat == null && triggerEmpire.PirateEmpireBaseHabitat == null)
                    {
                        DiplomaticRelation diplomaticRelation7 = triggerEmpire.ObtainDiplomaticRelation(eventAction.Empire);
                        if (diplomaticRelation7.Type == DiplomaticRelationType.NotMet)
                        {
                            diplomaticRelation7.Type = DiplomaticRelationType.None;
                            diplomaticRelation7 = eventAction.Empire.ObtainDiplomaticRelation(triggerEmpire);
                            diplomaticRelation7.Type = DiplomaticRelationType.None;
                            text = string.Format(TextResolver.GetText("GameEventAction Description MakeEmpireContact"), eventAction.Empire);
                            title = string.Format(TextResolver.GetText("GameEventAction Title MakeEmpireContact"), eventAction.Empire);
                            additionalData = eventAction.Empire;
                            location = null;
                            flag = true;
                        }
                    }
                    else
                    {
                        PirateRelation pirateRelation = triggerEmpire.ObtainPirateRelation(eventAction.Empire);
                        if (pirateRelation.Type == PirateRelationType.NotMet)
                        {
                            triggerEmpire.ChangePirateRelation(eventAction.Empire, PirateRelationType.None, CurrentStarDate);
                            text = string.Format(TextResolver.GetText("GameEventAction Description MakeEmpireContact"), eventAction.Empire);
                            title = string.Format(TextResolver.GetText("GameEventAction Title MakeEmpireContact"), eventAction.Empire);
                            additionalData = eventAction.Empire;
                            location = null;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.SleepingRaceAwokenAtHabitat:
                    if (eventAction.Target == null || !(eventAction.Target is Habitat) || eventAction.Race == null || eventAction.Value <= 0)
                    {
                        break;
                    }
                    habitat = (Habitat)eventAction.Target;
                    if (habitat.Owner == null)
                    {
                        long amount = Math.Min(20000000000L, eventAction.Value * 1000000);
                        Population population = new Population(eventAction.Race, amount);
                        if (habitat.Population == null)
                        {
                            habitat.Population = new PopulationList();
                        }
                        habitat.Population.Add(population);
                        IndependentEmpire.TakeOwnershipOfColony(habitat, IndependentEmpire);
                        Habitat habitat8 = DetermineHabitatSystemStar(habitat);
                        text = string.Format(TextResolver.GetText("GameEventAction Description SleepingRaceAwokenAtHabitat"), eventAction.Race.Name, habitat.Name, habitat8.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title SleepingRaceAwokenAtHabitat"), eventAction.Race.Name);
                        additionalData = eventAction.Race;
                        location = habitat;
                        flag = true;
                    }
                    break;
                case EventActionType.SplitEmpireCivilWar:
                    if (eventAction.Empire != null)
                    {
                        double splinterPortion2 = 0.3 + Rnd.NextDouble() * 0.25;
                        eventAction.Empire.InitiateEmpireSplit(splinterPortion2, declareWar: true);
                        text = string.Format(TextResolver.GetText("GameEventAction Description SplitEmpireCivilWar"), eventAction.Empire.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title SplitEmpireCivilWar"), eventAction.Empire.Name);
                        additionalData = eventAction.Empire;
                        location = null;
                        flag = true;
                    }
                    break;
                case EventActionType.SplitEmpirePeacefully:
                    if (eventAction.Empire != null)
                    {
                        double splinterPortion = 0.3 + Rnd.NextDouble() * 0.25;
                        eventAction.Empire.InitiateEmpireSplit(splinterPortion, declareWar: false);
                        text = string.Format(TextResolver.GetText("GameEventAction Description SplitEmpirePeacefully"), eventAction.Empire.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title SplitEmpirePeacefully"), eventAction.Empire.Name);
                        additionalData = eventAction.Empire;
                        location = null;
                        flag = true;
                    }
                    break;
                case EventActionType.UnlockTechForEmpire:
                    if (eventAction.Empire != null && eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitions.Count)
                    {
                        ResearchNode researchNode2 = eventAction.Empire.Research.TechTree.FindNodeById(eventAction.Value);
                        if (researchNode2 != null && !researchNode2.IsEnabled)
                        {
                            researchNode2.IsEnabled = true;
                            text = string.Format(TextResolver.GetText("GameEventAction Description UnlockTechForEmpire"), researchNode2.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title UnlockTechForEmpire"), researchNode2.Name);
                            additionalData = researchNode2;
                            location = null;
                            flag = true;
                            empire = eventAction.Empire;
                        }
                    }
                    break;
                case EventActionType.ChangeEmpireReputation:
                    if (eventAction.Empire != null && eventAction.Value != 0)
                    {
                        eventAction.Empire.CivilityRating += eventAction.Value;
                        if (eventAction.Value >= 0)
                        {
                            text = TextResolver.GetText("GameEventAction Description ChangeEmpireReputation Better");
                            title = TextResolver.GetText("GameEventAction Title ChangeEmpireReputation Better");
                        }
                        else
                        {
                            text = TextResolver.GetText("GameEventAction Description ChangeEmpireReputation Worse");
                            title = TextResolver.GetText("GameEventAction Title ChangeEmpireReputation Worse");
                        }
                        additionalData = null;
                        location = null;
                        flag = true;
                        empire = eventAction.Empire;
                    }
                    break;
                case EventActionType.ChangeEmpireEvaluation:
                    if (eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.Empire != eventAction.EmpireOther && eventAction.Value != 0)
                    {
                        EmpireEvaluation empireEvaluation = eventAction.Empire.ObtainEmpireEvaluation(eventAction.EmpireOther);
                        if (empireEvaluation != null)
                        {
                            empireEvaluation.IncidentEvaluation = empireEvaluation.IncidentEvaluationRaw + (double)eventAction.Value;
                            text = ((eventAction.Value < 0) ? string.Format(TextResolver.GetText("GameEventAction Description ChangeEmpireEvaluation Worse"), eventAction.Empire.Name) : string.Format(TextResolver.GetText("GameEventAction Description ChangeEmpireEvaluation Better"), eventAction.Empire.Name));
                            title = string.Format(TextResolver.GetText("GameEventAction Title ChangeEmpireEvaluation"), eventAction.Empire.Name);
                            additionalData = null;
                            location = null;
                            flag = true;
                            empire = eventAction.EmpireOther;
                        }
                    }
                    break;
                case EventActionType.InitiateTreaty:
                    {
                        if (eventAction.Empire == null || eventAction.EmpireOther == null || eventAction.Empire == eventAction.EmpireOther || (eventAction.DiplomaticRelationType != DiplomaticRelationType.FreeTradeAgreement && eventAction.DiplomaticRelationType != DiplomaticRelationType.Protectorate && eventAction.DiplomaticRelationType != DiplomaticRelationType.MutualDefensePact))
                        {
                            break;
                        }
                        DiplomaticRelation diplomaticRelation2 = eventAction.Empire.ObtainDiplomaticRelation(eventAction.EmpireOther);
                        if (diplomaticRelation2 == null)
                        {
                            break;
                        }
                        if (diplomaticRelation2.Type != eventAction.DiplomaticRelationType)
                        {
                            eventAction.Empire.ChangeDiplomaticRelation(diplomaticRelation2, eventAction.DiplomaticRelationType, blockFlowonEffects: false, eventAction.LockedAlliance, eventAction.AllianceName);
                            text = string.Format(TextResolver.GetText("GameEventAction Description InitiateTreaty"), ResolveDescription(eventAction.DiplomaticRelationType), eventAction.Empire.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title InitiateTreaty"), ResolveDescription(eventAction.DiplomaticRelationType));
                            additionalData = null;
                            location = null;
                            flag = true;
                            empire = eventAction.EmpireOther;
                            break;
                        }
                        if (eventAction.LockedAlliance && !diplomaticRelation2.Locked)
                        {
                            diplomaticRelation2.Locked = true;
                            DiplomaticRelation diplomaticRelation3 = eventAction.EmpireOther.ObtainDiplomaticRelation(eventAction.Empire);
                            if (diplomaticRelation3 != null)
                            {
                                diplomaticRelation3.Locked = true;
                            }
                        }
                        if (!string.IsNullOrEmpty(eventAction.AllianceName) && diplomaticRelation2.AllianceName != eventAction.AllianceName)
                        {
                            diplomaticRelation2.AllianceName = eventAction.AllianceName;
                            DiplomaticRelation diplomaticRelation4 = eventAction.EmpireOther.ObtainDiplomaticRelation(eventAction.Empire);
                            if (diplomaticRelation4 != null)
                            {
                                diplomaticRelation4.AllianceName = eventAction.AllianceName;
                            }
                        }
                        break;
                    }
                case EventActionType.BreakTreaty:
                    if (eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.Empire != eventAction.EmpireOther)
                    {
                        DiplomaticRelation diplomaticRelation = eventAction.Empire.ObtainDiplomaticRelation(eventAction.EmpireOther);
                        if (diplomaticRelation != null && (diplomaticRelation.Type == DiplomaticRelationType.FreeTradeAgreement || diplomaticRelation.Type == DiplomaticRelationType.Protectorate || diplomaticRelation.Type == DiplomaticRelationType.MutualDefensePact))
                        {
                            DiplomaticRelationType type = diplomaticRelation.Type;
                            eventAction.Empire.ChangeDiplomaticRelation(diplomaticRelation, DiplomaticRelationType.None);
                            text = string.Format(TextResolver.GetText("GameEventAction Description BreakTreaty"), ResolveDescription(type), eventAction.Empire.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title BreakTreaty"), ResolveDescription(type));
                            additionalData = null;
                            location = null;
                            flag = true;
                            empire = eventAction.EmpireOther;
                        }
                    }
                    break;
                case EventActionType.StartTradingSuperLuxuryResources:
                    if (eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.Empire != eventAction.EmpireOther)
                    {
                        DiplomaticRelation diplomaticRelation9 = eventAction.Empire.ObtainDiplomaticRelation(eventAction.EmpireOther);
                        if (diplomaticRelation9 != null && !diplomaticRelation9.SupplyRestrictedResources)
                        {
                            diplomaticRelation9.SupplyRestrictedResources = true;
                            text = string.Format(TextResolver.GetText("GameEventAction Description StartTradingSuperLuxuryResources"), eventAction.Empire.Name);
                            title = TextResolver.GetText("GameEventAction Title StartTradingSuperLuxuryResources");
                            additionalData = null;
                            location = null;
                            flag = true;
                            empire = eventAction.EmpireOther;
                        }
                    }
                    break;
                case EventActionType.StopTradingSuperLuxuryResources:
                    if (eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.Empire != eventAction.EmpireOther)
                    {
                        DiplomaticRelation diplomaticRelation8 = eventAction.Empire.ObtainDiplomaticRelation(eventAction.EmpireOther);
                        if (diplomaticRelation8 != null && diplomaticRelation8.SupplyRestrictedResources)
                        {
                            diplomaticRelation8.SupplyRestrictedResources = false;
                            text = string.Format(TextResolver.GetText("GameEventAction Description StopTradingSuperLuxuryResources"), eventAction.Empire.Name);
                            title = TextResolver.GetText("GameEventAction Title StopTradingSuperLuxuryResources");
                            additionalData = null;
                            location = null;
                            flag = true;
                            empire = eventAction.EmpireOther;
                        }
                    }
                    break;
                case EventActionType.GeneralMessageToEmpire:
                    if (eventAction.Empire != null && !string.IsNullOrWhiteSpace(eventAction.MessageText))
                    {
                        text = eventAction.MessageText;
                        title = TextResolver.GetText("GameEventAction Title GeneralMessageToEmpire");
                        additionalData = eventAction;
                        location = null;
                        flag = true;
                        empire = eventAction.Empire;
                    }
                    break;
                case EventActionType.EmpireMessageToEmpire:
                    if (eventAction.Empire != null && eventAction.EmpireOther != null && !string.IsNullOrWhiteSpace(eventAction.MessageText))
                    {
                        text = eventAction.MessageText;
                        title = string.Format(TextResolver.GetText("GameEventAction Title EmpireMessageToEmpire"), eventAction.Empire.Name);
                        additionalData = eventAction;
                        location = null;
                        flag = true;
                        empire = eventAction.EmpireOther;
                    }
                    break;
                case EventActionType.ResearchBonusInProject:
                    if (eventAction.Value >= 0 && eventAction.Value < ResearchNodeDefinitions.Count)
                    {
                        ResearchNode researchNode3 = triggerEmpire.Research.TechTree.FindNodeById(eventAction.Value);
                        if (researchNode3 != null && !researchNode3.IsResearched)
                        {
                            float cost = researchNode3.Cost;
                            float num5 = (float)(Rnd.NextDouble() * (double)cost);
                            researchNode3.Progress += num5;
                            text = string.Format(TextResolver.GetText("GameEventAction Description ResearchBonusInProject"), researchNode3.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title ResearchBonusInProject"), researchNode3.Name);
                            additionalData = null;
                            location = null;
                            flag = true;
                        }
                    }
                    break;
                case EventActionType.VictoryConditionBonus:
                    if (eventAction.Empire != null)
                    {
                        eventAction.Empire.VictoryBonus += (float)eventAction.Value / 100f;
                        text = string.Format(TextResolver.GetText("GameEventAction Description VictoryConditionBonus"), eventAction.Value.ToString("+0;-0") + "%");
                        title = TextResolver.GetText("GameEventAction Title VictoryConditionBonus");
                        additionalData = eventAction.Empire;
                        location = null;
                        flag = true;
                        empire = eventAction.Empire;
                    }
                    break;
                case EventActionType.EmpireDeclaresWarOnOtherEmpire:
                    if (eventAction.Empire == null || eventAction.EmpireOther == null || eventAction.Empire == eventAction.EmpireOther)
                    {
                        break;
                    }
                    if (eventAction.DiplomaticRelationType != DiplomaticRelationType.War)
                    {
                        eventAction.Empire.DeclareWar(eventAction.EmpireOther, null, eventAction.LockedAlliance, blockFlowonEffects: false);
                        text = string.Format(TextResolver.GetText("GameEventAction Description EmpireDeclaresWarOnOtherEmpire"), eventAction.Empire.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title EmpireDeclaresWarOnOtherEmpire"), eventAction.Empire.Name, eventAction.EmpireOther.Name);
                        additionalData = null;
                        location = null;
                        flag = true;
                        empire = eventAction.EmpireOther;
                    }
                    else
                    {
                        if (!eventAction.LockedAlliance)
                        {
                            break;
                        }
                        DiplomaticRelation diplomaticRelation5 = eventAction.Empire.ObtainDiplomaticRelation(eventAction.EmpireOther);
                        if (diplomaticRelation5 != null && !diplomaticRelation5.Locked)
                        {
                            diplomaticRelation5.Locked = true;
                            DiplomaticRelation diplomaticRelation6 = eventAction.EmpireOther.ObtainDiplomaticRelation(eventAction.Empire);
                            if (diplomaticRelation6 != null)
                            {
                                diplomaticRelation6.Locked = true;
                            }
                        }
                    }
                    break;
                case EventActionType.SendFleetAttack:
                    if (eventAction.Target != null && eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.Empire != eventAction.EmpireOther && eventAction.Target.Empire == eventAction.EmpireOther)
                    {
                        ShipGroup shipGroup = eventAction.Empire.IdentifyNearestAvailableFleet(eventAction.Target.Xpos, eventAction.Target.Ypos, mustBeAutomated: true, mustBeWithinFuelRange: true, 0.0, 0.0, defendFleetsMustBeWithinPostureRange: false, forceFleetUse: true, 10);
                        if (shipGroup == null)
                        {
                            shipGroup = eventAction.Empire.IdentifyNearestAvailableFleet(eventAction.Target.Xpos, eventAction.Target.Ypos, mustBeAutomated: true, mustBeWithinFuelRange: true, 0.0, 0.0, defendFleetsMustBeWithinPostureRange: false, forceFleetUse: true, 0);
                        }
                        if (shipGroup != null)
                        {
                            shipGroup.AssignMission(BuiltObjectMissionType.Attack, eventAction.Target, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            text = string.Format(TextResolver.GetText("GameEventAction Description SendFleetAttack"), eventAction.Target.Name, eventAction.Empire.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title SendFleetAttack"), eventAction.Target.Name);
                            additionalData = eventAction.Target;
                            location = eventAction.Target;
                            flag = true;
                            empire = eventAction.Empire;
                        }
                    }
                    break;
                case EventActionType.SendPlanetDestroyerAttack:
                    if (eventAction.Target != null && eventAction.Target is Habitat && eventAction.Empire != null && eventAction.EmpireOther != null && eventAction.Empire != eventAction.EmpireOther && eventAction.Target.Empire == eventAction.EmpireOther && eventAction.Empire.PlanetDestroyers != null && eventAction.Empire.PlanetDestroyers.Count > 0)
                    {
                        BuiltObject builtObject8 = eventAction.Empire.PlanetDestroyers.GetFirstAvailableWithinRange(BuiltObjectRole.Military, eventAction.Target.Xpos, eventAction.Target.Ypos, 0.0, includeLowAndNormalPriorityMissions: true);
                        if (builtObject8 == null)
                        {
                            builtObject8 = eventAction.Empire.PlanetDestroyers.GetNearestBuiltObjectCompleteUndamaged(eventAction.Target.Xpos, eventAction.Target.Ypos, BuiltObjectRole.Military, null);
                        }
                        if (builtObject8 != null && builtObject8.IsPlanetDestroyer)
                        {
                            builtObject8.AssignMission(BuiltObjectMissionType.Attack, eventAction.Target, null, BuiltObjectMissionPriority.High, manuallyAssigned: false);
                            text = string.Format(TextResolver.GetText("GameEventAction Description SendPlanetDestroyerAttack"), eventAction.Target.Name, eventAction.Empire.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title SendPlanetDestroyerAttack"), eventAction.Target.Name);
                            additionalData = eventAction.Target;
                            location = eventAction.Target;
                            flag = true;
                            empire = eventAction.Empire;
                        }
                    }
                    break;
                case EventActionType.IntergalacticConvoyMilitary:
                    if (eventAction.Empire != null && eventAction.Value > 0 && eventAction.Empire.Active)
                    {
                        GenerateMilitaryConvoy(eventAction.Empire, eventAction.Value, 1f);
                        text = string.Empty;
                        flag = true;
                    }
                    break;
                case EventActionType.IntergalacticConvoyCivilian:
                    if (eventAction.Empire != null && eventAction.Value > 0 && eventAction.Empire.Active)
                    {
                        GenerateCivilianConvoy(eventAction.Empire, eventAction.Value, 1f, string.Empty);
                        text = string.Empty;
                        flag = true;
                    }
                    break;
                case EventActionType.CharacterGenerate:
                    if (eventAction.Empire == null || eventAction.Target == null || (eventAction.Target.Empire != eventAction.Empire && eventAction.Target.Empire != IndependentEmpire))
                    {
                        break;
                    }
                    if (eventAction.Character != null && !eventAction.Character.Active)
                    {
                        if (eventAction.Empire.GenerateNewCharacterFromCustom(eventAction.Character, eventAction.Target))
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description CharacterGenerate"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name, eventAction.Target.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title CharacterGenerate"), ResolveDescription(eventAction.Character.Role));
                            additionalData = eventAction.Character;
                            location = eventAction.Target;
                            flag = true;
                            empire = eventAction.Empire;
                        }
                    }
                    else if (eventAction.CharacterRole != 0)
                    {
                        Character character = eventAction.Empire.GenerateNewCharacterRandom(eventAction.CharacterRole, eventAction.Target, activate: true);
                        if (character != null)
                        {
                            text = string.Format(TextResolver.GetText("GameEventAction Description CharacterGenerate"), ResolveDescription(character.Role), character.Name, eventAction.Target.Name);
                            title = string.Format(TextResolver.GetText("GameEventAction Title CharacterGenerate"), ResolveDescription(character.Role));
                            additionalData = character;
                            location = eventAction.Target;
                            flag = true;
                            empire = eventAction.Empire;
                        }
                    }
                    break;
                case EventActionType.CharacterKill:
                    if (eventAction.Empire != null && eventAction.Character != null && eventAction.Character.Active)
                    {
                        text = string.Format(TextResolver.GetText("GameEventAction Description CharacterKill"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name);
                        title = string.Format(TextResolver.GetText("GameEventAction Title CharacterKill"), ResolveDescription(eventAction.Character.Role));
                        additionalData = eventAction.Character;
                        location = eventAction.Character.Location;
                        flag = true;
                        empire = eventAction.Empire;
                        eventAction.Character.Kill(this);
                    }
                    break;
                case EventActionType.CharacterChangeEmpire:
                    if (eventAction.Empire == null || eventAction.Character == null || !eventAction.Character.Active || eventAction.EmpireOther == null || eventAction.Empire == eventAction.EmpireOther)
                    {
                        break;
                    }
                    eventAction.Character.CompleteEmpireChange(eventAction.EmpireOther);
                    if (eventAction.EmpireOther.PirateEmpireBaseHabitat != null)
                    {
                        BuiltObject builtObject3 = IdentifyPirateSpaceport(eventAction.EmpireOther);
                        if (builtObject3 != null)
                        {
                            eventAction.Character.CompleteLocationTransfer(builtObject3, this);
                        }
                        else
                        {
                            builtObject3 = IdentifyPirateBase(eventAction.EmpireOther);
                            if (builtObject3 != null)
                            {
                                eventAction.Character.CompleteLocationTransfer(builtObject3, this);
                            }
                        }
                    }
                    else if (eventAction.EmpireOther.Capital != null)
                    {
                        eventAction.Character.CompleteLocationTransfer(eventAction.EmpireOther.Capital, this);
                    }
                    text = string.Format(TextResolver.GetText("GameEventAction Description CharacterChangeEmpire"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name, eventAction.Empire.Name, eventAction.EmpireOther.Name);
                    title = string.Format(TextResolver.GetText("GameEventAction Title CharacterChangeEmpire"), ResolveDescription(eventAction.Character.Role));
                    additionalData = eventAction.Character;
                    location = eventAction.Character.Location;
                    flag = true;
                    empire = eventAction.Empire;
                    break;
                case EventActionType.CharacterChangeRole:
                    if (eventAction.Empire != null && eventAction.Character != null && eventAction.Character.Active && eventAction.CharacterRole != 0)
                    {
                        text = string.Format(TextResolver.GetText("GameEventAction Description CharacterChangeRole"), ResolveDescription(eventAction.Character.Role), eventAction.Character.Name, ResolveDescription(eventAction.CharacterRole));
                        title = string.Format(TextResolver.GetText("GameEventAction Title CharacterChangeRole"), ResolveDescription(eventAction.Character.Role), ResolveDescription(eventAction.CharacterRole));
                        additionalData = eventAction.Character;
                        location = eventAction.Character.Location;
                        flag = true;
                        empire = eventAction.Empire;
                        eventAction.Character.RemoveAllSkillsAndTraits();
                        eventAction.Character.Role = eventAction.CharacterRole;
                        eventAction.Character.Empire.ApplyRandomCharacterSkillsTraits(eventAction.Character, boostSkillLevels: false);
                        OnCharacterImageChanged(new CharacterImageChangedEventArgs(eventAction.Character));
                    }
                    break;
                case EventActionType.CharacterChangeImage:
                    if (eventAction.Empire != null && eventAction.Character != null && eventAction.Character.Active && !string.IsNullOrEmpty(eventAction.ImageFilename))
                    {
                        text = string.Empty;
                        additionalData = eventAction.Character;
                        location = eventAction.Character.Location;
                        flag = true;
                        empire = eventAction.Empire;
                        eventAction.Character.PictureFilename = eventAction.ImageFilename;
                        OnCharacterImageChanged(new CharacterImageChangedEventArgs(eventAction.Character));
                    }
                    break;
            }
            if (gameEvent != null)
            {
                if (!string.IsNullOrWhiteSpace(gameEvent.Title))
                {
                    title = gameEvent.Title;
                }
                if (!string.IsNullOrWhiteSpace(gameEvent.Description))
                {
                    text += "\n\n";
                    text += gameEvent.Description;
                }
            }
            if (!BaconGalaxy.ExecuteEventAction(this, eventAction, triggerEmpire, gameEvent, flag))
            {
                return;
            }
            if (!string.IsNullOrWhiteSpace(eventAction.MessageTitle))
            {
                title = eventAction.MessageTitle;
            }
            if (!string.IsNullOrWhiteSpace(eventAction.MessageText))
            {
                text = eventAction.MessageText;
            }
            if (!string.IsNullOrEmpty(text))
            {
                if (empire != null)
                {
                    empire.SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, title, text, additionalData, location);
                }
                else
                {
                    triggerEmpire?.SendEventMessageToEmpire(EventMessageType.GeneralDiscovery, title, text, additionalData, location);
                }
            }
        }

        private void RemoveNullBuiltObjects()
        {
            List<int> list = new List<int>();
            for (int i = 0; i < BuiltObjects.Count; i++)
            {
                if (BuiltObjects[i] == null)
                {
                    list.Add(i);
                }
            }
            if (list.Count > 0)
            {
                for (int num = list.Count - 1; num >= 0; num--)
                {
                    BuiltObjects.RemoveAt(list[num]);
                }
            }
        }

        private void FixResourceMapsByteSplicing(int startIndex, int endIndex, HabitatList newHabitats)
        {
            _Reindexing = true;
            if (newHabitats.Count % 8 != 0)
            {
                throw new ApplicationException("Cannot insert new habitats into resource maps - habitat count is not a multiple of 8");
            }
            List<byte[]> list = new List<byte[]>();
            List<byte[]> list2 = new List<byte[]>();
            List<bool[]> list3 = new List<bool[]>();
            int num = startIndex - newHabitats.Count;
            int num2 = num / 8;
            int afterByteIndex = num2 + 1;
            byte[] before;
            byte[] after;
            bool[] middle;
            for (int i = 0; i < Empires.Count; i++)
            {
                Empire empire = Empires[i];
                if (empire != null && empire.ResourceMap != null)
                {
                    RetrieveResourceMapBlocks(empire.ResourceMap, num2, afterByteIndex, out before, out after, out middle);
                    list.Add(before);
                    list2.Add(after);
                    list3.Add(middle);
                }
            }
            if (IndependentEmpire != null && IndependentEmpire.ResourceMap != null)
            {
                RetrieveResourceMapBlocks(IndependentEmpire.ResourceMap, num2, afterByteIndex, out before, out after, out middle);
                list.Add(before);
                list2.Add(after);
                list3.Add(middle);
            }
            for (int j = 0; j < PirateEmpires.Count; j++)
            {
                Empire empire2 = PirateEmpires[j];
                if (empire2 != null && empire2.ResourceMap != null)
                {
                    RetrieveResourceMapBlocks(empire2.ResourceMap, num2, afterByteIndex, out before, out after, out middle);
                    list.Add(before);
                    list2.Add(after);
                    list3.Add(middle);
                }
            }
            ReindexHabitats(startIndex, endIndex, newHabitats.Count, newHabitats);
            int num3 = 0;
            for (int k = 0; k < Empires.Count; k++)
            {
                Empire empire3 = Empires[k];
                if (empire3 != null && empire3.ResourceMap != null)
                {
                    empire3.ResourceMap = RecreateResourceMapFromBlocks(num2, afterByteIndex, list[num3], list2[num3], list3[num3], newHabitats);
                    num3++;
                }
            }
            if (IndependentEmpire != null && IndependentEmpire.ResourceMap != null)
            {
                IndependentEmpire.ResourceMap = RecreateResourceMapFromBlocks(num2, afterByteIndex, list[num3], list2[num3], list3[num3], newHabitats);
                num3++;
            }
            for (int l = 0; l < PirateEmpires.Count; l++)
            {
                Empire empire4 = PirateEmpires[l];
                if (empire4 != null && empire4.ResourceMap != null)
                {
                    empire4.ResourceMap = RecreateResourceMapFromBlocks(num2, afterByteIndex, list[num3], list2[num3], list3[num3], newHabitats);
                    num3++;
                }
            }
            _Reindexing = false;
        }

        private GalaxyResourceMap RecreateResourceMapFromBlocks(int beforeByteIndex, int afterByteIndex, byte[] before, byte[] after, bool[] middle, HabitatList newHabitats)
        {
            GalaxyResourceMap galaxyResourceMap = new GalaxyResourceMap();
            galaxyResourceMap.InitializeFlags(Habitats.Count, this);
            if (newHabitats != null)
            {
                Array.Copy(before, 0, galaxyResourceMap._ResourcesKnown, 0, before.Length);
                int destinationIndex = afterByteIndex + newHabitats.Count / 8;
                Array.Copy(after, 0, galaxyResourceMap._ResourcesKnown, destinationIndex, after.Length);
                int habitatIndex = newHabitats[0].HabitatIndex;
                int num = beforeByteIndex * 8;
                for (int i = 0; i < middle.Length; i++)
                {
                    int num2 = num + i;
                    if (num2 == habitatIndex)
                    {
                        num += newHabitats.Count;
                        num2 = num + i;
                    }
                    galaxyResourceMap.SetResourcesKnownRaw(num2, middle[i]);
                }
            }
            return galaxyResourceMap;
        }

        private void RetrieveResourceMapBlocks(GalaxyResourceMap map, int beforeByteIndex, int afterByteIndex, out byte[] before, out byte[] after, out bool[] middle)
        {
            before = new byte[beforeByteIndex];
            Array.Copy(map._ResourcesKnown, 0, before, 0, beforeByteIndex);
            int num = map._ResourcesKnown.Length - afterByteIndex;
            after = new byte[num];
            Array.Copy(map._ResourcesKnown, afterByteIndex, after, 0, num);
            middle = new bool[8];
            int num2 = beforeByteIndex * 8;
            for (int i = 0; i < 8; i++)
            {
                middle[i] = map.CheckResourcesKnownRaw(num2 + i);
            }
        }

        private void FixResourceMaps(int startIndex, int endIndex, int movement, HabitatList newHabitats)
        {
            _Reindexing = true;
            List<bool[]> list = new List<bool[]>();
            List<bool[]> list2 = new List<bool[]>();
            List<bool[]> list3 = new List<bool[]>();
            for (int i = 0; i < Empires.Count; i++)
            {
                list.Add(new bool[Habitats.Count]);
                Empire empire = Empires[i];
                if (empire.ResourceMap == null)
                {
                    continue;
                }
                if (newHabitats != null)
                {
                    for (int j = 0; j < Habitats.Count; j++)
                    {
                        if (newHabitats.Contains(Habitats[j]))
                        {
                            list[i][j] = false;
                        }
                        else
                        {
                            list[i][j] = empire.ResourceMap.CheckResourcesKnownRaw(Habitats[j]);
                        }
                    }
                }
                else
                {
                    for (int k = 0; k < Habitats.Count; k++)
                    {
                        list[i][k] = empire.ResourceMap.CheckResourcesKnownRaw(Habitats[k]);
                    }
                }
            }
            list3.Add(new bool[Habitats.Count]);
            if (IndependentEmpire.ResourceMap != null)
            {
                if (newHabitats != null)
                {
                    for (int l = 0; l < Habitats.Count; l++)
                    {
                        if (newHabitats.Contains(Habitats[l]))
                        {
                            list3[0][l] = false;
                        }
                        else
                        {
                            list3[0][l] = IndependentEmpire.ResourceMap.CheckResourcesKnownRaw(Habitats[l]);
                        }
                    }
                }
                else
                {
                    for (int m = 0; m < Habitats.Count; m++)
                    {
                        list3[0][m] = IndependentEmpire.ResourceMap.CheckResourcesKnownRaw(Habitats[m]);
                    }
                }
            }
            for (int n = 0; n < PirateEmpires.Count; n++)
            {
                list2.Add(new bool[Habitats.Count]);
                Empire empire2 = PirateEmpires[n];
                if (empire2.ResourceMap == null)
                {
                    continue;
                }
                if (newHabitats != null)
                {
                    for (int num = 0; num < Habitats.Count; num++)
                    {
                        if (newHabitats.Contains(Habitats[num]))
                        {
                            list2[n][num] = false;
                        }
                        else
                        {
                            list2[n][num] = empire2.ResourceMap.CheckResourcesKnownRaw(Habitats[num]);
                        }
                    }
                }
                else
                {
                    for (int num2 = 0; num2 < Habitats.Count; num2++)
                    {
                        list2[n][num2] = empire2.ResourceMap.CheckResourcesKnownRaw(Habitats[num2]);
                    }
                }
            }
            ReindexHabitats(startIndex, endIndex, movement, newHabitats);
            for (int num3 = 0; num3 < Empires.Count; num3++)
            {
                Empire empire3 = Empires[num3];
                GalaxyResourceMap galaxyResourceMap = new GalaxyResourceMap();
                galaxyResourceMap.InitializeFlags(Habitats.Count, this);
                for (int num4 = 0; num4 < Habitats.Count; num4++)
                {
                    galaxyResourceMap.SetResourcesKnownRaw(Habitats[num4], list[num3][num4]);
                }
                empire3.ResourceMap = galaxyResourceMap;
            }
            for (int num5 = 0; num5 < PirateEmpires.Count; num5++)
            {
                Empire empire4 = PirateEmpires[num5];
                if (empire4.ResourceMap != null)
                {
                    GalaxyResourceMap galaxyResourceMap2 = new GalaxyResourceMap();
                    galaxyResourceMap2.InitializeFlags(Habitats.Count, this);
                    for (int num6 = 0; num6 < Habitats.Count; num6++)
                    {
                        galaxyResourceMap2.SetResourcesKnownRaw(Habitats[num6], list2[num5][num6]);
                    }
                    empire4.ResourceMap = galaxyResourceMap2;
                }
            }
            if (IndependentEmpire.ResourceMap != null)
            {
                GalaxyResourceMap galaxyResourceMap3 = new GalaxyResourceMap();
                galaxyResourceMap3.InitializeFlags(Habitats.Count, this);
                for (int num7 = 0; num7 < Habitats.Count; num7++)
                {
                    galaxyResourceMap3.SetResourcesKnownRaw(Habitats[num7], list3[0][num7]);
                }
                IndependentEmpire.ResourceMap = galaxyResourceMap3;
            }
            _Reindexing = false;
        }

        public bool RemoveHabitat(Habitat habitat)
        {
            int num = -1;
            int num2 = -1;
            if (habitat.Category == HabitatCategoryType.Star || habitat.Category == HabitatCategoryType.GasCloud)
            {
                return false;
            }
            if (habitat.Category == HabitatCategoryType.Planet)
            {
                for (int i = 0; i < Habitats.Count; i++)
                {
                    if (Habitats[i].Category == HabitatCategoryType.Moon && Habitats[i].Parent == habitat)
                    {
                        _ = Habitats[i].HasBeenDestroyed;
                    }
                }
            }
            RemoveSingleHabitat(habitat);
            num = habitat.HabitatIndex;
            num2 = Habitats.Count - 1;
            int movement = -1;
            FixResourceMaps(num, num2, movement, null);
            RemoveNullBuiltObjects();
            return true;
        }

        public void RemoveSystem(SystemInfo system)
        {
            Habitat systemStar = system.SystemStar;
            BuiltObjectList builtObjectList = new BuiltObjectList();
            foreach (BuiltObject builtObject in BuiltObjects)
            {
                if (builtObject != null && builtObject.NearestSystemStar == system.SystemStar)
                {
                    builtObjectList.Add(builtObject);
                }
            }
            foreach (BuiltObject item in builtObjectList)
            {
                item.ClearPreviousMissionRequirements();
                item.CompleteTeardown(this, removeFromEmpire: true);
            }
            Creature[] array = system.Creatures.ToArray();
            Creature[] array2 = array;
            foreach (Creature creature in array2)
            {
                creature.CompleteTeardown();
            }
            system.Creatures.Clear();
            int systemIndex = systemStar.SystemIndex;
            int habitatIndex = system.SystemStar.HabitatIndex;
            int movement = -1 * (system.Habitats.Count + 1);
            Habitat[] array3 = system.Habitats.ToArray();
            Habitat[] array4 = array3;
            foreach (Habitat habitat in array4)
            {
                if (habitat.Category != 0 && habitat.Category != HabitatCategoryType.GasCloud)
                {
                    RemoveSingleHabitat(habitat);
                }
            }
            RemoveSingleHabitat(system.SystemStar);
            if (systemIndex >= 0)
            {
                Systems.RemoveAt(systemIndex);
            }
            int endIndex = Habitats.Count - 1;
            FixResourceMaps(habitatIndex, endIndex, movement, null);
            system.Habitats.Clear();
            system.DominantEmpire = null;
            system.OtherEmpires = null;
            system.Sector = null;
            system.SystemStar = null;
            CompactSystemIndexes(systemIndex, systemIndex);
            RemoveNullBuiltObjects();
        }

        private void RemoveSingleHabitat(Habitat habitat)
        {
            habitat.CompleteTeardown();
        }

        public bool RemoveAsteroidField(HabitatList asteroids, Habitat nearestSystemStar)
        {
            if (nearestSystemStar != null && asteroids != null && asteroids.Count > 0)
            {
                _ = nearestSystemStar.SystemIndex;
                int habitatIndex = asteroids[0].HabitatIndex;
                int movement = -1 * asteroids.Count;
                foreach (Habitat asteroid in asteroids)
                {
                    RemoveSingleHabitat(asteroid);
                }
                int endIndex = Habitats.Count - 1;
                FixResourceMaps(habitatIndex, endIndex, movement, null);
                return true;
            }
            return false;
        }

        public bool AddHabitat(Habitat habitat, Habitat nearestSystemStar)
        {
            if (nearestSystemStar != null)
            {
                int num = -1;
                num = (habitat.HabitatIndex = ((Systems[nearestSystemStar.SystemIndex].Habitats.Count <= 0) ? (Systems[nearestSystemStar.SystemIndex].SystemStar.HabitatIndex + 1) : (Systems[nearestSystemStar.SystemIndex].Habitats[Systems[nearestSystemStar.SystemIndex].Habitats.Count - 1].HabitatIndex + 1)));
                habitat.SystemIndex = nearestSystemStar.SystemIndex;
                Habitats.Insert(num, habitat);
                Systems[nearestSystemStar].Habitats.Add(habitat);
                GalaxyIndex galaxyIndex = ResolveIndex(nearestSystemStar.Xpos, nearestSystemStar.Ypos);
                HabitatIndex[galaxyIndex.X][galaxyIndex.Y].Add(habitat);
                int startIndex = habitat.HabitatIndex + 1;
                int endIndex = Habitats.Count - 1;
                int movement = 1;
                HabitatList habitatList = new HabitatList();
                habitatList.Add(habitat);
                FixResourceMaps(startIndex, endIndex, movement, habitatList);
                SetSystemHabitatExploration(habitat, nearestSystemStar);
                return true;
            }
            return false;
        }

        public bool AddSystem(SystemInfo system)
        {
            if (system.SystemStar == null)
            {
                return false;
            }
            Habitat habitat = FindNearestSystemGasCloudAsteroid(system.SystemStar.Xpos, system.SystemStar.Ypos);
            if (habitat != null)
            {
                double num = CalculateDistance(system.SystemStar.Xpos, system.SystemStar.Ypos, habitat.Xpos, habitat.Ypos);
                if (num < (double)(MaxSolarSystemSize * 4))
                {
                    return false;
                }
            }
            int count = Systems.Count;
            int num2 = 0;
            if (Habitats.Count > 0)
            {
                num2 = Habitats[Habitats.Count - 1].HabitatIndex + 1;
            }
            GalaxyIndex galaxyIndex = ResolveIndex(system.SystemStar.Xpos, system.SystemStar.Ypos);
            system.SystemStar.SystemIndex = count;
            system.SystemStar.HabitatIndex = num2;
            for (int i = 0; i < system.Habitats.Count; i++)
            {
                system.Habitats[i].SystemIndex = count;
                system.Habitats[i].HabitatIndex = num2 + i + 1;
            }
            Habitats.Add(system.SystemStar);
            HabitatIndex[galaxyIndex.X][galaxyIndex.Y].Add(system.SystemStar);
            if (system.Habitats != null && system.Habitats.Count > 0)
            {
                Habitats.AddRange(system.Habitats);
                HabitatIndex[galaxyIndex.X][galaxyIndex.Y].AddRange(system.Habitats);
            }
            system = DetermineSystemInfo(system, null, null, null);
            int endIndex = num2;
            int movement = 0;
            HabitatList habitatList = new HabitatList();
            habitatList.Add(system.SystemStar);
            if (system.Habitats != null && system.Habitats.Count > 0)
            {
                habitatList.AddRange(system.Habitats);
            }
            FixResourceMaps(num2, endIndex, movement, habitatList);
            Systems.Add(system);
            GalaxyIndex galaxyIndex2 = ResolveIndex(system.SystemStar.Xpos, system.SystemStar.Ypos);
            SystemsIndex[galaxyIndex2.X][galaxyIndex2.Y].Add(system);
            AddSystemToEmpires(system);
            return true;
        }

        private void AddSystemToEmpires(SystemInfo system)
        {
            foreach (Empire empire in Empires)
            {
                SystemVisibility systemVisibility = new SystemVisibility();
                systemVisibility.Status = SystemVisibilityStatus.Unexplored;
                systemVisibility.SystemStar = system.SystemStar;
                empire.SystemVisibility.Add(systemVisibility);
            }
            foreach (Empire pirateEmpire in PirateEmpires)
            {
                SystemVisibility systemVisibility2 = new SystemVisibility();
                systemVisibility2.Status = SystemVisibilityStatus.Unexplored;
                systemVisibility2.SystemStar = system.SystemStar;
                pirateEmpire.SystemVisibility.Add(systemVisibility2);
            }
            if (IndependentEmpire != null && IndependentEmpire.SystemVisibility != null)
            {
                SystemVisibility systemVisibility3 = new SystemVisibility();
                systemVisibility3.Status = SystemVisibilityStatus.Unexplored;
                systemVisibility3.SystemStar = system.SystemStar;
                IndependentEmpire.SystemVisibility.Add(systemVisibility3);
            }
        }

        private void SetSystemHabitatExploration(Habitat systemHabitat, Habitat systemStar)
        {
            HabitatList habitatList = new HabitatList();
            habitatList.Add(systemHabitat);
            SetSystemHabitatsExploration(habitatList, systemStar);
        }

        private void SetSystemHabitatsExploration(HabitatList systemHabitats, Habitat systemStar)
        {
            foreach (Empire empire in Empires)
            {
                if (empire.ResourceMap == null)
                {
                    continue;
                }
                SystemVisibilityStatus status = empire.SystemVisibility[systemStar.SystemIndex].Status;
                if (status != SystemVisibilityStatus.Explored && status != SystemVisibilityStatus.Visible)
                {
                    continue;
                }
                foreach (Habitat systemHabitat in systemHabitats)
                {
                    empire.ResourceMap.SetResourcesKnown(systemHabitat, known: true);
                }
            }
            foreach (Empire pirateEmpire in PirateEmpires)
            {
                if (pirateEmpire.SystemVisibility == null || pirateEmpire.ResourceMap == null)
                {
                    continue;
                }
                SystemVisibilityStatus status2 = pirateEmpire.SystemVisibility[systemStar.SystemIndex].Status;
                if (status2 != SystemVisibilityStatus.Explored && status2 != SystemVisibilityStatus.Visible)
                {
                    continue;
                }
                foreach (Habitat systemHabitat2 in systemHabitats)
                {
                    pirateEmpire.ResourceMap.SetResourcesKnown(systemHabitat2, known: true);
                }
            }
            if (IndependentEmpire.SystemVisibility == null || IndependentEmpire.ResourceMap == null)
            {
                return;
            }
            SystemVisibilityStatus status3 = IndependentEmpire.SystemVisibility[systemStar.SystemIndex].Status;
            if (status3 != SystemVisibilityStatus.Explored && status3 != SystemVisibilityStatus.Visible)
            {
                return;
            }
            foreach (Habitat systemHabitat3 in systemHabitats)
            {
                IndependentEmpire.ResourceMap.SetResourcesKnown(systemHabitat3, known: true);
            }
        }

        public static int ResolveHyperDriveIndex(Component component)
        {
            return component.SpecialImageIndex;
        }

        private string GenerateGoldAsteroidName(Habitat sun)
        {
            string[] array = new string[7] { "Concealed", "Lost", "Golden", "Precious", "Glittering", "Hidden", "Miner's" };
            string[] array2 = new string[9] { "Hoard", "Rock", "Treasure", "Nugget", "Fortune", "Folly", "Legend", "Star", "Prize" };
            string empty = string.Empty;
            if (sun != null && sun.Type != HabitatType.SuperNova && Rnd.Next(0, 3) == 1)
            {
                if (Rnd.Next(0, 2) == 1)
                {
                    return sun.Name + " " + array2[Rnd.Next(0, array2.Length)];
                }
                return array2[Rnd.Next(0, array2.Length)] + " of " + sun.Name;
            }
            return array[Rnd.Next(0, array.Length)] + " " + array2[Rnd.Next(0, array2.Length)];
        }

        private string GenerateCrystalAsteroidName(Habitat sun)
        {
            string[] array = new string[8] { "Concealed", "Lost", "Shining", "Precious", "Glittering", "Hidden", "Miner's", "Crystal" };
            string[] array2 = new string[10] { "Hoard", "Rock", "Treasure", "Jewel", "Fortune", "Folly", "Legend", "Star", "Prize", "Gem" };
            string empty = string.Empty;
            if (sun != null && sun.Type != HabitatType.SuperNova && Rnd.Next(0, 3) == 1)
            {
                if (Rnd.Next(0, 2) == 1)
                {
                    return sun.Name + " " + array2[Rnd.Next(0, array2.Length)];
                }
                return array2[Rnd.Next(0, array2.Length)] + " of " + sun.Name;
            }
            return array[Rnd.Next(0, array.Length)] + " " + array2[Rnd.Next(0, array2.Length)];
        }

        public Habitat GenerateTreasureAsteroid(Habitat sun, double orbitAngle, int orbitDistance, bool orbitDirection, int orbitSpeed, bool doInitialMove)
        {
            Habitat habitat = null;
            ResourceDefinition byName = ResourceSystem.Resources.GetByName("Gold");
            ResourceDefinition byName2 = ResourceSystem.Resources.GetByName("Dilithium Crystal");
            if (byName != null || byName2 != null)
            {
                habitat = new Habitat(this, HabitatCategoryType.Asteroid, HabitatType.Metal, TextResolver.GetText("Asteroid"), sun, orbitAngle, orbitDirection, orbitDistance, orbitSpeed, doInitialMove);
                habitat.Diameter = (short)Rnd.Next(35, 50);
                habitat.LandscapePictureRef = (short)(GalaxyImages.LandscapeImageOffsetBarrenRock + Rnd.Next(0, GalaxyImages.LandscapeImageCountBarrenRock));
                if (habitat.Resources == null)
                {
                    habitat.Resources = new HabitatResourceList();
                }
                short abundance = (short)Rnd.Next(800, 1000);
                if (byName2 == null)
                {
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsGold + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsGold));
                    habitat.Resources.Add(new HabitatResource(byName.ResourceID, abundance));
                    habitat.Name = GenerateGoldAsteroidName(sun);
                }
                else if (byName == null)
                {
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsCrystal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsCrystal));
                    habitat.Resources.Add(new HabitatResource(byName2.ResourceID, abundance));
                    habitat.Name = GenerateCrystalAsteroidName(sun);
                }
                else if (Rnd.Next(0, 2) == 1)
                {
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsGold + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsGold));
                    habitat.Resources.Add(new HabitatResource(byName.ResourceID, abundance));
                    habitat.Name = GenerateGoldAsteroidName(sun);
                }
                else
                {
                    habitat.PictureRef = (short)(GalaxyImages.HabitatImageOffsetAsteroidsCrystal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsCrystal));
                    habitat.Resources.Add(new HabitatResource(byName2.ResourceID, abundance));
                    habitat.Name = GenerateCrystalAsteroidName(sun);
                }
                habitat.ScenicFactor = (float)(0.3 + Rnd.NextDouble() * 0.3);
            }
            return habitat;
        }

        public HabitatList GenerateAsteroidField(int asteroidCount, double x, double y, bool orbitDirection, int orbitSpeed, double distanceSpreadFactor, double arcSpreadFactor, ResourceDefinitionList randomOrderedResources)
        {
            Habitat habitat = FindNearestSystemGasCloudAsteroid(x, y);
            int orbitDistance = (int)CalculateDistance(habitat.Xpos, habitat.Ypos, x, y);
            return GenerateAsteroidField(asteroidCount, x, y, habitat, orbitDirection, orbitSpeed, orbitDistance, distanceSpreadFactor, arcSpreadFactor, HabitatType.BarrenRock, randomOrderedResources);
        }

        public HabitatList GenerateAsteroidField(int asteroidCount, double x, double y, bool orbitDirection, int orbitSpeed, double distanceSpreadFactor, double arcSpreadFactor)
        {
            Habitat habitat = FindNearestSystemGasCloudAsteroid(x, y);
            int orbitDistance = (int)CalculateDistance(habitat.Xpos, habitat.Ypos, x, y);
            return GenerateAsteroidField(asteroidCount, x, y, habitat, orbitDirection, orbitSpeed, orbitDistance, distanceSpreadFactor, arcSpreadFactor, HabitatType.BarrenRock);
        }

        public HabitatList GenerateAsteroidField(int asteroidCount, double x, double y, Habitat nearestSystemStar, bool orbitDirection, int orbitSpeed, int orbitDistance, double distanceSpreadFactor, double arcSpreadFactor, HabitatType type)
        {
            return GenerateAsteroidField(asteroidCount, x, y, nearestSystemStar, orbitDirection, orbitSpeed, orbitDistance, distanceSpreadFactor, arcSpreadFactor, type, null);
        }

        public HabitatList GenerateAsteroidField(int asteroidCount, double x, double y, Habitat nearestSystemStar, bool orbitDirection, int orbitSpeed, int orbitDistance, double distanceSpreadFactor, double arcSpreadFactor, HabitatType type, ResourceDefinitionList randomOrderedResources)
        {
            HabitatList habitatList = new HabitatList();
            double num = CalculateAngleFromCoords(x, y, nearestSystemStar.Xpos, nearestSystemStar.Ypos, orbitDistance);
            double num2 = arcSpreadFactor * arcSpreadFactor;
            double val = (double)(MaxSolarSystemSize - orbitDistance) / (double)(MaxSolarSystemSize / 3);
            val = Math.Min(3.0, Math.Max(0.3, val));
            num2 *= val;
            double num3 = Math.Max(0.06, 0.13 * ((double)asteroidCount / 350.0));
            double num4 = Math.Max(250.0, 500.0 * ((double)asteroidCount / 350.0) * distanceSpreadFactor);
            double num5 = 0.4;
            double num6 = num5 * -1.0;
            double num7 = (double)orbitDistance + num6 * num4 * distanceSpreadFactor;
            double num8 = (double)orbitDistance + num5 * num4 * distanceSpreadFactor;
            double num9 = num + num6 * num3 * num2;
            double num10 = num + num5 * num3 * num2;
            if (num9 > num10)
            {
                double num11 = num10;
                num10 = num9;
                num9 = num11;
            }
            for (int i = 0; i < asteroidCount; i++)
            {
                int num12 = Rnd.Next(10, 25);
                if (Rnd.Next(0, 30) == 5)
                {
                    num12 = Rnd.Next(26, 45);
                }
                int num13 = GalaxyImages.HabitatImageOffsetAsteroidsNormal + Rnd.Next(0, GalaxyImages.HabitatImageCountAsteroidsNormal);
                int num14 = orbitDistance + (int)((Rnd.NextDouble() - 0.5) * Rnd.NextDouble() * 2.0 * num4 * distanceSpreadFactor);
                double num15 = num + (Rnd.NextDouble() - 0.5) * Rnd.NextDouble() * 2.0 * num3 * num2;
                if ((double)num14 > num7 && (double)num14 < num8 && num15 > num9 && num15 < num10)
                {
                    double num16 = Rnd.NextDouble() * 0.8 - 0.4;
                    double num17 = Rnd.NextDouble() * 0.8 - 0.4;
                    num14 = orbitDistance + (int)(num16 * num4 * distanceSpreadFactor);
                    num15 = num + num17 * num3 * num2;
                }
                string name = GenerateCodeName() + ", " + TextResolver.GetText("Asteroid Field");
                Habitat habitat = new Habitat(this, HabitatCategoryType.Asteroid, HabitatType.BarrenRock, name, nearestSystemStar, num15, orbitDirection, num14, orbitSpeed, doInitialMove: false);
                habitat.Diameter = (short)num12;
                habitat.PictureRef = (short)num13;
                habitat.LandscapePictureRef = -1;
                int minimumResourceCount = 0;
                if (type == HabitatType.Metal && Rnd.Next(0, 3) > 0)
                {
                    minimumResourceCount = 1;
                }
                habitat = SelectResources(habitat, minimumResourceCount, null, 0, randomOrderedResources);
                habitat.Type = type;
                SelectHabitatPictures(habitat);
                if (Rnd.Next(0, 1300) == 1)
                {
                    habitat = GenerateTreasureAsteroid(nearestSystemStar, num15, num14, orbitDirection, orbitSpeed, doInitialMove: false);
                }
                habitatList.Add(habitat);
            }
            return habitatList;
        }

        public bool AddAsteroidField(HabitatList asteroids, Habitat nearestSystemStar)
        {
            if (nearestSystemStar != null && asteroids != null && asteroids.Count > 0)
            {
                int num = Habitats.Count;
                int num2 = Habitats.IndexOf(nearestSystemStar);
                for (int i = num2 + 1; i < Habitats.Count; i++)
                {
                    if (Habitats[i].Parent == null)
                    {
                        num = i;
                        break;
                    }
                }
                GalaxyIndex galaxyIndex = ResolveIndex(nearestSystemStar.Xpos, nearestSystemStar.Ypos);
                for (int j = 0; j < asteroids.Count; j++)
                {
                    asteroids[j].HabitatIndex = num + j;
                    asteroids[j].SystemIndex = nearestSystemStar.SystemIndex;
                }
                Habitats.InsertRange(num, asteroids);
                Systems[nearestSystemStar].Habitats.AddRange(asteroids);
                HabitatIndex[galaxyIndex.X][galaxyIndex.Y].AddRange(asteroids);
                int startIndex = num + asteroids.Count;
                int endIndex = Habitats.Count - 1;
                int count = asteroids.Count;
                if (asteroids.Count % 8 == 0)
                {
                    FixResourceMapsByteSplicing(startIndex, endIndex, asteroids);
                }
                else
                {
                    FixResourceMaps(startIndex, endIndex, count, asteroids);
                }
                SetSystemHabitatsExploration(asteroids, nearestSystemStar);
                return true;
            }
            return false;
        }

        private void CompactSystemIndexes(int startIndex, int endIndex)
        {
            int num = endIndex - startIndex + 1;
            for (int i = 0; i < Habitats.Count; i++)
            {
                if (Habitats[i].SystemIndex >= startIndex)
                {
                    Habitats[i].SystemIndex -= num;
                }
            }
        }

        private void ReindexHabitats(int startIndex, int endIndex, int movement, HabitatList newHabitats)
        {
            if (newHabitats == null || newHabitats.Count == 0)
            {
                for (int i = startIndex; i <= endIndex; i++)
                {
                    if (i < Habitats.Count)
                    {
                        Habitats[i].HabitatIndex += movement;
                    }
                }
                return;
            }
            for (int j = startIndex; j <= endIndex; j++)
            {
                if (j < Habitats.Count && !newHabitats.Contains(Habitats[j]))
                {
                    Habitats[j].HabitatIndex += movement;
                }
            }
        }

        public static void TEST_SteamAchievements(string applicationStartupPath)
        {
            SteamAPI.Initialize(applicationStartupPath);
            SteamAPI.SetAchievementIfNecessary(new Achievement(AchievementType.OwnOperationalPlanetDestroyer, 0, null));
            SteamAPI.Shutdown();
        }
    }
}
